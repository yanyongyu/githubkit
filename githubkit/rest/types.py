"""DO NOT EDIT THIS FILE!

This file is automatically @generated by githubkit using the follow command:

    python -m codegen && isort . && black .

See https://github.com/github/rest-api-description for more information.
"""


from __future__ import annotations

from datetime import date, datetime
from typing import Any, List, Union, Literal
from typing_extensions import TypedDict, NotRequired


class RootType(TypedDict):
    """Root"""

    current_user_url: str
    current_user_authorizations_html_url: str
    authorizations_url: str
    code_search_url: str
    commit_search_url: str
    emails_url: str
    emojis_url: str
    events_url: str
    feeds_url: str
    followers_url: str
    following_url: str
    gists_url: str
    hub_url: str
    issue_search_url: str
    issues_url: str
    keys_url: str
    label_search_url: str
    notifications_url: str
    organization_url: str
    organization_repositories_url: str
    organization_teams_url: str
    public_gists_url: str
    rate_limit_url: str
    repository_url: str
    repository_search_url: str
    current_user_repositories_url: str
    starred_url: str
    starred_gists_url: str
    topic_search_url: NotRequired[str]
    user_url: str
    user_organizations_url: str
    user_repositories_url: str
    user_search_url: str


class SimpleUserType(TypedDict):
    """Simple User

    A GitHub user.
    """

    name: NotRequired[Union[str, None]]
    email: NotRequired[Union[str, None]]
    login: str
    id: int
    node_id: str
    avatar_url: str
    gravatar_id: Union[str, None]
    url: str
    html_url: str
    followers_url: str
    following_url: str
    gists_url: str
    starred_url: str
    subscriptions_url: str
    organizations_url: str
    repos_url: str
    events_url: str
    received_events_url: str
    type: str
    site_admin: bool
    starred_at: NotRequired[str]


class IntegrationType(TypedDict):
    """GitHub app

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    id: int
    slug: NotRequired[str]
    node_id: str
    owner: Union[None, SimpleUserType]
    name: str
    description: Union[str, None]
    external_url: str
    html_url: str
    created_at: datetime
    updated_at: datetime
    permissions: IntegrationPropPermissionsType
    events: List[str]
    installations_count: NotRequired[int]
    client_id: NotRequired[str]
    client_secret: NotRequired[str]
    webhook_secret: NotRequired[Union[str, None]]
    pem: NotRequired[str]


class IntegrationPropPermissionsType(TypedDict):
    """IntegrationPropPermissions

    The set of permissions for the GitHub app

    Examples:
        {'issues': 'read', 'deployments': 'write'}
    """

    issues: NotRequired[str]
    checks: NotRequired[str]
    metadata: NotRequired[str]
    contents: NotRequired[str]
    deployments: NotRequired[str]


class BasicErrorType(TypedDict):
    """Basic Error

    Basic Error
    """

    message: NotRequired[str]
    documentation_url: NotRequired[str]
    url: NotRequired[str]
    status: NotRequired[str]


class ValidationErrorSimpleType(TypedDict):
    """Validation Error Simple

    Validation Error Simple
    """

    message: str
    documentation_url: str
    errors: NotRequired[List[str]]


class WebhookConfigType(TypedDict):
    """Webhook Configuration

    Configuration object of the webhook
    """

    url: NotRequired[str]
    content_type: NotRequired[str]
    secret: NotRequired[str]
    insecure_ssl: NotRequired[Union[str, float]]


class HookDeliveryItemType(TypedDict):
    """Simple webhook delivery

    Delivery made by a webhook, without request and response information.
    """

    id: int
    guid: str
    delivered_at: datetime
    redelivery: bool
    duration: float
    status: str
    status_code: int
    event: str
    action: Union[str, None]
    installation_id: Union[int, None]
    repository_id: Union[int, None]


class ScimErrorType(TypedDict):
    """Scim Error

    Scim Error
    """

    message: NotRequired[Union[str, None]]
    documentation_url: NotRequired[Union[str, None]]
    detail: NotRequired[Union[str, None]]
    status: NotRequired[int]
    scim_type: NotRequired[Union[str, None]]
    schemas: NotRequired[List[str]]


class ValidationErrorType(TypedDict):
    """Validation Error

    Validation Error
    """

    message: str
    documentation_url: str
    errors: NotRequired[List[ValidationErrorPropErrorsItemsType]]


class ValidationErrorPropErrorsItemsType(TypedDict):
    """ValidationErrorPropErrorsItems"""

    resource: NotRequired[str]
    field: NotRequired[str]
    message: NotRequired[str]
    code: str
    index: NotRequired[int]
    value: NotRequired[Union[str, None, int, None, List[str], None]]


class HookDeliveryType(TypedDict):
    """Webhook delivery

    Delivery made by a webhook.
    """

    id: int
    guid: str
    delivered_at: datetime
    redelivery: bool
    duration: float
    status: str
    status_code: int
    event: str
    action: Union[str, None]
    installation_id: Union[int, None]
    repository_id: Union[int, None]
    url: NotRequired[str]
    request: HookDeliveryPropRequestType
    response: HookDeliveryPropResponseType


class HookDeliveryPropRequestType(TypedDict):
    """HookDeliveryPropRequest"""

    headers: Union[HookDeliveryPropRequestPropHeadersType, None]
    payload: Union[HookDeliveryPropRequestPropPayloadType, None]


class HookDeliveryPropRequestPropHeadersType(TypedDict):
    """HookDeliveryPropRequestPropHeaders

    The request headers sent with the webhook delivery.
    """


class HookDeliveryPropRequestPropPayloadType(TypedDict):
    """HookDeliveryPropRequestPropPayload

    The webhook payload.
    """


class HookDeliveryPropResponseType(TypedDict):
    """HookDeliveryPropResponse"""

    headers: Union[HookDeliveryPropResponsePropHeadersType, None]
    payload: Union[str, None]


class HookDeliveryPropResponsePropHeadersType(TypedDict):
    """HookDeliveryPropResponsePropHeaders

    The response headers received when the delivery was made.
    """


class EnterpriseType(TypedDict):
    """Enterprise

    An enterprise on GitHub.
    """

    description: NotRequired[Union[str, None]]
    html_url: str
    website_url: NotRequired[Union[str, None]]
    id: int
    node_id: str
    name: str
    slug: str
    created_at: Union[datetime, None]
    updated_at: Union[datetime, None]
    avatar_url: str


class IntegrationInstallationRequestType(TypedDict):
    """Integration Installation Request

    Request to install an integration on a target
    """

    id: int
    node_id: NotRequired[str]
    account: Union[SimpleUserType, EnterpriseType]
    requester: SimpleUserType
    created_at: datetime


class AppPermissionsType(TypedDict):
    """App Permissions

    The permissions granted to the user-to-server access token.

    Examples:
        {'contents': 'read', 'issues': 'read', 'deployments': 'write', 'single_file':
    'read'}
    """

    actions: NotRequired[Literal["read", "write"]]
    administration: NotRequired[Literal["read", "write"]]
    checks: NotRequired[Literal["read", "write"]]
    contents: NotRequired[Literal["read", "write"]]
    deployments: NotRequired[Literal["read", "write"]]
    environments: NotRequired[Literal["read", "write"]]
    issues: NotRequired[Literal["read", "write"]]
    metadata: NotRequired[Literal["read", "write"]]
    packages: NotRequired[Literal["read", "write"]]
    pages: NotRequired[Literal["read", "write"]]
    pull_requests: NotRequired[Literal["read", "write"]]
    repository_hooks: NotRequired[Literal["read", "write"]]
    repository_projects: NotRequired[Literal["read", "write", "admin"]]
    secret_scanning_alerts: NotRequired[Literal["read", "write"]]
    secrets: NotRequired[Literal["read", "write"]]
    security_events: NotRequired[Literal["read", "write"]]
    single_file: NotRequired[Literal["read", "write"]]
    statuses: NotRequired[Literal["read", "write"]]
    vulnerability_alerts: NotRequired[Literal["read", "write"]]
    workflows: NotRequired[Literal["write"]]
    members: NotRequired[Literal["read", "write"]]
    organization_administration: NotRequired[Literal["read", "write"]]
    organization_custom_roles: NotRequired[Literal["read", "write"]]
    organization_announcement_banners: NotRequired[Literal["read", "write"]]
    organization_hooks: NotRequired[Literal["read", "write"]]
    organization_personal_access_tokens: NotRequired[Literal["read", "write"]]
    organization_personal_access_token_requests: NotRequired[Literal["read", "write"]]
    organization_plan: NotRequired[Literal["read"]]
    organization_projects: NotRequired[Literal["read", "write", "admin"]]
    organization_packages: NotRequired[Literal["read", "write"]]
    organization_secrets: NotRequired[Literal["read", "write"]]
    organization_self_hosted_runners: NotRequired[Literal["read", "write"]]
    organization_user_blocking: NotRequired[Literal["read", "write"]]
    team_discussions: NotRequired[Literal["read", "write"]]


class InstallationType(TypedDict):
    """Installation

    Installation
    """

    id: int
    account: Union[SimpleUserType, EnterpriseType, None]
    repository_selection: Literal["all", "selected"]
    access_tokens_url: str
    repositories_url: str
    html_url: str
    app_id: int
    target_id: int
    target_type: str
    permissions: AppPermissionsType
    events: List[str]
    created_at: datetime
    updated_at: datetime
    single_file_name: Union[str, None]
    has_multiple_single_files: NotRequired[bool]
    single_file_paths: NotRequired[List[str]]
    app_slug: str
    suspended_by: Union[None, SimpleUserType]
    suspended_at: Union[datetime, None]
    contact_email: NotRequired[Union[str, None]]


class LicenseSimpleType(TypedDict):
    """License Simple

    License Simple
    """

    key: str
    name: str
    url: Union[str, None]
    spdx_id: Union[str, None]
    node_id: str
    html_url: NotRequired[str]


class RepositoryType(TypedDict):
    """Repository

    A repository on GitHub.
    """

    id: int
    node_id: str
    name: str
    full_name: str
    license_: Union[None, LicenseSimpleType]
    organization: NotRequired[Union[None, SimpleUserType]]
    forks: int
    permissions: NotRequired[RepositoryPropPermissionsType]
    owner: SimpleUserType
    private: bool
    html_url: str
    description: Union[str, None]
    fork: bool
    url: str
    archive_url: str
    assignees_url: str
    blobs_url: str
    branches_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    deployments_url: str
    downloads_url: str
    events_url: str
    forks_url: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    languages_url: str
    merges_url: str
    milestones_url: str
    notifications_url: str
    pulls_url: str
    releases_url: str
    ssh_url: str
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    tags_url: str
    teams_url: str
    trees_url: str
    clone_url: str
    mirror_url: Union[str, None]
    hooks_url: str
    svn_url: str
    homepage: Union[str, None]
    language: Union[str, None]
    forks_count: int
    stargazers_count: int
    watchers_count: int
    size: int
    default_branch: str
    open_issues_count: int
    is_template: NotRequired[bool]
    topics: NotRequired[List[str]]
    has_issues: bool
    has_projects: bool
    has_wiki: bool
    has_pages: bool
    has_downloads: bool
    has_discussions: NotRequired[bool]
    archived: bool
    disabled: bool
    visibility: NotRequired[str]
    pushed_at: Union[datetime, None]
    created_at: Union[datetime, None]
    updated_at: Union[datetime, None]
    allow_rebase_merge: NotRequired[bool]
    template_repository: NotRequired[Union[RepositoryPropTemplateRepositoryType, None]]
    temp_clone_token: NotRequired[Union[str, None]]
    allow_squash_merge: NotRequired[bool]
    allow_auto_merge: NotRequired[bool]
    delete_branch_on_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    use_squash_pr_title_as_default: NotRequired[bool]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    allow_merge_commit: NotRequired[bool]
    allow_forking: NotRequired[bool]
    web_commit_signoff_required: NotRequired[bool]
    subscribers_count: NotRequired[int]
    network_count: NotRequired[int]
    open_issues: int
    watchers: int
    master_branch: NotRequired[str]
    starred_at: NotRequired[str]
    anonymous_access_enabled: NotRequired[bool]


class RepositoryPropPermissionsType(TypedDict):
    """RepositoryPropPermissions"""

    admin: bool
    pull: bool
    triage: NotRequired[bool]
    push: bool
    maintain: NotRequired[bool]


class RepositoryPropTemplateRepositoryPropOwnerType(TypedDict):
    """RepositoryPropTemplateRepositoryPropOwner"""

    login: NotRequired[str]
    id: NotRequired[int]
    node_id: NotRequired[str]
    avatar_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    url: NotRequired[str]
    html_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    organizations_url: NotRequired[str]
    repos_url: NotRequired[str]
    events_url: NotRequired[str]
    received_events_url: NotRequired[str]
    type: NotRequired[str]
    site_admin: NotRequired[bool]


class RepositoryPropTemplateRepositoryPropPermissionsType(TypedDict):
    """RepositoryPropTemplateRepositoryPropPermissions"""

    admin: NotRequired[bool]
    maintain: NotRequired[bool]
    push: NotRequired[bool]
    triage: NotRequired[bool]
    pull: NotRequired[bool]


class RepositoryPropTemplateRepositoryType(TypedDict):
    """RepositoryPropTemplateRepository"""

    id: NotRequired[int]
    node_id: NotRequired[str]
    name: NotRequired[str]
    full_name: NotRequired[str]
    owner: NotRequired[RepositoryPropTemplateRepositoryPropOwnerType]
    private: NotRequired[bool]
    html_url: NotRequired[str]
    description: NotRequired[str]
    fork: NotRequired[bool]
    url: NotRequired[str]
    archive_url: NotRequired[str]
    assignees_url: NotRequired[str]
    blobs_url: NotRequired[str]
    branches_url: NotRequired[str]
    collaborators_url: NotRequired[str]
    comments_url: NotRequired[str]
    commits_url: NotRequired[str]
    compare_url: NotRequired[str]
    contents_url: NotRequired[str]
    contributors_url: NotRequired[str]
    deployments_url: NotRequired[str]
    downloads_url: NotRequired[str]
    events_url: NotRequired[str]
    forks_url: NotRequired[str]
    git_commits_url: NotRequired[str]
    git_refs_url: NotRequired[str]
    git_tags_url: NotRequired[str]
    git_url: NotRequired[str]
    issue_comment_url: NotRequired[str]
    issue_events_url: NotRequired[str]
    issues_url: NotRequired[str]
    keys_url: NotRequired[str]
    labels_url: NotRequired[str]
    languages_url: NotRequired[str]
    merges_url: NotRequired[str]
    milestones_url: NotRequired[str]
    notifications_url: NotRequired[str]
    pulls_url: NotRequired[str]
    releases_url: NotRequired[str]
    ssh_url: NotRequired[str]
    stargazers_url: NotRequired[str]
    statuses_url: NotRequired[str]
    subscribers_url: NotRequired[str]
    subscription_url: NotRequired[str]
    tags_url: NotRequired[str]
    teams_url: NotRequired[str]
    trees_url: NotRequired[str]
    clone_url: NotRequired[str]
    mirror_url: NotRequired[str]
    hooks_url: NotRequired[str]
    svn_url: NotRequired[str]
    homepage: NotRequired[str]
    language: NotRequired[str]
    forks_count: NotRequired[int]
    stargazers_count: NotRequired[int]
    watchers_count: NotRequired[int]
    size: NotRequired[int]
    default_branch: NotRequired[str]
    open_issues_count: NotRequired[int]
    is_template: NotRequired[bool]
    topics: NotRequired[List[str]]
    has_issues: NotRequired[bool]
    has_projects: NotRequired[bool]
    has_wiki: NotRequired[bool]
    has_pages: NotRequired[bool]
    has_downloads: NotRequired[bool]
    archived: NotRequired[bool]
    disabled: NotRequired[bool]
    visibility: NotRequired[str]
    pushed_at: NotRequired[str]
    created_at: NotRequired[str]
    updated_at: NotRequired[str]
    permissions: NotRequired[RepositoryPropTemplateRepositoryPropPermissionsType]
    allow_rebase_merge: NotRequired[bool]
    temp_clone_token: NotRequired[Union[str, None]]
    allow_squash_merge: NotRequired[bool]
    allow_auto_merge: NotRequired[bool]
    delete_branch_on_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    use_squash_pr_title_as_default: NotRequired[bool]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    allow_merge_commit: NotRequired[bool]
    subscribers_count: NotRequired[int]
    network_count: NotRequired[int]


class InstallationTokenType(TypedDict):
    """Installation Token

    Authentication token for a GitHub App installed on a user or org.
    """

    token: str
    expires_at: str
    permissions: NotRequired[AppPermissionsType]
    repository_selection: NotRequired[Literal["all", "selected"]]
    repositories: NotRequired[List[RepositoryType]]
    single_file: NotRequired[str]
    has_multiple_single_files: NotRequired[bool]
    single_file_paths: NotRequired[List[str]]


class ScopedInstallationType(TypedDict):
    """Scoped Installation"""

    permissions: AppPermissionsType
    repository_selection: Literal["all", "selected"]
    single_file_name: Union[str, None]
    has_multiple_single_files: NotRequired[bool]
    single_file_paths: NotRequired[List[str]]
    repositories_url: str
    account: SimpleUserType


class AuthorizationType(TypedDict):
    """Authorization

    The authorization for an OAuth app, GitHub App, or a Personal Access Token.
    """

    id: int
    url: str
    scopes: Union[List[str], None]
    token: str
    token_last_eight: Union[str, None]
    hashed_token: Union[str, None]
    app: AuthorizationPropAppType
    note: Union[str, None]
    note_url: Union[str, None]
    updated_at: datetime
    created_at: datetime
    fingerprint: Union[str, None]
    user: NotRequired[Union[None, SimpleUserType]]
    installation: NotRequired[Union[None, ScopedInstallationType]]
    expires_at: Union[datetime, None]


class AuthorizationPropAppType(TypedDict):
    """AuthorizationPropApp"""

    client_id: str
    name: str
    url: str


class CodeOfConductType(TypedDict):
    """Code Of Conduct

    Code Of Conduct
    """

    key: str
    name: str
    url: str
    body: NotRequired[str]
    html_url: Union[str, None]


class DependabotAlertPackageType(TypedDict):
    """DependabotAlertPackage

    Details for the vulnerable package.
    """

    ecosystem: str
    name: str


class DependabotAlertSecurityVulnerabilityType(TypedDict):
    """DependabotAlertSecurityVulnerability

    Details pertaining to one vulnerable version range for the advisory.
    """

    package: DependabotAlertPackageType
    severity: Literal["low", "medium", "high", "critical"]
    vulnerable_version_range: str
    first_patched_version: Union[
        DependabotAlertSecurityVulnerabilityPropFirstPatchedVersionType, None
    ]


class DependabotAlertSecurityVulnerabilityPropFirstPatchedVersionType(TypedDict):
    """DependabotAlertSecurityVulnerabilityPropFirstPatchedVersion

    Details pertaining to the package version that patches this vulnerability.
    """

    identifier: str


class DependabotAlertSecurityAdvisoryType(TypedDict):
    """DependabotAlertSecurityAdvisory

    Details for the GitHub Security Advisory.
    """

    ghsa_id: str
    cve_id: Union[str, None]
    summary: str
    description: str
    vulnerabilities: List[DependabotAlertSecurityVulnerabilityType]
    severity: Literal["low", "medium", "high", "critical"]
    cvss: DependabotAlertSecurityAdvisoryPropCvssType
    cwes: List[DependabotAlertSecurityAdvisoryPropCwesItemsType]
    identifiers: List[DependabotAlertSecurityAdvisoryPropIdentifiersItemsType]
    references: List[DependabotAlertSecurityAdvisoryPropReferencesItemsType]
    published_at: datetime
    updated_at: datetime
    withdrawn_at: Union[datetime, None]


class DependabotAlertSecurityAdvisoryPropCvssType(TypedDict):
    """DependabotAlertSecurityAdvisoryPropCvss

    Details for the advisory pertaining to the Common Vulnerability Scoring System.
    """

    score: float
    vector_string: Union[str, None]


class DependabotAlertSecurityAdvisoryPropCwesItemsType(TypedDict):
    """DependabotAlertSecurityAdvisoryPropCwesItems

    A CWE weakness assigned to the advisory.
    """

    cwe_id: str
    name: str


class DependabotAlertSecurityAdvisoryPropIdentifiersItemsType(TypedDict):
    """DependabotAlertSecurityAdvisoryPropIdentifiersItems

    An advisory identifier.
    """

    type: Literal["CVE", "GHSA"]
    value: str


class DependabotAlertSecurityAdvisoryPropReferencesItemsType(TypedDict):
    """DependabotAlertSecurityAdvisoryPropReferencesItems

    A link to additional advisory information.
    """

    url: str


class SimpleRepositoryType(TypedDict):
    """Simple Repository

    A GitHub repository.
    """

    id: int
    node_id: str
    name: str
    full_name: str
    owner: SimpleUserType
    private: bool
    html_url: str
    description: Union[str, None]
    fork: bool
    url: str
    archive_url: str
    assignees_url: str
    blobs_url: str
    branches_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    deployments_url: str
    downloads_url: str
    events_url: str
    forks_url: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    languages_url: str
    merges_url: str
    milestones_url: str
    notifications_url: str
    pulls_url: str
    releases_url: str
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    tags_url: str
    teams_url: str
    trees_url: str
    hooks_url: str


class DependabotAlertWithRepositoryType(TypedDict):
    """DependabotAlertWithRepository

    A Dependabot alert.
    """

    number: int
    state: Literal["auto_dismissed", "dismissed", "fixed", "open"]
    dependency: DependabotAlertWithRepositoryPropDependencyType
    security_advisory: DependabotAlertSecurityAdvisoryType
    security_vulnerability: DependabotAlertSecurityVulnerabilityType
    url: str
    html_url: str
    created_at: datetime
    updated_at: datetime
    dismissed_at: Union[datetime, None]
    dismissed_by: Union[None, SimpleUserType]
    dismissed_reason: Union[
        None,
        Literal[
            "fix_started", "inaccurate", "no_bandwidth", "not_used", "tolerable_risk"
        ],
    ]
    dismissed_comment: Union[str, None]
    fixed_at: Union[datetime, None]
    auto_dismissed_at: NotRequired[Union[datetime, None]]
    repository: SimpleRepositoryType


class DependabotAlertWithRepositoryPropDependencyType(TypedDict):
    """DependabotAlertWithRepositoryPropDependency

    Details for the vulnerable dependency.
    """

    package: NotRequired[DependabotAlertPackageType]
    manifest_path: NotRequired[str]
    scope: NotRequired[Union[None, Literal["development", "runtime"]]]


class OrganizationSecretScanningAlertType(TypedDict):
    """OrganizationSecretScanningAlert"""

    number: NotRequired[int]
    created_at: NotRequired[datetime]
    updated_at: NotRequired[Union[None, datetime]]
    url: NotRequired[str]
    html_url: NotRequired[str]
    locations_url: NotRequired[str]
    state: NotRequired[Literal["open", "resolved"]]
    resolution: NotRequired[
        Union[None, Literal["false_positive", "wont_fix", "revoked", "used_in_tests"]]
    ]
    resolved_at: NotRequired[Union[datetime, None]]
    resolved_by: NotRequired[Union[None, SimpleUserType]]
    secret_type: NotRequired[str]
    secret_type_display_name: NotRequired[str]
    secret: NotRequired[str]
    repository: NotRequired[SimpleRepositoryType]
    push_protection_bypassed: NotRequired[Union[bool, None]]
    push_protection_bypassed_by: NotRequired[Union[None, SimpleUserType]]
    push_protection_bypassed_at: NotRequired[Union[datetime, None]]
    resolution_comment: NotRequired[Union[str, None]]


class ActorType(TypedDict):
    """Actor

    Actor
    """

    id: int
    login: str
    display_login: NotRequired[str]
    gravatar_id: Union[str, None]
    url: str
    avatar_url: str


class MilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    url: str
    html_url: str
    labels_url: str
    id: int
    node_id: str
    number: int
    state: Literal["open", "closed"]
    title: str
    description: Union[str, None]
    creator: Union[None, SimpleUserType]
    open_issues: int
    closed_issues: int
    created_at: datetime
    updated_at: datetime
    closed_at: Union[datetime, None]
    due_on: Union[datetime, None]


class ReactionRollupType(TypedDict):
    """Reaction Rollup"""

    url: str
    total_count: int
    plus_one: int
    minus_one: int
    laugh: int
    confused: int
    heart: int
    hooray: int
    eyes: int
    rocket: int


class IssueType(TypedDict):
    """Issue

    Issues are a great way to keep track of tasks, enhancements, and bugs for your
    projects.
    """

    id: int
    node_id: str
    url: str
    repository_url: str
    labels_url: str
    comments_url: str
    events_url: str
    html_url: str
    number: int
    state: str
    state_reason: NotRequired[
        Union[None, Literal["completed", "reopened", "not_planned"]]
    ]
    title: str
    body: NotRequired[Union[str, None]]
    user: Union[None, SimpleUserType]
    labels: List[Union[str, IssuePropLabelsItemsOneof1Type]]
    assignee: Union[None, SimpleUserType]
    assignees: NotRequired[Union[List[SimpleUserType], None]]
    milestone: Union[None, MilestoneType]
    locked: bool
    active_lock_reason: NotRequired[Union[str, None]]
    comments: int
    pull_request: NotRequired[IssuePropPullRequestType]
    closed_at: Union[datetime, None]
    created_at: datetime
    updated_at: datetime
    draft: NotRequired[bool]
    closed_by: NotRequired[Union[None, SimpleUserType]]
    body_html: NotRequired[Union[str, None]]
    body_text: NotRequired[Union[str, None]]
    timeline_url: NotRequired[str]
    repository: NotRequired[RepositoryType]
    performed_via_github_app: NotRequired[Union[None, IntegrationType]]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    reactions: NotRequired[ReactionRollupType]


class IssuePropLabelsItemsOneof1Type(TypedDict):
    """IssuePropLabelsItemsOneof1"""

    id: NotRequired[int]
    node_id: NotRequired[str]
    url: NotRequired[str]
    name: NotRequired[str]
    description: NotRequired[Union[str, None]]
    color: NotRequired[Union[str, None]]
    default: NotRequired[bool]


class IssuePropPullRequestType(TypedDict):
    """IssuePropPullRequest"""

    merged_at: NotRequired[Union[datetime, None]]
    diff_url: Union[str, None]
    html_url: Union[str, None]
    patch_url: Union[str, None]
    url: Union[str, None]


class IssueCommentType(TypedDict):
    """Issue Comment

    Comments provide a way for people to collaborate on an issue.
    """

    id: int
    node_id: str
    url: str
    body: NotRequired[str]
    body_text: NotRequired[str]
    body_html: NotRequired[str]
    html_url: str
    user: Union[None, SimpleUserType]
    created_at: datetime
    updated_at: datetime
    issue_url: str
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    performed_via_github_app: NotRequired[Union[None, IntegrationType]]
    reactions: NotRequired[ReactionRollupType]


class EventType(TypedDict):
    """Event

    Event
    """

    id: str
    type: Union[str, None]
    actor: ActorType
    repo: EventPropRepoType
    org: NotRequired[ActorType]
    payload: EventPropPayloadType
    public: bool
    created_at: Union[datetime, None]


class EventPropRepoType(TypedDict):
    """EventPropRepo"""

    id: int
    name: str
    url: str


class EventPropPayloadType(TypedDict):
    """EventPropPayload"""

    action: NotRequired[str]
    issue: NotRequired[IssueType]
    comment: NotRequired[IssueCommentType]
    pages: NotRequired[List[EventPropPayloadPropPagesItemsType]]


class EventPropPayloadPropPagesItemsType(TypedDict):
    """EventPropPayloadPropPagesItems"""

    page_name: NotRequired[str]
    title: NotRequired[str]
    summary: NotRequired[Union[str, None]]
    action: NotRequired[str]
    sha: NotRequired[str]
    html_url: NotRequired[str]


class LinkWithTypeType(TypedDict):
    """Link With Type

    Hypermedia Link with Type
    """

    href: str
    type: str


class FeedType(TypedDict):
    """Feed

    Feed
    """

    timeline_url: str
    user_url: str
    current_user_public_url: NotRequired[str]
    current_user_url: NotRequired[str]
    current_user_actor_url: NotRequired[str]
    current_user_organization_url: NotRequired[str]
    current_user_organization_urls: NotRequired[List[str]]
    security_advisories_url: NotRequired[str]
    repository_discussions_url: NotRequired[str]
    repository_discussions_category_url: NotRequired[str]
    links: FeedPropLinksType


class FeedPropLinksType(TypedDict):
    """FeedPropLinks"""

    timeline: LinkWithTypeType
    user: LinkWithTypeType
    security_advisories: NotRequired[LinkWithTypeType]
    current_user: NotRequired[LinkWithTypeType]
    current_user_public: NotRequired[LinkWithTypeType]
    current_user_actor: NotRequired[LinkWithTypeType]
    current_user_organization: NotRequired[LinkWithTypeType]
    current_user_organizations: NotRequired[List[LinkWithTypeType]]
    repository_discussions: NotRequired[LinkWithTypeType]
    repository_discussions_category: NotRequired[LinkWithTypeType]


class BaseGistType(TypedDict):
    """Base Gist

    Base Gist
    """

    url: str
    forks_url: str
    commits_url: str
    id: str
    node_id: str
    git_pull_url: str
    git_push_url: str
    html_url: str
    files: BaseGistPropFilesType
    public: bool
    created_at: datetime
    updated_at: datetime
    description: Union[str, None]
    comments: int
    user: Union[None, SimpleUserType]
    comments_url: str
    owner: NotRequired[SimpleUserType]
    truncated: NotRequired[bool]
    forks: NotRequired[List[Any]]
    history: NotRequired[List[Any]]


class BaseGistPropFilesType(TypedDict):
    """BaseGistPropFiles"""


class PublicUserType(TypedDict):
    """Public User

    Public User
    """

    login: str
    id: int
    node_id: str
    avatar_url: str
    gravatar_id: Union[str, None]
    url: str
    html_url: str
    followers_url: str
    following_url: str
    gists_url: str
    starred_url: str
    subscriptions_url: str
    organizations_url: str
    repos_url: str
    events_url: str
    received_events_url: str
    type: str
    site_admin: bool
    name: Union[str, None]
    company: Union[str, None]
    blog: Union[str, None]
    location: Union[str, None]
    email: Union[str, None]
    hireable: Union[bool, None]
    bio: Union[str, None]
    twitter_username: NotRequired[Union[str, None]]
    public_repos: int
    public_gists: int
    followers: int
    following: int
    created_at: datetime
    updated_at: datetime
    plan: NotRequired[PublicUserPropPlanType]
    suspended_at: NotRequired[Union[datetime, None]]
    private_gists: NotRequired[int]
    total_private_repos: NotRequired[int]
    owned_private_repos: NotRequired[int]
    disk_usage: NotRequired[int]
    collaborators: NotRequired[int]


class PublicUserPropPlanType(TypedDict):
    """PublicUserPropPlan"""

    collaborators: int
    name: str
    space: int
    private_repos: int


class GistHistoryType(TypedDict):
    """Gist History

    Gist History
    """

    user: NotRequired[Union[None, SimpleUserType]]
    version: NotRequired[str]
    committed_at: NotRequired[datetime]
    change_status: NotRequired[GistHistoryPropChangeStatusType]
    url: NotRequired[str]


class GistHistoryPropChangeStatusType(TypedDict):
    """GistHistoryPropChangeStatus"""

    total: NotRequired[int]
    additions: NotRequired[int]
    deletions: NotRequired[int]


class GistSimpleType(TypedDict):
    """Gist Simple

    Gist Simple
    """

    forks: NotRequired[Union[List[GistSimplePropForksItemsType], None]]
    history: NotRequired[Union[List[GistHistoryType], None]]
    fork_of: NotRequired[Union[GistSimplePropForkOfType, None]]
    url: NotRequired[str]
    forks_url: NotRequired[str]
    commits_url: NotRequired[str]
    id: NotRequired[str]
    node_id: NotRequired[str]
    git_pull_url: NotRequired[str]
    git_push_url: NotRequired[str]
    html_url: NotRequired[str]
    files: NotRequired[GistSimplePropFilesType]
    public: NotRequired[bool]
    created_at: NotRequired[str]
    updated_at: NotRequired[str]
    description: NotRequired[Union[str, None]]
    comments: NotRequired[int]
    user: NotRequired[Union[str, None]]
    comments_url: NotRequired[str]
    owner: NotRequired[SimpleUserType]
    truncated: NotRequired[bool]


class GistSimplePropForksItemsType(TypedDict):
    """GistSimplePropForksItems"""

    id: NotRequired[str]
    url: NotRequired[str]
    user: NotRequired[PublicUserType]
    created_at: NotRequired[datetime]
    updated_at: NotRequired[datetime]


class GistSimplePropForkOfPropFilesType(TypedDict):
    """GistSimplePropForkOfPropFiles"""


class GistSimplePropForkOfType(TypedDict):
    """Gist

    Gist
    """

    url: str
    forks_url: str
    commits_url: str
    id: str
    node_id: str
    git_pull_url: str
    git_push_url: str
    html_url: str
    files: GistSimplePropForkOfPropFilesType
    public: bool
    created_at: datetime
    updated_at: datetime
    description: Union[str, None]
    comments: int
    user: Union[None, SimpleUserType]
    comments_url: str
    owner: NotRequired[Union[None, SimpleUserType]]
    truncated: NotRequired[bool]
    forks: NotRequired[List[Any]]
    history: NotRequired[List[Any]]


class GistSimplePropFilesType(TypedDict):
    """GistSimplePropFiles"""


class GistCommentType(TypedDict):
    """Gist Comment

    A comment made to a gist.
    """

    id: int
    node_id: str
    url: str
    body: str
    user: Union[None, SimpleUserType]
    created_at: datetime
    updated_at: datetime
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]


class GistCommitType(TypedDict):
    """Gist Commit

    Gist Commit
    """

    url: str
    version: str
    user: Union[None, SimpleUserType]
    change_status: GistCommitPropChangeStatusType
    committed_at: datetime


class GistCommitPropChangeStatusType(TypedDict):
    """GistCommitPropChangeStatus"""

    total: NotRequired[int]
    additions: NotRequired[int]
    deletions: NotRequired[int]


class GitignoreTemplateType(TypedDict):
    """Gitignore Template

    Gitignore Template
    """

    name: str
    source: str


class LicenseType(TypedDict):
    """License

    License
    """

    key: str
    name: str
    spdx_id: Union[str, None]
    url: Union[str, None]
    node_id: str
    html_url: str
    description: str
    implementation: str
    permissions: List[str]
    conditions: List[str]
    limitations: List[str]
    body: str
    featured: bool


class MarketplaceListingPlanType(TypedDict):
    """Marketplace Listing Plan

    Marketplace Listing Plan
    """

    url: str
    accounts_url: str
    id: int
    number: int
    name: str
    description: str
    monthly_price_in_cents: int
    yearly_price_in_cents: int
    price_model: Literal["FREE", "FLAT_RATE", "PER_UNIT"]
    has_free_trial: bool
    unit_name: Union[str, None]
    state: str
    bullets: List[str]


class MarketplacePurchaseType(TypedDict):
    """Marketplace Purchase

    Marketplace Purchase
    """

    url: str
    type: str
    id: int
    login: str
    organization_billing_email: NotRequired[str]
    email: NotRequired[Union[str, None]]
    marketplace_pending_change: NotRequired[
        Union[MarketplacePurchasePropMarketplacePendingChangeType, None]
    ]
    marketplace_purchase: MarketplacePurchasePropMarketplacePurchaseType


class MarketplacePurchasePropMarketplacePendingChangeType(TypedDict):
    """MarketplacePurchasePropMarketplacePendingChange"""

    is_installed: NotRequired[bool]
    effective_date: NotRequired[str]
    unit_count: NotRequired[Union[int, None]]
    id: NotRequired[int]
    plan: NotRequired[MarketplaceListingPlanType]


class MarketplacePurchasePropMarketplacePurchaseType(TypedDict):
    """MarketplacePurchasePropMarketplacePurchase"""

    billing_cycle: NotRequired[str]
    next_billing_date: NotRequired[Union[str, None]]
    is_installed: NotRequired[bool]
    unit_count: NotRequired[Union[int, None]]
    on_free_trial: NotRequired[bool]
    free_trial_ends_on: NotRequired[Union[str, None]]
    updated_at: NotRequired[str]
    plan: NotRequired[MarketplaceListingPlanType]


class ApiOverviewType(TypedDict):
    """Api Overview

    Api Overview
    """

    verifiable_password_authentication: bool
    ssh_key_fingerprints: NotRequired[ApiOverviewPropSshKeyFingerprintsType]
    ssh_keys: NotRequired[List[str]]
    hooks: NotRequired[List[str]]
    web: NotRequired[List[str]]
    api: NotRequired[List[str]]
    git: NotRequired[List[str]]
    packages: NotRequired[List[str]]
    pages: NotRequired[List[str]]
    importer: NotRequired[List[str]]
    actions: NotRequired[List[str]]
    dependabot: NotRequired[List[str]]


class ApiOverviewPropSshKeyFingerprintsType(TypedDict):
    """ApiOverviewPropSshKeyFingerprints"""

    sha256_rsa: NotRequired[str]
    sha256_dsa: NotRequired[str]
    sha256_ecdsa: NotRequired[str]
    sha256_ed25519: NotRequired[str]


class SecurityAndAnalysisPropAdvancedSecurityType(TypedDict):
    """SecurityAndAnalysisPropAdvancedSecurity"""

    status: NotRequired[Literal["enabled", "disabled"]]


class SecurityAndAnalysisPropSecretScanningType(TypedDict):
    """SecurityAndAnalysisPropSecretScanning"""

    status: NotRequired[Literal["enabled", "disabled"]]


class SecurityAndAnalysisPropSecretScanningPushProtectionType(TypedDict):
    """SecurityAndAnalysisPropSecretScanningPushProtection"""

    status: NotRequired[Literal["enabled", "disabled"]]


class SecurityAndAnalysisType(TypedDict):
    """SecurityAndAnalysis"""

    advanced_security: NotRequired[SecurityAndAnalysisPropAdvancedSecurityType]
    secret_scanning: NotRequired[SecurityAndAnalysisPropSecretScanningType]
    secret_scanning_push_protection: NotRequired[
        SecurityAndAnalysisPropSecretScanningPushProtectionType
    ]


class MinimalRepositoryType(TypedDict):
    """Minimal Repository

    Minimal Repository
    """

    id: int
    node_id: str
    name: str
    full_name: str
    owner: SimpleUserType
    private: bool
    html_url: str
    description: Union[str, None]
    fork: bool
    url: str
    archive_url: str
    assignees_url: str
    blobs_url: str
    branches_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    deployments_url: str
    downloads_url: str
    events_url: str
    forks_url: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: NotRequired[str]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    languages_url: str
    merges_url: str
    milestones_url: str
    notifications_url: str
    pulls_url: str
    releases_url: str
    ssh_url: NotRequired[str]
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    tags_url: str
    teams_url: str
    trees_url: str
    clone_url: NotRequired[str]
    mirror_url: NotRequired[Union[str, None]]
    hooks_url: str
    svn_url: NotRequired[str]
    homepage: NotRequired[Union[str, None]]
    language: NotRequired[Union[str, None]]
    forks_count: NotRequired[int]
    stargazers_count: NotRequired[int]
    watchers_count: NotRequired[int]
    size: NotRequired[int]
    default_branch: NotRequired[str]
    open_issues_count: NotRequired[int]
    is_template: NotRequired[bool]
    topics: NotRequired[List[str]]
    has_issues: NotRequired[bool]
    has_projects: NotRequired[bool]
    has_wiki: NotRequired[bool]
    has_pages: NotRequired[bool]
    has_downloads: NotRequired[bool]
    has_discussions: NotRequired[bool]
    archived: NotRequired[bool]
    disabled: NotRequired[bool]
    visibility: NotRequired[str]
    pushed_at: NotRequired[Union[datetime, None]]
    created_at: NotRequired[Union[datetime, None]]
    updated_at: NotRequired[Union[datetime, None]]
    permissions: NotRequired[MinimalRepositoryPropPermissionsType]
    role_name: NotRequired[str]
    temp_clone_token: NotRequired[Union[str, None]]
    delete_branch_on_merge: NotRequired[bool]
    subscribers_count: NotRequired[int]
    network_count: NotRequired[int]
    code_of_conduct: NotRequired[CodeOfConductType]
    license_: NotRequired[Union[MinimalRepositoryPropLicenseType, None]]
    forks: NotRequired[int]
    open_issues: NotRequired[int]
    watchers: NotRequired[int]
    allow_forking: NotRequired[bool]
    web_commit_signoff_required: NotRequired[bool]
    security_and_analysis: NotRequired[Union[SecurityAndAnalysisType, None]]


class MinimalRepositoryPropPermissionsType(TypedDict):
    """MinimalRepositoryPropPermissions"""

    admin: NotRequired[bool]
    maintain: NotRequired[bool]
    push: NotRequired[bool]
    triage: NotRequired[bool]
    pull: NotRequired[bool]


class MinimalRepositoryPropLicenseType(TypedDict):
    """MinimalRepositoryPropLicense"""

    key: NotRequired[str]
    name: NotRequired[str]
    spdx_id: NotRequired[str]
    url: NotRequired[str]
    node_id: NotRequired[str]


class ThreadType(TypedDict):
    """Thread

    Thread
    """

    id: str
    repository: MinimalRepositoryType
    subject: ThreadPropSubjectType
    reason: str
    unread: bool
    updated_at: str
    last_read_at: Union[str, None]
    url: str
    subscription_url: str


class ThreadPropSubjectType(TypedDict):
    """ThreadPropSubject"""

    title: str
    url: str
    latest_comment_url: str
    type: str


class ThreadSubscriptionType(TypedDict):
    """Thread Subscription

    Thread Subscription
    """

    subscribed: bool
    ignored: bool
    reason: Union[str, None]
    created_at: Union[datetime, None]
    url: str
    thread_url: NotRequired[str]
    repository_url: NotRequired[str]


class OrganizationSimpleType(TypedDict):
    """Organization Simple

    A GitHub organization.
    """

    login: str
    id: int
    node_id: str
    url: str
    repos_url: str
    events_url: str
    hooks_url: str
    issues_url: str
    members_url: str
    public_members_url: str
    avatar_url: str
    description: Union[str, None]


class OrganizationProgrammaticAccessGrantRequestType(TypedDict):
    """Simple Organization Programmatic Access Grant Request

    Minimal representation of an organization programmatic access grant request for
    enumerations
    """

    id: int
    reason: Union[str, None]
    owner: SimpleUserType
    repository_selection: Literal["none", "all", "subset"]
    repositories_url: str
    permissions: OrganizationProgrammaticAccessGrantRequestPropPermissionsType
    created_at: str
    token_expired: bool
    token_expires_at: Union[str, None]
    token_last_used_at: Union[str, None]


class OrganizationProgrammaticAccessGrantRequestPropPermissionsType(TypedDict):
    """OrganizationProgrammaticAccessGrantRequestPropPermissions

    Permissions requested, categorized by type of permission.
    """

    organization: NotRequired[
        OrganizationProgrammaticAccessGrantRequestPropPermissionsPropOrganizationType
    ]
    repository: NotRequired[
        OrganizationProgrammaticAccessGrantRequestPropPermissionsPropRepositoryType
    ]
    other: NotRequired[
        OrganizationProgrammaticAccessGrantRequestPropPermissionsPropOtherType
    ]


class OrganizationProgrammaticAccessGrantRequestPropPermissionsPropOrganizationType(
    TypedDict
):
    """OrganizationProgrammaticAccessGrantRequestPropPermissionsPropOrganization"""


class OrganizationProgrammaticAccessGrantRequestPropPermissionsPropRepositoryType(
    TypedDict
):
    """OrganizationProgrammaticAccessGrantRequestPropPermissionsPropRepository"""


class OrganizationProgrammaticAccessGrantRequestPropPermissionsPropOtherType(TypedDict):
    """OrganizationProgrammaticAccessGrantRequestPropPermissionsPropOther"""


class OrganizationProgrammaticAccessGrantType(TypedDict):
    """Organization Programmatic Access Grant

    Minimal representation of an organization programmatic access grant for
    enumerations
    """

    id: int
    owner: SimpleUserType
    repository_selection: Literal["none", "all", "subset"]
    repositories_url: str
    permissions: OrganizationProgrammaticAccessGrantPropPermissionsType
    access_granted_at: str
    token_expired: bool
    token_expires_at: Union[str, None]
    token_last_used_at: Union[str, None]


class OrganizationProgrammaticAccessGrantPropPermissionsType(TypedDict):
    """OrganizationProgrammaticAccessGrantPropPermissions

    Permissions requested, categorized by type of permission.
    """

    organization: NotRequired[
        OrganizationProgrammaticAccessGrantPropPermissionsPropOrganizationType
    ]
    repository: NotRequired[
        OrganizationProgrammaticAccessGrantPropPermissionsPropRepositoryType
    ]
    other: NotRequired[OrganizationProgrammaticAccessGrantPropPermissionsPropOtherType]


class OrganizationProgrammaticAccessGrantPropPermissionsPropOrganizationType(TypedDict):
    """OrganizationProgrammaticAccessGrantPropPermissionsPropOrganization"""


class OrganizationProgrammaticAccessGrantPropPermissionsPropRepositoryType(TypedDict):
    """OrganizationProgrammaticAccessGrantPropPermissionsPropRepository"""


class OrganizationProgrammaticAccessGrantPropPermissionsPropOtherType(TypedDict):
    """OrganizationProgrammaticAccessGrantPropPermissionsPropOther"""


class OrganizationFullType(TypedDict):
    """Organization Full

    Organization Full
    """

    login: str
    id: int
    node_id: str
    url: str
    repos_url: str
    events_url: str
    hooks_url: str
    issues_url: str
    members_url: str
    public_members_url: str
    avatar_url: str
    description: Union[str, None]
    name: NotRequired[str]
    company: NotRequired[Union[str, None]]
    blog: NotRequired[str]
    location: NotRequired[str]
    email: NotRequired[Union[str, None]]
    twitter_username: NotRequired[Union[str, None]]
    is_verified: NotRequired[bool]
    has_organization_projects: bool
    has_repository_projects: bool
    public_repos: int
    public_gists: int
    followers: int
    following: int
    html_url: str
    created_at: datetime
    type: str
    total_private_repos: NotRequired[int]
    owned_private_repos: NotRequired[int]
    private_gists: NotRequired[Union[int, None]]
    disk_usage: NotRequired[Union[int, None]]
    collaborators: NotRequired[Union[int, None]]
    billing_email: NotRequired[Union[str, None]]
    plan: NotRequired[OrganizationFullPropPlanType]
    default_repository_permission: NotRequired[Union[str, None]]
    members_can_create_repositories: NotRequired[Union[bool, None]]
    two_factor_requirement_enabled: NotRequired[Union[bool, None]]
    members_allowed_repository_creation_type: NotRequired[str]
    members_can_create_public_repositories: NotRequired[bool]
    members_can_create_private_repositories: NotRequired[bool]
    members_can_create_internal_repositories: NotRequired[bool]
    members_can_create_pages: NotRequired[bool]
    members_can_create_public_pages: NotRequired[bool]
    members_can_create_private_pages: NotRequired[bool]
    members_can_fork_private_repositories: NotRequired[Union[bool, None]]
    web_commit_signoff_required: NotRequired[bool]
    updated_at: datetime
    advanced_security_enabled_for_new_repositories: NotRequired[bool]
    dependabot_alerts_enabled_for_new_repositories: NotRequired[bool]
    dependabot_security_updates_enabled_for_new_repositories: NotRequired[bool]
    dependency_graph_enabled_for_new_repositories: NotRequired[bool]
    secret_scanning_enabled_for_new_repositories: NotRequired[bool]
    secret_scanning_push_protection_enabled_for_new_repositories: NotRequired[bool]
    secret_scanning_push_protection_custom_link_enabled: NotRequired[bool]
    secret_scanning_push_protection_custom_link: NotRequired[Union[str, None]]


class OrganizationFullPropPlanType(TypedDict):
    """OrganizationFullPropPlan"""

    name: str
    space: int
    private_repos: int
    filled_seats: NotRequired[int]
    seats: NotRequired[int]


class ActionsCacheUsageOrgEnterpriseType(TypedDict):
    """ActionsCacheUsageOrgEnterprise"""

    total_active_caches_count: int
    total_active_caches_size_in_bytes: int


class ActionsCacheUsageByRepositoryType(TypedDict):
    """Actions Cache Usage by repository

    GitHub Actions Cache Usage by repository.
    """

    full_name: str
    active_caches_size_in_bytes: int
    active_caches_count: int


class OidcCustomSubType(TypedDict):
    """Actions OIDC Subject customization

    Actions OIDC Subject customization
    """

    include_claim_keys: List[str]


class EmptyObjectType(TypedDict):
    """Empty Object

    An object without any properties.
    """


class ActionsOrganizationPermissionsType(TypedDict):
    """ActionsOrganizationPermissions"""

    enabled_repositories: Literal["all", "none", "selected"]
    selected_repositories_url: NotRequired[str]
    allowed_actions: NotRequired[Literal["all", "local_only", "selected"]]
    selected_actions_url: NotRequired[str]


class SelectedActionsType(TypedDict):
    """SelectedActions"""

    github_owned_allowed: NotRequired[bool]
    verified_allowed: NotRequired[bool]
    patterns_allowed: NotRequired[List[str]]


class ActionsGetDefaultWorkflowPermissionsType(TypedDict):
    """ActionsGetDefaultWorkflowPermissions"""

    default_workflow_permissions: Literal["read", "write"]
    can_approve_pull_request_reviews: bool


class ActionsSetDefaultWorkflowPermissionsType(TypedDict):
    """ActionsSetDefaultWorkflowPermissions"""

    default_workflow_permissions: NotRequired[Literal["read", "write"]]
    can_approve_pull_request_reviews: NotRequired[bool]


class RequiredWorkflowType(TypedDict):
    """RequiredWorkflow"""

    id: float
    name: str
    path: str
    scope: Literal["all", "selected"]
    ref: str
    state: Literal["active", "deleted"]
    selected_repositories_url: NotRequired[str]
    created_at: datetime
    updated_at: datetime
    repository: MinimalRepositoryType


class RunnerLabelType(TypedDict):
    """Self hosted runner label

    A label for a self hosted runner
    """

    id: NotRequired[int]
    name: str
    type: NotRequired[Literal["read-only", "custom"]]


class RunnerType(TypedDict):
    """Self hosted runners

    A self hosted runner
    """

    id: int
    runner_group_id: NotRequired[int]
    name: str
    os: str
    status: str
    busy: bool
    labels: List[RunnerLabelType]


class RunnerApplicationType(TypedDict):
    """Runner Application

    Runner Application
    """

    os: str
    architecture: str
    download_url: str
    filename: str
    temp_download_token: NotRequired[str]
    sha256_checksum: NotRequired[str]


class AuthenticationTokenType(TypedDict):
    """Authentication Token

    Authentication Token
    """

    token: str
    expires_at: datetime
    permissions: NotRequired[AuthenticationTokenPropPermissionsType]
    repositories: NotRequired[List[RepositoryType]]
    single_file: NotRequired[Union[str, None]]
    repository_selection: NotRequired[Literal["all", "selected"]]


class AuthenticationTokenPropPermissionsType(TypedDict):
    """AuthenticationTokenPropPermissions

    Examples:
        {'issues': 'read', 'deployments': 'write'}
    """


class OrganizationActionsSecretType(TypedDict):
    """Actions Secret for an Organization

    Secrets for GitHub Actions for an organization.
    """

    name: str
    created_at: datetime
    updated_at: datetime
    visibility: Literal["all", "private", "selected"]
    selected_repositories_url: NotRequired[str]


class ActionsPublicKeyType(TypedDict):
    """ActionsPublicKey

    The public key used for setting Actions Secrets.
    """

    key_id: str
    key: str
    id: NotRequired[int]
    url: NotRequired[str]
    title: NotRequired[str]
    created_at: NotRequired[str]


class OrganizationActionsVariableType(TypedDict):
    """Actions Variable for an Organization

    Organization variable for GitHub Actions.
    """

    name: str
    value: str
    created_at: datetime
    updated_at: datetime
    visibility: Literal["all", "private", "selected"]
    selected_repositories_url: NotRequired[str]


class CodeScanningAlertRuleType(TypedDict):
    """CodeScanningAlertRule"""

    id: NotRequired[Union[str, None]]
    name: NotRequired[str]
    severity: NotRequired[Union[None, Literal["none", "note", "warning", "error"]]]
    security_severity_level: NotRequired[
        Union[None, Literal["low", "medium", "high", "critical"]]
    ]
    description: NotRequired[str]
    full_description: NotRequired[str]
    tags: NotRequired[Union[List[str], None]]
    help_: NotRequired[Union[str, None]]
    help_uri: NotRequired[Union[str, None]]


class CodeScanningAnalysisToolType(TypedDict):
    """CodeScanningAnalysisTool"""

    name: NotRequired[str]
    version: NotRequired[Union[str, None]]
    guid: NotRequired[Union[str, None]]


class CodeScanningAlertLocationType(TypedDict):
    """CodeScanningAlertLocation

    Describe a region within a file for the alert.
    """

    path: NotRequired[str]
    start_line: NotRequired[int]
    end_line: NotRequired[int]
    start_column: NotRequired[int]
    end_column: NotRequired[int]


class CodeScanningAlertInstanceType(TypedDict):
    """CodeScanningAlertInstance"""

    ref: NotRequired[str]
    analysis_key: NotRequired[str]
    environment: NotRequired[str]
    category: NotRequired[str]
    state: NotRequired[Literal["open", "closed", "dismissed", "fixed"]]
    commit_sha: NotRequired[str]
    message: NotRequired[CodeScanningAlertInstancePropMessageType]
    location: NotRequired[CodeScanningAlertLocationType]
    html_url: NotRequired[str]
    classifications: NotRequired[
        List[Union[None, Literal["source", "generated", "test", "library"]]]
    ]


class CodeScanningAlertInstancePropMessageType(TypedDict):
    """CodeScanningAlertInstancePropMessage"""

    text: NotRequired[str]


class CodeScanningOrganizationAlertItemsType(TypedDict):
    """CodeScanningOrganizationAlertItems"""

    number: int
    created_at: datetime
    updated_at: NotRequired[datetime]
    url: str
    html_url: str
    instances_url: str
    state: Literal["open", "closed", "dismissed", "fixed"]
    fixed_at: NotRequired[Union[datetime, None]]
    dismissed_by: Union[None, SimpleUserType]
    dismissed_at: Union[datetime, None]
    dismissed_reason: Union[
        None, Literal["false positive", "won't fix", "used in tests"]
    ]
    dismissed_comment: NotRequired[Union[str, None]]
    rule: CodeScanningAlertRuleType
    tool: CodeScanningAnalysisToolType
    most_recent_instance: CodeScanningAlertInstanceType
    repository: SimpleRepositoryType


class CodespaceMachineType(TypedDict):
    """Codespace machine

    A description of the machine powering a codespace.
    """

    name: str
    display_name: str
    operating_system: str
    storage_in_bytes: int
    memory_in_bytes: int
    cpus: int
    prebuild_availability: Union[None, Literal["none", "ready", "in_progress"]]


class CodespaceType(TypedDict):
    """Codespace

    A codespace.
    """

    id: int
    name: str
    display_name: NotRequired[Union[str, None]]
    environment_id: Union[str, None]
    owner: SimpleUserType
    billable_owner: SimpleUserType
    repository: MinimalRepositoryType
    machine: Union[None, CodespaceMachineType]
    devcontainer_path: NotRequired[Union[str, None]]
    prebuild: Union[bool, None]
    created_at: datetime
    updated_at: datetime
    last_used_at: datetime
    state: Literal[
        "Unknown",
        "Created",
        "Queued",
        "Provisioning",
        "Available",
        "Awaiting",
        "Unavailable",
        "Deleted",
        "Moved",
        "Shutdown",
        "Archived",
        "Starting",
        "ShuttingDown",
        "Failed",
        "Exporting",
        "Updating",
        "Rebuilding",
    ]
    url: str
    git_status: CodespacePropGitStatusType
    location: Literal["EastUs", "SouthEastAsia", "WestEurope", "WestUs2"]
    idle_timeout_minutes: Union[int, None]
    web_url: str
    machines_url: str
    start_url: str
    stop_url: str
    publish_url: NotRequired[Union[str, None]]
    pulls_url: Union[str, None]
    recent_folders: List[str]
    runtime_constraints: NotRequired[CodespacePropRuntimeConstraintsType]
    pending_operation: NotRequired[Union[bool, None]]
    pending_operation_disabled_reason: NotRequired[Union[str, None]]
    idle_timeout_notice: NotRequired[Union[str, None]]
    retention_period_minutes: NotRequired[Union[int, None]]
    retention_expires_at: NotRequired[Union[datetime, None]]
    last_known_stop_notice: NotRequired[Union[str, None]]


class CodespacePropGitStatusType(TypedDict):
    """CodespacePropGitStatus

    Details about the codespace's git repository.
    """

    ahead: NotRequired[int]
    behind: NotRequired[int]
    has_unpushed_changes: NotRequired[bool]
    has_uncommitted_changes: NotRequired[bool]
    ref: NotRequired[str]


class CodespacePropRuntimeConstraintsType(TypedDict):
    """CodespacePropRuntimeConstraints"""

    allowed_port_privacy_settings: NotRequired[Union[List[str], None]]


class CodespacesOrgSecretType(TypedDict):
    """Codespaces Secret

    Secrets for a GitHub Codespace.
    """

    name: str
    created_at: datetime
    updated_at: datetime
    visibility: Literal["all", "private", "selected"]
    selected_repositories_url: NotRequired[str]


class CodespacesPublicKeyType(TypedDict):
    """CodespacesPublicKey

    The public key used for setting Codespaces secrets.
    """

    key_id: str
    key: str
    id: NotRequired[int]
    url: NotRequired[str]
    title: NotRequired[str]
    created_at: NotRequired[str]


class OrganizationDependabotSecretType(TypedDict):
    """Dependabot Secret for an Organization

    Secrets for GitHub Dependabot for an organization.
    """

    name: str
    created_at: datetime
    updated_at: datetime
    visibility: Literal["all", "private", "selected"]
    selected_repositories_url: NotRequired[str]


class DependabotPublicKeyType(TypedDict):
    """DependabotPublicKey

    The public key used for setting Dependabot Secrets.
    """

    key_id: str
    key: str


class PackageType(TypedDict):
    """Package

    A software package
    """

    id: int
    name: str
    package_type: Literal["npm", "maven", "rubygems", "docker", "nuget", "container"]
    url: str
    html_url: str
    version_count: int
    visibility: Literal["private", "public"]
    owner: NotRequired[Union[None, SimpleUserType]]
    repository: NotRequired[Union[None, MinimalRepositoryType]]
    created_at: datetime
    updated_at: datetime


class OrganizationInvitationType(TypedDict):
    """Organization Invitation

    Organization Invitation
    """

    id: int
    login: Union[str, None]
    email: Union[str, None]
    role: str
    created_at: str
    failed_at: NotRequired[Union[str, None]]
    failed_reason: NotRequired[Union[str, None]]
    inviter: SimpleUserType
    team_count: int
    node_id: str
    invitation_teams_url: str
    invitation_source: NotRequired[str]


class OrgHookType(TypedDict):
    """Org Hook

    Org Hook
    """

    id: int
    url: str
    ping_url: str
    deliveries_url: NotRequired[str]
    name: str
    events: List[str]
    active: bool
    config: OrgHookPropConfigType
    updated_at: datetime
    created_at: datetime
    type: str


class OrgHookPropConfigType(TypedDict):
    """OrgHookPropConfig"""

    url: NotRequired[str]
    insecure_ssl: NotRequired[str]
    content_type: NotRequired[str]
    secret: NotRequired[str]


class InteractionLimitResponseType(TypedDict):
    """Interaction Limits

    Interaction limit settings.
    """

    limit: Literal["existing_users", "contributors_only", "collaborators_only"]
    origin: str
    expires_at: datetime


class InteractionLimitType(TypedDict):
    """Interaction Restrictions

    Limit interactions to a specific type of user for a specified duration
    """

    limit: Literal["existing_users", "contributors_only", "collaborators_only"]
    expiry: NotRequired[
        Literal["one_day", "three_days", "one_week", "one_month", "six_months"]
    ]


class TeamSimpleType(TypedDict):
    """Team Simple

    Groups of organization members that gives permissions on specified repositories.
    """

    id: int
    node_id: str
    url: str
    members_url: str
    name: str
    description: Union[str, None]
    permission: str
    privacy: NotRequired[str]
    notification_setting: NotRequired[str]
    html_url: str
    repositories_url: str
    slug: str
    ldap_dn: NotRequired[str]


class TeamType(TypedDict):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    id: int
    node_id: str
    name: str
    slug: str
    description: Union[str, None]
    privacy: NotRequired[str]
    notification_setting: NotRequired[str]
    permission: str
    permissions: NotRequired[TeamPropPermissionsType]
    url: str
    html_url: str
    members_url: str
    repositories_url: str
    parent: Union[None, TeamSimpleType]


class TeamPropPermissionsType(TypedDict):
    """TeamPropPermissions"""

    pull: bool
    triage: bool
    push: bool
    maintain: bool
    admin: bool


class OrgMembershipType(TypedDict):
    """Org Membership

    Org Membership
    """

    url: str
    state: Literal["active", "pending"]
    role: Literal["admin", "member", "billing_manager"]
    organization_url: str
    organization: OrganizationSimpleType
    user: Union[None, SimpleUserType]
    permissions: NotRequired[OrgMembershipPropPermissionsType]


class OrgMembershipPropPermissionsType(TypedDict):
    """OrgMembershipPropPermissions"""

    can_create_repository: bool


class MigrationType(TypedDict):
    """Migration

    A migration.
    """

    id: int
    owner: Union[None, SimpleUserType]
    guid: str
    state: str
    lock_repositories: bool
    exclude_metadata: bool
    exclude_git_data: bool
    exclude_attachments: bool
    exclude_releases: bool
    exclude_owner_projects: bool
    org_metadata_only: bool
    repositories: List[RepositoryType]
    url: str
    created_at: datetime
    updated_at: datetime
    node_id: str
    archive_url: NotRequired[str]
    exclude: NotRequired[List[str]]


class PackageVersionType(TypedDict):
    """Package Version

    A version of a software package
    """

    id: int
    name: str
    url: str
    package_html_url: str
    html_url: NotRequired[str]
    license_: NotRequired[str]
    description: NotRequired[str]
    created_at: datetime
    updated_at: datetime
    deleted_at: NotRequired[datetime]
    metadata: NotRequired[PackageVersionPropMetadataType]


class PackageVersionPropMetadataType(TypedDict):
    """Package Version Metadata"""

    package_type: Literal["npm", "maven", "rubygems", "docker", "nuget", "container"]
    container: NotRequired[PackageVersionPropMetadataPropContainerType]
    docker: NotRequired[PackageVersionPropMetadataPropDockerType]


class PackageVersionPropMetadataPropContainerType(TypedDict):
    """Container Metadata"""

    tags: List[str]


class PackageVersionPropMetadataPropDockerType(TypedDict):
    """Docker Metadata"""

    tag: NotRequired[List[str]]


class ProjectType(TypedDict):
    """Project

    Projects are a way to organize columns and cards of work.
    """

    owner_url: str
    url: str
    html_url: str
    columns_url: str
    id: int
    node_id: str
    name: str
    body: Union[str, None]
    number: int
    state: str
    creator: Union[None, SimpleUserType]
    created_at: datetime
    updated_at: datetime
    organization_permission: NotRequired[Literal["read", "write", "admin", "none"]]
    private: NotRequired[bool]


class RepositoryRulesetBypassActorType(TypedDict):
    """Repository Ruleset Bypass Actor

    An actor that can bypass rules in a ruleset
    """

    actor_id: NotRequired[int]
    actor_type: NotRequired[Literal["Team", "Integration"]]


class RepositoryRulesetConditionsType(TypedDict):
    """Repository ruleset conditions for ref names

    Parameters for a repository ruleset ref name condition
    """

    ref_name: NotRequired[RepositoryRulesetConditionsPropRefNameType]


class RepositoryRulesetConditionsPropRefNameType(TypedDict):
    """RepositoryRulesetConditionsPropRefName"""

    include: NotRequired[List[str]]
    exclude: NotRequired[List[str]]


class RepositoryRulesetConditionsRepositoryNameTargetType(TypedDict):
    """Repository ruleset conditions for repository names

    Parameters for a repository name condition
    """

    repository_name: NotRequired[
        RepositoryRulesetConditionsRepositoryNameTargetPropRepositoryNameType
    ]


class RepositoryRulesetConditionsRepositoryNameTargetPropRepositoryNameType(TypedDict):
    """RepositoryRulesetConditionsRepositoryNameTargetPropRepositoryName"""

    include: NotRequired[List[str]]
    exclude: NotRequired[List[str]]
    protected: NotRequired[bool]


class OrgRulesetConditionsType(TypedDict):
    """Organization ruleset conditions

    Conditions for a organization ruleset
    """

    ref_name: NotRequired[RepositoryRulesetConditionsPropRefNameType]
    repository_name: NotRequired[
        RepositoryRulesetConditionsRepositoryNameTargetPropRepositoryNameType
    ]


class RepositoryRuleCreationType(TypedDict):
    """creation

    Parameters to be used for the creation rule
    """

    type: Literal["creation"]


class RepositoryRuleUpdateType(TypedDict):
    """update

    Parameters to be used for the update rule
    """

    type: Literal["update"]
    parameters: NotRequired[RepositoryRuleUpdatePropParametersType]


class RepositoryRuleUpdatePropParametersType(TypedDict):
    """RepositoryRuleUpdatePropParameters"""

    update_allows_fetch_and_merge: bool


class RepositoryRuleDeletionType(TypedDict):
    """deletion

    Parameters to be used for the deletion rule
    """

    type: Literal["deletion"]


class RepositoryRuleRequiredLinearHistoryType(TypedDict):
    """required_linear_history

    Parameters to be used for the required_linear_history rule
    """

    type: Literal["required_linear_history"]


class RepositoryRuleRequiredDeploymentsType(TypedDict):
    """required_deployments

    Parameters to be used for the required_deployments rule
    """

    type: Literal["required_deployments"]
    parameters: NotRequired[RepositoryRuleRequiredDeploymentsPropParametersType]


class RepositoryRuleRequiredDeploymentsPropParametersType(TypedDict):
    """RepositoryRuleRequiredDeploymentsPropParameters"""

    required_deployment_environments: List[str]


class RepositoryRuleRequiredSignaturesType(TypedDict):
    """required_signatures

    Parameters to be used for the required_signatures rule
    """

    type: Literal["required_signatures"]


class RepositoryRulePullRequestType(TypedDict):
    """pull_request

    Parameters to be used for the pull_request rule
    """

    type: Literal["pull_request"]
    parameters: NotRequired[RepositoryRulePullRequestPropParametersType]


class RepositoryRulePullRequestPropParametersType(TypedDict):
    """RepositoryRulePullRequestPropParameters"""

    dismiss_stale_reviews_on_push: bool
    require_code_owner_review: bool
    require_last_push_approval: bool
    required_approving_review_count: int
    required_review_thread_resolution: bool


class RepositoryRuleParamsStatusCheckConfigurationType(TypedDict):
    """StatusCheckConfiguration

    Required status check
    """

    context: str
    integration_id: NotRequired[int]


class RepositoryRuleRequiredStatusChecksType(TypedDict):
    """required_status_checks

    Parameters to be used for the required_status_checks rule
    """

    type: Literal["required_status_checks"]
    parameters: NotRequired[RepositoryRuleRequiredStatusChecksPropParametersType]


class RepositoryRuleRequiredStatusChecksPropParametersType(TypedDict):
    """RepositoryRuleRequiredStatusChecksPropParameters"""

    required_status_checks: List[RepositoryRuleParamsStatusCheckConfigurationType]
    strict_required_status_checks_policy: bool


class RepositoryRuleNonFastForwardType(TypedDict):
    """non_fast_forward

    Parameters to be used for the non_fast_forward rule
    """

    type: Literal["non_fast_forward"]


class RepositoryRuleCommitMessagePatternType(TypedDict):
    """commit_message_pattern

    Parameters to be used for the commit_message_pattern rule
    """

    type: Literal["commit_message_pattern"]
    parameters: NotRequired[RepositoryRuleCommitMessagePatternPropParametersType]


class RepositoryRuleCommitMessagePatternPropParametersType(TypedDict):
    """RepositoryRuleCommitMessagePatternPropParameters"""

    name: NotRequired[str]
    negate: NotRequired[bool]
    operator: Literal["starts_with", "ends_with", "contains", "regex"]
    pattern: str


class RepositoryRuleCommitAuthorEmailPatternType(TypedDict):
    """commit_author_email_pattern

    Parameters to be used for the commit_author_email_pattern rule
    """

    type: Literal["commit_author_email_pattern"]
    parameters: NotRequired[RepositoryRuleCommitAuthorEmailPatternPropParametersType]


class RepositoryRuleCommitAuthorEmailPatternPropParametersType(TypedDict):
    """RepositoryRuleCommitAuthorEmailPatternPropParameters"""

    name: NotRequired[str]
    negate: NotRequired[bool]
    operator: Literal["starts_with", "ends_with", "contains", "regex"]
    pattern: str


class RepositoryRuleCommitterEmailPatternType(TypedDict):
    """committer_email_pattern

    Parameters to be used for the committer_email_pattern rule
    """

    type: Literal["committer_email_pattern"]
    parameters: NotRequired[RepositoryRuleCommitterEmailPatternPropParametersType]


class RepositoryRuleCommitterEmailPatternPropParametersType(TypedDict):
    """RepositoryRuleCommitterEmailPatternPropParameters"""

    name: NotRequired[str]
    negate: NotRequired[bool]
    operator: Literal["starts_with", "ends_with", "contains", "regex"]
    pattern: str


class RepositoryRuleBranchNamePatternType(TypedDict):
    """branch_name_pattern

    Parameters to be used for the branch_name_pattern rule
    """

    type: Literal["branch_name_pattern"]
    parameters: NotRequired[RepositoryRuleBranchNamePatternPropParametersType]


class RepositoryRuleBranchNamePatternPropParametersType(TypedDict):
    """RepositoryRuleBranchNamePatternPropParameters"""

    name: NotRequired[str]
    negate: NotRequired[bool]
    operator: Literal["starts_with", "ends_with", "contains", "regex"]
    pattern: str


class RepositoryRuleTagNamePatternType(TypedDict):
    """tag_name_pattern

    Parameters to be used for the tag_name_pattern rule
    """

    type: Literal["tag_name_pattern"]
    parameters: NotRequired[RepositoryRuleTagNamePatternPropParametersType]


class RepositoryRuleTagNamePatternPropParametersType(TypedDict):
    """RepositoryRuleTagNamePatternPropParameters"""

    name: NotRequired[str]
    negate: NotRequired[bool]
    operator: Literal["starts_with", "ends_with", "contains", "regex"]
    pattern: str


class RepositoryRulesetType(TypedDict):
    """Repository ruleset

    A set of rules to apply when specified conditions are met.
    """

    id: int
    name: str
    target: NotRequired[Literal["branch", "tag"]]
    source_type: NotRequired[Literal["Repository", "Organization"]]
    source: str
    enforcement: Literal["disabled", "active", "evaluate"]
    bypass_mode: NotRequired[Literal["none", "repository", "organization"]]
    bypass_actors: NotRequired[List[RepositoryRulesetBypassActorType]]
    node_id: NotRequired[str]
    links: NotRequired[RepositoryRulesetPropLinksType]
    conditions: NotRequired[
        Union[RepositoryRulesetConditionsType, OrgRulesetConditionsType]
    ]
    rules: NotRequired[
        List[
            Union[
                RepositoryRuleCreationType,
                RepositoryRuleUpdateType,
                RepositoryRuleDeletionType,
                RepositoryRuleRequiredLinearHistoryType,
                RepositoryRuleRequiredDeploymentsType,
                RepositoryRuleRequiredSignaturesType,
                RepositoryRulePullRequestType,
                RepositoryRuleRequiredStatusChecksType,
                RepositoryRuleNonFastForwardType,
                RepositoryRuleCommitMessagePatternType,
                RepositoryRuleCommitAuthorEmailPatternType,
                RepositoryRuleCommitterEmailPatternType,
                RepositoryRuleBranchNamePatternType,
                RepositoryRuleTagNamePatternType,
            ]
        ]
    ]


class RepositoryRulesetPropLinksType(TypedDict):
    """RepositoryRulesetPropLinks"""

    self_: NotRequired[RepositoryRulesetPropLinksPropSelfType]


class RepositoryRulesetPropLinksPropSelfType(TypedDict):
    """RepositoryRulesetPropLinksPropSelf"""

    href: NotRequired[str]


class ActionsBillingUsageType(TypedDict):
    """ActionsBillingUsage"""

    total_minutes_used: int
    total_paid_minutes_used: int
    included_minutes: int
    minutes_used_breakdown: ActionsBillingUsagePropMinutesUsedBreakdownType


class ActionsBillingUsagePropMinutesUsedBreakdownType(TypedDict):
    """ActionsBillingUsagePropMinutesUsedBreakdown"""

    ubuntu: NotRequired[int]
    macos: NotRequired[int]
    windows: NotRequired[int]
    ubuntu_4_core: NotRequired[int]
    ubuntu_8_core: NotRequired[int]
    ubuntu_16_core: NotRequired[int]
    ubuntu_32_core: NotRequired[int]
    ubuntu_64_core: NotRequired[int]
    windows_4_core: NotRequired[int]
    windows_8_core: NotRequired[int]
    windows_16_core: NotRequired[int]
    windows_32_core: NotRequired[int]
    windows_64_core: NotRequired[int]
    macos_12_core: NotRequired[int]
    total: NotRequired[int]


class PackagesBillingUsageType(TypedDict):
    """PackagesBillingUsage"""

    total_gigabytes_bandwidth_used: int
    total_paid_gigabytes_bandwidth_used: int
    included_gigabytes_bandwidth: int


class CombinedBillingUsageType(TypedDict):
    """CombinedBillingUsage"""

    days_left_in_billing_cycle: int
    estimated_paid_storage_for_month: int
    estimated_storage_for_month: int


class TeamOrganizationType(TypedDict):
    """Team Organization

    Team Organization
    """

    login: str
    id: int
    node_id: str
    url: str
    repos_url: str
    events_url: str
    hooks_url: str
    issues_url: str
    members_url: str
    public_members_url: str
    avatar_url: str
    description: Union[str, None]
    name: NotRequired[str]
    company: NotRequired[Union[str, None]]
    blog: NotRequired[str]
    location: NotRequired[str]
    email: NotRequired[Union[str, None]]
    twitter_username: NotRequired[Union[str, None]]
    is_verified: NotRequired[bool]
    has_organization_projects: bool
    has_repository_projects: bool
    public_repos: int
    public_gists: int
    followers: int
    following: int
    html_url: str
    created_at: datetime
    type: str
    total_private_repos: NotRequired[int]
    owned_private_repos: NotRequired[int]
    private_gists: NotRequired[Union[int, None]]
    disk_usage: NotRequired[Union[int, None]]
    collaborators: NotRequired[Union[int, None]]
    billing_email: NotRequired[Union[str, None]]
    plan: NotRequired[TeamOrganizationPropPlanType]
    default_repository_permission: NotRequired[Union[str, None]]
    members_can_create_repositories: NotRequired[Union[bool, None]]
    two_factor_requirement_enabled: NotRequired[Union[bool, None]]
    members_allowed_repository_creation_type: NotRequired[str]
    members_can_create_public_repositories: NotRequired[bool]
    members_can_create_private_repositories: NotRequired[bool]
    members_can_create_internal_repositories: NotRequired[bool]
    members_can_create_pages: NotRequired[bool]
    members_can_create_public_pages: NotRequired[bool]
    members_can_create_private_pages: NotRequired[bool]
    members_can_fork_private_repositories: NotRequired[Union[bool, None]]
    web_commit_signoff_required: NotRequired[bool]
    updated_at: datetime


class TeamOrganizationPropPlanType(TypedDict):
    """TeamOrganizationPropPlan"""

    name: str
    space: int
    private_repos: int
    filled_seats: NotRequired[int]
    seats: NotRequired[int]


class TeamFullType(TypedDict):
    """Full Team

    Groups of organization members that gives permissions on specified repositories.
    """

    id: int
    node_id: str
    url: str
    html_url: str
    name: str
    slug: str
    description: Union[str, None]
    privacy: NotRequired[Literal["closed", "secret"]]
    notification_setting: NotRequired[
        Literal["notifications_enabled", "notifications_disabled"]
    ]
    permission: str
    members_url: str
    repositories_url: str
    parent: NotRequired[Union[None, TeamSimpleType]]
    members_count: int
    repos_count: int
    created_at: datetime
    updated_at: datetime
    organization: TeamOrganizationType
    ldap_dn: NotRequired[str]


class TeamDiscussionType(TypedDict):
    """Team Discussion

    A team discussion is a persistent record of a free-form conversation within a
    team.
    """

    author: Union[None, SimpleUserType]
    body: str
    body_html: str
    body_version: str
    comments_count: int
    comments_url: str
    created_at: datetime
    last_edited_at: Union[datetime, None]
    html_url: str
    node_id: str
    number: int
    pinned: bool
    private: bool
    team_url: str
    title: str
    updated_at: datetime
    url: str
    reactions: NotRequired[ReactionRollupType]


class TeamDiscussionCommentType(TypedDict):
    """Team Discussion Comment

    A reply to a discussion within a team.
    """

    author: Union[None, SimpleUserType]
    body: str
    body_html: str
    body_version: str
    created_at: datetime
    last_edited_at: Union[datetime, None]
    discussion_url: str
    html_url: str
    node_id: str
    number: int
    updated_at: datetime
    url: str
    reactions: NotRequired[ReactionRollupType]


class ReactionType(TypedDict):
    """Reaction

    Reactions to conversations provide a way to help people express their feelings
    more simply and effectively.
    """

    id: int
    node_id: str
    user: Union[None, SimpleUserType]
    content: Literal[
        "+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"
    ]
    created_at: datetime


class TeamMembershipType(TypedDict):
    """Team Membership

    Team Membership
    """

    url: str
    role: Literal["member", "maintainer"]
    state: Literal["active", "pending"]


class TeamProjectType(TypedDict):
    """Team Project

    A team's access to a project.
    """

    owner_url: str
    url: str
    html_url: str
    columns_url: str
    id: int
    node_id: str
    name: str
    body: Union[str, None]
    number: int
    state: str
    creator: SimpleUserType
    created_at: str
    updated_at: str
    organization_permission: NotRequired[str]
    private: NotRequired[bool]
    permissions: TeamProjectPropPermissionsType


class TeamProjectPropPermissionsType(TypedDict):
    """TeamProjectPropPermissions"""

    read: bool
    write: bool
    admin: bool


class TeamRepositoryType(TypedDict):
    """Team Repository

    A team's access to a repository.
    """

    id: int
    node_id: str
    name: str
    full_name: str
    license_: Union[None, LicenseSimpleType]
    forks: int
    permissions: NotRequired[TeamRepositoryPropPermissionsType]
    role_name: NotRequired[str]
    owner: Union[None, SimpleUserType]
    private: bool
    html_url: str
    description: Union[str, None]
    fork: bool
    url: str
    archive_url: str
    assignees_url: str
    blobs_url: str
    branches_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    deployments_url: str
    downloads_url: str
    events_url: str
    forks_url: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    languages_url: str
    merges_url: str
    milestones_url: str
    notifications_url: str
    pulls_url: str
    releases_url: str
    ssh_url: str
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    tags_url: str
    teams_url: str
    trees_url: str
    clone_url: str
    mirror_url: Union[str, None]
    hooks_url: str
    svn_url: str
    homepage: Union[str, None]
    language: Union[str, None]
    forks_count: int
    stargazers_count: int
    watchers_count: int
    size: int
    default_branch: str
    open_issues_count: int
    is_template: NotRequired[bool]
    topics: NotRequired[List[str]]
    has_issues: bool
    has_projects: bool
    has_wiki: bool
    has_pages: bool
    has_downloads: bool
    archived: bool
    disabled: bool
    visibility: NotRequired[str]
    pushed_at: Union[datetime, None]
    created_at: Union[datetime, None]
    updated_at: Union[datetime, None]
    allow_rebase_merge: NotRequired[bool]
    template_repository: NotRequired[Union[None, RepositoryType]]
    temp_clone_token: NotRequired[Union[str, None]]
    allow_squash_merge: NotRequired[bool]
    allow_auto_merge: NotRequired[bool]
    delete_branch_on_merge: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_forking: NotRequired[bool]
    web_commit_signoff_required: NotRequired[bool]
    subscribers_count: NotRequired[int]
    network_count: NotRequired[int]
    open_issues: int
    watchers: int
    master_branch: NotRequired[str]


class TeamRepositoryPropPermissionsType(TypedDict):
    """TeamRepositoryPropPermissions"""

    admin: bool
    pull: bool
    triage: NotRequired[bool]
    push: bool
    maintain: NotRequired[bool]


class ProjectCardType(TypedDict):
    """Project Card

    Project cards represent a scope of work.
    """

    url: str
    id: int
    node_id: str
    note: Union[str, None]
    creator: Union[None, SimpleUserType]
    created_at: datetime
    updated_at: datetime
    archived: NotRequired[bool]
    column_name: NotRequired[str]
    project_id: NotRequired[str]
    column_url: str
    content_url: NotRequired[str]
    project_url: str


class ProjectColumnType(TypedDict):
    """Project Column

    Project columns contain cards of work.
    """

    url: str
    project_url: str
    cards_url: str
    id: int
    node_id: str
    name: str
    created_at: datetime
    updated_at: datetime


class ProjectCollaboratorPermissionType(TypedDict):
    """Project Collaborator Permission

    Project Collaborator Permission
    """

    permission: str
    user: Union[None, SimpleUserType]


class RateLimitType(TypedDict):
    """Rate Limit"""

    limit: int
    remaining: int
    reset: int
    used: int


class RateLimitOverviewType(TypedDict):
    """Rate Limit Overview

    Rate Limit Overview
    """

    resources: RateLimitOverviewPropResourcesType
    rate: RateLimitType


class RateLimitOverviewPropResourcesType(TypedDict):
    """RateLimitOverviewPropResources"""

    core: RateLimitType
    graphql: NotRequired[RateLimitType]
    search: RateLimitType
    source_import: NotRequired[RateLimitType]
    integration_manifest: NotRequired[RateLimitType]
    code_scanning_upload: NotRequired[RateLimitType]
    actions_runner_registration: NotRequired[RateLimitType]
    scim: NotRequired[RateLimitType]
    dependency_snapshots: NotRequired[RateLimitType]


class RepoRequiredWorkflowType(TypedDict):
    """Required workflow

    A GitHub Actions required workflow
    """

    id: int
    node_id: str
    name: str
    path: str
    state: Literal["active", "deleted"]
    source_repository: MinimalRepositoryType
    created_at: datetime
    updated_at: datetime
    url: str
    html_url: str
    badge_url: str


class WorkflowUsageType(TypedDict):
    """Workflow Usage

    Workflow Usage
    """

    billable: WorkflowUsagePropBillableType


class WorkflowUsagePropBillableType(TypedDict):
    """WorkflowUsagePropBillable"""

    ubuntu: NotRequired[WorkflowUsagePropBillablePropUbuntuType]
    macos: NotRequired[WorkflowUsagePropBillablePropMacosType]
    windows: NotRequired[WorkflowUsagePropBillablePropWindowsType]


class WorkflowUsagePropBillablePropUbuntuType(TypedDict):
    """WorkflowUsagePropBillablePropUbuntu"""

    total_ms: NotRequired[int]


class WorkflowUsagePropBillablePropMacosType(TypedDict):
    """WorkflowUsagePropBillablePropMacos"""

    total_ms: NotRequired[int]


class WorkflowUsagePropBillablePropWindowsType(TypedDict):
    """WorkflowUsagePropBillablePropWindows"""

    total_ms: NotRequired[int]


class CodeOfConductSimpleType(TypedDict):
    """Code Of Conduct Simple

    Code of Conduct Simple
    """

    url: str
    key: str
    name: str
    html_url: Union[str, None]


class FullRepositoryType(TypedDict):
    """Full Repository

    Full Repository
    """

    id: int
    node_id: str
    name: str
    full_name: str
    owner: SimpleUserType
    private: bool
    html_url: str
    description: Union[str, None]
    fork: bool
    url: str
    archive_url: str
    assignees_url: str
    blobs_url: str
    branches_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    deployments_url: str
    downloads_url: str
    events_url: str
    forks_url: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    languages_url: str
    merges_url: str
    milestones_url: str
    notifications_url: str
    pulls_url: str
    releases_url: str
    ssh_url: str
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    tags_url: str
    teams_url: str
    trees_url: str
    clone_url: str
    mirror_url: Union[str, None]
    hooks_url: str
    svn_url: str
    homepage: Union[str, None]
    language: Union[str, None]
    forks_count: int
    stargazers_count: int
    watchers_count: int
    size: int
    default_branch: str
    open_issues_count: int
    is_template: NotRequired[bool]
    topics: NotRequired[List[str]]
    has_issues: bool
    has_projects: bool
    has_wiki: bool
    has_pages: bool
    has_downloads: bool
    has_discussions: bool
    archived: bool
    disabled: bool
    visibility: NotRequired[str]
    pushed_at: datetime
    created_at: datetime
    updated_at: datetime
    permissions: NotRequired[FullRepositoryPropPermissionsType]
    allow_rebase_merge: NotRequired[bool]
    template_repository: NotRequired[Union[None, RepositoryType]]
    temp_clone_token: NotRequired[Union[str, None]]
    allow_squash_merge: NotRequired[bool]
    allow_auto_merge: NotRequired[bool]
    delete_branch_on_merge: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    use_squash_pr_title_as_default: NotRequired[bool]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    allow_forking: NotRequired[bool]
    web_commit_signoff_required: NotRequired[bool]
    subscribers_count: int
    network_count: int
    license_: Union[None, LicenseSimpleType]
    organization: NotRequired[Union[None, SimpleUserType]]
    parent: NotRequired[RepositoryType]
    source: NotRequired[RepositoryType]
    forks: int
    master_branch: NotRequired[str]
    open_issues: int
    watchers: int
    anonymous_access_enabled: NotRequired[bool]
    code_of_conduct: NotRequired[CodeOfConductSimpleType]
    security_and_analysis: NotRequired[Union[SecurityAndAnalysisType, None]]


class FullRepositoryPropPermissionsType(TypedDict):
    """FullRepositoryPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    push: bool
    triage: NotRequired[bool]
    pull: bool


class ArtifactType(TypedDict):
    """Artifact

    An artifact
    """

    id: int
    node_id: str
    name: str
    size_in_bytes: int
    url: str
    archive_download_url: str
    expired: bool
    created_at: Union[datetime, None]
    expires_at: Union[datetime, None]
    updated_at: Union[datetime, None]
    workflow_run: NotRequired[Union[ArtifactPropWorkflowRunType, None]]


class ArtifactPropWorkflowRunType(TypedDict):
    """ArtifactPropWorkflowRun"""

    id: NotRequired[int]
    repository_id: NotRequired[int]
    head_repository_id: NotRequired[int]
    head_branch: NotRequired[str]
    head_sha: NotRequired[str]


class ActionsCacheListType(TypedDict):
    """Repository actions caches

    Repository actions caches
    """

    total_count: int
    actions_caches: List[ActionsCacheListPropActionsCachesItemsType]


class ActionsCacheListPropActionsCachesItemsType(TypedDict):
    """ActionsCacheListPropActionsCachesItems"""

    id: NotRequired[int]
    ref: NotRequired[str]
    key: NotRequired[str]
    version: NotRequired[str]
    last_accessed_at: NotRequired[datetime]
    created_at: NotRequired[datetime]
    size_in_bytes: NotRequired[int]


class JobType(TypedDict):
    """Job

    Information of a job execution in a workflow run
    """

    id: int
    run_id: int
    run_url: str
    run_attempt: NotRequired[int]
    node_id: str
    head_sha: str
    url: str
    html_url: Union[str, None]
    status: Literal["queued", "in_progress", "completed"]
    conclusion: Union[
        None,
        Literal[
            "success",
            "failure",
            "neutral",
            "cancelled",
            "skipped",
            "timed_out",
            "action_required",
        ],
    ]
    created_at: datetime
    started_at: datetime
    completed_at: Union[datetime, None]
    name: str
    steps: NotRequired[List[JobPropStepsItemsType]]
    check_run_url: str
    labels: List[str]
    runner_id: Union[int, None]
    runner_name: Union[str, None]
    runner_group_id: Union[int, None]
    runner_group_name: Union[str, None]
    workflow_name: Union[str, None]
    head_branch: Union[str, None]


class JobPropStepsItemsType(TypedDict):
    """JobPropStepsItems"""

    status: Literal["queued", "in_progress", "completed"]
    conclusion: Union[str, None]
    name: str
    number: int
    started_at: NotRequired[Union[datetime, None]]
    completed_at: NotRequired[Union[datetime, None]]


class OidcCustomSubRepoType(TypedDict):
    """Actions OIDC subject customization for a repository

    Actions OIDC subject customization for a repository
    """

    use_default: bool
    include_claim_keys: NotRequired[List[str]]


class ActionsSecretType(TypedDict):
    """Actions Secret

    Set secrets for GitHub Actions.
    """

    name: str
    created_at: datetime
    updated_at: datetime


class ActionsVariableType(TypedDict):
    """Actions Variable"""

    name: str
    value: str
    created_at: datetime
    updated_at: datetime


class ActionsRepositoryPermissionsType(TypedDict):
    """ActionsRepositoryPermissions"""

    enabled: bool
    allowed_actions: NotRequired[Literal["all", "local_only", "selected"]]
    selected_actions_url: NotRequired[str]


class ActionsWorkflowAccessToRepositoryType(TypedDict):
    """ActionsWorkflowAccessToRepository"""

    access_level: Literal["none", "user", "organization"]


class ReferencedWorkflowType(TypedDict):
    """Referenced workflow

    A workflow referenced/reused by the initial caller workflow
    """

    path: str
    sha: str
    ref: NotRequired[str]


class PullRequestMinimalType(TypedDict):
    """Pull Request Minimal"""

    id: int
    number: int
    url: str
    head: PullRequestMinimalPropHeadType
    base: PullRequestMinimalPropBaseType


class PullRequestMinimalPropHeadType(TypedDict):
    """PullRequestMinimalPropHead"""

    ref: str
    sha: str
    repo: PullRequestMinimalPropHeadPropRepoType


class PullRequestMinimalPropHeadPropRepoType(TypedDict):
    """PullRequestMinimalPropHeadPropRepo"""

    id: int
    url: str
    name: str


class PullRequestMinimalPropBaseType(TypedDict):
    """PullRequestMinimalPropBase"""

    ref: str
    sha: str
    repo: PullRequestMinimalPropBasePropRepoType


class PullRequestMinimalPropBasePropRepoType(TypedDict):
    """PullRequestMinimalPropBasePropRepo"""

    id: int
    url: str
    name: str


class SimpleCommitType(TypedDict):
    """Simple Commit

    A commit.
    """

    id: str
    tree_id: str
    message: str
    timestamp: datetime
    author: Union[SimpleCommitPropAuthorType, None]
    committer: Union[SimpleCommitPropCommitterType, None]


class SimpleCommitPropAuthorType(TypedDict):
    """SimpleCommitPropAuthor"""

    name: str
    email: str


class SimpleCommitPropCommitterType(TypedDict):
    """SimpleCommitPropCommitter"""

    name: str
    email: str


class WorkflowRunType(TypedDict):
    """Workflow Run

    An invocation of a workflow
    """

    id: int
    name: NotRequired[Union[str, None]]
    node_id: str
    check_suite_id: NotRequired[int]
    check_suite_node_id: NotRequired[str]
    head_branch: Union[str, None]
    head_sha: str
    path: str
    run_number: int
    run_attempt: NotRequired[int]
    referenced_workflows: NotRequired[Union[List[ReferencedWorkflowType], None]]
    event: str
    status: Union[str, None]
    conclusion: Union[str, None]
    workflow_id: int
    url: str
    html_url: str
    pull_requests: Union[List[PullRequestMinimalType], None]
    created_at: datetime
    updated_at: datetime
    actor: NotRequired[SimpleUserType]
    triggering_actor: NotRequired[SimpleUserType]
    run_started_at: NotRequired[datetime]
    jobs_url: str
    logs_url: str
    check_suite_url: str
    artifacts_url: str
    cancel_url: str
    rerun_url: str
    previous_attempt_url: NotRequired[Union[str, None]]
    workflow_url: str
    head_commit: Union[None, SimpleCommitType]
    repository: MinimalRepositoryType
    head_repository: MinimalRepositoryType
    head_repository_id: NotRequired[int]
    display_title: str


class EnvironmentApprovalsType(TypedDict):
    """Environment Approval

    An entry in the reviews log for environment deployments
    """

    environments: List[EnvironmentApprovalsPropEnvironmentsItemsType]
    state: Literal["approved", "rejected", "pending"]
    user: SimpleUserType
    comment: str


class EnvironmentApprovalsPropEnvironmentsItemsType(TypedDict):
    """EnvironmentApprovalsPropEnvironmentsItems"""

    id: NotRequired[int]
    node_id: NotRequired[str]
    name: NotRequired[str]
    url: NotRequired[str]
    html_url: NotRequired[str]
    created_at: NotRequired[datetime]
    updated_at: NotRequired[datetime]


class ReviewCustomGatesCommentRequiredType(TypedDict):
    """ReviewCustomGatesCommentRequired"""

    environment_name: str
    comment: str


class ReviewCustomGatesStateRequiredType(TypedDict):
    """ReviewCustomGatesStateRequired"""

    environment_name: str
    state: Literal["approved", "rejected"]
    comment: NotRequired[str]


class PendingDeploymentType(TypedDict):
    """Pending Deployment

    Details of a deployment that is waiting for protection rules to pass
    """

    environment: PendingDeploymentPropEnvironmentType
    wait_timer: int
    wait_timer_started_at: Union[datetime, None]
    current_user_can_approve: bool
    reviewers: List[PendingDeploymentPropReviewersItemsType]


class PendingDeploymentPropEnvironmentType(TypedDict):
    """PendingDeploymentPropEnvironment"""

    id: NotRequired[int]
    node_id: NotRequired[str]
    name: NotRequired[str]
    url: NotRequired[str]
    html_url: NotRequired[str]


class PendingDeploymentPropReviewersItemsType(TypedDict):
    """PendingDeploymentPropReviewersItems"""

    type: NotRequired[Literal["User", "Team"]]
    reviewer: NotRequired[Union[SimpleUserType, TeamType]]


class DeploymentType(TypedDict):
    """Deployment

    A request for a specific ref(branch,sha,tag) to be deployed
    """

    url: str
    id: int
    node_id: str
    sha: str
    ref: str
    task: str
    payload: Union[DeploymentPropPayloadOneof0Type, str]
    original_environment: NotRequired[str]
    environment: str
    description: Union[str, None]
    creator: Union[None, SimpleUserType]
    created_at: datetime
    updated_at: datetime
    statuses_url: str
    repository_url: str
    transient_environment: NotRequired[bool]
    production_environment: NotRequired[bool]
    performed_via_github_app: NotRequired[Union[None, IntegrationType]]


class DeploymentPropPayloadOneof0Type(TypedDict):
    """DeploymentPropPayloadOneof0"""


class WorkflowRunUsageType(TypedDict):
    """Workflow Run Usage

    Workflow Run Usage
    """

    billable: WorkflowRunUsagePropBillableType
    run_duration_ms: NotRequired[int]


class WorkflowRunUsagePropBillableType(TypedDict):
    """WorkflowRunUsagePropBillable"""

    ubuntu: NotRequired[WorkflowRunUsagePropBillablePropUbuntuType]
    macos: NotRequired[WorkflowRunUsagePropBillablePropMacosType]
    windows: NotRequired[WorkflowRunUsagePropBillablePropWindowsType]


class WorkflowRunUsagePropBillablePropUbuntuType(TypedDict):
    """WorkflowRunUsagePropBillablePropUbuntu"""

    total_ms: int
    jobs: int
    job_runs: NotRequired[
        List[WorkflowRunUsagePropBillablePropUbuntuPropJobRunsItemsType]
    ]


class WorkflowRunUsagePropBillablePropUbuntuPropJobRunsItemsType(TypedDict):
    """WorkflowRunUsagePropBillablePropUbuntuPropJobRunsItems"""

    job_id: int
    duration_ms: int


class WorkflowRunUsagePropBillablePropMacosType(TypedDict):
    """WorkflowRunUsagePropBillablePropMacos"""

    total_ms: int
    jobs: int
    job_runs: NotRequired[
        List[WorkflowRunUsagePropBillablePropMacosPropJobRunsItemsType]
    ]


class WorkflowRunUsagePropBillablePropMacosPropJobRunsItemsType(TypedDict):
    """WorkflowRunUsagePropBillablePropMacosPropJobRunsItems"""

    job_id: int
    duration_ms: int


class WorkflowRunUsagePropBillablePropWindowsType(TypedDict):
    """WorkflowRunUsagePropBillablePropWindows"""

    total_ms: int
    jobs: int
    job_runs: NotRequired[
        List[WorkflowRunUsagePropBillablePropWindowsPropJobRunsItemsType]
    ]


class WorkflowRunUsagePropBillablePropWindowsPropJobRunsItemsType(TypedDict):
    """WorkflowRunUsagePropBillablePropWindowsPropJobRunsItems"""

    job_id: int
    duration_ms: int


class WorkflowType(TypedDict):
    """Workflow

    A GitHub Actions workflow
    """

    id: int
    node_id: str
    name: str
    path: str
    state: Literal[
        "active", "deleted", "disabled_fork", "disabled_inactivity", "disabled_manually"
    ]
    created_at: datetime
    updated_at: datetime
    url: str
    html_url: str
    badge_url: str
    deleted_at: NotRequired[datetime]


class AutolinkType(TypedDict):
    """Autolink reference

    An autolink reference.
    """

    id: int
    key_prefix: str
    url_template: str
    is_alphanumeric: bool


class ProtectedBranchRequiredStatusCheckType(TypedDict):
    """Protected Branch Required Status Check

    Protected Branch Required Status Check
    """

    url: NotRequired[str]
    enforcement_level: NotRequired[str]
    contexts: List[str]
    checks: List[ProtectedBranchRequiredStatusCheckPropChecksItemsType]
    contexts_url: NotRequired[str]
    strict: NotRequired[bool]


class ProtectedBranchRequiredStatusCheckPropChecksItemsType(TypedDict):
    """ProtectedBranchRequiredStatusCheckPropChecksItems"""

    context: str
    app_id: Union[int, None]


class ProtectedBranchAdminEnforcedType(TypedDict):
    """Protected Branch Admin Enforced

    Protected Branch Admin Enforced
    """

    url: str
    enabled: bool


class ProtectedBranchPullRequestReviewType(TypedDict):
    """Protected Branch Pull Request Review

    Protected Branch Pull Request Review
    """

    url: NotRequired[str]
    dismissal_restrictions: NotRequired[
        ProtectedBranchPullRequestReviewPropDismissalRestrictionsType
    ]
    bypass_pull_request_allowances: NotRequired[
        ProtectedBranchPullRequestReviewPropBypassPullRequestAllowancesType
    ]
    dismiss_stale_reviews: bool
    require_code_owner_reviews: bool
    required_approving_review_count: NotRequired[int]
    require_last_push_approval: NotRequired[bool]


class ProtectedBranchPullRequestReviewPropDismissalRestrictionsType(TypedDict):
    """ProtectedBranchPullRequestReviewPropDismissalRestrictions"""

    users: NotRequired[List[SimpleUserType]]
    teams: NotRequired[List[TeamType]]
    apps: NotRequired[List[IntegrationType]]
    url: NotRequired[str]
    users_url: NotRequired[str]
    teams_url: NotRequired[str]


class ProtectedBranchPullRequestReviewPropBypassPullRequestAllowancesType(TypedDict):
    """ProtectedBranchPullRequestReviewPropBypassPullRequestAllowances

    Allow specific users, teams, or apps to bypass pull request requirements.
    """

    users: NotRequired[List[SimpleUserType]]
    teams: NotRequired[List[TeamType]]
    apps: NotRequired[List[IntegrationType]]


class BranchRestrictionPolicyType(TypedDict):
    """Branch Restriction Policy

    Branch Restriction Policy
    """

    url: str
    users_url: str
    teams_url: str
    apps_url: str
    users: List[BranchRestrictionPolicyPropUsersItemsType]
    teams: List[BranchRestrictionPolicyPropTeamsItemsType]
    apps: List[BranchRestrictionPolicyPropAppsItemsType]


class BranchRestrictionPolicyPropUsersItemsType(TypedDict):
    """BranchRestrictionPolicyPropUsersItems"""

    login: NotRequired[str]
    id: NotRequired[int]
    node_id: NotRequired[str]
    avatar_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    url: NotRequired[str]
    html_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    organizations_url: NotRequired[str]
    repos_url: NotRequired[str]
    events_url: NotRequired[str]
    received_events_url: NotRequired[str]
    type: NotRequired[str]
    site_admin: NotRequired[bool]


class BranchRestrictionPolicyPropTeamsItemsType(TypedDict):
    """BranchRestrictionPolicyPropTeamsItems"""

    id: NotRequired[int]
    node_id: NotRequired[str]
    url: NotRequired[str]
    html_url: NotRequired[str]
    name: NotRequired[str]
    slug: NotRequired[str]
    description: NotRequired[Union[str, None]]
    privacy: NotRequired[str]
    notification_setting: NotRequired[str]
    permission: NotRequired[str]
    members_url: NotRequired[str]
    repositories_url: NotRequired[str]
    parent: NotRequired[Union[str, None]]


class BranchRestrictionPolicyPropAppsItemsType(TypedDict):
    """BranchRestrictionPolicyPropAppsItems"""

    id: NotRequired[int]
    slug: NotRequired[str]
    node_id: NotRequired[str]
    owner: NotRequired[BranchRestrictionPolicyPropAppsItemsPropOwnerType]
    name: NotRequired[str]
    description: NotRequired[str]
    external_url: NotRequired[str]
    html_url: NotRequired[str]
    created_at: NotRequired[str]
    updated_at: NotRequired[str]
    permissions: NotRequired[BranchRestrictionPolicyPropAppsItemsPropPermissionsType]
    events: NotRequired[List[str]]


class BranchRestrictionPolicyPropAppsItemsPropOwnerType(TypedDict):
    """BranchRestrictionPolicyPropAppsItemsPropOwner"""

    login: NotRequired[str]
    id: NotRequired[int]
    node_id: NotRequired[str]
    url: NotRequired[str]
    repos_url: NotRequired[str]
    events_url: NotRequired[str]
    hooks_url: NotRequired[str]
    issues_url: NotRequired[str]
    members_url: NotRequired[str]
    public_members_url: NotRequired[str]
    avatar_url: NotRequired[str]
    description: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    type: NotRequired[str]
    site_admin: NotRequired[bool]


class BranchRestrictionPolicyPropAppsItemsPropPermissionsType(TypedDict):
    """BranchRestrictionPolicyPropAppsItemsPropPermissions"""

    metadata: NotRequired[str]
    contents: NotRequired[str]
    issues: NotRequired[str]
    single_file: NotRequired[str]


class BranchProtectionType(TypedDict):
    """Branch Protection

    Branch Protection
    """

    url: NotRequired[str]
    enabled: NotRequired[bool]
    required_status_checks: NotRequired[ProtectedBranchRequiredStatusCheckType]
    enforce_admins: NotRequired[ProtectedBranchAdminEnforcedType]
    required_pull_request_reviews: NotRequired[ProtectedBranchPullRequestReviewType]
    restrictions: NotRequired[BranchRestrictionPolicyType]
    required_linear_history: NotRequired[BranchProtectionPropRequiredLinearHistoryType]
    allow_force_pushes: NotRequired[BranchProtectionPropAllowForcePushesType]
    allow_deletions: NotRequired[BranchProtectionPropAllowDeletionsType]
    block_creations: NotRequired[BranchProtectionPropBlockCreationsType]
    required_conversation_resolution: NotRequired[
        BranchProtectionPropRequiredConversationResolutionType
    ]
    name: NotRequired[str]
    protection_url: NotRequired[str]
    required_signatures: NotRequired[BranchProtectionPropRequiredSignaturesType]
    lock_branch: NotRequired[BranchProtectionPropLockBranchType]
    allow_fork_syncing: NotRequired[BranchProtectionPropAllowForkSyncingType]


class BranchProtectionPropRequiredLinearHistoryType(TypedDict):
    """BranchProtectionPropRequiredLinearHistory"""

    enabled: NotRequired[bool]


class BranchProtectionPropAllowForcePushesType(TypedDict):
    """BranchProtectionPropAllowForcePushes"""

    enabled: NotRequired[bool]


class BranchProtectionPropAllowDeletionsType(TypedDict):
    """BranchProtectionPropAllowDeletions"""

    enabled: NotRequired[bool]


class BranchProtectionPropBlockCreationsType(TypedDict):
    """BranchProtectionPropBlockCreations"""

    enabled: NotRequired[bool]


class BranchProtectionPropRequiredConversationResolutionType(TypedDict):
    """BranchProtectionPropRequiredConversationResolution"""

    enabled: NotRequired[bool]


class BranchProtectionPropRequiredSignaturesType(TypedDict):
    """BranchProtectionPropRequiredSignatures"""

    url: str
    enabled: bool


class BranchProtectionPropLockBranchType(TypedDict):
    """BranchProtectionPropLockBranch

    Whether to set the branch as read-only. If this is true, users will not be able
    to push to the branch.
    """

    enabled: NotRequired[bool]


class BranchProtectionPropAllowForkSyncingType(TypedDict):
    """BranchProtectionPropAllowForkSyncing

    Whether users can pull changes from upstream when the branch is locked. Set to
    `true` to allow fork syncing. Set to `false` to prevent fork syncing.
    """

    enabled: NotRequired[bool]


class ShortBranchType(TypedDict):
    """Short Branch

    Short Branch
    """

    name: str
    commit: ShortBranchPropCommitType
    protected: bool
    protection: NotRequired[BranchProtectionType]
    protection_url: NotRequired[str]


class ShortBranchPropCommitType(TypedDict):
    """ShortBranchPropCommit"""

    sha: str
    url: str


class GitUserType(TypedDict):
    """Git User

    Metaproperties for Git author/committer information.
    """

    name: NotRequired[str]
    email: NotRequired[str]
    date: NotRequired[str]


class VerificationType(TypedDict):
    """Verification"""

    verified: bool
    reason: str
    payload: Union[str, None]
    signature: Union[str, None]


class DiffEntryType(TypedDict):
    """Diff Entry

    Diff Entry
    """

    sha: str
    filename: str
    status: Literal[
        "added", "removed", "modified", "renamed", "copied", "changed", "unchanged"
    ]
    additions: int
    deletions: int
    changes: int
    blob_url: str
    raw_url: str
    contents_url: str
    patch: NotRequired[str]
    previous_filename: NotRequired[str]


class CommitType(TypedDict):
    """Commit

    Commit
    """

    url: str
    sha: str
    node_id: str
    html_url: str
    comments_url: str
    commit: CommitPropCommitType
    author: Union[None, SimpleUserType]
    committer: Union[None, SimpleUserType]
    parents: List[CommitPropParentsItemsType]
    stats: NotRequired[CommitPropStatsType]
    files: NotRequired[List[DiffEntryType]]


class CommitPropCommitType(TypedDict):
    """CommitPropCommit"""

    url: str
    author: Union[None, GitUserType]
    committer: Union[None, GitUserType]
    message: str
    comment_count: int
    tree: CommitPropCommitPropTreeType
    verification: NotRequired[VerificationType]


class CommitPropCommitPropTreeType(TypedDict):
    """CommitPropCommitPropTree"""

    sha: str
    url: str


class CommitPropParentsItemsType(TypedDict):
    """CommitPropParentsItems"""

    sha: str
    url: str
    html_url: NotRequired[str]


class CommitPropStatsType(TypedDict):
    """CommitPropStats"""

    additions: NotRequired[int]
    deletions: NotRequired[int]
    total: NotRequired[int]


class BranchWithProtectionType(TypedDict):
    """Branch With Protection

    Branch With Protection
    """

    name: str
    commit: CommitType
    links: BranchWithProtectionPropLinksType
    protected: bool
    protection: BranchProtectionType
    protection_url: str
    pattern: NotRequired[str]
    required_approving_review_count: NotRequired[int]


class BranchWithProtectionPropLinksType(TypedDict):
    """BranchWithProtectionPropLinks"""

    html: str
    self_: str


class StatusCheckPolicyType(TypedDict):
    """Status Check Policy

    Status Check Policy
    """

    url: str
    strict: bool
    contexts: List[str]
    checks: List[StatusCheckPolicyPropChecksItemsType]
    contexts_url: str


class StatusCheckPolicyPropChecksItemsType(TypedDict):
    """StatusCheckPolicyPropChecksItems"""

    context: str
    app_id: Union[int, None]


class ProtectedBranchType(TypedDict):
    """Protected Branch

    Branch protections protect branches
    """

    url: str
    required_status_checks: NotRequired[StatusCheckPolicyType]
    required_pull_request_reviews: NotRequired[
        ProtectedBranchPropRequiredPullRequestReviewsType
    ]
    required_signatures: NotRequired[ProtectedBranchPropRequiredSignaturesType]
    enforce_admins: NotRequired[ProtectedBranchPropEnforceAdminsType]
    required_linear_history: NotRequired[ProtectedBranchPropRequiredLinearHistoryType]
    allow_force_pushes: NotRequired[ProtectedBranchPropAllowForcePushesType]
    allow_deletions: NotRequired[ProtectedBranchPropAllowDeletionsType]
    restrictions: NotRequired[BranchRestrictionPolicyType]
    required_conversation_resolution: NotRequired[
        ProtectedBranchPropRequiredConversationResolutionType
    ]
    block_creations: NotRequired[ProtectedBranchPropBlockCreationsType]
    lock_branch: NotRequired[ProtectedBranchPropLockBranchType]
    allow_fork_syncing: NotRequired[ProtectedBranchPropAllowForkSyncingType]


class ProtectedBranchPropRequiredPullRequestReviewsType(TypedDict):
    """ProtectedBranchPropRequiredPullRequestReviews"""

    url: str
    dismiss_stale_reviews: NotRequired[bool]
    require_code_owner_reviews: NotRequired[bool]
    required_approving_review_count: NotRequired[int]
    require_last_push_approval: NotRequired[bool]
    dismissal_restrictions: NotRequired[
        ProtectedBranchPropRequiredPullRequestReviewsPropDismissalRestrictionsType
    ]
    bypass_pull_request_allowances: NotRequired[
        ProtectedBranchPropRequiredPullRequestReviewsPropBypassPullRequestAllowancesType
    ]


class ProtectedBranchPropRequiredPullRequestReviewsPropDismissalRestrictionsType(
    TypedDict
):
    """ProtectedBranchPropRequiredPullRequestReviewsPropDismissalRestrictions"""

    url: str
    users_url: str
    teams_url: str
    users: List[SimpleUserType]
    teams: List[TeamType]
    apps: NotRequired[List[IntegrationType]]


class ProtectedBranchPropRequiredPullRequestReviewsPropBypassPullRequestAllowancesType(
    TypedDict
):
    """ProtectedBranchPropRequiredPullRequestReviewsPropBypassPullRequestAllowances"""

    users: List[SimpleUserType]
    teams: List[TeamType]
    apps: NotRequired[List[IntegrationType]]


class ProtectedBranchPropRequiredSignaturesType(TypedDict):
    """ProtectedBranchPropRequiredSignatures"""

    url: str
    enabled: bool


class ProtectedBranchPropEnforceAdminsType(TypedDict):
    """ProtectedBranchPropEnforceAdmins"""

    url: str
    enabled: bool


class ProtectedBranchPropRequiredLinearHistoryType(TypedDict):
    """ProtectedBranchPropRequiredLinearHistory"""

    enabled: bool


class ProtectedBranchPropAllowForcePushesType(TypedDict):
    """ProtectedBranchPropAllowForcePushes"""

    enabled: bool


class ProtectedBranchPropAllowDeletionsType(TypedDict):
    """ProtectedBranchPropAllowDeletions"""

    enabled: bool


class ProtectedBranchPropRequiredConversationResolutionType(TypedDict):
    """ProtectedBranchPropRequiredConversationResolution"""

    enabled: NotRequired[bool]


class ProtectedBranchPropBlockCreationsType(TypedDict):
    """ProtectedBranchPropBlockCreations"""

    enabled: bool


class ProtectedBranchPropLockBranchType(TypedDict):
    """ProtectedBranchPropLockBranch

    Whether to set the branch as read-only. If this is true, users will not be able
    to push to the branch.
    """

    enabled: NotRequired[bool]


class ProtectedBranchPropAllowForkSyncingType(TypedDict):
    """ProtectedBranchPropAllowForkSyncing

    Whether users can pull changes from upstream when the branch is locked. Set to
    `true` to allow fork syncing. Set to `false` to prevent fork syncing.
    """

    enabled: NotRequired[bool]


class DeploymentSimpleType(TypedDict):
    """Deployment

    A deployment created as the result of an Actions check run from a workflow that
    references an environment
    """

    url: str
    id: int
    node_id: str
    task: str
    original_environment: NotRequired[str]
    environment: str
    description: Union[str, None]
    created_at: datetime
    updated_at: datetime
    statuses_url: str
    repository_url: str
    transient_environment: NotRequired[bool]
    production_environment: NotRequired[bool]
    performed_via_github_app: NotRequired[Union[None, IntegrationType]]


class CheckRunType(TypedDict):
    """CheckRun

    A check performed on the code of a given code change
    """

    id: int
    head_sha: str
    node_id: str
    external_id: Union[str, None]
    url: str
    html_url: Union[str, None]
    details_url: Union[str, None]
    status: Literal["queued", "in_progress", "completed"]
    conclusion: Union[
        None,
        Literal[
            "success",
            "failure",
            "neutral",
            "cancelled",
            "skipped",
            "timed_out",
            "action_required",
        ],
    ]
    started_at: Union[datetime, None]
    completed_at: Union[datetime, None]
    output: CheckRunPropOutputType
    name: str
    check_suite: Union[CheckRunPropCheckSuiteType, None]
    app: Union[None, IntegrationType]
    pull_requests: List[PullRequestMinimalType]
    deployment: NotRequired[DeploymentSimpleType]


class CheckRunPropOutputType(TypedDict):
    """CheckRunPropOutput"""

    title: Union[str, None]
    summary: Union[str, None]
    text: Union[str, None]
    annotations_count: int
    annotations_url: str


class CheckRunPropCheckSuiteType(TypedDict):
    """CheckRunPropCheckSuite"""

    id: int


class CheckAnnotationType(TypedDict):
    """Check Annotation

    Check Annotation
    """

    path: str
    start_line: int
    end_line: int
    start_column: Union[int, None]
    end_column: Union[int, None]
    annotation_level: Union[str, None]
    title: Union[str, None]
    message: Union[str, None]
    raw_details: Union[str, None]
    blob_href: str


class CheckSuiteType(TypedDict):
    """CheckSuite

    A suite of checks performed on the code of a given code change
    """

    id: int
    node_id: str
    head_branch: Union[str, None]
    head_sha: str
    status: Union[None, Literal["queued", "in_progress", "completed"]]
    conclusion: Union[
        None,
        Literal[
            "success",
            "failure",
            "neutral",
            "cancelled",
            "skipped",
            "timed_out",
            "action_required",
            "startup_failure",
            "stale",
        ],
    ]
    url: Union[str, None]
    before: Union[str, None]
    after: Union[str, None]
    pull_requests: Union[List[PullRequestMinimalType], None]
    app: Union[None, IntegrationType]
    repository: MinimalRepositoryType
    created_at: Union[datetime, None]
    updated_at: Union[datetime, None]
    head_commit: SimpleCommitType
    latest_check_runs_count: int
    check_runs_url: str
    rerequestable: NotRequired[bool]
    runs_rerequestable: NotRequired[bool]


class CheckSuitePreferenceType(TypedDict):
    """Check Suite Preference

    Check suite configuration preferences for a repository.
    """

    preferences: CheckSuitePreferencePropPreferencesType
    repository: MinimalRepositoryType


class CheckSuitePreferencePropPreferencesType(TypedDict):
    """CheckSuitePreferencePropPreferences"""

    auto_trigger_checks: NotRequired[
        List[CheckSuitePreferencePropPreferencesPropAutoTriggerChecksItemsType]
    ]


class CheckSuitePreferencePropPreferencesPropAutoTriggerChecksItemsType(TypedDict):
    """CheckSuitePreferencePropPreferencesPropAutoTriggerChecksItems"""

    app_id: int
    setting: bool


class CodeScanningAlertRuleSummaryType(TypedDict):
    """CodeScanningAlertRuleSummary"""

    id: NotRequired[Union[str, None]]
    name: NotRequired[str]
    tags: NotRequired[Union[List[str], None]]
    severity: NotRequired[Union[None, Literal["none", "note", "warning", "error"]]]
    description: NotRequired[str]


class CodeScanningAlertItemsType(TypedDict):
    """CodeScanningAlertItems"""

    number: int
    created_at: datetime
    updated_at: NotRequired[datetime]
    url: str
    html_url: str
    instances_url: str
    state: Literal["open", "closed", "dismissed", "fixed"]
    fixed_at: NotRequired[Union[datetime, None]]
    dismissed_by: Union[None, SimpleUserType]
    dismissed_at: Union[datetime, None]
    dismissed_reason: Union[
        None, Literal["false positive", "won't fix", "used in tests"]
    ]
    dismissed_comment: NotRequired[Union[str, None]]
    rule: CodeScanningAlertRuleSummaryType
    tool: CodeScanningAnalysisToolType
    most_recent_instance: CodeScanningAlertInstanceType


class CodeScanningAlertType(TypedDict):
    """CodeScanningAlert"""

    number: int
    created_at: datetime
    updated_at: NotRequired[datetime]
    url: str
    html_url: str
    instances_url: str
    state: Literal["open", "closed", "dismissed", "fixed"]
    fixed_at: NotRequired[Union[datetime, None]]
    dismissed_by: Union[None, SimpleUserType]
    dismissed_at: Union[datetime, None]
    dismissed_reason: Union[
        None, Literal["false positive", "won't fix", "used in tests"]
    ]
    dismissed_comment: NotRequired[Union[str, None]]
    rule: CodeScanningAlertRuleType
    tool: CodeScanningAnalysisToolType
    most_recent_instance: CodeScanningAlertInstanceType


class CodeScanningAnalysisType(TypedDict):
    """CodeScanningAnalysis"""

    ref: str
    commit_sha: str
    analysis_key: str
    environment: str
    category: NotRequired[str]
    error: str
    created_at: datetime
    results_count: int
    rules_count: int
    id: int
    url: str
    sarif_id: str
    tool: CodeScanningAnalysisToolType
    deletable: bool
    warning: str


class CodeScanningAnalysisDeletionType(TypedDict):
    """Analysis deletion

    Successful deletion of a code scanning analysis
    """

    next_analysis_url: Union[str, None]
    confirm_delete_url: Union[str, None]


class CodeScanningCodeqlDatabaseType(TypedDict):
    """CodeQL Database

    A CodeQL database.
    """

    id: int
    name: str
    language: str
    uploader: SimpleUserType
    content_type: str
    size: int
    created_at: datetime
    updated_at: datetime
    url: str


class CodeScanningDefaultSetupType(TypedDict):
    """CodeScanningDefaultSetup

    Configuration for code scanning default setup.
    """

    state: NotRequired[Literal["configured", "not-configured"]]
    languages: NotRequired[
        List[
            Literal[
                "c",
                "cpp",
                "csharp",
                "go",
                "java",
                "javascript",
                "kotlin",
                "python",
                "ruby",
                "typescript",
            ]
        ]
    ]
    query_suite: NotRequired[Literal["default", "extended"]]
    updated_at: NotRequired[Union[datetime, None]]


class CodeScanningDefaultSetupUpdateType(TypedDict):
    """CodeScanningDefaultSetupUpdate

    Configuration for code scanning default setup.
    """

    state: Literal["configured", "not-configured"]
    query_suite: NotRequired[Literal["default", "extended"]]


class CodeScanningDefaultSetupUpdateResponseType(TypedDict):
    """CodeScanningDefaultSetupUpdateResponse

    You can use `run_url` to track the status of the run. This includes a property
    status and conclusion.
    You should not rely on this always being an actions workflow run object.
    """

    run_id: NotRequired[int]
    run_url: NotRequired[str]


class CodeScanningSarifsReceiptType(TypedDict):
    """CodeScanningSarifsReceipt"""

    id: NotRequired[str]
    url: NotRequired[str]


class CodeScanningSarifsStatusType(TypedDict):
    """CodeScanningSarifsStatus"""

    processing_status: NotRequired[Literal["pending", "complete", "failed"]]
    analyses_url: NotRequired[Union[str, None]]
    errors: NotRequired[Union[List[str], None]]


class CodeownersErrorsType(TypedDict):
    """CODEOWNERS errors

    A list of errors found in a repo's CODEOWNERS file
    """

    errors: List[CodeownersErrorsPropErrorsItemsType]


class CodeownersErrorsPropErrorsItemsType(TypedDict):
    """CodeownersErrorsPropErrorsItems"""

    line: int
    column: int
    source: NotRequired[str]
    kind: str
    suggestion: NotRequired[Union[str, None]]
    message: str
    path: str


class RepoCodespacesSecretType(TypedDict):
    """Codespaces Secret

    Set repository secrets for GitHub Codespaces.
    """

    name: str
    created_at: datetime
    updated_at: datetime


class CollaboratorType(TypedDict):
    """Collaborator

    Collaborator
    """

    login: str
    id: int
    email: NotRequired[Union[str, None]]
    name: NotRequired[Union[str, None]]
    node_id: str
    avatar_url: str
    gravatar_id: Union[str, None]
    url: str
    html_url: str
    followers_url: str
    following_url: str
    gists_url: str
    starred_url: str
    subscriptions_url: str
    organizations_url: str
    repos_url: str
    events_url: str
    received_events_url: str
    type: str
    site_admin: bool
    permissions: NotRequired[CollaboratorPropPermissionsType]
    role_name: str


class CollaboratorPropPermissionsType(TypedDict):
    """CollaboratorPropPermissions"""

    pull: bool
    triage: NotRequired[bool]
    push: bool
    maintain: NotRequired[bool]
    admin: bool


class RepositoryInvitationType(TypedDict):
    """Repository Invitation

    Repository invitations let you manage who you collaborate with.
    """

    id: int
    repository: MinimalRepositoryType
    invitee: Union[None, SimpleUserType]
    inviter: Union[None, SimpleUserType]
    permissions: Literal["read", "write", "admin", "triage", "maintain"]
    created_at: datetime
    expired: NotRequired[bool]
    url: str
    html_url: str
    node_id: str


class RepositoryCollaboratorPermissionType(TypedDict):
    """Repository Collaborator Permission

    Repository Collaborator Permission
    """

    permission: str
    role_name: str
    user: Union[None, CollaboratorType]


class CommitCommentType(TypedDict):
    """Commit Comment

    Commit Comment
    """

    html_url: str
    url: str
    id: int
    node_id: str
    body: str
    path: Union[str, None]
    position: Union[int, None]
    line: Union[int, None]
    commit_id: str
    user: Union[None, SimpleUserType]
    created_at: datetime
    updated_at: datetime
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    reactions: NotRequired[ReactionRollupType]


class BranchShortType(TypedDict):
    """Branch Short

    Branch Short
    """

    name: str
    commit: BranchShortPropCommitType
    protected: bool


class BranchShortPropCommitType(TypedDict):
    """BranchShortPropCommit"""

    sha: str
    url: str


class LinkType(TypedDict):
    """Link

    Hypermedia Link
    """

    href: str


class AutoMergeType(TypedDict):
    """Auto merge

    The status of auto merging a pull request.
    """

    enabled_by: SimpleUserType
    merge_method: Literal["merge", "squash", "rebase"]
    commit_title: Union[str, None]
    commit_message: Union[str, None]


class PullRequestSimpleType(TypedDict):
    """Pull Request Simple

    Pull Request Simple
    """

    url: str
    id: int
    node_id: str
    html_url: str
    diff_url: str
    patch_url: str
    issue_url: str
    commits_url: str
    review_comments_url: str
    review_comment_url: str
    comments_url: str
    statuses_url: str
    number: int
    state: str
    locked: bool
    title: str
    user: Union[None, SimpleUserType]
    body: Union[str, None]
    labels: List[PullRequestSimplePropLabelsItemsType]
    milestone: Union[None, MilestoneType]
    active_lock_reason: NotRequired[Union[str, None]]
    created_at: datetime
    updated_at: datetime
    closed_at: Union[datetime, None]
    merged_at: Union[datetime, None]
    merge_commit_sha: Union[str, None]
    assignee: Union[None, SimpleUserType]
    assignees: NotRequired[Union[List[SimpleUserType], None]]
    requested_reviewers: NotRequired[Union[List[SimpleUserType], None]]
    requested_teams: NotRequired[Union[List[TeamType], None]]
    head: PullRequestSimplePropHeadType
    base: PullRequestSimplePropBaseType
    links: PullRequestSimplePropLinksType
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    auto_merge: Union[AutoMergeType, None]
    draft: NotRequired[bool]


class PullRequestSimplePropLabelsItemsType(TypedDict):
    """PullRequestSimplePropLabelsItems"""

    id: int
    node_id: str
    url: str
    name: str
    description: Union[str, None]
    color: str
    default: bool


class PullRequestSimplePropHeadType(TypedDict):
    """PullRequestSimplePropHead"""

    label: str
    ref: str
    repo: Union[None, RepositoryType]
    sha: str
    user: Union[None, SimpleUserType]


class PullRequestSimplePropBaseType(TypedDict):
    """PullRequestSimplePropBase"""

    label: str
    ref: str
    repo: RepositoryType
    sha: str
    user: Union[None, SimpleUserType]


class PullRequestSimplePropLinksType(TypedDict):
    """PullRequestSimplePropLinks"""

    comments: LinkType
    commits: LinkType
    statuses: LinkType
    html: LinkType
    issue: LinkType
    review_comments: LinkType
    review_comment: LinkType
    self_: LinkType


class SimpleCommitStatusType(TypedDict):
    """Simple Commit Status"""

    description: Union[str, None]
    id: int
    node_id: str
    state: str
    context: str
    target_url: Union[str, None]
    required: NotRequired[Union[bool, None]]
    avatar_url: Union[str, None]
    url: str
    created_at: datetime
    updated_at: datetime


class CombinedCommitStatusType(TypedDict):
    """Combined Commit Status

    Combined Commit Status
    """

    state: str
    statuses: List[SimpleCommitStatusType]
    sha: str
    total_count: int
    repository: MinimalRepositoryType
    commit_url: str
    url: str


class StatusType(TypedDict):
    """Status

    The status of a commit.
    """

    url: str
    avatar_url: Union[str, None]
    id: int
    node_id: str
    state: str
    description: Union[str, None]
    target_url: Union[str, None]
    context: str
    created_at: str
    updated_at: str
    creator: Union[None, SimpleUserType]


class CommunityHealthFileType(TypedDict):
    """Community Health File"""

    url: str
    html_url: str


class CommunityProfileType(TypedDict):
    """Community Profile

    Community Profile
    """

    health_percentage: int
    description: Union[str, None]
    documentation: Union[str, None]
    files: CommunityProfilePropFilesType
    updated_at: Union[datetime, None]
    content_reports_enabled: NotRequired[bool]


class CommunityProfilePropFilesType(TypedDict):
    """CommunityProfilePropFiles"""

    code_of_conduct: Union[None, CodeOfConductSimpleType]
    code_of_conduct_file: Union[None, CommunityHealthFileType]
    license_: Union[None, LicenseSimpleType]
    contributing: Union[None, CommunityHealthFileType]
    readme: Union[None, CommunityHealthFileType]
    issue_template: Union[None, CommunityHealthFileType]
    pull_request_template: Union[None, CommunityHealthFileType]


class CommitComparisonType(TypedDict):
    """Commit Comparison

    Commit Comparison
    """

    url: str
    html_url: str
    permalink_url: str
    diff_url: str
    patch_url: str
    base_commit: CommitType
    merge_base_commit: CommitType
    status: Literal["diverged", "ahead", "behind", "identical"]
    ahead_by: int
    behind_by: int
    total_commits: int
    commits: List[CommitType]
    files: NotRequired[List[DiffEntryType]]


class ContentTreeType(TypedDict):
    """Content Tree

    Content Tree
    """

    type: str
    size: int
    name: str
    path: str
    sha: str
    url: str
    git_url: Union[str, None]
    html_url: Union[str, None]
    download_url: Union[str, None]
    entries: NotRequired[List[ContentTreePropEntriesItemsType]]
    links: ContentTreePropLinksType


class ContentTreePropEntriesItemsType(TypedDict):
    """ContentTreePropEntriesItems"""

    type: str
    size: int
    name: str
    path: str
    content: NotRequired[str]
    sha: str
    url: str
    git_url: Union[str, None]
    html_url: Union[str, None]
    download_url: Union[str, None]
    links: ContentTreePropEntriesItemsPropLinksType


class ContentTreePropEntriesItemsPropLinksType(TypedDict):
    """ContentTreePropEntriesItemsPropLinks"""

    git: Union[str, None]
    html: Union[str, None]
    self_: str


class ContentTreePropLinksType(TypedDict):
    """ContentTreePropLinks"""

    git: Union[str, None]
    html: Union[str, None]
    self_: str


class ContentDirectoryItemsType(TypedDict):
    """ContentDirectoryItems"""

    type: Literal["dir", "file", "submodule", "symlink"]
    size: int
    name: str
    path: str
    content: NotRequired[str]
    sha: str
    url: str
    git_url: Union[str, None]
    html_url: Union[str, None]
    download_url: Union[str, None]
    links: ContentDirectoryItemsPropLinksType


class ContentDirectoryItemsPropLinksType(TypedDict):
    """ContentDirectoryItemsPropLinks"""

    git: Union[str, None]
    html: Union[str, None]
    self_: str


class ContentFileType(TypedDict):
    """Content File

    Content File
    """

    type: Literal["file"]
    encoding: str
    size: int
    name: str
    path: str
    content: str
    sha: str
    url: str
    git_url: Union[str, None]
    html_url: Union[str, None]
    download_url: Union[str, None]
    links: ContentFilePropLinksType
    target: NotRequired[str]
    submodule_git_url: NotRequired[str]


class ContentFilePropLinksType(TypedDict):
    """ContentFilePropLinks"""

    git: Union[str, None]
    html: Union[str, None]
    self_: str


class ContentSymlinkType(TypedDict):
    """Symlink Content

    An object describing a symlink
    """

    type: Literal["symlink"]
    target: str
    size: int
    name: str
    path: str
    sha: str
    url: str
    git_url: Union[str, None]
    html_url: Union[str, None]
    download_url: Union[str, None]
    links: ContentSymlinkPropLinksType


class ContentSymlinkPropLinksType(TypedDict):
    """ContentSymlinkPropLinks"""

    git: Union[str, None]
    html: Union[str, None]
    self_: str


class ContentSubmoduleType(TypedDict):
    """Submodule Content

    An object describing a submodule
    """

    type: Literal["submodule"]
    submodule_git_url: str
    size: int
    name: str
    path: str
    sha: str
    url: str
    git_url: Union[str, None]
    html_url: Union[str, None]
    download_url: Union[str, None]
    links: ContentSubmodulePropLinksType


class ContentSubmodulePropLinksType(TypedDict):
    """ContentSubmodulePropLinks"""

    git: Union[str, None]
    html: Union[str, None]
    self_: str


class FileCommitType(TypedDict):
    """File Commit

    File Commit
    """

    content: Union[FileCommitPropContentType, None]
    commit: FileCommitPropCommitType


class FileCommitPropContentPropLinksType(TypedDict):
    """FileCommitPropContentPropLinks"""

    self_: NotRequired[str]
    git: NotRequired[str]
    html: NotRequired[str]


class FileCommitPropContentType(TypedDict):
    """FileCommitPropContent"""

    name: NotRequired[str]
    path: NotRequired[str]
    sha: NotRequired[str]
    size: NotRequired[int]
    url: NotRequired[str]
    html_url: NotRequired[str]
    git_url: NotRequired[str]
    download_url: NotRequired[str]
    type: NotRequired[str]
    links: NotRequired[FileCommitPropContentPropLinksType]


class FileCommitPropCommitType(TypedDict):
    """FileCommitPropCommit"""

    sha: NotRequired[str]
    node_id: NotRequired[str]
    url: NotRequired[str]
    html_url: NotRequired[str]
    author: NotRequired[FileCommitPropCommitPropAuthorType]
    committer: NotRequired[FileCommitPropCommitPropCommitterType]
    message: NotRequired[str]
    tree: NotRequired[FileCommitPropCommitPropTreeType]
    parents: NotRequired[List[FileCommitPropCommitPropParentsItemsType]]
    verification: NotRequired[FileCommitPropCommitPropVerificationType]


class FileCommitPropCommitPropAuthorType(TypedDict):
    """FileCommitPropCommitPropAuthor"""

    date: NotRequired[str]
    name: NotRequired[str]
    email: NotRequired[str]


class FileCommitPropCommitPropCommitterType(TypedDict):
    """FileCommitPropCommitPropCommitter"""

    date: NotRequired[str]
    name: NotRequired[str]
    email: NotRequired[str]


class FileCommitPropCommitPropTreeType(TypedDict):
    """FileCommitPropCommitPropTree"""

    url: NotRequired[str]
    sha: NotRequired[str]


class FileCommitPropCommitPropParentsItemsType(TypedDict):
    """FileCommitPropCommitPropParentsItems"""

    url: NotRequired[str]
    html_url: NotRequired[str]
    sha: NotRequired[str]


class FileCommitPropCommitPropVerificationType(TypedDict):
    """FileCommitPropCommitPropVerification"""

    verified: NotRequired[bool]
    reason: NotRequired[str]
    signature: NotRequired[Union[str, None]]
    payload: NotRequired[Union[str, None]]


class ContributorType(TypedDict):
    """Contributor

    Contributor
    """

    login: NotRequired[str]
    id: NotRequired[int]
    node_id: NotRequired[str]
    avatar_url: NotRequired[str]
    gravatar_id: NotRequired[Union[str, None]]
    url: NotRequired[str]
    html_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    organizations_url: NotRequired[str]
    repos_url: NotRequired[str]
    events_url: NotRequired[str]
    received_events_url: NotRequired[str]
    type: str
    site_admin: NotRequired[bool]
    contributions: int
    email: NotRequired[str]
    name: NotRequired[str]


class DependabotAlertType(TypedDict):
    """DependabotAlert

    A Dependabot alert.
    """

    number: int
    state: Literal["auto_dismissed", "dismissed", "fixed", "open"]
    dependency: DependabotAlertPropDependencyType
    security_advisory: DependabotAlertSecurityAdvisoryType
    security_vulnerability: DependabotAlertSecurityVulnerabilityType
    url: str
    html_url: str
    created_at: datetime
    updated_at: datetime
    dismissed_at: Union[datetime, None]
    dismissed_by: Union[None, SimpleUserType]
    dismissed_reason: Union[
        None,
        Literal[
            "fix_started", "inaccurate", "no_bandwidth", "not_used", "tolerable_risk"
        ],
    ]
    dismissed_comment: Union[str, None]
    fixed_at: Union[datetime, None]
    auto_dismissed_at: NotRequired[Union[datetime, None]]


class DependabotAlertPropDependencyType(TypedDict):
    """DependabotAlertPropDependency

    Details for the vulnerable dependency.
    """

    package: NotRequired[DependabotAlertPackageType]
    manifest_path: NotRequired[str]
    scope: NotRequired[Union[None, Literal["development", "runtime"]]]


class DependabotSecretType(TypedDict):
    """Dependabot Secret

    Set secrets for Dependabot.
    """

    name: str
    created_at: datetime
    updated_at: datetime


class DependencyGraphDiffItemsType(TypedDict):
    """DependencyGraphDiffItems"""

    change_type: Literal["added", "removed"]
    manifest: str
    ecosystem: str
    name: str
    version: str
    package_url: Union[str, None]
    license_: Union[str, None]
    source_repository_url: Union[str, None]
    vulnerabilities: List[DependencyGraphDiffItemsPropVulnerabilitiesItemsType]
    scope: Literal["unknown", "runtime", "development"]


class DependencyGraphDiffItemsPropVulnerabilitiesItemsType(TypedDict):
    """DependencyGraphDiffItemsPropVulnerabilitiesItems"""

    severity: str
    advisory_ghsa_id: str
    advisory_summary: str
    advisory_url: str


class DependencyGraphSpdxSbomType(TypedDict):
    """Dependency Graph SPDX SBOM

    A schema for the SPDX JSON format returned by the Dependency Graph.
    """

    sbom: DependencyGraphSpdxSbomPropSbomType


class DependencyGraphSpdxSbomPropSbomType(TypedDict):
    """DependencyGraphSpdxSbomPropSbom"""

    spdxid: str
    spdx_version: str
    creation_info: DependencyGraphSpdxSbomPropSbomPropCreationInfoType
    name: str
    data_license: str
    document_describes: List[str]
    document_namespace: str
    packages: List[DependencyGraphSpdxSbomPropSbomPropPackagesItemsType]


class DependencyGraphSpdxSbomPropSbomPropCreationInfoType(TypedDict):
    """DependencyGraphSpdxSbomPropSbomPropCreationInfo"""

    created: str
    creators: List[str]


class DependencyGraphSpdxSbomPropSbomPropPackagesItemsType(TypedDict):
    """DependencyGraphSpdxSbomPropSbomPropPackagesItems"""

    spdxid: NotRequired[str]
    name: NotRequired[str]
    version_info: NotRequired[str]
    download_location: NotRequired[str]
    files_analyzed: NotRequired[bool]
    license_concluded: NotRequired[str]
    license_declared: NotRequired[str]
    supplier: NotRequired[str]
    external_refs: NotRequired[
        List[DependencyGraphSpdxSbomPropSbomPropPackagesItemsPropExternalRefsItemsType]
    ]


class DependencyGraphSpdxSbomPropSbomPropPackagesItemsPropExternalRefsItemsType(
    TypedDict
):
    """DependencyGraphSpdxSbomPropSbomPropPackagesItemsPropExternalRefsItems"""

    reference_category: str
    reference_locator: str
    reference_type: str


class MetadataType(TypedDict):
    """metadata

    User-defined metadata to store domain-specific information limited to 8 keys
    with scalar values.
    """


class DependencyType(TypedDict):
    """Dependency"""

    package_url: NotRequired[str]
    metadata: NotRequired[MetadataType]
    relationship: NotRequired[Literal["direct", "indirect"]]
    scope: NotRequired[Literal["runtime", "development"]]
    dependencies: NotRequired[List[str]]


class ManifestType(TypedDict):
    """Manifest"""

    name: str
    file: NotRequired[ManifestPropFileType]
    metadata: NotRequired[MetadataType]
    resolved: NotRequired[ManifestPropResolvedType]


class ManifestPropFileType(TypedDict):
    """ManifestPropFile"""

    source_location: NotRequired[str]


class ManifestPropResolvedType(TypedDict):
    """ManifestPropResolved

    A collection of resolved package dependencies.
    """


class SnapshotType(TypedDict):
    """snapshot

    Create a new snapshot of a repository's dependencies.
    """

    version: int
    job: SnapshotPropJobType
    sha: str
    ref: str
    detector: SnapshotPropDetectorType
    metadata: NotRequired[MetadataType]
    manifests: NotRequired[SnapshotPropManifestsType]
    scanned: datetime


class SnapshotPropJobType(TypedDict):
    """SnapshotPropJob"""

    id: str
    correlator: str
    html_url: NotRequired[str]


class SnapshotPropDetectorType(TypedDict):
    """SnapshotPropDetector

    A description of the detector used.
    """

    name: str
    version: str
    url: str


class SnapshotPropManifestsType(TypedDict):
    """SnapshotPropManifests

    A collection of package manifests, which are a collection of related
    dependencies declared in a file or representing a logical group of dependencies.
    """


class DeploymentStatusType(TypedDict):
    """Deployment Status

    The status of a deployment.
    """

    url: str
    id: int
    node_id: str
    state: Literal[
        "error", "failure", "inactive", "pending", "success", "queued", "in_progress"
    ]
    creator: Union[None, SimpleUserType]
    description: str
    environment: NotRequired[str]
    target_url: str
    created_at: datetime
    updated_at: datetime
    deployment_url: str
    repository_url: str
    environment_url: NotRequired[str]
    log_url: NotRequired[str]
    performed_via_github_app: NotRequired[Union[None, IntegrationType]]


class DeploymentBranchPolicySettingsType(TypedDict):
    """DeploymentBranchPolicySettings

    The type of deployment branch policy for this environment. To allow all branches
    to deploy, set to `null`.
    """

    protected_branches: bool
    custom_branch_policies: bool


class EnvironmentType(TypedDict):
    """Environment

    Details of a deployment environment
    """

    id: int
    node_id: str
    name: str
    url: str
    html_url: str
    created_at: datetime
    updated_at: datetime
    protection_rules: NotRequired[
        List[
            Union[
                EnvironmentPropProtectionRulesItemsAnyof0Type,
                EnvironmentPropProtectionRulesItemsAnyof1Type,
                EnvironmentPropProtectionRulesItemsAnyof2Type,
            ]
        ]
    ]
    deployment_branch_policy: NotRequired[
        Union[DeploymentBranchPolicySettingsType, None]
    ]


class EnvironmentPropProtectionRulesItemsAnyof0Type(TypedDict):
    """EnvironmentPropProtectionRulesItemsAnyof0"""

    id: int
    node_id: str
    type: str
    wait_timer: NotRequired[int]


class EnvironmentPropProtectionRulesItemsAnyof1Type(TypedDict):
    """EnvironmentPropProtectionRulesItemsAnyof1"""

    id: int
    node_id: str
    type: str
    reviewers: NotRequired[
        List[EnvironmentPropProtectionRulesItemsAnyof1PropReviewersItemsType]
    ]


class EnvironmentPropProtectionRulesItemsAnyof1PropReviewersItemsType(TypedDict):
    """EnvironmentPropProtectionRulesItemsAnyof1PropReviewersItems"""

    type: NotRequired[Literal["User", "Team"]]
    reviewer: NotRequired[Union[SimpleUserType, TeamType]]


class EnvironmentPropProtectionRulesItemsAnyof2Type(TypedDict):
    """EnvironmentPropProtectionRulesItemsAnyof2"""

    id: int
    node_id: str
    type: str


class DeploymentBranchPolicyType(TypedDict):
    """Deployment branch policy

    Details of a deployment branch policy.
    """

    id: NotRequired[int]
    node_id: NotRequired[str]
    name: NotRequired[str]


class DeploymentBranchPolicyNamePatternType(TypedDict):
    """Deployment branch policy name pattern"""

    name: str


class CustomDeploymentRuleAppType(TypedDict):
    """Custom deployment protection rule app

    A GitHub App that is providing a custom deployment protection rule.
    """

    id: int
    slug: str
    integration_url: str
    node_id: str


class DeploymentProtectionRuleType(TypedDict):
    """Deployment protection rule

    Deployment protection rule
    """

    id: int
    node_id: str
    enabled: bool
    app: CustomDeploymentRuleAppType


class ShortBlobType(TypedDict):
    """Short Blob

    Short Blob
    """

    url: str
    sha: str


class BlobType(TypedDict):
    """Blob

    Blob
    """

    content: str
    encoding: str
    url: str
    sha: str
    size: Union[int, None]
    node_id: str
    highlighted_content: NotRequired[str]


class GitCommitType(TypedDict):
    """Git Commit

    Low-level Git commit operations within a repository
    """

    sha: str
    node_id: str
    url: str
    author: GitCommitPropAuthorType
    committer: GitCommitPropCommitterType
    message: str
    tree: GitCommitPropTreeType
    parents: List[GitCommitPropParentsItemsType]
    verification: GitCommitPropVerificationType
    html_url: str


class GitCommitPropAuthorType(TypedDict):
    """GitCommitPropAuthor

    Identifying information for the git-user
    """

    date: datetime
    email: str
    name: str


class GitCommitPropCommitterType(TypedDict):
    """GitCommitPropCommitter

    Identifying information for the git-user
    """

    date: datetime
    email: str
    name: str


class GitCommitPropTreeType(TypedDict):
    """GitCommitPropTree"""

    sha: str
    url: str


class GitCommitPropParentsItemsType(TypedDict):
    """GitCommitPropParentsItems"""

    sha: str
    url: str
    html_url: str


class GitCommitPropVerificationType(TypedDict):
    """GitCommitPropVerification"""

    verified: bool
    reason: str
    signature: Union[str, None]
    payload: Union[str, None]


class GitRefType(TypedDict):
    """Git Reference

    Git references within a repository
    """

    ref: str
    node_id: str
    url: str
    object_: GitRefPropObjectType


class GitRefPropObjectType(TypedDict):
    """GitRefPropObject"""

    type: str
    sha: str
    url: str


class GitTagType(TypedDict):
    """Git Tag

    Metadata for a Git tag
    """

    node_id: str
    tag: str
    sha: str
    url: str
    message: str
    tagger: GitTagPropTaggerType
    object_: GitTagPropObjectType
    verification: NotRequired[VerificationType]


class GitTagPropTaggerType(TypedDict):
    """GitTagPropTagger"""

    date: str
    email: str
    name: str


class GitTagPropObjectType(TypedDict):
    """GitTagPropObject"""

    sha: str
    type: str
    url: str


class GitTreeType(TypedDict):
    """Git Tree

    The hierarchy between files in a Git repository.
    """

    sha: str
    url: str
    truncated: bool
    tree: List[GitTreePropTreeItemsType]


class GitTreePropTreeItemsType(TypedDict):
    """GitTreePropTreeItems"""

    path: NotRequired[str]
    mode: NotRequired[str]
    type: NotRequired[str]
    sha: NotRequired[str]
    size: NotRequired[int]
    url: NotRequired[str]


class HookResponseType(TypedDict):
    """Hook Response"""

    code: Union[int, None]
    status: Union[str, None]
    message: Union[str, None]


class HookType(TypedDict):
    """Webhook

    Webhooks for repositories.
    """

    type: str
    id: int
    name: str
    active: bool
    events: List[str]
    config: HookPropConfigType
    updated_at: datetime
    created_at: datetime
    url: str
    test_url: str
    ping_url: str
    deliveries_url: NotRequired[str]
    last_response: HookResponseType


class HookPropConfigType(TypedDict):
    """HookPropConfig"""

    email: NotRequired[str]
    password: NotRequired[str]
    room: NotRequired[str]
    subdomain: NotRequired[str]
    url: NotRequired[str]
    insecure_ssl: NotRequired[Union[str, float]]
    content_type: NotRequired[str]
    digest: NotRequired[str]
    secret: NotRequired[str]
    token: NotRequired[str]


class ImportType(TypedDict):
    """Import

    A repository import from an external source.
    """

    vcs: Union[str, None]
    use_lfs: NotRequired[bool]
    vcs_url: str
    svc_root: NotRequired[str]
    tfvc_project: NotRequired[str]
    status: Literal[
        "auth",
        "error",
        "none",
        "detecting",
        "choose",
        "auth_failed",
        "importing",
        "mapping",
        "waiting_to_push",
        "pushing",
        "complete",
        "setup",
        "unknown",
        "detection_found_multiple",
        "detection_found_nothing",
        "detection_needs_auth",
    ]
    status_text: NotRequired[Union[str, None]]
    failed_step: NotRequired[Union[str, None]]
    error_message: NotRequired[Union[str, None]]
    import_percent: NotRequired[Union[int, None]]
    commit_count: NotRequired[Union[int, None]]
    push_percent: NotRequired[Union[int, None]]
    has_large_files: NotRequired[bool]
    large_files_size: NotRequired[int]
    large_files_count: NotRequired[int]
    project_choices: NotRequired[List[ImportPropProjectChoicesItemsType]]
    message: NotRequired[str]
    authors_count: NotRequired[Union[int, None]]
    url: str
    html_url: str
    authors_url: str
    repository_url: str
    svn_root: NotRequired[str]


class ImportPropProjectChoicesItemsType(TypedDict):
    """ImportPropProjectChoicesItems"""

    vcs: NotRequired[str]
    tfvc_project: NotRequired[str]
    human_name: NotRequired[str]


class PorterAuthorType(TypedDict):
    """Porter Author

    Porter Author
    """

    id: int
    remote_id: str
    remote_name: str
    email: str
    name: str
    url: str
    import_url: str


class PorterLargeFileType(TypedDict):
    """Porter Large File

    Porter Large File
    """

    ref_name: str
    path: str
    oid: str
    size: int


class IssueEventLabelType(TypedDict):
    """Issue Event Label

    Issue Event Label
    """

    name: Union[str, None]
    color: Union[str, None]


class IssueEventDismissedReviewType(TypedDict):
    """Issue Event Dismissed Review"""

    state: str
    review_id: int
    dismissal_message: Union[str, None]
    dismissal_commit_id: NotRequired[Union[str, None]]


class IssueEventMilestoneType(TypedDict):
    """Issue Event Milestone

    Issue Event Milestone
    """

    title: str


class IssueEventProjectCardType(TypedDict):
    """Issue Event Project Card

    Issue Event Project Card
    """

    url: str
    id: int
    project_url: str
    project_id: int
    column_name: str
    previous_column_name: NotRequired[str]


class IssueEventRenameType(TypedDict):
    """Issue Event Rename

    Issue Event Rename
    """

    from_: str
    to: str


class IssueEventType(TypedDict):
    """Issue Event

    Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: Union[None, SimpleUserType]
    event: str
    commit_id: Union[str, None]
    commit_url: Union[str, None]
    created_at: datetime
    issue: NotRequired[Union[None, IssueType]]
    label: NotRequired[IssueEventLabelType]
    assignee: NotRequired[Union[None, SimpleUserType]]
    assigner: NotRequired[Union[None, SimpleUserType]]
    review_requester: NotRequired[Union[None, SimpleUserType]]
    requested_reviewer: NotRequired[Union[None, SimpleUserType]]
    requested_team: NotRequired[TeamType]
    dismissed_review: NotRequired[IssueEventDismissedReviewType]
    milestone: NotRequired[IssueEventMilestoneType]
    project_card: NotRequired[IssueEventProjectCardType]
    rename: NotRequired[IssueEventRenameType]
    author_association: NotRequired[
        Literal[
            "COLLABORATOR",
            "CONTRIBUTOR",
            "FIRST_TIMER",
            "FIRST_TIME_CONTRIBUTOR",
            "MANNEQUIN",
            "MEMBER",
            "NONE",
            "OWNER",
        ]
    ]
    lock_reason: NotRequired[Union[str, None]]
    performed_via_github_app: NotRequired[Union[None, IntegrationType]]


class LabeledIssueEventType(TypedDict):
    """Labeled Issue Event

    Labeled Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUserType
    event: Literal["labeled"]
    commit_id: Union[str, None]
    commit_url: Union[str, None]
    created_at: str
    performed_via_github_app: Union[None, IntegrationType]
    label: LabeledIssueEventPropLabelType


class LabeledIssueEventPropLabelType(TypedDict):
    """LabeledIssueEventPropLabel"""

    name: str
    color: str


class UnlabeledIssueEventType(TypedDict):
    """Unlabeled Issue Event

    Unlabeled Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUserType
    event: Literal["unlabeled"]
    commit_id: Union[str, None]
    commit_url: Union[str, None]
    created_at: str
    performed_via_github_app: Union[None, IntegrationType]
    label: UnlabeledIssueEventPropLabelType


class UnlabeledIssueEventPropLabelType(TypedDict):
    """UnlabeledIssueEventPropLabel"""

    name: str
    color: str


class AssignedIssueEventType(TypedDict):
    """Assigned Issue Event

    Assigned Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUserType
    event: str
    commit_id: Union[str, None]
    commit_url: Union[str, None]
    created_at: str
    performed_via_github_app: IntegrationType
    assignee: SimpleUserType
    assigner: SimpleUserType


class UnassignedIssueEventType(TypedDict):
    """Unassigned Issue Event

    Unassigned Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUserType
    event: str
    commit_id: Union[str, None]
    commit_url: Union[str, None]
    created_at: str
    performed_via_github_app: Union[None, IntegrationType]
    assignee: SimpleUserType
    assigner: SimpleUserType


class MilestonedIssueEventType(TypedDict):
    """Milestoned Issue Event

    Milestoned Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUserType
    event: Literal["milestoned"]
    commit_id: Union[str, None]
    commit_url: Union[str, None]
    created_at: str
    performed_via_github_app: Union[None, IntegrationType]
    milestone: MilestonedIssueEventPropMilestoneType


class MilestonedIssueEventPropMilestoneType(TypedDict):
    """MilestonedIssueEventPropMilestone"""

    title: str


class DemilestonedIssueEventType(TypedDict):
    """Demilestoned Issue Event

    Demilestoned Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUserType
    event: Literal["demilestoned"]
    commit_id: Union[str, None]
    commit_url: Union[str, None]
    created_at: str
    performed_via_github_app: Union[None, IntegrationType]
    milestone: DemilestonedIssueEventPropMilestoneType


class DemilestonedIssueEventPropMilestoneType(TypedDict):
    """DemilestonedIssueEventPropMilestone"""

    title: str


class RenamedIssueEventType(TypedDict):
    """Renamed Issue Event

    Renamed Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUserType
    event: Literal["renamed"]
    commit_id: Union[str, None]
    commit_url: Union[str, None]
    created_at: str
    performed_via_github_app: Union[None, IntegrationType]
    rename: RenamedIssueEventPropRenameType


class RenamedIssueEventPropRenameType(TypedDict):
    """RenamedIssueEventPropRename"""

    from_: str
    to: str


class ReviewRequestedIssueEventType(TypedDict):
    """Review Requested Issue Event

    Review Requested Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUserType
    event: Literal["review_requested"]
    commit_id: Union[str, None]
    commit_url: Union[str, None]
    created_at: str
    performed_via_github_app: Union[None, IntegrationType]
    review_requester: SimpleUserType
    requested_team: NotRequired[TeamType]
    requested_reviewer: NotRequired[SimpleUserType]


class ReviewRequestRemovedIssueEventType(TypedDict):
    """Review Request Removed Issue Event

    Review Request Removed Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUserType
    event: Literal["review_request_removed"]
    commit_id: Union[str, None]
    commit_url: Union[str, None]
    created_at: str
    performed_via_github_app: Union[None, IntegrationType]
    review_requester: SimpleUserType
    requested_team: NotRequired[TeamType]
    requested_reviewer: NotRequired[SimpleUserType]


class ReviewDismissedIssueEventType(TypedDict):
    """Review Dismissed Issue Event

    Review Dismissed Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUserType
    event: Literal["review_dismissed"]
    commit_id: Union[str, None]
    commit_url: Union[str, None]
    created_at: str
    performed_via_github_app: Union[None, IntegrationType]
    dismissed_review: ReviewDismissedIssueEventPropDismissedReviewType


class ReviewDismissedIssueEventPropDismissedReviewType(TypedDict):
    """ReviewDismissedIssueEventPropDismissedReview"""

    state: str
    review_id: int
    dismissal_message: Union[str, None]
    dismissal_commit_id: NotRequired[str]


class LockedIssueEventType(TypedDict):
    """Locked Issue Event

    Locked Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUserType
    event: Literal["locked"]
    commit_id: Union[str, None]
    commit_url: Union[str, None]
    created_at: str
    performed_via_github_app: Union[None, IntegrationType]
    lock_reason: Union[str, None]


class AddedToProjectIssueEventType(TypedDict):
    """Added to Project Issue Event

    Added to Project Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUserType
    event: Literal["added_to_project"]
    commit_id: Union[str, None]
    commit_url: Union[str, None]
    created_at: str
    performed_via_github_app: Union[None, IntegrationType]
    project_card: NotRequired[AddedToProjectIssueEventPropProjectCardType]


class AddedToProjectIssueEventPropProjectCardType(TypedDict):
    """AddedToProjectIssueEventPropProjectCard"""

    id: int
    url: str
    project_id: int
    project_url: str
    column_name: str
    previous_column_name: NotRequired[str]


class MovedColumnInProjectIssueEventType(TypedDict):
    """Moved Column in Project Issue Event

    Moved Column in Project Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUserType
    event: Literal["moved_columns_in_project"]
    commit_id: Union[str, None]
    commit_url: Union[str, None]
    created_at: str
    performed_via_github_app: Union[None, IntegrationType]
    project_card: NotRequired[MovedColumnInProjectIssueEventPropProjectCardType]


class MovedColumnInProjectIssueEventPropProjectCardType(TypedDict):
    """MovedColumnInProjectIssueEventPropProjectCard"""

    id: int
    url: str
    project_id: int
    project_url: str
    column_name: str
    previous_column_name: NotRequired[str]


class RemovedFromProjectIssueEventType(TypedDict):
    """Removed from Project Issue Event

    Removed from Project Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUserType
    event: Literal["removed_from_project"]
    commit_id: Union[str, None]
    commit_url: Union[str, None]
    created_at: str
    performed_via_github_app: Union[None, IntegrationType]
    project_card: NotRequired[RemovedFromProjectIssueEventPropProjectCardType]


class RemovedFromProjectIssueEventPropProjectCardType(TypedDict):
    """RemovedFromProjectIssueEventPropProjectCard"""

    id: int
    url: str
    project_id: int
    project_url: str
    column_name: str
    previous_column_name: NotRequired[str]


class ConvertedNoteToIssueIssueEventType(TypedDict):
    """Converted Note to Issue Issue Event

    Converted Note to Issue Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUserType
    event: Literal["converted_note_to_issue"]
    commit_id: Union[str, None]
    commit_url: Union[str, None]
    created_at: str
    performed_via_github_app: IntegrationType
    project_card: NotRequired[ConvertedNoteToIssueIssueEventPropProjectCardType]


class ConvertedNoteToIssueIssueEventPropProjectCardType(TypedDict):
    """ConvertedNoteToIssueIssueEventPropProjectCard"""

    id: int
    url: str
    project_id: int
    project_url: str
    column_name: str
    previous_column_name: NotRequired[str]


class LabelType(TypedDict):
    """Label

    Color-coded labels help you categorize and filter your issues (just like labels
    in Gmail).
    """

    id: int
    node_id: str
    url: str
    name: str
    description: Union[str, None]
    color: str
    default: bool


class TimelineCommentEventType(TypedDict):
    """Timeline Comment Event

    Timeline Comment Event
    """

    event: Literal["commented"]
    actor: SimpleUserType
    id: int
    node_id: str
    url: str
    body: NotRequired[str]
    body_text: NotRequired[str]
    body_html: NotRequired[str]
    html_url: str
    user: SimpleUserType
    created_at: datetime
    updated_at: datetime
    issue_url: str
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    performed_via_github_app: NotRequired[Union[None, IntegrationType]]
    reactions: NotRequired[ReactionRollupType]


class TimelineCrossReferencedEventType(TypedDict):
    """Timeline Cross Referenced Event

    Timeline Cross Referenced Event
    """

    event: Literal["cross-referenced"]
    actor: NotRequired[SimpleUserType]
    created_at: datetime
    updated_at: datetime
    source: TimelineCrossReferencedEventPropSourceType


class TimelineCrossReferencedEventPropSourceType(TypedDict):
    """TimelineCrossReferencedEventPropSource"""

    type: NotRequired[str]
    issue: NotRequired[IssueType]


class TimelineCommittedEventType(TypedDict):
    """Timeline Committed Event

    Timeline Committed Event
    """

    event: NotRequired[Literal["committed"]]
    sha: str
    node_id: str
    url: str
    author: TimelineCommittedEventPropAuthorType
    committer: TimelineCommittedEventPropCommitterType
    message: str
    tree: TimelineCommittedEventPropTreeType
    parents: List[TimelineCommittedEventPropParentsItemsType]
    verification: TimelineCommittedEventPropVerificationType
    html_url: str


class TimelineCommittedEventPropAuthorType(TypedDict):
    """TimelineCommittedEventPropAuthor

    Identifying information for the git-user
    """

    date: datetime
    email: str
    name: str


class TimelineCommittedEventPropCommitterType(TypedDict):
    """TimelineCommittedEventPropCommitter

    Identifying information for the git-user
    """

    date: datetime
    email: str
    name: str


class TimelineCommittedEventPropTreeType(TypedDict):
    """TimelineCommittedEventPropTree"""

    sha: str
    url: str


class TimelineCommittedEventPropParentsItemsType(TypedDict):
    """TimelineCommittedEventPropParentsItems"""

    sha: str
    url: str
    html_url: str


class TimelineCommittedEventPropVerificationType(TypedDict):
    """TimelineCommittedEventPropVerification"""

    verified: bool
    reason: str
    signature: Union[str, None]
    payload: Union[str, None]


class TimelineReviewedEventType(TypedDict):
    """Timeline Reviewed Event

    Timeline Reviewed Event
    """

    event: Literal["reviewed"]
    id: int
    node_id: str
    user: SimpleUserType
    body: Union[str, None]
    state: str
    html_url: str
    pull_request_url: str
    links: TimelineReviewedEventPropLinksType
    submitted_at: NotRequired[datetime]
    commit_id: str
    body_html: NotRequired[Union[str, None]]
    body_text: NotRequired[Union[str, None]]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]


class TimelineReviewedEventPropLinksType(TypedDict):
    """TimelineReviewedEventPropLinks"""

    html: TimelineReviewedEventPropLinksPropHtmlType
    pull_request: TimelineReviewedEventPropLinksPropPullRequestType


class TimelineReviewedEventPropLinksPropHtmlType(TypedDict):
    """TimelineReviewedEventPropLinksPropHtml"""

    href: str


class TimelineReviewedEventPropLinksPropPullRequestType(TypedDict):
    """TimelineReviewedEventPropLinksPropPullRequest"""

    href: str


class PullRequestReviewCommentType(TypedDict):
    """Pull Request Review Comment

    Pull Request Review Comments are comments on a portion of the Pull Request's
    diff.
    """

    url: str
    pull_request_review_id: Union[int, None]
    id: int
    node_id: str
    diff_hunk: str
    path: str
    position: NotRequired[int]
    original_position: NotRequired[int]
    commit_id: str
    original_commit_id: str
    in_reply_to_id: NotRequired[int]
    user: SimpleUserType
    body: str
    created_at: datetime
    updated_at: datetime
    html_url: str
    pull_request_url: str
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    links: PullRequestReviewCommentPropLinksType
    start_line: NotRequired[Union[int, None]]
    original_start_line: NotRequired[Union[int, None]]
    start_side: NotRequired[Union[None, Literal["LEFT", "RIGHT"]]]
    line: NotRequired[int]
    original_line: NotRequired[int]
    side: NotRequired[Literal["LEFT", "RIGHT"]]
    subject_type: NotRequired[Literal["line", "file"]]
    reactions: NotRequired[ReactionRollupType]
    body_html: NotRequired[str]
    body_text: NotRequired[str]


class PullRequestReviewCommentPropLinksType(TypedDict):
    """PullRequestReviewCommentPropLinks"""

    self_: PullRequestReviewCommentPropLinksPropSelfType
    html: PullRequestReviewCommentPropLinksPropHtmlType
    pull_request: PullRequestReviewCommentPropLinksPropPullRequestType


class PullRequestReviewCommentPropLinksPropSelfType(TypedDict):
    """PullRequestReviewCommentPropLinksPropSelf"""

    href: str


class PullRequestReviewCommentPropLinksPropHtmlType(TypedDict):
    """PullRequestReviewCommentPropLinksPropHtml"""

    href: str


class PullRequestReviewCommentPropLinksPropPullRequestType(TypedDict):
    """PullRequestReviewCommentPropLinksPropPullRequest"""

    href: str


class TimelineLineCommentedEventType(TypedDict):
    """Timeline Line Commented Event

    Timeline Line Commented Event
    """

    event: NotRequired[Literal["line_commented"]]
    node_id: NotRequired[str]
    comments: NotRequired[List[PullRequestReviewCommentType]]


class TimelineCommitCommentedEventType(TypedDict):
    """Timeline Commit Commented Event

    Timeline Commit Commented Event
    """

    event: NotRequired[Literal["commit_commented"]]
    node_id: NotRequired[str]
    commit_id: NotRequired[str]
    comments: NotRequired[List[CommitCommentType]]


class TimelineAssignedIssueEventType(TypedDict):
    """Timeline Assigned Issue Event

    Timeline Assigned Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUserType
    event: Literal["assigned"]
    commit_id: Union[str, None]
    commit_url: Union[str, None]
    created_at: str
    performed_via_github_app: Union[None, IntegrationType]
    assignee: SimpleUserType


class TimelineUnassignedIssueEventType(TypedDict):
    """Timeline Unassigned Issue Event

    Timeline Unassigned Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUserType
    event: Literal["unassigned"]
    commit_id: Union[str, None]
    commit_url: Union[str, None]
    created_at: str
    performed_via_github_app: Union[None, IntegrationType]
    assignee: SimpleUserType


class StateChangeIssueEventType(TypedDict):
    """State Change Issue Event

    State Change Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUserType
    event: str
    commit_id: Union[str, None]
    commit_url: Union[str, None]
    created_at: str
    performed_via_github_app: Union[None, IntegrationType]
    state_reason: NotRequired[Union[str, None]]


class DeployKeyType(TypedDict):
    """Deploy Key

    An SSH key granting access to a single repository.
    """

    id: int
    key: str
    url: str
    title: str
    verified: bool
    created_at: str
    read_only: bool
    added_by: NotRequired[Union[str, None]]
    last_used: NotRequired[Union[str, None]]


class LanguageType(TypedDict):
    """Language

    Language
    """


class LicenseContentType(TypedDict):
    """License Content

    License Content
    """

    name: str
    path: str
    sha: str
    size: int
    url: str
    html_url: Union[str, None]
    git_url: Union[str, None]
    download_url: Union[str, None]
    type: str
    content: str
    encoding: str
    links: LicenseContentPropLinksType
    license_: Union[None, LicenseSimpleType]


class LicenseContentPropLinksType(TypedDict):
    """LicenseContentPropLinks"""

    git: Union[str, None]
    html: Union[str, None]
    self_: str


class MergedUpstreamType(TypedDict):
    """Merged upstream

    Results of a successful merge upstream request
    """

    message: NotRequired[str]
    merge_type: NotRequired[Literal["merge", "fast-forward", "none"]]
    base_branch: NotRequired[str]


class PagesSourceHashType(TypedDict):
    """Pages Source Hash"""

    branch: str
    path: str


class PagesHttpsCertificateType(TypedDict):
    """Pages Https Certificate"""

    state: Literal[
        "new",
        "authorization_created",
        "authorization_pending",
        "authorized",
        "authorization_revoked",
        "issued",
        "uploaded",
        "approved",
        "errored",
        "bad_authz",
        "destroy_pending",
        "dns_changed",
    ]
    description: str
    domains: List[str]
    expires_at: NotRequired[date]


class PageType(TypedDict):
    """GitHub Pages

    The configuration for GitHub Pages for a repository.
    """

    url: str
    status: Union[None, Literal["built", "building", "errored"]]
    cname: Union[str, None]
    protected_domain_state: NotRequired[
        Union[None, Literal["pending", "verified", "unverified"]]
    ]
    pending_domain_unverified_at: NotRequired[Union[datetime, None]]
    custom_404: bool
    html_url: NotRequired[str]
    build_type: NotRequired[Union[None, Literal["legacy", "workflow"]]]
    source: NotRequired[PagesSourceHashType]
    public: bool
    https_certificate: NotRequired[PagesHttpsCertificateType]
    https_enforced: NotRequired[bool]


class PageBuildType(TypedDict):
    """Page Build

    Page Build
    """

    url: str
    status: str
    error: PageBuildPropErrorType
    pusher: Union[None, SimpleUserType]
    commit: str
    duration: int
    created_at: datetime
    updated_at: datetime


class PageBuildPropErrorType(TypedDict):
    """PageBuildPropError"""

    message: Union[str, None]


class PageBuildStatusType(TypedDict):
    """Page Build Status

    Page Build Status
    """

    url: str
    status: str


class PageDeploymentType(TypedDict):
    """GitHub Pages

    The GitHub Pages deployment status.
    """

    status_url: str
    page_url: str
    preview_url: NotRequired[str]


class PagesHealthCheckType(TypedDict):
    """Pages Health Check Status

    Pages Health Check Status
    """

    domain: NotRequired[PagesHealthCheckPropDomainType]
    alt_domain: NotRequired[Union[PagesHealthCheckPropAltDomainType, None]]


class PagesHealthCheckPropDomainType(TypedDict):
    """PagesHealthCheckPropDomain"""

    host: NotRequired[str]
    uri: NotRequired[str]
    nameservers: NotRequired[str]
    dns_resolves: NotRequired[bool]
    is_proxied: NotRequired[Union[bool, None]]
    is_cloudflare_ip: NotRequired[Union[bool, None]]
    is_fastly_ip: NotRequired[Union[bool, None]]
    is_old_ip_address: NotRequired[Union[bool, None]]
    is_a_record: NotRequired[Union[bool, None]]
    has_cname_record: NotRequired[Union[bool, None]]
    has_mx_records_present: NotRequired[Union[bool, None]]
    is_valid_domain: NotRequired[bool]
    is_apex_domain: NotRequired[bool]
    should_be_a_record: NotRequired[Union[bool, None]]
    is_cname_to_github_user_domain: NotRequired[Union[bool, None]]
    is_cname_to_pages_dot_github_dot_com: NotRequired[Union[bool, None]]
    is_cname_to_fastly: NotRequired[Union[bool, None]]
    is_pointed_to_github_pages_ip: NotRequired[Union[bool, None]]
    is_non_github_pages_ip_present: NotRequired[Union[bool, None]]
    is_pages_domain: NotRequired[bool]
    is_served_by_pages: NotRequired[Union[bool, None]]
    is_valid: NotRequired[bool]
    reason: NotRequired[Union[str, None]]
    responds_to_https: NotRequired[bool]
    enforces_https: NotRequired[bool]
    https_error: NotRequired[Union[str, None]]
    is_https_eligible: NotRequired[Union[bool, None]]
    caa_error: NotRequired[Union[str, None]]


class PagesHealthCheckPropAltDomainType(TypedDict):
    """PagesHealthCheckPropAltDomain"""

    host: NotRequired[str]
    uri: NotRequired[str]
    nameservers: NotRequired[str]
    dns_resolves: NotRequired[bool]
    is_proxied: NotRequired[Union[bool, None]]
    is_cloudflare_ip: NotRequired[Union[bool, None]]
    is_fastly_ip: NotRequired[Union[bool, None]]
    is_old_ip_address: NotRequired[Union[bool, None]]
    is_a_record: NotRequired[Union[bool, None]]
    has_cname_record: NotRequired[Union[bool, None]]
    has_mx_records_present: NotRequired[Union[bool, None]]
    is_valid_domain: NotRequired[bool]
    is_apex_domain: NotRequired[bool]
    should_be_a_record: NotRequired[Union[bool, None]]
    is_cname_to_github_user_domain: NotRequired[Union[bool, None]]
    is_cname_to_pages_dot_github_dot_com: NotRequired[Union[bool, None]]
    is_cname_to_fastly: NotRequired[Union[bool, None]]
    is_pointed_to_github_pages_ip: NotRequired[Union[bool, None]]
    is_non_github_pages_ip_present: NotRequired[Union[bool, None]]
    is_pages_domain: NotRequired[bool]
    is_served_by_pages: NotRequired[Union[bool, None]]
    is_valid: NotRequired[bool]
    reason: NotRequired[Union[str, None]]
    responds_to_https: NotRequired[bool]
    enforces_https: NotRequired[bool]
    https_error: NotRequired[Union[str, None]]
    is_https_eligible: NotRequired[Union[bool, None]]
    caa_error: NotRequired[Union[str, None]]


class PullRequestType(TypedDict):
    """Pull Request

    Pull requests let you tell others about changes you've pushed to a repository on
    GitHub. Once a pull request is sent, interested parties can review the set of
    changes, discuss potential modifications, and even push follow-up commits if
    necessary.
    """

    url: str
    id: int
    node_id: str
    html_url: str
    diff_url: str
    patch_url: str
    issue_url: str
    commits_url: str
    review_comments_url: str
    review_comment_url: str
    comments_url: str
    statuses_url: str
    number: int
    state: Literal["open", "closed"]
    locked: bool
    title: str
    user: SimpleUserType
    body: Union[str, None]
    labels: List[PullRequestPropLabelsItemsType]
    milestone: Union[None, MilestoneType]
    active_lock_reason: NotRequired[Union[str, None]]
    created_at: datetime
    updated_at: datetime
    closed_at: Union[datetime, None]
    merged_at: Union[datetime, None]
    merge_commit_sha: Union[str, None]
    assignee: Union[None, SimpleUserType]
    assignees: NotRequired[Union[List[SimpleUserType], None]]
    requested_reviewers: NotRequired[Union[List[SimpleUserType], None]]
    requested_teams: NotRequired[Union[List[TeamSimpleType], None]]
    head: PullRequestPropHeadType
    base: PullRequestPropBaseType
    links: PullRequestPropLinksType
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    auto_merge: Union[AutoMergeType, None]
    draft: NotRequired[bool]
    merged: bool
    mergeable: Union[bool, None]
    rebaseable: NotRequired[Union[bool, None]]
    mergeable_state: str
    merged_by: Union[None, SimpleUserType]
    comments: int
    review_comments: int
    maintainer_can_modify: bool
    commits: int
    additions: int
    deletions: int
    changed_files: int


class PullRequestPropLabelsItemsType(TypedDict):
    """PullRequestPropLabelsItems"""

    id: int
    node_id: str
    url: str
    name: str
    description: Union[str, None]
    color: str
    default: bool


class PullRequestPropHeadType(TypedDict):
    """PullRequestPropHead"""

    label: str
    ref: str
    repo: Union[PullRequestPropHeadPropRepoType, None]
    sha: str
    user: PullRequestPropHeadPropUserType


class PullRequestPropHeadPropRepoPropOwnerType(TypedDict):
    """PullRequestPropHeadPropRepoPropOwner"""

    avatar_url: str
    events_url: str
    followers_url: str
    following_url: str
    gists_url: str
    gravatar_id: Union[str, None]
    html_url: str
    id: int
    node_id: str
    login: str
    organizations_url: str
    received_events_url: str
    repos_url: str
    site_admin: bool
    starred_url: str
    subscriptions_url: str
    type: str
    url: str


class PullRequestPropHeadPropRepoPropPermissionsType(TypedDict):
    """PullRequestPropHeadPropRepoPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    push: bool
    triage: NotRequired[bool]
    pull: bool


class PullRequestPropHeadPropRepoPropLicenseType(TypedDict):
    """PullRequestPropHeadPropRepoPropLicense"""

    key: str
    name: str
    url: Union[str, None]
    spdx_id: Union[str, None]
    node_id: str


class PullRequestPropHeadPropRepoType(TypedDict):
    """PullRequestPropHeadPropRepo"""

    archive_url: str
    assignees_url: str
    blobs_url: str
    branches_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    deployments_url: str
    description: Union[str, None]
    downloads_url: str
    events_url: str
    fork: bool
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    hooks_url: str
    html_url: str
    id: int
    node_id: str
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    languages_url: str
    merges_url: str
    milestones_url: str
    name: str
    notifications_url: str
    owner: PullRequestPropHeadPropRepoPropOwnerType
    private: bool
    pulls_url: str
    releases_url: str
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    tags_url: str
    teams_url: str
    trees_url: str
    url: str
    clone_url: str
    default_branch: str
    forks: int
    forks_count: int
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_projects: bool
    has_wiki: bool
    has_pages: bool
    has_discussions: bool
    homepage: Union[str, None]
    language: Union[str, None]
    master_branch: NotRequired[str]
    archived: bool
    disabled: bool
    visibility: NotRequired[str]
    mirror_url: Union[str, None]
    open_issues: int
    open_issues_count: int
    permissions: NotRequired[PullRequestPropHeadPropRepoPropPermissionsType]
    temp_clone_token: NotRequired[Union[str, None]]
    allow_merge_commit: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    license_: Union[PullRequestPropHeadPropRepoPropLicenseType, None]
    pushed_at: datetime
    size: int
    ssh_url: str
    stargazers_count: int
    svn_url: str
    topics: NotRequired[List[str]]
    watchers: int
    watchers_count: int
    created_at: datetime
    updated_at: datetime
    allow_forking: NotRequired[bool]
    is_template: NotRequired[bool]
    web_commit_signoff_required: NotRequired[bool]


class PullRequestPropHeadPropUserType(TypedDict):
    """PullRequestPropHeadPropUser"""

    avatar_url: str
    events_url: str
    followers_url: str
    following_url: str
    gists_url: str
    gravatar_id: Union[str, None]
    html_url: str
    id: int
    node_id: str
    login: str
    organizations_url: str
    received_events_url: str
    repos_url: str
    site_admin: bool
    starred_url: str
    subscriptions_url: str
    type: str
    url: str


class PullRequestPropBaseType(TypedDict):
    """PullRequestPropBase"""

    label: str
    ref: str
    repo: PullRequestPropBasePropRepoType
    sha: str
    user: PullRequestPropBasePropUserType


class PullRequestPropBasePropRepoType(TypedDict):
    """PullRequestPropBasePropRepo"""

    archive_url: str
    assignees_url: str
    blobs_url: str
    branches_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    deployments_url: str
    description: Union[str, None]
    downloads_url: str
    events_url: str
    fork: bool
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    node_id: str
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    languages_url: str
    merges_url: str
    milestones_url: str
    name: str
    notifications_url: str
    owner: PullRequestPropBasePropRepoPropOwnerType
    private: bool
    pulls_url: str
    releases_url: str
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    tags_url: str
    teams_url: str
    trees_url: str
    url: str
    clone_url: str
    default_branch: str
    forks: int
    forks_count: int
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_projects: bool
    has_wiki: bool
    has_pages: bool
    has_discussions: bool
    homepage: Union[str, None]
    language: Union[str, None]
    master_branch: NotRequired[str]
    archived: bool
    disabled: bool
    visibility: NotRequired[str]
    mirror_url: Union[str, None]
    open_issues: int
    open_issues_count: int
    permissions: NotRequired[PullRequestPropBasePropRepoPropPermissionsType]
    temp_clone_token: NotRequired[Union[str, None]]
    allow_merge_commit: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    license_: Union[None, LicenseSimpleType]
    pushed_at: datetime
    size: int
    ssh_url: str
    stargazers_count: int
    svn_url: str
    topics: NotRequired[List[str]]
    watchers: int
    watchers_count: int
    created_at: datetime
    updated_at: datetime
    allow_forking: NotRequired[bool]
    web_commit_signoff_required: NotRequired[bool]


class PullRequestPropBasePropRepoPropOwnerType(TypedDict):
    """PullRequestPropBasePropRepoPropOwner"""

    avatar_url: str
    events_url: str
    followers_url: str
    following_url: str
    gists_url: str
    gravatar_id: Union[str, None]
    html_url: str
    id: int
    node_id: str
    login: str
    organizations_url: str
    received_events_url: str
    repos_url: str
    site_admin: bool
    starred_url: str
    subscriptions_url: str
    type: str
    url: str


class PullRequestPropBasePropRepoPropPermissionsType(TypedDict):
    """PullRequestPropBasePropRepoPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    push: bool
    triage: NotRequired[bool]
    pull: bool


class PullRequestPropBasePropUserType(TypedDict):
    """PullRequestPropBasePropUser"""

    avatar_url: str
    events_url: str
    followers_url: str
    following_url: str
    gists_url: str
    gravatar_id: Union[str, None]
    html_url: str
    id: int
    node_id: str
    login: str
    organizations_url: str
    received_events_url: str
    repos_url: str
    site_admin: bool
    starred_url: str
    subscriptions_url: str
    type: str
    url: str


class PullRequestPropLinksType(TypedDict):
    """PullRequestPropLinks"""

    comments: LinkType
    commits: LinkType
    statuses: LinkType
    html: LinkType
    issue: LinkType
    review_comments: LinkType
    review_comment: LinkType
    self_: LinkType


class PullRequestMergeResultType(TypedDict):
    """Pull Request Merge Result

    Pull Request Merge Result
    """

    sha: str
    merged: bool
    message: str


class PullRequestReviewRequestType(TypedDict):
    """Pull Request Review Request

    Pull Request Review Request
    """

    users: List[SimpleUserType]
    teams: List[TeamType]


class PullRequestReviewType(TypedDict):
    """Pull Request Review

    Pull Request Reviews are reviews on pull requests.
    """

    id: int
    node_id: str
    user: Union[None, SimpleUserType]
    body: str
    state: str
    html_url: str
    pull_request_url: str
    links: PullRequestReviewPropLinksType
    submitted_at: NotRequired[datetime]
    commit_id: Union[str, None]
    body_html: NotRequired[str]
    body_text: NotRequired[str]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]


class PullRequestReviewPropLinksType(TypedDict):
    """PullRequestReviewPropLinks"""

    html: PullRequestReviewPropLinksPropHtmlType
    pull_request: PullRequestReviewPropLinksPropPullRequestType


class PullRequestReviewPropLinksPropHtmlType(TypedDict):
    """PullRequestReviewPropLinksPropHtml"""

    href: str


class PullRequestReviewPropLinksPropPullRequestType(TypedDict):
    """PullRequestReviewPropLinksPropPullRequest"""

    href: str


class ReviewCommentType(TypedDict):
    """Legacy Review Comment

    Legacy Review Comment
    """

    url: str
    pull_request_review_id: Union[int, None]
    id: int
    node_id: str
    diff_hunk: str
    path: str
    position: Union[int, None]
    original_position: int
    commit_id: str
    original_commit_id: str
    in_reply_to_id: NotRequired[int]
    user: Union[None, SimpleUserType]
    body: str
    created_at: datetime
    updated_at: datetime
    html_url: str
    pull_request_url: str
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    links: ReviewCommentPropLinksType
    body_text: NotRequired[str]
    body_html: NotRequired[str]
    reactions: NotRequired[ReactionRollupType]
    side: NotRequired[Literal["LEFT", "RIGHT"]]
    start_side: NotRequired[Union[None, Literal["LEFT", "RIGHT"]]]
    line: NotRequired[int]
    original_line: NotRequired[int]
    start_line: NotRequired[Union[int, None]]
    original_start_line: NotRequired[Union[int, None]]


class ReviewCommentPropLinksType(TypedDict):
    """ReviewCommentPropLinks"""

    self_: LinkType
    html: LinkType
    pull_request: LinkType


class ReleaseAssetType(TypedDict):
    """Release Asset

    Data related to a release.
    """

    url: str
    browser_download_url: str
    id: int
    node_id: str
    name: str
    label: Union[str, None]
    state: Literal["uploaded", "open"]
    content_type: str
    size: int
    download_count: int
    created_at: datetime
    updated_at: datetime
    uploader: Union[None, SimpleUserType]


class ReleaseType(TypedDict):
    """Release

    A release.
    """

    url: str
    html_url: str
    assets_url: str
    upload_url: str
    tarball_url: Union[str, None]
    zipball_url: Union[str, None]
    id: int
    node_id: str
    tag_name: str
    target_commitish: str
    name: Union[str, None]
    body: NotRequired[Union[str, None]]
    draft: bool
    prerelease: bool
    created_at: datetime
    published_at: Union[datetime, None]
    author: SimpleUserType
    assets: List[ReleaseAssetType]
    body_html: NotRequired[Union[str, None]]
    body_text: NotRequired[Union[str, None]]
    mentions_count: NotRequired[int]
    discussion_url: NotRequired[str]
    reactions: NotRequired[ReactionRollupType]


class ReleaseNotesContentType(TypedDict):
    """Generated Release Notes Content

    Generated name and body describing a release
    """

    name: str
    body: str


class SecretScanningAlertType(TypedDict):
    """SecretScanningAlert"""

    number: NotRequired[int]
    created_at: NotRequired[datetime]
    updated_at: NotRequired[Union[None, datetime]]
    url: NotRequired[str]
    html_url: NotRequired[str]
    locations_url: NotRequired[str]
    state: NotRequired[Literal["open", "resolved"]]
    resolution: NotRequired[
        Union[None, Literal["false_positive", "wont_fix", "revoked", "used_in_tests"]]
    ]
    resolved_at: NotRequired[Union[datetime, None]]
    resolved_by: NotRequired[Union[None, SimpleUserType]]
    resolution_comment: NotRequired[Union[str, None]]
    secret_type: NotRequired[str]
    secret_type_display_name: NotRequired[str]
    secret: NotRequired[str]
    push_protection_bypassed: NotRequired[Union[bool, None]]
    push_protection_bypassed_by: NotRequired[Union[None, SimpleUserType]]
    push_protection_bypassed_at: NotRequired[Union[datetime, None]]


class SecretScanningLocationCommitType(TypedDict):
    """SecretScanningLocationCommit

    Represents a 'commit' secret scanning location type. This location type shows
    that a secret was detected inside a commit to a repository.
    """

    path: str
    start_line: float
    end_line: float
    start_column: float
    end_column: float
    blob_sha: str
    blob_url: str
    commit_sha: str
    commit_url: str


class SecretScanningLocationIssueTitleType(TypedDict):
    """SecretScanningLocationIssueTitle

    Represents an 'issue_title' secret scanning location type. This location type
    shows that a secret was detected in the title of an issue.
    """

    issue_title_url: str


class SecretScanningLocationIssueBodyType(TypedDict):
    """SecretScanningLocationIssueBody

    Represents an 'issue_body' secret scanning location type. This location type
    shows that a secret was detected in the body of an issue.
    """

    issue_body_url: str


class SecretScanningLocationIssueCommentType(TypedDict):
    """SecretScanningLocationIssueComment

    Represents an 'issue_comment' secret scanning location type. This location type
    shows that a secret was detected in a comment on an issue.
    """

    issue_comment_url: str


class SecretScanningLocationType(TypedDict):
    """SecretScanningLocation"""

    type: Literal["commit", "issue_title", "issue_body", "issue_comment"]
    details: Union[
        SecretScanningLocationCommitType,
        SecretScanningLocationIssueTitleType,
        SecretScanningLocationIssueBodyType,
        SecretScanningLocationIssueCommentType,
    ]


class RepositoryAdvisoryVulnerabilityType(TypedDict):
    """RepositoryAdvisoryVulnerability

    A product affected by the vulnerability detailed in a repository security
    advisory.
    """

    package: Union[RepositoryAdvisoryVulnerabilityPropPackageType, None]
    vulnerable_version_range: Union[str, None]
    patched_versions: Union[str, None]
    vulnerable_functions: Union[List[str], None]


class RepositoryAdvisoryVulnerabilityPropPackageType(TypedDict):
    """RepositoryAdvisoryVulnerabilityPropPackage

    The name of the package affected by the vulnerability.
    """

    ecosystem: Literal[
        "rubygems",
        "npm",
        "pip",
        "maven",
        "nuget",
        "composer",
        "go",
        "rust",
        "erlang",
        "actions",
        "pub",
        "other",
    ]
    name: Union[str, None]


class RepositoryAdvisoryCreditType(TypedDict):
    """RepositoryAdvisoryCredit

    A credit given to a user for a repository security advisory.
    """

    user: SimpleUserType
    type: Literal[
        "analyst",
        "finder",
        "reporter",
        "coordinator",
        "remediation_developer",
        "remediation_reviewer",
        "remediation_verifier",
        "tool",
        "sponsor",
        "other",
    ]
    state: Literal["accepted", "declined", "pending"]


class RepositoryAdvisoryType(TypedDict):
    """RepositoryAdvisory

    A repository security advisory.
    """

    ghsa_id: str
    cve_id: Union[str, None]
    url: str
    html_url: str
    summary: str
    description: Union[str, None]
    severity: Union[None, Literal["critical", "high", "medium", "low"]]
    author: None
    publisher: None
    identifiers: List[RepositoryAdvisoryPropIdentifiersItemsType]
    state: Literal["published", "closed", "withdrawn", "draft", "triage"]
    created_at: Union[datetime, None]
    updated_at: Union[datetime, None]
    published_at: Union[datetime, None]
    closed_at: Union[datetime, None]
    withdrawn_at: Union[datetime, None]
    submission: Union[RepositoryAdvisoryPropSubmissionType, None]
    vulnerabilities: Union[List[RepositoryAdvisoryVulnerabilityType], None]
    cvss: Union[RepositoryAdvisoryPropCvssType, None]
    cwes: Union[List[RepositoryAdvisoryPropCwesItemsType], None]
    cwe_ids: Union[List[str], None]
    credits_: Union[List[RepositoryAdvisoryPropCreditsItemsType], None]
    credits_detailed: Union[List[RepositoryAdvisoryCreditType], None]


class RepositoryAdvisoryPropIdentifiersItemsType(TypedDict):
    """RepositoryAdvisoryPropIdentifiersItems"""

    type: Literal["CVE", "GHSA"]
    value: str


class RepositoryAdvisoryPropSubmissionType(TypedDict):
    """RepositoryAdvisoryPropSubmission"""

    accepted: bool


class RepositoryAdvisoryPropCvssType(TypedDict):
    """RepositoryAdvisoryPropCvss"""

    vector_string: Union[str, None]
    score: Union[float, None]


class RepositoryAdvisoryPropCwesItemsType(TypedDict):
    """RepositoryAdvisoryPropCwesItems"""

    cwe_id: str
    name: str


class RepositoryAdvisoryPropCreditsItemsType(TypedDict):
    """RepositoryAdvisoryPropCreditsItems"""

    login: NotRequired[str]
    type: NotRequired[
        Literal[
            "analyst",
            "finder",
            "reporter",
            "coordinator",
            "remediation_developer",
            "remediation_reviewer",
            "remediation_verifier",
            "tool",
            "sponsor",
            "other",
        ]
    ]


class RepositoryAdvisoryCreateType(TypedDict):
    """RepositoryAdvisoryCreate"""

    summary: str
    description: str
    cve_id: NotRequired[Union[str, None]]
    vulnerabilities: List[RepositoryAdvisoryCreatePropVulnerabilitiesItemsType]
    cwe_ids: NotRequired[Union[List[str], None]]
    credits_: NotRequired[
        Union[List[RepositoryAdvisoryCreatePropCreditsItemsType], None]
    ]
    severity: NotRequired[Union[None, Literal["critical", "high", "medium", "low"]]]
    cvss_vector_string: NotRequired[Union[str, None]]


class RepositoryAdvisoryCreatePropVulnerabilitiesItemsType(TypedDict):
    """RepositoryAdvisoryCreatePropVulnerabilitiesItems"""

    package: RepositoryAdvisoryCreatePropVulnerabilitiesItemsPropPackageType
    vulnerable_version_range: NotRequired[Union[str, None]]
    patched_versions: NotRequired[Union[str, None]]
    vulnerable_functions: NotRequired[Union[List[str], None]]


class RepositoryAdvisoryCreatePropVulnerabilitiesItemsPropPackageType(TypedDict):
    """RepositoryAdvisoryCreatePropVulnerabilitiesItemsPropPackage

    The name of the package affected by the vulnerability.
    """

    ecosystem: Literal[
        "rubygems",
        "npm",
        "pip",
        "maven",
        "nuget",
        "composer",
        "go",
        "rust",
        "erlang",
        "actions",
        "pub",
        "other",
    ]
    name: NotRequired[Union[str, None]]


class RepositoryAdvisoryCreatePropCreditsItemsType(TypedDict):
    """RepositoryAdvisoryCreatePropCreditsItems"""

    login: str
    type: Literal[
        "analyst",
        "finder",
        "reporter",
        "coordinator",
        "remediation_developer",
        "remediation_reviewer",
        "remediation_verifier",
        "tool",
        "sponsor",
        "other",
    ]


class PrivateVulnerabilityReportCreateType(TypedDict):
    """PrivateVulnerabilityReportCreate"""

    summary: str
    description: str
    vulnerabilities: NotRequired[
        Union[List[PrivateVulnerabilityReportCreatePropVulnerabilitiesItemsType], None]
    ]
    cwe_ids: NotRequired[Union[List[str], None]]
    severity: NotRequired[Union[None, Literal["critical", "high", "medium", "low"]]]
    cvss_vector_string: NotRequired[Union[str, None]]


class PrivateVulnerabilityReportCreatePropVulnerabilitiesItemsType(TypedDict):
    """PrivateVulnerabilityReportCreatePropVulnerabilitiesItems"""

    package: PrivateVulnerabilityReportCreatePropVulnerabilitiesItemsPropPackageType
    vulnerable_version_range: NotRequired[Union[str, None]]
    patched_versions: NotRequired[Union[str, None]]
    vulnerable_functions: NotRequired[Union[List[str], None]]


class PrivateVulnerabilityReportCreatePropVulnerabilitiesItemsPropPackageType(
    TypedDict
):
    """PrivateVulnerabilityReportCreatePropVulnerabilitiesItemsPropPackage

    The name of the package affected by the vulnerability.
    """

    ecosystem: Literal[
        "rubygems",
        "npm",
        "pip",
        "maven",
        "nuget",
        "composer",
        "go",
        "rust",
        "erlang",
        "actions",
        "pub",
        "other",
    ]
    name: NotRequired[Union[str, None]]


class RepositoryAdvisoryUpdateType(TypedDict):
    """RepositoryAdvisoryUpdate"""

    summary: NotRequired[str]
    description: NotRequired[str]
    cve_id: NotRequired[Union[str, None]]
    vulnerabilities: NotRequired[
        List[RepositoryAdvisoryUpdatePropVulnerabilitiesItemsType]
    ]
    cwe_ids: NotRequired[Union[List[str], None]]
    credits_: NotRequired[
        Union[List[RepositoryAdvisoryUpdatePropCreditsItemsType], None]
    ]
    severity: NotRequired[Union[None, Literal["critical", "high", "medium", "low"]]]
    cvss_vector_string: NotRequired[Union[str, None]]
    state: NotRequired[Literal["published", "closed", "draft"]]


class RepositoryAdvisoryUpdatePropVulnerabilitiesItemsType(TypedDict):
    """RepositoryAdvisoryUpdatePropVulnerabilitiesItems"""

    package: RepositoryAdvisoryUpdatePropVulnerabilitiesItemsPropPackageType
    vulnerable_version_range: NotRequired[Union[str, None]]
    patched_versions: NotRequired[Union[str, None]]
    vulnerable_functions: NotRequired[Union[List[str], None]]


class RepositoryAdvisoryUpdatePropVulnerabilitiesItemsPropPackageType(TypedDict):
    """RepositoryAdvisoryUpdatePropVulnerabilitiesItemsPropPackage

    The name of the package affected by the vulnerability.
    """

    ecosystem: Literal[
        "rubygems",
        "npm",
        "pip",
        "maven",
        "nuget",
        "composer",
        "go",
        "rust",
        "erlang",
        "actions",
        "pub",
        "other",
    ]
    name: NotRequired[Union[str, None]]


class RepositoryAdvisoryUpdatePropCreditsItemsType(TypedDict):
    """RepositoryAdvisoryUpdatePropCreditsItems"""

    login: str
    type: Literal[
        "analyst",
        "finder",
        "reporter",
        "coordinator",
        "remediation_developer",
        "remediation_reviewer",
        "remediation_verifier",
        "tool",
        "sponsor",
        "other",
    ]


class StargazerType(TypedDict):
    """Stargazer

    Stargazer
    """

    starred_at: datetime
    user: Union[None, SimpleUserType]


class CommitActivityType(TypedDict):
    """Commit Activity

    Commit Activity
    """

    days: List[int]
    total: int
    week: int


class ContributorActivityType(TypedDict):
    """Contributor Activity

    Contributor Activity
    """

    author: Union[None, SimpleUserType]
    total: int
    weeks: List[ContributorActivityPropWeeksItemsType]


class ContributorActivityPropWeeksItemsType(TypedDict):
    """ContributorActivityPropWeeksItems"""

    w: NotRequired[int]
    a: NotRequired[int]
    d: NotRequired[int]
    c: NotRequired[int]


class ParticipationStatsType(TypedDict):
    """Participation Stats"""

    all_: List[int]
    owner: List[int]


class RepositorySubscriptionType(TypedDict):
    """Repository Invitation

    Repository invitations let you manage who you collaborate with.
    """

    subscribed: bool
    ignored: bool
    reason: Union[str, None]
    created_at: datetime
    url: str
    repository_url: str


class TagType(TypedDict):
    """Tag

    Tag
    """

    name: str
    commit: TagPropCommitType
    zipball_url: str
    tarball_url: str
    node_id: str


class TagPropCommitType(TypedDict):
    """TagPropCommit"""

    sha: str
    url: str


class TagProtectionType(TypedDict):
    """Tag protection

    Tag protection
    """

    id: NotRequired[int]
    created_at: NotRequired[str]
    updated_at: NotRequired[str]
    enabled: NotRequired[bool]
    pattern: str


class TopicType(TypedDict):
    """Topic

    A topic aggregates entities that are related to a subject.
    """

    names: List[str]


class TrafficType(TypedDict):
    """Traffic"""

    timestamp: datetime
    uniques: int
    count: int


class CloneTrafficType(TypedDict):
    """Clone Traffic

    Clone Traffic
    """

    count: int
    uniques: int
    clones: List[TrafficType]


class ContentTrafficType(TypedDict):
    """Content Traffic

    Content Traffic
    """

    path: str
    title: str
    count: int
    uniques: int


class ReferrerTrafficType(TypedDict):
    """Referrer Traffic

    Referrer Traffic
    """

    referrer: str
    count: int
    uniques: int


class ViewTrafficType(TypedDict):
    """View Traffic

    View Traffic
    """

    count: int
    uniques: int
    views: List[TrafficType]


class SearchResultTextMatchesItemsType(TypedDict):
    """SearchResultTextMatchesItems"""

    object_url: NotRequired[str]
    object_type: NotRequired[Union[str, None]]
    property_: NotRequired[str]
    fragment: NotRequired[str]
    matches: NotRequired[List[SearchResultTextMatchesItemsPropMatchesItemsType]]


class SearchResultTextMatchesItemsPropMatchesItemsType(TypedDict):
    """SearchResultTextMatchesItemsPropMatchesItems"""

    text: NotRequired[str]
    indices: NotRequired[List[int]]


class CodeSearchResultItemType(TypedDict):
    """Code Search Result Item

    Code Search Result Item
    """

    name: str
    path: str
    sha: str
    url: str
    git_url: str
    html_url: str
    repository: MinimalRepositoryType
    score: float
    file_size: NotRequired[int]
    language: NotRequired[Union[str, None]]
    last_modified_at: NotRequired[datetime]
    line_numbers: NotRequired[List[str]]
    text_matches: NotRequired[List[SearchResultTextMatchesItemsType]]


class CommitSearchResultItemType(TypedDict):
    """Commit Search Result Item

    Commit Search Result Item
    """

    url: str
    sha: str
    html_url: str
    comments_url: str
    commit: CommitSearchResultItemPropCommitType
    author: Union[None, SimpleUserType]
    committer: Union[None, GitUserType]
    parents: List[CommitSearchResultItemPropParentsItemsType]
    repository: MinimalRepositoryType
    score: float
    node_id: str
    text_matches: NotRequired[List[SearchResultTextMatchesItemsType]]


class CommitSearchResultItemPropCommitType(TypedDict):
    """CommitSearchResultItemPropCommit"""

    author: CommitSearchResultItemPropCommitPropAuthorType
    committer: Union[None, GitUserType]
    comment_count: int
    message: str
    tree: CommitSearchResultItemPropCommitPropTreeType
    url: str
    verification: NotRequired[VerificationType]


class CommitSearchResultItemPropCommitPropAuthorType(TypedDict):
    """CommitSearchResultItemPropCommitPropAuthor"""

    name: str
    email: str
    date: datetime


class CommitSearchResultItemPropCommitPropTreeType(TypedDict):
    """CommitSearchResultItemPropCommitPropTree"""

    sha: str
    url: str


class CommitSearchResultItemPropParentsItemsType(TypedDict):
    """CommitSearchResultItemPropParentsItems"""

    url: NotRequired[str]
    html_url: NotRequired[str]
    sha: NotRequired[str]


class IssueSearchResultItemType(TypedDict):
    """Issue Search Result Item

    Issue Search Result Item
    """

    url: str
    repository_url: str
    labels_url: str
    comments_url: str
    events_url: str
    html_url: str
    id: int
    node_id: str
    number: int
    title: str
    locked: bool
    active_lock_reason: NotRequired[Union[str, None]]
    assignees: NotRequired[Union[List[SimpleUserType], None]]
    user: Union[None, SimpleUserType]
    labels: List[IssueSearchResultItemPropLabelsItemsType]
    state: str
    state_reason: NotRequired[Union[str, None]]
    assignee: Union[None, SimpleUserType]
    milestone: Union[None, MilestoneType]
    comments: int
    created_at: datetime
    updated_at: datetime
    closed_at: Union[datetime, None]
    text_matches: NotRequired[List[SearchResultTextMatchesItemsType]]
    pull_request: NotRequired[IssueSearchResultItemPropPullRequestType]
    body: NotRequired[str]
    score: float
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    draft: NotRequired[bool]
    repository: NotRequired[RepositoryType]
    body_html: NotRequired[str]
    body_text: NotRequired[str]
    timeline_url: NotRequired[str]
    performed_via_github_app: NotRequired[Union[None, IntegrationType]]
    reactions: NotRequired[ReactionRollupType]


class IssueSearchResultItemPropLabelsItemsType(TypedDict):
    """IssueSearchResultItemPropLabelsItems"""

    id: NotRequired[int]
    node_id: NotRequired[str]
    url: NotRequired[str]
    name: NotRequired[str]
    color: NotRequired[str]
    default: NotRequired[bool]
    description: NotRequired[Union[str, None]]


class IssueSearchResultItemPropPullRequestType(TypedDict):
    """IssueSearchResultItemPropPullRequest"""

    merged_at: NotRequired[Union[datetime, None]]
    diff_url: Union[str, None]
    html_url: Union[str, None]
    patch_url: Union[str, None]
    url: Union[str, None]


class LabelSearchResultItemType(TypedDict):
    """Label Search Result Item

    Label Search Result Item
    """

    id: int
    node_id: str
    url: str
    name: str
    color: str
    default: bool
    description: Union[str, None]
    score: float
    text_matches: NotRequired[List[SearchResultTextMatchesItemsType]]


class RepoSearchResultItemType(TypedDict):
    """Repo Search Result Item

    Repo Search Result Item
    """

    id: int
    node_id: str
    name: str
    full_name: str
    owner: Union[None, SimpleUserType]
    private: bool
    html_url: str
    description: Union[str, None]
    fork: bool
    url: str
    created_at: datetime
    updated_at: datetime
    pushed_at: datetime
    homepage: Union[str, None]
    size: int
    stargazers_count: int
    watchers_count: int
    language: Union[str, None]
    forks_count: int
    open_issues_count: int
    master_branch: NotRequired[str]
    default_branch: str
    score: float
    forks_url: str
    keys_url: str
    collaborators_url: str
    teams_url: str
    hooks_url: str
    issue_events_url: str
    events_url: str
    assignees_url: str
    branches_url: str
    tags_url: str
    blobs_url: str
    git_tags_url: str
    git_refs_url: str
    trees_url: str
    statuses_url: str
    languages_url: str
    stargazers_url: str
    contributors_url: str
    subscribers_url: str
    subscription_url: str
    commits_url: str
    git_commits_url: str
    comments_url: str
    issue_comment_url: str
    contents_url: str
    compare_url: str
    merges_url: str
    archive_url: str
    downloads_url: str
    issues_url: str
    pulls_url: str
    milestones_url: str
    notifications_url: str
    labels_url: str
    releases_url: str
    deployments_url: str
    git_url: str
    ssh_url: str
    clone_url: str
    svn_url: str
    forks: int
    open_issues: int
    watchers: int
    topics: NotRequired[List[str]]
    mirror_url: Union[str, None]
    has_issues: bool
    has_projects: bool
    has_pages: bool
    has_wiki: bool
    has_downloads: bool
    has_discussions: NotRequired[bool]
    archived: bool
    disabled: bool
    visibility: NotRequired[str]
    license_: Union[None, LicenseSimpleType]
    permissions: NotRequired[RepoSearchResultItemPropPermissionsType]
    text_matches: NotRequired[List[SearchResultTextMatchesItemsType]]
    temp_clone_token: NotRequired[Union[str, None]]
    allow_merge_commit: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_auto_merge: NotRequired[bool]
    delete_branch_on_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    is_template: NotRequired[bool]
    web_commit_signoff_required: NotRequired[bool]


class RepoSearchResultItemPropPermissionsType(TypedDict):
    """RepoSearchResultItemPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    push: bool
    triage: NotRequired[bool]
    pull: bool


class TopicSearchResultItemType(TypedDict):
    """Topic Search Result Item

    Topic Search Result Item
    """

    name: str
    display_name: Union[str, None]
    short_description: Union[str, None]
    description: Union[str, None]
    created_by: Union[str, None]
    released: Union[str, None]
    created_at: datetime
    updated_at: datetime
    featured: bool
    curated: bool
    score: float
    repository_count: NotRequired[Union[int, None]]
    logo_url: NotRequired[Union[str, None]]
    text_matches: NotRequired[List[SearchResultTextMatchesItemsType]]
    related: NotRequired[Union[List[TopicSearchResultItemPropRelatedItemsType], None]]
    aliases: NotRequired[Union[List[TopicSearchResultItemPropAliasesItemsType], None]]


class TopicSearchResultItemPropRelatedItemsType(TypedDict):
    """TopicSearchResultItemPropRelatedItems"""

    topic_relation: NotRequired[
        TopicSearchResultItemPropRelatedItemsPropTopicRelationType
    ]


class TopicSearchResultItemPropRelatedItemsPropTopicRelationType(TypedDict):
    """TopicSearchResultItemPropRelatedItemsPropTopicRelation"""

    id: NotRequired[int]
    name: NotRequired[str]
    topic_id: NotRequired[int]
    relation_type: NotRequired[str]


class TopicSearchResultItemPropAliasesItemsType(TypedDict):
    """TopicSearchResultItemPropAliasesItems"""

    topic_relation: NotRequired[
        TopicSearchResultItemPropAliasesItemsPropTopicRelationType
    ]


class TopicSearchResultItemPropAliasesItemsPropTopicRelationType(TypedDict):
    """TopicSearchResultItemPropAliasesItemsPropTopicRelation"""

    id: NotRequired[int]
    name: NotRequired[str]
    topic_id: NotRequired[int]
    relation_type: NotRequired[str]


class UserSearchResultItemType(TypedDict):
    """User Search Result Item

    User Search Result Item
    """

    login: str
    id: int
    node_id: str
    avatar_url: str
    gravatar_id: Union[str, None]
    url: str
    html_url: str
    followers_url: str
    subscriptions_url: str
    organizations_url: str
    repos_url: str
    received_events_url: str
    type: str
    score: float
    following_url: str
    gists_url: str
    starred_url: str
    events_url: str
    public_repos: NotRequired[int]
    public_gists: NotRequired[int]
    followers: NotRequired[int]
    following: NotRequired[int]
    created_at: NotRequired[datetime]
    updated_at: NotRequired[datetime]
    name: NotRequired[Union[str, None]]
    bio: NotRequired[Union[str, None]]
    email: NotRequired[Union[str, None]]
    location: NotRequired[Union[str, None]]
    site_admin: bool
    hireable: NotRequired[Union[bool, None]]
    text_matches: NotRequired[List[SearchResultTextMatchesItemsType]]
    blog: NotRequired[Union[str, None]]
    company: NotRequired[Union[str, None]]
    suspended_at: NotRequired[Union[datetime, None]]


class PrivateUserType(TypedDict):
    """Private User

    Private User
    """

    login: str
    id: int
    node_id: str
    avatar_url: str
    gravatar_id: Union[str, None]
    url: str
    html_url: str
    followers_url: str
    following_url: str
    gists_url: str
    starred_url: str
    subscriptions_url: str
    organizations_url: str
    repos_url: str
    events_url: str
    received_events_url: str
    type: str
    site_admin: bool
    name: Union[str, None]
    company: Union[str, None]
    blog: Union[str, None]
    location: Union[str, None]
    email: Union[str, None]
    hireable: Union[bool, None]
    bio: Union[str, None]
    twitter_username: NotRequired[Union[str, None]]
    public_repos: int
    public_gists: int
    followers: int
    following: int
    created_at: datetime
    updated_at: datetime
    private_gists: int
    total_private_repos: int
    owned_private_repos: int
    disk_usage: int
    collaborators: int
    two_factor_authentication: bool
    plan: NotRequired[PrivateUserPropPlanType]
    suspended_at: NotRequired[Union[datetime, None]]
    business_plus: NotRequired[bool]
    ldap_dn: NotRequired[str]


class PrivateUserPropPlanType(TypedDict):
    """PrivateUserPropPlan"""

    collaborators: int
    name: str
    space: int
    private_repos: int


class CodespacesSecretType(TypedDict):
    """Codespaces Secret

    Secrets for a GitHub Codespace.
    """

    name: str
    created_at: datetime
    updated_at: datetime
    visibility: Literal["all", "private", "selected"]
    selected_repositories_url: str


class CodespacesUserPublicKeyType(TypedDict):
    """CodespacesUserPublicKey

    The public key used for setting user Codespaces' Secrets.
    """

    key_id: str
    key: str


class CodespaceExportDetailsType(TypedDict):
    """Fetches information about an export of a codespace.

    An export of a codespace. Also, latest export details for a codespace can be
    fetched with id = latest
    """

    state: NotRequired[Union[str, None]]
    completed_at: NotRequired[Union[datetime, None]]
    branch: NotRequired[Union[str, None]]
    sha: NotRequired[Union[str, None]]
    id: NotRequired[str]
    export_url: NotRequired[str]
    html_url: NotRequired[Union[str, None]]


class CodespaceWithFullRepositoryType(TypedDict):
    """Codespace

    A codespace.
    """

    id: int
    name: str
    display_name: NotRequired[Union[str, None]]
    environment_id: Union[str, None]
    owner: SimpleUserType
    billable_owner: SimpleUserType
    repository: FullRepositoryType
    machine: Union[None, CodespaceMachineType]
    devcontainer_path: NotRequired[Union[str, None]]
    prebuild: Union[bool, None]
    created_at: datetime
    updated_at: datetime
    last_used_at: datetime
    state: Literal[
        "Unknown",
        "Created",
        "Queued",
        "Provisioning",
        "Available",
        "Awaiting",
        "Unavailable",
        "Deleted",
        "Moved",
        "Shutdown",
        "Archived",
        "Starting",
        "ShuttingDown",
        "Failed",
        "Exporting",
        "Updating",
        "Rebuilding",
    ]
    url: str
    git_status: CodespaceWithFullRepositoryPropGitStatusType
    location: Literal["EastUs", "SouthEastAsia", "WestEurope", "WestUs2"]
    idle_timeout_minutes: Union[int, None]
    web_url: str
    machines_url: str
    start_url: str
    stop_url: str
    publish_url: NotRequired[Union[str, None]]
    pulls_url: Union[str, None]
    recent_folders: List[str]
    runtime_constraints: NotRequired[
        CodespaceWithFullRepositoryPropRuntimeConstraintsType
    ]
    pending_operation: NotRequired[Union[bool, None]]
    pending_operation_disabled_reason: NotRequired[Union[str, None]]
    idle_timeout_notice: NotRequired[Union[str, None]]
    retention_period_minutes: NotRequired[Union[int, None]]
    retention_expires_at: NotRequired[Union[datetime, None]]


class CodespaceWithFullRepositoryPropGitStatusType(TypedDict):
    """CodespaceWithFullRepositoryPropGitStatus

    Details about the codespace's git repository.
    """

    ahead: NotRequired[int]
    behind: NotRequired[int]
    has_unpushed_changes: NotRequired[bool]
    has_uncommitted_changes: NotRequired[bool]
    ref: NotRequired[str]


class CodespaceWithFullRepositoryPropRuntimeConstraintsType(TypedDict):
    """CodespaceWithFullRepositoryPropRuntimeConstraints"""

    allowed_port_privacy_settings: NotRequired[Union[List[str], None]]


class EmailType(TypedDict):
    """Email

    Email
    """

    email: str
    primary: bool
    verified: bool
    visibility: Union[str, None]


class GpgKeyType(TypedDict):
    """GPG Key

    A unique encryption key
    """

    id: int
    name: NotRequired[Union[str, None]]
    primary_key_id: Union[int, None]
    key_id: str
    public_key: str
    emails: List[GpgKeyPropEmailsItemsType]
    subkeys: List[GpgKeyPropSubkeysItemsType]
    can_sign: bool
    can_encrypt_comms: bool
    can_encrypt_storage: bool
    can_certify: bool
    created_at: datetime
    expires_at: Union[datetime, None]
    revoked: bool
    raw_key: Union[str, None]


class GpgKeyPropEmailsItemsType(TypedDict):
    """GpgKeyPropEmailsItems"""

    email: NotRequired[str]
    verified: NotRequired[bool]


class GpgKeyPropSubkeysItemsType(TypedDict):
    """GpgKeyPropSubkeysItems"""

    id: NotRequired[int]
    primary_key_id: NotRequired[int]
    key_id: NotRequired[str]
    public_key: NotRequired[str]
    emails: NotRequired[List[GpgKeyPropSubkeysItemsPropEmailsItemsType]]
    subkeys: NotRequired[List[Any]]
    can_sign: NotRequired[bool]
    can_encrypt_comms: NotRequired[bool]
    can_encrypt_storage: NotRequired[bool]
    can_certify: NotRequired[bool]
    created_at: NotRequired[str]
    expires_at: NotRequired[Union[str, None]]
    raw_key: NotRequired[Union[str, None]]
    revoked: NotRequired[bool]


class GpgKeyPropSubkeysItemsPropEmailsItemsType(TypedDict):
    """GpgKeyPropSubkeysItemsPropEmailsItems"""

    email: NotRequired[str]
    verified: NotRequired[bool]


class KeyType(TypedDict):
    """Key

    Key
    """

    key: str
    id: int
    url: str
    title: str
    created_at: datetime
    verified: bool
    read_only: bool


class MarketplaceAccountType(TypedDict):
    """Marketplace Account"""

    url: str
    id: int
    type: str
    node_id: NotRequired[str]
    login: str
    email: NotRequired[Union[str, None]]
    organization_billing_email: NotRequired[Union[str, None]]


class UserMarketplacePurchaseType(TypedDict):
    """User Marketplace Purchase

    User Marketplace Purchase
    """

    billing_cycle: str
    next_billing_date: Union[datetime, None]
    unit_count: Union[int, None]
    on_free_trial: bool
    free_trial_ends_on: Union[datetime, None]
    updated_at: Union[datetime, None]
    account: MarketplaceAccountType
    plan: MarketplaceListingPlanType


class SocialAccountType(TypedDict):
    """Social account

    Social media account
    """

    provider: str
    url: str


class SshSigningKeyType(TypedDict):
    """SSH Signing Key

    A public SSH key used to sign Git commits
    """

    key: str
    id: int
    title: str
    created_at: datetime


class StarredRepositoryType(TypedDict):
    """Starred Repository

    Starred Repository
    """

    starred_at: datetime
    repo: RepositoryType


class HovercardType(TypedDict):
    """Hovercard

    Hovercard
    """

    contexts: List[HovercardPropContextsItemsType]


class HovercardPropContextsItemsType(TypedDict):
    """HovercardPropContextsItems"""

    message: str
    octicon: str


class KeySimpleType(TypedDict):
    """Key Simple

    Key Simple
    """

    id: int
    key: str


class SimpleInstallationType(TypedDict):
    """Simple Installation

    The GitHub App installation. This property is included when the event is
    configured for and sent to a GitHub App.
    """

    id: int
    node_id: str


class SimpleCheckSuiteType(TypedDict):
    """SimpleCheckSuite

    A suite of checks performed on the code of a given code change
    """

    after: NotRequired[Union[str, None]]
    app: NotRequired[IntegrationType]
    before: NotRequired[Union[str, None]]
    conclusion: NotRequired[
        Union[
            None,
            Literal[
                "success",
                "failure",
                "neutral",
                "cancelled",
                "skipped",
                "timed_out",
                "action_required",
                "stale",
                "startup_failure",
            ],
        ]
    ]
    created_at: NotRequired[datetime]
    head_branch: NotRequired[Union[str, None]]
    head_sha: NotRequired[str]
    id: NotRequired[int]
    node_id: NotRequired[str]
    pull_requests: NotRequired[List[PullRequestMinimalType]]
    repository: NotRequired[MinimalRepositoryType]
    status: NotRequired[
        Literal["queued", "in_progress", "completed", "pending", "waiting"]
    ]
    updated_at: NotRequired[datetime]
    url: NotRequired[str]


class CheckRunWithSimpleCheckSuiteType(TypedDict):
    """CheckRun

    A check performed on the code of a given code change
    """

    app: Union[None, IntegrationType]
    check_suite: SimpleCheckSuiteType
    completed_at: Union[datetime, None]
    conclusion: Union[
        None,
        Literal[
            "waiting",
            "pending",
            "startup_failure",
            "stale",
            "success",
            "failure",
            "neutral",
            "cancelled",
            "skipped",
            "timed_out",
            "action_required",
        ],
    ]
    deployment: NotRequired[DeploymentSimpleType]
    details_url: str
    external_id: str
    head_sha: str
    html_url: str
    id: int
    name: str
    node_id: str
    output: CheckRunWithSimpleCheckSuitePropOutputType
    pull_requests: List[PullRequestMinimalType]
    started_at: datetime
    status: Literal["queued", "in_progress", "completed", "pending"]
    url: str


class CheckRunWithSimpleCheckSuitePropOutputType(TypedDict):
    """CheckRunWithSimpleCheckSuitePropOutput"""

    annotations_count: int
    annotations_url: str
    summary: Union[str, None]
    text: Union[str, None]
    title: Union[str, None]


class DiscussionType(TypedDict):
    """Discussion

    A Discussion in a repository.
    """

    active_lock_reason: Union[str, None]
    answer_chosen_at: Union[str, None]
    answer_chosen_by: Union[DiscussionPropAnswerChosenByType, None]
    answer_html_url: Union[str, None]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: str
    category: DiscussionPropCategoryType
    comments: int
    created_at: datetime
    html_url: str
    id: int
    locked: bool
    node_id: str
    number: int
    reactions: NotRequired[DiscussionPropReactionsType]
    repository_url: str
    state: Literal["open", "closed", "locked", "converting", "transferring"]
    state_reason: Union[None, Literal["resolved", "outdated", "duplicate", "reopened"]]
    timeline_url: NotRequired[str]
    title: str
    updated_at: datetime
    user: Union[DiscussionPropUserType, None]


class DiscussionPropAnswerChosenByType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class DiscussionPropCategoryType(TypedDict):
    """DiscussionPropCategory"""

    created_at: datetime
    description: str
    emoji: str
    id: int
    is_answerable: bool
    name: str
    node_id: NotRequired[str]
    repository_id: int
    slug: str
    updated_at: str


class DiscussionPropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class DiscussionPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class PersonalAccessTokenRequestType(TypedDict):
    """Personal Access Token Request

    Details of a Personal Access Token Request.
    """

    id: int
    owner: SimpleUserType
    permissions_added: PersonalAccessTokenRequestPropPermissionsAddedType
    permissions_upgraded: PersonalAccessTokenRequestPropPermissionsUpgradedType
    permissions_result: PersonalAccessTokenRequestPropPermissionsResultType
    repository_selection: Literal["none", "all", "subset"]
    repository_count: Union[int, None]
    repositories: Union[List[PersonalAccessTokenRequestPropRepositoriesItemsType], None]
    created_at: str
    token_expired: bool
    token_expires_at: Union[str, None]
    token_last_used_at: Union[str, None]


class PersonalAccessTokenRequestPropPermissionsAddedType(TypedDict):
    """PersonalAccessTokenRequestPropPermissionsAdded

    New requested permissions, categorized by type of permission.
    """

    organization: NotRequired[
        PersonalAccessTokenRequestPropPermissionsAddedPropOrganizationType
    ]
    repository: NotRequired[
        PersonalAccessTokenRequestPropPermissionsAddedPropRepositoryType
    ]
    other: NotRequired[PersonalAccessTokenRequestPropPermissionsAddedPropOtherType]


class PersonalAccessTokenRequestPropPermissionsAddedPropOrganizationType(TypedDict):
    """PersonalAccessTokenRequestPropPermissionsAddedPropOrganization"""


class PersonalAccessTokenRequestPropPermissionsAddedPropRepositoryType(TypedDict):
    """PersonalAccessTokenRequestPropPermissionsAddedPropRepository"""


class PersonalAccessTokenRequestPropPermissionsAddedPropOtherType(TypedDict):
    """PersonalAccessTokenRequestPropPermissionsAddedPropOther"""


class PersonalAccessTokenRequestPropPermissionsUpgradedType(TypedDict):
    """PersonalAccessTokenRequestPropPermissionsUpgraded

    Requested permissions that elevate access for a previously approved request for
    access, categorized by type of permission.
    """

    organization: NotRequired[
        PersonalAccessTokenRequestPropPermissionsUpgradedPropOrganizationType
    ]
    repository: NotRequired[
        PersonalAccessTokenRequestPropPermissionsUpgradedPropRepositoryType
    ]
    other: NotRequired[PersonalAccessTokenRequestPropPermissionsUpgradedPropOtherType]


class PersonalAccessTokenRequestPropPermissionsUpgradedPropOrganizationType(TypedDict):
    """PersonalAccessTokenRequestPropPermissionsUpgradedPropOrganization"""


class PersonalAccessTokenRequestPropPermissionsUpgradedPropRepositoryType(TypedDict):
    """PersonalAccessTokenRequestPropPermissionsUpgradedPropRepository"""


class PersonalAccessTokenRequestPropPermissionsUpgradedPropOtherType(TypedDict):
    """PersonalAccessTokenRequestPropPermissionsUpgradedPropOther"""


class PersonalAccessTokenRequestPropPermissionsResultType(TypedDict):
    """PersonalAccessTokenRequestPropPermissionsResult

    Permissions requested, categorized by type of permission. This field
    incorporates `permissions_added` and `permissions_upgraded`.
    """

    organization: NotRequired[
        PersonalAccessTokenRequestPropPermissionsResultPropOrganizationType
    ]
    repository: NotRequired[
        PersonalAccessTokenRequestPropPermissionsResultPropRepositoryType
    ]
    other: NotRequired[PersonalAccessTokenRequestPropPermissionsResultPropOtherType]


class PersonalAccessTokenRequestPropPermissionsResultPropOrganizationType(TypedDict):
    """PersonalAccessTokenRequestPropPermissionsResultPropOrganization"""


class PersonalAccessTokenRequestPropPermissionsResultPropRepositoryType(TypedDict):
    """PersonalAccessTokenRequestPropPermissionsResultPropRepository"""


class PersonalAccessTokenRequestPropPermissionsResultPropOtherType(TypedDict):
    """PersonalAccessTokenRequestPropPermissionsResultPropOther"""


class PersonalAccessTokenRequestPropRepositoriesItemsType(TypedDict):
    """PersonalAccessTokenRequestPropRepositoriesItems"""

    full_name: str
    id: int
    name: str
    node_id: str
    private: bool


class ProjectsV2Type(TypedDict):
    """Projects v2 Project

    A projects v2 project
    """

    id: float
    node_id: str
    owner: SimpleUserType
    creator: SimpleUserType
    title: str
    description: Union[str, None]
    public: bool
    closed_at: Union[datetime, None]
    created_at: datetime
    updated_at: datetime
    number: int
    short_description: Union[str, None]
    deleted_at: Union[datetime, None]
    deleted_by: Union[None, SimpleUserType]


class ProjectsV2ItemType(TypedDict):
    """Projects v2 Item

    An item belonging to a project
    """

    id: float
    node_id: NotRequired[str]
    project_node_id: NotRequired[str]
    content_node_id: str
    content_type: Literal["Issue", "PullRequest", "DraftIssue"]
    creator: NotRequired[SimpleUserType]
    created_at: datetime
    updated_at: datetime
    archived_at: Union[datetime, None]


class AppManifestsCodeConversionsPostResponse201Type(TypedDict):
    """AppManifestsCodeConversionsPostResponse201"""

    id: int
    slug: NotRequired[str]
    node_id: str
    owner: Union[None, SimpleUserType]
    name: str
    description: Union[str, None]
    external_url: str
    html_url: str
    created_at: datetime
    updated_at: datetime
    permissions: IntegrationPropPermissionsType
    events: List[str]
    installations_count: NotRequired[int]
    client_id: str
    client_secret: str
    webhook_secret: Union[Union[str, None], None]
    pem: str


class AppManifestsCodeConversionsPostResponse201Allof1Type(TypedDict):
    """AppManifestsCodeConversionsPostResponse201Allof1"""

    client_id: str
    client_secret: str
    webhook_secret: Union[str, None]
    pem: str


class AppHookConfigPatchBodyType(TypedDict):
    """AppHookConfigPatchBody"""

    url: NotRequired[str]
    content_type: NotRequired[str]
    secret: NotRequired[str]
    insecure_ssl: NotRequired[Union[str, float]]


class AppHookDeliveriesDeliveryIdAttemptsPostResponse202Type(TypedDict):
    """AppHookDeliveriesDeliveryIdAttemptsPostResponse202"""


class AppInstallationsInstallationIdAccessTokensPostBodyType(TypedDict):
    """AppInstallationsInstallationIdAccessTokensPostBody"""

    repositories: NotRequired[List[str]]
    repository_ids: NotRequired[List[int]]
    permissions: NotRequired[AppPermissionsType]


class ApplicationsClientIdGrantDeleteBodyType(TypedDict):
    """ApplicationsClientIdGrantDeleteBody"""

    access_token: str


class ApplicationsClientIdTokenPostBodyType(TypedDict):
    """ApplicationsClientIdTokenPostBody"""

    access_token: str


class ApplicationsClientIdTokenDeleteBodyType(TypedDict):
    """ApplicationsClientIdTokenDeleteBody"""

    access_token: str


class ApplicationsClientIdTokenPatchBodyType(TypedDict):
    """ApplicationsClientIdTokenPatchBody"""

    access_token: str


class ApplicationsClientIdTokenScopedPostBodyType(TypedDict):
    """ApplicationsClientIdTokenScopedPostBody"""

    access_token: str
    target: NotRequired[str]
    target_id: NotRequired[int]
    repositories: NotRequired[List[str]]
    repository_ids: NotRequired[List[int]]
    permissions: NotRequired[AppPermissionsType]


class EmojisGetResponse200Type(TypedDict):
    """EmojisGetResponse200"""


class EnterprisesEnterpriseSecretScanningAlertsGetResponse503Type(TypedDict):
    """EnterprisesEnterpriseSecretScanningAlertsGetResponse503"""

    code: NotRequired[str]
    message: NotRequired[str]
    documentation_url: NotRequired[str]


class GistsPostBodyType(TypedDict):
    """GistsPostBody"""

    description: NotRequired[str]
    files: GistsPostBodyPropFilesType
    public: NotRequired[Union[bool, Literal["true", "false"]]]


class GistsPostBodyPropFilesType(TypedDict):
    """GistsPostBodyPropFiles

    Names and content for the files that make up the gist

    Examples:
        {'hello.rb': {'content': 'puts "Hello, World!"'}}
    """


class GistsGistIdGetResponse403Type(TypedDict):
    """GistsGistIdGetResponse403"""

    block: NotRequired[GistsGistIdGetResponse403PropBlockType]
    message: NotRequired[str]
    documentation_url: NotRequired[str]


class GistsGistIdGetResponse403PropBlockType(TypedDict):
    """GistsGistIdGetResponse403PropBlock"""

    reason: NotRequired[str]
    created_at: NotRequired[str]
    html_url: NotRequired[Union[str, None]]


class GistsGistIdPatchBodyPropFilesType(TypedDict):
    """GistsGistIdPatchBodyPropFiles

    The gist files to be updated, renamed, or deleted. Each `key` must match the
    current filename
    (including extension) of the targeted gist file. For example: `hello.py`.

    To delete a file, set the whole file to null. For example: `hello.py : null`.

    Examples:
        {'hello.rb': {'content': 'blah', 'filename': 'goodbye.rb'}}
    """


class GistsGistIdPatchBodyAnyof0Type(TypedDict):
    """GistsGistIdPatchBodyAnyof0"""

    description: str
    files: NotRequired[GistsGistIdPatchBodyPropFilesType]


class GistsGistIdPatchBodyAnyof1Type(TypedDict):
    """GistsGistIdPatchBodyAnyof1"""

    description: NotRequired[str]
    files: GistsGistIdPatchBodyPropFilesType


class GistsGistIdCommentsPostBodyType(TypedDict):
    """GistsGistIdCommentsPostBody"""

    body: str


class GistsGistIdCommentsCommentIdPatchBodyType(TypedDict):
    """GistsGistIdCommentsCommentIdPatchBody"""

    body: str


class GistsGistIdStarGetResponse404Type(TypedDict):
    """GistsGistIdStarGetResponse404"""


class InstallationRepositoriesGetResponse200Type(TypedDict):
    """InstallationRepositoriesGetResponse200"""

    total_count: int
    repositories: List[RepositoryType]
    repository_selection: NotRequired[str]


class MarkdownPostBodyType(TypedDict):
    """MarkdownPostBody"""

    text: str
    mode: NotRequired[Literal["markdown", "gfm"]]
    context: NotRequired[str]


class NotificationsPutBodyType(TypedDict):
    """NotificationsPutBody"""

    last_read_at: NotRequired[datetime]
    read: NotRequired[bool]


class NotificationsPutResponse202Type(TypedDict):
    """NotificationsPutResponse202"""

    message: NotRequired[str]


class NotificationsThreadsThreadIdSubscriptionPutBodyType(TypedDict):
    """NotificationsThreadsThreadIdSubscriptionPutBody"""

    ignored: NotRequired[bool]


class OrganizationsOrgPersonalAccessTokenRequestsPostBodyType(TypedDict):
    """OrganizationsOrgPersonalAccessTokenRequestsPostBody"""

    pat_request_ids: NotRequired[List[int]]
    action: Literal["approve", "deny"]
    reason: NotRequired[Union[str, None]]


class OrganizationsOrgPersonalAccessTokenRequestsPatRequestIdPostBodyType(TypedDict):
    """OrganizationsOrgPersonalAccessTokenRequestsPatRequestIdPostBody"""

    action: Literal["approve", "deny"]
    reason: NotRequired[Union[str, None]]


class OrganizationsOrgPersonalAccessTokensPostBodyType(TypedDict):
    """OrganizationsOrgPersonalAccessTokensPostBody"""

    action: Literal["revoke"]
    pat_ids: List[int]


class OrganizationsOrgPersonalAccessTokensPatIdPostBodyType(TypedDict):
    """OrganizationsOrgPersonalAccessTokensPatIdPostBody"""

    action: Literal["revoke"]


class OrgsOrgPatchBodyType(TypedDict):
    """OrgsOrgPatchBody"""

    billing_email: NotRequired[str]
    company: NotRequired[str]
    email: NotRequired[str]
    twitter_username: NotRequired[str]
    location: NotRequired[str]
    name: NotRequired[str]
    description: NotRequired[str]
    has_organization_projects: NotRequired[bool]
    has_repository_projects: NotRequired[bool]
    default_repository_permission: NotRequired[
        Literal["read", "write", "admin", "none"]
    ]
    members_can_create_repositories: NotRequired[bool]
    members_can_create_internal_repositories: NotRequired[bool]
    members_can_create_private_repositories: NotRequired[bool]
    members_can_create_public_repositories: NotRequired[bool]
    members_allowed_repository_creation_type: NotRequired[
        Literal["all", "private", "none"]
    ]
    members_can_create_pages: NotRequired[bool]
    members_can_create_public_pages: NotRequired[bool]
    members_can_create_private_pages: NotRequired[bool]
    members_can_fork_private_repositories: NotRequired[bool]
    web_commit_signoff_required: NotRequired[bool]
    blog: NotRequired[str]
    advanced_security_enabled_for_new_repositories: NotRequired[bool]
    dependabot_alerts_enabled_for_new_repositories: NotRequired[bool]
    dependabot_security_updates_enabled_for_new_repositories: NotRequired[bool]
    dependency_graph_enabled_for_new_repositories: NotRequired[bool]
    secret_scanning_enabled_for_new_repositories: NotRequired[bool]
    secret_scanning_push_protection_enabled_for_new_repositories: NotRequired[bool]
    secret_scanning_push_protection_custom_link_enabled: NotRequired[bool]
    secret_scanning_push_protection_custom_link: NotRequired[str]


class OrgsOrgActionsCacheUsageByRepositoryGetResponse200Type(TypedDict):
    """OrgsOrgActionsCacheUsageByRepositoryGetResponse200"""

    total_count: int
    repository_cache_usages: List[ActionsCacheUsageByRepositoryType]


class OrgsOrgActionsPermissionsPutBodyType(TypedDict):
    """OrgsOrgActionsPermissionsPutBody"""

    enabled_repositories: Literal["all", "none", "selected"]
    allowed_actions: NotRequired[Literal["all", "local_only", "selected"]]


class OrgsOrgActionsPermissionsRepositoriesGetResponse200Type(TypedDict):
    """OrgsOrgActionsPermissionsRepositoriesGetResponse200"""

    total_count: float
    repositories: List[RepositoryType]


class OrgsOrgActionsPermissionsRepositoriesPutBodyType(TypedDict):
    """OrgsOrgActionsPermissionsRepositoriesPutBody"""

    selected_repository_ids: List[int]


class OrgsOrgActionsRequiredWorkflowsGetResponse200Type(TypedDict):
    """OrgsOrgActionsRequiredWorkflowsGetResponse200"""

    total_count: int
    required_workflows: List[RequiredWorkflowType]


class OrgsOrgActionsRequiredWorkflowsPostBodyType(TypedDict):
    """OrgsOrgActionsRequiredWorkflowsPostBody"""

    workflow_file_path: str
    repository_id: str
    scope: NotRequired[Literal["selected", "all"]]
    selected_repository_ids: NotRequired[List[int]]


class OrgsOrgActionsRequiredWorkflowsRequiredWorkflowIdPatchBodyType(TypedDict):
    """OrgsOrgActionsRequiredWorkflowsRequiredWorkflowIdPatchBody"""

    workflow_file_path: NotRequired[str]
    repository_id: NotRequired[str]
    scope: NotRequired[Literal["selected", "all"]]
    selected_repository_ids: NotRequired[List[int]]


class OrgsOrgActionsRequiredWorkflowsRequiredWorkflowIdRepositoriesGetResponse200Type(
    TypedDict
):
    """OrgsOrgActionsRequiredWorkflowsRequiredWorkflowIdRepositoriesGetResponse200"""

    total_count: float
    repositories: List[RepositoryType]


class OrgsOrgActionsRequiredWorkflowsRequiredWorkflowIdRepositoriesPutBodyType(
    TypedDict
):
    """OrgsOrgActionsRequiredWorkflowsRequiredWorkflowIdRepositoriesPutBody"""

    selected_repository_ids: List[int]


class OrgsOrgActionsRunnersGetResponse200Type(TypedDict):
    """OrgsOrgActionsRunnersGetResponse200"""

    total_count: int
    runners: List[RunnerType]


class OrgsOrgActionsRunnersRunnerIdLabelsGetResponse200Type(TypedDict):
    """OrgsOrgActionsRunnersRunnerIdLabelsGetResponse200"""

    total_count: int
    labels: List[RunnerLabelType]


class OrgsOrgActionsRunnersRunnerIdLabelsPutBodyType(TypedDict):
    """OrgsOrgActionsRunnersRunnerIdLabelsPutBody"""

    labels: List[str]


class OrgsOrgActionsRunnersRunnerIdLabelsPostBodyType(TypedDict):
    """OrgsOrgActionsRunnersRunnerIdLabelsPostBody"""

    labels: List[str]


class OrgsOrgActionsRunnersRunnerIdLabelsDeleteResponse200Type(TypedDict):
    """OrgsOrgActionsRunnersRunnerIdLabelsDeleteResponse200"""

    total_count: int
    labels: List[RunnerLabelType]


class OrgsOrgActionsSecretsGetResponse200Type(TypedDict):
    """OrgsOrgActionsSecretsGetResponse200"""

    total_count: int
    secrets: List[OrganizationActionsSecretType]


class OrgsOrgActionsSecretsSecretNamePutBodyType(TypedDict):
    """OrgsOrgActionsSecretsSecretNamePutBody"""

    encrypted_value: NotRequired[str]
    key_id: NotRequired[str]
    visibility: Literal["all", "private", "selected"]
    selected_repository_ids: NotRequired[List[int]]


class OrgsOrgActionsSecretsSecretNameRepositoriesGetResponse200Type(TypedDict):
    """OrgsOrgActionsSecretsSecretNameRepositoriesGetResponse200"""

    total_count: int
    repositories: List[MinimalRepositoryType]


class OrgsOrgActionsSecretsSecretNameRepositoriesPutBodyType(TypedDict):
    """OrgsOrgActionsSecretsSecretNameRepositoriesPutBody"""

    selected_repository_ids: List[int]


class OrgsOrgActionsVariablesGetResponse200Type(TypedDict):
    """OrgsOrgActionsVariablesGetResponse200"""

    total_count: int
    variables: List[OrganizationActionsVariableType]


class OrgsOrgActionsVariablesPostBodyType(TypedDict):
    """OrgsOrgActionsVariablesPostBody"""

    name: str
    value: str
    visibility: Literal["all", "private", "selected"]
    selected_repository_ids: NotRequired[List[int]]


class OrgsOrgActionsVariablesNamePatchBodyType(TypedDict):
    """OrgsOrgActionsVariablesNamePatchBody"""

    name: NotRequired[str]
    value: NotRequired[str]
    visibility: NotRequired[Literal["all", "private", "selected"]]
    selected_repository_ids: NotRequired[List[int]]


class OrgsOrgActionsVariablesNameRepositoriesGetResponse200Type(TypedDict):
    """OrgsOrgActionsVariablesNameRepositoriesGetResponse200"""

    total_count: int
    repositories: List[MinimalRepositoryType]


class OrgsOrgActionsVariablesNameRepositoriesPutBodyType(TypedDict):
    """OrgsOrgActionsVariablesNameRepositoriesPutBody"""

    selected_repository_ids: List[int]


class OrgsOrgCodespacesGetResponse200Type(TypedDict):
    """OrgsOrgCodespacesGetResponse200"""

    total_count: int
    codespaces: List[CodespaceType]


class OrgsOrgCodespacesBillingPutBodyType(TypedDict):
    """OrgsOrgCodespacesBillingPutBody"""

    visibility: Literal[
        "disabled",
        "selected_members",
        "all_members",
        "all_members_and_outside_collaborators",
    ]
    selected_usernames: NotRequired[List[str]]


class OrgsOrgCodespacesBillingSelectedUsersPostBodyType(TypedDict):
    """OrgsOrgCodespacesBillingSelectedUsersPostBody"""

    selected_usernames: List[str]


class OrgsOrgCodespacesBillingSelectedUsersDeleteBodyType(TypedDict):
    """OrgsOrgCodespacesBillingSelectedUsersDeleteBody"""

    selected_usernames: List[str]


class OrgsOrgCodespacesSecretsGetResponse200Type(TypedDict):
    """OrgsOrgCodespacesSecretsGetResponse200"""

    total_count: int
    secrets: List[CodespacesOrgSecretType]


class OrgsOrgCodespacesSecretsSecretNamePutBodyType(TypedDict):
    """OrgsOrgCodespacesSecretsSecretNamePutBody"""

    encrypted_value: NotRequired[str]
    key_id: NotRequired[str]
    visibility: Literal["all", "private", "selected"]
    selected_repository_ids: NotRequired[List[int]]


class OrgsOrgCodespacesSecretsSecretNameRepositoriesGetResponse200Type(TypedDict):
    """OrgsOrgCodespacesSecretsSecretNameRepositoriesGetResponse200"""

    total_count: int
    repositories: List[MinimalRepositoryType]


class OrgsOrgCodespacesSecretsSecretNameRepositoriesPutBodyType(TypedDict):
    """OrgsOrgCodespacesSecretsSecretNameRepositoriesPutBody"""

    selected_repository_ids: List[int]


class OrgsOrgDependabotSecretsGetResponse200Type(TypedDict):
    """OrgsOrgDependabotSecretsGetResponse200"""

    total_count: int
    secrets: List[OrganizationDependabotSecretType]


class OrgsOrgDependabotSecretsSecretNamePutBodyType(TypedDict):
    """OrgsOrgDependabotSecretsSecretNamePutBody"""

    encrypted_value: NotRequired[str]
    key_id: NotRequired[str]
    visibility: Literal["all", "private", "selected"]
    selected_repository_ids: NotRequired[List[str]]


class OrgsOrgDependabotSecretsSecretNameRepositoriesGetResponse200Type(TypedDict):
    """OrgsOrgDependabotSecretsSecretNameRepositoriesGetResponse200"""

    total_count: int
    repositories: List[MinimalRepositoryType]


class OrgsOrgDependabotSecretsSecretNameRepositoriesPutBodyType(TypedDict):
    """OrgsOrgDependabotSecretsSecretNameRepositoriesPutBody"""

    selected_repository_ids: List[int]


class OrgsOrgHooksPostBodyType(TypedDict):
    """OrgsOrgHooksPostBody"""

    name: str
    config: OrgsOrgHooksPostBodyPropConfigType
    events: NotRequired[List[str]]
    active: NotRequired[bool]


class OrgsOrgHooksPostBodyPropConfigType(TypedDict):
    """OrgsOrgHooksPostBodyPropConfig

    Key/value pairs to provide settings for this webhook. [These are defined
    below](https://docs.github.com/rest/reference/orgs#create-hook-config-params).
    """

    url: str
    content_type: NotRequired[str]
    secret: NotRequired[str]
    insecure_ssl: NotRequired[Union[str, float]]
    username: NotRequired[str]
    password: NotRequired[str]


class OrgsOrgHooksHookIdPatchBodyType(TypedDict):
    """OrgsOrgHooksHookIdPatchBody"""

    config: NotRequired[OrgsOrgHooksHookIdPatchBodyPropConfigType]
    events: NotRequired[List[str]]
    active: NotRequired[bool]
    name: NotRequired[str]


class OrgsOrgHooksHookIdPatchBodyPropConfigType(TypedDict):
    """OrgsOrgHooksHookIdPatchBodyPropConfig

    Key/value pairs to provide settings for this webhook. [These are defined
    below](https://docs.github.com/rest/reference/orgs#update-hook-config-params).
    """

    url: str
    content_type: NotRequired[str]
    secret: NotRequired[str]
    insecure_ssl: NotRequired[Union[str, float]]


class OrgsOrgHooksHookIdConfigPatchBodyType(TypedDict):
    """OrgsOrgHooksHookIdConfigPatchBody"""

    url: NotRequired[str]
    content_type: NotRequired[str]
    secret: NotRequired[str]
    insecure_ssl: NotRequired[Union[str, float]]


class OrgsOrgInstallationsGetResponse200Type(TypedDict):
    """OrgsOrgInstallationsGetResponse200"""

    total_count: int
    installations: List[InstallationType]


class OrgsOrgInteractionLimitsGetResponse200Anyof1Type(TypedDict):
    """OrgsOrgInteractionLimitsGetResponse200Anyof1"""


class OrgsOrgInvitationsPostBodyType(TypedDict):
    """OrgsOrgInvitationsPostBody"""

    invitee_id: NotRequired[int]
    email: NotRequired[str]
    role: NotRequired[Literal["admin", "direct_member", "billing_manager"]]
    team_ids: NotRequired[List[int]]


class OrgsOrgMembersUsernameCodespacesGetResponse200Type(TypedDict):
    """OrgsOrgMembersUsernameCodespacesGetResponse200"""

    total_count: int
    codespaces: List[CodespaceType]


class OrgsOrgMembershipsUsernamePutBodyType(TypedDict):
    """OrgsOrgMembershipsUsernamePutBody"""

    role: NotRequired[Literal["admin", "member"]]


class OrgsOrgMigrationsPostBodyType(TypedDict):
    """OrgsOrgMigrationsPostBody"""

    repositories: List[str]
    lock_repositories: NotRequired[bool]
    exclude_metadata: NotRequired[bool]
    exclude_git_data: NotRequired[bool]
    exclude_attachments: NotRequired[bool]
    exclude_releases: NotRequired[bool]
    exclude_owner_projects: NotRequired[bool]
    org_metadata_only: NotRequired[bool]
    exclude: NotRequired[List[Literal["repositories"]]]


class OrgsOrgOutsideCollaboratorsUsernamePutBodyType(TypedDict):
    """OrgsOrgOutsideCollaboratorsUsernamePutBody"""

    async_: NotRequired[bool]


class OrgsOrgOutsideCollaboratorsUsernamePutResponse202Type(TypedDict):
    """OrgsOrgOutsideCollaboratorsUsernamePutResponse202"""


class OrgsOrgOutsideCollaboratorsUsernameDeleteResponse422Type(TypedDict):
    """OrgsOrgOutsideCollaboratorsUsernameDeleteResponse422"""

    message: NotRequired[str]
    documentation_url: NotRequired[str]


class OrgsOrgProjectsPostBodyType(TypedDict):
    """OrgsOrgProjectsPostBody"""

    name: str
    body: NotRequired[str]


class OrgsOrgReposPostBodyType(TypedDict):
    """OrgsOrgReposPostBody"""

    name: str
    description: NotRequired[str]
    homepage: NotRequired[str]
    private: NotRequired[bool]
    visibility: NotRequired[Literal["public", "private"]]
    has_issues: NotRequired[bool]
    has_projects: NotRequired[bool]
    has_wiki: NotRequired[bool]
    has_downloads: NotRequired[bool]
    is_template: NotRequired[bool]
    team_id: NotRequired[int]
    auto_init: NotRequired[bool]
    gitignore_template: NotRequired[str]
    license_template: NotRequired[str]
    allow_squash_merge: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_auto_merge: NotRequired[bool]
    delete_branch_on_merge: NotRequired[bool]
    use_squash_pr_title_as_default: NotRequired[bool]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]


class OrgsOrgRulesetsPostBodyType(TypedDict):
    """OrgsOrgRulesetsPostBody"""

    name: str
    target: NotRequired[Literal["branch", "tag"]]
    enforcement: Literal["disabled", "active", "evaluate"]
    bypass_actors: NotRequired[List[RepositoryRulesetBypassActorType]]
    conditions: NotRequired[OrgRulesetConditionsType]
    rules: NotRequired[
        List[
            Union[
                RepositoryRuleCreationType,
                RepositoryRuleUpdateType,
                RepositoryRuleDeletionType,
                RepositoryRuleRequiredLinearHistoryType,
                RepositoryRuleRequiredDeploymentsType,
                RepositoryRuleRequiredSignaturesType,
                RepositoryRulePullRequestType,
                RepositoryRuleRequiredStatusChecksType,
                RepositoryRuleNonFastForwardType,
                RepositoryRuleCommitMessagePatternType,
                RepositoryRuleCommitAuthorEmailPatternType,
                RepositoryRuleCommitterEmailPatternType,
                RepositoryRuleBranchNamePatternType,
                RepositoryRuleTagNamePatternType,
            ]
        ]
    ]


class OrgsOrgRulesetsRulesetIdPutBodyType(TypedDict):
    """OrgsOrgRulesetsRulesetIdPutBody"""

    name: NotRequired[str]
    target: NotRequired[Literal["branch", "tag"]]
    enforcement: NotRequired[Literal["disabled", "active", "evaluate"]]
    bypass_actors: NotRequired[List[RepositoryRulesetBypassActorType]]
    conditions: NotRequired[OrgRulesetConditionsType]
    rules: NotRequired[
        List[
            Union[
                RepositoryRuleCreationType,
                RepositoryRuleUpdateType,
                RepositoryRuleDeletionType,
                RepositoryRuleRequiredLinearHistoryType,
                RepositoryRuleRequiredDeploymentsType,
                RepositoryRuleRequiredSignaturesType,
                RepositoryRulePullRequestType,
                RepositoryRuleRequiredStatusChecksType,
                RepositoryRuleNonFastForwardType,
                RepositoryRuleCommitMessagePatternType,
                RepositoryRuleCommitAuthorEmailPatternType,
                RepositoryRuleCommitterEmailPatternType,
                RepositoryRuleBranchNamePatternType,
                RepositoryRuleTagNamePatternType,
            ]
        ]
    ]


class OrgsOrgTeamsPostBodyType(TypedDict):
    """OrgsOrgTeamsPostBody"""

    name: str
    description: NotRequired[str]
    maintainers: NotRequired[List[str]]
    repo_names: NotRequired[List[str]]
    privacy: NotRequired[Literal["secret", "closed"]]
    notification_setting: NotRequired[
        Literal["notifications_enabled", "notifications_disabled"]
    ]
    permission: NotRequired[Literal["pull", "push"]]
    parent_team_id: NotRequired[int]


class OrgsOrgTeamsTeamSlugPatchBodyType(TypedDict):
    """OrgsOrgTeamsTeamSlugPatchBody"""

    name: NotRequired[str]
    description: NotRequired[str]
    privacy: NotRequired[Literal["secret", "closed"]]
    notification_setting: NotRequired[
        Literal["notifications_enabled", "notifications_disabled"]
    ]
    permission: NotRequired[Literal["pull", "push", "admin"]]
    parent_team_id: NotRequired[Union[int, None]]


class OrgsOrgTeamsTeamSlugDiscussionsPostBodyType(TypedDict):
    """OrgsOrgTeamsTeamSlugDiscussionsPostBody"""

    title: str
    body: str
    private: NotRequired[bool]


class OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberPatchBodyType(TypedDict):
    """OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberPatchBody"""

    title: NotRequired[str]
    body: NotRequired[str]


class OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsPostBodyType(TypedDict):
    """OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsPostBody"""

    body: str


class OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsCommentNumberPatchBodyType(
    TypedDict
):
    """OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsCommentNumberPatchBody"""

    body: str


class OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsCommentNumberReactionsPostBodyType(
    TypedDict
):
    """OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsCommentNumberReactionsPos
    tBody
    """

    content: Literal[
        "+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"
    ]


class OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberReactionsPostBodyType(TypedDict):
    """OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberReactionsPostBody"""

    content: Literal[
        "+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"
    ]


class OrgsOrgTeamsTeamSlugMembershipsUsernamePutBodyType(TypedDict):
    """OrgsOrgTeamsTeamSlugMembershipsUsernamePutBody"""

    role: NotRequired[Literal["member", "maintainer"]]


class OrgsOrgTeamsTeamSlugProjectsProjectIdPutBodyType(TypedDict):
    """OrgsOrgTeamsTeamSlugProjectsProjectIdPutBody"""

    permission: NotRequired[Literal["read", "write", "admin"]]


class OrgsOrgTeamsTeamSlugProjectsProjectIdPutResponse403Type(TypedDict):
    """OrgsOrgTeamsTeamSlugProjectsProjectIdPutResponse403"""

    message: NotRequired[str]
    documentation_url: NotRequired[str]


class OrgsOrgTeamsTeamSlugReposOwnerRepoPutBodyType(TypedDict):
    """OrgsOrgTeamsTeamSlugReposOwnerRepoPutBody"""

    permission: NotRequired[str]


class ProjectsColumnsCardsCardIdDeleteResponse403Type(TypedDict):
    """ProjectsColumnsCardsCardIdDeleteResponse403"""

    message: NotRequired[str]
    documentation_url: NotRequired[str]
    errors: NotRequired[List[str]]


class ProjectsColumnsCardsCardIdPatchBodyType(TypedDict):
    """ProjectsColumnsCardsCardIdPatchBody"""

    note: NotRequired[Union[str, None]]
    archived: NotRequired[bool]


class ProjectsColumnsCardsCardIdMovesPostBodyType(TypedDict):
    """ProjectsColumnsCardsCardIdMovesPostBody"""

    position: str
    column_id: NotRequired[int]


class ProjectsColumnsCardsCardIdMovesPostResponse201Type(TypedDict):
    """ProjectsColumnsCardsCardIdMovesPostResponse201"""


class ProjectsColumnsCardsCardIdMovesPostResponse403Type(TypedDict):
    """ProjectsColumnsCardsCardIdMovesPostResponse403"""

    message: NotRequired[str]
    documentation_url: NotRequired[str]
    errors: NotRequired[
        List[ProjectsColumnsCardsCardIdMovesPostResponse403PropErrorsItemsType]
    ]


class ProjectsColumnsCardsCardIdMovesPostResponse403PropErrorsItemsType(TypedDict):
    """ProjectsColumnsCardsCardIdMovesPostResponse403PropErrorsItems"""

    code: NotRequired[str]
    message: NotRequired[str]
    resource: NotRequired[str]
    field: NotRequired[str]


class ProjectsColumnsCardsCardIdMovesPostResponse503Type(TypedDict):
    """ProjectsColumnsCardsCardIdMovesPostResponse503"""

    code: NotRequired[str]
    message: NotRequired[str]
    documentation_url: NotRequired[str]
    errors: NotRequired[
        List[ProjectsColumnsCardsCardIdMovesPostResponse503PropErrorsItemsType]
    ]


class ProjectsColumnsCardsCardIdMovesPostResponse503PropErrorsItemsType(TypedDict):
    """ProjectsColumnsCardsCardIdMovesPostResponse503PropErrorsItems"""

    code: NotRequired[str]
    message: NotRequired[str]


class ProjectsColumnsColumnIdPatchBodyType(TypedDict):
    """ProjectsColumnsColumnIdPatchBody"""

    name: str


class ProjectsColumnsColumnIdCardsPostBodyOneof0Type(TypedDict):
    """ProjectsColumnsColumnIdCardsPostBodyOneof0"""

    note: Union[str, None]


class ProjectsColumnsColumnIdCardsPostBodyOneof1Type(TypedDict):
    """ProjectsColumnsColumnIdCardsPostBodyOneof1"""

    content_id: int
    content_type: str


class ProjectsColumnsColumnIdCardsPostResponse503Type(TypedDict):
    """ProjectsColumnsColumnIdCardsPostResponse503"""

    code: NotRequired[str]
    message: NotRequired[str]
    documentation_url: NotRequired[str]
    errors: NotRequired[
        List[ProjectsColumnsColumnIdCardsPostResponse503PropErrorsItemsType]
    ]


class ProjectsColumnsColumnIdCardsPostResponse503PropErrorsItemsType(TypedDict):
    """ProjectsColumnsColumnIdCardsPostResponse503PropErrorsItems"""

    code: NotRequired[str]
    message: NotRequired[str]


class ProjectsColumnsColumnIdMovesPostBodyType(TypedDict):
    """ProjectsColumnsColumnIdMovesPostBody"""

    position: str


class ProjectsColumnsColumnIdMovesPostResponse201Type(TypedDict):
    """ProjectsColumnsColumnIdMovesPostResponse201"""


class ProjectsProjectIdDeleteResponse403Type(TypedDict):
    """ProjectsProjectIdDeleteResponse403"""

    message: NotRequired[str]
    documentation_url: NotRequired[str]
    errors: NotRequired[List[str]]


class ProjectsProjectIdPatchBodyType(TypedDict):
    """ProjectsProjectIdPatchBody"""

    name: NotRequired[str]
    body: NotRequired[Union[str, None]]
    state: NotRequired[str]
    organization_permission: NotRequired[Literal["read", "write", "admin", "none"]]
    private: NotRequired[bool]


class ProjectsProjectIdPatchResponse403Type(TypedDict):
    """ProjectsProjectIdPatchResponse403"""

    message: NotRequired[str]
    documentation_url: NotRequired[str]
    errors: NotRequired[List[str]]


class ProjectsProjectIdCollaboratorsUsernamePutBodyType(TypedDict):
    """ProjectsProjectIdCollaboratorsUsernamePutBody"""

    permission: NotRequired[Literal["read", "write", "admin"]]


class ProjectsProjectIdColumnsPostBodyType(TypedDict):
    """ProjectsProjectIdColumnsPostBody"""

    name: str


class ReposOrgRepoActionsRequiredWorkflowsGetResponse200Type(TypedDict):
    """ReposOrgRepoActionsRequiredWorkflowsGetResponse200"""

    total_count: int
    required_workflows: List[RepoRequiredWorkflowType]


class ReposOwnerRepoDeleteResponse403Type(TypedDict):
    """ReposOwnerRepoDeleteResponse403"""

    message: NotRequired[str]
    documentation_url: NotRequired[str]


class ReposOwnerRepoPatchBodyType(TypedDict):
    """ReposOwnerRepoPatchBody"""

    name: NotRequired[str]
    description: NotRequired[str]
    homepage: NotRequired[str]
    private: NotRequired[bool]
    visibility: NotRequired[Literal["public", "private"]]
    security_and_analysis: NotRequired[
        Union[ReposOwnerRepoPatchBodyPropSecurityAndAnalysisType, None]
    ]
    has_issues: NotRequired[bool]
    has_projects: NotRequired[bool]
    has_wiki: NotRequired[bool]
    is_template: NotRequired[bool]
    default_branch: NotRequired[str]
    allow_squash_merge: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_auto_merge: NotRequired[bool]
    delete_branch_on_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    use_squash_pr_title_as_default: NotRequired[bool]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    archived: NotRequired[bool]
    allow_forking: NotRequired[bool]
    web_commit_signoff_required: NotRequired[bool]


class ReposOwnerRepoPatchBodyPropSecurityAndAnalysisPropAdvancedSecurityType(TypedDict):
    """ReposOwnerRepoPatchBodyPropSecurityAndAnalysisPropAdvancedSecurity

    Use the `status` property to enable or disable GitHub Advanced Security for this
    repository. For more information, see "[About GitHub Advanced
    Security](/github/getting-started-with-github/learning-about-github/about-
    github-advanced-security)."
    """

    status: NotRequired[str]


class ReposOwnerRepoPatchBodyPropSecurityAndAnalysisPropSecretScanningType(TypedDict):
    """ReposOwnerRepoPatchBodyPropSecurityAndAnalysisPropSecretScanning

    Use the `status` property to enable or disable secret scanning for this
    repository. For more information, see "[About secret scanning](/code-
    security/secret-security/about-secret-scanning)."
    """

    status: NotRequired[str]


class ReposOwnerRepoPatchBodyPropSecurityAndAnalysisPropSecretScanningPushProtectionType(
    TypedDict
):
    """ReposOwnerRepoPatchBodyPropSecurityAndAnalysisPropSecretScanningPushProtection

    Use the `status` property to enable or disable secret scanning push protection
    for this repository. For more information, see "[Protecting pushes with secret
    scanning](/code-security/secret-scanning/protecting-pushes-with-secret-
    scanning)."
    """

    status: NotRequired[str]


class ReposOwnerRepoPatchBodyPropSecurityAndAnalysisType(TypedDict):
    """ReposOwnerRepoPatchBodyPropSecurityAndAnalysis

    Specify which security and analysis features to enable or disable for the
    repository.

    To use this parameter, you must have admin permissions for the repository or be
    an owner or security manager for the organization that owns the repository. For
    more information, see "[Managing security managers in your
    organization](https://docs.github.com/organizations/managing-peoples-access-to-
    your-organization-with-roles/managing-security-managers-in-your-organization)."

    For example, to enable GitHub Advanced Security, use this data in the body of
    the `PATCH` request:
    `{ "security_and_analysis": {"advanced_security": { "status": "enabled" } } }`.

    You can check which security and analysis features are currently enabled by
    using a `GET /repos/{owner}/{repo}` request.
    """

    advanced_security: NotRequired[
        ReposOwnerRepoPatchBodyPropSecurityAndAnalysisPropAdvancedSecurityType
    ]
    secret_scanning: NotRequired[
        ReposOwnerRepoPatchBodyPropSecurityAndAnalysisPropSecretScanningType
    ]
    secret_scanning_push_protection: NotRequired[
        ReposOwnerRepoPatchBodyPropSecurityAndAnalysisPropSecretScanningPushProtectionType
    ]


class ReposOwnerRepoActionsArtifactsGetResponse200Type(TypedDict):
    """ReposOwnerRepoActionsArtifactsGetResponse200"""

    total_count: int
    artifacts: List[ArtifactType]


class ReposOwnerRepoActionsJobsJobIdRerunPostBodyType(TypedDict):
    """ReposOwnerRepoActionsJobsJobIdRerunPostBody"""

    enable_debug_logging: NotRequired[bool]


class ReposOwnerRepoActionsOidcCustomizationSubPutBodyType(TypedDict):
    """Actions OIDC subject customization for a repository

    Actions OIDC subject customization for a repository
    """

    use_default: bool
    include_claim_keys: NotRequired[List[str]]


class ReposOwnerRepoActionsOrganizationSecretsGetResponse200Type(TypedDict):
    """ReposOwnerRepoActionsOrganizationSecretsGetResponse200"""

    total_count: int
    secrets: List[ActionsSecretType]


class ReposOwnerRepoActionsOrganizationVariablesGetResponse200Type(TypedDict):
    """ReposOwnerRepoActionsOrganizationVariablesGetResponse200"""

    total_count: int
    variables: List[ActionsVariableType]


class ReposOwnerRepoActionsPermissionsPutBodyType(TypedDict):
    """ReposOwnerRepoActionsPermissionsPutBody"""

    enabled: bool
    allowed_actions: NotRequired[Literal["all", "local_only", "selected"]]


class ReposOwnerRepoActionsRequiredWorkflowsRequiredWorkflowIdForRepoRunsGetResponse200Type(
    TypedDict
):
    """ReposOwnerRepoActionsRequiredWorkflowsRequiredWorkflowIdForRepoRunsGetResponse20
    0
    """

    total_count: int
    workflow_runs: List[WorkflowRunType]


class ReposOwnerRepoActionsRunnersGetResponse200Type(TypedDict):
    """ReposOwnerRepoActionsRunnersGetResponse200"""

    total_count: int
    runners: List[RunnerType]


class ReposOwnerRepoActionsRunnersRunnerIdLabelsPutBodyType(TypedDict):
    """ReposOwnerRepoActionsRunnersRunnerIdLabelsPutBody"""

    labels: List[str]


class ReposOwnerRepoActionsRunnersRunnerIdLabelsPostBodyType(TypedDict):
    """ReposOwnerRepoActionsRunnersRunnerIdLabelsPostBody"""

    labels: List[str]


class ReposOwnerRepoActionsRunsGetResponse200Type(TypedDict):
    """ReposOwnerRepoActionsRunsGetResponse200"""

    total_count: int
    workflow_runs: List[WorkflowRunType]


class ReposOwnerRepoActionsRunsRunIdArtifactsGetResponse200Type(TypedDict):
    """ReposOwnerRepoActionsRunsRunIdArtifactsGetResponse200"""

    total_count: int
    artifacts: List[ArtifactType]


class ReposOwnerRepoActionsRunsRunIdAttemptsAttemptNumberJobsGetResponse200Type(
    TypedDict
):
    """ReposOwnerRepoActionsRunsRunIdAttemptsAttemptNumberJobsGetResponse200"""

    total_count: int
    jobs: List[JobType]


class ReposOwnerRepoActionsRunsRunIdJobsGetResponse200Type(TypedDict):
    """ReposOwnerRepoActionsRunsRunIdJobsGetResponse200"""

    total_count: int
    jobs: List[JobType]


class ReposOwnerRepoActionsRunsRunIdPendingDeploymentsPostBodyType(TypedDict):
    """ReposOwnerRepoActionsRunsRunIdPendingDeploymentsPostBody"""

    environment_ids: List[int]
    state: Literal["approved", "rejected"]
    comment: str


class ReposOwnerRepoActionsRunsRunIdRerunPostBodyType(TypedDict):
    """ReposOwnerRepoActionsRunsRunIdRerunPostBody"""

    enable_debug_logging: NotRequired[bool]


class ReposOwnerRepoActionsRunsRunIdRerunFailedJobsPostBodyType(TypedDict):
    """ReposOwnerRepoActionsRunsRunIdRerunFailedJobsPostBody"""

    enable_debug_logging: NotRequired[bool]


class ReposOwnerRepoActionsSecretsGetResponse200Type(TypedDict):
    """ReposOwnerRepoActionsSecretsGetResponse200"""

    total_count: int
    secrets: List[ActionsSecretType]


class ReposOwnerRepoActionsSecretsSecretNamePutBodyType(TypedDict):
    """ReposOwnerRepoActionsSecretsSecretNamePutBody"""

    encrypted_value: NotRequired[str]
    key_id: NotRequired[str]


class ReposOwnerRepoActionsVariablesGetResponse200Type(TypedDict):
    """ReposOwnerRepoActionsVariablesGetResponse200"""

    total_count: int
    variables: List[ActionsVariableType]


class ReposOwnerRepoActionsVariablesPostBodyType(TypedDict):
    """ReposOwnerRepoActionsVariablesPostBody"""

    name: str
    value: str


class ReposOwnerRepoActionsVariablesNamePatchBodyType(TypedDict):
    """ReposOwnerRepoActionsVariablesNamePatchBody"""

    name: NotRequired[str]
    value: NotRequired[str]


class ReposOwnerRepoActionsWorkflowsGetResponse200Type(TypedDict):
    """ReposOwnerRepoActionsWorkflowsGetResponse200"""

    total_count: int
    workflows: List[WorkflowType]


class ReposOwnerRepoActionsWorkflowsWorkflowIdDispatchesPostBodyType(TypedDict):
    """ReposOwnerRepoActionsWorkflowsWorkflowIdDispatchesPostBody"""

    ref: str
    inputs: NotRequired[
        ReposOwnerRepoActionsWorkflowsWorkflowIdDispatchesPostBodyPropInputsType
    ]


class ReposOwnerRepoActionsWorkflowsWorkflowIdDispatchesPostBodyPropInputsType(
    TypedDict
):
    """ReposOwnerRepoActionsWorkflowsWorkflowIdDispatchesPostBodyPropInputs

    Input keys and values configured in the workflow file. The maximum number of
    properties is 10. Any default properties configured in the workflow file will be
    used when `inputs` are omitted.
    """


class ReposOwnerRepoActionsWorkflowsWorkflowIdRunsGetResponse200Type(TypedDict):
    """ReposOwnerRepoActionsWorkflowsWorkflowIdRunsGetResponse200"""

    total_count: int
    workflow_runs: List[WorkflowRunType]


class ReposOwnerRepoAutolinksPostBodyType(TypedDict):
    """ReposOwnerRepoAutolinksPostBody"""

    key_prefix: str
    url_template: str
    is_alphanumeric: NotRequired[bool]


class ReposOwnerRepoBranchesBranchProtectionPutBodyType(TypedDict):
    """ReposOwnerRepoBranchesBranchProtectionPutBody"""

    required_status_checks: Union[
        ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredStatusChecksType, None
    ]
    enforce_admins: Union[bool, None]
    required_pull_request_reviews: Union[
        ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredPullRequestReviewsType,
        None,
    ]
    restrictions: Union[
        ReposOwnerRepoBranchesBranchProtectionPutBodyPropRestrictionsType, None
    ]
    required_linear_history: NotRequired[bool]
    allow_force_pushes: NotRequired[Union[bool, None]]
    allow_deletions: NotRequired[bool]
    block_creations: NotRequired[bool]
    required_conversation_resolution: NotRequired[bool]
    lock_branch: NotRequired[bool]
    allow_fork_syncing: NotRequired[bool]


class ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredStatusChecksPropChecksItemsType(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredStatusChecksPropChecksI
    tems
    """

    context: str
    app_id: NotRequired[int]


class ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredStatusChecksType(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredStatusChecks

    Require status checks to pass before merging. Set to `null` to disable.
    """

    strict: bool
    contexts: List[str]
    checks: NotRequired[
        List[
            ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredStatusChecksPropChecksItemsType
        ]
    ]


class ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredPullRequestReviewsPropDismissalRestrictionsType(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredPullRequestReviewsPropD
    ismissalRestrictions

    Specify which users, teams, and apps can dismiss pull request reviews. Pass an
    empty `dismissal_restrictions` object to disable. User and team
    `dismissal_restrictions` are only available for organization-owned repositories.
    Omit this parameter for personal repositories.
    """

    users: NotRequired[List[str]]
    teams: NotRequired[List[str]]
    apps: NotRequired[List[str]]


class ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredPullRequestReviewsPropBypassPullRequestAllowancesType(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredPullRequestReviewsPropB
    ypassPullRequestAllowances

    Allow specific users, teams, or apps to bypass pull request requirements.
    """

    users: NotRequired[List[str]]
    teams: NotRequired[List[str]]
    apps: NotRequired[List[str]]


class ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredPullRequestReviewsType(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredPullRequestReviews

    Require at least one approving review on a pull request, before merging. Set to
    `null` to disable.
    """

    dismissal_restrictions: NotRequired[
        ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredPullRequestReviewsPropDismissalRestrictionsType
    ]
    dismiss_stale_reviews: NotRequired[bool]
    require_code_owner_reviews: NotRequired[bool]
    required_approving_review_count: NotRequired[int]
    require_last_push_approval: NotRequired[bool]
    bypass_pull_request_allowances: NotRequired[
        ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredPullRequestReviewsPropBypassPullRequestAllowancesType
    ]


class ReposOwnerRepoBranchesBranchProtectionPutBodyPropRestrictionsType(TypedDict):
    """ReposOwnerRepoBranchesBranchProtectionPutBodyPropRestrictions

    Restrict who can push to the protected branch. User, app, and team
    `restrictions` are only available for organization-owned repositories. Set to
    `null` to disable.
    """

    users: List[str]
    teams: List[str]
    apps: NotRequired[List[str]]


class ReposOwnerRepoBranchesBranchProtectionRequiredPullRequestReviewsPatchBodyType(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionRequiredPullRequestReviewsPatchBody"""

    dismissal_restrictions: NotRequired[
        ReposOwnerRepoBranchesBranchProtectionRequiredPullRequestReviewsPatchBodyPropDismissalRestrictionsType
    ]
    dismiss_stale_reviews: NotRequired[bool]
    require_code_owner_reviews: NotRequired[bool]
    required_approving_review_count: NotRequired[int]
    require_last_push_approval: NotRequired[bool]
    bypass_pull_request_allowances: NotRequired[
        ReposOwnerRepoBranchesBranchProtectionRequiredPullRequestReviewsPatchBodyPropBypassPullRequestAllowancesType
    ]


class ReposOwnerRepoBranchesBranchProtectionRequiredPullRequestReviewsPatchBodyPropDismissalRestrictionsType(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionRequiredPullRequestReviewsPatchBodyPropDis
    missalRestrictions

    Specify which users, teams, and apps can dismiss pull request reviews. Pass an
    empty `dismissal_restrictions` object to disable. User and team
    `dismissal_restrictions` are only available for organization-owned repositories.
    Omit this parameter for personal repositories.
    """

    users: NotRequired[List[str]]
    teams: NotRequired[List[str]]
    apps: NotRequired[List[str]]


class ReposOwnerRepoBranchesBranchProtectionRequiredPullRequestReviewsPatchBodyPropBypassPullRequestAllowancesType(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionRequiredPullRequestReviewsPatchBodyPropByp
    assPullRequestAllowances

    Allow specific users, teams, or apps to bypass pull request requirements.
    """

    users: NotRequired[List[str]]
    teams: NotRequired[List[str]]
    apps: NotRequired[List[str]]


class ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksPatchBodyType(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksPatchBody"""

    strict: NotRequired[bool]
    contexts: NotRequired[List[str]]
    checks: NotRequired[
        List[
            ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksPatchBodyPropChecksItemsType
        ]
    ]


class ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksPatchBodyPropChecksItemsType(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksPatchBodyPropChecksIte
    ms
    """

    context: str
    app_id: NotRequired[int]


class ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsPutBodyOneof0Type(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsPutBodyOneof0

    Examples:
        {'contexts': ['contexts']}
    """

    contexts: List[str]


class ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsPostBodyOneof0Type(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsPostBodyOneof0

    Examples:
        {'contexts': ['contexts']}
    """

    contexts: List[str]


class ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsDeleteBodyOneof0Type(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsDeleteBodyOneo
    f0

    Examples:
        {'contexts': ['contexts']}
    """

    contexts: List[str]


class ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsPutBodyOneof0Type(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsPutBodyOneof0

    Examples:
        {'apps': ['my-app']}
    """

    apps: List[str]


class ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsPostBodyOneof0Type(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsPostBodyOneof0

    Examples:
        {'apps': ['my-app']}
    """

    apps: List[str]


class ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsDeleteBodyOneof0Type(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsDeleteBodyOneof0

    Examples:
        {'apps': ['my-app']}
    """

    apps: List[str]


class ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsPutBodyOneof0Type(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsPutBodyOneof0

    Examples:
        {'teams': ['justice-league']}
    """

    teams: List[str]


class ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsPostBodyOneof0Type(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsPostBodyOneof0

    Examples:
        {'teams': ['my-team']}
    """

    teams: List[str]


class ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsDeleteBodyOneof0Type(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsDeleteBodyOneof0

    Examples:
        {'teams': ['my-team']}
    """

    teams: List[str]


class ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersPutBodyOneof0Type(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersPutBodyOneof0

    Examples:
        {'users': ['mona']}
    """

    users: List[str]


class ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersPostBodyOneof0Type(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersPostBodyOneof0

    Examples:
        {'users': ['mona']}
    """

    users: List[str]


class ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersDeleteBodyOneof0Type(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersDeleteBodyOneof0

    Examples:
        {'users': ['mona']}
    """

    users: List[str]


class ReposOwnerRepoBranchesBranchRenamePostBodyType(TypedDict):
    """ReposOwnerRepoBranchesBranchRenamePostBody"""

    new_name: str


class ReposOwnerRepoCheckRunsPostBodyPropOutputType(TypedDict):
    """ReposOwnerRepoCheckRunsPostBodyPropOutput

    Check runs can accept a variety of data in the `output` object, including a
    `title` and `summary` and can optionally provide descriptive details about the
    run.
    """

    title: str
    summary: str
    text: NotRequired[str]
    annotations: NotRequired[
        List[ReposOwnerRepoCheckRunsPostBodyPropOutputPropAnnotationsItemsType]
    ]
    images: NotRequired[
        List[ReposOwnerRepoCheckRunsPostBodyPropOutputPropImagesItemsType]
    ]


class ReposOwnerRepoCheckRunsPostBodyPropOutputPropAnnotationsItemsType(TypedDict):
    """ReposOwnerRepoCheckRunsPostBodyPropOutputPropAnnotationsItems"""

    path: str
    start_line: int
    end_line: int
    start_column: NotRequired[int]
    end_column: NotRequired[int]
    annotation_level: Literal["notice", "warning", "failure"]
    message: str
    title: NotRequired[str]
    raw_details: NotRequired[str]


class ReposOwnerRepoCheckRunsPostBodyPropOutputPropImagesItemsType(TypedDict):
    """ReposOwnerRepoCheckRunsPostBodyPropOutputPropImagesItems"""

    alt: str
    image_url: str
    caption: NotRequired[str]


class ReposOwnerRepoCheckRunsPostBodyPropActionsItemsType(TypedDict):
    """ReposOwnerRepoCheckRunsPostBodyPropActionsItems"""

    label: str
    description: str
    identifier: str


class ReposOwnerRepoCheckRunsPostBodyOneof0Type(TypedDict):
    """ReposOwnerRepoCheckRunsPostBodyOneof0"""

    name: str
    head_sha: str
    details_url: NotRequired[str]
    external_id: NotRequired[str]
    status: Literal["completed"]
    started_at: NotRequired[datetime]
    conclusion: Literal[
        "action_required",
        "cancelled",
        "failure",
        "neutral",
        "success",
        "skipped",
        "stale",
        "timed_out",
    ]
    completed_at: NotRequired[datetime]
    output: NotRequired[ReposOwnerRepoCheckRunsPostBodyPropOutputType]
    actions: NotRequired[List[ReposOwnerRepoCheckRunsPostBodyPropActionsItemsType]]


class ReposOwnerRepoCheckRunsPostBodyOneof1Type(TypedDict):
    """ReposOwnerRepoCheckRunsPostBodyOneof1"""

    name: str
    head_sha: str
    details_url: NotRequired[str]
    external_id: NotRequired[str]
    status: NotRequired[Literal["queued", "in_progress"]]
    started_at: NotRequired[datetime]
    conclusion: NotRequired[
        Literal[
            "action_required",
            "cancelled",
            "failure",
            "neutral",
            "success",
            "skipped",
            "stale",
            "timed_out",
        ]
    ]
    completed_at: NotRequired[datetime]
    output: NotRequired[ReposOwnerRepoCheckRunsPostBodyPropOutputType]
    actions: NotRequired[List[ReposOwnerRepoCheckRunsPostBodyPropActionsItemsType]]


class ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutputType(TypedDict):
    """ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutput

    Check runs can accept a variety of data in the `output` object, including a
    `title` and `summary` and can optionally provide descriptive details about the
    run.
    """

    title: NotRequired[str]
    summary: str
    text: NotRequired[str]
    annotations: NotRequired[
        List[
            ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutputPropAnnotationsItemsType
        ]
    ]
    images: NotRequired[
        List[ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutputPropImagesItemsType]
    ]


class ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutputPropAnnotationsItemsType(
    TypedDict
):
    """ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutputPropAnnotationsItems"""

    path: str
    start_line: int
    end_line: int
    start_column: NotRequired[int]
    end_column: NotRequired[int]
    annotation_level: Literal["notice", "warning", "failure"]
    message: str
    title: NotRequired[str]
    raw_details: NotRequired[str]


class ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutputPropImagesItemsType(
    TypedDict
):
    """ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutputPropImagesItems"""

    alt: str
    image_url: str
    caption: NotRequired[str]


class ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropActionsItemsType(TypedDict):
    """ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropActionsItems"""

    label: str
    description: str
    identifier: str


class ReposOwnerRepoCheckRunsCheckRunIdPatchBodyAnyof0Type(TypedDict):
    """ReposOwnerRepoCheckRunsCheckRunIdPatchBodyAnyof0"""

    name: NotRequired[str]
    details_url: NotRequired[str]
    external_id: NotRequired[str]
    started_at: NotRequired[datetime]
    status: NotRequired[Literal["completed"]]
    conclusion: Literal[
        "action_required",
        "cancelled",
        "failure",
        "neutral",
        "success",
        "skipped",
        "stale",
        "timed_out",
    ]
    completed_at: NotRequired[datetime]
    output: NotRequired[ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutputType]
    actions: NotRequired[
        List[ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropActionsItemsType]
    ]


class ReposOwnerRepoCheckRunsCheckRunIdPatchBodyAnyof1Type(TypedDict):
    """ReposOwnerRepoCheckRunsCheckRunIdPatchBodyAnyof1"""

    name: NotRequired[str]
    details_url: NotRequired[str]
    external_id: NotRequired[str]
    started_at: NotRequired[datetime]
    status: NotRequired[Literal["queued", "in_progress"]]
    conclusion: NotRequired[
        Literal[
            "action_required",
            "cancelled",
            "failure",
            "neutral",
            "success",
            "skipped",
            "stale",
            "timed_out",
        ]
    ]
    completed_at: NotRequired[datetime]
    output: NotRequired[ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutputType]
    actions: NotRequired[
        List[ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropActionsItemsType]
    ]


class ReposOwnerRepoCheckSuitesPostBodyType(TypedDict):
    """ReposOwnerRepoCheckSuitesPostBody"""

    head_sha: str


class ReposOwnerRepoCheckSuitesPreferencesPatchBodyType(TypedDict):
    """ReposOwnerRepoCheckSuitesPreferencesPatchBody"""

    auto_trigger_checks: NotRequired[
        List[
            ReposOwnerRepoCheckSuitesPreferencesPatchBodyPropAutoTriggerChecksItemsType
        ]
    ]


class ReposOwnerRepoCheckSuitesPreferencesPatchBodyPropAutoTriggerChecksItemsType(
    TypedDict
):
    """ReposOwnerRepoCheckSuitesPreferencesPatchBodyPropAutoTriggerChecksItems"""

    app_id: int
    setting: bool


class ReposOwnerRepoCheckSuitesCheckSuiteIdCheckRunsGetResponse200Type(TypedDict):
    """ReposOwnerRepoCheckSuitesCheckSuiteIdCheckRunsGetResponse200"""

    total_count: int
    check_runs: List[CheckRunType]


class ReposOwnerRepoCodeScanningAlertsAlertNumberPatchBodyType(TypedDict):
    """ReposOwnerRepoCodeScanningAlertsAlertNumberPatchBody"""

    state: Literal["open", "dismissed"]
    dismissed_reason: NotRequired[
        Union[None, Literal["false positive", "won't fix", "used in tests"]]
    ]
    dismissed_comment: NotRequired[Union[str, None]]


class ReposOwnerRepoCodeScanningSarifsPostBodyType(TypedDict):
    """ReposOwnerRepoCodeScanningSarifsPostBody"""

    commit_sha: str
    ref: str
    sarif: str
    checkout_uri: NotRequired[str]
    started_at: NotRequired[datetime]
    tool_name: NotRequired[str]
    validate_: NotRequired[bool]


class ReposOwnerRepoCodespacesGetResponse200Type(TypedDict):
    """ReposOwnerRepoCodespacesGetResponse200"""

    total_count: int
    codespaces: List[CodespaceType]


class ReposOwnerRepoCodespacesPostBodyType(TypedDict):
    """ReposOwnerRepoCodespacesPostBody"""

    ref: NotRequired[str]
    location: NotRequired[str]
    client_ip: NotRequired[str]
    machine: NotRequired[str]
    devcontainer_path: NotRequired[str]
    multi_repo_permissions_opt_out: NotRequired[bool]
    working_directory: NotRequired[str]
    idle_timeout_minutes: NotRequired[int]
    display_name: NotRequired[str]
    retention_period_minutes: NotRequired[int]


class ReposOwnerRepoCodespacesDevcontainersGetResponse200Type(TypedDict):
    """ReposOwnerRepoCodespacesDevcontainersGetResponse200"""

    total_count: int
    devcontainers: List[
        ReposOwnerRepoCodespacesDevcontainersGetResponse200PropDevcontainersItemsType
    ]


class ReposOwnerRepoCodespacesDevcontainersGetResponse200PropDevcontainersItemsType(
    TypedDict
):
    """ReposOwnerRepoCodespacesDevcontainersGetResponse200PropDevcontainersItems"""

    path: str
    name: NotRequired[str]
    display_name: NotRequired[str]


class ReposOwnerRepoCodespacesMachinesGetResponse200Type(TypedDict):
    """ReposOwnerRepoCodespacesMachinesGetResponse200"""

    total_count: int
    machines: List[CodespaceMachineType]


class ReposOwnerRepoCodespacesNewGetResponse200Type(TypedDict):
    """ReposOwnerRepoCodespacesNewGetResponse200"""

    billable_owner: NotRequired[SimpleUserType]
    defaults: NotRequired[ReposOwnerRepoCodespacesNewGetResponse200PropDefaultsType]


class ReposOwnerRepoCodespacesNewGetResponse200PropDefaultsType(TypedDict):
    """ReposOwnerRepoCodespacesNewGetResponse200PropDefaults"""

    location: str
    devcontainer_path: Union[str, None]


class ReposOwnerRepoCodespacesSecretsGetResponse200Type(TypedDict):
    """ReposOwnerRepoCodespacesSecretsGetResponse200"""

    total_count: int
    secrets: List[RepoCodespacesSecretType]


class ReposOwnerRepoCodespacesSecretsSecretNamePutBodyType(TypedDict):
    """ReposOwnerRepoCodespacesSecretsSecretNamePutBody"""

    encrypted_value: NotRequired[str]
    key_id: NotRequired[str]


class ReposOwnerRepoCollaboratorsUsernamePutBodyType(TypedDict):
    """ReposOwnerRepoCollaboratorsUsernamePutBody"""

    permission: NotRequired[str]


class ReposOwnerRepoCommentsCommentIdPatchBodyType(TypedDict):
    """ReposOwnerRepoCommentsCommentIdPatchBody"""

    body: str


class ReposOwnerRepoCommentsCommentIdReactionsPostBodyType(TypedDict):
    """ReposOwnerRepoCommentsCommentIdReactionsPostBody"""

    content: Literal[
        "+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"
    ]


class ReposOwnerRepoCommitsCommitShaCommentsPostBodyType(TypedDict):
    """ReposOwnerRepoCommitsCommitShaCommentsPostBody"""

    body: str
    path: NotRequired[str]
    position: NotRequired[int]
    line: NotRequired[int]


class ReposOwnerRepoCommitsRefCheckRunsGetResponse200Type(TypedDict):
    """ReposOwnerRepoCommitsRefCheckRunsGetResponse200"""

    total_count: int
    check_runs: List[CheckRunType]


class ReposOwnerRepoCommitsRefCheckSuitesGetResponse200Type(TypedDict):
    """ReposOwnerRepoCommitsRefCheckSuitesGetResponse200"""

    total_count: int
    check_suites: List[CheckSuiteType]


class ReposOwnerRepoContentsPathPutBodyType(TypedDict):
    """ReposOwnerRepoContentsPathPutBody"""

    message: str
    content: str
    sha: NotRequired[str]
    branch: NotRequired[str]
    committer: NotRequired[ReposOwnerRepoContentsPathPutBodyPropCommitterType]
    author: NotRequired[ReposOwnerRepoContentsPathPutBodyPropAuthorType]


class ReposOwnerRepoContentsPathPutBodyPropCommitterType(TypedDict):
    """ReposOwnerRepoContentsPathPutBodyPropCommitter

    The person that committed the file. Default: the authenticated user.
    """

    name: str
    email: str
    date: NotRequired[str]


class ReposOwnerRepoContentsPathPutBodyPropAuthorType(TypedDict):
    """ReposOwnerRepoContentsPathPutBodyPropAuthor

    The author of the file. Default: The `committer` or the authenticated user if
    you omit `committer`.
    """

    name: str
    email: str
    date: NotRequired[str]


class ReposOwnerRepoContentsPathDeleteBodyType(TypedDict):
    """ReposOwnerRepoContentsPathDeleteBody"""

    message: str
    sha: str
    branch: NotRequired[str]
    committer: NotRequired[ReposOwnerRepoContentsPathDeleteBodyPropCommitterType]
    author: NotRequired[ReposOwnerRepoContentsPathDeleteBodyPropAuthorType]


class ReposOwnerRepoContentsPathDeleteBodyPropCommitterType(TypedDict):
    """ReposOwnerRepoContentsPathDeleteBodyPropCommitter

    object containing information about the committer.
    """

    name: NotRequired[str]
    email: NotRequired[str]


class ReposOwnerRepoContentsPathDeleteBodyPropAuthorType(TypedDict):
    """ReposOwnerRepoContentsPathDeleteBodyPropAuthor

    object containing information about the author.
    """

    name: NotRequired[str]
    email: NotRequired[str]


class ReposOwnerRepoDependabotAlertsAlertNumberPatchBodyType(TypedDict):
    """ReposOwnerRepoDependabotAlertsAlertNumberPatchBody"""

    state: Literal["dismissed", "open"]
    dismissed_reason: NotRequired[
        Literal[
            "fix_started", "inaccurate", "no_bandwidth", "not_used", "tolerable_risk"
        ]
    ]
    dismissed_comment: NotRequired[str]


class ReposOwnerRepoDependabotSecretsGetResponse200Type(TypedDict):
    """ReposOwnerRepoDependabotSecretsGetResponse200"""

    total_count: int
    secrets: List[DependabotSecretType]


class ReposOwnerRepoDependabotSecretsSecretNamePutBodyType(TypedDict):
    """ReposOwnerRepoDependabotSecretsSecretNamePutBody"""

    encrypted_value: NotRequired[str]
    key_id: NotRequired[str]


class ReposOwnerRepoDependencyGraphSnapshotsPostResponse201Type(TypedDict):
    """ReposOwnerRepoDependencyGraphSnapshotsPostResponse201"""

    id: int
    created_at: str
    result: str
    message: str


class ReposOwnerRepoDeploymentsPostBodyType(TypedDict):
    """ReposOwnerRepoDeploymentsPostBody"""

    ref: str
    task: NotRequired[str]
    auto_merge: NotRequired[bool]
    required_contexts: NotRequired[List[str]]
    payload: NotRequired[
        Union[ReposOwnerRepoDeploymentsPostBodyPropPayloadOneof0Type, str]
    ]
    environment: NotRequired[str]
    description: NotRequired[Union[str, None]]
    transient_environment: NotRequired[bool]
    production_environment: NotRequired[bool]


class ReposOwnerRepoDeploymentsPostBodyPropPayloadOneof0Type(TypedDict):
    """ReposOwnerRepoDeploymentsPostBodyPropPayloadOneof0"""


class ReposOwnerRepoDeploymentsPostResponse202Type(TypedDict):
    """ReposOwnerRepoDeploymentsPostResponse202"""

    message: NotRequired[str]


class ReposOwnerRepoDeploymentsDeploymentIdStatusesPostBodyType(TypedDict):
    """ReposOwnerRepoDeploymentsDeploymentIdStatusesPostBody"""

    state: Literal[
        "error", "failure", "inactive", "in_progress", "queued", "pending", "success"
    ]
    target_url: NotRequired[str]
    log_url: NotRequired[str]
    description: NotRequired[str]
    environment: NotRequired[Literal["production", "staging", "qa"]]
    environment_url: NotRequired[str]
    auto_inactive: NotRequired[bool]


class ReposOwnerRepoDispatchesPostBodyType(TypedDict):
    """ReposOwnerRepoDispatchesPostBody"""

    event_type: str
    client_payload: NotRequired[ReposOwnerRepoDispatchesPostBodyPropClientPayloadType]


class ReposOwnerRepoDispatchesPostBodyPropClientPayloadType(TypedDict):
    """ReposOwnerRepoDispatchesPostBodyPropClientPayload

    JSON payload with extra information about the webhook event that your action or
    workflow may use. The maximum number of top-level properties is 10.
    """


class ReposOwnerRepoEnvironmentsGetResponse200Type(TypedDict):
    """ReposOwnerRepoEnvironmentsGetResponse200"""

    total_count: NotRequired[int]
    environments: NotRequired[List[EnvironmentType]]


class ReposOwnerRepoEnvironmentsEnvironmentNamePutBodyPropReviewersItemsType(TypedDict):
    """ReposOwnerRepoEnvironmentsEnvironmentNamePutBodyPropReviewersItems"""

    type: NotRequired[Literal["User", "Team"]]
    id: NotRequired[int]


class ReposOwnerRepoEnvironmentsEnvironmentNamePutBodyType(TypedDict):
    """ReposOwnerRepoEnvironmentsEnvironmentNamePutBody"""

    wait_timer: NotRequired[int]
    reviewers: NotRequired[
        Union[
            List[
                ReposOwnerRepoEnvironmentsEnvironmentNamePutBodyPropReviewersItemsType
            ],
            None,
        ]
    ]
    deployment_branch_policy: NotRequired[
        Union[DeploymentBranchPolicySettingsType, None]
    ]


class ReposOwnerRepoEnvironmentsEnvironmentNameDeploymentBranchPoliciesGetResponse200Type(
    TypedDict
):
    """ReposOwnerRepoEnvironmentsEnvironmentNameDeploymentBranchPoliciesGetResponse200"""

    total_count: int
    branch_policies: List[DeploymentBranchPolicyType]


class ReposOwnerRepoEnvironmentsEnvironmentNameDeploymentProtectionRulesGetResponse200Type(
    TypedDict
):
    """ReposOwnerRepoEnvironmentsEnvironmentNameDeploymentProtectionRulesGetResponse200

    Examples:
        ../../components/examples/deployment_protection_rules.yaml
    """

    total_count: NotRequired[int]
    custom_deployment_protection_rules: NotRequired[List[DeploymentProtectionRuleType]]


class ReposOwnerRepoEnvironmentsEnvironmentNameDeploymentProtectionRulesPostBodyType(
    TypedDict
):
    """ReposOwnerRepoEnvironmentsEnvironmentNameDeploymentProtectionRulesPostBody"""

    integration_id: NotRequired[int]


class ReposOwnerRepoEnvironmentsEnvironmentNameDeploymentProtectionRulesAppsGetResponse200Type(
    TypedDict
):
    """ReposOwnerRepoEnvironmentsEnvironmentNameDeploymentProtectionRulesAppsGetRespons
    e200
    """

    total_count: NotRequired[int]
    available_custom_deployment_protection_rule_integrations: NotRequired[
        List[CustomDeploymentRuleAppType]
    ]


class ReposOwnerRepoForksPostBodyType(TypedDict):
    """ReposOwnerRepoForksPostBody"""

    organization: NotRequired[str]
    name: NotRequired[str]
    default_branch_only: NotRequired[bool]


class ReposOwnerRepoGitBlobsPostBodyType(TypedDict):
    """ReposOwnerRepoGitBlobsPostBody"""

    content: str
    encoding: NotRequired[str]


class ReposOwnerRepoGitCommitsPostBodyType(TypedDict):
    """ReposOwnerRepoGitCommitsPostBody"""

    message: str
    tree: str
    parents: NotRequired[List[str]]
    author: NotRequired[ReposOwnerRepoGitCommitsPostBodyPropAuthorType]
    committer: NotRequired[ReposOwnerRepoGitCommitsPostBodyPropCommitterType]
    signature: NotRequired[str]


class ReposOwnerRepoGitCommitsPostBodyPropAuthorType(TypedDict):
    """ReposOwnerRepoGitCommitsPostBodyPropAuthor

    Information about the author of the commit. By default, the `author` will be the
    authenticated user and the current date. See the `author` and `committer` object
    below for details.
    """

    name: str
    email: str
    date: NotRequired[datetime]


class ReposOwnerRepoGitCommitsPostBodyPropCommitterType(TypedDict):
    """ReposOwnerRepoGitCommitsPostBodyPropCommitter

    Information about the person who is making the commit. By default, `committer`
    will use the information set in `author`. See the `author` and `committer`
    object below for details.
    """

    name: NotRequired[str]
    email: NotRequired[str]
    date: NotRequired[datetime]


class ReposOwnerRepoGitRefsPostBodyType(TypedDict):
    """ReposOwnerRepoGitRefsPostBody"""

    ref: str
    sha: str
    key: NotRequired[str]


class ReposOwnerRepoGitRefsRefPatchBodyType(TypedDict):
    """ReposOwnerRepoGitRefsRefPatchBody"""

    sha: str
    force: NotRequired[bool]


class ReposOwnerRepoGitTagsPostBodyType(TypedDict):
    """ReposOwnerRepoGitTagsPostBody"""

    tag: str
    message: str
    object_: str
    type: Literal["commit", "tree", "blob"]
    tagger: NotRequired[ReposOwnerRepoGitTagsPostBodyPropTaggerType]


class ReposOwnerRepoGitTagsPostBodyPropTaggerType(TypedDict):
    """ReposOwnerRepoGitTagsPostBodyPropTagger

    An object with information about the individual creating the tag.
    """

    name: str
    email: str
    date: NotRequired[datetime]


class ReposOwnerRepoGitTreesPostBodyType(TypedDict):
    """ReposOwnerRepoGitTreesPostBody"""

    tree: List[ReposOwnerRepoGitTreesPostBodyPropTreeItemsType]
    base_tree: NotRequired[str]


class ReposOwnerRepoGitTreesPostBodyPropTreeItemsType(TypedDict):
    """ReposOwnerRepoGitTreesPostBodyPropTreeItems"""

    path: NotRequired[str]
    mode: NotRequired[Literal["100644", "100755", "040000", "160000", "120000"]]
    type: NotRequired[Literal["blob", "tree", "commit"]]
    sha: NotRequired[Union[str, None]]
    content: NotRequired[str]


class ReposOwnerRepoHooksPostBodyPropConfigType(TypedDict):
    """ReposOwnerRepoHooksPostBodyPropConfig

    Key/value pairs to provide settings for this webhook. [These are defined
    below](https://docs.github.com/rest/reference/repos#create-hook-config-params).
    """

    url: NotRequired[str]
    content_type: NotRequired[str]
    secret: NotRequired[str]
    insecure_ssl: NotRequired[Union[str, float]]
    token: NotRequired[str]
    digest: NotRequired[str]


class ReposOwnerRepoHooksPostBodyType(TypedDict):
    """ReposOwnerRepoHooksPostBody"""

    name: NotRequired[str]
    config: NotRequired[ReposOwnerRepoHooksPostBodyPropConfigType]
    events: NotRequired[List[str]]
    active: NotRequired[bool]


class ReposOwnerRepoHooksHookIdPatchBodyType(TypedDict):
    """ReposOwnerRepoHooksHookIdPatchBody"""

    config: NotRequired[ReposOwnerRepoHooksHookIdPatchBodyPropConfigType]
    events: NotRequired[List[str]]
    add_events: NotRequired[List[str]]
    remove_events: NotRequired[List[str]]
    active: NotRequired[bool]


class ReposOwnerRepoHooksHookIdPatchBodyPropConfigType(TypedDict):
    """ReposOwnerRepoHooksHookIdPatchBodyPropConfig

    Key/value pairs to provide settings for this webhook. [These are defined
    below](https://docs.github.com/rest/reference/repos#create-hook-config-params).
    """

    url: str
    content_type: NotRequired[str]
    secret: NotRequired[str]
    insecure_ssl: NotRequired[Union[str, float]]
    address: NotRequired[str]
    room: NotRequired[str]


class ReposOwnerRepoHooksHookIdConfigPatchBodyType(TypedDict):
    """ReposOwnerRepoHooksHookIdConfigPatchBody"""

    url: NotRequired[str]
    content_type: NotRequired[str]
    secret: NotRequired[str]
    insecure_ssl: NotRequired[Union[str, float]]


class ReposOwnerRepoImportPutBodyType(TypedDict):
    """ReposOwnerRepoImportPutBody"""

    vcs_url: str
    vcs: NotRequired[Literal["subversion", "git", "mercurial", "tfvc"]]
    vcs_username: NotRequired[str]
    vcs_password: NotRequired[str]
    tfvc_project: NotRequired[str]


class ReposOwnerRepoImportPatchBodyType(TypedDict):
    """ReposOwnerRepoImportPatchBody"""

    vcs_username: NotRequired[str]
    vcs_password: NotRequired[str]
    vcs: NotRequired[Literal["subversion", "tfvc", "git", "mercurial"]]
    tfvc_project: NotRequired[str]


class ReposOwnerRepoImportAuthorsAuthorIdPatchBodyType(TypedDict):
    """ReposOwnerRepoImportAuthorsAuthorIdPatchBody"""

    email: NotRequired[str]
    name: NotRequired[str]


class ReposOwnerRepoImportLfsPatchBodyType(TypedDict):
    """ReposOwnerRepoImportLfsPatchBody"""

    use_lfs: Literal["opt_in", "opt_out"]


class ReposOwnerRepoInteractionLimitsGetResponse200Anyof1Type(TypedDict):
    """ReposOwnerRepoInteractionLimitsGetResponse200Anyof1"""


class ReposOwnerRepoInvitationsInvitationIdPatchBodyType(TypedDict):
    """ReposOwnerRepoInvitationsInvitationIdPatchBody"""

    permissions: NotRequired[Literal["read", "write", "maintain", "triage", "admin"]]


class ReposOwnerRepoIssuesPostBodyType(TypedDict):
    """ReposOwnerRepoIssuesPostBody"""

    title: Union[str, int]
    body: NotRequired[str]
    assignee: NotRequired[Union[str, None]]
    milestone: NotRequired[Union[str, int, None]]
    labels: NotRequired[
        List[Union[str, ReposOwnerRepoIssuesPostBodyPropLabelsItemsOneof1Type]]
    ]
    assignees: NotRequired[List[str]]


class ReposOwnerRepoIssuesPostBodyPropLabelsItemsOneof1Type(TypedDict):
    """ReposOwnerRepoIssuesPostBodyPropLabelsItemsOneof1"""

    id: NotRequired[int]
    name: NotRequired[str]
    description: NotRequired[Union[str, None]]
    color: NotRequired[Union[str, None]]


class ReposOwnerRepoIssuesCommentsCommentIdPatchBodyType(TypedDict):
    """ReposOwnerRepoIssuesCommentsCommentIdPatchBody"""

    body: str


class ReposOwnerRepoIssuesCommentsCommentIdReactionsPostBodyType(TypedDict):
    """ReposOwnerRepoIssuesCommentsCommentIdReactionsPostBody"""

    content: Literal[
        "+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"
    ]


class ReposOwnerRepoIssuesIssueNumberPatchBodyType(TypedDict):
    """ReposOwnerRepoIssuesIssueNumberPatchBody"""

    title: NotRequired[Union[str, int, None]]
    body: NotRequired[Union[str, None]]
    assignee: NotRequired[Union[str, None]]
    state: NotRequired[Literal["open", "closed"]]
    state_reason: NotRequired[
        Union[None, Literal["completed", "not_planned", "reopened"]]
    ]
    milestone: NotRequired[Union[str, int, None]]
    labels: NotRequired[
        List[
            Union[
                str, ReposOwnerRepoIssuesIssueNumberPatchBodyPropLabelsItemsOneof1Type
            ]
        ]
    ]
    assignees: NotRequired[List[str]]


class ReposOwnerRepoIssuesIssueNumberPatchBodyPropLabelsItemsOneof1Type(TypedDict):
    """ReposOwnerRepoIssuesIssueNumberPatchBodyPropLabelsItemsOneof1"""

    id: NotRequired[int]
    name: NotRequired[str]
    description: NotRequired[Union[str, None]]
    color: NotRequired[Union[str, None]]


class ReposOwnerRepoIssuesIssueNumberAssigneesPostBodyType(TypedDict):
    """ReposOwnerRepoIssuesIssueNumberAssigneesPostBody"""

    assignees: NotRequired[List[str]]


class ReposOwnerRepoIssuesIssueNumberAssigneesDeleteBodyType(TypedDict):
    """ReposOwnerRepoIssuesIssueNumberAssigneesDeleteBody"""

    assignees: NotRequired[List[str]]


class ReposOwnerRepoIssuesIssueNumberCommentsPostBodyType(TypedDict):
    """ReposOwnerRepoIssuesIssueNumberCommentsPostBody"""

    body: str


class ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof0Type(TypedDict):
    """ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof0"""

    labels: NotRequired[List[str]]


class ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof2Type(TypedDict):
    """ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof2"""

    labels: NotRequired[
        List[ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof2PropLabelsItemsType]
    ]


class ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof2PropLabelsItemsType(TypedDict):
    """ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof2PropLabelsItems"""

    name: str


class ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof3ItemsType(TypedDict):
    """ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof3Items"""

    name: str


class ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof0Type(TypedDict):
    """ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof0"""

    labels: NotRequired[List[str]]


class ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof2Type(TypedDict):
    """ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof2"""

    labels: NotRequired[
        List[ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof2PropLabelsItemsType]
    ]


class ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof2PropLabelsItemsType(TypedDict):
    """ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof2PropLabelsItems"""

    name: str


class ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof3ItemsType(TypedDict):
    """ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof3Items"""

    name: str


class ReposOwnerRepoIssuesIssueNumberLockPutBodyType(TypedDict):
    """ReposOwnerRepoIssuesIssueNumberLockPutBody"""

    lock_reason: NotRequired[Literal["off-topic", "too heated", "resolved", "spam"]]


class ReposOwnerRepoIssuesIssueNumberReactionsPostBodyType(TypedDict):
    """ReposOwnerRepoIssuesIssueNumberReactionsPostBody"""

    content: Literal[
        "+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"
    ]


class ReposOwnerRepoKeysPostBodyType(TypedDict):
    """ReposOwnerRepoKeysPostBody"""

    title: NotRequired[str]
    key: str
    read_only: NotRequired[bool]


class ReposOwnerRepoLabelsPostBodyType(TypedDict):
    """ReposOwnerRepoLabelsPostBody"""

    name: str
    color: NotRequired[str]
    description: NotRequired[str]


class ReposOwnerRepoLabelsNamePatchBodyType(TypedDict):
    """ReposOwnerRepoLabelsNamePatchBody"""

    new_name: NotRequired[str]
    color: NotRequired[str]
    description: NotRequired[str]


class ReposOwnerRepoMergeUpstreamPostBodyType(TypedDict):
    """ReposOwnerRepoMergeUpstreamPostBody"""

    branch: str


class ReposOwnerRepoMergesPostBodyType(TypedDict):
    """ReposOwnerRepoMergesPostBody"""

    base: str
    head: str
    commit_message: NotRequired[str]


class ReposOwnerRepoMilestonesPostBodyType(TypedDict):
    """ReposOwnerRepoMilestonesPostBody"""

    title: str
    state: NotRequired[Literal["open", "closed"]]
    description: NotRequired[str]
    due_on: NotRequired[datetime]


class ReposOwnerRepoMilestonesMilestoneNumberPatchBodyType(TypedDict):
    """ReposOwnerRepoMilestonesMilestoneNumberPatchBody"""

    title: NotRequired[str]
    state: NotRequired[Literal["open", "closed"]]
    description: NotRequired[str]
    due_on: NotRequired[datetime]


class ReposOwnerRepoNotificationsPutBodyType(TypedDict):
    """ReposOwnerRepoNotificationsPutBody"""

    last_read_at: NotRequired[datetime]


class ReposOwnerRepoNotificationsPutResponse202Type(TypedDict):
    """ReposOwnerRepoNotificationsPutResponse202"""

    message: NotRequired[str]
    url: NotRequired[str]


class ReposOwnerRepoPagesPutBodyPropSourceAnyof1Type(TypedDict):
    """ReposOwnerRepoPagesPutBodyPropSourceAnyof1

    Update the source for the repository. Must include the branch name and path.
    """

    branch: str
    path: Literal["/", "/docs"]


class ReposOwnerRepoPagesPutBodyAnyof0Type(TypedDict):
    """ReposOwnerRepoPagesPutBodyAnyof0"""

    cname: NotRequired[Union[str, None]]
    https_enforced: NotRequired[bool]
    build_type: Literal["legacy", "workflow"]
    source: NotRequired[
        Union[
            Literal["gh-pages", "master", "master /docs"],
            ReposOwnerRepoPagesPutBodyPropSourceAnyof1Type,
        ]
    ]


class ReposOwnerRepoPagesPutBodyAnyof1Type(TypedDict):
    """ReposOwnerRepoPagesPutBodyAnyof1"""

    cname: NotRequired[Union[str, None]]
    https_enforced: NotRequired[bool]
    build_type: NotRequired[Literal["legacy", "workflow"]]
    source: Union[
        Literal["gh-pages", "master", "master /docs"],
        ReposOwnerRepoPagesPutBodyPropSourceAnyof1Type,
    ]


class ReposOwnerRepoPagesPutBodyAnyof2Type(TypedDict):
    """ReposOwnerRepoPagesPutBodyAnyof2"""

    cname: Union[str, None]
    https_enforced: NotRequired[bool]
    build_type: NotRequired[Literal["legacy", "workflow"]]
    source: NotRequired[
        Union[
            Literal["gh-pages", "master", "master /docs"],
            ReposOwnerRepoPagesPutBodyPropSourceAnyof1Type,
        ]
    ]


class ReposOwnerRepoPagesPutBodyAnyof3Type(TypedDict):
    """ReposOwnerRepoPagesPutBodyAnyof3"""

    cname: NotRequired[Union[str, None]]
    https_enforced: NotRequired[bool]
    build_type: NotRequired[Literal["legacy", "workflow"]]
    source: NotRequired[
        Union[
            Literal["gh-pages", "master", "master /docs"],
            ReposOwnerRepoPagesPutBodyPropSourceAnyof1Type,
        ]
    ]


class ReposOwnerRepoPagesPutBodyAnyof4Type(TypedDict):
    """ReposOwnerRepoPagesPutBodyAnyof4"""

    cname: NotRequired[Union[str, None]]
    https_enforced: bool
    build_type: NotRequired[Literal["legacy", "workflow"]]
    source: NotRequired[
        Union[
            Literal["gh-pages", "master", "master /docs"],
            ReposOwnerRepoPagesPutBodyPropSourceAnyof1Type,
        ]
    ]


class ReposOwnerRepoPagesPostBodyPropSourceType(TypedDict):
    """ReposOwnerRepoPagesPostBodyPropSource

    The source branch and directory used to publish your Pages site.
    """

    branch: str
    path: NotRequired[Literal["/", "/docs"]]


class ReposOwnerRepoPagesPostBodyAnyof0Type(TypedDict):
    """ReposOwnerRepoPagesPostBodyAnyof0"""

    build_type: NotRequired[Literal["legacy", "workflow"]]
    source: ReposOwnerRepoPagesPostBodyPropSourceType


class ReposOwnerRepoPagesPostBodyAnyof1Type(TypedDict):
    """ReposOwnerRepoPagesPostBodyAnyof1"""

    build_type: Literal["legacy", "workflow"]
    source: NotRequired[ReposOwnerRepoPagesPostBodyPropSourceType]


class ReposOwnerRepoPagesDeploymentPostBodyType(TypedDict):
    """ReposOwnerRepoPagesDeploymentPostBody

    The object used to create GitHub Pages deployment
    """

    artifact_url: str
    environment: NotRequired[str]
    pages_build_version: str
    oidc_token: str


class ReposOwnerRepoProjectsPostBodyType(TypedDict):
    """ReposOwnerRepoProjectsPostBody"""

    name: str
    body: NotRequired[str]


class ReposOwnerRepoPullsPostBodyType(TypedDict):
    """ReposOwnerRepoPullsPostBody"""

    title: NotRequired[str]
    head: str
    head_repo: NotRequired[str]
    base: str
    body: NotRequired[str]
    maintainer_can_modify: NotRequired[bool]
    draft: NotRequired[bool]
    issue: NotRequired[int]


class ReposOwnerRepoPullsCommentsCommentIdPatchBodyType(TypedDict):
    """ReposOwnerRepoPullsCommentsCommentIdPatchBody"""

    body: str


class ReposOwnerRepoPullsCommentsCommentIdReactionsPostBodyType(TypedDict):
    """ReposOwnerRepoPullsCommentsCommentIdReactionsPostBody"""

    content: Literal[
        "+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"
    ]


class ReposOwnerRepoPullsPullNumberPatchBodyType(TypedDict):
    """ReposOwnerRepoPullsPullNumberPatchBody"""

    title: NotRequired[str]
    body: NotRequired[str]
    state: NotRequired[Literal["open", "closed"]]
    base: NotRequired[str]
    maintainer_can_modify: NotRequired[bool]


class ReposOwnerRepoPullsPullNumberCodespacesPostBodyType(TypedDict):
    """ReposOwnerRepoPullsPullNumberCodespacesPostBody"""

    location: NotRequired[str]
    client_ip: NotRequired[str]
    machine: NotRequired[str]
    devcontainer_path: NotRequired[str]
    multi_repo_permissions_opt_out: NotRequired[bool]
    working_directory: NotRequired[str]
    idle_timeout_minutes: NotRequired[int]
    display_name: NotRequired[str]
    retention_period_minutes: NotRequired[int]


class ReposOwnerRepoPullsPullNumberCommentsPostBodyType(TypedDict):
    """ReposOwnerRepoPullsPullNumberCommentsPostBody"""

    body: str
    commit_id: str
    path: str
    position: NotRequired[int]
    side: NotRequired[Literal["LEFT", "RIGHT"]]
    line: int
    start_line: NotRequired[int]
    start_side: NotRequired[Literal["LEFT", "RIGHT", "side"]]
    in_reply_to: NotRequired[int]
    subject_type: NotRequired[Literal["LINE", "FILE"]]


class ReposOwnerRepoPullsPullNumberCommentsCommentIdRepliesPostBodyType(TypedDict):
    """ReposOwnerRepoPullsPullNumberCommentsCommentIdRepliesPostBody"""

    body: str


class ReposOwnerRepoPullsPullNumberMergePutBodyType(TypedDict):
    """ReposOwnerRepoPullsPullNumberMergePutBody"""

    commit_title: NotRequired[str]
    commit_message: NotRequired[str]
    sha: NotRequired[str]
    merge_method: NotRequired[Literal["merge", "squash", "rebase"]]


class ReposOwnerRepoPullsPullNumberMergePutResponse405Type(TypedDict):
    """ReposOwnerRepoPullsPullNumberMergePutResponse405"""

    message: NotRequired[str]
    documentation_url: NotRequired[str]


class ReposOwnerRepoPullsPullNumberMergePutResponse409Type(TypedDict):
    """ReposOwnerRepoPullsPullNumberMergePutResponse409"""

    message: NotRequired[str]
    documentation_url: NotRequired[str]


class ReposOwnerRepoPullsPullNumberRequestedReviewersPostBodyAnyof0Type(TypedDict):
    """ReposOwnerRepoPullsPullNumberRequestedReviewersPostBodyAnyof0"""

    reviewers: List[str]
    team_reviewers: NotRequired[List[str]]


class ReposOwnerRepoPullsPullNumberRequestedReviewersPostBodyAnyof1Type(TypedDict):
    """ReposOwnerRepoPullsPullNumberRequestedReviewersPostBodyAnyof1"""

    reviewers: NotRequired[List[str]]
    team_reviewers: List[str]


class ReposOwnerRepoPullsPullNumberRequestedReviewersDeleteBodyType(TypedDict):
    """ReposOwnerRepoPullsPullNumberRequestedReviewersDeleteBody"""

    reviewers: List[str]
    team_reviewers: NotRequired[List[str]]


class ReposOwnerRepoPullsPullNumberReviewsPostBodyType(TypedDict):
    """ReposOwnerRepoPullsPullNumberReviewsPostBody"""

    commit_id: NotRequired[str]
    body: NotRequired[str]
    event: NotRequired[Literal["APPROVE", "REQUEST_CHANGES", "COMMENT"]]
    comments: NotRequired[
        List[ReposOwnerRepoPullsPullNumberReviewsPostBodyPropCommentsItemsType]
    ]


class ReposOwnerRepoPullsPullNumberReviewsPostBodyPropCommentsItemsType(TypedDict):
    """ReposOwnerRepoPullsPullNumberReviewsPostBodyPropCommentsItems"""

    path: str
    position: NotRequired[int]
    body: str
    line: NotRequired[int]
    side: NotRequired[str]
    start_line: NotRequired[int]
    start_side: NotRequired[str]


class ReposOwnerRepoPullsPullNumberReviewsReviewIdPutBodyType(TypedDict):
    """ReposOwnerRepoPullsPullNumberReviewsReviewIdPutBody"""

    body: str


class ReposOwnerRepoPullsPullNumberReviewsReviewIdDismissalsPutBodyType(TypedDict):
    """ReposOwnerRepoPullsPullNumberReviewsReviewIdDismissalsPutBody"""

    message: str
    event: NotRequired[Literal["DISMISS"]]


class ReposOwnerRepoPullsPullNumberReviewsReviewIdEventsPostBodyType(TypedDict):
    """ReposOwnerRepoPullsPullNumberReviewsReviewIdEventsPostBody"""

    body: NotRequired[str]
    event: Literal["APPROVE", "REQUEST_CHANGES", "COMMENT"]


class ReposOwnerRepoPullsPullNumberUpdateBranchPutBodyType(TypedDict):
    """ReposOwnerRepoPullsPullNumberUpdateBranchPutBody"""

    expected_head_sha: NotRequired[str]


class ReposOwnerRepoPullsPullNumberUpdateBranchPutResponse202Type(TypedDict):
    """ReposOwnerRepoPullsPullNumberUpdateBranchPutResponse202"""

    message: NotRequired[str]
    url: NotRequired[str]


class ReposOwnerRepoReleasesPostBodyType(TypedDict):
    """ReposOwnerRepoReleasesPostBody"""

    tag_name: str
    target_commitish: NotRequired[str]
    name: NotRequired[str]
    body: NotRequired[str]
    draft: NotRequired[bool]
    prerelease: NotRequired[bool]
    discussion_category_name: NotRequired[str]
    generate_release_notes: NotRequired[bool]
    make_latest: NotRequired[Literal["true", "false", "legacy"]]


class ReposOwnerRepoReleasesAssetsAssetIdPatchBodyType(TypedDict):
    """ReposOwnerRepoReleasesAssetsAssetIdPatchBody"""

    name: NotRequired[str]
    label: NotRequired[str]
    state: NotRequired[str]


class ReposOwnerRepoReleasesGenerateNotesPostBodyType(TypedDict):
    """ReposOwnerRepoReleasesGenerateNotesPostBody"""

    tag_name: str
    target_commitish: NotRequired[str]
    previous_tag_name: NotRequired[str]
    configuration_file_path: NotRequired[str]


class ReposOwnerRepoReleasesReleaseIdPatchBodyType(TypedDict):
    """ReposOwnerRepoReleasesReleaseIdPatchBody"""

    tag_name: NotRequired[str]
    target_commitish: NotRequired[str]
    name: NotRequired[str]
    body: NotRequired[str]
    draft: NotRequired[bool]
    prerelease: NotRequired[bool]
    make_latest: NotRequired[Literal["true", "false", "legacy"]]
    discussion_category_name: NotRequired[str]


class ReposOwnerRepoReleasesReleaseIdReactionsPostBodyType(TypedDict):
    """ReposOwnerRepoReleasesReleaseIdReactionsPostBody"""

    content: Literal["+1", "laugh", "heart", "hooray", "rocket", "eyes"]


class ReposOwnerRepoRulesetsPostBodyType(TypedDict):
    """ReposOwnerRepoRulesetsPostBody"""

    name: str
    target: NotRequired[Literal["branch", "tag"]]
    enforcement: Literal["disabled", "active", "evaluate"]
    bypass_mode: NotRequired[Literal["none", "repository", "organization"]]
    bypass_actors: NotRequired[List[RepositoryRulesetBypassActorType]]
    conditions: NotRequired[RepositoryRulesetConditionsType]
    rules: NotRequired[
        List[
            Union[
                RepositoryRuleCreationType,
                RepositoryRuleUpdateType,
                RepositoryRuleDeletionType,
                RepositoryRuleRequiredLinearHistoryType,
                RepositoryRuleRequiredDeploymentsType,
                RepositoryRuleRequiredSignaturesType,
                RepositoryRulePullRequestType,
                RepositoryRuleRequiredStatusChecksType,
                RepositoryRuleNonFastForwardType,
                RepositoryRuleCommitMessagePatternType,
                RepositoryRuleCommitAuthorEmailPatternType,
                RepositoryRuleCommitterEmailPatternType,
                RepositoryRuleBranchNamePatternType,
                RepositoryRuleTagNamePatternType,
            ]
        ]
    ]


class ReposOwnerRepoRulesetsRulesetIdPutBodyType(TypedDict):
    """ReposOwnerRepoRulesetsRulesetIdPutBody"""

    name: NotRequired[str]
    target: NotRequired[Literal["branch", "tag"]]
    enforcement: NotRequired[Literal["disabled", "active", "evaluate"]]
    bypass_mode: NotRequired[Literal["none", "repository", "organization"]]
    bypass_actors: NotRequired[List[RepositoryRulesetBypassActorType]]
    conditions: NotRequired[RepositoryRulesetConditionsType]
    rules: NotRequired[
        List[
            Union[
                RepositoryRuleCreationType,
                RepositoryRuleUpdateType,
                RepositoryRuleDeletionType,
                RepositoryRuleRequiredLinearHistoryType,
                RepositoryRuleRequiredDeploymentsType,
                RepositoryRuleRequiredSignaturesType,
                RepositoryRulePullRequestType,
                RepositoryRuleRequiredStatusChecksType,
                RepositoryRuleNonFastForwardType,
                RepositoryRuleCommitMessagePatternType,
                RepositoryRuleCommitAuthorEmailPatternType,
                RepositoryRuleCommitterEmailPatternType,
                RepositoryRuleBranchNamePatternType,
                RepositoryRuleTagNamePatternType,
            ]
        ]
    ]


class ReposOwnerRepoSecretScanningAlertsAlertNumberPatchBodyType(TypedDict):
    """ReposOwnerRepoSecretScanningAlertsAlertNumberPatchBody"""

    state: Literal["open", "resolved"]
    resolution: NotRequired[
        Union[None, Literal["false_positive", "wont_fix", "revoked", "used_in_tests"]]
    ]
    resolution_comment: NotRequired[Union[str, None]]


class ReposOwnerRepoStatusesShaPostBodyType(TypedDict):
    """ReposOwnerRepoStatusesShaPostBody"""

    state: Literal["error", "failure", "pending", "success"]
    target_url: NotRequired[Union[str, None]]
    description: NotRequired[Union[str, None]]
    context: NotRequired[str]


class ReposOwnerRepoSubscriptionPutBodyType(TypedDict):
    """ReposOwnerRepoSubscriptionPutBody"""

    subscribed: NotRequired[bool]
    ignored: NotRequired[bool]


class ReposOwnerRepoTagsProtectionPostBodyType(TypedDict):
    """ReposOwnerRepoTagsProtectionPostBody"""

    pattern: str


class ReposOwnerRepoTopicsPutBodyType(TypedDict):
    """ReposOwnerRepoTopicsPutBody"""

    names: List[str]


class ReposOwnerRepoTransferPostBodyType(TypedDict):
    """ReposOwnerRepoTransferPostBody"""

    new_owner: str
    new_name: NotRequired[str]
    team_ids: NotRequired[List[int]]


class ReposTemplateOwnerTemplateRepoGeneratePostBodyType(TypedDict):
    """ReposTemplateOwnerTemplateRepoGeneratePostBody"""

    owner: NotRequired[str]
    name: str
    description: NotRequired[str]
    include_all_branches: NotRequired[bool]
    private: NotRequired[bool]


class RepositoriesRepositoryIdEnvironmentsEnvironmentNameSecretsGetResponse200Type(
    TypedDict
):
    """RepositoriesRepositoryIdEnvironmentsEnvironmentNameSecretsGetResponse200"""

    total_count: int
    secrets: List[ActionsSecretType]


class RepositoriesRepositoryIdEnvironmentsEnvironmentNameSecretsSecretNamePutBodyType(
    TypedDict
):
    """RepositoriesRepositoryIdEnvironmentsEnvironmentNameSecretsSecretNamePutBody"""

    encrypted_value: str
    key_id: str


class RepositoriesRepositoryIdEnvironmentsEnvironmentNameVariablesGetResponse200Type(
    TypedDict
):
    """RepositoriesRepositoryIdEnvironmentsEnvironmentNameVariablesGetResponse200"""

    total_count: int
    variables: List[ActionsVariableType]


class RepositoriesRepositoryIdEnvironmentsEnvironmentNameVariablesPostBodyType(
    TypedDict
):
    """RepositoriesRepositoryIdEnvironmentsEnvironmentNameVariablesPostBody"""

    name: str
    value: str


class RepositoriesRepositoryIdEnvironmentsEnvironmentNameVariablesNamePatchBodyType(
    TypedDict
):
    """RepositoriesRepositoryIdEnvironmentsEnvironmentNameVariablesNamePatchBody"""

    name: NotRequired[str]
    value: NotRequired[str]


class SearchCodeGetResponse200Type(TypedDict):
    """SearchCodeGetResponse200"""

    total_count: int
    incomplete_results: bool
    items: List[CodeSearchResultItemType]


class SearchCommitsGetResponse200Type(TypedDict):
    """SearchCommitsGetResponse200"""

    total_count: int
    incomplete_results: bool
    items: List[CommitSearchResultItemType]


class SearchIssuesGetResponse200Type(TypedDict):
    """SearchIssuesGetResponse200"""

    total_count: int
    incomplete_results: bool
    items: List[IssueSearchResultItemType]


class SearchLabelsGetResponse200Type(TypedDict):
    """SearchLabelsGetResponse200"""

    total_count: int
    incomplete_results: bool
    items: List[LabelSearchResultItemType]


class SearchRepositoriesGetResponse200Type(TypedDict):
    """SearchRepositoriesGetResponse200"""

    total_count: int
    incomplete_results: bool
    items: List[RepoSearchResultItemType]


class SearchTopicsGetResponse200Type(TypedDict):
    """SearchTopicsGetResponse200"""

    total_count: int
    incomplete_results: bool
    items: List[TopicSearchResultItemType]


class SearchUsersGetResponse200Type(TypedDict):
    """SearchUsersGetResponse200"""

    total_count: int
    incomplete_results: bool
    items: List[UserSearchResultItemType]


class TeamsTeamIdPatchBodyType(TypedDict):
    """TeamsTeamIdPatchBody"""

    name: str
    description: NotRequired[str]
    privacy: NotRequired[Literal["secret", "closed"]]
    notification_setting: NotRequired[
        Literal["notifications_enabled", "notifications_disabled"]
    ]
    permission: NotRequired[Literal["pull", "push", "admin"]]
    parent_team_id: NotRequired[Union[int, None]]


class TeamsTeamIdDiscussionsPostBodyType(TypedDict):
    """TeamsTeamIdDiscussionsPostBody"""

    title: str
    body: str
    private: NotRequired[bool]


class TeamsTeamIdDiscussionsDiscussionNumberPatchBodyType(TypedDict):
    """TeamsTeamIdDiscussionsDiscussionNumberPatchBody"""

    title: NotRequired[str]
    body: NotRequired[str]


class TeamsTeamIdDiscussionsDiscussionNumberCommentsPostBodyType(TypedDict):
    """TeamsTeamIdDiscussionsDiscussionNumberCommentsPostBody"""

    body: str


class TeamsTeamIdDiscussionsDiscussionNumberCommentsCommentNumberPatchBodyType(
    TypedDict
):
    """TeamsTeamIdDiscussionsDiscussionNumberCommentsCommentNumberPatchBody"""

    body: str


class TeamsTeamIdDiscussionsDiscussionNumberCommentsCommentNumberReactionsPostBodyType(
    TypedDict
):
    """TeamsTeamIdDiscussionsDiscussionNumberCommentsCommentNumberReactionsPostBody"""

    content: Literal[
        "+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"
    ]


class TeamsTeamIdDiscussionsDiscussionNumberReactionsPostBodyType(TypedDict):
    """TeamsTeamIdDiscussionsDiscussionNumberReactionsPostBody"""

    content: Literal[
        "+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"
    ]


class TeamsTeamIdMembershipsUsernamePutBodyType(TypedDict):
    """TeamsTeamIdMembershipsUsernamePutBody"""

    role: NotRequired[Literal["member", "maintainer"]]


class TeamsTeamIdProjectsProjectIdPutBodyType(TypedDict):
    """TeamsTeamIdProjectsProjectIdPutBody"""

    permission: NotRequired[Literal["read", "write", "admin"]]


class TeamsTeamIdProjectsProjectIdPutResponse403Type(TypedDict):
    """TeamsTeamIdProjectsProjectIdPutResponse403"""

    message: NotRequired[str]
    documentation_url: NotRequired[str]


class TeamsTeamIdReposOwnerRepoPutBodyType(TypedDict):
    """TeamsTeamIdReposOwnerRepoPutBody"""

    permission: NotRequired[Literal["pull", "push", "admin"]]


class UserPatchBodyType(TypedDict):
    """UserPatchBody"""

    name: NotRequired[str]
    email: NotRequired[str]
    blog: NotRequired[str]
    twitter_username: NotRequired[Union[str, None]]
    company: NotRequired[str]
    location: NotRequired[str]
    hireable: NotRequired[bool]
    bio: NotRequired[str]


class UserCodespacesGetResponse200Type(TypedDict):
    """UserCodespacesGetResponse200"""

    total_count: int
    codespaces: List[CodespaceType]


class UserCodespacesPostBodyOneof0Type(TypedDict):
    """UserCodespacesPostBodyOneof0"""

    repository_id: int
    ref: NotRequired[str]
    location: NotRequired[str]
    client_ip: NotRequired[str]
    machine: NotRequired[str]
    devcontainer_path: NotRequired[str]
    multi_repo_permissions_opt_out: NotRequired[bool]
    working_directory: NotRequired[str]
    idle_timeout_minutes: NotRequired[int]
    display_name: NotRequired[str]
    retention_period_minutes: NotRequired[int]


class UserCodespacesPostBodyOneof1Type(TypedDict):
    """UserCodespacesPostBodyOneof1"""

    pull_request: UserCodespacesPostBodyOneof1PropPullRequestType
    location: NotRequired[str]
    machine: NotRequired[str]
    devcontainer_path: NotRequired[str]
    working_directory: NotRequired[str]
    idle_timeout_minutes: NotRequired[int]


class UserCodespacesPostBodyOneof1PropPullRequestType(TypedDict):
    """UserCodespacesPostBodyOneof1PropPullRequest

    Pull request number for this codespace
    """

    pull_request_number: int
    repository_id: int


class UserCodespacesSecretsGetResponse200Type(TypedDict):
    """UserCodespacesSecretsGetResponse200"""

    total_count: int
    secrets: List[CodespacesSecretType]


class UserCodespacesSecretsSecretNamePutBodyType(TypedDict):
    """UserCodespacesSecretsSecretNamePutBody"""

    encrypted_value: NotRequired[str]
    key_id: str
    selected_repository_ids: NotRequired[List[Union[int, str]]]


class UserCodespacesSecretsSecretNameRepositoriesGetResponse200Type(TypedDict):
    """UserCodespacesSecretsSecretNameRepositoriesGetResponse200"""

    total_count: int
    repositories: List[MinimalRepositoryType]


class UserCodespacesSecretsSecretNameRepositoriesPutBodyType(TypedDict):
    """UserCodespacesSecretsSecretNameRepositoriesPutBody"""

    selected_repository_ids: List[int]


class UserCodespacesCodespaceNamePatchBodyType(TypedDict):
    """UserCodespacesCodespaceNamePatchBody"""

    machine: NotRequired[str]
    display_name: NotRequired[str]
    recent_folders: NotRequired[List[str]]


class UserCodespacesCodespaceNameMachinesGetResponse200Type(TypedDict):
    """UserCodespacesCodespaceNameMachinesGetResponse200"""

    total_count: int
    machines: List[CodespaceMachineType]


class UserCodespacesCodespaceNamePublishPostBodyType(TypedDict):
    """UserCodespacesCodespaceNamePublishPostBody"""

    name: NotRequired[str]
    private: NotRequired[bool]


class UserEmailVisibilityPatchBodyType(TypedDict):
    """UserEmailVisibilityPatchBody"""

    visibility: Literal["public", "private"]


class UserEmailsPostBodyOneof0Type(TypedDict):
    """UserEmailsPostBodyOneof0

    Examples:
        {'emails': ['octocat@github.com', 'mona@github.com']}
    """

    emails: List[str]


class UserEmailsDeleteBodyOneof0Type(TypedDict):
    """UserEmailsDeleteBodyOneof0

    Deletes one or more email addresses from your GitHub account. Must contain at
    least one email address. **Note:** Alternatively, you can pass a single email
    address or an `array` of emails addresses directly, but we recommend that you
    pass an object using the `emails` key.

    Examples:
        {'emails': ['octocat@github.com', 'mona@github.com']}
    """

    emails: List[str]


class UserGpgKeysPostBodyType(TypedDict):
    """UserGpgKeysPostBody"""

    name: NotRequired[str]
    armored_public_key: str


class UserInstallationsGetResponse200Type(TypedDict):
    """UserInstallationsGetResponse200"""

    total_count: int
    installations: List[InstallationType]


class UserInstallationsInstallationIdRepositoriesGetResponse200Type(TypedDict):
    """UserInstallationsInstallationIdRepositoriesGetResponse200"""

    total_count: int
    repository_selection: NotRequired[str]
    repositories: List[RepositoryType]


class UserInteractionLimitsGetResponse200Anyof1Type(TypedDict):
    """UserInteractionLimitsGetResponse200Anyof1"""


class UserKeysPostBodyType(TypedDict):
    """UserKeysPostBody"""

    title: NotRequired[str]
    key: str


class UserMembershipsOrgsOrgPatchBodyType(TypedDict):
    """UserMembershipsOrgsOrgPatchBody"""

    state: Literal["active"]


class UserMigrationsPostBodyType(TypedDict):
    """UserMigrationsPostBody"""

    lock_repositories: NotRequired[bool]
    exclude_metadata: NotRequired[bool]
    exclude_git_data: NotRequired[bool]
    exclude_attachments: NotRequired[bool]
    exclude_releases: NotRequired[bool]
    exclude_owner_projects: NotRequired[bool]
    org_metadata_only: NotRequired[bool]
    exclude: NotRequired[List[Literal["repositories"]]]
    repositories: List[str]


class UserProjectsPostBodyType(TypedDict):
    """UserProjectsPostBody"""

    name: str
    body: NotRequired[Union[str, None]]


class UserReposPostBodyType(TypedDict):
    """UserReposPostBody"""

    name: str
    description: NotRequired[str]
    homepage: NotRequired[str]
    private: NotRequired[bool]
    has_issues: NotRequired[bool]
    has_projects: NotRequired[bool]
    has_wiki: NotRequired[bool]
    has_discussions: NotRequired[bool]
    team_id: NotRequired[int]
    auto_init: NotRequired[bool]
    gitignore_template: NotRequired[str]
    license_template: NotRequired[str]
    allow_squash_merge: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_auto_merge: NotRequired[bool]
    delete_branch_on_merge: NotRequired[bool]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    has_downloads: NotRequired[bool]
    is_template: NotRequired[bool]


class UserSocialAccountsPostBodyType(TypedDict):
    """UserSocialAccountsPostBody

    Examples:
        {'account_urls': ['https://www.linkedin.com/company/github/',
    'https://twitter.com/github']}
    """

    account_urls: List[str]


class UserSocialAccountsDeleteBodyType(TypedDict):
    """UserSocialAccountsDeleteBody

    Examples:
        {'account_urls': ['https://www.linkedin.com/company/github/',
    'https://twitter.com/github']}
    """

    account_urls: List[str]


class UserSshSigningKeysPostBodyType(TypedDict):
    """UserSshSigningKeysPostBody"""

    title: NotRequired[str]
    key: str


__all__ = [
    "RootType",
    "SimpleUserType",
    "IntegrationType",
    "IntegrationPropPermissionsType",
    "BasicErrorType",
    "ValidationErrorSimpleType",
    "WebhookConfigType",
    "HookDeliveryItemType",
    "ScimErrorType",
    "ValidationErrorType",
    "ValidationErrorPropErrorsItemsType",
    "HookDeliveryType",
    "HookDeliveryPropRequestType",
    "HookDeliveryPropRequestPropHeadersType",
    "HookDeliveryPropRequestPropPayloadType",
    "HookDeliveryPropResponseType",
    "HookDeliveryPropResponsePropHeadersType",
    "EnterpriseType",
    "IntegrationInstallationRequestType",
    "AppPermissionsType",
    "InstallationType",
    "LicenseSimpleType",
    "RepositoryType",
    "RepositoryPropPermissionsType",
    "RepositoryPropTemplateRepositoryPropOwnerType",
    "RepositoryPropTemplateRepositoryPropPermissionsType",
    "RepositoryPropTemplateRepositoryType",
    "InstallationTokenType",
    "ScopedInstallationType",
    "AuthorizationType",
    "AuthorizationPropAppType",
    "CodeOfConductType",
    "DependabotAlertPackageType",
    "DependabotAlertSecurityVulnerabilityType",
    "DependabotAlertSecurityVulnerabilityPropFirstPatchedVersionType",
    "DependabotAlertSecurityAdvisoryType",
    "DependabotAlertSecurityAdvisoryPropCvssType",
    "DependabotAlertSecurityAdvisoryPropCwesItemsType",
    "DependabotAlertSecurityAdvisoryPropIdentifiersItemsType",
    "DependabotAlertSecurityAdvisoryPropReferencesItemsType",
    "SimpleRepositoryType",
    "DependabotAlertWithRepositoryType",
    "DependabotAlertWithRepositoryPropDependencyType",
    "OrganizationSecretScanningAlertType",
    "ActorType",
    "MilestoneType",
    "ReactionRollupType",
    "IssueType",
    "IssuePropLabelsItemsOneof1Type",
    "IssuePropPullRequestType",
    "IssueCommentType",
    "EventType",
    "EventPropRepoType",
    "EventPropPayloadType",
    "EventPropPayloadPropPagesItemsType",
    "LinkWithTypeType",
    "FeedType",
    "FeedPropLinksType",
    "BaseGistType",
    "BaseGistPropFilesType",
    "PublicUserType",
    "PublicUserPropPlanType",
    "GistHistoryType",
    "GistHistoryPropChangeStatusType",
    "GistSimpleType",
    "GistSimplePropForksItemsType",
    "GistSimplePropForkOfPropFilesType",
    "GistSimplePropForkOfType",
    "GistSimplePropFilesType",
    "GistCommentType",
    "GistCommitType",
    "GistCommitPropChangeStatusType",
    "GitignoreTemplateType",
    "LicenseType",
    "MarketplaceListingPlanType",
    "MarketplacePurchaseType",
    "MarketplacePurchasePropMarketplacePendingChangeType",
    "MarketplacePurchasePropMarketplacePurchaseType",
    "ApiOverviewType",
    "ApiOverviewPropSshKeyFingerprintsType",
    "SecurityAndAnalysisPropAdvancedSecurityType",
    "SecurityAndAnalysisPropSecretScanningType",
    "SecurityAndAnalysisPropSecretScanningPushProtectionType",
    "SecurityAndAnalysisType",
    "MinimalRepositoryType",
    "MinimalRepositoryPropPermissionsType",
    "MinimalRepositoryPropLicenseType",
    "ThreadType",
    "ThreadPropSubjectType",
    "ThreadSubscriptionType",
    "OrganizationSimpleType",
    "OrganizationProgrammaticAccessGrantRequestType",
    "OrganizationProgrammaticAccessGrantRequestPropPermissionsType",
    "OrganizationProgrammaticAccessGrantRequestPropPermissionsPropOrganizationType",
    "OrganizationProgrammaticAccessGrantRequestPropPermissionsPropRepositoryType",
    "OrganizationProgrammaticAccessGrantRequestPropPermissionsPropOtherType",
    "OrganizationProgrammaticAccessGrantType",
    "OrganizationProgrammaticAccessGrantPropPermissionsType",
    "OrganizationProgrammaticAccessGrantPropPermissionsPropOrganizationType",
    "OrganizationProgrammaticAccessGrantPropPermissionsPropRepositoryType",
    "OrganizationProgrammaticAccessGrantPropPermissionsPropOtherType",
    "OrganizationFullType",
    "OrganizationFullPropPlanType",
    "ActionsCacheUsageOrgEnterpriseType",
    "ActionsCacheUsageByRepositoryType",
    "OidcCustomSubType",
    "EmptyObjectType",
    "ActionsOrganizationPermissionsType",
    "SelectedActionsType",
    "ActionsGetDefaultWorkflowPermissionsType",
    "ActionsSetDefaultWorkflowPermissionsType",
    "RequiredWorkflowType",
    "RunnerLabelType",
    "RunnerType",
    "RunnerApplicationType",
    "AuthenticationTokenType",
    "AuthenticationTokenPropPermissionsType",
    "OrganizationActionsSecretType",
    "ActionsPublicKeyType",
    "OrganizationActionsVariableType",
    "CodeScanningAlertRuleType",
    "CodeScanningAnalysisToolType",
    "CodeScanningAlertLocationType",
    "CodeScanningAlertInstanceType",
    "CodeScanningAlertInstancePropMessageType",
    "CodeScanningOrganizationAlertItemsType",
    "CodespaceMachineType",
    "CodespaceType",
    "CodespacePropGitStatusType",
    "CodespacePropRuntimeConstraintsType",
    "CodespacesOrgSecretType",
    "CodespacesPublicKeyType",
    "OrganizationDependabotSecretType",
    "DependabotPublicKeyType",
    "PackageType",
    "OrganizationInvitationType",
    "OrgHookType",
    "OrgHookPropConfigType",
    "InteractionLimitResponseType",
    "InteractionLimitType",
    "TeamSimpleType",
    "TeamType",
    "TeamPropPermissionsType",
    "OrgMembershipType",
    "OrgMembershipPropPermissionsType",
    "MigrationType",
    "PackageVersionType",
    "PackageVersionPropMetadataType",
    "PackageVersionPropMetadataPropContainerType",
    "PackageVersionPropMetadataPropDockerType",
    "ProjectType",
    "RepositoryRulesetBypassActorType",
    "RepositoryRulesetConditionsType",
    "RepositoryRulesetConditionsPropRefNameType",
    "RepositoryRulesetConditionsRepositoryNameTargetType",
    "RepositoryRulesetConditionsRepositoryNameTargetPropRepositoryNameType",
    "OrgRulesetConditionsType",
    "RepositoryRuleCreationType",
    "RepositoryRuleUpdateType",
    "RepositoryRuleUpdatePropParametersType",
    "RepositoryRuleDeletionType",
    "RepositoryRuleRequiredLinearHistoryType",
    "RepositoryRuleRequiredDeploymentsType",
    "RepositoryRuleRequiredDeploymentsPropParametersType",
    "RepositoryRuleRequiredSignaturesType",
    "RepositoryRulePullRequestType",
    "RepositoryRulePullRequestPropParametersType",
    "RepositoryRuleParamsStatusCheckConfigurationType",
    "RepositoryRuleRequiredStatusChecksType",
    "RepositoryRuleRequiredStatusChecksPropParametersType",
    "RepositoryRuleNonFastForwardType",
    "RepositoryRuleCommitMessagePatternType",
    "RepositoryRuleCommitMessagePatternPropParametersType",
    "RepositoryRuleCommitAuthorEmailPatternType",
    "RepositoryRuleCommitAuthorEmailPatternPropParametersType",
    "RepositoryRuleCommitterEmailPatternType",
    "RepositoryRuleCommitterEmailPatternPropParametersType",
    "RepositoryRuleBranchNamePatternType",
    "RepositoryRuleBranchNamePatternPropParametersType",
    "RepositoryRuleTagNamePatternType",
    "RepositoryRuleTagNamePatternPropParametersType",
    "RepositoryRulesetType",
    "RepositoryRulesetPropLinksType",
    "RepositoryRulesetPropLinksPropSelfType",
    "ActionsBillingUsageType",
    "ActionsBillingUsagePropMinutesUsedBreakdownType",
    "PackagesBillingUsageType",
    "CombinedBillingUsageType",
    "TeamOrganizationType",
    "TeamOrganizationPropPlanType",
    "TeamFullType",
    "TeamDiscussionType",
    "TeamDiscussionCommentType",
    "ReactionType",
    "TeamMembershipType",
    "TeamProjectType",
    "TeamProjectPropPermissionsType",
    "TeamRepositoryType",
    "TeamRepositoryPropPermissionsType",
    "ProjectCardType",
    "ProjectColumnType",
    "ProjectCollaboratorPermissionType",
    "RateLimitType",
    "RateLimitOverviewType",
    "RateLimitOverviewPropResourcesType",
    "RepoRequiredWorkflowType",
    "WorkflowUsageType",
    "WorkflowUsagePropBillableType",
    "WorkflowUsagePropBillablePropUbuntuType",
    "WorkflowUsagePropBillablePropMacosType",
    "WorkflowUsagePropBillablePropWindowsType",
    "CodeOfConductSimpleType",
    "FullRepositoryType",
    "FullRepositoryPropPermissionsType",
    "ArtifactType",
    "ArtifactPropWorkflowRunType",
    "ActionsCacheListType",
    "ActionsCacheListPropActionsCachesItemsType",
    "JobType",
    "JobPropStepsItemsType",
    "OidcCustomSubRepoType",
    "ActionsSecretType",
    "ActionsVariableType",
    "ActionsRepositoryPermissionsType",
    "ActionsWorkflowAccessToRepositoryType",
    "ReferencedWorkflowType",
    "PullRequestMinimalType",
    "PullRequestMinimalPropHeadType",
    "PullRequestMinimalPropHeadPropRepoType",
    "PullRequestMinimalPropBaseType",
    "PullRequestMinimalPropBasePropRepoType",
    "SimpleCommitType",
    "SimpleCommitPropAuthorType",
    "SimpleCommitPropCommitterType",
    "WorkflowRunType",
    "EnvironmentApprovalsType",
    "EnvironmentApprovalsPropEnvironmentsItemsType",
    "ReviewCustomGatesCommentRequiredType",
    "ReviewCustomGatesStateRequiredType",
    "PendingDeploymentType",
    "PendingDeploymentPropEnvironmentType",
    "PendingDeploymentPropReviewersItemsType",
    "DeploymentType",
    "DeploymentPropPayloadOneof0Type",
    "WorkflowRunUsageType",
    "WorkflowRunUsagePropBillableType",
    "WorkflowRunUsagePropBillablePropUbuntuType",
    "WorkflowRunUsagePropBillablePropUbuntuPropJobRunsItemsType",
    "WorkflowRunUsagePropBillablePropMacosType",
    "WorkflowRunUsagePropBillablePropMacosPropJobRunsItemsType",
    "WorkflowRunUsagePropBillablePropWindowsType",
    "WorkflowRunUsagePropBillablePropWindowsPropJobRunsItemsType",
    "WorkflowType",
    "AutolinkType",
    "ProtectedBranchRequiredStatusCheckType",
    "ProtectedBranchRequiredStatusCheckPropChecksItemsType",
    "ProtectedBranchAdminEnforcedType",
    "ProtectedBranchPullRequestReviewType",
    "ProtectedBranchPullRequestReviewPropDismissalRestrictionsType",
    "ProtectedBranchPullRequestReviewPropBypassPullRequestAllowancesType",
    "BranchRestrictionPolicyType",
    "BranchRestrictionPolicyPropUsersItemsType",
    "BranchRestrictionPolicyPropTeamsItemsType",
    "BranchRestrictionPolicyPropAppsItemsType",
    "BranchRestrictionPolicyPropAppsItemsPropOwnerType",
    "BranchRestrictionPolicyPropAppsItemsPropPermissionsType",
    "BranchProtectionType",
    "BranchProtectionPropRequiredLinearHistoryType",
    "BranchProtectionPropAllowForcePushesType",
    "BranchProtectionPropAllowDeletionsType",
    "BranchProtectionPropBlockCreationsType",
    "BranchProtectionPropRequiredConversationResolutionType",
    "BranchProtectionPropRequiredSignaturesType",
    "BranchProtectionPropLockBranchType",
    "BranchProtectionPropAllowForkSyncingType",
    "ShortBranchType",
    "ShortBranchPropCommitType",
    "GitUserType",
    "VerificationType",
    "DiffEntryType",
    "CommitType",
    "CommitPropCommitType",
    "CommitPropCommitPropTreeType",
    "CommitPropParentsItemsType",
    "CommitPropStatsType",
    "BranchWithProtectionType",
    "BranchWithProtectionPropLinksType",
    "StatusCheckPolicyType",
    "StatusCheckPolicyPropChecksItemsType",
    "ProtectedBranchType",
    "ProtectedBranchPropRequiredPullRequestReviewsType",
    "ProtectedBranchPropRequiredPullRequestReviewsPropDismissalRestrictionsType",
    "ProtectedBranchPropRequiredPullRequestReviewsPropBypassPullRequestAllowancesType",
    "ProtectedBranchPropRequiredSignaturesType",
    "ProtectedBranchPropEnforceAdminsType",
    "ProtectedBranchPropRequiredLinearHistoryType",
    "ProtectedBranchPropAllowForcePushesType",
    "ProtectedBranchPropAllowDeletionsType",
    "ProtectedBranchPropRequiredConversationResolutionType",
    "ProtectedBranchPropBlockCreationsType",
    "ProtectedBranchPropLockBranchType",
    "ProtectedBranchPropAllowForkSyncingType",
    "DeploymentSimpleType",
    "CheckRunType",
    "CheckRunPropOutputType",
    "CheckRunPropCheckSuiteType",
    "CheckAnnotationType",
    "CheckSuiteType",
    "CheckSuitePreferenceType",
    "CheckSuitePreferencePropPreferencesType",
    "CheckSuitePreferencePropPreferencesPropAutoTriggerChecksItemsType",
    "CodeScanningAlertRuleSummaryType",
    "CodeScanningAlertItemsType",
    "CodeScanningAlertType",
    "CodeScanningAnalysisType",
    "CodeScanningAnalysisDeletionType",
    "CodeScanningCodeqlDatabaseType",
    "CodeScanningDefaultSetupType",
    "CodeScanningDefaultSetupUpdateType",
    "CodeScanningDefaultSetupUpdateResponseType",
    "CodeScanningSarifsReceiptType",
    "CodeScanningSarifsStatusType",
    "CodeownersErrorsType",
    "CodeownersErrorsPropErrorsItemsType",
    "RepoCodespacesSecretType",
    "CollaboratorType",
    "CollaboratorPropPermissionsType",
    "RepositoryInvitationType",
    "RepositoryCollaboratorPermissionType",
    "CommitCommentType",
    "BranchShortType",
    "BranchShortPropCommitType",
    "LinkType",
    "AutoMergeType",
    "PullRequestSimpleType",
    "PullRequestSimplePropLabelsItemsType",
    "PullRequestSimplePropHeadType",
    "PullRequestSimplePropBaseType",
    "PullRequestSimplePropLinksType",
    "SimpleCommitStatusType",
    "CombinedCommitStatusType",
    "StatusType",
    "CommunityHealthFileType",
    "CommunityProfileType",
    "CommunityProfilePropFilesType",
    "CommitComparisonType",
    "ContentTreeType",
    "ContentTreePropEntriesItemsType",
    "ContentTreePropEntriesItemsPropLinksType",
    "ContentTreePropLinksType",
    "ContentDirectoryItemsType",
    "ContentDirectoryItemsPropLinksType",
    "ContentFileType",
    "ContentFilePropLinksType",
    "ContentSymlinkType",
    "ContentSymlinkPropLinksType",
    "ContentSubmoduleType",
    "ContentSubmodulePropLinksType",
    "FileCommitType",
    "FileCommitPropContentPropLinksType",
    "FileCommitPropContentType",
    "FileCommitPropCommitType",
    "FileCommitPropCommitPropAuthorType",
    "FileCommitPropCommitPropCommitterType",
    "FileCommitPropCommitPropTreeType",
    "FileCommitPropCommitPropParentsItemsType",
    "FileCommitPropCommitPropVerificationType",
    "ContributorType",
    "DependabotAlertType",
    "DependabotAlertPropDependencyType",
    "DependabotSecretType",
    "DependencyGraphDiffItemsType",
    "DependencyGraphDiffItemsPropVulnerabilitiesItemsType",
    "DependencyGraphSpdxSbomType",
    "DependencyGraphSpdxSbomPropSbomType",
    "DependencyGraphSpdxSbomPropSbomPropCreationInfoType",
    "DependencyGraphSpdxSbomPropSbomPropPackagesItemsType",
    "DependencyGraphSpdxSbomPropSbomPropPackagesItemsPropExternalRefsItemsType",
    "MetadataType",
    "DependencyType",
    "ManifestType",
    "ManifestPropFileType",
    "ManifestPropResolvedType",
    "SnapshotType",
    "SnapshotPropJobType",
    "SnapshotPropDetectorType",
    "SnapshotPropManifestsType",
    "DeploymentStatusType",
    "DeploymentBranchPolicySettingsType",
    "EnvironmentType",
    "EnvironmentPropProtectionRulesItemsAnyof0Type",
    "EnvironmentPropProtectionRulesItemsAnyof1Type",
    "EnvironmentPropProtectionRulesItemsAnyof1PropReviewersItemsType",
    "EnvironmentPropProtectionRulesItemsAnyof2Type",
    "DeploymentBranchPolicyType",
    "DeploymentBranchPolicyNamePatternType",
    "CustomDeploymentRuleAppType",
    "DeploymentProtectionRuleType",
    "ShortBlobType",
    "BlobType",
    "GitCommitType",
    "GitCommitPropAuthorType",
    "GitCommitPropCommitterType",
    "GitCommitPropTreeType",
    "GitCommitPropParentsItemsType",
    "GitCommitPropVerificationType",
    "GitRefType",
    "GitRefPropObjectType",
    "GitTagType",
    "GitTagPropTaggerType",
    "GitTagPropObjectType",
    "GitTreeType",
    "GitTreePropTreeItemsType",
    "HookResponseType",
    "HookType",
    "HookPropConfigType",
    "ImportType",
    "ImportPropProjectChoicesItemsType",
    "PorterAuthorType",
    "PorterLargeFileType",
    "IssueEventLabelType",
    "IssueEventDismissedReviewType",
    "IssueEventMilestoneType",
    "IssueEventProjectCardType",
    "IssueEventRenameType",
    "IssueEventType",
    "LabeledIssueEventType",
    "LabeledIssueEventPropLabelType",
    "UnlabeledIssueEventType",
    "UnlabeledIssueEventPropLabelType",
    "AssignedIssueEventType",
    "UnassignedIssueEventType",
    "MilestonedIssueEventType",
    "MilestonedIssueEventPropMilestoneType",
    "DemilestonedIssueEventType",
    "DemilestonedIssueEventPropMilestoneType",
    "RenamedIssueEventType",
    "RenamedIssueEventPropRenameType",
    "ReviewRequestedIssueEventType",
    "ReviewRequestRemovedIssueEventType",
    "ReviewDismissedIssueEventType",
    "ReviewDismissedIssueEventPropDismissedReviewType",
    "LockedIssueEventType",
    "AddedToProjectIssueEventType",
    "AddedToProjectIssueEventPropProjectCardType",
    "MovedColumnInProjectIssueEventType",
    "MovedColumnInProjectIssueEventPropProjectCardType",
    "RemovedFromProjectIssueEventType",
    "RemovedFromProjectIssueEventPropProjectCardType",
    "ConvertedNoteToIssueIssueEventType",
    "ConvertedNoteToIssueIssueEventPropProjectCardType",
    "LabelType",
    "TimelineCommentEventType",
    "TimelineCrossReferencedEventType",
    "TimelineCrossReferencedEventPropSourceType",
    "TimelineCommittedEventType",
    "TimelineCommittedEventPropAuthorType",
    "TimelineCommittedEventPropCommitterType",
    "TimelineCommittedEventPropTreeType",
    "TimelineCommittedEventPropParentsItemsType",
    "TimelineCommittedEventPropVerificationType",
    "TimelineReviewedEventType",
    "TimelineReviewedEventPropLinksType",
    "TimelineReviewedEventPropLinksPropHtmlType",
    "TimelineReviewedEventPropLinksPropPullRequestType",
    "PullRequestReviewCommentType",
    "PullRequestReviewCommentPropLinksType",
    "PullRequestReviewCommentPropLinksPropSelfType",
    "PullRequestReviewCommentPropLinksPropHtmlType",
    "PullRequestReviewCommentPropLinksPropPullRequestType",
    "TimelineLineCommentedEventType",
    "TimelineCommitCommentedEventType",
    "TimelineAssignedIssueEventType",
    "TimelineUnassignedIssueEventType",
    "StateChangeIssueEventType",
    "DeployKeyType",
    "LanguageType",
    "LicenseContentType",
    "LicenseContentPropLinksType",
    "MergedUpstreamType",
    "PagesSourceHashType",
    "PagesHttpsCertificateType",
    "PageType",
    "PageBuildType",
    "PageBuildPropErrorType",
    "PageBuildStatusType",
    "PageDeploymentType",
    "PagesHealthCheckType",
    "PagesHealthCheckPropDomainType",
    "PagesHealthCheckPropAltDomainType",
    "PullRequestType",
    "PullRequestPropLabelsItemsType",
    "PullRequestPropHeadType",
    "PullRequestPropHeadPropRepoPropOwnerType",
    "PullRequestPropHeadPropRepoPropPermissionsType",
    "PullRequestPropHeadPropRepoPropLicenseType",
    "PullRequestPropHeadPropRepoType",
    "PullRequestPropHeadPropUserType",
    "PullRequestPropBaseType",
    "PullRequestPropBasePropRepoType",
    "PullRequestPropBasePropRepoPropOwnerType",
    "PullRequestPropBasePropRepoPropPermissionsType",
    "PullRequestPropBasePropUserType",
    "PullRequestPropLinksType",
    "PullRequestMergeResultType",
    "PullRequestReviewRequestType",
    "PullRequestReviewType",
    "PullRequestReviewPropLinksType",
    "PullRequestReviewPropLinksPropHtmlType",
    "PullRequestReviewPropLinksPropPullRequestType",
    "ReviewCommentType",
    "ReviewCommentPropLinksType",
    "ReleaseAssetType",
    "ReleaseType",
    "ReleaseNotesContentType",
    "SecretScanningAlertType",
    "SecretScanningLocationCommitType",
    "SecretScanningLocationIssueTitleType",
    "SecretScanningLocationIssueBodyType",
    "SecretScanningLocationIssueCommentType",
    "SecretScanningLocationType",
    "RepositoryAdvisoryVulnerabilityType",
    "RepositoryAdvisoryVulnerabilityPropPackageType",
    "RepositoryAdvisoryCreditType",
    "RepositoryAdvisoryType",
    "RepositoryAdvisoryPropIdentifiersItemsType",
    "RepositoryAdvisoryPropSubmissionType",
    "RepositoryAdvisoryPropCvssType",
    "RepositoryAdvisoryPropCwesItemsType",
    "RepositoryAdvisoryPropCreditsItemsType",
    "RepositoryAdvisoryCreateType",
    "RepositoryAdvisoryCreatePropVulnerabilitiesItemsType",
    "RepositoryAdvisoryCreatePropVulnerabilitiesItemsPropPackageType",
    "RepositoryAdvisoryCreatePropCreditsItemsType",
    "PrivateVulnerabilityReportCreateType",
    "PrivateVulnerabilityReportCreatePropVulnerabilitiesItemsType",
    "PrivateVulnerabilityReportCreatePropVulnerabilitiesItemsPropPackageType",
    "RepositoryAdvisoryUpdateType",
    "RepositoryAdvisoryUpdatePropVulnerabilitiesItemsType",
    "RepositoryAdvisoryUpdatePropVulnerabilitiesItemsPropPackageType",
    "RepositoryAdvisoryUpdatePropCreditsItemsType",
    "StargazerType",
    "CommitActivityType",
    "ContributorActivityType",
    "ContributorActivityPropWeeksItemsType",
    "ParticipationStatsType",
    "RepositorySubscriptionType",
    "TagType",
    "TagPropCommitType",
    "TagProtectionType",
    "TopicType",
    "TrafficType",
    "CloneTrafficType",
    "ContentTrafficType",
    "ReferrerTrafficType",
    "ViewTrafficType",
    "SearchResultTextMatchesItemsType",
    "SearchResultTextMatchesItemsPropMatchesItemsType",
    "CodeSearchResultItemType",
    "CommitSearchResultItemType",
    "CommitSearchResultItemPropCommitType",
    "CommitSearchResultItemPropCommitPropAuthorType",
    "CommitSearchResultItemPropCommitPropTreeType",
    "CommitSearchResultItemPropParentsItemsType",
    "IssueSearchResultItemType",
    "IssueSearchResultItemPropLabelsItemsType",
    "IssueSearchResultItemPropPullRequestType",
    "LabelSearchResultItemType",
    "RepoSearchResultItemType",
    "RepoSearchResultItemPropPermissionsType",
    "TopicSearchResultItemType",
    "TopicSearchResultItemPropRelatedItemsType",
    "TopicSearchResultItemPropRelatedItemsPropTopicRelationType",
    "TopicSearchResultItemPropAliasesItemsType",
    "TopicSearchResultItemPropAliasesItemsPropTopicRelationType",
    "UserSearchResultItemType",
    "PrivateUserType",
    "PrivateUserPropPlanType",
    "CodespacesSecretType",
    "CodespacesUserPublicKeyType",
    "CodespaceExportDetailsType",
    "CodespaceWithFullRepositoryType",
    "CodespaceWithFullRepositoryPropGitStatusType",
    "CodespaceWithFullRepositoryPropRuntimeConstraintsType",
    "EmailType",
    "GpgKeyType",
    "GpgKeyPropEmailsItemsType",
    "GpgKeyPropSubkeysItemsType",
    "GpgKeyPropSubkeysItemsPropEmailsItemsType",
    "KeyType",
    "MarketplaceAccountType",
    "UserMarketplacePurchaseType",
    "SocialAccountType",
    "SshSigningKeyType",
    "StarredRepositoryType",
    "HovercardType",
    "HovercardPropContextsItemsType",
    "KeySimpleType",
    "SimpleInstallationType",
    "SimpleCheckSuiteType",
    "CheckRunWithSimpleCheckSuiteType",
    "CheckRunWithSimpleCheckSuitePropOutputType",
    "DiscussionType",
    "DiscussionPropAnswerChosenByType",
    "DiscussionPropCategoryType",
    "DiscussionPropReactionsType",
    "DiscussionPropUserType",
    "PersonalAccessTokenRequestType",
    "PersonalAccessTokenRequestPropPermissionsAddedType",
    "PersonalAccessTokenRequestPropPermissionsAddedPropOrganizationType",
    "PersonalAccessTokenRequestPropPermissionsAddedPropRepositoryType",
    "PersonalAccessTokenRequestPropPermissionsAddedPropOtherType",
    "PersonalAccessTokenRequestPropPermissionsUpgradedType",
    "PersonalAccessTokenRequestPropPermissionsUpgradedPropOrganizationType",
    "PersonalAccessTokenRequestPropPermissionsUpgradedPropRepositoryType",
    "PersonalAccessTokenRequestPropPermissionsUpgradedPropOtherType",
    "PersonalAccessTokenRequestPropPermissionsResultType",
    "PersonalAccessTokenRequestPropPermissionsResultPropOrganizationType",
    "PersonalAccessTokenRequestPropPermissionsResultPropRepositoryType",
    "PersonalAccessTokenRequestPropPermissionsResultPropOtherType",
    "PersonalAccessTokenRequestPropRepositoriesItemsType",
    "ProjectsV2Type",
    "ProjectsV2ItemType",
    "AppManifestsCodeConversionsPostResponse201Type",
    "AppManifestsCodeConversionsPostResponse201Allof1Type",
    "AppHookConfigPatchBodyType",
    "AppHookDeliveriesDeliveryIdAttemptsPostResponse202Type",
    "AppInstallationsInstallationIdAccessTokensPostBodyType",
    "ApplicationsClientIdGrantDeleteBodyType",
    "ApplicationsClientIdTokenPostBodyType",
    "ApplicationsClientIdTokenDeleteBodyType",
    "ApplicationsClientIdTokenPatchBodyType",
    "ApplicationsClientIdTokenScopedPostBodyType",
    "EmojisGetResponse200Type",
    "EnterprisesEnterpriseSecretScanningAlertsGetResponse503Type",
    "GistsPostBodyType",
    "GistsPostBodyPropFilesType",
    "GistsGistIdGetResponse403Type",
    "GistsGistIdGetResponse403PropBlockType",
    "GistsGistIdPatchBodyPropFilesType",
    "GistsGistIdPatchBodyAnyof0Type",
    "GistsGistIdPatchBodyAnyof1Type",
    "GistsGistIdCommentsPostBodyType",
    "GistsGistIdCommentsCommentIdPatchBodyType",
    "GistsGistIdStarGetResponse404Type",
    "InstallationRepositoriesGetResponse200Type",
    "MarkdownPostBodyType",
    "NotificationsPutBodyType",
    "NotificationsPutResponse202Type",
    "NotificationsThreadsThreadIdSubscriptionPutBodyType",
    "OrganizationsOrgPersonalAccessTokenRequestsPostBodyType",
    "OrganizationsOrgPersonalAccessTokenRequestsPatRequestIdPostBodyType",
    "OrganizationsOrgPersonalAccessTokensPostBodyType",
    "OrganizationsOrgPersonalAccessTokensPatIdPostBodyType",
    "OrgsOrgPatchBodyType",
    "OrgsOrgActionsCacheUsageByRepositoryGetResponse200Type",
    "OrgsOrgActionsPermissionsPutBodyType",
    "OrgsOrgActionsPermissionsRepositoriesGetResponse200Type",
    "OrgsOrgActionsPermissionsRepositoriesPutBodyType",
    "OrgsOrgActionsRequiredWorkflowsGetResponse200Type",
    "OrgsOrgActionsRequiredWorkflowsPostBodyType",
    "OrgsOrgActionsRequiredWorkflowsRequiredWorkflowIdPatchBodyType",
    "OrgsOrgActionsRequiredWorkflowsRequiredWorkflowIdRepositoriesGetResponse200Type",
    "OrgsOrgActionsRequiredWorkflowsRequiredWorkflowIdRepositoriesPutBodyType",
    "OrgsOrgActionsRunnersGetResponse200Type",
    "OrgsOrgActionsRunnersRunnerIdLabelsGetResponse200Type",
    "OrgsOrgActionsRunnersRunnerIdLabelsPutBodyType",
    "OrgsOrgActionsRunnersRunnerIdLabelsPostBodyType",
    "OrgsOrgActionsRunnersRunnerIdLabelsDeleteResponse200Type",
    "OrgsOrgActionsSecretsGetResponse200Type",
    "OrgsOrgActionsSecretsSecretNamePutBodyType",
    "OrgsOrgActionsSecretsSecretNameRepositoriesGetResponse200Type",
    "OrgsOrgActionsSecretsSecretNameRepositoriesPutBodyType",
    "OrgsOrgActionsVariablesGetResponse200Type",
    "OrgsOrgActionsVariablesPostBodyType",
    "OrgsOrgActionsVariablesNamePatchBodyType",
    "OrgsOrgActionsVariablesNameRepositoriesGetResponse200Type",
    "OrgsOrgActionsVariablesNameRepositoriesPutBodyType",
    "OrgsOrgCodespacesGetResponse200Type",
    "OrgsOrgCodespacesBillingPutBodyType",
    "OrgsOrgCodespacesBillingSelectedUsersPostBodyType",
    "OrgsOrgCodespacesBillingSelectedUsersDeleteBodyType",
    "OrgsOrgCodespacesSecretsGetResponse200Type",
    "OrgsOrgCodespacesSecretsSecretNamePutBodyType",
    "OrgsOrgCodespacesSecretsSecretNameRepositoriesGetResponse200Type",
    "OrgsOrgCodespacesSecretsSecretNameRepositoriesPutBodyType",
    "OrgsOrgDependabotSecretsGetResponse200Type",
    "OrgsOrgDependabotSecretsSecretNamePutBodyType",
    "OrgsOrgDependabotSecretsSecretNameRepositoriesGetResponse200Type",
    "OrgsOrgDependabotSecretsSecretNameRepositoriesPutBodyType",
    "OrgsOrgHooksPostBodyType",
    "OrgsOrgHooksPostBodyPropConfigType",
    "OrgsOrgHooksHookIdPatchBodyType",
    "OrgsOrgHooksHookIdPatchBodyPropConfigType",
    "OrgsOrgHooksHookIdConfigPatchBodyType",
    "OrgsOrgInstallationsGetResponse200Type",
    "OrgsOrgInteractionLimitsGetResponse200Anyof1Type",
    "OrgsOrgInvitationsPostBodyType",
    "OrgsOrgMembersUsernameCodespacesGetResponse200Type",
    "OrgsOrgMembershipsUsernamePutBodyType",
    "OrgsOrgMigrationsPostBodyType",
    "OrgsOrgOutsideCollaboratorsUsernamePutBodyType",
    "OrgsOrgOutsideCollaboratorsUsernamePutResponse202Type",
    "OrgsOrgOutsideCollaboratorsUsernameDeleteResponse422Type",
    "OrgsOrgProjectsPostBodyType",
    "OrgsOrgReposPostBodyType",
    "OrgsOrgRulesetsPostBodyType",
    "OrgsOrgRulesetsRulesetIdPutBodyType",
    "OrgsOrgTeamsPostBodyType",
    "OrgsOrgTeamsTeamSlugPatchBodyType",
    "OrgsOrgTeamsTeamSlugDiscussionsPostBodyType",
    "OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberPatchBodyType",
    "OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsPostBodyType",
    "OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsCommentNumberPatchBodyType",
    "OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsCommentNumberReactionsPostBodyType",
    "OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberReactionsPostBodyType",
    "OrgsOrgTeamsTeamSlugMembershipsUsernamePutBodyType",
    "OrgsOrgTeamsTeamSlugProjectsProjectIdPutBodyType",
    "OrgsOrgTeamsTeamSlugProjectsProjectIdPutResponse403Type",
    "OrgsOrgTeamsTeamSlugReposOwnerRepoPutBodyType",
    "ProjectsColumnsCardsCardIdDeleteResponse403Type",
    "ProjectsColumnsCardsCardIdPatchBodyType",
    "ProjectsColumnsCardsCardIdMovesPostBodyType",
    "ProjectsColumnsCardsCardIdMovesPostResponse201Type",
    "ProjectsColumnsCardsCardIdMovesPostResponse403Type",
    "ProjectsColumnsCardsCardIdMovesPostResponse403PropErrorsItemsType",
    "ProjectsColumnsCardsCardIdMovesPostResponse503Type",
    "ProjectsColumnsCardsCardIdMovesPostResponse503PropErrorsItemsType",
    "ProjectsColumnsColumnIdPatchBodyType",
    "ProjectsColumnsColumnIdCardsPostBodyOneof0Type",
    "ProjectsColumnsColumnIdCardsPostBodyOneof1Type",
    "ProjectsColumnsColumnIdCardsPostResponse503Type",
    "ProjectsColumnsColumnIdCardsPostResponse503PropErrorsItemsType",
    "ProjectsColumnsColumnIdMovesPostBodyType",
    "ProjectsColumnsColumnIdMovesPostResponse201Type",
    "ProjectsProjectIdDeleteResponse403Type",
    "ProjectsProjectIdPatchBodyType",
    "ProjectsProjectIdPatchResponse403Type",
    "ProjectsProjectIdCollaboratorsUsernamePutBodyType",
    "ProjectsProjectIdColumnsPostBodyType",
    "ReposOrgRepoActionsRequiredWorkflowsGetResponse200Type",
    "ReposOwnerRepoDeleteResponse403Type",
    "ReposOwnerRepoPatchBodyType",
    "ReposOwnerRepoPatchBodyPropSecurityAndAnalysisPropAdvancedSecurityType",
    "ReposOwnerRepoPatchBodyPropSecurityAndAnalysisPropSecretScanningType",
    "ReposOwnerRepoPatchBodyPropSecurityAndAnalysisPropSecretScanningPushProtectionType",
    "ReposOwnerRepoPatchBodyPropSecurityAndAnalysisType",
    "ReposOwnerRepoActionsArtifactsGetResponse200Type",
    "ReposOwnerRepoActionsJobsJobIdRerunPostBodyType",
    "ReposOwnerRepoActionsOidcCustomizationSubPutBodyType",
    "ReposOwnerRepoActionsOrganizationSecretsGetResponse200Type",
    "ReposOwnerRepoActionsOrganizationVariablesGetResponse200Type",
    "ReposOwnerRepoActionsPermissionsPutBodyType",
    "ReposOwnerRepoActionsRequiredWorkflowsRequiredWorkflowIdForRepoRunsGetResponse200Type",
    "ReposOwnerRepoActionsRunnersGetResponse200Type",
    "ReposOwnerRepoActionsRunnersRunnerIdLabelsPutBodyType",
    "ReposOwnerRepoActionsRunnersRunnerIdLabelsPostBodyType",
    "ReposOwnerRepoActionsRunsGetResponse200Type",
    "ReposOwnerRepoActionsRunsRunIdArtifactsGetResponse200Type",
    "ReposOwnerRepoActionsRunsRunIdAttemptsAttemptNumberJobsGetResponse200Type",
    "ReposOwnerRepoActionsRunsRunIdJobsGetResponse200Type",
    "ReposOwnerRepoActionsRunsRunIdPendingDeploymentsPostBodyType",
    "ReposOwnerRepoActionsRunsRunIdRerunPostBodyType",
    "ReposOwnerRepoActionsRunsRunIdRerunFailedJobsPostBodyType",
    "ReposOwnerRepoActionsSecretsGetResponse200Type",
    "ReposOwnerRepoActionsSecretsSecretNamePutBodyType",
    "ReposOwnerRepoActionsVariablesGetResponse200Type",
    "ReposOwnerRepoActionsVariablesPostBodyType",
    "ReposOwnerRepoActionsVariablesNamePatchBodyType",
    "ReposOwnerRepoActionsWorkflowsGetResponse200Type",
    "ReposOwnerRepoActionsWorkflowsWorkflowIdDispatchesPostBodyType",
    "ReposOwnerRepoActionsWorkflowsWorkflowIdDispatchesPostBodyPropInputsType",
    "ReposOwnerRepoActionsWorkflowsWorkflowIdRunsGetResponse200Type",
    "ReposOwnerRepoAutolinksPostBodyType",
    "ReposOwnerRepoBranchesBranchProtectionPutBodyType",
    "ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredStatusChecksPropChecksItemsType",
    "ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredStatusChecksType",
    "ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredPullRequestReviewsPropDismissalRestrictionsType",
    "ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredPullRequestReviewsPropBypassPullRequestAllowancesType",
    "ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredPullRequestReviewsType",
    "ReposOwnerRepoBranchesBranchProtectionPutBodyPropRestrictionsType",
    "ReposOwnerRepoBranchesBranchProtectionRequiredPullRequestReviewsPatchBodyType",
    "ReposOwnerRepoBranchesBranchProtectionRequiredPullRequestReviewsPatchBodyPropDismissalRestrictionsType",
    "ReposOwnerRepoBranchesBranchProtectionRequiredPullRequestReviewsPatchBodyPropBypassPullRequestAllowancesType",
    "ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksPatchBodyType",
    "ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksPatchBodyPropChecksItemsType",
    "ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsPutBodyOneof0Type",
    "ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsPostBodyOneof0Type",
    "ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsDeleteBodyOneof0Type",
    "ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsPutBodyOneof0Type",
    "ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsPostBodyOneof0Type",
    "ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsDeleteBodyOneof0Type",
    "ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsPutBodyOneof0Type",
    "ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsPostBodyOneof0Type",
    "ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsDeleteBodyOneof0Type",
    "ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersPutBodyOneof0Type",
    "ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersPostBodyOneof0Type",
    "ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersDeleteBodyOneof0Type",
    "ReposOwnerRepoBranchesBranchRenamePostBodyType",
    "ReposOwnerRepoCheckRunsPostBodyPropOutputType",
    "ReposOwnerRepoCheckRunsPostBodyPropOutputPropAnnotationsItemsType",
    "ReposOwnerRepoCheckRunsPostBodyPropOutputPropImagesItemsType",
    "ReposOwnerRepoCheckRunsPostBodyPropActionsItemsType",
    "ReposOwnerRepoCheckRunsPostBodyOneof0Type",
    "ReposOwnerRepoCheckRunsPostBodyOneof1Type",
    "ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutputType",
    "ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutputPropAnnotationsItemsType",
    "ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutputPropImagesItemsType",
    "ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropActionsItemsType",
    "ReposOwnerRepoCheckRunsCheckRunIdPatchBodyAnyof0Type",
    "ReposOwnerRepoCheckRunsCheckRunIdPatchBodyAnyof1Type",
    "ReposOwnerRepoCheckSuitesPostBodyType",
    "ReposOwnerRepoCheckSuitesPreferencesPatchBodyType",
    "ReposOwnerRepoCheckSuitesPreferencesPatchBodyPropAutoTriggerChecksItemsType",
    "ReposOwnerRepoCheckSuitesCheckSuiteIdCheckRunsGetResponse200Type",
    "ReposOwnerRepoCodeScanningAlertsAlertNumberPatchBodyType",
    "ReposOwnerRepoCodeScanningSarifsPostBodyType",
    "ReposOwnerRepoCodespacesGetResponse200Type",
    "ReposOwnerRepoCodespacesPostBodyType",
    "ReposOwnerRepoCodespacesDevcontainersGetResponse200Type",
    "ReposOwnerRepoCodespacesDevcontainersGetResponse200PropDevcontainersItemsType",
    "ReposOwnerRepoCodespacesMachinesGetResponse200Type",
    "ReposOwnerRepoCodespacesNewGetResponse200Type",
    "ReposOwnerRepoCodespacesNewGetResponse200PropDefaultsType",
    "ReposOwnerRepoCodespacesSecretsGetResponse200Type",
    "ReposOwnerRepoCodespacesSecretsSecretNamePutBodyType",
    "ReposOwnerRepoCollaboratorsUsernamePutBodyType",
    "ReposOwnerRepoCommentsCommentIdPatchBodyType",
    "ReposOwnerRepoCommentsCommentIdReactionsPostBodyType",
    "ReposOwnerRepoCommitsCommitShaCommentsPostBodyType",
    "ReposOwnerRepoCommitsRefCheckRunsGetResponse200Type",
    "ReposOwnerRepoCommitsRefCheckSuitesGetResponse200Type",
    "ReposOwnerRepoContentsPathPutBodyType",
    "ReposOwnerRepoContentsPathPutBodyPropCommitterType",
    "ReposOwnerRepoContentsPathPutBodyPropAuthorType",
    "ReposOwnerRepoContentsPathDeleteBodyType",
    "ReposOwnerRepoContentsPathDeleteBodyPropCommitterType",
    "ReposOwnerRepoContentsPathDeleteBodyPropAuthorType",
    "ReposOwnerRepoDependabotAlertsAlertNumberPatchBodyType",
    "ReposOwnerRepoDependabotSecretsGetResponse200Type",
    "ReposOwnerRepoDependabotSecretsSecretNamePutBodyType",
    "ReposOwnerRepoDependencyGraphSnapshotsPostResponse201Type",
    "ReposOwnerRepoDeploymentsPostBodyType",
    "ReposOwnerRepoDeploymentsPostBodyPropPayloadOneof0Type",
    "ReposOwnerRepoDeploymentsPostResponse202Type",
    "ReposOwnerRepoDeploymentsDeploymentIdStatusesPostBodyType",
    "ReposOwnerRepoDispatchesPostBodyType",
    "ReposOwnerRepoDispatchesPostBodyPropClientPayloadType",
    "ReposOwnerRepoEnvironmentsGetResponse200Type",
    "ReposOwnerRepoEnvironmentsEnvironmentNamePutBodyPropReviewersItemsType",
    "ReposOwnerRepoEnvironmentsEnvironmentNamePutBodyType",
    "ReposOwnerRepoEnvironmentsEnvironmentNameDeploymentBranchPoliciesGetResponse200Type",
    "ReposOwnerRepoEnvironmentsEnvironmentNameDeploymentProtectionRulesGetResponse200Type",
    "ReposOwnerRepoEnvironmentsEnvironmentNameDeploymentProtectionRulesPostBodyType",
    "ReposOwnerRepoEnvironmentsEnvironmentNameDeploymentProtectionRulesAppsGetResponse200Type",
    "ReposOwnerRepoForksPostBodyType",
    "ReposOwnerRepoGitBlobsPostBodyType",
    "ReposOwnerRepoGitCommitsPostBodyType",
    "ReposOwnerRepoGitCommitsPostBodyPropAuthorType",
    "ReposOwnerRepoGitCommitsPostBodyPropCommitterType",
    "ReposOwnerRepoGitRefsPostBodyType",
    "ReposOwnerRepoGitRefsRefPatchBodyType",
    "ReposOwnerRepoGitTagsPostBodyType",
    "ReposOwnerRepoGitTagsPostBodyPropTaggerType",
    "ReposOwnerRepoGitTreesPostBodyType",
    "ReposOwnerRepoGitTreesPostBodyPropTreeItemsType",
    "ReposOwnerRepoHooksPostBodyPropConfigType",
    "ReposOwnerRepoHooksPostBodyType",
    "ReposOwnerRepoHooksHookIdPatchBodyType",
    "ReposOwnerRepoHooksHookIdPatchBodyPropConfigType",
    "ReposOwnerRepoHooksHookIdConfigPatchBodyType",
    "ReposOwnerRepoImportPutBodyType",
    "ReposOwnerRepoImportPatchBodyType",
    "ReposOwnerRepoImportAuthorsAuthorIdPatchBodyType",
    "ReposOwnerRepoImportLfsPatchBodyType",
    "ReposOwnerRepoInteractionLimitsGetResponse200Anyof1Type",
    "ReposOwnerRepoInvitationsInvitationIdPatchBodyType",
    "ReposOwnerRepoIssuesPostBodyType",
    "ReposOwnerRepoIssuesPostBodyPropLabelsItemsOneof1Type",
    "ReposOwnerRepoIssuesCommentsCommentIdPatchBodyType",
    "ReposOwnerRepoIssuesCommentsCommentIdReactionsPostBodyType",
    "ReposOwnerRepoIssuesIssueNumberPatchBodyType",
    "ReposOwnerRepoIssuesIssueNumberPatchBodyPropLabelsItemsOneof1Type",
    "ReposOwnerRepoIssuesIssueNumberAssigneesPostBodyType",
    "ReposOwnerRepoIssuesIssueNumberAssigneesDeleteBodyType",
    "ReposOwnerRepoIssuesIssueNumberCommentsPostBodyType",
    "ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof0Type",
    "ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof2Type",
    "ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof2PropLabelsItemsType",
    "ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof3ItemsType",
    "ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof0Type",
    "ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof2Type",
    "ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof2PropLabelsItemsType",
    "ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof3ItemsType",
    "ReposOwnerRepoIssuesIssueNumberLockPutBodyType",
    "ReposOwnerRepoIssuesIssueNumberReactionsPostBodyType",
    "ReposOwnerRepoKeysPostBodyType",
    "ReposOwnerRepoLabelsPostBodyType",
    "ReposOwnerRepoLabelsNamePatchBodyType",
    "ReposOwnerRepoMergeUpstreamPostBodyType",
    "ReposOwnerRepoMergesPostBodyType",
    "ReposOwnerRepoMilestonesPostBodyType",
    "ReposOwnerRepoMilestonesMilestoneNumberPatchBodyType",
    "ReposOwnerRepoNotificationsPutBodyType",
    "ReposOwnerRepoNotificationsPutResponse202Type",
    "ReposOwnerRepoPagesPutBodyPropSourceAnyof1Type",
    "ReposOwnerRepoPagesPutBodyAnyof0Type",
    "ReposOwnerRepoPagesPutBodyAnyof1Type",
    "ReposOwnerRepoPagesPutBodyAnyof2Type",
    "ReposOwnerRepoPagesPutBodyAnyof3Type",
    "ReposOwnerRepoPagesPutBodyAnyof4Type",
    "ReposOwnerRepoPagesPostBodyPropSourceType",
    "ReposOwnerRepoPagesPostBodyAnyof0Type",
    "ReposOwnerRepoPagesPostBodyAnyof1Type",
    "ReposOwnerRepoPagesDeploymentPostBodyType",
    "ReposOwnerRepoProjectsPostBodyType",
    "ReposOwnerRepoPullsPostBodyType",
    "ReposOwnerRepoPullsCommentsCommentIdPatchBodyType",
    "ReposOwnerRepoPullsCommentsCommentIdReactionsPostBodyType",
    "ReposOwnerRepoPullsPullNumberPatchBodyType",
    "ReposOwnerRepoPullsPullNumberCodespacesPostBodyType",
    "ReposOwnerRepoPullsPullNumberCommentsPostBodyType",
    "ReposOwnerRepoPullsPullNumberCommentsCommentIdRepliesPostBodyType",
    "ReposOwnerRepoPullsPullNumberMergePutBodyType",
    "ReposOwnerRepoPullsPullNumberMergePutResponse405Type",
    "ReposOwnerRepoPullsPullNumberMergePutResponse409Type",
    "ReposOwnerRepoPullsPullNumberRequestedReviewersPostBodyAnyof0Type",
    "ReposOwnerRepoPullsPullNumberRequestedReviewersPostBodyAnyof1Type",
    "ReposOwnerRepoPullsPullNumberRequestedReviewersDeleteBodyType",
    "ReposOwnerRepoPullsPullNumberReviewsPostBodyType",
    "ReposOwnerRepoPullsPullNumberReviewsPostBodyPropCommentsItemsType",
    "ReposOwnerRepoPullsPullNumberReviewsReviewIdPutBodyType",
    "ReposOwnerRepoPullsPullNumberReviewsReviewIdDismissalsPutBodyType",
    "ReposOwnerRepoPullsPullNumberReviewsReviewIdEventsPostBodyType",
    "ReposOwnerRepoPullsPullNumberUpdateBranchPutBodyType",
    "ReposOwnerRepoPullsPullNumberUpdateBranchPutResponse202Type",
    "ReposOwnerRepoReleasesPostBodyType",
    "ReposOwnerRepoReleasesAssetsAssetIdPatchBodyType",
    "ReposOwnerRepoReleasesGenerateNotesPostBodyType",
    "ReposOwnerRepoReleasesReleaseIdPatchBodyType",
    "ReposOwnerRepoReleasesReleaseIdReactionsPostBodyType",
    "ReposOwnerRepoRulesetsPostBodyType",
    "ReposOwnerRepoRulesetsRulesetIdPutBodyType",
    "ReposOwnerRepoSecretScanningAlertsAlertNumberPatchBodyType",
    "ReposOwnerRepoStatusesShaPostBodyType",
    "ReposOwnerRepoSubscriptionPutBodyType",
    "ReposOwnerRepoTagsProtectionPostBodyType",
    "ReposOwnerRepoTopicsPutBodyType",
    "ReposOwnerRepoTransferPostBodyType",
    "ReposTemplateOwnerTemplateRepoGeneratePostBodyType",
    "RepositoriesRepositoryIdEnvironmentsEnvironmentNameSecretsGetResponse200Type",
    "RepositoriesRepositoryIdEnvironmentsEnvironmentNameSecretsSecretNamePutBodyType",
    "RepositoriesRepositoryIdEnvironmentsEnvironmentNameVariablesGetResponse200Type",
    "RepositoriesRepositoryIdEnvironmentsEnvironmentNameVariablesPostBodyType",
    "RepositoriesRepositoryIdEnvironmentsEnvironmentNameVariablesNamePatchBodyType",
    "SearchCodeGetResponse200Type",
    "SearchCommitsGetResponse200Type",
    "SearchIssuesGetResponse200Type",
    "SearchLabelsGetResponse200Type",
    "SearchRepositoriesGetResponse200Type",
    "SearchTopicsGetResponse200Type",
    "SearchUsersGetResponse200Type",
    "TeamsTeamIdPatchBodyType",
    "TeamsTeamIdDiscussionsPostBodyType",
    "TeamsTeamIdDiscussionsDiscussionNumberPatchBodyType",
    "TeamsTeamIdDiscussionsDiscussionNumberCommentsPostBodyType",
    "TeamsTeamIdDiscussionsDiscussionNumberCommentsCommentNumberPatchBodyType",
    "TeamsTeamIdDiscussionsDiscussionNumberCommentsCommentNumberReactionsPostBodyType",
    "TeamsTeamIdDiscussionsDiscussionNumberReactionsPostBodyType",
    "TeamsTeamIdMembershipsUsernamePutBodyType",
    "TeamsTeamIdProjectsProjectIdPutBodyType",
    "TeamsTeamIdProjectsProjectIdPutResponse403Type",
    "TeamsTeamIdReposOwnerRepoPutBodyType",
    "UserPatchBodyType",
    "UserCodespacesGetResponse200Type",
    "UserCodespacesPostBodyOneof0Type",
    "UserCodespacesPostBodyOneof1Type",
    "UserCodespacesPostBodyOneof1PropPullRequestType",
    "UserCodespacesSecretsGetResponse200Type",
    "UserCodespacesSecretsSecretNamePutBodyType",
    "UserCodespacesSecretsSecretNameRepositoriesGetResponse200Type",
    "UserCodespacesSecretsSecretNameRepositoriesPutBodyType",
    "UserCodespacesCodespaceNamePatchBodyType",
    "UserCodespacesCodespaceNameMachinesGetResponse200Type",
    "UserCodespacesCodespaceNamePublishPostBodyType",
    "UserEmailVisibilityPatchBodyType",
    "UserEmailsPostBodyOneof0Type",
    "UserEmailsDeleteBodyOneof0Type",
    "UserGpgKeysPostBodyType",
    "UserInstallationsGetResponse200Type",
    "UserInstallationsInstallationIdRepositoriesGetResponse200Type",
    "UserInteractionLimitsGetResponse200Anyof1Type",
    "UserKeysPostBodyType",
    "UserMembershipsOrgsOrgPatchBodyType",
    "UserMigrationsPostBodyType",
    "UserProjectsPostBodyType",
    "UserReposPostBodyType",
    "UserSocialAccountsPostBodyType",
    "UserSocialAccountsDeleteBodyType",
    "UserSshSigningKeysPostBodyType",
]
