"""DO NOT EDIT THIS FILE!

This file is automatically @generated by githubkit using the follow command:

bash ./scripts/run-codegen.sh

See https://github.com/github/rest-api-description for more information.
"""

from __future__ import annotations

from weakref import ref
from typing import TYPE_CHECKING, Dict, Literal, Optional, overload

from pydantic import BaseModel

from githubkit.typing import Missing, UnsetType
from githubkit.utils import UNSET, exclude_unset
from githubkit.compat import model_dump, type_validate_python

if TYPE_CHECKING:
    from datetime import datetime
    from typing import List, Union, Literal

    from githubkit import GitHubCore
    from githubkit.utils import UNSET
    from githubkit.typing import Missing
    from githubkit.response import Response

    from ..types import (
        CodeScanningDefaultSetupUpdateType,
        ReposOwnerRepoCodeScanningSarifsPostBodyType,
        ReposOwnerRepoCodeScanningAlertsAlertNumberPatchBodyType,
        ReposOwnerRepoCodeScanningCodeqlVariantAnalysesPostBodyOneof0Type,
        ReposOwnerRepoCodeScanningCodeqlVariantAnalysesPostBodyOneof1Type,
        ReposOwnerRepoCodeScanningCodeqlVariantAnalysesPostBodyOneof2Type,
    )
    from ..models import (
        EmptyObject,
        CodeScanningAlert,
        CodeScanningAnalysis,
        CodeScanningAlertItems,
        CodeScanningDefaultSetup,
        CodeScanningSarifsStatus,
        CodeScanningAlertInstance,
        CodeScanningSarifsReceipt,
        CodeScanningCodeqlDatabase,
        CodeScanningVariantAnalysis,
        CodeScanningAnalysisDeletion,
        CodeScanningOrganizationAlertItems,
        CodeScanningVariantAnalysisRepoTask,
    )


class CodeScanningClient:
    _REST_API_VERSION = "2022-11-28"

    def __init__(self, github: GitHubCore):
        self._github_ref = ref(github)

    @property
    def _github(self) -> GitHubCore:
        if g := self._github_ref():
            return g
        raise RuntimeError(
            "GitHub client has already been collected. "
            "Do not use this client after the client has been collected."
        )

    def list_alerts_for_org(
        self,
        org: str,
        tool_name: Missing[str] = UNSET,
        tool_guid: Missing[Union[str, None]] = UNSET,
        before: Missing[str] = UNSET,
        after: Missing[str] = UNSET,
        page: Missing[int] = UNSET,
        per_page: Missing[int] = UNSET,
        direction: Missing[Literal["asc", "desc"]] = UNSET,
        state: Missing[Literal["open", "closed", "dismissed", "fixed"]] = UNSET,
        sort: Missing[Literal["created", "updated"]] = UNSET,
        severity: Missing[
            Literal["critical", "high", "medium", "low", "warning", "note", "error"]
        ] = UNSET,
        *,
        headers: Optional[Dict[str, str]] = None,
    ) -> Response[List[CodeScanningOrganizationAlertItems]]:
        """See also: https://docs.github.com/rest/code-scanning/code-scanning#list-code-scanning-alerts-for-an-organization"""

        from typing import List

        from ..models import (
            BasicError,
            CodeScanningOrganizationAlertItems,
            EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
        )

        url = f"/orgs/{org}/code-scanning/alerts"

        params = {
            "tool_name": tool_name,
            "tool_guid": tool_guid,
            "before": before,
            "after": after,
            "page": page,
            "per_page": per_page,
            "direction": direction,
            "state": state,
            "sort": sort,
            "severity": severity,
        }

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return self._github.request(
            "GET",
            url,
            params=exclude_unset(params),
            headers=exclude_unset(headers),
            response_model=List[CodeScanningOrganizationAlertItems],
            error_models={
                "404": BasicError,
                "503": EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
            },
        )

    async def async_list_alerts_for_org(
        self,
        org: str,
        tool_name: Missing[str] = UNSET,
        tool_guid: Missing[Union[str, None]] = UNSET,
        before: Missing[str] = UNSET,
        after: Missing[str] = UNSET,
        page: Missing[int] = UNSET,
        per_page: Missing[int] = UNSET,
        direction: Missing[Literal["asc", "desc"]] = UNSET,
        state: Missing[Literal["open", "closed", "dismissed", "fixed"]] = UNSET,
        sort: Missing[Literal["created", "updated"]] = UNSET,
        severity: Missing[
            Literal["critical", "high", "medium", "low", "warning", "note", "error"]
        ] = UNSET,
        *,
        headers: Optional[Dict[str, str]] = None,
    ) -> Response[List[CodeScanningOrganizationAlertItems]]:
        """See also: https://docs.github.com/rest/code-scanning/code-scanning#list-code-scanning-alerts-for-an-organization"""

        from typing import List

        from ..models import (
            BasicError,
            CodeScanningOrganizationAlertItems,
            EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
        )

        url = f"/orgs/{org}/code-scanning/alerts"

        params = {
            "tool_name": tool_name,
            "tool_guid": tool_guid,
            "before": before,
            "after": after,
            "page": page,
            "per_page": per_page,
            "direction": direction,
            "state": state,
            "sort": sort,
            "severity": severity,
        }

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return await self._github.arequest(
            "GET",
            url,
            params=exclude_unset(params),
            headers=exclude_unset(headers),
            response_model=List[CodeScanningOrganizationAlertItems],
            error_models={
                "404": BasicError,
                "503": EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
            },
        )

    def list_alerts_for_repo(
        self,
        owner: str,
        repo: str,
        tool_name: Missing[str] = UNSET,
        tool_guid: Missing[Union[str, None]] = UNSET,
        page: Missing[int] = UNSET,
        per_page: Missing[int] = UNSET,
        ref: Missing[str] = UNSET,
        direction: Missing[Literal["asc", "desc"]] = UNSET,
        sort: Missing[Literal["created", "updated"]] = UNSET,
        state: Missing[Literal["open", "closed", "dismissed", "fixed"]] = UNSET,
        severity: Missing[
            Literal["critical", "high", "medium", "low", "warning", "note", "error"]
        ] = UNSET,
        *,
        headers: Optional[Dict[str, str]] = None,
    ) -> Response[List[CodeScanningAlertItems]]:
        """See also: https://docs.github.com/rest/code-scanning/code-scanning#list-code-scanning-alerts-for-a-repository"""

        from typing import List

        from ..models import (
            BasicError,
            CodeScanningAlertItems,
            EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
        )

        url = f"/repos/{owner}/{repo}/code-scanning/alerts"

        params = {
            "tool_name": tool_name,
            "tool_guid": tool_guid,
            "page": page,
            "per_page": per_page,
            "ref": ref,
            "direction": direction,
            "sort": sort,
            "state": state,
            "severity": severity,
        }

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return self._github.request(
            "GET",
            url,
            params=exclude_unset(params),
            headers=exclude_unset(headers),
            response_model=List[CodeScanningAlertItems],
            error_models={
                "403": BasicError,
                "404": BasicError,
                "503": EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
            },
        )

    async def async_list_alerts_for_repo(
        self,
        owner: str,
        repo: str,
        tool_name: Missing[str] = UNSET,
        tool_guid: Missing[Union[str, None]] = UNSET,
        page: Missing[int] = UNSET,
        per_page: Missing[int] = UNSET,
        ref: Missing[str] = UNSET,
        direction: Missing[Literal["asc", "desc"]] = UNSET,
        sort: Missing[Literal["created", "updated"]] = UNSET,
        state: Missing[Literal["open", "closed", "dismissed", "fixed"]] = UNSET,
        severity: Missing[
            Literal["critical", "high", "medium", "low", "warning", "note", "error"]
        ] = UNSET,
        *,
        headers: Optional[Dict[str, str]] = None,
    ) -> Response[List[CodeScanningAlertItems]]:
        """See also: https://docs.github.com/rest/code-scanning/code-scanning#list-code-scanning-alerts-for-a-repository"""

        from typing import List

        from ..models import (
            BasicError,
            CodeScanningAlertItems,
            EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
        )

        url = f"/repos/{owner}/{repo}/code-scanning/alerts"

        params = {
            "tool_name": tool_name,
            "tool_guid": tool_guid,
            "page": page,
            "per_page": per_page,
            "ref": ref,
            "direction": direction,
            "sort": sort,
            "state": state,
            "severity": severity,
        }

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return await self._github.arequest(
            "GET",
            url,
            params=exclude_unset(params),
            headers=exclude_unset(headers),
            response_model=List[CodeScanningAlertItems],
            error_models={
                "403": BasicError,
                "404": BasicError,
                "503": EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
            },
        )

    def get_alert(
        self,
        owner: str,
        repo: str,
        alert_number: int,
        *,
        headers: Optional[Dict[str, str]] = None,
    ) -> Response[CodeScanningAlert]:
        """See also: https://docs.github.com/rest/code-scanning/code-scanning#get-a-code-scanning-alert"""

        from ..models import (
            BasicError,
            CodeScanningAlert,
            EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
        )

        url = f"/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return self._github.request(
            "GET",
            url,
            headers=exclude_unset(headers),
            response_model=CodeScanningAlert,
            error_models={
                "403": BasicError,
                "404": BasicError,
                "503": EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
            },
        )

    async def async_get_alert(
        self,
        owner: str,
        repo: str,
        alert_number: int,
        *,
        headers: Optional[Dict[str, str]] = None,
    ) -> Response[CodeScanningAlert]:
        """See also: https://docs.github.com/rest/code-scanning/code-scanning#get-a-code-scanning-alert"""

        from ..models import (
            BasicError,
            CodeScanningAlert,
            EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
        )

        url = f"/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return await self._github.arequest(
            "GET",
            url,
            headers=exclude_unset(headers),
            response_model=CodeScanningAlert,
            error_models={
                "403": BasicError,
                "404": BasicError,
                "503": EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
            },
        )

    @overload
    def update_alert(
        self,
        owner: str,
        repo: str,
        alert_number: int,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: ReposOwnerRepoCodeScanningAlertsAlertNumberPatchBodyType,
    ) -> Response[CodeScanningAlert]: ...

    @overload
    def update_alert(
        self,
        owner: str,
        repo: str,
        alert_number: int,
        *,
        data: UnsetType = UNSET,
        headers: Optional[Dict[str, str]] = None,
        state: Literal["open", "dismissed"],
        dismissed_reason: Missing[
            Union[None, Literal["false positive", "won't fix", "used in tests"]]
        ] = UNSET,
        dismissed_comment: Missing[Union[str, None]] = UNSET,
    ) -> Response[CodeScanningAlert]: ...

    def update_alert(
        self,
        owner: str,
        repo: str,
        alert_number: int,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: Missing[ReposOwnerRepoCodeScanningAlertsAlertNumberPatchBodyType] = UNSET,
        **kwargs,
    ) -> Response[CodeScanningAlert]:
        """See also: https://docs.github.com/rest/code-scanning/code-scanning#update-a-code-scanning-alert"""

        from ..models import (
            BasicError,
            CodeScanningAlert,
            ReposOwnerRepoCodeScanningAlertsAlertNumberPatchBody,
            EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
        )

        url = f"/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = type_validate_python(
            ReposOwnerRepoCodeScanningAlertsAlertNumberPatchBody, json
        )
        json = model_dump(json) if isinstance(json, BaseModel) else json

        return self._github.request(
            "PATCH",
            url,
            json=exclude_unset(json),
            headers=exclude_unset(headers),
            response_model=CodeScanningAlert,
            error_models={
                "403": BasicError,
                "404": BasicError,
                "503": EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
            },
        )

    @overload
    async def async_update_alert(
        self,
        owner: str,
        repo: str,
        alert_number: int,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: ReposOwnerRepoCodeScanningAlertsAlertNumberPatchBodyType,
    ) -> Response[CodeScanningAlert]: ...

    @overload
    async def async_update_alert(
        self,
        owner: str,
        repo: str,
        alert_number: int,
        *,
        data: UnsetType = UNSET,
        headers: Optional[Dict[str, str]] = None,
        state: Literal["open", "dismissed"],
        dismissed_reason: Missing[
            Union[None, Literal["false positive", "won't fix", "used in tests"]]
        ] = UNSET,
        dismissed_comment: Missing[Union[str, None]] = UNSET,
    ) -> Response[CodeScanningAlert]: ...

    async def async_update_alert(
        self,
        owner: str,
        repo: str,
        alert_number: int,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: Missing[ReposOwnerRepoCodeScanningAlertsAlertNumberPatchBodyType] = UNSET,
        **kwargs,
    ) -> Response[CodeScanningAlert]:
        """See also: https://docs.github.com/rest/code-scanning/code-scanning#update-a-code-scanning-alert"""

        from ..models import (
            BasicError,
            CodeScanningAlert,
            ReposOwnerRepoCodeScanningAlertsAlertNumberPatchBody,
            EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
        )

        url = f"/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = type_validate_python(
            ReposOwnerRepoCodeScanningAlertsAlertNumberPatchBody, json
        )
        json = model_dump(json) if isinstance(json, BaseModel) else json

        return await self._github.arequest(
            "PATCH",
            url,
            json=exclude_unset(json),
            headers=exclude_unset(headers),
            response_model=CodeScanningAlert,
            error_models={
                "403": BasicError,
                "404": BasicError,
                "503": EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
            },
        )

    def list_alert_instances(
        self,
        owner: str,
        repo: str,
        alert_number: int,
        page: Missing[int] = UNSET,
        per_page: Missing[int] = UNSET,
        ref: Missing[str] = UNSET,
        *,
        headers: Optional[Dict[str, str]] = None,
    ) -> Response[List[CodeScanningAlertInstance]]:
        """See also: https://docs.github.com/rest/code-scanning/code-scanning#list-instances-of-a-code-scanning-alert"""

        from typing import List

        from ..models import (
            BasicError,
            CodeScanningAlertInstance,
            EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
        )

        url = f"/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"

        params = {
            "page": page,
            "per_page": per_page,
            "ref": ref,
        }

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return self._github.request(
            "GET",
            url,
            params=exclude_unset(params),
            headers=exclude_unset(headers),
            response_model=List[CodeScanningAlertInstance],
            error_models={
                "403": BasicError,
                "404": BasicError,
                "503": EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
            },
        )

    async def async_list_alert_instances(
        self,
        owner: str,
        repo: str,
        alert_number: int,
        page: Missing[int] = UNSET,
        per_page: Missing[int] = UNSET,
        ref: Missing[str] = UNSET,
        *,
        headers: Optional[Dict[str, str]] = None,
    ) -> Response[List[CodeScanningAlertInstance]]:
        """See also: https://docs.github.com/rest/code-scanning/code-scanning#list-instances-of-a-code-scanning-alert"""

        from typing import List

        from ..models import (
            BasicError,
            CodeScanningAlertInstance,
            EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
        )

        url = f"/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"

        params = {
            "page": page,
            "per_page": per_page,
            "ref": ref,
        }

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return await self._github.arequest(
            "GET",
            url,
            params=exclude_unset(params),
            headers=exclude_unset(headers),
            response_model=List[CodeScanningAlertInstance],
            error_models={
                "403": BasicError,
                "404": BasicError,
                "503": EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
            },
        )

    def list_recent_analyses(
        self,
        owner: str,
        repo: str,
        tool_name: Missing[str] = UNSET,
        tool_guid: Missing[Union[str, None]] = UNSET,
        page: Missing[int] = UNSET,
        per_page: Missing[int] = UNSET,
        ref: Missing[str] = UNSET,
        sarif_id: Missing[str] = UNSET,
        direction: Missing[Literal["asc", "desc"]] = UNSET,
        sort: Missing[Literal["created"]] = UNSET,
        *,
        headers: Optional[Dict[str, str]] = None,
    ) -> Response[List[CodeScanningAnalysis]]:
        """See also: https://docs.github.com/rest/code-scanning/code-scanning#list-code-scanning-analyses-for-a-repository"""

        from typing import List

        from ..models import (
            BasicError,
            CodeScanningAnalysis,
            EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
        )

        url = f"/repos/{owner}/{repo}/code-scanning/analyses"

        params = {
            "tool_name": tool_name,
            "tool_guid": tool_guid,
            "page": page,
            "per_page": per_page,
            "ref": ref,
            "sarif_id": sarif_id,
            "direction": direction,
            "sort": sort,
        }

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return self._github.request(
            "GET",
            url,
            params=exclude_unset(params),
            headers=exclude_unset(headers),
            response_model=List[CodeScanningAnalysis],
            error_models={
                "403": BasicError,
                "404": BasicError,
                "503": EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
            },
        )

    async def async_list_recent_analyses(
        self,
        owner: str,
        repo: str,
        tool_name: Missing[str] = UNSET,
        tool_guid: Missing[Union[str, None]] = UNSET,
        page: Missing[int] = UNSET,
        per_page: Missing[int] = UNSET,
        ref: Missing[str] = UNSET,
        sarif_id: Missing[str] = UNSET,
        direction: Missing[Literal["asc", "desc"]] = UNSET,
        sort: Missing[Literal["created"]] = UNSET,
        *,
        headers: Optional[Dict[str, str]] = None,
    ) -> Response[List[CodeScanningAnalysis]]:
        """See also: https://docs.github.com/rest/code-scanning/code-scanning#list-code-scanning-analyses-for-a-repository"""

        from typing import List

        from ..models import (
            BasicError,
            CodeScanningAnalysis,
            EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
        )

        url = f"/repos/{owner}/{repo}/code-scanning/analyses"

        params = {
            "tool_name": tool_name,
            "tool_guid": tool_guid,
            "page": page,
            "per_page": per_page,
            "ref": ref,
            "sarif_id": sarif_id,
            "direction": direction,
            "sort": sort,
        }

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return await self._github.arequest(
            "GET",
            url,
            params=exclude_unset(params),
            headers=exclude_unset(headers),
            response_model=List[CodeScanningAnalysis],
            error_models={
                "403": BasicError,
                "404": BasicError,
                "503": EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
            },
        )

    def get_analysis(
        self,
        owner: str,
        repo: str,
        analysis_id: int,
        *,
        headers: Optional[Dict[str, str]] = None,
    ) -> Response[CodeScanningAnalysis]:
        """See also: https://docs.github.com/rest/code-scanning/code-scanning#get-a-code-scanning-analysis-for-a-repository"""

        from ..models import (
            BasicError,
            CodeScanningAnalysis,
            EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
        )

        url = f"/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return self._github.request(
            "GET",
            url,
            headers=exclude_unset(headers),
            response_model=CodeScanningAnalysis,
            error_models={
                "403": BasicError,
                "404": BasicError,
                "503": EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
            },
        )

    async def async_get_analysis(
        self,
        owner: str,
        repo: str,
        analysis_id: int,
        *,
        headers: Optional[Dict[str, str]] = None,
    ) -> Response[CodeScanningAnalysis]:
        """See also: https://docs.github.com/rest/code-scanning/code-scanning#get-a-code-scanning-analysis-for-a-repository"""

        from ..models import (
            BasicError,
            CodeScanningAnalysis,
            EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
        )

        url = f"/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return await self._github.arequest(
            "GET",
            url,
            headers=exclude_unset(headers),
            response_model=CodeScanningAnalysis,
            error_models={
                "403": BasicError,
                "404": BasicError,
                "503": EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
            },
        )

    def delete_analysis(
        self,
        owner: str,
        repo: str,
        analysis_id: int,
        confirm_delete: Missing[Union[str, None]] = UNSET,
        *,
        headers: Optional[Dict[str, str]] = None,
    ) -> Response[CodeScanningAnalysisDeletion]:
        """See also: https://docs.github.com/rest/code-scanning/code-scanning#delete-a-code-scanning-analysis-from-a-repository"""

        from ..models import (
            BasicError,
            CodeScanningAnalysisDeletion,
            EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
        )

        url = f"/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"

        params = {
            "confirm_delete": confirm_delete,
        }

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return self._github.request(
            "DELETE",
            url,
            params=exclude_unset(params),
            headers=exclude_unset(headers),
            response_model=CodeScanningAnalysisDeletion,
            error_models={
                "400": BasicError,
                "403": BasicError,
                "404": BasicError,
                "503": EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
            },
        )

    async def async_delete_analysis(
        self,
        owner: str,
        repo: str,
        analysis_id: int,
        confirm_delete: Missing[Union[str, None]] = UNSET,
        *,
        headers: Optional[Dict[str, str]] = None,
    ) -> Response[CodeScanningAnalysisDeletion]:
        """See also: https://docs.github.com/rest/code-scanning/code-scanning#delete-a-code-scanning-analysis-from-a-repository"""

        from ..models import (
            BasicError,
            CodeScanningAnalysisDeletion,
            EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
        )

        url = f"/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"

        params = {
            "confirm_delete": confirm_delete,
        }

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return await self._github.arequest(
            "DELETE",
            url,
            params=exclude_unset(params),
            headers=exclude_unset(headers),
            response_model=CodeScanningAnalysisDeletion,
            error_models={
                "400": BasicError,
                "403": BasicError,
                "404": BasicError,
                "503": EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
            },
        )

    def list_codeql_databases(
        self,
        owner: str,
        repo: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ) -> Response[List[CodeScanningCodeqlDatabase]]:
        """See also: https://docs.github.com/rest/code-scanning/code-scanning#list-codeql-databases-for-a-repository"""

        from typing import List

        from ..models import (
            BasicError,
            CodeScanningCodeqlDatabase,
            EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
        )

        url = f"/repos/{owner}/{repo}/code-scanning/codeql/databases"

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return self._github.request(
            "GET",
            url,
            headers=exclude_unset(headers),
            response_model=List[CodeScanningCodeqlDatabase],
            error_models={
                "403": BasicError,
                "404": BasicError,
                "503": EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
            },
        )

    async def async_list_codeql_databases(
        self,
        owner: str,
        repo: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ) -> Response[List[CodeScanningCodeqlDatabase]]:
        """See also: https://docs.github.com/rest/code-scanning/code-scanning#list-codeql-databases-for-a-repository"""

        from typing import List

        from ..models import (
            BasicError,
            CodeScanningCodeqlDatabase,
            EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
        )

        url = f"/repos/{owner}/{repo}/code-scanning/codeql/databases"

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return await self._github.arequest(
            "GET",
            url,
            headers=exclude_unset(headers),
            response_model=List[CodeScanningCodeqlDatabase],
            error_models={
                "403": BasicError,
                "404": BasicError,
                "503": EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
            },
        )

    def get_codeql_database(
        self,
        owner: str,
        repo: str,
        language: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ) -> Response[CodeScanningCodeqlDatabase]:
        """See also: https://docs.github.com/rest/code-scanning/code-scanning#get-a-codeql-database-for-a-repository"""

        from ..models import (
            BasicError,
            CodeScanningCodeqlDatabase,
            EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
        )

        url = f"/repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return self._github.request(
            "GET",
            url,
            headers=exclude_unset(headers),
            response_model=CodeScanningCodeqlDatabase,
            error_models={
                "403": BasicError,
                "404": BasicError,
                "503": EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
            },
        )

    async def async_get_codeql_database(
        self,
        owner: str,
        repo: str,
        language: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ) -> Response[CodeScanningCodeqlDatabase]:
        """See also: https://docs.github.com/rest/code-scanning/code-scanning#get-a-codeql-database-for-a-repository"""

        from ..models import (
            BasicError,
            CodeScanningCodeqlDatabase,
            EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
        )

        url = f"/repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return await self._github.arequest(
            "GET",
            url,
            headers=exclude_unset(headers),
            response_model=CodeScanningCodeqlDatabase,
            error_models={
                "403": BasicError,
                "404": BasicError,
                "503": EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
            },
        )

    @overload
    def create_variant_analysis(
        self,
        owner: str,
        repo: str,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: Union[
            ReposOwnerRepoCodeScanningCodeqlVariantAnalysesPostBodyOneof0Type,
            ReposOwnerRepoCodeScanningCodeqlVariantAnalysesPostBodyOneof1Type,
            ReposOwnerRepoCodeScanningCodeqlVariantAnalysesPostBodyOneof2Type,
        ],
    ) -> Response[CodeScanningVariantAnalysis]: ...

    @overload
    def create_variant_analysis(
        self,
        owner: str,
        repo: str,
        *,
        data: UnsetType = UNSET,
        headers: Optional[Dict[str, str]] = None,
        language: Literal[
            "cpp", "csharp", "go", "java", "javascript", "python", "ruby", "swift"
        ],
        query_pack: str,
        repositories: List[str],
        repository_lists: Missing[List[str]] = UNSET,
        repository_owners: Missing[List[str]] = UNSET,
    ) -> Response[CodeScanningVariantAnalysis]: ...

    @overload
    def create_variant_analysis(
        self,
        owner: str,
        repo: str,
        *,
        data: UnsetType = UNSET,
        headers: Optional[Dict[str, str]] = None,
        language: Literal[
            "cpp", "csharp", "go", "java", "javascript", "python", "ruby", "swift"
        ],
        query_pack: str,
        repositories: Missing[List[str]] = UNSET,
        repository_lists: List[str],
        repository_owners: Missing[List[str]] = UNSET,
    ) -> Response[CodeScanningVariantAnalysis]: ...

    @overload
    def create_variant_analysis(
        self,
        owner: str,
        repo: str,
        *,
        data: UnsetType = UNSET,
        headers: Optional[Dict[str, str]] = None,
        language: Literal[
            "cpp", "csharp", "go", "java", "javascript", "python", "ruby", "swift"
        ],
        query_pack: str,
        repositories: Missing[List[str]] = UNSET,
        repository_lists: Missing[List[str]] = UNSET,
        repository_owners: List[str],
    ) -> Response[CodeScanningVariantAnalysis]: ...

    def create_variant_analysis(
        self,
        owner: str,
        repo: str,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: Missing[
            Union[
                ReposOwnerRepoCodeScanningCodeqlVariantAnalysesPostBodyOneof0Type,
                ReposOwnerRepoCodeScanningCodeqlVariantAnalysesPostBodyOneof1Type,
                ReposOwnerRepoCodeScanningCodeqlVariantAnalysesPostBodyOneof2Type,
            ]
        ] = UNSET,
        **kwargs,
    ) -> Response[CodeScanningVariantAnalysis]:
        """See also: https://docs.github.com/rest/code-scanning/code-scanning#create-a-codeql-variant-analysis"""

        from typing import Union

        from ..models import (
            BasicError,
            CodeScanningVariantAnalysis,
            EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
            ReposOwnerRepoCodeScanningCodeqlVariantAnalysesPostBodyOneof0,
            ReposOwnerRepoCodeScanningCodeqlVariantAnalysesPostBodyOneof1,
            ReposOwnerRepoCodeScanningCodeqlVariantAnalysesPostBodyOneof2,
        )

        url = f"/repos/{owner}/{repo}/code-scanning/codeql/variant-analyses"

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = type_validate_python(
            Union[
                ReposOwnerRepoCodeScanningCodeqlVariantAnalysesPostBodyOneof0,
                ReposOwnerRepoCodeScanningCodeqlVariantAnalysesPostBodyOneof1,
                ReposOwnerRepoCodeScanningCodeqlVariantAnalysesPostBodyOneof2,
            ],
            json,
        )
        json = model_dump(json) if isinstance(json, BaseModel) else json

        return self._github.request(
            "POST",
            url,
            json=exclude_unset(json),
            headers=exclude_unset(headers),
            response_model=CodeScanningVariantAnalysis,
            error_models={
                "404": BasicError,
                "422": BasicError,
                "503": EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
            },
        )

    @overload
    async def async_create_variant_analysis(
        self,
        owner: str,
        repo: str,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: Union[
            ReposOwnerRepoCodeScanningCodeqlVariantAnalysesPostBodyOneof0Type,
            ReposOwnerRepoCodeScanningCodeqlVariantAnalysesPostBodyOneof1Type,
            ReposOwnerRepoCodeScanningCodeqlVariantAnalysesPostBodyOneof2Type,
        ],
    ) -> Response[CodeScanningVariantAnalysis]: ...

    @overload
    async def async_create_variant_analysis(
        self,
        owner: str,
        repo: str,
        *,
        data: UnsetType = UNSET,
        headers: Optional[Dict[str, str]] = None,
        language: Literal[
            "cpp", "csharp", "go", "java", "javascript", "python", "ruby", "swift"
        ],
        query_pack: str,
        repositories: List[str],
        repository_lists: Missing[List[str]] = UNSET,
        repository_owners: Missing[List[str]] = UNSET,
    ) -> Response[CodeScanningVariantAnalysis]: ...

    @overload
    async def async_create_variant_analysis(
        self,
        owner: str,
        repo: str,
        *,
        data: UnsetType = UNSET,
        headers: Optional[Dict[str, str]] = None,
        language: Literal[
            "cpp", "csharp", "go", "java", "javascript", "python", "ruby", "swift"
        ],
        query_pack: str,
        repositories: Missing[List[str]] = UNSET,
        repository_lists: List[str],
        repository_owners: Missing[List[str]] = UNSET,
    ) -> Response[CodeScanningVariantAnalysis]: ...

    @overload
    async def async_create_variant_analysis(
        self,
        owner: str,
        repo: str,
        *,
        data: UnsetType = UNSET,
        headers: Optional[Dict[str, str]] = None,
        language: Literal[
            "cpp", "csharp", "go", "java", "javascript", "python", "ruby", "swift"
        ],
        query_pack: str,
        repositories: Missing[List[str]] = UNSET,
        repository_lists: Missing[List[str]] = UNSET,
        repository_owners: List[str],
    ) -> Response[CodeScanningVariantAnalysis]: ...

    async def async_create_variant_analysis(
        self,
        owner: str,
        repo: str,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: Missing[
            Union[
                ReposOwnerRepoCodeScanningCodeqlVariantAnalysesPostBodyOneof0Type,
                ReposOwnerRepoCodeScanningCodeqlVariantAnalysesPostBodyOneof1Type,
                ReposOwnerRepoCodeScanningCodeqlVariantAnalysesPostBodyOneof2Type,
            ]
        ] = UNSET,
        **kwargs,
    ) -> Response[CodeScanningVariantAnalysis]:
        """See also: https://docs.github.com/rest/code-scanning/code-scanning#create-a-codeql-variant-analysis"""

        from typing import Union

        from ..models import (
            BasicError,
            CodeScanningVariantAnalysis,
            EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
            ReposOwnerRepoCodeScanningCodeqlVariantAnalysesPostBodyOneof0,
            ReposOwnerRepoCodeScanningCodeqlVariantAnalysesPostBodyOneof1,
            ReposOwnerRepoCodeScanningCodeqlVariantAnalysesPostBodyOneof2,
        )

        url = f"/repos/{owner}/{repo}/code-scanning/codeql/variant-analyses"

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = type_validate_python(
            Union[
                ReposOwnerRepoCodeScanningCodeqlVariantAnalysesPostBodyOneof0,
                ReposOwnerRepoCodeScanningCodeqlVariantAnalysesPostBodyOneof1,
                ReposOwnerRepoCodeScanningCodeqlVariantAnalysesPostBodyOneof2,
            ],
            json,
        )
        json = model_dump(json) if isinstance(json, BaseModel) else json

        return await self._github.arequest(
            "POST",
            url,
            json=exclude_unset(json),
            headers=exclude_unset(headers),
            response_model=CodeScanningVariantAnalysis,
            error_models={
                "404": BasicError,
                "422": BasicError,
                "503": EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
            },
        )

    def get_variant_analysis(
        self,
        owner: str,
        repo: str,
        codeql_variant_analysis_id: int,
        *,
        headers: Optional[Dict[str, str]] = None,
    ) -> Response[CodeScanningVariantAnalysis]:
        """See also: https://docs.github.com/rest/code-scanning/code-scanning#get-the-summary-of-a-codeql-variant-analysis"""

        from ..models import (
            BasicError,
            CodeScanningVariantAnalysis,
            EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
        )

        url = f"/repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}"

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return self._github.request(
            "GET",
            url,
            headers=exclude_unset(headers),
            response_model=CodeScanningVariantAnalysis,
            error_models={
                "404": BasicError,
                "503": EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
            },
        )

    async def async_get_variant_analysis(
        self,
        owner: str,
        repo: str,
        codeql_variant_analysis_id: int,
        *,
        headers: Optional[Dict[str, str]] = None,
    ) -> Response[CodeScanningVariantAnalysis]:
        """See also: https://docs.github.com/rest/code-scanning/code-scanning#get-the-summary-of-a-codeql-variant-analysis"""

        from ..models import (
            BasicError,
            CodeScanningVariantAnalysis,
            EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
        )

        url = f"/repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}"

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return await self._github.arequest(
            "GET",
            url,
            headers=exclude_unset(headers),
            response_model=CodeScanningVariantAnalysis,
            error_models={
                "404": BasicError,
                "503": EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
            },
        )

    def get_variant_analysis_repo_task(
        self,
        owner: str,
        repo: str,
        codeql_variant_analysis_id: int,
        repo_owner: str,
        repo_name: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ) -> Response[CodeScanningVariantAnalysisRepoTask]:
        """See also: https://docs.github.com/rest/code-scanning/code-scanning#get-the-analysis-status-of-a-repository-in-a-codeql-variant-analysis"""

        from ..models import (
            BasicError,
            CodeScanningVariantAnalysisRepoTask,
            EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
        )

        url = f"/repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}/repos/{repo_owner}/{repo_name}"

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return self._github.request(
            "GET",
            url,
            headers=exclude_unset(headers),
            response_model=CodeScanningVariantAnalysisRepoTask,
            error_models={
                "404": BasicError,
                "503": EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
            },
        )

    async def async_get_variant_analysis_repo_task(
        self,
        owner: str,
        repo: str,
        codeql_variant_analysis_id: int,
        repo_owner: str,
        repo_name: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ) -> Response[CodeScanningVariantAnalysisRepoTask]:
        """See also: https://docs.github.com/rest/code-scanning/code-scanning#get-the-analysis-status-of-a-repository-in-a-codeql-variant-analysis"""

        from ..models import (
            BasicError,
            CodeScanningVariantAnalysisRepoTask,
            EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
        )

        url = f"/repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}/repos/{repo_owner}/{repo_name}"

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return await self._github.arequest(
            "GET",
            url,
            headers=exclude_unset(headers),
            response_model=CodeScanningVariantAnalysisRepoTask,
            error_models={
                "404": BasicError,
                "503": EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
            },
        )

    def get_default_setup(
        self,
        owner: str,
        repo: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ) -> Response[CodeScanningDefaultSetup]:
        """See also: https://docs.github.com/rest/code-scanning/code-scanning#get-a-code-scanning-default-setup-configuration"""

        from ..models import (
            BasicError,
            CodeScanningDefaultSetup,
            EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
        )

        url = f"/repos/{owner}/{repo}/code-scanning/default-setup"

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return self._github.request(
            "GET",
            url,
            headers=exclude_unset(headers),
            response_model=CodeScanningDefaultSetup,
            error_models={
                "403": BasicError,
                "404": BasicError,
                "503": EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
            },
        )

    async def async_get_default_setup(
        self,
        owner: str,
        repo: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ) -> Response[CodeScanningDefaultSetup]:
        """See also: https://docs.github.com/rest/code-scanning/code-scanning#get-a-code-scanning-default-setup-configuration"""

        from ..models import (
            BasicError,
            CodeScanningDefaultSetup,
            EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
        )

        url = f"/repos/{owner}/{repo}/code-scanning/default-setup"

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return await self._github.arequest(
            "GET",
            url,
            headers=exclude_unset(headers),
            response_model=CodeScanningDefaultSetup,
            error_models={
                "403": BasicError,
                "404": BasicError,
                "503": EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
            },
        )

    @overload
    def update_default_setup(
        self,
        owner: str,
        repo: str,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: CodeScanningDefaultSetupUpdateType,
    ) -> Response[EmptyObject]: ...

    @overload
    def update_default_setup(
        self,
        owner: str,
        repo: str,
        *,
        data: UnsetType = UNSET,
        headers: Optional[Dict[str, str]] = None,
        state: Missing[Literal["configured", "not-configured"]] = UNSET,
        query_suite: Missing[Literal["default", "extended"]] = UNSET,
        languages: Missing[
            List[
                Literal[
                    "c-cpp",
                    "csharp",
                    "go",
                    "java-kotlin",
                    "javascript-typescript",
                    "python",
                    "ruby",
                    "swift",
                ]
            ]
        ] = UNSET,
    ) -> Response[EmptyObject]: ...

    def update_default_setup(
        self,
        owner: str,
        repo: str,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: Missing[CodeScanningDefaultSetupUpdateType] = UNSET,
        **kwargs,
    ) -> Response[EmptyObject]:
        """See also: https://docs.github.com/rest/code-scanning/code-scanning#update-a-code-scanning-default-setup-configuration"""

        from ..models import (
            BasicError,
            EmptyObject,
            CodeScanningDefaultSetupUpdate,
            EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
        )

        url = f"/repos/{owner}/{repo}/code-scanning/default-setup"

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = type_validate_python(CodeScanningDefaultSetupUpdate, json)
        json = model_dump(json) if isinstance(json, BaseModel) else json

        return self._github.request(
            "PATCH",
            url,
            json=exclude_unset(json),
            headers=exclude_unset(headers),
            response_model=EmptyObject,
            error_models={
                "403": BasicError,
                "404": BasicError,
                "409": BasicError,
                "503": EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
            },
        )

    @overload
    async def async_update_default_setup(
        self,
        owner: str,
        repo: str,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: CodeScanningDefaultSetupUpdateType,
    ) -> Response[EmptyObject]: ...

    @overload
    async def async_update_default_setup(
        self,
        owner: str,
        repo: str,
        *,
        data: UnsetType = UNSET,
        headers: Optional[Dict[str, str]] = None,
        state: Missing[Literal["configured", "not-configured"]] = UNSET,
        query_suite: Missing[Literal["default", "extended"]] = UNSET,
        languages: Missing[
            List[
                Literal[
                    "c-cpp",
                    "csharp",
                    "go",
                    "java-kotlin",
                    "javascript-typescript",
                    "python",
                    "ruby",
                    "swift",
                ]
            ]
        ] = UNSET,
    ) -> Response[EmptyObject]: ...

    async def async_update_default_setup(
        self,
        owner: str,
        repo: str,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: Missing[CodeScanningDefaultSetupUpdateType] = UNSET,
        **kwargs,
    ) -> Response[EmptyObject]:
        """See also: https://docs.github.com/rest/code-scanning/code-scanning#update-a-code-scanning-default-setup-configuration"""

        from ..models import (
            BasicError,
            EmptyObject,
            CodeScanningDefaultSetupUpdate,
            EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
        )

        url = f"/repos/{owner}/{repo}/code-scanning/default-setup"

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = type_validate_python(CodeScanningDefaultSetupUpdate, json)
        json = model_dump(json) if isinstance(json, BaseModel) else json

        return await self._github.arequest(
            "PATCH",
            url,
            json=exclude_unset(json),
            headers=exclude_unset(headers),
            response_model=EmptyObject,
            error_models={
                "403": BasicError,
                "404": BasicError,
                "409": BasicError,
                "503": EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
            },
        )

    @overload
    def upload_sarif(
        self,
        owner: str,
        repo: str,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: ReposOwnerRepoCodeScanningSarifsPostBodyType,
    ) -> Response[CodeScanningSarifsReceipt]: ...

    @overload
    def upload_sarif(
        self,
        owner: str,
        repo: str,
        *,
        data: UnsetType = UNSET,
        headers: Optional[Dict[str, str]] = None,
        commit_sha: str,
        ref: str,
        sarif: str,
        checkout_uri: Missing[str] = UNSET,
        started_at: Missing[datetime] = UNSET,
        tool_name: Missing[str] = UNSET,
        validate_: Missing[bool] = UNSET,
    ) -> Response[CodeScanningSarifsReceipt]: ...

    def upload_sarif(
        self,
        owner: str,
        repo: str,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: Missing[ReposOwnerRepoCodeScanningSarifsPostBodyType] = UNSET,
        **kwargs,
    ) -> Response[CodeScanningSarifsReceipt]:
        """See also: https://docs.github.com/rest/code-scanning/code-scanning#upload-an-analysis-as-sarif-data"""

        from ..models import (
            BasicError,
            CodeScanningSarifsReceipt,
            ReposOwnerRepoCodeScanningSarifsPostBody,
            EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
        )

        url = f"/repos/{owner}/{repo}/code-scanning/sarifs"

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = type_validate_python(ReposOwnerRepoCodeScanningSarifsPostBody, json)
        json = model_dump(json) if isinstance(json, BaseModel) else json

        return self._github.request(
            "POST",
            url,
            json=exclude_unset(json),
            headers=exclude_unset(headers),
            response_model=CodeScanningSarifsReceipt,
            error_models={
                "403": BasicError,
                "404": BasicError,
                "503": EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
            },
        )

    @overload
    async def async_upload_sarif(
        self,
        owner: str,
        repo: str,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: ReposOwnerRepoCodeScanningSarifsPostBodyType,
    ) -> Response[CodeScanningSarifsReceipt]: ...

    @overload
    async def async_upload_sarif(
        self,
        owner: str,
        repo: str,
        *,
        data: UnsetType = UNSET,
        headers: Optional[Dict[str, str]] = None,
        commit_sha: str,
        ref: str,
        sarif: str,
        checkout_uri: Missing[str] = UNSET,
        started_at: Missing[datetime] = UNSET,
        tool_name: Missing[str] = UNSET,
        validate_: Missing[bool] = UNSET,
    ) -> Response[CodeScanningSarifsReceipt]: ...

    async def async_upload_sarif(
        self,
        owner: str,
        repo: str,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: Missing[ReposOwnerRepoCodeScanningSarifsPostBodyType] = UNSET,
        **kwargs,
    ) -> Response[CodeScanningSarifsReceipt]:
        """See also: https://docs.github.com/rest/code-scanning/code-scanning#upload-an-analysis-as-sarif-data"""

        from ..models import (
            BasicError,
            CodeScanningSarifsReceipt,
            ReposOwnerRepoCodeScanningSarifsPostBody,
            EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
        )

        url = f"/repos/{owner}/{repo}/code-scanning/sarifs"

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = type_validate_python(ReposOwnerRepoCodeScanningSarifsPostBody, json)
        json = model_dump(json) if isinstance(json, BaseModel) else json

        return await self._github.arequest(
            "POST",
            url,
            json=exclude_unset(json),
            headers=exclude_unset(headers),
            response_model=CodeScanningSarifsReceipt,
            error_models={
                "403": BasicError,
                "404": BasicError,
                "503": EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
            },
        )

    def get_sarif(
        self,
        owner: str,
        repo: str,
        sarif_id: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ) -> Response[CodeScanningSarifsStatus]:
        """See also: https://docs.github.com/rest/code-scanning/code-scanning#get-information-about-a-sarif-upload"""

        from ..models import (
            BasicError,
            CodeScanningSarifsStatus,
            EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
        )

        url = f"/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return self._github.request(
            "GET",
            url,
            headers=exclude_unset(headers),
            response_model=CodeScanningSarifsStatus,
            error_models={
                "403": BasicError,
                "503": EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
            },
        )

    async def async_get_sarif(
        self,
        owner: str,
        repo: str,
        sarif_id: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ) -> Response[CodeScanningSarifsStatus]:
        """See also: https://docs.github.com/rest/code-scanning/code-scanning#get-information-about-a-sarif-upload"""

        from ..models import (
            BasicError,
            CodeScanningSarifsStatus,
            EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
        )

        url = f"/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return await self._github.arequest(
            "GET",
            url,
            headers=exclude_unset(headers),
            response_model=CodeScanningSarifsStatus,
            error_models={
                "403": BasicError,
                "503": EnterprisesEnterpriseSecretScanningAlertsGetResponse503,
            },
        )
