"""DO NOT EDIT THIS FILE!

This file is automatically @generated by githubkit using the follow command:

python -m codegen && isort . && black .

See https://github.com/github/rest-api-description for more information.
"""


from __future__ import annotations

from datetime import date, datetime
from typing_extensions import Annotated
from typing import Any, List, Union, Literal

from pydantic import Field

from githubkit.utils import UNSET
from githubkit.typing import Missing
from githubkit.compat import GitHubModel, ExtraGitHubModel, model_rebuild


class Root(GitHubModel):
    """Root"""

    current_user_url: str = Field()
    current_user_authorizations_html_url: str = Field()
    authorizations_url: str = Field()
    code_search_url: str = Field()
    commit_search_url: str = Field()
    emails_url: str = Field()
    emojis_url: str = Field()
    events_url: str = Field()
    feeds_url: str = Field()
    followers_url: str = Field()
    following_url: str = Field()
    gists_url: str = Field()
    hub_url: str = Field()
    issue_search_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    label_search_url: str = Field()
    notifications_url: str = Field()
    organization_url: str = Field()
    organization_repositories_url: str = Field()
    organization_teams_url: str = Field()
    public_gists_url: str = Field()
    rate_limit_url: str = Field()
    repository_url: str = Field()
    repository_search_url: str = Field()
    current_user_repositories_url: str = Field()
    starred_url: str = Field()
    starred_gists_url: str = Field()
    topic_search_url: Missing[str] = Field(default=UNSET)
    user_url: str = Field()
    user_organizations_url: str = Field()
    user_repositories_url: str = Field()
    user_search_url: str = Field()


class SimpleUser(GitHubModel):
    """Simple User

    A GitHub user.
    """

    name: Missing[Union[str, None]] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    login: str = Field()
    id: int = Field()
    node_id: str = Field()
    avatar_url: str = Field()
    gravatar_id: Union[str, None] = Field()
    url: str = Field()
    html_url: str = Field()
    followers_url: str = Field()
    following_url: str = Field()
    gists_url: str = Field()
    starred_url: str = Field()
    subscriptions_url: str = Field()
    organizations_url: str = Field()
    repos_url: str = Field()
    events_url: str = Field()
    received_events_url: str = Field()
    type: str = Field()
    site_admin: bool = Field()
    starred_at: Missing[str] = Field(default=UNSET)


class GlobalAdvisory(GitHubModel):
    """GlobalAdvisory

    A GitHub Security Advisory.
    """

    ghsa_id: str = Field(description="The GitHub Security Advisory ID.")
    cve_id: Union[str, None] = Field(
        description="The Common Vulnerabilities and Exposures (CVE) ID."
    )
    url: str = Field(description="The API URL for the advisory.")
    html_url: str = Field(description="The URL for the advisory.")
    repository_advisory_url: Union[str, None] = Field(
        description="The API URL for the repository advisory."
    )
    summary: Annotated[str, Field(max_length=1024)] = Field(
        description="A short summary of the advisory."
    )
    description: Union[Annotated[str, Field(max_length=65535)], None] = Field(
        description="A detailed description of what the advisory entails."
    )
    type: Literal["reviewed", "unreviewed", "malware"] = Field(
        description="The type of advisory."
    )
    severity: Literal["critical", "high", "medium", "low", "unknown"] = Field(
        description="The severity of the advisory."
    )
    source_code_location: Union[str, None] = Field(
        description="The URL of the advisory's source code."
    )
    identifiers: Union[List[GlobalAdvisoryPropIdentifiersItems], None] = Field()
    references: Union[List[str], None] = Field()
    published_at: datetime = Field(
        description="The date and time of when the advisory was published, in ISO 8601 format."
    )
    updated_at: datetime = Field(
        description="The date and time of when the advisory was last updated, in ISO 8601 format."
    )
    github_reviewed_at: Union[datetime, None] = Field(
        description="The date and time of when the advisory was reviewed by GitHub, in ISO 8601 format."
    )
    nvd_published_at: Union[datetime, None] = Field(
        description="The date and time when the advisory was published in the National Vulnerability Database, in ISO 8601 format.\nThis field is only populated when the advisory is imported from the National Vulnerability Database."
    )
    withdrawn_at: Union[datetime, None] = Field(
        description="The date and time of when the advisory was withdrawn, in ISO 8601 format."
    )
    vulnerabilities: Union[List[GlobalAdvisoryPropVulnerabilitiesItems], None] = Field(
        description="The products and respective version ranges affected by the advisory."
    )
    cvss: Union[GlobalAdvisoryPropCvss, None] = Field()
    cwes: Union[List[GlobalAdvisoryPropCwesItems], None] = Field()
    credits_: Union[List[GlobalAdvisoryPropCreditsItems], None] = Field(
        alias="credits", description="The users who contributed to the advisory."
    )


class GlobalAdvisoryPropIdentifiersItems(GitHubModel):
    """GlobalAdvisoryPropIdentifiersItems"""

    type: Literal["CVE", "GHSA"] = Field(description="The type of identifier.")
    value: str = Field(description="The identifier value.")


class GlobalAdvisoryPropVulnerabilitiesItems(GitHubModel):
    """GlobalAdvisoryPropVulnerabilitiesItems"""

    package: Union[GlobalAdvisoryPropVulnerabilitiesItemsPropPackage, None] = Field(
        description="The name of the package affected by the vulnerability."
    )
    vulnerable_version_range: Union[str, None] = Field(
        description="The range of the package versions affected by the vulnerability."
    )
    first_patched_version: Union[str, None] = Field(
        description="The package version that resolve the vulnerability."
    )
    vulnerable_functions: Union[List[str], None] = Field(
        description="The functions in the package that are affected by the vulnerability."
    )


class GlobalAdvisoryPropVulnerabilitiesItemsPropPackage(GitHubModel):
    """GlobalAdvisoryPropVulnerabilitiesItemsPropPackage

    The name of the package affected by the vulnerability.
    """

    ecosystem: Literal[
        "rubygems",
        "npm",
        "pip",
        "maven",
        "nuget",
        "composer",
        "go",
        "rust",
        "erlang",
        "actions",
        "pub",
        "other",
        "swift",
    ] = Field(description="The package's language or package management ecosystem.")
    name: Union[str, None] = Field(
        description="The unique package name within its ecosystem."
    )


class GlobalAdvisoryPropCvss(GitHubModel):
    """GlobalAdvisoryPropCvss"""

    vector_string: Union[str, None] = Field(description="The CVSS vector.")
    score: Union[Annotated[float, Field(le=10.0)], None] = Field(
        description="The CVSS score."
    )


class GlobalAdvisoryPropCwesItems(GitHubModel):
    """GlobalAdvisoryPropCwesItems"""

    cwe_id: str = Field(description="The Common Weakness Enumeration (CWE) identifier.")
    name: str = Field(description="The name of the CWE.")


class GlobalAdvisoryPropCreditsItems(GitHubModel):
    """GlobalAdvisoryPropCreditsItems"""

    user: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    type: Literal[
        "analyst",
        "finder",
        "reporter",
        "coordinator",
        "remediation_developer",
        "remediation_reviewer",
        "remediation_verifier",
        "tool",
        "sponsor",
        "other",
    ] = Field(description="The type of credit the user is receiving.")


class BasicError(GitHubModel):
    """Basic Error

    Basic Error
    """

    message: Missing[str] = Field(default=UNSET)
    documentation_url: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)
    status: Missing[str] = Field(default=UNSET)


class ValidationErrorSimple(GitHubModel):
    """Validation Error Simple

    Validation Error Simple
    """

    message: str = Field()
    documentation_url: str = Field()
    errors: Missing[List[str]] = Field(default=UNSET)


class Integration(GitHubModel):
    """GitHub app

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    id: int = Field(description="Unique identifier of the GitHub app")
    slug: Missing[str] = Field(
        default=UNSET, description="The slug name of the GitHub app"
    )
    node_id: str = Field()
    owner: Union[None, SimpleUser] = Field()
    name: str = Field(description="The name of the GitHub app")
    description: Union[str, None] = Field()
    external_url: str = Field()
    html_url: str = Field()
    created_at: datetime = Field()
    updated_at: datetime = Field()
    permissions: IntegrationPropPermissions = Field(
        description="The set of permissions for the GitHub app"
    )
    events: List[str] = Field(description="The list of events for the GitHub app")
    installations_count: Missing[int] = Field(
        default=UNSET,
        description="The number of installations associated with the GitHub app",
    )
    client_id: Missing[str] = Field(default=UNSET)
    client_secret: Missing[str] = Field(default=UNSET)
    webhook_secret: Missing[Union[str, None]] = Field(default=UNSET)
    pem: Missing[str] = Field(default=UNSET)


class IntegrationPropPermissions(ExtraGitHubModel):
    """IntegrationPropPermissions

    The set of permissions for the GitHub app

    Examples:
        {'issues': 'read', 'deployments': 'write'}
    """

    issues: Missing[str] = Field(default=UNSET)
    checks: Missing[str] = Field(default=UNSET)
    metadata: Missing[str] = Field(default=UNSET)
    contents: Missing[str] = Field(default=UNSET)
    deployments: Missing[str] = Field(default=UNSET)


class WebhookConfig(GitHubModel):
    """Webhook Configuration

    Configuration object of the webhook
    """

    url: Missing[str] = Field(
        default=UNSET, description="The URL to which the payloads will be delivered."
    )
    content_type: Missing[str] = Field(
        default=UNSET,
        description="The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
    )
    secret: Missing[str] = Field(
        default=UNSET,
        description="If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).",
    )
    insecure_ssl: Missing[Union[str, float]] = Field(default=UNSET)


class HookDeliveryItem(GitHubModel):
    """Simple webhook delivery

    Delivery made by a webhook, without request and response information.
    """

    id: int = Field(description="Unique identifier of the webhook delivery.")
    guid: str = Field(
        description="Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event)."
    )
    delivered_at: datetime = Field(
        description="Time when the webhook delivery occurred."
    )
    redelivery: bool = Field(
        description="Whether the webhook delivery is a redelivery."
    )
    duration: float = Field(description="Time spent delivering.")
    status: str = Field(
        description="Describes the response returned after attempting the delivery."
    )
    status_code: int = Field(description="Status code received when delivery was made.")
    event: str = Field(description="The event that triggered the delivery.")
    action: Union[str, None] = Field(
        description="The type of activity for the event that triggered the delivery."
    )
    installation_id: Union[int, None] = Field(
        description="The id of the GitHub App installation associated with this event."
    )
    repository_id: Union[int, None] = Field(
        description="The id of the repository associated with this event."
    )


class ScimError(GitHubModel):
    """Scim Error

    Scim Error
    """

    message: Missing[Union[str, None]] = Field(default=UNSET)
    documentation_url: Missing[Union[str, None]] = Field(default=UNSET)
    detail: Missing[Union[str, None]] = Field(default=UNSET)
    status: Missing[int] = Field(default=UNSET)
    scim_type: Missing[Union[str, None]] = Field(default=UNSET, alias="scimType")
    schemas: Missing[List[str]] = Field(default=UNSET)


class ValidationError(GitHubModel):
    """Validation Error

    Validation Error
    """

    message: str = Field()
    documentation_url: str = Field()
    errors: Missing[List[ValidationErrorPropErrorsItems]] = Field(default=UNSET)


class ValidationErrorPropErrorsItems(GitHubModel):
    """ValidationErrorPropErrorsItems"""

    resource: Missing[str] = Field(default=UNSET)
    field: Missing[str] = Field(default=UNSET)
    message: Missing[str] = Field(default=UNSET)
    code: str = Field()
    index: Missing[int] = Field(default=UNSET)
    value: Missing[Union[str, None, int, None, List[str], None]] = Field(default=UNSET)


class HookDelivery(GitHubModel):
    """Webhook delivery

    Delivery made by a webhook.
    """

    id: int = Field(description="Unique identifier of the delivery.")
    guid: str = Field(
        description="Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event)."
    )
    delivered_at: datetime = Field(description="Time when the delivery was delivered.")
    redelivery: bool = Field(description="Whether the delivery is a redelivery.")
    duration: float = Field(description="Time spent delivering.")
    status: str = Field(
        description="Description of the status of the attempted delivery"
    )
    status_code: int = Field(description="Status code received when delivery was made.")
    event: str = Field(description="The event that triggered the delivery.")
    action: Union[str, None] = Field(
        description="The type of activity for the event that triggered the delivery."
    )
    installation_id: Union[int, None] = Field(
        description="The id of the GitHub App installation associated with this event."
    )
    repository_id: Union[int, None] = Field(
        description="The id of the repository associated with this event."
    )
    url: Missing[str] = Field(
        default=UNSET, description="The URL target of the delivery."
    )
    request: HookDeliveryPropRequest = Field()
    response: HookDeliveryPropResponse = Field()


class HookDeliveryPropRequest(GitHubModel):
    """HookDeliveryPropRequest"""

    headers: Union[HookDeliveryPropRequestPropHeaders, None] = Field(
        description="The request headers sent with the webhook delivery."
    )
    payload: Union[HookDeliveryPropRequestPropPayload, None] = Field(
        description="The webhook payload."
    )


class HookDeliveryPropRequestPropHeaders(ExtraGitHubModel):
    """HookDeliveryPropRequestPropHeaders

    The request headers sent with the webhook delivery.
    """


class HookDeliveryPropRequestPropPayload(ExtraGitHubModel):
    """HookDeliveryPropRequestPropPayload

    The webhook payload.
    """


class HookDeliveryPropResponse(GitHubModel):
    """HookDeliveryPropResponse"""

    headers: Union[HookDeliveryPropResponsePropHeaders, None] = Field(
        description="The response headers received when the delivery was made."
    )
    payload: Union[str, None] = Field(description="The response payload received.")


class HookDeliveryPropResponsePropHeaders(ExtraGitHubModel):
    """HookDeliveryPropResponsePropHeaders

    The response headers received when the delivery was made.
    """


class Enterprise(GitHubModel):
    """Enterprise

    An enterprise on GitHub.
    """

    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="A short description of the enterprise."
    )
    html_url: str = Field()
    website_url: Missing[Union[str, None]] = Field(
        default=UNSET, description="The enterprise's website URL."
    )
    id: int = Field(description="Unique identifier of the enterprise")
    node_id: str = Field()
    name: str = Field(description="The name of the enterprise.")
    slug: str = Field(description="The slug url identifier for the enterprise.")
    created_at: Union[datetime, None] = Field()
    updated_at: Union[datetime, None] = Field()
    avatar_url: str = Field()


class IntegrationInstallationRequest(GitHubModel):
    """Integration Installation Request

    Request to install an integration on a target
    """

    id: int = Field(description="Unique identifier of the request installation.")
    node_id: Missing[str] = Field(default=UNSET)
    account: Union[SimpleUser, Enterprise] = Field()
    requester: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    created_at: datetime = Field()


class AppPermissions(GitHubModel):
    """App Permissions

    The permissions granted to the user access token.

    Examples:
        {'contents': 'read', 'issues': 'read', 'deployments': 'write', 'single_file':
    'read'}
    """

    actions: Missing[Literal["read", "write"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.",
    )
    administration: Missing[Literal["read", "write"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.",
    )
    checks: Missing[Literal["read", "write"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token for checks on code.",
    )
    codespaces: Missing[Literal["read", "write"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token to create, edit, delete, and list Codespaces.",
    )
    contents: Missing[Literal["read", "write"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.",
    )
    dependabot_secrets: Missing[Literal["read", "write"]] = Field(
        default=UNSET,
        description="The leve of permission to grant the access token to manage Dependabot secrets.",
    )
    deployments: Missing[Literal["read", "write"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token for deployments and deployment statuses.",
    )
    environments: Missing[Literal["read", "write"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token for managing repository environments.",
    )
    issues: Missing[Literal["read", "write"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.",
    )
    metadata: Missing[Literal["read", "write"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.",
    )
    packages: Missing[Literal["read", "write"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token for packages published to GitHub Packages.",
    )
    pages: Missing[Literal["read", "write"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.",
    )
    pull_requests: Missing[Literal["read", "write"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.",
    )
    repository_custom_properties: Missing[Literal["read", "write"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token to view and edit custom properties for a repository, when allowed by the property.",
    )
    repository_hooks: Missing[Literal["read", "write"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token to manage the post-receive hooks for a repository.",
    )
    repository_projects: Missing[Literal["read", "write", "admin"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token to manage repository projects, columns, and cards.",
    )
    secret_scanning_alerts: Missing[Literal["read", "write"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token to view and manage secret scanning alerts.",
    )
    secrets: Missing[Literal["read", "write"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token to manage repository secrets.",
    )
    security_events: Missing[Literal["read", "write"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token to view and manage security events like code scanning alerts.",
    )
    single_file: Missing[Literal["read", "write"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token to manage just a single file.",
    )
    statuses: Missing[Literal["read", "write"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token for commit statuses.",
    )
    vulnerability_alerts: Missing[Literal["read", "write"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token to manage Dependabot alerts.",
    )
    workflows: Missing[Literal["write"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token to update GitHub Actions workflow files.",
    )
    members: Missing[Literal["read", "write"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token for organization teams and members.",
    )
    organization_administration: Missing[Literal["read", "write"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token to manage access to an organization.",
    )
    organization_custom_roles: Missing[Literal["read", "write"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token for custom repository roles management.",
    )
    organization_custom_org_roles: Missing[Literal["read", "write"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token for custom organization roles management.",
    )
    organization_custom_properties: Missing[Literal["read", "write", "admin"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token for custom property management.",
    )
    organization_copilot_seat_management: Missing[Literal["write"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token for managing access to GitHub Copilot for members of an organization with a Copilot Business subscription. This property is in beta and is subject to change.",
    )
    organization_announcement_banners: Missing[Literal["read", "write"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token to view and manage announcement banners for an organization.",
    )
    organization_events: Missing[Literal["read"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token to view events triggered by an activity in an organization.",
    )
    organization_hooks: Missing[Literal["read", "write"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token to manage the post-receive hooks for an organization.",
    )
    organization_personal_access_tokens: Missing[Literal["read", "write"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.",
    )
    organization_personal_access_token_requests: Missing[
        Literal["read", "write"]
    ] = Field(
        default=UNSET,
        description="The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.",
    )
    organization_plan: Missing[Literal["read"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token for viewing an organization's plan.",
    )
    organization_projects: Missing[Literal["read", "write", "admin"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token to manage organization projects and projects beta (where available).",
    )
    organization_packages: Missing[Literal["read", "write"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token for organization packages published to GitHub Packages.",
    )
    organization_secrets: Missing[Literal["read", "write"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token to manage organization secrets.",
    )
    organization_self_hosted_runners: Missing[Literal["read", "write"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.",
    )
    organization_user_blocking: Missing[Literal["read", "write"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token to view and manage users blocked by the organization.",
    )
    team_discussions: Missing[Literal["read", "write"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token to manage team discussions and related comments.",
    )
    email_addresses: Missing[Literal["read", "write"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token to manage the email addresses belonging to a user.",
    )
    followers: Missing[Literal["read", "write"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token to manage the followers belonging to a user.",
    )
    git_ssh_keys: Missing[Literal["read", "write"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token to manage git SSH keys.",
    )
    gpg_keys: Missing[Literal["read", "write"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token to view and manage GPG keys belonging to a user.",
    )
    interaction_limits: Missing[Literal["read", "write"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token to view and manage interaction limits on a repository.",
    )
    profile: Missing[Literal["write"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token to manage the profile settings belonging to a user.",
    )
    starring: Missing[Literal["read", "write"]] = Field(
        default=UNSET,
        description="The level of permission to grant the access token to list and manage repositories a user is starring.",
    )


class Installation(GitHubModel):
    """Installation

    Installation
    """

    id: int = Field(description="The ID of the installation.")
    account: Union[SimpleUser, Enterprise, None] = Field()
    repository_selection: Literal["all", "selected"] = Field(
        description="Describe whether all repositories have been selected or there's a selection involved"
    )
    access_tokens_url: str = Field()
    repositories_url: str = Field()
    html_url: str = Field()
    app_id: int = Field()
    target_id: int = Field(
        description="The ID of the user or organization this token is being scoped to."
    )
    target_type: str = Field()
    permissions: AppPermissions = Field(
        title="App Permissions",
        description="The permissions granted to the user access token.",
    )
    events: List[str] = Field()
    created_at: datetime = Field()
    updated_at: datetime = Field()
    single_file_name: Union[str, None] = Field()
    has_multiple_single_files: Missing[bool] = Field(default=UNSET)
    single_file_paths: Missing[List[str]] = Field(default=UNSET)
    app_slug: str = Field()
    suspended_by: Union[None, SimpleUser] = Field()
    suspended_at: Union[datetime, None] = Field()
    contact_email: Missing[Union[str, None]] = Field(default=UNSET)


class LicenseSimple(GitHubModel):
    """License Simple

    License Simple
    """

    key: str = Field()
    name: str = Field()
    url: Union[str, None] = Field()
    spdx_id: Union[str, None] = Field()
    node_id: str = Field()
    html_url: Missing[str] = Field(default=UNSET)


class Repository(GitHubModel):
    """Repository

    A repository on GitHub.
    """

    id: int = Field(description="Unique identifier of the repository")
    node_id: str = Field()
    name: str = Field(description="The name of the repository.")
    full_name: str = Field()
    license_: Union[None, LicenseSimple] = Field(alias="license")
    organization: Missing[Union[None, SimpleUser]] = Field(default=UNSET)
    forks: int = Field()
    permissions: Missing[RepositoryPropPermissions] = Field(default=UNSET)
    owner: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    private: bool = Field(
        default=False, description="Whether the repository is private or public."
    )
    html_url: str = Field()
    description: Union[str, None] = Field()
    fork: bool = Field()
    url: str = Field()
    archive_url: str = Field()
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    deployments_url: str = Field()
    downloads_url: str = Field()
    events_url: str = Field()
    forks_url: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    languages_url: str = Field()
    merges_url: str = Field()
    milestones_url: str = Field()
    notifications_url: str = Field()
    pulls_url: str = Field()
    releases_url: str = Field()
    ssh_url: str = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    trees_url: str = Field()
    clone_url: str = Field()
    mirror_url: Union[str, None] = Field()
    hooks_url: str = Field()
    svn_url: str = Field()
    homepage: Union[str, None] = Field()
    language: Union[str, None] = Field()
    forks_count: int = Field()
    stargazers_count: int = Field()
    watchers_count: int = Field()
    size: int = Field(
        description="The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0."
    )
    default_branch: str = Field(description="The default branch of the repository.")
    open_issues_count: int = Field()
    is_template: Missing[bool] = Field(
        default=UNSET,
        description="Whether this repository acts as a template that can be used to generate new repositories.",
    )
    topics: Missing[List[str]] = Field(default=UNSET)
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_pages: bool = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_discussions: Missing[bool] = Field(
        default=UNSET, description="Whether discussions are enabled."
    )
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    disabled: bool = Field(
        description="Returns whether or not this repository disabled."
    )
    visibility: Missing[str] = Field(
        default=UNSET,
        description="The repository visibility: public, private, or internal.",
    )
    pushed_at: Union[datetime, None] = Field()
    created_at: Union[datetime, None] = Field()
    updated_at: Union[datetime, None] = Field()
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    template_repository: Missing[Union[RepositoryPropTemplateRepository, None]] = Field(
        default=UNSET
    )
    temp_clone_token: Missing[Union[str, None]] = Field(default=UNSET)
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_auto_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to allow Auto-merge to be used on pull requests.",
    )
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    allow_update_branch: Missing[bool] = Field(
        default=UNSET,
        description="Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.",
    )
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow forking this repo"
    )
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )
    subscribers_count: Missing[int] = Field(default=UNSET)
    network_count: Missing[int] = Field(default=UNSET)
    open_issues: int = Field()
    watchers: int = Field()
    master_branch: Missing[str] = Field(default=UNSET)
    starred_at: Missing[str] = Field(default=UNSET)
    anonymous_access_enabled: Missing[bool] = Field(
        default=UNSET,
        description="Whether anonymous git access is enabled for this repository",
    )


class RepositoryPropPermissions(GitHubModel):
    """RepositoryPropPermissions"""

    admin: bool = Field()
    pull: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)
    push: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)


class RepositoryPropTemplateRepositoryPropOwner(GitHubModel):
    """RepositoryPropTemplateRepositoryPropOwner"""

    login: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    avatar_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)


class RepositoryPropTemplateRepositoryPropPermissions(GitHubModel):
    """RepositoryPropTemplateRepositoryPropPermissions"""

    admin: Missing[bool] = Field(default=UNSET)
    maintain: Missing[bool] = Field(default=UNSET)
    push: Missing[bool] = Field(default=UNSET)
    triage: Missing[bool] = Field(default=UNSET)
    pull: Missing[bool] = Field(default=UNSET)


class RepositoryPropTemplateRepository(GitHubModel):
    """RepositoryPropTemplateRepository"""

    id: Missing[int] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    full_name: Missing[str] = Field(default=UNSET)
    owner: Missing[RepositoryPropTemplateRepositoryPropOwner] = Field(default=UNSET)
    private: Missing[bool] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    description: Missing[str] = Field(default=UNSET)
    fork: Missing[bool] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)
    archive_url: Missing[str] = Field(default=UNSET)
    assignees_url: Missing[str] = Field(default=UNSET)
    blobs_url: Missing[str] = Field(default=UNSET)
    branches_url: Missing[str] = Field(default=UNSET)
    collaborators_url: Missing[str] = Field(default=UNSET)
    comments_url: Missing[str] = Field(default=UNSET)
    commits_url: Missing[str] = Field(default=UNSET)
    compare_url: Missing[str] = Field(default=UNSET)
    contents_url: Missing[str] = Field(default=UNSET)
    contributors_url: Missing[str] = Field(default=UNSET)
    deployments_url: Missing[str] = Field(default=UNSET)
    downloads_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    forks_url: Missing[str] = Field(default=UNSET)
    git_commits_url: Missing[str] = Field(default=UNSET)
    git_refs_url: Missing[str] = Field(default=UNSET)
    git_tags_url: Missing[str] = Field(default=UNSET)
    git_url: Missing[str] = Field(default=UNSET)
    issue_comment_url: Missing[str] = Field(default=UNSET)
    issue_events_url: Missing[str] = Field(default=UNSET)
    issues_url: Missing[str] = Field(default=UNSET)
    keys_url: Missing[str] = Field(default=UNSET)
    labels_url: Missing[str] = Field(default=UNSET)
    languages_url: Missing[str] = Field(default=UNSET)
    merges_url: Missing[str] = Field(default=UNSET)
    milestones_url: Missing[str] = Field(default=UNSET)
    notifications_url: Missing[str] = Field(default=UNSET)
    pulls_url: Missing[str] = Field(default=UNSET)
    releases_url: Missing[str] = Field(default=UNSET)
    ssh_url: Missing[str] = Field(default=UNSET)
    stargazers_url: Missing[str] = Field(default=UNSET)
    statuses_url: Missing[str] = Field(default=UNSET)
    subscribers_url: Missing[str] = Field(default=UNSET)
    subscription_url: Missing[str] = Field(default=UNSET)
    tags_url: Missing[str] = Field(default=UNSET)
    teams_url: Missing[str] = Field(default=UNSET)
    trees_url: Missing[str] = Field(default=UNSET)
    clone_url: Missing[str] = Field(default=UNSET)
    mirror_url: Missing[str] = Field(default=UNSET)
    hooks_url: Missing[str] = Field(default=UNSET)
    svn_url: Missing[str] = Field(default=UNSET)
    homepage: Missing[str] = Field(default=UNSET)
    language: Missing[str] = Field(default=UNSET)
    forks_count: Missing[int] = Field(default=UNSET)
    stargazers_count: Missing[int] = Field(default=UNSET)
    watchers_count: Missing[int] = Field(default=UNSET)
    size: Missing[int] = Field(default=UNSET)
    default_branch: Missing[str] = Field(default=UNSET)
    open_issues_count: Missing[int] = Field(default=UNSET)
    is_template: Missing[bool] = Field(default=UNSET)
    topics: Missing[List[str]] = Field(default=UNSET)
    has_issues: Missing[bool] = Field(default=UNSET)
    has_projects: Missing[bool] = Field(default=UNSET)
    has_wiki: Missing[bool] = Field(default=UNSET)
    has_pages: Missing[bool] = Field(default=UNSET)
    has_downloads: Missing[bool] = Field(default=UNSET)
    archived: Missing[bool] = Field(default=UNSET)
    disabled: Missing[bool] = Field(default=UNSET)
    visibility: Missing[str] = Field(default=UNSET)
    pushed_at: Missing[str] = Field(default=UNSET)
    created_at: Missing[str] = Field(default=UNSET)
    updated_at: Missing[str] = Field(default=UNSET)
    permissions: Missing[RepositoryPropTemplateRepositoryPropPermissions] = Field(
        default=UNSET
    )
    allow_rebase_merge: Missing[bool] = Field(default=UNSET)
    temp_clone_token: Missing[Union[str, None]] = Field(default=UNSET)
    allow_squash_merge: Missing[bool] = Field(default=UNSET)
    allow_auto_merge: Missing[bool] = Field(default=UNSET)
    delete_branch_on_merge: Missing[bool] = Field(default=UNSET)
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    use_squash_pr_title_as_default: Missing[bool] = Field(default=UNSET)
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    allow_merge_commit: Missing[bool] = Field(default=UNSET)
    subscribers_count: Missing[int] = Field(default=UNSET)
    network_count: Missing[int] = Field(default=UNSET)


class InstallationToken(GitHubModel):
    """Installation Token

    Authentication token for a GitHub App installed on a user or org.
    """

    token: str = Field()
    expires_at: str = Field()
    permissions: Missing[AppPermissions] = Field(
        default=UNSET,
        title="App Permissions",
        description="The permissions granted to the user access token.",
    )
    repository_selection: Missing[Literal["all", "selected"]] = Field(default=UNSET)
    repositories: Missing[List[Repository]] = Field(default=UNSET)
    single_file: Missing[str] = Field(default=UNSET)
    has_multiple_single_files: Missing[bool] = Field(default=UNSET)
    single_file_paths: Missing[List[str]] = Field(default=UNSET)


class ScopedInstallation(GitHubModel):
    """Scoped Installation"""

    permissions: AppPermissions = Field(
        title="App Permissions",
        description="The permissions granted to the user access token.",
    )
    repository_selection: Literal["all", "selected"] = Field(
        description="Describe whether all repositories have been selected or there's a selection involved"
    )
    single_file_name: Union[str, None] = Field()
    has_multiple_single_files: Missing[bool] = Field(default=UNSET)
    single_file_paths: Missing[List[str]] = Field(default=UNSET)
    repositories_url: str = Field()
    account: SimpleUser = Field(title="Simple User", description="A GitHub user.")


class Authorization(GitHubModel):
    """Authorization

    The authorization for an OAuth app, GitHub App, or a Personal Access Token.
    """

    id: int = Field()
    url: str = Field()
    scopes: Union[List[str], None] = Field(
        description="A list of scopes that this authorization is in."
    )
    token: str = Field()
    token_last_eight: Union[str, None] = Field()
    hashed_token: Union[str, None] = Field()
    app: AuthorizationPropApp = Field()
    note: Union[str, None] = Field()
    note_url: Union[str, None] = Field()
    updated_at: datetime = Field()
    created_at: datetime = Field()
    fingerprint: Union[str, None] = Field()
    user: Missing[Union[None, SimpleUser]] = Field(default=UNSET)
    installation: Missing[Union[None, ScopedInstallation]] = Field(default=UNSET)
    expires_at: Union[datetime, None] = Field()


class AuthorizationPropApp(GitHubModel):
    """AuthorizationPropApp"""

    client_id: str = Field()
    name: str = Field()
    url: str = Field()


class SimpleClassroomRepository(GitHubModel):
    """Simple Classroom Repository

    A GitHub repository view for Classroom
    """

    id: int = Field(description="A unique identifier of the repository.")
    full_name: str = Field(
        description="The full, globally unique name of the repository."
    )
    html_url: str = Field(description="The URL to view the repository on GitHub.com.")
    node_id: str = Field(description="The GraphQL identifier of the repository.")
    private: bool = Field(description="Whether the repository is private.")
    default_branch: str = Field(description="The default branch for the repository.")


class SimpleClassroomOrganization(GitHubModel):
    """Organization Simple for Classroom

    A GitHub organization.
    """

    id: int = Field()
    login: str = Field()
    node_id: str = Field()
    html_url: str = Field()
    name: Union[str, None] = Field()
    avatar_url: str = Field()


class Classroom(GitHubModel):
    """Classroom

    A GitHub Classroom classroom
    """

    id: int = Field(description="Unique identifier of the classroom.")
    name: str = Field(description="The name of the classroom.")
    archived: bool = Field(description="Whether classroom is archived.")
    organization: SimpleClassroomOrganization = Field(
        title="Organization Simple for Classroom", description="A GitHub organization."
    )
    url: str = Field(description="The URL of the classroom on GitHub Classroom.")


class ClassroomAssignment(GitHubModel):
    """Classroom Assignment

    A GitHub Classroom assignment
    """

    id: int = Field(description="Unique identifier of the repository.")
    public_repo: bool = Field(
        description="Whether an accepted assignment creates a public repository."
    )
    title: str = Field(description="Assignment title.")
    type: Literal["individual", "group"] = Field(
        description="Whether it's a group assignment or individual assignment."
    )
    invite_link: str = Field(
        description="The link that a student can use to accept the assignment."
    )
    invitations_enabled: bool = Field(
        description="Whether the invitation link is enabled. Visiting an enabled invitation link will accept the assignment."
    )
    slug: str = Field(description="Sluggified name of the assignment.")
    students_are_repo_admins: bool = Field(
        description="Whether students are admins on created repository when a student accepts the assignment."
    )
    feedback_pull_requests_enabled: bool = Field(
        description="Whether feedback pull request will be created when a student accepts the assignment."
    )
    max_teams: Union[int, None] = Field(
        description="The maximum allowable teams for the assignment."
    )
    max_members: Union[int, None] = Field(
        description="The maximum allowable members per team."
    )
    editor: str = Field(description="The selected editor for the assignment.")
    accepted: int = Field(
        description="The number of students that have accepted the assignment."
    )
    submitted: int = Field(
        description="The number of students that have submitted the assignment."
    )
    passing: int = Field(
        description="The number of students that have passed the assignment."
    )
    language: str = Field(
        description="The programming language used in the assignment."
    )
    deadline: Union[datetime, None] = Field(
        description="The time at which the assignment is due."
    )
    starter_code_repository: SimpleClassroomRepository = Field(
        title="Simple Classroom Repository",
        description="A GitHub repository view for Classroom",
    )
    classroom: Classroom = Field(
        title="Classroom", description="A GitHub Classroom classroom"
    )


class SimpleClassroomUser(GitHubModel):
    """Simple Classroom User

    A GitHub user simplified for Classroom.
    """

    id: int = Field()
    login: str = Field()
    avatar_url: str = Field()
    html_url: str = Field()


class SimpleClassroom(GitHubModel):
    """Simple Classroom

    A GitHub Classroom classroom
    """

    id: int = Field(description="Unique identifier of the classroom.")
    name: str = Field(description="The name of the classroom.")
    archived: bool = Field(description="Returns whether classroom is archived or not.")
    url: str = Field(description="The url of the classroom on GitHub Classroom.")


class SimpleClassroomAssignment(GitHubModel):
    """Simple Classroom Assignment

    A GitHub Classroom assignment
    """

    id: int = Field(description="Unique identifier of the repository.")
    public_repo: bool = Field(
        description="Whether an accepted assignment creates a public repository."
    )
    title: str = Field(description="Assignment title.")
    type: Literal["individual", "group"] = Field(
        description="Whether it's a Group Assignment or Individual Assignment."
    )
    invite_link: str = Field(
        description="The link that a student can use to accept the assignment."
    )
    invitations_enabled: bool = Field(
        description="Whether the invitation link is enabled. Visiting an enabled invitation link will accept the assignment."
    )
    slug: str = Field(description="Sluggified name of the assignment.")
    students_are_repo_admins: bool = Field(
        description="Whether students are admins on created repository on accepted assignment."
    )
    feedback_pull_requests_enabled: bool = Field(
        description="Whether feedback pull request will be created on assignment acceptance."
    )
    max_teams: Missing[Union[int, None]] = Field(
        default=UNSET, description="The maximum allowable teams for the assignment."
    )
    max_members: Missing[Union[int, None]] = Field(
        default=UNSET, description="The maximum allowable members per team."
    )
    editor: str = Field(description="The selected editor for the assignment.")
    accepted: int = Field(
        description="The number of students that have accepted the assignment."
    )
    submitted: int = Field(
        description="The number of students that have submitted the assignment."
    )
    passing: int = Field(
        description="The number of students that have passed the assignment."
    )
    language: str = Field(
        description="The programming language used in the assignment."
    )
    deadline: Union[datetime, None] = Field(
        description="The time at which the assignment is due."
    )
    classroom: SimpleClassroom = Field(
        title="Simple Classroom", description="A GitHub Classroom classroom"
    )


class ClassroomAcceptedAssignment(GitHubModel):
    """Classroom Accepted Assignment

    A GitHub Classroom accepted assignment
    """

    id: int = Field(description="Unique identifier of the repository.")
    submitted: bool = Field(
        description="Whether an accepted assignment has been submitted."
    )
    passing: bool = Field(description="Whether a submission passed.")
    commit_count: int = Field(description="Count of student commits.")
    grade: str = Field(description="Most recent grade.")
    students: List[SimpleClassroomUser] = Field()
    repository: SimpleClassroomRepository = Field(
        title="Simple Classroom Repository",
        description="A GitHub repository view for Classroom",
    )
    assignment: SimpleClassroomAssignment = Field(
        title="Simple Classroom Assignment", description="A GitHub Classroom assignment"
    )


class ClassroomAssignmentGrade(GitHubModel):
    """Classroom Assignment Grade

    Grade for a student or groups GitHub Classroom assignment
    """

    assignment_name: str = Field(description="Name of the assignment")
    assignment_url: str = Field(description="URL of the assignment")
    starter_code_url: str = Field(
        description="URL of the starter code for the assignment"
    )
    github_username: str = Field(description="GitHub username of the student")
    roster_identifier: str = Field(description="Roster identifier of the student")
    student_repository_name: str = Field(
        description="Name of the student's assignment repository"
    )
    student_repository_url: str = Field(
        description="URL of the student's assignment repository"
    )
    submission_timestamp: str = Field(
        description="Timestamp of the student's assignment submission"
    )
    points_awarded: int = Field(description="Number of points awarded to the student")
    points_available: int = Field(
        description="Number of points available for the assignment"
    )
    group_name: Missing[str] = Field(
        default=UNSET,
        description="If a group assignment, name of the group the student is in",
    )


class CodeOfConduct(GitHubModel):
    """Code Of Conduct

    Code Of Conduct
    """

    key: str = Field()
    name: str = Field()
    url: str = Field()
    body: Missing[str] = Field(default=UNSET)
    html_url: Union[str, None] = Field()


class DependabotAlertPackage(GitHubModel):
    """DependabotAlertPackage

    Details for the vulnerable package.
    """

    ecosystem: str = Field(
        description="The package's language or package management ecosystem."
    )
    name: str = Field(description="The unique package name within its ecosystem.")


class DependabotAlertSecurityVulnerability(GitHubModel):
    """DependabotAlertSecurityVulnerability

    Details pertaining to one vulnerable version range for the advisory.
    """

    package: DependabotAlertPackage = Field(
        description="Details for the vulnerable package."
    )
    severity: Literal["low", "medium", "high", "critical"] = Field(
        description="The severity of the vulnerability."
    )
    vulnerable_version_range: str = Field(
        description="Conditions that identify vulnerable versions of this vulnerability's package."
    )
    first_patched_version: Union[
        DependabotAlertSecurityVulnerabilityPropFirstPatchedVersion, None
    ] = Field(
        description="Details pertaining to the package version that patches this vulnerability."
    )


class DependabotAlertSecurityVulnerabilityPropFirstPatchedVersion(GitHubModel):
    """DependabotAlertSecurityVulnerabilityPropFirstPatchedVersion

    Details pertaining to the package version that patches this vulnerability.
    """

    identifier: str = Field(
        description="The package version that patches this vulnerability."
    )


class DependabotAlertSecurityAdvisory(GitHubModel):
    """DependabotAlertSecurityAdvisory

    Details for the GitHub Security Advisory.
    """

    ghsa_id: str = Field(
        description="The unique GitHub Security Advisory ID assigned to the advisory."
    )
    cve_id: Union[str, None] = Field(
        description="The unique CVE ID assigned to the advisory."
    )
    summary: Annotated[str, Field(max_length=1024)] = Field(
        description="A short, plain text summary of the advisory."
    )
    description: str = Field(
        description="A long-form Markdown-supported description of the advisory."
    )
    vulnerabilities: List[DependabotAlertSecurityVulnerability] = Field(
        description="Vulnerable version range information for the advisory."
    )
    severity: Literal["low", "medium", "high", "critical"] = Field(
        description="The severity of the advisory."
    )
    cvss: DependabotAlertSecurityAdvisoryPropCvss = Field(
        description="Details for the advisory pertaining to the Common Vulnerability Scoring System."
    )
    cwes: List[DependabotAlertSecurityAdvisoryPropCwesItems] = Field(
        description="Details for the advisory pertaining to Common Weakness Enumeration."
    )
    identifiers: List[DependabotAlertSecurityAdvisoryPropIdentifiersItems] = Field(
        description="Values that identify this advisory among security information sources."
    )
    references: List[DependabotAlertSecurityAdvisoryPropReferencesItems] = Field(
        description="Links to additional advisory information."
    )
    published_at: datetime = Field(
        description="The time that the advisory was published in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."
    )
    updated_at: datetime = Field(
        description="The time that the advisory was last modified in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."
    )
    withdrawn_at: Union[datetime, None] = Field(
        description="The time that the advisory was withdrawn in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."
    )


class DependabotAlertSecurityAdvisoryPropCvss(GitHubModel):
    """DependabotAlertSecurityAdvisoryPropCvss

    Details for the advisory pertaining to the Common Vulnerability Scoring System.
    """

    score: Annotated[float, Field(le=10.0)] = Field(
        description="The overall CVSS score of the advisory."
    )
    vector_string: Union[str, None] = Field(
        description="The full CVSS vector string for the advisory."
    )


class DependabotAlertSecurityAdvisoryPropCwesItems(GitHubModel):
    """DependabotAlertSecurityAdvisoryPropCwesItems

    A CWE weakness assigned to the advisory.
    """

    cwe_id: str = Field(description="The unique CWE ID.")
    name: str = Field(description="The short, plain text name of the CWE.")


class DependabotAlertSecurityAdvisoryPropIdentifiersItems(GitHubModel):
    """DependabotAlertSecurityAdvisoryPropIdentifiersItems

    An advisory identifier.
    """

    type: Literal["CVE", "GHSA"] = Field(description="The type of advisory identifier.")
    value: str = Field(description="The value of the advisory identifer.")


class DependabotAlertSecurityAdvisoryPropReferencesItems(GitHubModel):
    """DependabotAlertSecurityAdvisoryPropReferencesItems

    A link to additional advisory information.
    """

    url: str = Field(description="The URL of the reference.")


class SimpleRepository(GitHubModel):
    """Simple Repository

    A GitHub repository.
    """

    id: int = Field(description="A unique identifier of the repository.")
    node_id: str = Field(description="The GraphQL identifier of the repository.")
    name: str = Field(description="The name of the repository.")
    full_name: str = Field(
        description="The full, globally unique, name of the repository."
    )
    owner: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    private: bool = Field(description="Whether the repository is private.")
    html_url: str = Field(description="The URL to view the repository on GitHub.com.")
    description: Union[str, None] = Field(description="The repository description.")
    fork: bool = Field(description="Whether the repository is a fork.")
    url: str = Field(
        description="The URL to get more information about the repository from the GitHub API."
    )
    archive_url: str = Field(
        description="A template for the API URL to download the repository as an archive."
    )
    assignees_url: str = Field(
        description="A template for the API URL to list the available assignees for issues in the repository."
    )
    blobs_url: str = Field(
        description="A template for the API URL to create or retrieve a raw Git blob in the repository."
    )
    branches_url: str = Field(
        description="A template for the API URL to get information about branches in the repository."
    )
    collaborators_url: str = Field(
        description="A template for the API URL to get information about collaborators of the repository."
    )
    comments_url: str = Field(
        description="A template for the API URL to get information about comments on the repository."
    )
    commits_url: str = Field(
        description="A template for the API URL to get information about commits on the repository."
    )
    compare_url: str = Field(
        description="A template for the API URL to compare two commits or refs."
    )
    contents_url: str = Field(
        description="A template for the API URL to get the contents of the repository."
    )
    contributors_url: str = Field(
        description="A template for the API URL to list the contributors to the repository."
    )
    deployments_url: str = Field(
        description="The API URL to list the deployments of the repository."
    )
    downloads_url: str = Field(
        description="The API URL to list the downloads on the repository."
    )
    events_url: str = Field(
        description="The API URL to list the events of the repository."
    )
    forks_url: str = Field(
        description="The API URL to list the forks of the repository."
    )
    git_commits_url: str = Field(
        description="A template for the API URL to get information about Git commits of the repository."
    )
    git_refs_url: str = Field(
        description="A template for the API URL to get information about Git refs of the repository."
    )
    git_tags_url: str = Field(
        description="A template for the API URL to get information about Git tags of the repository."
    )
    issue_comment_url: str = Field(
        description="A template for the API URL to get information about issue comments on the repository."
    )
    issue_events_url: str = Field(
        description="A template for the API URL to get information about issue events on the repository."
    )
    issues_url: str = Field(
        description="A template for the API URL to get information about issues on the repository."
    )
    keys_url: str = Field(
        description="A template for the API URL to get information about deploy keys on the repository."
    )
    labels_url: str = Field(
        description="A template for the API URL to get information about labels of the repository."
    )
    languages_url: str = Field(
        description="The API URL to get information about the languages of the repository."
    )
    merges_url: str = Field(
        description="The API URL to merge branches in the repository."
    )
    milestones_url: str = Field(
        description="A template for the API URL to get information about milestones of the repository."
    )
    notifications_url: str = Field(
        description="A template for the API URL to get information about notifications on the repository."
    )
    pulls_url: str = Field(
        description="A template for the API URL to get information about pull requests on the repository."
    )
    releases_url: str = Field(
        description="A template for the API URL to get information about releases on the repository."
    )
    stargazers_url: str = Field(
        description="The API URL to list the stargazers on the repository."
    )
    statuses_url: str = Field(
        description="A template for the API URL to get information about statuses of a commit."
    )
    subscribers_url: str = Field(
        description="The API URL to list the subscribers on the repository."
    )
    subscription_url: str = Field(
        description="The API URL to subscribe to notifications for this repository."
    )
    tags_url: str = Field(
        description="The API URL to get information about tags on the repository."
    )
    teams_url: str = Field(
        description="The API URL to list the teams on the repository."
    )
    trees_url: str = Field(
        description="A template for the API URL to create or retrieve a raw Git tree of the repository."
    )
    hooks_url: str = Field(
        description="The API URL to list the hooks on the repository."
    )


class DependabotAlertWithRepository(GitHubModel):
    """DependabotAlertWithRepository

    A Dependabot alert.
    """

    number: int = Field(description="The security alert number.")
    state: Literal["auto_dismissed", "dismissed", "fixed", "open"] = Field(
        description="The state of the Dependabot alert."
    )
    dependency: DependabotAlertWithRepositoryPropDependency = Field(
        description="Details for the vulnerable dependency."
    )
    security_advisory: DependabotAlertSecurityAdvisory = Field(
        description="Details for the GitHub Security Advisory."
    )
    security_vulnerability: DependabotAlertSecurityVulnerability = Field(
        description="Details pertaining to one vulnerable version range for the advisory."
    )
    url: str = Field(description="The REST API URL of the alert resource.")
    html_url: str = Field(description="The GitHub URL of the alert resource.")
    created_at: datetime = Field(
        description="The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."
    )
    updated_at: datetime = Field(
        description="The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."
    )
    dismissed_at: Union[datetime, None] = Field(
        description="The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."
    )
    dismissed_by: Union[None, SimpleUser] = Field()
    dismissed_reason: Union[
        None,
        Literal[
            "fix_started", "inaccurate", "no_bandwidth", "not_used", "tolerable_risk"
        ],
    ] = Field(description="The reason that the alert was dismissed.")
    dismissed_comment: Union[Annotated[str, Field(max_length=280)], None] = Field(
        description="An optional comment associated with the alert's dismissal."
    )
    fixed_at: Union[datetime, None] = Field(
        description="The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."
    )
    auto_dismissed_at: Missing[Union[datetime, None]] = Field(
        default=UNSET,
        description="The time that the alert was auto-dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )
    repository: SimpleRepository = Field(
        title="Simple Repository", description="A GitHub repository."
    )


class DependabotAlertWithRepositoryPropDependency(GitHubModel):
    """DependabotAlertWithRepositoryPropDependency

    Details for the vulnerable dependency.
    """

    package: Missing[DependabotAlertPackage] = Field(
        default=UNSET, description="Details for the vulnerable package."
    )
    manifest_path: Missing[str] = Field(
        default=UNSET,
        description="The full path to the dependency manifest file, relative to the root of the repository.",
    )
    scope: Missing[Union[None, Literal["development", "runtime"]]] = Field(
        default=UNSET, description="The execution scope of the vulnerable dependency."
    )


class OrganizationSecretScanningAlert(GitHubModel):
    """OrganizationSecretScanningAlert"""

    number: Missing[int] = Field(
        default=UNSET, description="The security alert number."
    )
    created_at: Missing[datetime] = Field(
        default=UNSET,
        description="The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )
    updated_at: Missing[Union[None, datetime]] = Field(default=UNSET)
    url: Missing[str] = Field(
        default=UNSET, description="The REST API URL of the alert resource."
    )
    html_url: Missing[str] = Field(
        default=UNSET, description="The GitHub URL of the alert resource."
    )
    locations_url: Missing[str] = Field(
        default=UNSET,
        description="The REST API URL of the code locations for this alert.",
    )
    state: Missing[Literal["open", "resolved"]] = Field(
        default=UNSET,
        description="Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`.",
    )
    resolution: Missing[
        Union[None, Literal["false_positive", "wont_fix", "revoked", "used_in_tests"]]
    ] = Field(
        default=UNSET,
        description="**Required when the `state` is `resolved`.** The reason for resolving the alert.",
    )
    resolved_at: Missing[Union[datetime, None]] = Field(
        default=UNSET,
        description="The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )
    resolved_by: Missing[Union[None, SimpleUser]] = Field(default=UNSET)
    secret_type: Missing[str] = Field(
        default=UNSET, description="The type of secret that secret scanning detected."
    )
    secret_type_display_name: Missing[str] = Field(
        default=UNSET,
        description='User-friendly name for the detected secret, matching the `secret_type`.\nFor a list of built-in patterns, see "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)."',
    )
    secret: Missing[str] = Field(
        default=UNSET, description="The secret that was detected."
    )
    repository: Missing[SimpleRepository] = Field(
        default=UNSET, title="Simple Repository", description="A GitHub repository."
    )
    push_protection_bypassed: Missing[Union[bool, None]] = Field(
        default=UNSET,
        description="Whether push protection was bypassed for the detected secret.",
    )
    push_protection_bypassed_by: Missing[Union[None, SimpleUser]] = Field(default=UNSET)
    push_protection_bypassed_at: Missing[Union[datetime, None]] = Field(
        default=UNSET,
        description="The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )
    resolution_comment: Missing[Union[str, None]] = Field(
        default=UNSET,
        description="The comment that was optionally added when this alert was closed",
    )
    validity: Missing[Literal["active", "inactive", "unknown"]] = Field(
        default=UNSET, description="The token status as of the latest validity check."
    )


class Actor(GitHubModel):
    """Actor

    Actor
    """

    id: int = Field()
    login: str = Field()
    display_login: Missing[str] = Field(default=UNSET)
    gravatar_id: Union[str, None] = Field()
    url: str = Field()
    avatar_url: str = Field()


class Milestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    url: str = Field()
    html_url: str = Field()
    labels_url: str = Field()
    id: int = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    state: Literal["open", "closed"] = Field(
        default="open", description="The state of the milestone."
    )
    title: str = Field(description="The title of the milestone.")
    description: Union[str, None] = Field()
    creator: Union[None, SimpleUser] = Field()
    open_issues: int = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    updated_at: datetime = Field()
    closed_at: Union[datetime, None] = Field()
    due_on: Union[datetime, None] = Field()


class ReactionRollup(GitHubModel):
    """Reaction Rollup"""

    url: str = Field()
    total_count: int = Field()
    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    laugh: int = Field()
    confused: int = Field()
    heart: int = Field()
    hooray: int = Field()
    eyes: int = Field()
    rocket: int = Field()


class Issue(GitHubModel):
    """Issue

    Issues are a great way to keep track of tasks, enhancements, and bugs for your
    projects.
    """

    id: int = Field()
    node_id: str = Field()
    url: str = Field(description="URL for the issue")
    repository_url: str = Field()
    labels_url: str = Field()
    comments_url: str = Field()
    events_url: str = Field()
    html_url: str = Field()
    number: int = Field(
        description="Number uniquely identifying the issue within its repository"
    )
    state: str = Field(description="State of the issue; either 'open' or 'closed'")
    state_reason: Missing[
        Union[None, Literal["completed", "reopened", "not_planned"]]
    ] = Field(default=UNSET, description="The reason for the current state")
    title: str = Field(description="Title of the issue")
    body: Missing[Union[str, None]] = Field(
        default=UNSET, description="Contents of the issue"
    )
    user: Union[None, SimpleUser] = Field()
    labels: List[Union[str, IssuePropLabelsItemsOneof1]] = Field(
        description="Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository"
    )
    assignee: Union[None, SimpleUser] = Field()
    assignees: Missing[Union[List[SimpleUser], None]] = Field(default=UNSET)
    milestone: Union[None, Milestone] = Field()
    locked: bool = Field()
    active_lock_reason: Missing[Union[str, None]] = Field(default=UNSET)
    comments: int = Field()
    pull_request: Missing[IssuePropPullRequest] = Field(default=UNSET)
    closed_at: Union[datetime, None] = Field()
    created_at: datetime = Field()
    updated_at: datetime = Field()
    draft: Missing[bool] = Field(default=UNSET)
    closed_by: Missing[Union[None, SimpleUser]] = Field(default=UNSET)
    body_html: Missing[Union[str, None]] = Field(default=UNSET)
    body_text: Missing[Union[str, None]] = Field(default=UNSET)
    timeline_url: Missing[str] = Field(default=UNSET)
    repository: Missing[Repository] = Field(
        default=UNSET, title="Repository", description="A repository on GitHub."
    )
    performed_via_github_app: Missing[Union[None, Integration]] = Field(default=UNSET)
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="author_association",
        description="How the author is associated with the repository.",
    )
    reactions: Missing[ReactionRollup] = Field(default=UNSET, title="Reaction Rollup")


class IssuePropLabelsItemsOneof1(GitHubModel):
    """IssuePropLabelsItemsOneof1"""

    id: Missing[int] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(default=UNSET)
    color: Missing[Union[str, None]] = Field(default=UNSET)
    default: Missing[bool] = Field(default=UNSET)


class IssuePropPullRequest(GitHubModel):
    """IssuePropPullRequest"""

    merged_at: Missing[Union[datetime, None]] = Field(default=UNSET)
    diff_url: Union[str, None] = Field()
    html_url: Union[str, None] = Field()
    patch_url: Union[str, None] = Field()
    url: Union[str, None] = Field()


class IssueComment(GitHubModel):
    """Issue Comment

    Comments provide a way for people to collaborate on an issue.
    """

    id: int = Field(description="Unique identifier of the issue comment")
    node_id: str = Field()
    url: str = Field(description="URL for the issue comment")
    body: Missing[str] = Field(
        default=UNSET, description="Contents of the issue comment"
    )
    body_text: Missing[str] = Field(default=UNSET)
    body_html: Missing[str] = Field(default=UNSET)
    html_url: str = Field()
    user: Union[None, SimpleUser] = Field()
    created_at: datetime = Field()
    updated_at: datetime = Field()
    issue_url: str = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="author_association",
        description="How the author is associated with the repository.",
    )
    performed_via_github_app: Missing[Union[None, Integration]] = Field(default=UNSET)
    reactions: Missing[ReactionRollup] = Field(default=UNSET, title="Reaction Rollup")


class Event(GitHubModel):
    """Event

    Event
    """

    id: str = Field()
    type: Union[str, None] = Field()
    actor: Actor = Field(title="Actor", description="Actor")
    repo: EventPropRepo = Field()
    org: Missing[Actor] = Field(default=UNSET, title="Actor", description="Actor")
    payload: EventPropPayload = Field()
    public: bool = Field()
    created_at: Union[datetime, None] = Field()


class EventPropRepo(GitHubModel):
    """EventPropRepo"""

    id: int = Field()
    name: str = Field()
    url: str = Field()


class EventPropPayload(GitHubModel):
    """EventPropPayload"""

    action: Missing[str] = Field(default=UNSET)
    issue: Missing[Issue] = Field(
        default=UNSET,
        title="Issue",
        description="Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.",
    )
    comment: Missing[IssueComment] = Field(
        default=UNSET,
        title="Issue Comment",
        description="Comments provide a way for people to collaborate on an issue.",
    )
    pages: Missing[List[EventPropPayloadPropPagesItems]] = Field(default=UNSET)


class EventPropPayloadPropPagesItems(GitHubModel):
    """EventPropPayloadPropPagesItems"""

    page_name: Missing[str] = Field(default=UNSET)
    title: Missing[str] = Field(default=UNSET)
    summary: Missing[Union[str, None]] = Field(default=UNSET)
    action: Missing[str] = Field(default=UNSET)
    sha: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)


class LinkWithType(GitHubModel):
    """Link With Type

    Hypermedia Link with Type
    """

    href: str = Field()
    type: str = Field()


class Feed(GitHubModel):
    """Feed

    Feed
    """

    timeline_url: str = Field()
    user_url: str = Field()
    current_user_public_url: Missing[str] = Field(default=UNSET)
    current_user_url: Missing[str] = Field(default=UNSET)
    current_user_actor_url: Missing[str] = Field(default=UNSET)
    current_user_organization_url: Missing[str] = Field(default=UNSET)
    current_user_organization_urls: Missing[List[str]] = Field(default=UNSET)
    security_advisories_url: Missing[str] = Field(default=UNSET)
    repository_discussions_url: Missing[str] = Field(
        default=UNSET, description="A feed of discussions for a given repository."
    )
    repository_discussions_category_url: Missing[str] = Field(
        default=UNSET,
        description="A feed of discussions for a given repository and category.",
    )
    links: FeedPropLinks = Field(alias="_links")


class FeedPropLinks(GitHubModel):
    """FeedPropLinks"""

    timeline: LinkWithType = Field(
        title="Link With Type", description="Hypermedia Link with Type"
    )
    user: LinkWithType = Field(
        title="Link With Type", description="Hypermedia Link with Type"
    )
    security_advisories: Missing[LinkWithType] = Field(
        default=UNSET, title="Link With Type", description="Hypermedia Link with Type"
    )
    current_user: Missing[LinkWithType] = Field(
        default=UNSET, title="Link With Type", description="Hypermedia Link with Type"
    )
    current_user_public: Missing[LinkWithType] = Field(
        default=UNSET, title="Link With Type", description="Hypermedia Link with Type"
    )
    current_user_actor: Missing[LinkWithType] = Field(
        default=UNSET, title="Link With Type", description="Hypermedia Link with Type"
    )
    current_user_organization: Missing[LinkWithType] = Field(
        default=UNSET, title="Link With Type", description="Hypermedia Link with Type"
    )
    current_user_organizations: Missing[List[LinkWithType]] = Field(default=UNSET)
    repository_discussions: Missing[LinkWithType] = Field(
        default=UNSET, title="Link With Type", description="Hypermedia Link with Type"
    )
    repository_discussions_category: Missing[LinkWithType] = Field(
        default=UNSET, title="Link With Type", description="Hypermedia Link with Type"
    )


class BaseGist(GitHubModel):
    """Base Gist

    Base Gist
    """

    url: str = Field()
    forks_url: str = Field()
    commits_url: str = Field()
    id: str = Field()
    node_id: str = Field()
    git_pull_url: str = Field()
    git_push_url: str = Field()
    html_url: str = Field()
    files: BaseGistPropFiles = Field()
    public: bool = Field()
    created_at: datetime = Field()
    updated_at: datetime = Field()
    description: Union[str, None] = Field()
    comments: int = Field()
    user: Union[None, SimpleUser] = Field()
    comments_url: str = Field()
    owner: Missing[SimpleUser] = Field(
        default=UNSET, title="Simple User", description="A GitHub user."
    )
    truncated: Missing[bool] = Field(default=UNSET)
    forks: Missing[List[Any]] = Field(default=UNSET)
    history: Missing[List[Any]] = Field(default=UNSET)


class BaseGistPropFiles(ExtraGitHubModel):
    """BaseGistPropFiles"""


class PublicUser(GitHubModel):
    """Public User

    Public User
    """

    login: str = Field()
    id: int = Field()
    node_id: str = Field()
    avatar_url: str = Field()
    gravatar_id: Union[str, None] = Field()
    url: str = Field()
    html_url: str = Field()
    followers_url: str = Field()
    following_url: str = Field()
    gists_url: str = Field()
    starred_url: str = Field()
    subscriptions_url: str = Field()
    organizations_url: str = Field()
    repos_url: str = Field()
    events_url: str = Field()
    received_events_url: str = Field()
    type: str = Field()
    site_admin: bool = Field()
    name: Union[str, None] = Field()
    company: Union[str, None] = Field()
    blog: Union[str, None] = Field()
    location: Union[str, None] = Field()
    email: Union[str, None] = Field()
    hireable: Union[bool, None] = Field()
    bio: Union[str, None] = Field()
    twitter_username: Missing[Union[str, None]] = Field(default=UNSET)
    public_repos: int = Field()
    public_gists: int = Field()
    followers: int = Field()
    following: int = Field()
    created_at: datetime = Field()
    updated_at: datetime = Field()
    plan: Missing[PublicUserPropPlan] = Field(default=UNSET)
    suspended_at: Missing[Union[datetime, None]] = Field(default=UNSET)
    private_gists: Missing[int] = Field(default=UNSET)
    total_private_repos: Missing[int] = Field(default=UNSET)
    owned_private_repos: Missing[int] = Field(default=UNSET)
    disk_usage: Missing[int] = Field(default=UNSET)
    collaborators: Missing[int] = Field(default=UNSET)


class PublicUserPropPlan(GitHubModel):
    """PublicUserPropPlan"""

    collaborators: int = Field()
    name: str = Field()
    space: int = Field()
    private_repos: int = Field()


class GistHistory(GitHubModel):
    """Gist History

    Gist History
    """

    user: Missing[Union[None, SimpleUser]] = Field(default=UNSET)
    version: Missing[str] = Field(default=UNSET)
    committed_at: Missing[datetime] = Field(default=UNSET)
    change_status: Missing[GistHistoryPropChangeStatus] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class GistHistoryPropChangeStatus(GitHubModel):
    """GistHistoryPropChangeStatus"""

    total: Missing[int] = Field(default=UNSET)
    additions: Missing[int] = Field(default=UNSET)
    deletions: Missing[int] = Field(default=UNSET)


class GistSimple(GitHubModel):
    """Gist Simple

    Gist Simple
    """

    forks: Missing[Union[List[GistSimplePropForksItems], None]] = Field(default=UNSET)
    history: Missing[Union[List[GistHistory], None]] = Field(default=UNSET)
    fork_of: Missing[Union[GistSimplePropForkOf, None]] = Field(
        default=UNSET, title="Gist", description="Gist"
    )
    url: Missing[str] = Field(default=UNSET)
    forks_url: Missing[str] = Field(default=UNSET)
    commits_url: Missing[str] = Field(default=UNSET)
    id: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    git_pull_url: Missing[str] = Field(default=UNSET)
    git_push_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    files: Missing[GistSimplePropFiles] = Field(default=UNSET)
    public: Missing[bool] = Field(default=UNSET)
    created_at: Missing[str] = Field(default=UNSET)
    updated_at: Missing[str] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(default=UNSET)
    comments: Missing[int] = Field(default=UNSET)
    user: Missing[Union[str, None]] = Field(default=UNSET)
    comments_url: Missing[str] = Field(default=UNSET)
    owner: Missing[SimpleUser] = Field(
        default=UNSET, title="Simple User", description="A GitHub user."
    )
    truncated: Missing[bool] = Field(default=UNSET)


class GistSimplePropForksItems(GitHubModel):
    """GistSimplePropForksItems"""

    id: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)
    user: Missing[PublicUser] = Field(
        default=UNSET, title="Public User", description="Public User"
    )
    created_at: Missing[datetime] = Field(default=UNSET)
    updated_at: Missing[datetime] = Field(default=UNSET)


class GistSimplePropForkOfPropFiles(ExtraGitHubModel):
    """GistSimplePropForkOfPropFiles"""


class GistSimplePropForkOf(GitHubModel):
    """Gist

    Gist
    """

    url: str = Field()
    forks_url: str = Field()
    commits_url: str = Field()
    id: str = Field()
    node_id: str = Field()
    git_pull_url: str = Field()
    git_push_url: str = Field()
    html_url: str = Field()
    files: GistSimplePropForkOfPropFiles = Field()
    public: bool = Field()
    created_at: datetime = Field()
    updated_at: datetime = Field()
    description: Union[str, None] = Field()
    comments: int = Field()
    user: Union[None, SimpleUser] = Field()
    comments_url: str = Field()
    owner: Missing[Union[None, SimpleUser]] = Field(default=UNSET)
    truncated: Missing[bool] = Field(default=UNSET)
    forks: Missing[List[Any]] = Field(default=UNSET)
    history: Missing[List[Any]] = Field(default=UNSET)


class GistSimplePropFiles(ExtraGitHubModel):
    """GistSimplePropFiles"""


class GistComment(GitHubModel):
    """Gist Comment

    A comment made to a gist.
    """

    id: int = Field()
    node_id: str = Field()
    url: str = Field()
    body: Annotated[str, Field(max_length=65535)] = Field(
        description="The comment text."
    )
    user: Union[None, SimpleUser] = Field()
    created_at: datetime = Field()
    updated_at: datetime = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="author_association",
        description="How the author is associated with the repository.",
    )


class GistCommit(GitHubModel):
    """Gist Commit

    Gist Commit
    """

    url: str = Field()
    version: str = Field()
    user: Union[None, SimpleUser] = Field()
    change_status: GistCommitPropChangeStatus = Field()
    committed_at: datetime = Field()


class GistCommitPropChangeStatus(GitHubModel):
    """GistCommitPropChangeStatus"""

    total: Missing[int] = Field(default=UNSET)
    additions: Missing[int] = Field(default=UNSET)
    deletions: Missing[int] = Field(default=UNSET)


class GitignoreTemplate(GitHubModel):
    """Gitignore Template

    Gitignore Template
    """

    name: str = Field()
    source: str = Field()


class License(GitHubModel):
    """License

    License
    """

    key: str = Field()
    name: str = Field()
    spdx_id: Union[str, None] = Field()
    url: Union[str, None] = Field()
    node_id: str = Field()
    html_url: str = Field()
    description: str = Field()
    implementation: str = Field()
    permissions: List[str] = Field()
    conditions: List[str] = Field()
    limitations: List[str] = Field()
    body: str = Field()
    featured: bool = Field()


class MarketplaceListingPlan(GitHubModel):
    """Marketplace Listing Plan

    Marketplace Listing Plan
    """

    url: str = Field()
    accounts_url: str = Field()
    id: int = Field()
    number: int = Field()
    name: str = Field()
    description: str = Field()
    monthly_price_in_cents: int = Field()
    yearly_price_in_cents: int = Field()
    price_model: Literal["FREE", "FLAT_RATE", "PER_UNIT"] = Field()
    has_free_trial: bool = Field()
    unit_name: Union[str, None] = Field()
    state: str = Field()
    bullets: List[str] = Field()


class MarketplacePurchase(GitHubModel):
    """Marketplace Purchase

    Marketplace Purchase
    """

    url: str = Field()
    type: str = Field()
    id: int = Field()
    login: str = Field()
    organization_billing_email: Missing[str] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    marketplace_pending_change: Missing[
        Union[MarketplacePurchasePropMarketplacePendingChange, None]
    ] = Field(default=UNSET)
    marketplace_purchase: MarketplacePurchasePropMarketplacePurchase = Field()


class MarketplacePurchasePropMarketplacePendingChange(GitHubModel):
    """MarketplacePurchasePropMarketplacePendingChange"""

    is_installed: Missing[bool] = Field(default=UNSET)
    effective_date: Missing[str] = Field(default=UNSET)
    unit_count: Missing[Union[int, None]] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    plan: Missing[MarketplaceListingPlan] = Field(
        default=UNSET,
        title="Marketplace Listing Plan",
        description="Marketplace Listing Plan",
    )


class MarketplacePurchasePropMarketplacePurchase(GitHubModel):
    """MarketplacePurchasePropMarketplacePurchase"""

    billing_cycle: Missing[str] = Field(default=UNSET)
    next_billing_date: Missing[Union[str, None]] = Field(default=UNSET)
    is_installed: Missing[bool] = Field(default=UNSET)
    unit_count: Missing[Union[int, None]] = Field(default=UNSET)
    on_free_trial: Missing[bool] = Field(default=UNSET)
    free_trial_ends_on: Missing[Union[str, None]] = Field(default=UNSET)
    updated_at: Missing[str] = Field(default=UNSET)
    plan: Missing[MarketplaceListingPlan] = Field(
        default=UNSET,
        title="Marketplace Listing Plan",
        description="Marketplace Listing Plan",
    )


class ApiOverview(GitHubModel):
    """Api Overview

    Api Overview
    """

    verifiable_password_authentication: bool = Field()
    ssh_key_fingerprints: Missing[ApiOverviewPropSshKeyFingerprints] = Field(
        default=UNSET
    )
    ssh_keys: Missing[List[str]] = Field(default=UNSET)
    hooks: Missing[List[str]] = Field(default=UNSET)
    github_enterprise_importer: Missing[List[str]] = Field(default=UNSET)
    web: Missing[List[str]] = Field(default=UNSET)
    api: Missing[List[str]] = Field(default=UNSET)
    git: Missing[List[str]] = Field(default=UNSET)
    packages: Missing[List[str]] = Field(default=UNSET)
    pages: Missing[List[str]] = Field(default=UNSET)
    importer: Missing[List[str]] = Field(default=UNSET)
    actions: Missing[List[str]] = Field(default=UNSET)
    dependabot: Missing[List[str]] = Field(default=UNSET)
    domains: Missing[ApiOverviewPropDomains] = Field(default=UNSET)


class ApiOverviewPropSshKeyFingerprints(GitHubModel):
    """ApiOverviewPropSshKeyFingerprints"""

    sha256_rsa: Missing[str] = Field(default=UNSET, alias="SHA256_RSA")
    sha256_dsa: Missing[str] = Field(default=UNSET, alias="SHA256_DSA")
    sha256_ecdsa: Missing[str] = Field(default=UNSET, alias="SHA256_ECDSA")
    sha256_ed25519: Missing[str] = Field(default=UNSET, alias="SHA256_ED25519")


class ApiOverviewPropDomains(GitHubModel):
    """ApiOverviewPropDomains"""

    website: Missing[List[str]] = Field(default=UNSET)
    codespaces: Missing[List[str]] = Field(default=UNSET)
    copilot: Missing[List[str]] = Field(default=UNSET)
    packages: Missing[List[str]] = Field(default=UNSET)
    actions: Missing[List[str]] = Field(default=UNSET)


class SecurityAndAnalysisPropAdvancedSecurity(GitHubModel):
    """SecurityAndAnalysisPropAdvancedSecurity"""

    status: Missing[Literal["enabled", "disabled"]] = Field(default=UNSET)


class SecurityAndAnalysisPropDependabotSecurityUpdates(GitHubModel):
    """SecurityAndAnalysisPropDependabotSecurityUpdates

    Enable or disable Dependabot security updates for the repository.
    """

    status: Missing[Literal["enabled", "disabled"]] = Field(
        default=UNSET,
        description="The enablement status of Dependabot security updates for the repository.",
    )


class SecurityAndAnalysisPropSecretScanning(GitHubModel):
    """SecurityAndAnalysisPropSecretScanning"""

    status: Missing[Literal["enabled", "disabled"]] = Field(default=UNSET)


class SecurityAndAnalysisPropSecretScanningPushProtection(GitHubModel):
    """SecurityAndAnalysisPropSecretScanningPushProtection"""

    status: Missing[Literal["enabled", "disabled"]] = Field(default=UNSET)


class SecurityAndAnalysis(GitHubModel):
    """SecurityAndAnalysis"""

    advanced_security: Missing[SecurityAndAnalysisPropAdvancedSecurity] = Field(
        default=UNSET
    )
    dependabot_security_updates: Missing[
        SecurityAndAnalysisPropDependabotSecurityUpdates
    ] = Field(
        default=UNSET,
        description="Enable or disable Dependabot security updates for the repository.",
    )
    secret_scanning: Missing[SecurityAndAnalysisPropSecretScanning] = Field(
        default=UNSET
    )
    secret_scanning_push_protection: Missing[
        SecurityAndAnalysisPropSecretScanningPushProtection
    ] = Field(default=UNSET)


class MinimalRepository(GitHubModel):
    """Minimal Repository

    Minimal Repository
    """

    id: int = Field()
    node_id: str = Field()
    name: str = Field()
    full_name: str = Field()
    owner: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    private: bool = Field()
    html_url: str = Field()
    description: Union[str, None] = Field()
    fork: bool = Field()
    url: str = Field()
    archive_url: str = Field()
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    deployments_url: str = Field()
    downloads_url: str = Field()
    events_url: str = Field()
    forks_url: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: Missing[str] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    languages_url: str = Field()
    merges_url: str = Field()
    milestones_url: str = Field()
    notifications_url: str = Field()
    pulls_url: str = Field()
    releases_url: str = Field()
    ssh_url: Missing[str] = Field(default=UNSET)
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    trees_url: str = Field()
    clone_url: Missing[str] = Field(default=UNSET)
    mirror_url: Missing[Union[str, None]] = Field(default=UNSET)
    hooks_url: str = Field()
    svn_url: Missing[str] = Field(default=UNSET)
    homepage: Missing[Union[str, None]] = Field(default=UNSET)
    language: Missing[Union[str, None]] = Field(default=UNSET)
    forks_count: Missing[int] = Field(default=UNSET)
    stargazers_count: Missing[int] = Field(default=UNSET)
    watchers_count: Missing[int] = Field(default=UNSET)
    size: Missing[int] = Field(
        default=UNSET,
        description="The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.",
    )
    default_branch: Missing[str] = Field(default=UNSET)
    open_issues_count: Missing[int] = Field(default=UNSET)
    is_template: Missing[bool] = Field(default=UNSET)
    topics: Missing[List[str]] = Field(default=UNSET)
    has_issues: Missing[bool] = Field(default=UNSET)
    has_projects: Missing[bool] = Field(default=UNSET)
    has_wiki: Missing[bool] = Field(default=UNSET)
    has_pages: Missing[bool] = Field(default=UNSET)
    has_downloads: Missing[bool] = Field(default=UNSET)
    has_discussions: Missing[bool] = Field(default=UNSET)
    archived: Missing[bool] = Field(default=UNSET)
    disabled: Missing[bool] = Field(default=UNSET)
    visibility: Missing[str] = Field(default=UNSET)
    pushed_at: Missing[Union[datetime, None]] = Field(default=UNSET)
    created_at: Missing[Union[datetime, None]] = Field(default=UNSET)
    updated_at: Missing[Union[datetime, None]] = Field(default=UNSET)
    permissions: Missing[MinimalRepositoryPropPermissions] = Field(default=UNSET)
    role_name: Missing[str] = Field(default=UNSET)
    temp_clone_token: Missing[Union[str, None]] = Field(default=UNSET)
    delete_branch_on_merge: Missing[bool] = Field(default=UNSET)
    subscribers_count: Missing[int] = Field(default=UNSET)
    network_count: Missing[int] = Field(default=UNSET)
    code_of_conduct: Missing[CodeOfConduct] = Field(
        default=UNSET, title="Code Of Conduct", description="Code Of Conduct"
    )
    license_: Missing[Union[MinimalRepositoryPropLicense, None]] = Field(
        default=UNSET, alias="license"
    )
    forks: Missing[int] = Field(default=UNSET)
    open_issues: Missing[int] = Field(default=UNSET)
    watchers: Missing[int] = Field(default=UNSET)
    allow_forking: Missing[bool] = Field(default=UNSET)
    web_commit_signoff_required: Missing[bool] = Field(default=UNSET)
    security_and_analysis: Missing[Union[SecurityAndAnalysis, None]] = Field(
        default=UNSET
    )


class MinimalRepositoryPropPermissions(GitHubModel):
    """MinimalRepositoryPropPermissions"""

    admin: Missing[bool] = Field(default=UNSET)
    maintain: Missing[bool] = Field(default=UNSET)
    push: Missing[bool] = Field(default=UNSET)
    triage: Missing[bool] = Field(default=UNSET)
    pull: Missing[bool] = Field(default=UNSET)


class MinimalRepositoryPropLicense(GitHubModel):
    """MinimalRepositoryPropLicense"""

    key: Missing[str] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    spdx_id: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)


class Thread(GitHubModel):
    """Thread

    Thread
    """

    id: str = Field()
    repository: MinimalRepository = Field(
        title="Minimal Repository", description="Minimal Repository"
    )
    subject: ThreadPropSubject = Field()
    reason: str = Field()
    unread: bool = Field()
    updated_at: str = Field()
    last_read_at: Union[str, None] = Field()
    url: str = Field()
    subscription_url: str = Field()


class ThreadPropSubject(GitHubModel):
    """ThreadPropSubject"""

    title: str = Field()
    url: str = Field()
    latest_comment_url: str = Field()
    type: str = Field()


class ThreadSubscription(GitHubModel):
    """Thread Subscription

    Thread Subscription
    """

    subscribed: bool = Field()
    ignored: bool = Field()
    reason: Union[str, None] = Field()
    created_at: Union[datetime, None] = Field()
    url: str = Field()
    thread_url: Missing[str] = Field(default=UNSET)
    repository_url: Missing[str] = Field(default=UNSET)


class OrganizationSimple(GitHubModel):
    """Organization Simple

    A GitHub organization.
    """

    login: str = Field()
    id: int = Field()
    node_id: str = Field()
    url: str = Field()
    repos_url: str = Field()
    events_url: str = Field()
    hooks_url: str = Field()
    issues_url: str = Field()
    members_url: str = Field()
    public_members_url: str = Field()
    avatar_url: str = Field()
    description: Union[str, None] = Field()


class OrganizationFull(GitHubModel):
    """Organization Full

    Organization Full
    """

    login: str = Field()
    id: int = Field()
    node_id: str = Field()
    url: str = Field()
    repos_url: str = Field()
    events_url: str = Field()
    hooks_url: str = Field()
    issues_url: str = Field()
    members_url: str = Field()
    public_members_url: str = Field()
    avatar_url: str = Field()
    description: Union[str, None] = Field()
    name: Missing[Union[str, None]] = Field(default=UNSET)
    company: Missing[Union[str, None]] = Field(default=UNSET)
    blog: Missing[Union[str, None]] = Field(default=UNSET)
    location: Missing[Union[str, None]] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    twitter_username: Missing[Union[str, None]] = Field(default=UNSET)
    is_verified: Missing[bool] = Field(default=UNSET)
    has_organization_projects: bool = Field()
    has_repository_projects: bool = Field()
    public_repos: int = Field()
    public_gists: int = Field()
    followers: int = Field()
    following: int = Field()
    html_url: str = Field()
    type: str = Field()
    total_private_repos: Missing[int] = Field(default=UNSET)
    owned_private_repos: Missing[int] = Field(default=UNSET)
    private_gists: Missing[Union[int, None]] = Field(default=UNSET)
    disk_usage: Missing[Union[int, None]] = Field(default=UNSET)
    collaborators: Missing[Union[int, None]] = Field(default=UNSET)
    billing_email: Missing[Union[str, None]] = Field(default=UNSET)
    plan: Missing[OrganizationFullPropPlan] = Field(default=UNSET)
    default_repository_permission: Missing[Union[str, None]] = Field(default=UNSET)
    members_can_create_repositories: Missing[Union[bool, None]] = Field(default=UNSET)
    two_factor_requirement_enabled: Missing[Union[bool, None]] = Field(default=UNSET)
    members_allowed_repository_creation_type: Missing[str] = Field(default=UNSET)
    members_can_create_public_repositories: Missing[bool] = Field(default=UNSET)
    members_can_create_private_repositories: Missing[bool] = Field(default=UNSET)
    members_can_create_internal_repositories: Missing[bool] = Field(default=UNSET)
    members_can_create_pages: Missing[bool] = Field(default=UNSET)
    members_can_create_public_pages: Missing[bool] = Field(default=UNSET)
    members_can_create_private_pages: Missing[bool] = Field(default=UNSET)
    members_can_fork_private_repositories: Missing[Union[bool, None]] = Field(
        default=UNSET
    )
    web_commit_signoff_required: Missing[bool] = Field(default=UNSET)
    advanced_security_enabled_for_new_repositories: Missing[bool] = Field(
        default=UNSET,
        description="Whether GitHub Advanced Security is enabled for new repositories and repositories transferred to this organization.\n\nThis field is only visible to organization owners or members of a team with the security manager role.",
    )
    dependabot_alerts_enabled_for_new_repositories: Missing[bool] = Field(
        default=UNSET,
        description="Whether GitHub Advanced Security is automatically enabled for new repositories and repositories transferred to\nthis organization.\n\nThis field is only visible to organization owners or members of a team with the security manager role.",
    )
    dependabot_security_updates_enabled_for_new_repositories: Missing[bool] = Field(
        default=UNSET,
        description="Whether dependabot security updates are automatically enabled for new repositories and repositories transferred\nto this organization.\n\nThis field is only visible to organization owners or members of a team with the security manager role.",
    )
    dependency_graph_enabled_for_new_repositories: Missing[bool] = Field(
        default=UNSET,
        description="Whether dependency graph is automatically enabled for new repositories and repositories transferred to this\norganization.\n\nThis field is only visible to organization owners or members of a team with the security manager role.",
    )
    secret_scanning_enabled_for_new_repositories: Missing[bool] = Field(
        default=UNSET,
        description="Whether secret scanning is automatically enabled for new repositories and repositories transferred to this\norganization.\n\nThis field is only visible to organization owners or members of a team with the security manager role.",
    )
    secret_scanning_push_protection_enabled_for_new_repositories: Missing[bool] = Field(
        default=UNSET,
        description="Whether secret scanning push protection is automatically enabled for new repositories and repositories\ntransferred to this organization.\n\nThis field is only visible to organization owners or members of a team with the security manager role.",
    )
    secret_scanning_push_protection_custom_link_enabled: Missing[bool] = Field(
        default=UNSET,
        description="Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection.",
    )
    secret_scanning_push_protection_custom_link: Missing[Union[str, None]] = Field(
        default=UNSET,
        description="An optional URL string to display to contributors who are blocked from pushing a secret.",
    )
    created_at: datetime = Field()
    updated_at: datetime = Field()
    archived_at: Union[datetime, None] = Field()


class OrganizationFullPropPlan(GitHubModel):
    """OrganizationFullPropPlan"""

    name: str = Field()
    space: int = Field()
    private_repos: int = Field()
    filled_seats: Missing[int] = Field(default=UNSET)
    seats: Missing[int] = Field(default=UNSET)


class ActionsCacheUsageOrgEnterprise(GitHubModel):
    """ActionsCacheUsageOrgEnterprise"""

    total_active_caches_count: int = Field(
        description="The count of active caches across all repositories of an enterprise or an organization."
    )
    total_active_caches_size_in_bytes: int = Field(
        description="The total size in bytes of all active cache items across all repositories of an enterprise or an organization."
    )


class ActionsCacheUsageByRepository(GitHubModel):
    """Actions Cache Usage by repository

    GitHub Actions Cache Usage by repository.
    """

    full_name: str = Field(
        description="The repository owner and name for the cache usage being shown."
    )
    active_caches_size_in_bytes: int = Field(
        description="The sum of the size in bytes of all the active cache items in the repository."
    )
    active_caches_count: int = Field(
        description="The number of active caches in the repository."
    )


class OidcCustomSub(GitHubModel):
    """Actions OIDC Subject customization

    Actions OIDC Subject customization
    """

    include_claim_keys: List[str] = Field(
        description="Array of unique strings. Each claim key can only contain alphanumeric characters and underscores."
    )


class EmptyObject(GitHubModel):
    """Empty Object

    An object without any properties.
    """


class ActionsOrganizationPermissions(GitHubModel):
    """ActionsOrganizationPermissions"""

    enabled_repositories: Literal["all", "none", "selected"] = Field(
        description="The policy that controls the repositories in the organization that are allowed to run GitHub Actions."
    )
    selected_repositories_url: Missing[str] = Field(
        default=UNSET,
        description="The API URL to use to get or set the selected repositories that are allowed to run GitHub Actions, when `enabled_repositories` is set to `selected`.",
    )
    allowed_actions: Missing[Literal["all", "local_only", "selected"]] = Field(
        default=UNSET,
        description="The permissions policy that controls the actions and reusable workflows that are allowed to run.",
    )
    selected_actions_url: Missing[str] = Field(
        default=UNSET,
        description="The API URL to use to get or set the actions and reusable workflows that are allowed to run, when `allowed_actions` is set to `selected`.",
    )


class SelectedActions(GitHubModel):
    """SelectedActions"""

    github_owned_allowed: Missing[bool] = Field(
        default=UNSET,
        description="Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization.",
    )
    verified_allowed: Missing[bool] = Field(
        default=UNSET,
        description="Whether actions from GitHub Marketplace verified creators are allowed. Set to `true` to allow all actions by GitHub Marketplace verified creators.",
    )
    patterns_allowed: Missing[List[str]] = Field(
        default=UNSET,
        description="Specifies a list of string-matching patterns to allow specific action(s) and reusable workflow(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`.\n\n**Note**: The `patterns_allowed` setting only applies to public repositories.",
    )


class ActionsGetDefaultWorkflowPermissions(GitHubModel):
    """ActionsGetDefaultWorkflowPermissions"""

    default_workflow_permissions: Literal["read", "write"] = Field(
        description="The default workflow permissions granted to the GITHUB_TOKEN when running workflows."
    )
    can_approve_pull_request_reviews: bool = Field(
        description="Whether GitHub Actions can approve pull requests. Enabling this can be a security risk."
    )


class ActionsSetDefaultWorkflowPermissions(GitHubModel):
    """ActionsSetDefaultWorkflowPermissions"""

    default_workflow_permissions: Missing[Literal["read", "write"]] = Field(
        default=UNSET,
        description="The default workflow permissions granted to the GITHUB_TOKEN when running workflows.",
    )
    can_approve_pull_request_reviews: Missing[bool] = Field(
        default=UNSET,
        description="Whether GitHub Actions can approve pull requests. Enabling this can be a security risk.",
    )


class RunnerLabel(GitHubModel):
    """Self hosted runner label

    A label for a self hosted runner
    """

    id: Missing[int] = Field(
        default=UNSET, description="Unique identifier of the label."
    )
    name: str = Field(description="Name of the label.")
    type: Missing[Literal["read-only", "custom"]] = Field(
        default=UNSET,
        description="The type of label. Read-only labels are applied automatically when the runner is configured.",
    )


class Runner(GitHubModel):
    """Self hosted runners

    A self hosted runner
    """

    id: int = Field(description="The id of the runner.")
    runner_group_id: Missing[int] = Field(
        default=UNSET, description="The id of the runner group."
    )
    name: str = Field(description="The name of the runner.")
    os: str = Field(description="The Operating System of the runner.")
    status: str = Field(description="The status of the runner.")
    busy: bool = Field()
    labels: List[RunnerLabel] = Field()


class RunnerApplication(GitHubModel):
    """Runner Application

    Runner Application
    """

    os: str = Field()
    architecture: str = Field()
    download_url: str = Field()
    filename: str = Field()
    temp_download_token: Missing[str] = Field(
        default=UNSET,
        description="A short lived bearer token used to download the runner, if needed.",
    )
    sha256_checksum: Missing[str] = Field(default=UNSET)


class AuthenticationToken(GitHubModel):
    """Authentication Token

    Authentication Token
    """

    token: str = Field(description="The token used for authentication")
    expires_at: datetime = Field(description="The time this token expires")
    permissions: Missing[AuthenticationTokenPropPermissions] = Field(default=UNSET)
    repositories: Missing[List[Repository]] = Field(
        default=UNSET, description="The repositories this token has access to"
    )
    single_file: Missing[Union[str, None]] = Field(default=UNSET)
    repository_selection: Missing[Literal["all", "selected"]] = Field(
        default=UNSET,
        description="Describe whether all repositories have been selected or there's a selection involved",
    )


class AuthenticationTokenPropPermissions(GitHubModel):
    """AuthenticationTokenPropPermissions

    Examples:
        {'issues': 'read', 'deployments': 'write'}
    """


class OrganizationActionsSecret(GitHubModel):
    """Actions Secret for an Organization

    Secrets for GitHub Actions for an organization.
    """

    name: str = Field(description="The name of the secret.")
    created_at: datetime = Field()
    updated_at: datetime = Field()
    visibility: Literal["all", "private", "selected"] = Field(
        description="Visibility of a secret"
    )
    selected_repositories_url: Missing[str] = Field(default=UNSET)


class ActionsPublicKey(GitHubModel):
    """ActionsPublicKey

    The public key used for setting Actions Secrets.
    """

    key_id: str = Field(description="The identifier for the key.")
    key: str = Field(description="The Base64 encoded public key.")
    id: Missing[int] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)
    title: Missing[str] = Field(default=UNSET)
    created_at: Missing[str] = Field(default=UNSET)


class OrganizationActionsVariable(GitHubModel):
    """Actions Variable for an Organization

    Organization variable for GitHub Actions.
    """

    name: str = Field(description="The name of the variable.")
    value: str = Field(description="The value of the variable.")
    created_at: datetime = Field(
        description="The date and time at which the variable was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ."
    )
    updated_at: datetime = Field(
        description="The date and time at which the variable was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ."
    )
    visibility: Literal["all", "private", "selected"] = Field(
        description="Visibility of a variable"
    )
    selected_repositories_url: Missing[str] = Field(default=UNSET)


class CodeScanningAlertRuleSummary(GitHubModel):
    """CodeScanningAlertRuleSummary"""

    id: Missing[Union[str, None]] = Field(
        default=UNSET,
        description="A unique identifier for the rule used to detect the alert.",
    )
    name: Missing[str] = Field(
        default=UNSET, description="The name of the rule used to detect the alert."
    )
    tags: Missing[Union[List[str], None]] = Field(
        default=UNSET, description="A set of tags applicable for the rule."
    )
    severity: Missing[Union[None, Literal["none", "note", "warning", "error"]]] = Field(
        default=UNSET, description="The severity of the alert."
    )
    security_severity_level: Missing[
        Union[None, Literal["low", "medium", "high", "critical"]]
    ] = Field(default=UNSET, description="The security severity of the alert.")
    description: Missing[str] = Field(
        default=UNSET,
        description="A short description of the rule used to detect the alert.",
    )


class CodeScanningAnalysisTool(GitHubModel):
    """CodeScanningAnalysisTool"""

    name: Missing[str] = Field(
        default=UNSET,
        description="The name of the tool used to generate the code scanning analysis.",
    )
    version: Missing[Union[str, None]] = Field(
        default=UNSET,
        description="The version of the tool used to generate the code scanning analysis.",
    )
    guid: Missing[Union[str, None]] = Field(
        default=UNSET,
        description="The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data.",
    )


class CodeScanningAlertLocation(GitHubModel):
    """CodeScanningAlertLocation

    Describe a region within a file for the alert.
    """

    path: Missing[str] = Field(default=UNSET)
    start_line: Missing[int] = Field(default=UNSET)
    end_line: Missing[int] = Field(default=UNSET)
    start_column: Missing[int] = Field(default=UNSET)
    end_column: Missing[int] = Field(default=UNSET)


class CodeScanningAlertInstance(GitHubModel):
    """CodeScanningAlertInstance"""

    ref: Missing[str] = Field(
        default=UNSET,
        description="The Git reference, formatted as `refs/pull/<number>/merge`, `refs/pull/<number>/head`,\n`refs/heads/<branch name>` or simply `<branch name>`.",
    )
    analysis_key: Missing[str] = Field(
        default=UNSET,
        description="Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.",
    )
    environment: Missing[str] = Field(
        default=UNSET,
        description="Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.",
    )
    category: Missing[str] = Field(
        default=UNSET,
        description="Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code.",
    )
    state: Missing[Literal["open", "dismissed", "fixed"]] = Field(
        default=UNSET, description="State of a code scanning alert."
    )
    commit_sha: Missing[str] = Field(default=UNSET)
    message: Missing[CodeScanningAlertInstancePropMessage] = Field(default=UNSET)
    location: Missing[CodeScanningAlertLocation] = Field(
        default=UNSET, description="Describe a region within a file for the alert."
    )
    html_url: Missing[str] = Field(default=UNSET)
    classifications: Missing[
        List[Union[None, Literal["source", "generated", "test", "library"]]]
    ] = Field(
        default=UNSET,
        description="Classifications that have been applied to the file that triggered the alert.\nFor example identifying it as documentation, or a generated file.",
    )


class CodeScanningAlertInstancePropMessage(GitHubModel):
    """CodeScanningAlertInstancePropMessage"""

    text: Missing[str] = Field(default=UNSET)


class CodeScanningOrganizationAlertItems(GitHubModel):
    """CodeScanningOrganizationAlertItems"""

    number: int = Field(description="The security alert number.")
    created_at: datetime = Field(
        description="The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."
    )
    updated_at: Missing[datetime] = Field(
        default=UNSET,
        description="The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )
    url: str = Field(description="The REST API URL of the alert resource.")
    html_url: str = Field(description="The GitHub URL of the alert resource.")
    instances_url: str = Field(
        description="The REST API URL for fetching the list of instances for an alert."
    )
    state: Literal["open", "dismissed", "fixed"] = Field(
        description="State of a code scanning alert."
    )
    fixed_at: Missing[Union[datetime, None]] = Field(
        default=UNSET,
        description="The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )
    dismissed_by: Union[None, SimpleUser] = Field()
    dismissed_at: Union[datetime, None] = Field(
        description="The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."
    )
    dismissed_reason: Union[
        None, Literal["false positive", "won't fix", "used in tests"]
    ] = Field(
        description="**Required when the state is dismissed.** The reason for dismissing or closing the alert."
    )
    dismissed_comment: Missing[
        Union[Annotated[str, Field(max_length=280)], None]
    ] = Field(
        default=UNSET,
        description="The dismissal comment associated with the dismissal of the alert.",
    )
    rule: CodeScanningAlertRuleSummary = Field()
    tool: CodeScanningAnalysisTool = Field()
    most_recent_instance: CodeScanningAlertInstance = Field()
    repository: SimpleRepository = Field(
        title="Simple Repository", description="A GitHub repository."
    )


class CodespaceMachine(GitHubModel):
    """Codespace machine

    A description of the machine powering a codespace.
    """

    name: str = Field(description="The name of the machine.")
    display_name: str = Field(
        description="The display name of the machine includes cores, memory, and storage."
    )
    operating_system: str = Field(description="The operating system of the machine.")
    storage_in_bytes: int = Field(
        description="How much storage is available to the codespace."
    )
    memory_in_bytes: int = Field(
        description="How much memory is available to the codespace."
    )
    cpus: int = Field(description="How many cores are available to the codespace.")
    prebuild_availability: Union[None, Literal["none", "ready", "in_progress"]] = Field(
        description='Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value will be "none" if no prebuild is available. Latest values "ready" and "in_progress" indicate the prebuild availability status.'
    )


class Codespace(GitHubModel):
    """Codespace

    A codespace.
    """

    id: int = Field()
    name: str = Field(description="Automatically generated name of this codespace.")
    display_name: Missing[Union[str, None]] = Field(
        default=UNSET, description="Display name for this codespace."
    )
    environment_id: Union[str, None] = Field(
        description="UUID identifying this codespace's environment."
    )
    owner: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    billable_owner: SimpleUser = Field(
        title="Simple User", description="A GitHub user."
    )
    repository: MinimalRepository = Field(
        title="Minimal Repository", description="Minimal Repository"
    )
    machine: Union[None, CodespaceMachine] = Field()
    devcontainer_path: Missing[Union[str, None]] = Field(
        default=UNSET,
        description="Path to devcontainer.json from repo root used to create Codespace.",
    )
    prebuild: Union[bool, None] = Field(
        description="Whether the codespace was created from a prebuild."
    )
    created_at: datetime = Field()
    updated_at: datetime = Field()
    last_used_at: datetime = Field(
        description="Last known time this codespace was started."
    )
    state: Literal[
        "Unknown",
        "Created",
        "Queued",
        "Provisioning",
        "Available",
        "Awaiting",
        "Unavailable",
        "Deleted",
        "Moved",
        "Shutdown",
        "Archived",
        "Starting",
        "ShuttingDown",
        "Failed",
        "Exporting",
        "Updating",
        "Rebuilding",
    ] = Field(description="State of this codespace.")
    url: str = Field(description="API URL for this codespace.")
    git_status: CodespacePropGitStatus = Field(
        description="Details about the codespace's git repository."
    )
    location: Literal["EastUs", "SouthEastAsia", "WestEurope", "WestUs2"] = Field(
        description="The initally assigned location of a new codespace."
    )
    idle_timeout_minutes: Union[int, None] = Field(
        description="The number of minutes of inactivity after which this codespace will be automatically stopped."
    )
    web_url: str = Field(description="URL to access this codespace on the web.")
    machines_url: str = Field(
        description="API URL to access available alternate machine types for this codespace."
    )
    start_url: str = Field(description="API URL to start this codespace.")
    stop_url: str = Field(description="API URL to stop this codespace.")
    publish_url: Missing[Union[str, None]] = Field(
        default=UNSET,
        description="API URL to publish this codespace to a new repository.",
    )
    pulls_url: Union[str, None] = Field(
        description="API URL for the Pull Request associated with this codespace, if any."
    )
    recent_folders: List[str] = Field()
    runtime_constraints: Missing[CodespacePropRuntimeConstraints] = Field(default=UNSET)
    pending_operation: Missing[Union[bool, None]] = Field(
        default=UNSET,
        description="Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable. The only thing that you can do with a codespace in this state is delete it.",
    )
    pending_operation_disabled_reason: Missing[Union[str, None]] = Field(
        default=UNSET,
        description="Text to show user when codespace is disabled by a pending operation",
    )
    idle_timeout_notice: Missing[Union[str, None]] = Field(
        default=UNSET,
        description="Text to show user when codespace idle timeout minutes has been overriden by an organization policy",
    )
    retention_period_minutes: Missing[Union[int, None]] = Field(
        default=UNSET,
        description="Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).",
    )
    retention_expires_at: Missing[Union[datetime, None]] = Field(
        default=UNSET,
        description='When a codespace will be auto-deleted based on the "retention_period_minutes" and "last_used_at"',
    )
    last_known_stop_notice: Missing[Union[str, None]] = Field(
        default=UNSET,
        description="The text to display to a user when a codespace has been stopped for a potentially actionable reason.",
    )


class CodespacePropGitStatus(GitHubModel):
    """CodespacePropGitStatus

    Details about the codespace's git repository.
    """

    ahead: Missing[int] = Field(
        default=UNSET,
        description="The number of commits the local repository is ahead of the remote.",
    )
    behind: Missing[int] = Field(
        default=UNSET,
        description="The number of commits the local repository is behind the remote.",
    )
    has_unpushed_changes: Missing[bool] = Field(
        default=UNSET, description="Whether the local repository has unpushed changes."
    )
    has_uncommitted_changes: Missing[bool] = Field(
        default=UNSET,
        description="Whether the local repository has uncommitted changes.",
    )
    ref: Missing[str] = Field(
        default=UNSET,
        description="The current branch (or SHA if in detached HEAD state) of the local repository.",
    )


class CodespacePropRuntimeConstraints(GitHubModel):
    """CodespacePropRuntimeConstraints"""

    allowed_port_privacy_settings: Missing[Union[List[str], None]] = Field(
        default=UNSET,
        description="The privacy settings a user can select from when forwarding a port.",
    )


class CodespacesOrgSecret(GitHubModel):
    """Codespaces Secret

    Secrets for a GitHub Codespace.
    """

    name: str = Field(description="The name of the secret")
    created_at: datetime = Field(
        description="The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ."
    )
    updated_at: datetime = Field(
        description="The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ."
    )
    visibility: Literal["all", "private", "selected"] = Field(
        description="The type of repositories in the organization that the secret is visible to"
    )
    selected_repositories_url: Missing[str] = Field(
        default=UNSET,
        description="The API URL at which the list of repositories this secret is visible to can be retrieved",
    )


class CodespacesPublicKey(GitHubModel):
    """CodespacesPublicKey

    The public key used for setting Codespaces secrets.
    """

    key_id: str = Field(description="The identifier for the key.")
    key: str = Field(description="The Base64 encoded public key.")
    id: Missing[int] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)
    title: Missing[str] = Field(default=UNSET)
    created_at: Missing[str] = Field(default=UNSET)


class CopilotSeatBreakdown(GitHubModel):
    """Copilot Business Seat Breakdown

    The breakdown of Copilot Business seats for the organization.
    """

    total: Missing[int] = Field(
        default=UNSET,
        description="The total number of seats being billed for the organization as of the current billing cycle.",
    )
    added_this_cycle: Missing[int] = Field(
        default=UNSET, description="Seats added during the current billing cycle."
    )
    pending_cancellation: Missing[int] = Field(
        default=UNSET,
        description="The number of seats that are pending cancellation at the end of the current billing cycle.",
    )
    pending_invitation: Missing[int] = Field(
        default=UNSET,
        description="The number of seats that have been assigned to users that have not yet accepted an invitation to this organization.",
    )
    active_this_cycle: Missing[int] = Field(
        default=UNSET,
        description="The number of seats that have used Copilot during the current billing cycle.",
    )
    inactive_this_cycle: Missing[int] = Field(
        default=UNSET,
        description="The number of seats that have not used Copilot during the current billing cycle.",
    )


class CopilotOrganizationDetails(ExtraGitHubModel):
    """Copilot Business Organization Details

    Information about the seat breakdown and policies set for an organization with a
    Copilot Business subscription.
    """

    seat_breakdown: CopilotSeatBreakdown = Field(
        title="Copilot Business Seat Breakdown",
        description="The breakdown of Copilot Business seats for the organization.",
    )
    public_code_suggestions: Literal[
        "allow", "block", "unconfigured", "unknown"
    ] = Field(
        description="The organization policy for allowing or disallowing Copilot to make suggestions that match public code."
    )
    copilot_chat: Missing[Literal["enabled", "disabled", "unconfigured"]] = Field(
        default=UNSET,
        description="The organization policy for allowing or disallowing organization members to use Copilot Chat within their editor.",
    )
    seat_management_setting: Literal[
        "assign_all", "assign_selected", "disabled", "unconfigured"
    ] = Field(description="The mode of assigning new seats.")


class TeamSimple(GitHubModel):
    """Team Simple

    Groups of organization members that gives permissions on specified repositories.
    """

    id: int = Field(description="Unique identifier of the team")
    node_id: str = Field()
    url: str = Field(description="URL for the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    description: Union[str, None] = Field(description="Description of the team")
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Missing[str] = Field(
        default=UNSET, description="The level of privacy this team should have"
    )
    notification_setting: Missing[str] = Field(
        default=UNSET, description="The notification setting the team has set"
    )
    html_url: str = Field()
    repositories_url: str = Field()
    slug: str = Field()
    ldap_dn: Missing[str] = Field(
        default=UNSET,
        description="Distinguished Name (DN) that team maps to within LDAP environment",
    )


class Team(GitHubModel):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    id: int = Field()
    node_id: str = Field()
    name: str = Field()
    slug: str = Field()
    description: Union[str, None] = Field()
    privacy: Missing[str] = Field(default=UNSET)
    notification_setting: Missing[str] = Field(default=UNSET)
    permission: str = Field()
    permissions: Missing[TeamPropPermissions] = Field(default=UNSET)
    url: str = Field()
    html_url: str = Field()
    members_url: str = Field()
    repositories_url: str = Field()
    parent: Union[None, TeamSimple] = Field()


class TeamPropPermissions(GitHubModel):
    """TeamPropPermissions"""

    pull: bool = Field()
    triage: bool = Field()
    push: bool = Field()
    maintain: bool = Field()
    admin: bool = Field()


class Organization(GitHubModel):
    """Organization

    GitHub account for managing multiple users, teams, and repositories
    """

    login: str = Field(description="Unique login name of the organization")
    url: str = Field(description="URL for the organization")
    id: int = Field()
    node_id: str = Field()
    repos_url: str = Field()
    events_url: str = Field()
    hooks_url: str = Field()
    issues_url: str = Field()
    members_url: str = Field()
    public_members_url: str = Field()
    avatar_url: str = Field()
    description: Union[str, None] = Field()
    blog: Missing[str] = Field(
        default=UNSET, description="Display blog url for the organization"
    )
    html_url: str = Field()
    name: Missing[str] = Field(
        default=UNSET, description="Display name for the organization"
    )
    company: Missing[str] = Field(
        default=UNSET, description="Display company name for the organization"
    )
    location: Missing[str] = Field(
        default=UNSET, description="Display location for the organization"
    )
    email: Missing[str] = Field(
        default=UNSET, description="Display email for the organization"
    )
    has_organization_projects: bool = Field(
        description="Specifies if organization projects are enabled for this org"
    )
    has_repository_projects: bool = Field(
        description="Specifies if repository projects are enabled for repositories that belong to this org"
    )
    is_verified: Missing[bool] = Field(default=UNSET)
    public_repos: int = Field()
    public_gists: int = Field()
    followers: int = Field()
    following: int = Field()
    type: str = Field()
    created_at: datetime = Field()
    updated_at: datetime = Field()
    plan: Missing[OrganizationPropPlan] = Field(default=UNSET)


class OrganizationPropPlan(GitHubModel):
    """OrganizationPropPlan"""

    name: Missing[str] = Field(default=UNSET)
    space: Missing[int] = Field(default=UNSET)
    private_repos: Missing[int] = Field(default=UNSET)
    filled_seats: Missing[int] = Field(default=UNSET)
    seats: Missing[int] = Field(default=UNSET)


class CopilotSeatDetails(GitHubModel):
    """Copilot Business Seat Detail

    Information about a Copilot Business seat assignment for a user, team, or
    organization.
    """

    assignee: Union[SimpleUser, Team, Organization] = Field(
        description="The assignee that has been granted access to GitHub Copilot."
    )
    assigning_team: Missing[Union[Team, None]] = Field(
        default=UNSET,
        description="The team that granted access to GitHub Copilot to the assignee. This will be null if the user was assigned a seat individually.",
    )
    pending_cancellation_date: Missing[Union[date, None]] = Field(
        default=UNSET,
        description="The pending cancellation date for the seat, in `YYYY-MM-DD` format. This will be null unless the assignee's Copilot access has been canceled during the current billing cycle. If the seat has been cancelled, this corresponds to the start of the organization's next billing cycle.",
    )
    last_activity_at: Missing[Union[datetime, None]] = Field(
        default=UNSET,
        description="Timestamp of user's last GitHub Copilot activity, in ISO 8601 format.",
    )
    last_activity_editor: Missing[Union[str, None]] = Field(
        default=UNSET,
        description="Last editor that was used by the user for a GitHub Copilot completion.",
    )
    created_at: datetime = Field(
        description="Timestamp of when the assignee was last granted access to GitHub Copilot, in ISO 8601 format."
    )
    updated_at: Missing[datetime] = Field(
        default=UNSET,
        description="Timestamp of when the assignee's GitHub Copilot access was last updated, in ISO 8601 format.",
    )


class OrganizationDependabotSecret(GitHubModel):
    """Dependabot Secret for an Organization

    Secrets for GitHub Dependabot for an organization.
    """

    name: str = Field(description="The name of the secret.")
    created_at: datetime = Field()
    updated_at: datetime = Field()
    visibility: Literal["all", "private", "selected"] = Field(
        description="Visibility of a secret"
    )
    selected_repositories_url: Missing[str] = Field(default=UNSET)


class DependabotPublicKey(GitHubModel):
    """DependabotPublicKey

    The public key used for setting Dependabot Secrets.
    """

    key_id: str = Field(description="The identifier for the key.")
    key: str = Field(description="The Base64 encoded public key.")


class Package(GitHubModel):
    """Package

    A software package
    """

    id: int = Field(description="Unique identifier of the package.")
    name: str = Field(description="The name of the package.")
    package_type: Literal[
        "npm", "maven", "rubygems", "docker", "nuget", "container"
    ] = Field()
    url: str = Field()
    html_url: str = Field()
    version_count: int = Field(description="The number of versions of the package.")
    visibility: Literal["private", "public"] = Field()
    owner: Missing[Union[None, SimpleUser]] = Field(default=UNSET)
    repository: Missing[Union[None, MinimalRepository]] = Field(default=UNSET)
    created_at: datetime = Field()
    updated_at: datetime = Field()


class OrganizationInvitation(GitHubModel):
    """Organization Invitation

    Organization Invitation
    """

    id: int = Field()
    login: Union[str, None] = Field()
    email: Union[str, None] = Field()
    role: str = Field()
    created_at: str = Field()
    failed_at: Missing[Union[str, None]] = Field(default=UNSET)
    failed_reason: Missing[Union[str, None]] = Field(default=UNSET)
    inviter: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    team_count: int = Field()
    node_id: str = Field()
    invitation_teams_url: str = Field()
    invitation_source: Missing[str] = Field(default=UNSET)


class OrgHook(GitHubModel):
    """Org Hook

    Org Hook
    """

    id: int = Field()
    url: str = Field()
    ping_url: str = Field()
    deliveries_url: Missing[str] = Field(default=UNSET)
    name: str = Field()
    events: List[str] = Field()
    active: bool = Field()
    config: OrgHookPropConfig = Field()
    updated_at: datetime = Field()
    created_at: datetime = Field()
    type: str = Field()


class OrgHookPropConfig(GitHubModel):
    """OrgHookPropConfig"""

    url: Missing[str] = Field(default=UNSET)
    insecure_ssl: Missing[str] = Field(default=UNSET)
    content_type: Missing[str] = Field(default=UNSET)
    secret: Missing[str] = Field(default=UNSET)


class InteractionLimitResponse(GitHubModel):
    """Interaction Limits

    Interaction limit settings.
    """

    limit: Literal["existing_users", "contributors_only", "collaborators_only"] = Field(
        description="The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect."
    )
    origin: str = Field()
    expires_at: datetime = Field()


class InteractionLimit(GitHubModel):
    """Interaction Restrictions

    Limit interactions to a specific type of user for a specified duration
    """

    limit: Literal["existing_users", "contributors_only", "collaborators_only"] = Field(
        description="The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect."
    )
    expiry: Missing[
        Literal["one_day", "three_days", "one_week", "one_month", "six_months"]
    ] = Field(
        default=UNSET,
        description="The duration of the interaction restriction. Default: `one_day`.",
    )


class OrgMembership(GitHubModel):
    """Org Membership

    Org Membership
    """

    url: str = Field()
    state: Literal["active", "pending"] = Field(
        description="The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation."
    )
    role: Literal["admin", "member", "billing_manager"] = Field(
        description="The user's membership type in the organization."
    )
    organization_url: str = Field()
    organization: OrganizationSimple = Field(
        title="Organization Simple", description="A GitHub organization."
    )
    user: Union[None, SimpleUser] = Field()
    permissions: Missing[OrgMembershipPropPermissions] = Field(default=UNSET)


class OrgMembershipPropPermissions(GitHubModel):
    """OrgMembershipPropPermissions"""

    can_create_repository: bool = Field()


class Migration(GitHubModel):
    """Migration

    A migration.
    """

    id: int = Field()
    owner: Union[None, SimpleUser] = Field()
    guid: str = Field()
    state: str = Field()
    lock_repositories: bool = Field()
    exclude_metadata: bool = Field()
    exclude_git_data: bool = Field()
    exclude_attachments: bool = Field()
    exclude_releases: bool = Field()
    exclude_owner_projects: bool = Field()
    org_metadata_only: bool = Field()
    repositories: List[Repository] = Field(
        description="The repositories included in the migration. Only returned for export migrations."
    )
    url: str = Field()
    created_at: datetime = Field()
    updated_at: datetime = Field()
    node_id: str = Field()
    archive_url: Missing[str] = Field(default=UNSET)
    exclude: Missing[List[str]] = Field(
        default=UNSET,
        description='Exclude related items from being returned in the response in order to improve performance of the request. The array can include any of: `"repositories"`.',
    )


class OrganizationFineGrainedPermission(GitHubModel):
    """Organization Fine-Grained Permission

    A fine-grained permission that protects organization resources.
    """

    name: str = Field()
    description: str = Field()


class OrganizationRole(GitHubModel):
    """Organization Role

    Organization roles
    """

    id: int = Field(description="The unique identifier of the role.")
    name: str = Field(description="The name of the role.")
    description: Missing[Union[str, None]] = Field(
        default=UNSET,
        description="A short description about who this role is for or what permissions it grants.",
    )
    permissions: List[str] = Field(
        description="A list of permissions included in this role."
    )
    organization: Union[None, SimpleUser] = Field()
    created_at: datetime = Field(description="The date and time the role was created.")
    updated_at: datetime = Field(
        description="The date and time the role was last updated."
    )


class PackageVersion(GitHubModel):
    """Package Version

    A version of a software package
    """

    id: int = Field(description="Unique identifier of the package version.")
    name: str = Field(description="The name of the package version.")
    url: str = Field()
    package_html_url: str = Field()
    html_url: Missing[str] = Field(default=UNSET)
    license_: Missing[str] = Field(default=UNSET, alias="license")
    description: Missing[str] = Field(default=UNSET)
    created_at: datetime = Field()
    updated_at: datetime = Field()
    deleted_at: Missing[datetime] = Field(default=UNSET)
    metadata: Missing[PackageVersionPropMetadata] = Field(
        default=UNSET, title="Package Version Metadata"
    )


class PackageVersionPropMetadata(GitHubModel):
    """Package Version Metadata"""

    package_type: Literal[
        "npm", "maven", "rubygems", "docker", "nuget", "container"
    ] = Field()
    container: Missing[PackageVersionPropMetadataPropContainer] = Field(
        default=UNSET, title="Container Metadata"
    )
    docker: Missing[PackageVersionPropMetadataPropDocker] = Field(
        default=UNSET, title="Docker Metadata"
    )


class PackageVersionPropMetadataPropContainer(GitHubModel):
    """Container Metadata"""

    tags: List[str] = Field()


class PackageVersionPropMetadataPropDocker(GitHubModel):
    """Docker Metadata"""

    tag: Missing[List[str]] = Field(default=UNSET)


class OrganizationProgrammaticAccessGrantRequest(GitHubModel):
    """Simple Organization Programmatic Access Grant Request

    Minimal representation of an organization programmatic access grant request for
    enumerations
    """

    id: int = Field(
        description="Unique identifier of the request for access via fine-grained personal access token. The `pat_request_id` used to review PAT requests."
    )
    reason: Union[str, None] = Field(description="Reason for requesting access.")
    owner: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    repository_selection: Literal["none", "all", "subset"] = Field(
        description="Type of repository selection requested."
    )
    repositories_url: str = Field(
        description="URL to the list of repositories requested to be accessed via fine-grained personal access token. Should only be followed when `repository_selection` is `subset`."
    )
    permissions: OrganizationProgrammaticAccessGrantRequestPropPermissions = Field(
        description="Permissions requested, categorized by type of permission."
    )
    created_at: str = Field(
        description="Date and time when the request for access was created."
    )
    token_expired: bool = Field(
        description="Whether the associated fine-grained personal access token has expired."
    )
    token_expires_at: Union[str, None] = Field(
        description="Date and time when the associated fine-grained personal access token expires."
    )
    token_last_used_at: Union[str, None] = Field(
        description="Date and time when the associated fine-grained personal access token was last used for authentication."
    )


class OrganizationProgrammaticAccessGrantRequestPropPermissions(GitHubModel):
    """OrganizationProgrammaticAccessGrantRequestPropPermissions

    Permissions requested, categorized by type of permission.
    """

    organization: Missing[
        OrganizationProgrammaticAccessGrantRequestPropPermissionsPropOrganization
    ] = Field(default=UNSET)
    repository: Missing[
        OrganizationProgrammaticAccessGrantRequestPropPermissionsPropRepository
    ] = Field(default=UNSET)
    other: Missing[
        OrganizationProgrammaticAccessGrantRequestPropPermissionsPropOther
    ] = Field(default=UNSET)


class OrganizationProgrammaticAccessGrantRequestPropPermissionsPropOrganization(
    ExtraGitHubModel
):
    """OrganizationProgrammaticAccessGrantRequestPropPermissionsPropOrganization"""


class OrganizationProgrammaticAccessGrantRequestPropPermissionsPropRepository(
    ExtraGitHubModel
):
    """OrganizationProgrammaticAccessGrantRequestPropPermissionsPropRepository"""


class OrganizationProgrammaticAccessGrantRequestPropPermissionsPropOther(
    ExtraGitHubModel
):
    """OrganizationProgrammaticAccessGrantRequestPropPermissionsPropOther"""


class OrganizationProgrammaticAccessGrant(GitHubModel):
    """Organization Programmatic Access Grant

    Minimal representation of an organization programmatic access grant for
    enumerations
    """

    id: int = Field(
        description="Unique identifier of the fine-grained personal access token. The `pat_id` used to get details about an approved fine-grained personal access token."
    )
    owner: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    repository_selection: Literal["none", "all", "subset"] = Field(
        description="Type of repository selection requested."
    )
    repositories_url: str = Field(
        description="URL to the list of repositories the fine-grained personal access token can access. Only follow when `repository_selection` is `subset`."
    )
    permissions: OrganizationProgrammaticAccessGrantPropPermissions = Field(
        description="Permissions requested, categorized by type of permission."
    )
    access_granted_at: str = Field(
        description="Date and time when the fine-grained personal access token was approved to access the organization."
    )
    token_expired: bool = Field(
        description="Whether the associated fine-grained personal access token has expired."
    )
    token_expires_at: Union[str, None] = Field(
        description="Date and time when the associated fine-grained personal access token expires."
    )
    token_last_used_at: Union[str, None] = Field(
        description="Date and time when the associated fine-grained personal access token was last used for authentication."
    )


class OrganizationProgrammaticAccessGrantPropPermissions(GitHubModel):
    """OrganizationProgrammaticAccessGrantPropPermissions

    Permissions requested, categorized by type of permission.
    """

    organization: Missing[
        OrganizationProgrammaticAccessGrantPropPermissionsPropOrganization
    ] = Field(default=UNSET)
    repository: Missing[
        OrganizationProgrammaticAccessGrantPropPermissionsPropRepository
    ] = Field(default=UNSET)
    other: Missing[OrganizationProgrammaticAccessGrantPropPermissionsPropOther] = Field(
        default=UNSET
    )


class OrganizationProgrammaticAccessGrantPropPermissionsPropOrganization(
    ExtraGitHubModel
):
    """OrganizationProgrammaticAccessGrantPropPermissionsPropOrganization"""


class OrganizationProgrammaticAccessGrantPropPermissionsPropRepository(
    ExtraGitHubModel
):
    """OrganizationProgrammaticAccessGrantPropPermissionsPropRepository"""


class OrganizationProgrammaticAccessGrantPropPermissionsPropOther(ExtraGitHubModel):
    """OrganizationProgrammaticAccessGrantPropPermissionsPropOther"""


class Project(GitHubModel):
    """Project

    Projects are a way to organize columns and cards of work.
    """

    owner_url: str = Field()
    url: str = Field()
    html_url: str = Field()
    columns_url: str = Field()
    id: int = Field()
    node_id: str = Field()
    name: str = Field(description="Name of the project")
    body: Union[str, None] = Field(description="Body of the project")
    number: int = Field()
    state: str = Field(description="State of the project; either 'open' or 'closed'")
    creator: Union[None, SimpleUser] = Field()
    created_at: datetime = Field()
    updated_at: datetime = Field()
    organization_permission: Missing[Literal["read", "write", "admin", "none"]] = Field(
        default=UNSET,
        description="The baseline permission that all organization members have on this project. Only present if owner is an organization.",
    )
    private: Missing[bool] = Field(
        default=UNSET,
        description="Whether or not this project can be seen by everyone. Only present if owner is an organization.",
    )


class OrgCustomProperty(GitHubModel):
    """Organization Custom Property

    Custom property defined on an organization
    """

    property_name: str = Field(description="The name of the property")
    value_type: Literal["string", "single_select"] = Field(
        description="The type of the value for the property"
    )
    required: Missing[bool] = Field(
        default=UNSET, description="Whether the property is required."
    )
    default_value: Missing[Union[str, None]] = Field(
        default=UNSET, description="Default value of the property"
    )
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Short description of the property"
    )
    allowed_values: Missing[Union[List[str], None]] = Field(
        default=UNSET, description="Ordered list of allowed values of the property"
    )


class CustomPropertyValue(GitHubModel):
    """Custom Property Value

    Custom property name and associated value
    """

    property_name: str = Field(description="The name of the property")
    value: Union[str, None] = Field(description="The value assigned to the property")


class OrgRepoCustomPropertyValues(GitHubModel):
    """Organization Repository Custom Property Values

    List of custom property values for a repository
    """

    repository_id: int = Field()
    repository_name: str = Field()
    repository_full_name: str = Field()
    properties: List[CustomPropertyValue] = Field(
        description="List of custom property names and associated values"
    )


class CodeOfConductSimple(GitHubModel):
    """Code Of Conduct Simple

    Code of Conduct Simple
    """

    url: str = Field()
    key: str = Field()
    name: str = Field()
    html_url: Union[str, None] = Field()


class FullRepository(GitHubModel):
    """Full Repository

    Full Repository
    """

    id: int = Field()
    node_id: str = Field()
    name: str = Field()
    full_name: str = Field()
    owner: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    private: bool = Field()
    html_url: str = Field()
    description: Union[str, None] = Field()
    fork: bool = Field()
    url: str = Field()
    archive_url: str = Field()
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    deployments_url: str = Field()
    downloads_url: str = Field()
    events_url: str = Field()
    forks_url: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    languages_url: str = Field()
    merges_url: str = Field()
    milestones_url: str = Field()
    notifications_url: str = Field()
    pulls_url: str = Field()
    releases_url: str = Field()
    ssh_url: str = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    trees_url: str = Field()
    clone_url: str = Field()
    mirror_url: Union[str, None] = Field()
    hooks_url: str = Field()
    svn_url: str = Field()
    homepage: Union[str, None] = Field()
    language: Union[str, None] = Field()
    forks_count: int = Field()
    stargazers_count: int = Field()
    watchers_count: int = Field()
    size: int = Field(
        description="The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0."
    )
    default_branch: str = Field()
    open_issues_count: int = Field()
    is_template: Missing[bool] = Field(default=UNSET)
    topics: Missing[List[str]] = Field(default=UNSET)
    has_issues: bool = Field()
    has_projects: bool = Field()
    has_wiki: bool = Field()
    has_pages: bool = Field()
    has_downloads: Missing[bool] = Field(default=UNSET)
    has_discussions: bool = Field()
    archived: bool = Field()
    disabled: bool = Field(
        description="Returns whether or not this repository disabled."
    )
    visibility: Missing[str] = Field(
        default=UNSET,
        description="The repository visibility: public, private, or internal.",
    )
    pushed_at: datetime = Field()
    created_at: datetime = Field()
    updated_at: datetime = Field()
    permissions: Missing[FullRepositoryPropPermissions] = Field(default=UNSET)
    allow_rebase_merge: Missing[bool] = Field(default=UNSET)
    template_repository: Missing[Union[None, Repository]] = Field(default=UNSET)
    temp_clone_token: Missing[Union[str, None]] = Field(default=UNSET)
    allow_squash_merge: Missing[bool] = Field(default=UNSET)
    allow_auto_merge: Missing[bool] = Field(default=UNSET)
    delete_branch_on_merge: Missing[bool] = Field(default=UNSET)
    allow_merge_commit: Missing[bool] = Field(default=UNSET)
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    use_squash_pr_title_as_default: Missing[bool] = Field(default=UNSET)
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n  - `PR_TITLE` - default to the pull request's title.\n  - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    allow_forking: Missing[bool] = Field(default=UNSET)
    web_commit_signoff_required: Missing[bool] = Field(default=UNSET)
    subscribers_count: int = Field()
    network_count: int = Field()
    license_: Union[None, LicenseSimple] = Field(alias="license")
    organization: Missing[Union[None, SimpleUser]] = Field(default=UNSET)
    parent: Missing[Repository] = Field(
        default=UNSET, title="Repository", description="A repository on GitHub."
    )
    source: Missing[Repository] = Field(
        default=UNSET, title="Repository", description="A repository on GitHub."
    )
    forks: int = Field()
    master_branch: Missing[str] = Field(default=UNSET)
    open_issues: int = Field()
    watchers: int = Field()
    anonymous_access_enabled: Missing[bool] = Field(
        default=UNSET, description="Whether anonymous git access is allowed."
    )
    code_of_conduct: Missing[CodeOfConductSimple] = Field(
        default=UNSET,
        title="Code Of Conduct Simple",
        description="Code of Conduct Simple",
    )
    security_and_analysis: Missing[Union[SecurityAndAnalysis, None]] = Field(
        default=UNSET
    )


class FullRepositoryPropPermissions(GitHubModel):
    """FullRepositoryPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()


class RepositoryRulesetBypassActor(GitHubModel):
    """Repository Ruleset Bypass Actor

    An actor that can bypass rules in a ruleset
    """

    actor_id: int = Field(
        description="The ID of the actor that can bypass a ruleset. If `actor_type` is `OrganizationAdmin`, this should be `1`."
    )
    actor_type: Literal[
        "RepositoryRole", "Team", "Integration", "OrganizationAdmin"
    ] = Field(description="The type of actor that can bypass a ruleset")
    bypass_mode: Literal["always", "pull_request"] = Field(
        description="When the specified actor can bypass the ruleset. `pull_request` means that an actor can only bypass rules on pull requests."
    )


class RepositoryRulesetConditions(GitHubModel):
    """Repository ruleset conditions for ref names

    Parameters for a repository ruleset ref name condition
    """

    ref_name: Missing[RepositoryRulesetConditionsPropRefName] = Field(default=UNSET)


class RepositoryRulesetConditionsPropRefName(GitHubModel):
    """RepositoryRulesetConditionsPropRefName"""

    include: Missing[List[str]] = Field(
        default=UNSET,
        description="Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.",
    )
    exclude: Missing[List[str]] = Field(
        default=UNSET,
        description="Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.",
    )


class RepositoryRulesetConditionsRepositoryNameTarget(GitHubModel):
    """Repository ruleset conditions for repository names

    Parameters for a repository name condition
    """

    repository_name: RepositoryRulesetConditionsRepositoryNameTargetPropRepositoryName = (
        Field()
    )


class RepositoryRulesetConditionsRepositoryNameTargetPropRepositoryName(GitHubModel):
    """RepositoryRulesetConditionsRepositoryNameTargetPropRepositoryName"""

    include: Missing[List[str]] = Field(
        default=UNSET,
        description="Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories.",
    )
    exclude: Missing[List[str]] = Field(
        default=UNSET,
        description="Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.",
    )
    protected: Missing[bool] = Field(
        default=UNSET,
        description="Whether renaming of target repositories is prevented.",
    )


class RepositoryRulesetConditionsRepositoryIdTarget(GitHubModel):
    """Repository ruleset conditions for repository IDs

    Parameters for a repository ID condition
    """

    repository_id: RepositoryRulesetConditionsRepositoryIdTargetPropRepositoryId = (
        Field()
    )


class RepositoryRulesetConditionsRepositoryIdTargetPropRepositoryId(GitHubModel):
    """RepositoryRulesetConditionsRepositoryIdTargetPropRepositoryId"""

    repository_ids: Missing[List[int]] = Field(
        default=UNSET,
        description="The repository IDs that the ruleset applies to. One of these IDs must match for the condition to pass.",
    )


class OrgRulesetConditionsOneof0(GitHubModel):
    """repository_name_and_ref_name

    Conditions to target repositories by name and refs by name
    """

    ref_name: Missing[RepositoryRulesetConditionsPropRefName] = Field(default=UNSET)
    repository_name: RepositoryRulesetConditionsRepositoryNameTargetPropRepositoryName = (
        Field()
    )


class OrgRulesetConditionsOneof1(GitHubModel):
    """repository_id_and_ref_name

    Conditions to target repositories by id and refs by name
    """

    ref_name: Missing[RepositoryRulesetConditionsPropRefName] = Field(default=UNSET)
    repository_id: RepositoryRulesetConditionsRepositoryIdTargetPropRepositoryId = (
        Field()
    )


class RepositoryRuleCreation(GitHubModel):
    """creation

    Only allow users with bypass permission to create matching refs.
    """

    type: Literal["creation"] = Field()


class RepositoryRuleUpdate(GitHubModel):
    """update

    Only allow users with bypass permission to update matching refs.
    """

    type: Literal["update"] = Field()
    parameters: Missing[RepositoryRuleUpdatePropParameters] = Field(default=UNSET)


class RepositoryRuleUpdatePropParameters(GitHubModel):
    """RepositoryRuleUpdatePropParameters"""

    update_allows_fetch_and_merge: bool = Field(
        description="Branch can pull changes from its upstream repository"
    )


class RepositoryRuleDeletion(GitHubModel):
    """deletion

    Only allow users with bypass permissions to delete matching refs.
    """

    type: Literal["deletion"] = Field()


class RepositoryRuleRequiredLinearHistory(GitHubModel):
    """required_linear_history

    Prevent merge commits from being pushed to matching refs.
    """

    type: Literal["required_linear_history"] = Field()


class RepositoryRuleRequiredDeployments(GitHubModel):
    """required_deployments

    Choose which environments must be successfully deployed to before refs can be
    pushed into a ref that matches this rule.
    """

    type: Literal["required_deployments"] = Field()
    parameters: Missing[RepositoryRuleRequiredDeploymentsPropParameters] = Field(
        default=UNSET
    )


class RepositoryRuleRequiredDeploymentsPropParameters(GitHubModel):
    """RepositoryRuleRequiredDeploymentsPropParameters"""

    required_deployment_environments: List[str] = Field(
        description="The environments that must be successfully deployed to before branches can be merged."
    )


class RepositoryRuleRequiredSignatures(GitHubModel):
    """required_signatures

    Commits pushed to matching refs must have verified signatures.
    """

    type: Literal["required_signatures"] = Field()


class RepositoryRulePullRequest(GitHubModel):
    """pull_request

    Require all commits be made to a non-target branch and submitted via a pull
    request before they can be merged.
    """

    type: Literal["pull_request"] = Field()
    parameters: Missing[RepositoryRulePullRequestPropParameters] = Field(default=UNSET)


class RepositoryRulePullRequestPropParameters(GitHubModel):
    """RepositoryRulePullRequestPropParameters"""

    dismiss_stale_reviews_on_push: bool = Field(
        description="New, reviewable commits pushed will dismiss previous pull request review approvals."
    )
    require_code_owner_review: bool = Field(
        description="Require an approving review in pull requests that modify files that have a designated code owner."
    )
    require_last_push_approval: bool = Field(
        description="Whether the most recent reviewable push must be approved by someone other than the person who pushed it."
    )
    required_approving_review_count: Annotated[int, Field(le=10.0)] = Field(
        description="The number of approving reviews that are required before a pull request can be merged."
    )
    required_review_thread_resolution: bool = Field(
        description="All conversations on code must be resolved before a pull request can be merged."
    )


class RepositoryRuleParamsStatusCheckConfiguration(GitHubModel):
    """StatusCheckConfiguration

    Required status check
    """

    context: str = Field(
        description="The status check context name that must be present on the commit."
    )
    integration_id: Missing[int] = Field(
        default=UNSET,
        description="The optional integration ID that this status check must originate from.",
    )


class RepositoryRuleRequiredStatusChecks(GitHubModel):
    """required_status_checks

    Choose which status checks must pass before the ref is updated. When enabled,
    commits must first be pushed to another ref where the checks pass.
    """

    type: Literal["required_status_checks"] = Field()
    parameters: Missing[RepositoryRuleRequiredStatusChecksPropParameters] = Field(
        default=UNSET
    )


class RepositoryRuleRequiredStatusChecksPropParameters(GitHubModel):
    """RepositoryRuleRequiredStatusChecksPropParameters"""

    required_status_checks: List[RepositoryRuleParamsStatusCheckConfiguration] = Field(
        description="Status checks that are required."
    )
    strict_required_status_checks_policy: bool = Field(
        description="Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled."
    )


class RepositoryRuleNonFastForward(GitHubModel):
    """non_fast_forward

    Prevent users with push access from force pushing to refs.
    """

    type: Literal["non_fast_forward"] = Field()


class RepositoryRuleCommitMessagePattern(GitHubModel):
    """commit_message_pattern

    Parameters to be used for the commit_message_pattern rule
    """

    type: Literal["commit_message_pattern"] = Field()
    parameters: Missing[RepositoryRuleCommitMessagePatternPropParameters] = Field(
        default=UNSET
    )


class RepositoryRuleCommitMessagePatternPropParameters(GitHubModel):
    """RepositoryRuleCommitMessagePatternPropParameters"""

    name: Missing[str] = Field(
        default=UNSET, description="How this rule will appear to users."
    )
    negate: Missing[bool] = Field(
        default=UNSET, description="If true, the rule will fail if the pattern matches."
    )
    operator: Literal["starts_with", "ends_with", "contains", "regex"] = Field(
        description="The operator to use for matching."
    )
    pattern: str = Field(description="The pattern to match with.")


class RepositoryRuleCommitAuthorEmailPattern(GitHubModel):
    """commit_author_email_pattern

    Parameters to be used for the commit_author_email_pattern rule
    """

    type: Literal["commit_author_email_pattern"] = Field()
    parameters: Missing[RepositoryRuleCommitAuthorEmailPatternPropParameters] = Field(
        default=UNSET
    )


class RepositoryRuleCommitAuthorEmailPatternPropParameters(GitHubModel):
    """RepositoryRuleCommitAuthorEmailPatternPropParameters"""

    name: Missing[str] = Field(
        default=UNSET, description="How this rule will appear to users."
    )
    negate: Missing[bool] = Field(
        default=UNSET, description="If true, the rule will fail if the pattern matches."
    )
    operator: Literal["starts_with", "ends_with", "contains", "regex"] = Field(
        description="The operator to use for matching."
    )
    pattern: str = Field(description="The pattern to match with.")


class RepositoryRuleCommitterEmailPattern(GitHubModel):
    """committer_email_pattern

    Parameters to be used for the committer_email_pattern rule
    """

    type: Literal["committer_email_pattern"] = Field()
    parameters: Missing[RepositoryRuleCommitterEmailPatternPropParameters] = Field(
        default=UNSET
    )


class RepositoryRuleCommitterEmailPatternPropParameters(GitHubModel):
    """RepositoryRuleCommitterEmailPatternPropParameters"""

    name: Missing[str] = Field(
        default=UNSET, description="How this rule will appear to users."
    )
    negate: Missing[bool] = Field(
        default=UNSET, description="If true, the rule will fail if the pattern matches."
    )
    operator: Literal["starts_with", "ends_with", "contains", "regex"] = Field(
        description="The operator to use for matching."
    )
    pattern: str = Field(description="The pattern to match with.")


class RepositoryRuleBranchNamePattern(GitHubModel):
    """branch_name_pattern

    Parameters to be used for the branch_name_pattern rule
    """

    type: Literal["branch_name_pattern"] = Field()
    parameters: Missing[RepositoryRuleBranchNamePatternPropParameters] = Field(
        default=UNSET
    )


class RepositoryRuleBranchNamePatternPropParameters(GitHubModel):
    """RepositoryRuleBranchNamePatternPropParameters"""

    name: Missing[str] = Field(
        default=UNSET, description="How this rule will appear to users."
    )
    negate: Missing[bool] = Field(
        default=UNSET, description="If true, the rule will fail if the pattern matches."
    )
    operator: Literal["starts_with", "ends_with", "contains", "regex"] = Field(
        description="The operator to use for matching."
    )
    pattern: str = Field(description="The pattern to match with.")


class RepositoryRuleTagNamePattern(GitHubModel):
    """tag_name_pattern

    Parameters to be used for the tag_name_pattern rule
    """

    type: Literal["tag_name_pattern"] = Field()
    parameters: Missing[RepositoryRuleTagNamePatternPropParameters] = Field(
        default=UNSET
    )


class RepositoryRuleTagNamePatternPropParameters(GitHubModel):
    """RepositoryRuleTagNamePatternPropParameters"""

    name: Missing[str] = Field(
        default=UNSET, description="How this rule will appear to users."
    )
    negate: Missing[bool] = Field(
        default=UNSET, description="If true, the rule will fail if the pattern matches."
    )
    operator: Literal["starts_with", "ends_with", "contains", "regex"] = Field(
        description="The operator to use for matching."
    )
    pattern: str = Field(description="The pattern to match with.")


class RepositoryRuleParamsWorkflowFileReference(GitHubModel):
    """WorkflowFileReference

    A workflow that must run for this rule to pass
    """

    path: str = Field(description="The path to the workflow file")
    ref: Missing[str] = Field(
        default=UNSET, description="The ref (branch or tag) of the workflow file to use"
    )
    repository_id: int = Field(
        description="The ID of the repository where the workflow is defined"
    )
    sha: Missing[str] = Field(
        default=UNSET, description="The commit SHA of the workflow file to use"
    )


class RepositoryRuleWorkflows(GitHubModel):
    """workflows

    Require all changes made to a targeted branch to pass the specified workflows
    before they can be merged.
    """

    type: Literal["workflows"] = Field()
    parameters: Missing[RepositoryRuleWorkflowsPropParameters] = Field(default=UNSET)


class RepositoryRuleWorkflowsPropParameters(GitHubModel):
    """RepositoryRuleWorkflowsPropParameters"""

    workflows: List[RepositoryRuleParamsWorkflowFileReference] = Field(
        description="Workflows that must pass for this rule to pass."
    )


class RepositoryRuleset(GitHubModel):
    """Repository ruleset

    A set of rules to apply when specified conditions are met.
    """

    id: int = Field(description="The ID of the ruleset")
    name: str = Field(description="The name of the ruleset")
    target: Missing[Literal["branch", "tag"]] = Field(
        default=UNSET, description="The target of the ruleset"
    )
    source_type: Missing[Literal["Repository", "Organization"]] = Field(
        default=UNSET, description="The type of the source of the ruleset"
    )
    source: str = Field(description="The name of the source")
    enforcement: Literal["disabled", "active", "evaluate"] = Field(
        description="The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise)."
    )
    bypass_actors: Missing[List[RepositoryRulesetBypassActor]] = Field(
        default=UNSET,
        description="The actors that can bypass the rules in this ruleset",
    )
    current_user_can_bypass: Missing[
        Literal["always", "pull_requests_only", "never"]
    ] = Field(
        default=UNSET,
        description="The bypass type of the user making the API request for this ruleset. This field is only returned when\nquerying the repository-level endpoint.",
    )
    node_id: Missing[str] = Field(default=UNSET)
    links: Missing[RepositoryRulesetPropLinks] = Field(default=UNSET, alias="_links")
    conditions: Missing[
        Union[
            RepositoryRulesetConditions,
            OrgRulesetConditionsOneof0,
            OrgRulesetConditionsOneof1,
        ]
    ] = Field(default=UNSET)
    rules: Missing[
        List[
            Union[
                RepositoryRuleCreation,
                RepositoryRuleUpdate,
                RepositoryRuleDeletion,
                RepositoryRuleRequiredLinearHistory,
                RepositoryRuleRequiredDeployments,
                RepositoryRuleRequiredSignatures,
                RepositoryRulePullRequest,
                RepositoryRuleRequiredStatusChecks,
                RepositoryRuleNonFastForward,
                RepositoryRuleCommitMessagePattern,
                RepositoryRuleCommitAuthorEmailPattern,
                RepositoryRuleCommitterEmailPattern,
                RepositoryRuleBranchNamePattern,
                RepositoryRuleTagNamePattern,
                RepositoryRuleWorkflows,
            ]
        ]
    ] = Field(default=UNSET)
    created_at: Missing[datetime] = Field(default=UNSET)
    updated_at: Missing[datetime] = Field(default=UNSET)


class RepositoryRulesetPropLinks(GitHubModel):
    """RepositoryRulesetPropLinks"""

    self_: Missing[RepositoryRulesetPropLinksPropSelf] = Field(
        default=UNSET, alias="self"
    )
    html: Missing[RepositoryRulesetPropLinksPropHtml] = Field(default=UNSET)


class RepositoryRulesetPropLinksPropSelf(GitHubModel):
    """RepositoryRulesetPropLinksPropSelf"""

    href: Missing[str] = Field(default=UNSET, description="The URL of the ruleset")


class RepositoryRulesetPropLinksPropHtml(GitHubModel):
    """RepositoryRulesetPropLinksPropHtml"""

    href: Missing[str] = Field(default=UNSET, description="The html URL of the ruleset")


class RuleSuitesItems(GitHubModel):
    """RuleSuitesItems"""

    id: Missing[int] = Field(
        default=UNSET, description="The unique identifier of the rule insight."
    )
    actor_id: Missing[int] = Field(
        default=UNSET, description="The number that identifies the user."
    )
    actor_name: Missing[str] = Field(
        default=UNSET, description="The handle for the GitHub user account."
    )
    before_sha: Missing[str] = Field(
        default=UNSET, description="The first commit sha before the push evaluation."
    )
    after_sha: Missing[str] = Field(
        default=UNSET, description="The last commit sha in the push evaluation."
    )
    ref: Missing[str] = Field(
        default=UNSET, description="The ref name that the evaluation ran on."
    )
    repository_id: Missing[int] = Field(
        default=UNSET,
        description="The ID of the repository associated with the rule evaluation.",
    )
    repository_name: Missing[str] = Field(
        default=UNSET,
        description="The name of the repository without the `.git` extension.",
    )
    pushed_at: Missing[datetime] = Field(default=UNSET)
    result: Missing[Literal["pass", "fail", "bypass"]] = Field(
        default=UNSET,
        description="The result of the rule evaluations for rules with the `active` enforcement status.",
    )
    evaluation_result: Missing[Literal["pass", "fail"]] = Field(
        default=UNSET,
        description="The result of the rule evaluations for rules with the `active` and `evaluate` enforcement statuses, demonstrating whether rules would pass or fail if all rules in the rule suite were `active`.",
    )


class RuleSuite(GitHubModel):
    """Rule Suite

    Response
    """

    id: Missing[int] = Field(
        default=UNSET, description="The unique identifier of the rule insight."
    )
    actor_id: Missing[int] = Field(
        default=UNSET, description="The number that identifies the user."
    )
    actor_name: Missing[str] = Field(
        default=UNSET, description="The handle for the GitHub user account."
    )
    before_sha: Missing[str] = Field(
        default=UNSET, description="The first commit sha before the push evaluation."
    )
    after_sha: Missing[str] = Field(
        default=UNSET, description="The last commit sha in the push evaluation."
    )
    ref: Missing[str] = Field(
        default=UNSET, description="The ref name that the evaluation ran on."
    )
    repository_id: Missing[int] = Field(
        default=UNSET,
        description="The ID of the repository associated with the rule evaluation.",
    )
    repository_name: Missing[str] = Field(
        default=UNSET,
        description="The name of the repository without the `.git` extension.",
    )
    pushed_at: Missing[datetime] = Field(default=UNSET)
    result: Missing[Literal["pass", "fail", "bypass"]] = Field(
        default=UNSET,
        description="The result of the rule evaluations for rules with the `active` enforcement status.",
    )
    evaluation_result: Missing[Literal["pass", "fail"]] = Field(
        default=UNSET,
        description="The result of the rule evaluations for rules with the `active` and `evaluate` enforcement statuses, demonstrating whether rules would pass or fail if all rules in the rule suite were `active`.",
    )
    rule_evaluations: Missing[List[RuleSuitePropRuleEvaluationsItems]] = Field(
        default=UNSET, description="Details on the evaluated rules."
    )


class RuleSuitePropRuleEvaluationsItems(GitHubModel):
    """RuleSuitePropRuleEvaluationsItems"""

    rule_source: Missing[RuleSuitePropRuleEvaluationsItemsPropRuleSource] = Field(
        default=UNSET
    )
    enforcement: Missing[Literal["active", "evaluate", "deleted ruleset"]] = Field(
        default=UNSET, description="The enforcement level of this rule source."
    )
    result: Missing[Literal["pass", "fail"]] = Field(
        default=UNSET,
        description="The result of the evaluation of the individual rule.",
    )
    rule_type: Missing[str] = Field(default=UNSET, description="The type of rule.")
    details: Missing[str] = Field(
        default=UNSET, description="Any associated details with the rule evaluation."
    )


class RuleSuitePropRuleEvaluationsItemsPropRuleSource(GitHubModel):
    """RuleSuitePropRuleEvaluationsItemsPropRuleSource"""

    type: Missing[str] = Field(default=UNSET, description="The type of rule source.")
    id: Missing[Union[int, None]] = Field(
        default=UNSET, description="The ID of the rule source."
    )
    name: Missing[Union[str, None]] = Field(
        default=UNSET, description="The name of the rule source."
    )


class RepositoryAdvisoryVulnerability(GitHubModel):
    """RepositoryAdvisoryVulnerability

    A product affected by the vulnerability detailed in a repository security
    advisory.
    """

    package: Union[RepositoryAdvisoryVulnerabilityPropPackage, None] = Field(
        description="The name of the package affected by the vulnerability."
    )
    vulnerable_version_range: Union[str, None] = Field(
        description="The range of the package versions affected by the vulnerability."
    )
    patched_versions: Union[str, None] = Field(
        description="The package version(s) that resolve the vulnerability."
    )
    vulnerable_functions: Union[List[str], None] = Field(
        description="The functions in the package that are affected."
    )


class RepositoryAdvisoryVulnerabilityPropPackage(GitHubModel):
    """RepositoryAdvisoryVulnerabilityPropPackage

    The name of the package affected by the vulnerability.
    """

    ecosystem: Literal[
        "rubygems",
        "npm",
        "pip",
        "maven",
        "nuget",
        "composer",
        "go",
        "rust",
        "erlang",
        "actions",
        "pub",
        "other",
        "swift",
    ] = Field(description="The package's language or package management ecosystem.")
    name: Union[str, None] = Field(
        description="The unique package name within its ecosystem."
    )


class RepositoryAdvisoryCredit(GitHubModel):
    """RepositoryAdvisoryCredit

    A credit given to a user for a repository security advisory.
    """

    user: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    type: Literal[
        "analyst",
        "finder",
        "reporter",
        "coordinator",
        "remediation_developer",
        "remediation_reviewer",
        "remediation_verifier",
        "tool",
        "sponsor",
        "other",
    ] = Field(description="The type of credit the user is receiving.")
    state: Literal["accepted", "declined", "pending"] = Field(
        description="The state of the user's acceptance of the credit."
    )


class RepositoryAdvisory(GitHubModel):
    """RepositoryAdvisory

    A repository security advisory.
    """

    ghsa_id: str = Field(description="The GitHub Security Advisory ID.")
    cve_id: Union[str, None] = Field(
        description="The Common Vulnerabilities and Exposures (CVE) ID."
    )
    url: str = Field(description="The API URL for the advisory.")
    html_url: str = Field(description="The URL for the advisory.")
    summary: Annotated[str, Field(max_length=1024)] = Field(
        description="A short summary of the advisory."
    )
    description: Union[Annotated[str, Field(max_length=65535)], None] = Field(
        description="A detailed description of what the advisory entails."
    )
    severity: Union[None, Literal["critical", "high", "medium", "low"]] = Field(
        description="The severity of the advisory."
    )
    author: None = Field(description="The author of the advisory.")
    publisher: None = Field(description="The publisher of the advisory.")
    identifiers: List[RepositoryAdvisoryPropIdentifiersItems] = Field()
    state: Literal["published", "closed", "withdrawn", "draft", "triage"] = Field(
        description="The state of the advisory."
    )
    created_at: Union[datetime, None] = Field(
        description="The date and time of when the advisory was created, in ISO 8601 format."
    )
    updated_at: Union[datetime, None] = Field(
        description="The date and time of when the advisory was last updated, in ISO 8601 format."
    )
    published_at: Union[datetime, None] = Field(
        description="The date and time of when the advisory was published, in ISO 8601 format."
    )
    closed_at: Union[datetime, None] = Field(
        description="The date and time of when the advisory was closed, in ISO 8601 format."
    )
    withdrawn_at: Union[datetime, None] = Field(
        description="The date and time of when the advisory was withdrawn, in ISO 8601 format."
    )
    submission: Union[RepositoryAdvisoryPropSubmission, None] = Field()
    vulnerabilities: Union[List[RepositoryAdvisoryVulnerability], None] = Field()
    cvss: Union[RepositoryAdvisoryPropCvss, None] = Field()
    cwes: Union[List[RepositoryAdvisoryPropCwesItems], None] = Field()
    cwe_ids: Union[List[str], None] = Field(description="A list of only the CWE IDs.")
    credits_: Union[List[RepositoryAdvisoryPropCreditsItems], None] = Field(
        alias="credits"
    )
    credits_detailed: Union[List[RepositoryAdvisoryCredit], None] = Field()
    collaborating_users: Union[List[SimpleUser], None] = Field(
        description="A list of users that collaborate on the advisory."
    )
    collaborating_teams: Union[List[Team], None] = Field(
        description="A list of teams that collaborate on the advisory."
    )
    private_fork: None = Field(
        description="A temporary private fork of the advisory's repository for collaborating on a fix."
    )


class RepositoryAdvisoryPropIdentifiersItems(GitHubModel):
    """RepositoryAdvisoryPropIdentifiersItems"""

    type: Literal["CVE", "GHSA"] = Field(description="The type of identifier.")
    value: str = Field(description="The identifier value.")


class RepositoryAdvisoryPropSubmission(GitHubModel):
    """RepositoryAdvisoryPropSubmission"""

    accepted: bool = Field(
        description="Whether a private vulnerability report was accepted by the repository's administrators."
    )


class RepositoryAdvisoryPropCvss(GitHubModel):
    """RepositoryAdvisoryPropCvss"""

    vector_string: Union[str, None] = Field(description="The CVSS vector.")
    score: Union[Annotated[float, Field(le=10.0)], None] = Field(
        description="The CVSS score."
    )


class RepositoryAdvisoryPropCwesItems(GitHubModel):
    """RepositoryAdvisoryPropCwesItems"""

    cwe_id: str = Field(description="The Common Weakness Enumeration (CWE) identifier.")
    name: str = Field(description="The name of the CWE.")


class RepositoryAdvisoryPropCreditsItems(GitHubModel):
    """RepositoryAdvisoryPropCreditsItems"""

    login: Missing[str] = Field(
        default=UNSET, description="The username of the user credited."
    )
    type: Missing[
        Literal[
            "analyst",
            "finder",
            "reporter",
            "coordinator",
            "remediation_developer",
            "remediation_reviewer",
            "remediation_verifier",
            "tool",
            "sponsor",
            "other",
        ]
    ] = Field(default=UNSET, description="The type of credit the user is receiving.")


class ActionsBillingUsage(GitHubModel):
    """ActionsBillingUsage"""

    total_minutes_used: int = Field(
        description="The sum of the free and paid GitHub Actions minutes used."
    )
    total_paid_minutes_used: int = Field(
        description="The total paid GitHub Actions minutes used."
    )
    included_minutes: int = Field(
        description="The amount of free GitHub Actions minutes available."
    )
    minutes_used_breakdown: ActionsBillingUsagePropMinutesUsedBreakdown = Field()


class ActionsBillingUsagePropMinutesUsedBreakdown(GitHubModel):
    """ActionsBillingUsagePropMinutesUsedBreakdown"""

    ubuntu: Missing[int] = Field(
        default=UNSET,
        alias="UBUNTU",
        description="Total minutes used on Ubuntu runner machines.",
    )
    macos: Missing[int] = Field(
        default=UNSET,
        alias="MACOS",
        description="Total minutes used on macOS runner machines.",
    )
    windows: Missing[int] = Field(
        default=UNSET,
        alias="WINDOWS",
        description="Total minutes used on Windows runner machines.",
    )
    ubuntu_4_core: Missing[int] = Field(
        default=UNSET,
        description="Total minutes used on Ubuntu 4 core runner machines.",
    )
    ubuntu_8_core: Missing[int] = Field(
        default=UNSET,
        description="Total minutes used on Ubuntu 8 core runner machines.",
    )
    ubuntu_16_core: Missing[int] = Field(
        default=UNSET,
        description="Total minutes used on Ubuntu 16 core runner machines.",
    )
    ubuntu_32_core: Missing[int] = Field(
        default=UNSET,
        description="Total minutes used on Ubuntu 32 core runner machines.",
    )
    ubuntu_64_core: Missing[int] = Field(
        default=UNSET,
        description="Total minutes used on Ubuntu 64 core runner machines.",
    )
    windows_4_core: Missing[int] = Field(
        default=UNSET,
        description="Total minutes used on Windows 4 core runner machines.",
    )
    windows_8_core: Missing[int] = Field(
        default=UNSET,
        description="Total minutes used on Windows 8 core runner machines.",
    )
    windows_16_core: Missing[int] = Field(
        default=UNSET,
        description="Total minutes used on Windows 16 core runner machines.",
    )
    windows_32_core: Missing[int] = Field(
        default=UNSET,
        description="Total minutes used on Windows 32 core runner machines.",
    )
    windows_64_core: Missing[int] = Field(
        default=UNSET,
        description="Total minutes used on Windows 64 core runner machines.",
    )
    macos_12_core: Missing[int] = Field(
        default=UNSET,
        description="Total minutes used on macOS 12 core runner machines.",
    )
    total: Missing[int] = Field(
        default=UNSET, description="Total minutes used on all runner machines."
    )


class PackagesBillingUsage(GitHubModel):
    """PackagesBillingUsage"""

    total_gigabytes_bandwidth_used: int = Field(
        description="Sum of the free and paid storage space (GB) for GitHuub Packages."
    )
    total_paid_gigabytes_bandwidth_used: int = Field(
        description="Total paid storage space (GB) for GitHuub Packages."
    )
    included_gigabytes_bandwidth: int = Field(
        description="Free storage space (GB) for GitHub Packages."
    )


class CombinedBillingUsage(GitHubModel):
    """CombinedBillingUsage"""

    days_left_in_billing_cycle: int = Field(
        description="Numbers of days left in billing cycle."
    )
    estimated_paid_storage_for_month: int = Field(
        description="Estimated storage space (GB) used in billing cycle."
    )
    estimated_storage_for_month: int = Field(
        description="Estimated sum of free and paid storage space (GB) used in billing cycle."
    )


class TeamOrganization(GitHubModel):
    """Team Organization

    Team Organization
    """

    login: str = Field()
    id: int = Field()
    node_id: str = Field()
    url: str = Field()
    repos_url: str = Field()
    events_url: str = Field()
    hooks_url: str = Field()
    issues_url: str = Field()
    members_url: str = Field()
    public_members_url: str = Field()
    avatar_url: str = Field()
    description: Union[str, None] = Field()
    name: Missing[Union[str, None]] = Field(default=UNSET)
    company: Missing[Union[str, None]] = Field(default=UNSET)
    blog: Missing[Union[str, None]] = Field(default=UNSET)
    location: Missing[Union[str, None]] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    twitter_username: Missing[Union[str, None]] = Field(default=UNSET)
    is_verified: Missing[bool] = Field(default=UNSET)
    has_organization_projects: bool = Field()
    has_repository_projects: bool = Field()
    public_repos: int = Field()
    public_gists: int = Field()
    followers: int = Field()
    following: int = Field()
    html_url: str = Field()
    created_at: datetime = Field()
    type: str = Field()
    total_private_repos: Missing[int] = Field(default=UNSET)
    owned_private_repos: Missing[int] = Field(default=UNSET)
    private_gists: Missing[Union[int, None]] = Field(default=UNSET)
    disk_usage: Missing[Union[int, None]] = Field(default=UNSET)
    collaborators: Missing[Union[int, None]] = Field(default=UNSET)
    billing_email: Missing[Union[str, None]] = Field(default=UNSET)
    plan: Missing[TeamOrganizationPropPlan] = Field(default=UNSET)
    default_repository_permission: Missing[Union[str, None]] = Field(default=UNSET)
    members_can_create_repositories: Missing[Union[bool, None]] = Field(default=UNSET)
    two_factor_requirement_enabled: Missing[Union[bool, None]] = Field(default=UNSET)
    members_allowed_repository_creation_type: Missing[str] = Field(default=UNSET)
    members_can_create_public_repositories: Missing[bool] = Field(default=UNSET)
    members_can_create_private_repositories: Missing[bool] = Field(default=UNSET)
    members_can_create_internal_repositories: Missing[bool] = Field(default=UNSET)
    members_can_create_pages: Missing[bool] = Field(default=UNSET)
    members_can_create_public_pages: Missing[bool] = Field(default=UNSET)
    members_can_create_private_pages: Missing[bool] = Field(default=UNSET)
    members_can_fork_private_repositories: Missing[Union[bool, None]] = Field(
        default=UNSET
    )
    web_commit_signoff_required: Missing[bool] = Field(default=UNSET)
    updated_at: datetime = Field()
    archived_at: Union[datetime, None] = Field()


class TeamOrganizationPropPlan(GitHubModel):
    """TeamOrganizationPropPlan"""

    name: str = Field()
    space: int = Field()
    private_repos: int = Field()
    filled_seats: Missing[int] = Field(default=UNSET)
    seats: Missing[int] = Field(default=UNSET)


class TeamFull(GitHubModel):
    """Full Team

    Groups of organization members that gives permissions on specified repositories.
    """

    id: int = Field(description="Unique identifier of the team")
    node_id: str = Field()
    url: str = Field(description="URL for the team")
    html_url: str = Field()
    name: str = Field(description="Name of the team")
    slug: str = Field()
    description: Union[str, None] = Field()
    privacy: Missing[Literal["closed", "secret"]] = Field(
        default=UNSET, description="The level of privacy this team should have"
    )
    notification_setting: Missing[
        Literal["notifications_enabled", "notifications_disabled"]
    ] = Field(default=UNSET, description="The notification setting the team has set")
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    members_url: str = Field()
    repositories_url: str = Field()
    parent: Missing[Union[None, TeamSimple]] = Field(default=UNSET)
    members_count: int = Field()
    repos_count: int = Field()
    created_at: datetime = Field()
    updated_at: datetime = Field()
    organization: TeamOrganization = Field(
        title="Team Organization", description="Team Organization"
    )
    ldap_dn: Missing[str] = Field(
        default=UNSET,
        description="Distinguished Name (DN) that team maps to within LDAP environment",
    )


class TeamDiscussion(GitHubModel):
    """Team Discussion

    A team discussion is a persistent record of a free-form conversation within a
    team.
    """

    author: Union[None, SimpleUser] = Field()
    body: str = Field(description="The main text of the discussion.")
    body_html: str = Field()
    body_version: str = Field(
        description="The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server."
    )
    comments_count: int = Field()
    comments_url: str = Field()
    created_at: datetime = Field()
    last_edited_at: Union[datetime, None] = Field()
    html_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The unique sequence number of a team discussion.")
    pinned: bool = Field(
        description="Whether or not this discussion should be pinned for easy retrieval."
    )
    private: bool = Field(
        description="Whether or not this discussion should be restricted to team members and organization owners."
    )
    team_url: str = Field()
    title: str = Field(description="The title of the discussion.")
    updated_at: datetime = Field()
    url: str = Field()
    reactions: Missing[ReactionRollup] = Field(default=UNSET, title="Reaction Rollup")


class TeamDiscussionComment(GitHubModel):
    """Team Discussion Comment

    A reply to a discussion within a team.
    """

    author: Union[None, SimpleUser] = Field()
    body: str = Field(description="The main text of the comment.")
    body_html: str = Field()
    body_version: str = Field(
        description="The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server."
    )
    created_at: datetime = Field()
    last_edited_at: Union[datetime, None] = Field()
    discussion_url: str = Field()
    html_url: str = Field()
    node_id: str = Field()
    number: int = Field(
        description="The unique sequence number of a team discussion comment."
    )
    updated_at: datetime = Field()
    url: str = Field()
    reactions: Missing[ReactionRollup] = Field(default=UNSET, title="Reaction Rollup")


class Reaction(GitHubModel):
    """Reaction

    Reactions to conversations provide a way to help people express their feelings
    more simply and effectively.
    """

    id: int = Field()
    node_id: str = Field()
    user: Union[None, SimpleUser] = Field()
    content: Literal[
        "+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"
    ] = Field(description="The reaction to use")
    created_at: datetime = Field()


class TeamMembership(GitHubModel):
    """Team Membership

    Team Membership
    """

    url: str = Field()
    role: Literal["member", "maintainer"] = Field(
        default="member", description="The role of the user in the team."
    )
    state: Literal["active", "pending"] = Field(
        description="The state of the user's membership in the team."
    )


class TeamProject(GitHubModel):
    """Team Project

    A team's access to a project.
    """

    owner_url: str = Field()
    url: str = Field()
    html_url: str = Field()
    columns_url: str = Field()
    id: int = Field()
    node_id: str = Field()
    name: str = Field()
    body: Union[str, None] = Field()
    number: int = Field()
    state: str = Field()
    creator: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    created_at: str = Field()
    updated_at: str = Field()
    organization_permission: Missing[str] = Field(
        default=UNSET,
        description="The organization permission for this project. Only present when owner is an organization.",
    )
    private: Missing[bool] = Field(
        default=UNSET,
        description="Whether the project is private or not. Only present when owner is an organization.",
    )
    permissions: TeamProjectPropPermissions = Field()


class TeamProjectPropPermissions(GitHubModel):
    """TeamProjectPropPermissions"""

    read: bool = Field()
    write: bool = Field()
    admin: bool = Field()


class TeamRepository(GitHubModel):
    """Team Repository

    A team's access to a repository.
    """

    id: int = Field(description="Unique identifier of the repository")
    node_id: str = Field()
    name: str = Field(description="The name of the repository.")
    full_name: str = Field()
    license_: Union[None, LicenseSimple] = Field(alias="license")
    forks: int = Field()
    permissions: Missing[TeamRepositoryPropPermissions] = Field(default=UNSET)
    role_name: Missing[str] = Field(default=UNSET)
    owner: Union[None, SimpleUser] = Field()
    private: bool = Field(
        default=False, description="Whether the repository is private or public."
    )
    html_url: str = Field()
    description: Union[str, None] = Field()
    fork: bool = Field()
    url: str = Field()
    archive_url: str = Field()
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    deployments_url: str = Field()
    downloads_url: str = Field()
    events_url: str = Field()
    forks_url: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    languages_url: str = Field()
    merges_url: str = Field()
    milestones_url: str = Field()
    notifications_url: str = Field()
    pulls_url: str = Field()
    releases_url: str = Field()
    ssh_url: str = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    trees_url: str = Field()
    clone_url: str = Field()
    mirror_url: Union[str, None] = Field()
    hooks_url: str = Field()
    svn_url: str = Field()
    homepage: Union[str, None] = Field()
    language: Union[str, None] = Field()
    forks_count: int = Field()
    stargazers_count: int = Field()
    watchers_count: int = Field()
    size: int = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    open_issues_count: int = Field()
    is_template: Missing[bool] = Field(
        default=UNSET,
        description="Whether this repository acts as a template that can be used to generate new repositories.",
    )
    topics: Missing[List[str]] = Field(default=UNSET)
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_pages: bool = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    disabled: bool = Field(
        description="Returns whether or not this repository disabled."
    )
    visibility: Missing[str] = Field(
        default=UNSET,
        description="The repository visibility: public, private, or internal.",
    )
    pushed_at: Union[datetime, None] = Field()
    created_at: Union[datetime, None] = Field()
    updated_at: Union[datetime, None] = Field()
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    temp_clone_token: Missing[Union[str, None]] = Field(default=UNSET)
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_auto_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to allow Auto-merge to be used on pull requests.",
    )
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow forking this repo"
    )
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )
    subscribers_count: Missing[int] = Field(default=UNSET)
    network_count: Missing[int] = Field(default=UNSET)
    open_issues: int = Field()
    watchers: int = Field()
    master_branch: Missing[str] = Field(default=UNSET)


class TeamRepositoryPropPermissions(GitHubModel):
    """TeamRepositoryPropPermissions"""

    admin: bool = Field()
    pull: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)
    push: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)


class ProjectCard(GitHubModel):
    """Project Card

    Project cards represent a scope of work.
    """

    url: str = Field()
    id: int = Field(description="The project card's ID")
    node_id: str = Field()
    note: Union[str, None] = Field()
    creator: Union[None, SimpleUser] = Field()
    created_at: datetime = Field()
    updated_at: datetime = Field()
    archived: Missing[bool] = Field(
        default=UNSET, description="Whether or not the card is archived"
    )
    column_name: Missing[str] = Field(default=UNSET)
    project_id: Missing[str] = Field(default=UNSET)
    column_url: str = Field()
    content_url: Missing[str] = Field(default=UNSET)
    project_url: str = Field()


class ProjectColumn(GitHubModel):
    """Project Column

    Project columns contain cards of work.
    """

    url: str = Field()
    project_url: str = Field()
    cards_url: str = Field()
    id: int = Field(description="The unique identifier of the project column")
    node_id: str = Field()
    name: str = Field(description="Name of the project column")
    created_at: datetime = Field()
    updated_at: datetime = Field()


class ProjectCollaboratorPermission(GitHubModel):
    """Project Collaborator Permission

    Project Collaborator Permission
    """

    permission: str = Field()
    user: Union[None, SimpleUser] = Field()


class RateLimit(GitHubModel):
    """Rate Limit"""

    limit: int = Field()
    remaining: int = Field()
    reset: int = Field()
    used: int = Field()


class RateLimitOverview(GitHubModel):
    """Rate Limit Overview

    Rate Limit Overview
    """

    resources: RateLimitOverviewPropResources = Field()
    rate: RateLimit = Field(title="Rate Limit")


class RateLimitOverviewPropResources(GitHubModel):
    """RateLimitOverviewPropResources"""

    core: RateLimit = Field(title="Rate Limit")
    graphql: Missing[RateLimit] = Field(default=UNSET, title="Rate Limit")
    search: RateLimit = Field(title="Rate Limit")
    code_search: Missing[RateLimit] = Field(default=UNSET, title="Rate Limit")
    source_import: Missing[RateLimit] = Field(default=UNSET, title="Rate Limit")
    integration_manifest: Missing[RateLimit] = Field(default=UNSET, title="Rate Limit")
    code_scanning_upload: Missing[RateLimit] = Field(default=UNSET, title="Rate Limit")
    actions_runner_registration: Missing[RateLimit] = Field(
        default=UNSET, title="Rate Limit"
    )
    scim: Missing[RateLimit] = Field(default=UNSET, title="Rate Limit")
    dependency_snapshots: Missing[RateLimit] = Field(default=UNSET, title="Rate Limit")


class Artifact(GitHubModel):
    """Artifact

    An artifact
    """

    id: int = Field()
    node_id: str = Field()
    name: str = Field(description="The name of the artifact.")
    size_in_bytes: int = Field(description="The size in bytes of the artifact.")
    url: str = Field()
    archive_download_url: str = Field()
    expired: bool = Field(description="Whether or not the artifact has expired.")
    created_at: Union[datetime, None] = Field()
    expires_at: Union[datetime, None] = Field()
    updated_at: Union[datetime, None] = Field()
    workflow_run: Missing[Union[ArtifactPropWorkflowRun, None]] = Field(default=UNSET)


class ArtifactPropWorkflowRun(GitHubModel):
    """ArtifactPropWorkflowRun"""

    id: Missing[int] = Field(default=UNSET)
    repository_id: Missing[int] = Field(default=UNSET)
    head_repository_id: Missing[int] = Field(default=UNSET)
    head_branch: Missing[str] = Field(default=UNSET)
    head_sha: Missing[str] = Field(default=UNSET)


class ActionsCacheList(GitHubModel):
    """Repository actions caches

    Repository actions caches
    """

    total_count: int = Field(description="Total number of caches")
    actions_caches: List[ActionsCacheListPropActionsCachesItems] = Field(
        description="Array of caches"
    )


class ActionsCacheListPropActionsCachesItems(GitHubModel):
    """ActionsCacheListPropActionsCachesItems"""

    id: Missing[int] = Field(default=UNSET)
    ref: Missing[str] = Field(default=UNSET)
    key: Missing[str] = Field(default=UNSET)
    version: Missing[str] = Field(default=UNSET)
    last_accessed_at: Missing[datetime] = Field(default=UNSET)
    created_at: Missing[datetime] = Field(default=UNSET)
    size_in_bytes: Missing[int] = Field(default=UNSET)


class Job(GitHubModel):
    """Job

    Information of a job execution in a workflow run
    """

    id: int = Field(description="The id of the job.")
    run_id: int = Field(description="The id of the associated workflow run.")
    run_url: str = Field()
    run_attempt: Missing[int] = Field(
        default=UNSET,
        description="Attempt number of the associated workflow run, 1 for first attempt and higher if the workflow was re-run.",
    )
    node_id: str = Field()
    head_sha: str = Field(description="The SHA of the commit that is being run.")
    url: str = Field()
    html_url: Union[str, None] = Field()
    status: Literal["queued", "in_progress", "completed", "waiting"] = Field(
        description="The phase of the lifecycle that the job is currently in."
    )
    conclusion: Union[
        None,
        Literal[
            "success",
            "failure",
            "neutral",
            "cancelled",
            "skipped",
            "timed_out",
            "action_required",
        ],
    ] = Field(description="The outcome of the job.")
    created_at: datetime = Field(
        description="The time that the job created, in ISO 8601 format."
    )
    started_at: datetime = Field(
        description="The time that the job started, in ISO 8601 format."
    )
    completed_at: Union[datetime, None] = Field(
        description="The time that the job finished, in ISO 8601 format."
    )
    name: str = Field(description="The name of the job.")
    steps: Missing[List[JobPropStepsItems]] = Field(
        default=UNSET, description="Steps in this job."
    )
    check_run_url: str = Field()
    labels: List[str] = Field(
        description='Labels for the workflow job. Specified by the "runs_on" attribute in the action\'s workflow file.'
    )
    runner_id: Union[int, None] = Field(
        description="The ID of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)"
    )
    runner_name: Union[str, None] = Field(
        description="The name of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)"
    )
    runner_group_id: Union[int, None] = Field(
        description="The ID of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)"
    )
    runner_group_name: Union[str, None] = Field(
        description="The name of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)"
    )
    workflow_name: Union[str, None] = Field(description="The name of the workflow.")
    head_branch: Union[str, None] = Field(description="The name of the current branch.")


class JobPropStepsItems(GitHubModel):
    """JobPropStepsItems"""

    status: Literal["queued", "in_progress", "completed"] = Field(
        description="The phase of the lifecycle that the job is currently in."
    )
    conclusion: Union[str, None] = Field(description="The outcome of the job.")
    name: str = Field(description="The name of the job.")
    number: int = Field()
    started_at: Missing[Union[datetime, None]] = Field(
        default=UNSET, description="The time that the step started, in ISO 8601 format."
    )
    completed_at: Missing[Union[datetime, None]] = Field(
        default=UNSET, description="The time that the job finished, in ISO 8601 format."
    )


class OidcCustomSubRepo(GitHubModel):
    """Actions OIDC subject customization for a repository

    Actions OIDC subject customization for a repository
    """

    use_default: bool = Field(
        description="Whether to use the default template or not. If `true`, the `include_claim_keys` field is ignored."
    )
    include_claim_keys: Missing[List[str]] = Field(
        default=UNSET,
        description="Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.",
    )


class ActionsSecret(GitHubModel):
    """Actions Secret

    Set secrets for GitHub Actions.
    """

    name: str = Field(description="The name of the secret.")
    created_at: datetime = Field()
    updated_at: datetime = Field()


class ActionsVariable(GitHubModel):
    """Actions Variable"""

    name: str = Field(description="The name of the variable.")
    value: str = Field(description="The value of the variable.")
    created_at: datetime = Field(
        description="The date and time at which the variable was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ."
    )
    updated_at: datetime = Field(
        description="The date and time at which the variable was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ."
    )


class ActionsRepositoryPermissions(GitHubModel):
    """ActionsRepositoryPermissions"""

    enabled: bool = Field(
        description="Whether GitHub Actions is enabled on the repository."
    )
    allowed_actions: Missing[Literal["all", "local_only", "selected"]] = Field(
        default=UNSET,
        description="The permissions policy that controls the actions and reusable workflows that are allowed to run.",
    )
    selected_actions_url: Missing[str] = Field(
        default=UNSET,
        description="The API URL to use to get or set the actions and reusable workflows that are allowed to run, when `allowed_actions` is set to `selected`.",
    )


class ActionsWorkflowAccessToRepository(GitHubModel):
    """ActionsWorkflowAccessToRepository"""

    access_level: Literal["none", "user", "organization"] = Field(
        description="Defines the level of access that workflows outside of the repository have to actions and reusable workflows within the\nrepository.\n\n`none` means the access is only possible from workflows in this repository. `user` level access allows sharing across user owned private repositories only. `organization` level access allows sharing across the organization."
    )


class ReferencedWorkflow(GitHubModel):
    """Referenced workflow

    A workflow referenced/reused by the initial caller workflow
    """

    path: str = Field()
    sha: str = Field()
    ref: Missing[str] = Field(default=UNSET)


class PullRequestMinimal(GitHubModel):
    """Pull Request Minimal"""

    id: int = Field()
    number: int = Field()
    url: str = Field()
    head: PullRequestMinimalPropHead = Field()
    base: PullRequestMinimalPropBase = Field()


class PullRequestMinimalPropHead(GitHubModel):
    """PullRequestMinimalPropHead"""

    ref: str = Field()
    sha: str = Field()
    repo: PullRequestMinimalPropHeadPropRepo = Field()


class PullRequestMinimalPropHeadPropRepo(GitHubModel):
    """PullRequestMinimalPropHeadPropRepo"""

    id: int = Field()
    url: str = Field()
    name: str = Field()


class PullRequestMinimalPropBase(GitHubModel):
    """PullRequestMinimalPropBase"""

    ref: str = Field()
    sha: str = Field()
    repo: PullRequestMinimalPropBasePropRepo = Field()


class PullRequestMinimalPropBasePropRepo(GitHubModel):
    """PullRequestMinimalPropBasePropRepo"""

    id: int = Field()
    url: str = Field()
    name: str = Field()


class SimpleCommit(GitHubModel):
    """Simple Commit

    A commit.
    """

    id: str = Field(description="SHA for the commit")
    tree_id: str = Field(description="SHA for the commit's tree")
    message: str = Field(description="Message describing the purpose of the commit")
    timestamp: datetime = Field(description="Timestamp of the commit")
    author: Union[SimpleCommitPropAuthor, None] = Field(
        description="Information about the Git author"
    )
    committer: Union[SimpleCommitPropCommitter, None] = Field(
        description="Information about the Git committer"
    )


class SimpleCommitPropAuthor(GitHubModel):
    """SimpleCommitPropAuthor

    Information about the Git author
    """

    name: str = Field(description="Name of the commit's author")
    email: str = Field(description="Git email address of the commit's author")


class SimpleCommitPropCommitter(GitHubModel):
    """SimpleCommitPropCommitter

    Information about the Git committer
    """

    name: str = Field(description="Name of the commit's committer")
    email: str = Field(description="Git email address of the commit's committer")


class WorkflowRun(GitHubModel):
    """Workflow Run

    An invocation of a workflow
    """

    id: int = Field(description="The ID of the workflow run.")
    name: Missing[Union[str, None]] = Field(
        default=UNSET, description="The name of the workflow run."
    )
    node_id: str = Field()
    check_suite_id: Missing[int] = Field(
        default=UNSET, description="The ID of the associated check suite."
    )
    check_suite_node_id: Missing[str] = Field(
        default=UNSET, description="The node ID of the associated check suite."
    )
    head_branch: Union[str, None] = Field()
    head_sha: str = Field(
        description="The SHA of the head commit that points to the version of the workflow being run."
    )
    path: str = Field(description="The full path of the workflow")
    run_number: int = Field(
        description="The auto incrementing run number for the workflow run."
    )
    run_attempt: Missing[int] = Field(
        default=UNSET,
        description="Attempt number of the run, 1 for first attempt and higher if the workflow was re-run.",
    )
    referenced_workflows: Missing[Union[List[ReferencedWorkflow], None]] = Field(
        default=UNSET
    )
    event: str = Field()
    status: Union[str, None] = Field()
    conclusion: Union[str, None] = Field()
    workflow_id: int = Field(description="The ID of the parent workflow.")
    url: str = Field(description="The URL to the workflow run.")
    html_url: str = Field()
    pull_requests: Union[List[PullRequestMinimal], None] = Field(
        description="Pull requests that are open with a `head_sha` or `head_branch` that matches the workflow run. The returned pull requests do not necessarily indicate pull requests that triggered the run."
    )
    created_at: datetime = Field()
    updated_at: datetime = Field()
    actor: Missing[SimpleUser] = Field(
        default=UNSET, title="Simple User", description="A GitHub user."
    )
    triggering_actor: Missing[SimpleUser] = Field(
        default=UNSET, title="Simple User", description="A GitHub user."
    )
    run_started_at: Missing[datetime] = Field(
        default=UNSET, description="The start time of the latest run. Resets on re-run."
    )
    jobs_url: str = Field(description="The URL to the jobs for the workflow run.")
    logs_url: str = Field(
        description="The URL to download the logs for the workflow run."
    )
    check_suite_url: str = Field(description="The URL to the associated check suite.")
    artifacts_url: str = Field(
        description="The URL to the artifacts for the workflow run."
    )
    cancel_url: str = Field(description="The URL to cancel the workflow run.")
    rerun_url: str = Field(description="The URL to rerun the workflow run.")
    previous_attempt_url: Missing[Union[str, None]] = Field(
        default=UNSET,
        description="The URL to the previous attempted run of this workflow, if one exists.",
    )
    workflow_url: str = Field(description="The URL to the workflow.")
    head_commit: Union[None, SimpleCommit] = Field()
    repository: MinimalRepository = Field(
        title="Minimal Repository", description="Minimal Repository"
    )
    head_repository: MinimalRepository = Field(
        title="Minimal Repository", description="Minimal Repository"
    )
    head_repository_id: Missing[int] = Field(default=UNSET)
    display_title: str = Field(
        description="The event-specific title associated with the run or the run-name if set, or the value of `run-name` if it is set in the workflow."
    )


class EnvironmentApprovals(GitHubModel):
    """Environment Approval

    An entry in the reviews log for environment deployments
    """

    environments: List[EnvironmentApprovalsPropEnvironmentsItems] = Field(
        description="The list of environments that were approved or rejected"
    )
    state: Literal["approved", "rejected", "pending"] = Field(
        description="Whether deployment to the environment(s) was approved or rejected or pending (with comments)"
    )
    user: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    comment: str = Field(description="The comment submitted with the deployment review")


class EnvironmentApprovalsPropEnvironmentsItems(GitHubModel):
    """EnvironmentApprovalsPropEnvironmentsItems"""

    id: Missing[int] = Field(default=UNSET, description="The id of the environment.")
    node_id: Missing[str] = Field(default=UNSET)
    name: Missing[str] = Field(
        default=UNSET, description="The name of the environment."
    )
    url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    created_at: Missing[datetime] = Field(
        default=UNSET,
        description="The time that the environment was created, in ISO 8601 format.",
    )
    updated_at: Missing[datetime] = Field(
        default=UNSET,
        description="The time that the environment was last updated, in ISO 8601 format.",
    )


class ReviewCustomGatesCommentRequired(GitHubModel):
    """ReviewCustomGatesCommentRequired"""

    environment_name: str = Field(
        description="The name of the environment to approve or reject."
    )
    comment: str = Field(
        description="Comment associated with the pending deployment protection rule. **Required when state is not provided.**"
    )


class ReviewCustomGatesStateRequired(GitHubModel):
    """ReviewCustomGatesStateRequired"""

    environment_name: str = Field(
        description="The name of the environment to approve or reject."
    )
    state: Literal["approved", "rejected"] = Field(
        description="Whether to approve or reject deployment to the specified environments."
    )
    comment: Missing[str] = Field(
        default=UNSET, description="Optional comment to include with the review."
    )


class PendingDeployment(GitHubModel):
    """Pending Deployment

    Details of a deployment that is waiting for protection rules to pass
    """

    environment: PendingDeploymentPropEnvironment = Field()
    wait_timer: int = Field(description="The set duration of the wait timer")
    wait_timer_started_at: Union[datetime, None] = Field(
        description="The time that the wait timer began."
    )
    current_user_can_approve: bool = Field(
        description="Whether the currently authenticated user can approve the deployment"
    )
    reviewers: List[PendingDeploymentPropReviewersItems] = Field(
        description="The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed."
    )


class PendingDeploymentPropEnvironment(GitHubModel):
    """PendingDeploymentPropEnvironment"""

    id: Missing[int] = Field(default=UNSET, description="The id of the environment.")
    node_id: Missing[str] = Field(default=UNSET)
    name: Missing[str] = Field(
        default=UNSET, description="The name of the environment."
    )
    url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)


class PendingDeploymentPropReviewersItems(GitHubModel):
    """PendingDeploymentPropReviewersItems"""

    type: Missing[Literal["User", "Team"]] = Field(
        default=UNSET, description="The type of reviewer."
    )
    reviewer: Missing[Union[SimpleUser, Team]] = Field(default=UNSET)


class Deployment(GitHubModel):
    """Deployment

    A request for a specific ref(branch,sha,tag) to be deployed
    """

    url: str = Field()
    id: int = Field(description="Unique identifier of the deployment")
    node_id: str = Field()
    sha: str = Field()
    ref: str = Field(
        description="The ref to deploy. This can be a branch, tag, or sha."
    )
    task: str = Field(description="Parameter to specify a task to execute")
    payload: Union[DeploymentPropPayloadOneof0, str] = Field()
    original_environment: Missing[str] = Field(default=UNSET)
    environment: str = Field(description="Name for the target deployment environment.")
    description: Union[str, None] = Field()
    creator: Union[None, SimpleUser] = Field()
    created_at: datetime = Field()
    updated_at: datetime = Field()
    statuses_url: str = Field()
    repository_url: str = Field()
    transient_environment: Missing[bool] = Field(
        default=UNSET,
        description="Specifies if the given environment is will no longer exist at some point in the future. Default: false.",
    )
    production_environment: Missing[bool] = Field(
        default=UNSET,
        description="Specifies if the given environment is one that end-users directly interact with. Default: false.",
    )
    performed_via_github_app: Missing[Union[None, Integration]] = Field(default=UNSET)


class DeploymentPropPayloadOneof0(ExtraGitHubModel):
    """DeploymentPropPayloadOneof0"""


class WorkflowRunUsage(GitHubModel):
    """Workflow Run Usage

    Workflow Run Usage
    """

    billable: WorkflowRunUsagePropBillable = Field()
    run_duration_ms: Missing[int] = Field(default=UNSET)


class WorkflowRunUsagePropBillable(GitHubModel):
    """WorkflowRunUsagePropBillable"""

    ubuntu: Missing[WorkflowRunUsagePropBillablePropUbuntu] = Field(
        default=UNSET, alias="UBUNTU"
    )
    macos: Missing[WorkflowRunUsagePropBillablePropMacos] = Field(
        default=UNSET, alias="MACOS"
    )
    windows: Missing[WorkflowRunUsagePropBillablePropWindows] = Field(
        default=UNSET, alias="WINDOWS"
    )


class WorkflowRunUsagePropBillablePropUbuntu(GitHubModel):
    """WorkflowRunUsagePropBillablePropUbuntu"""

    total_ms: int = Field()
    jobs: int = Field()
    job_runs: Missing[
        List[WorkflowRunUsagePropBillablePropUbuntuPropJobRunsItems]
    ] = Field(default=UNSET)


class WorkflowRunUsagePropBillablePropUbuntuPropJobRunsItems(GitHubModel):
    """WorkflowRunUsagePropBillablePropUbuntuPropJobRunsItems"""

    job_id: int = Field()
    duration_ms: int = Field()


class WorkflowRunUsagePropBillablePropMacos(GitHubModel):
    """WorkflowRunUsagePropBillablePropMacos"""

    total_ms: int = Field()
    jobs: int = Field()
    job_runs: Missing[
        List[WorkflowRunUsagePropBillablePropMacosPropJobRunsItems]
    ] = Field(default=UNSET)


class WorkflowRunUsagePropBillablePropMacosPropJobRunsItems(GitHubModel):
    """WorkflowRunUsagePropBillablePropMacosPropJobRunsItems"""

    job_id: int = Field()
    duration_ms: int = Field()


class WorkflowRunUsagePropBillablePropWindows(GitHubModel):
    """WorkflowRunUsagePropBillablePropWindows"""

    total_ms: int = Field()
    jobs: int = Field()
    job_runs: Missing[
        List[WorkflowRunUsagePropBillablePropWindowsPropJobRunsItems]
    ] = Field(default=UNSET)


class WorkflowRunUsagePropBillablePropWindowsPropJobRunsItems(GitHubModel):
    """WorkflowRunUsagePropBillablePropWindowsPropJobRunsItems"""

    job_id: int = Field()
    duration_ms: int = Field()


class Workflow(GitHubModel):
    """Workflow

    A GitHub Actions workflow
    """

    id: int = Field()
    node_id: str = Field()
    name: str = Field()
    path: str = Field()
    state: Literal[
        "active", "deleted", "disabled_fork", "disabled_inactivity", "disabled_manually"
    ] = Field()
    created_at: datetime = Field()
    updated_at: datetime = Field()
    url: str = Field()
    html_url: str = Field()
    badge_url: str = Field()
    deleted_at: Missing[datetime] = Field(default=UNSET)


class WorkflowUsage(GitHubModel):
    """Workflow Usage

    Workflow Usage
    """

    billable: WorkflowUsagePropBillable = Field()


class WorkflowUsagePropBillable(GitHubModel):
    """WorkflowUsagePropBillable"""

    ubuntu: Missing[WorkflowUsagePropBillablePropUbuntu] = Field(
        default=UNSET, alias="UBUNTU"
    )
    macos: Missing[WorkflowUsagePropBillablePropMacos] = Field(
        default=UNSET, alias="MACOS"
    )
    windows: Missing[WorkflowUsagePropBillablePropWindows] = Field(
        default=UNSET, alias="WINDOWS"
    )


class WorkflowUsagePropBillablePropUbuntu(GitHubModel):
    """WorkflowUsagePropBillablePropUbuntu"""

    total_ms: Missing[int] = Field(default=UNSET)


class WorkflowUsagePropBillablePropMacos(GitHubModel):
    """WorkflowUsagePropBillablePropMacos"""

    total_ms: Missing[int] = Field(default=UNSET)


class WorkflowUsagePropBillablePropWindows(GitHubModel):
    """WorkflowUsagePropBillablePropWindows"""

    total_ms: Missing[int] = Field(default=UNSET)


class Activity(GitHubModel):
    """Activity

    Activity
    """

    id: int = Field()
    node_id: str = Field()
    before: str = Field(description="The SHA of the commit before the activity.")
    after: str = Field(description="The SHA of the commit after the activity.")
    ref: str = Field(
        description="The full Git reference, formatted as `refs/heads/<branch name>`."
    )
    timestamp: datetime = Field(description="The time when the activity occurred.")
    activity_type: Literal[
        "push",
        "force_push",
        "branch_deletion",
        "branch_creation",
        "pr_merge",
        "merge_queue_merge",
    ] = Field(description="The type of the activity that was performed.")
    actor: Union[None, SimpleUser] = Field()


class Autolink(GitHubModel):
    """Autolink reference

    An autolink reference.
    """

    id: int = Field()
    key_prefix: str = Field(description="The prefix of a key that is linkified.")
    url_template: str = Field(
        description="A template for the target URL that is generated if a key was found."
    )
    is_alphanumeric: bool = Field(
        description="Whether this autolink reference matches alphanumeric characters. If false, this autolink reference only matches numeric characters."
    )


class CheckAutomatedSecurityFixes(GitHubModel):
    """Check Automated Security Fixes

    Check Automated Security Fixes
    """

    enabled: bool = Field(
        description="Whether automated security fixes are enabled for the repository."
    )
    paused: bool = Field(
        description="Whether automated security fixes are paused for the repository."
    )


class ProtectedBranchRequiredStatusCheck(GitHubModel):
    """Protected Branch Required Status Check

    Protected Branch Required Status Check
    """

    url: Missing[str] = Field(default=UNSET)
    enforcement_level: Missing[str] = Field(default=UNSET)
    contexts: List[str] = Field()
    checks: List[ProtectedBranchRequiredStatusCheckPropChecksItems] = Field()
    contexts_url: Missing[str] = Field(default=UNSET)
    strict: Missing[bool] = Field(default=UNSET)


class ProtectedBranchRequiredStatusCheckPropChecksItems(GitHubModel):
    """ProtectedBranchRequiredStatusCheckPropChecksItems"""

    context: str = Field()
    app_id: Union[int, None] = Field()


class ProtectedBranchAdminEnforced(GitHubModel):
    """Protected Branch Admin Enforced

    Protected Branch Admin Enforced
    """

    url: str = Field()
    enabled: bool = Field()


class ProtectedBranchPullRequestReview(GitHubModel):
    """Protected Branch Pull Request Review

    Protected Branch Pull Request Review
    """

    url: Missing[str] = Field(default=UNSET)
    dismissal_restrictions: Missing[
        ProtectedBranchPullRequestReviewPropDismissalRestrictions
    ] = Field(default=UNSET)
    bypass_pull_request_allowances: Missing[
        ProtectedBranchPullRequestReviewPropBypassPullRequestAllowances
    ] = Field(
        default=UNSET,
        description="Allow specific users, teams, or apps to bypass pull request requirements.",
    )
    dismiss_stale_reviews: bool = Field()
    require_code_owner_reviews: bool = Field()
    required_approving_review_count: Missing[Annotated[int, Field(le=6.0)]] = Field(
        default=UNSET
    )
    require_last_push_approval: Missing[bool] = Field(
        default=UNSET,
        description="Whether the most recent push must be approved by someone other than the person who pushed it.",
    )


class ProtectedBranchPullRequestReviewPropDismissalRestrictions(GitHubModel):
    """ProtectedBranchPullRequestReviewPropDismissalRestrictions"""

    users: Missing[List[SimpleUser]] = Field(
        default=UNSET, description="The list of users with review dismissal access."
    )
    teams: Missing[List[Team]] = Field(
        default=UNSET, description="The list of teams with review dismissal access."
    )
    apps: Missing[List[Integration]] = Field(
        default=UNSET, description="The list of apps with review dismissal access."
    )
    url: Missing[str] = Field(default=UNSET)
    users_url: Missing[str] = Field(default=UNSET)
    teams_url: Missing[str] = Field(default=UNSET)


class ProtectedBranchPullRequestReviewPropBypassPullRequestAllowances(GitHubModel):
    """ProtectedBranchPullRequestReviewPropBypassPullRequestAllowances

    Allow specific users, teams, or apps to bypass pull request requirements.
    """

    users: Missing[List[SimpleUser]] = Field(
        default=UNSET,
        description="The list of users allowed to bypass pull request requirements.",
    )
    teams: Missing[List[Team]] = Field(
        default=UNSET,
        description="The list of teams allowed to bypass pull request requirements.",
    )
    apps: Missing[List[Integration]] = Field(
        default=UNSET,
        description="The list of apps allowed to bypass pull request requirements.",
    )


class BranchRestrictionPolicy(GitHubModel):
    """Branch Restriction Policy

    Branch Restriction Policy
    """

    url: str = Field()
    users_url: str = Field()
    teams_url: str = Field()
    apps_url: str = Field()
    users: List[BranchRestrictionPolicyPropUsersItems] = Field()
    teams: List[BranchRestrictionPolicyPropTeamsItems] = Field()
    apps: List[BranchRestrictionPolicyPropAppsItems] = Field()


class BranchRestrictionPolicyPropUsersItems(GitHubModel):
    """BranchRestrictionPolicyPropUsersItems"""

    login: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    avatar_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)


class BranchRestrictionPolicyPropTeamsItems(GitHubModel):
    """BranchRestrictionPolicyPropTeamsItems"""

    id: Missing[int] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(default=UNSET)
    privacy: Missing[str] = Field(default=UNSET)
    notification_setting: Missing[str] = Field(default=UNSET)
    permission: Missing[str] = Field(default=UNSET)
    members_url: Missing[str] = Field(default=UNSET)
    repositories_url: Missing[str] = Field(default=UNSET)
    parent: Missing[Union[str, None]] = Field(default=UNSET)


class BranchRestrictionPolicyPropAppsItems(GitHubModel):
    """BranchRestrictionPolicyPropAppsItems"""

    id: Missing[int] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    owner: Missing[BranchRestrictionPolicyPropAppsItemsPropOwner] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    description: Missing[str] = Field(default=UNSET)
    external_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    created_at: Missing[str] = Field(default=UNSET)
    updated_at: Missing[str] = Field(default=UNSET)
    permissions: Missing[BranchRestrictionPolicyPropAppsItemsPropPermissions] = Field(
        default=UNSET
    )
    events: Missing[List[str]] = Field(default=UNSET)


class BranchRestrictionPolicyPropAppsItemsPropOwner(GitHubModel):
    """BranchRestrictionPolicyPropAppsItemsPropOwner"""

    login: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    hooks_url: Missing[str] = Field(default=UNSET)
    issues_url: Missing[str] = Field(default=UNSET)
    members_url: Missing[str] = Field(default=UNSET)
    public_members_url: Missing[str] = Field(default=UNSET)
    avatar_url: Missing[str] = Field(default=UNSET)
    description: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)


class BranchRestrictionPolicyPropAppsItemsPropPermissions(GitHubModel):
    """BranchRestrictionPolicyPropAppsItemsPropPermissions"""

    metadata: Missing[str] = Field(default=UNSET)
    contents: Missing[str] = Field(default=UNSET)
    issues: Missing[str] = Field(default=UNSET)
    single_file: Missing[str] = Field(default=UNSET)


class BranchProtection(GitHubModel):
    """Branch Protection

    Branch Protection
    """

    url: Missing[str] = Field(default=UNSET)
    enabled: Missing[bool] = Field(default=UNSET)
    required_status_checks: Missing[ProtectedBranchRequiredStatusCheck] = Field(
        default=UNSET,
        title="Protected Branch Required Status Check",
        description="Protected Branch Required Status Check",
    )
    enforce_admins: Missing[ProtectedBranchAdminEnforced] = Field(
        default=UNSET,
        title="Protected Branch Admin Enforced",
        description="Protected Branch Admin Enforced",
    )
    required_pull_request_reviews: Missing[ProtectedBranchPullRequestReview] = Field(
        default=UNSET,
        title="Protected Branch Pull Request Review",
        description="Protected Branch Pull Request Review",
    )
    restrictions: Missing[BranchRestrictionPolicy] = Field(
        default=UNSET,
        title="Branch Restriction Policy",
        description="Branch Restriction Policy",
    )
    required_linear_history: Missing[BranchProtectionPropRequiredLinearHistory] = Field(
        default=UNSET
    )
    allow_force_pushes: Missing[BranchProtectionPropAllowForcePushes] = Field(
        default=UNSET
    )
    allow_deletions: Missing[BranchProtectionPropAllowDeletions] = Field(default=UNSET)
    block_creations: Missing[BranchProtectionPropBlockCreations] = Field(default=UNSET)
    required_conversation_resolution: Missing[
        BranchProtectionPropRequiredConversationResolution
    ] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    protection_url: Missing[str] = Field(default=UNSET)
    required_signatures: Missing[BranchProtectionPropRequiredSignatures] = Field(
        default=UNSET
    )
    lock_branch: Missing[BranchProtectionPropLockBranch] = Field(
        default=UNSET,
        description="Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.",
    )
    allow_fork_syncing: Missing[BranchProtectionPropAllowForkSyncing] = Field(
        default=UNSET,
        description="Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.",
    )


class BranchProtectionPropRequiredLinearHistory(GitHubModel):
    """BranchProtectionPropRequiredLinearHistory"""

    enabled: Missing[bool] = Field(default=UNSET)


class BranchProtectionPropAllowForcePushes(GitHubModel):
    """BranchProtectionPropAllowForcePushes"""

    enabled: Missing[bool] = Field(default=UNSET)


class BranchProtectionPropAllowDeletions(GitHubModel):
    """BranchProtectionPropAllowDeletions"""

    enabled: Missing[bool] = Field(default=UNSET)


class BranchProtectionPropBlockCreations(GitHubModel):
    """BranchProtectionPropBlockCreations"""

    enabled: Missing[bool] = Field(default=UNSET)


class BranchProtectionPropRequiredConversationResolution(GitHubModel):
    """BranchProtectionPropRequiredConversationResolution"""

    enabled: Missing[bool] = Field(default=UNSET)


class BranchProtectionPropRequiredSignatures(GitHubModel):
    """BranchProtectionPropRequiredSignatures"""

    url: str = Field()
    enabled: bool = Field()


class BranchProtectionPropLockBranch(GitHubModel):
    """BranchProtectionPropLockBranch

    Whether to set the branch as read-only. If this is true, users will not be able
    to push to the branch.
    """

    enabled: Missing[bool] = Field(default=UNSET)


class BranchProtectionPropAllowForkSyncing(GitHubModel):
    """BranchProtectionPropAllowForkSyncing

    Whether users can pull changes from upstream when the branch is locked. Set to
    `true` to allow fork syncing. Set to `false` to prevent fork syncing.
    """

    enabled: Missing[bool] = Field(default=UNSET)


class ShortBranch(GitHubModel):
    """Short Branch

    Short Branch
    """

    name: str = Field()
    commit: ShortBranchPropCommit = Field()
    protected: bool = Field()
    protection: Missing[BranchProtection] = Field(
        default=UNSET, title="Branch Protection", description="Branch Protection"
    )
    protection_url: Missing[str] = Field(default=UNSET)


class ShortBranchPropCommit(GitHubModel):
    """ShortBranchPropCommit"""

    sha: str = Field()
    url: str = Field()


class GitUser(GitHubModel):
    """Git User

    Metaproperties for Git author/committer information.
    """

    name: Missing[str] = Field(default=UNSET)
    email: Missing[str] = Field(default=UNSET)
    date: Missing[str] = Field(default=UNSET)


class Verification(GitHubModel):
    """Verification"""

    verified: bool = Field()
    reason: str = Field()
    payload: Union[str, None] = Field()
    signature: Union[str, None] = Field()


class DiffEntry(GitHubModel):
    """Diff Entry

    Diff Entry
    """

    sha: str = Field()
    filename: str = Field()
    status: Literal[
        "added", "removed", "modified", "renamed", "copied", "changed", "unchanged"
    ] = Field()
    additions: int = Field()
    deletions: int = Field()
    changes: int = Field()
    blob_url: str = Field()
    raw_url: str = Field()
    contents_url: str = Field()
    patch: Missing[str] = Field(default=UNSET)
    previous_filename: Missing[str] = Field(default=UNSET)


class Commit(GitHubModel):
    """Commit

    Commit
    """

    url: str = Field()
    sha: str = Field()
    node_id: str = Field()
    html_url: str = Field()
    comments_url: str = Field()
    commit: CommitPropCommit = Field()
    author: Union[None, SimpleUser] = Field()
    committer: Union[None, SimpleUser] = Field()
    parents: List[CommitPropParentsItems] = Field()
    stats: Missing[CommitPropStats] = Field(default=UNSET)
    files: Missing[List[DiffEntry]] = Field(default=UNSET)


class CommitPropCommit(GitHubModel):
    """CommitPropCommit"""

    url: str = Field()
    author: Union[None, GitUser] = Field()
    committer: Union[None, GitUser] = Field()
    message: str = Field()
    comment_count: int = Field()
    tree: CommitPropCommitPropTree = Field()
    verification: Missing[Verification] = Field(default=UNSET, title="Verification")


class CommitPropCommitPropTree(GitHubModel):
    """CommitPropCommitPropTree"""

    sha: str = Field()
    url: str = Field()


class CommitPropParentsItems(GitHubModel):
    """CommitPropParentsItems"""

    sha: str = Field()
    url: str = Field()
    html_url: Missing[str] = Field(default=UNSET)


class CommitPropStats(GitHubModel):
    """CommitPropStats"""

    additions: Missing[int] = Field(default=UNSET)
    deletions: Missing[int] = Field(default=UNSET)
    total: Missing[int] = Field(default=UNSET)


class BranchWithProtection(GitHubModel):
    """Branch With Protection

    Branch With Protection
    """

    name: str = Field()
    commit: Commit = Field(title="Commit", description="Commit")
    links: BranchWithProtectionPropLinks = Field(alias="_links")
    protected: bool = Field()
    protection: BranchProtection = Field(
        title="Branch Protection", description="Branch Protection"
    )
    protection_url: str = Field()
    pattern: Missing[str] = Field(default=UNSET)
    required_approving_review_count: Missing[int] = Field(default=UNSET)


class BranchWithProtectionPropLinks(GitHubModel):
    """BranchWithProtectionPropLinks"""

    html: str = Field()
    self_: str = Field(alias="self")


class StatusCheckPolicy(GitHubModel):
    """Status Check Policy

    Status Check Policy
    """

    url: str = Field()
    strict: bool = Field()
    contexts: List[str] = Field()
    checks: List[StatusCheckPolicyPropChecksItems] = Field()
    contexts_url: str = Field()


class StatusCheckPolicyPropChecksItems(GitHubModel):
    """StatusCheckPolicyPropChecksItems"""

    context: str = Field()
    app_id: Union[int, None] = Field()


class ProtectedBranch(GitHubModel):
    """Protected Branch

    Branch protections protect branches
    """

    url: str = Field()
    required_status_checks: Missing[StatusCheckPolicy] = Field(
        default=UNSET, title="Status Check Policy", description="Status Check Policy"
    )
    required_pull_request_reviews: Missing[
        ProtectedBranchPropRequiredPullRequestReviews
    ] = Field(default=UNSET)
    required_signatures: Missing[ProtectedBranchPropRequiredSignatures] = Field(
        default=UNSET
    )
    enforce_admins: Missing[ProtectedBranchPropEnforceAdmins] = Field(default=UNSET)
    required_linear_history: Missing[ProtectedBranchPropRequiredLinearHistory] = Field(
        default=UNSET
    )
    allow_force_pushes: Missing[ProtectedBranchPropAllowForcePushes] = Field(
        default=UNSET
    )
    allow_deletions: Missing[ProtectedBranchPropAllowDeletions] = Field(default=UNSET)
    restrictions: Missing[BranchRestrictionPolicy] = Field(
        default=UNSET,
        title="Branch Restriction Policy",
        description="Branch Restriction Policy",
    )
    required_conversation_resolution: Missing[
        ProtectedBranchPropRequiredConversationResolution
    ] = Field(default=UNSET)
    block_creations: Missing[ProtectedBranchPropBlockCreations] = Field(default=UNSET)
    lock_branch: Missing[ProtectedBranchPropLockBranch] = Field(
        default=UNSET,
        description="Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.",
    )
    allow_fork_syncing: Missing[ProtectedBranchPropAllowForkSyncing] = Field(
        default=UNSET,
        description="Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.",
    )


class ProtectedBranchPropRequiredPullRequestReviews(GitHubModel):
    """ProtectedBranchPropRequiredPullRequestReviews"""

    url: str = Field()
    dismiss_stale_reviews: Missing[bool] = Field(default=UNSET)
    require_code_owner_reviews: Missing[bool] = Field(default=UNSET)
    required_approving_review_count: Missing[int] = Field(default=UNSET)
    require_last_push_approval: Missing[bool] = Field(
        default=UNSET,
        description="Whether the most recent push must be approved by someone other than the person who pushed it.",
    )
    dismissal_restrictions: Missing[
        ProtectedBranchPropRequiredPullRequestReviewsPropDismissalRestrictions
    ] = Field(default=UNSET)
    bypass_pull_request_allowances: Missing[
        ProtectedBranchPropRequiredPullRequestReviewsPropBypassPullRequestAllowances
    ] = Field(default=UNSET)


class ProtectedBranchPropRequiredPullRequestReviewsPropDismissalRestrictions(
    GitHubModel
):
    """ProtectedBranchPropRequiredPullRequestReviewsPropDismissalRestrictions"""

    url: str = Field()
    users_url: str = Field()
    teams_url: str = Field()
    users: List[SimpleUser] = Field()
    teams: List[Team] = Field()
    apps: Missing[List[Integration]] = Field(default=UNSET)


class ProtectedBranchPropRequiredPullRequestReviewsPropBypassPullRequestAllowances(
    GitHubModel
):
    """ProtectedBranchPropRequiredPullRequestReviewsPropBypassPullRequestAllowances"""

    users: List[SimpleUser] = Field()
    teams: List[Team] = Field()
    apps: Missing[List[Integration]] = Field(default=UNSET)


class ProtectedBranchPropRequiredSignatures(GitHubModel):
    """ProtectedBranchPropRequiredSignatures"""

    url: str = Field()
    enabled: bool = Field()


class ProtectedBranchPropEnforceAdmins(GitHubModel):
    """ProtectedBranchPropEnforceAdmins"""

    url: str = Field()
    enabled: bool = Field()


class ProtectedBranchPropRequiredLinearHistory(GitHubModel):
    """ProtectedBranchPropRequiredLinearHistory"""

    enabled: bool = Field()


class ProtectedBranchPropAllowForcePushes(GitHubModel):
    """ProtectedBranchPropAllowForcePushes"""

    enabled: bool = Field()


class ProtectedBranchPropAllowDeletions(GitHubModel):
    """ProtectedBranchPropAllowDeletions"""

    enabled: bool = Field()


class ProtectedBranchPropRequiredConversationResolution(GitHubModel):
    """ProtectedBranchPropRequiredConversationResolution"""

    enabled: Missing[bool] = Field(default=UNSET)


class ProtectedBranchPropBlockCreations(GitHubModel):
    """ProtectedBranchPropBlockCreations"""

    enabled: bool = Field()


class ProtectedBranchPropLockBranch(GitHubModel):
    """ProtectedBranchPropLockBranch

    Whether to set the branch as read-only. If this is true, users will not be able
    to push to the branch.
    """

    enabled: Missing[bool] = Field(default=UNSET)


class ProtectedBranchPropAllowForkSyncing(GitHubModel):
    """ProtectedBranchPropAllowForkSyncing

    Whether users can pull changes from upstream when the branch is locked. Set to
    `true` to allow fork syncing. Set to `false` to prevent fork syncing.
    """

    enabled: Missing[bool] = Field(default=UNSET)


class DeploymentSimple(GitHubModel):
    """Deployment

    A deployment created as the result of an Actions check run from a workflow that
    references an environment
    """

    url: str = Field()
    id: int = Field(description="Unique identifier of the deployment")
    node_id: str = Field()
    task: str = Field(description="Parameter to specify a task to execute")
    original_environment: Missing[str] = Field(default=UNSET)
    environment: str = Field(description="Name for the target deployment environment.")
    description: Union[str, None] = Field()
    created_at: datetime = Field()
    updated_at: datetime = Field()
    statuses_url: str = Field()
    repository_url: str = Field()
    transient_environment: Missing[bool] = Field(
        default=UNSET,
        description="Specifies if the given environment is will no longer exist at some point in the future. Default: false.",
    )
    production_environment: Missing[bool] = Field(
        default=UNSET,
        description="Specifies if the given environment is one that end-users directly interact with. Default: false.",
    )
    performed_via_github_app: Missing[Union[None, Integration]] = Field(default=UNSET)


class CheckRun(GitHubModel):
    """CheckRun

    A check performed on the code of a given code change
    """

    id: int = Field(description="The id of the check.")
    head_sha: str = Field(description="The SHA of the commit that is being checked.")
    node_id: str = Field()
    external_id: Union[str, None] = Field()
    url: str = Field()
    html_url: Union[str, None] = Field()
    details_url: Union[str, None] = Field()
    status: Literal["queued", "in_progress", "completed"] = Field(
        description="The phase of the lifecycle that the check is currently in."
    )
    conclusion: Union[
        None,
        Literal[
            "success",
            "failure",
            "neutral",
            "cancelled",
            "skipped",
            "timed_out",
            "action_required",
        ],
    ] = Field()
    started_at: Union[datetime, None] = Field()
    completed_at: Union[datetime, None] = Field()
    output: CheckRunPropOutput = Field()
    name: str = Field(description="The name of the check.")
    check_suite: Union[CheckRunPropCheckSuite, None] = Field()
    app: Union[None, Integration] = Field()
    pull_requests: List[PullRequestMinimal] = Field(
        description="Pull requests that are open with a `head_sha` or `head_branch` that matches the check. The returned pull requests do not necessarily indicate pull requests that triggered the check."
    )
    deployment: Missing[DeploymentSimple] = Field(
        default=UNSET,
        title="Deployment",
        description="A deployment created as the result of an Actions check run from a workflow that references an environment",
    )


class CheckRunPropOutput(GitHubModel):
    """CheckRunPropOutput"""

    title: Union[str, None] = Field()
    summary: Union[str, None] = Field()
    text: Union[str, None] = Field()
    annotations_count: int = Field()
    annotations_url: str = Field()


class CheckRunPropCheckSuite(GitHubModel):
    """CheckRunPropCheckSuite"""

    id: int = Field()


class CheckAnnotation(GitHubModel):
    """Check Annotation

    Check Annotation
    """

    path: str = Field()
    start_line: int = Field()
    end_line: int = Field()
    start_column: Union[int, None] = Field()
    end_column: Union[int, None] = Field()
    annotation_level: Union[str, None] = Field()
    title: Union[str, None] = Field()
    message: Union[str, None] = Field()
    raw_details: Union[str, None] = Field()
    blob_href: str = Field()


class CheckSuite(GitHubModel):
    """CheckSuite

    A suite of checks performed on the code of a given code change
    """

    id: int = Field()
    node_id: str = Field()
    head_branch: Union[str, None] = Field()
    head_sha: str = Field(
        description="The SHA of the head commit that is being checked."
    )
    status: Union[None, Literal["queued", "in_progress", "completed"]] = Field()
    conclusion: Union[
        None,
        Literal[
            "success",
            "failure",
            "neutral",
            "cancelled",
            "skipped",
            "timed_out",
            "action_required",
            "startup_failure",
            "stale",
        ],
    ] = Field()
    url: Union[str, None] = Field()
    before: Union[str, None] = Field()
    after: Union[str, None] = Field()
    pull_requests: Union[List[PullRequestMinimal], None] = Field()
    app: Union[None, Integration] = Field()
    repository: MinimalRepository = Field(
        title="Minimal Repository", description="Minimal Repository"
    )
    created_at: Union[datetime, None] = Field()
    updated_at: Union[datetime, None] = Field()
    head_commit: SimpleCommit = Field(title="Simple Commit", description="A commit.")
    latest_check_runs_count: int = Field()
    check_runs_url: str = Field()
    rerequestable: Missing[bool] = Field(default=UNSET)
    runs_rerequestable: Missing[bool] = Field(default=UNSET)


class CheckSuitePreference(GitHubModel):
    """Check Suite Preference

    Check suite configuration preferences for a repository.
    """

    preferences: CheckSuitePreferencePropPreferences = Field()
    repository: MinimalRepository = Field(
        title="Minimal Repository", description="Minimal Repository"
    )


class CheckSuitePreferencePropPreferences(GitHubModel):
    """CheckSuitePreferencePropPreferences"""

    auto_trigger_checks: Missing[
        List[CheckSuitePreferencePropPreferencesPropAutoTriggerChecksItems]
    ] = Field(default=UNSET)


class CheckSuitePreferencePropPreferencesPropAutoTriggerChecksItems(GitHubModel):
    """CheckSuitePreferencePropPreferencesPropAutoTriggerChecksItems"""

    app_id: int = Field()
    setting: bool = Field()


class CodeScanningAlertItems(GitHubModel):
    """CodeScanningAlertItems"""

    number: int = Field(description="The security alert number.")
    created_at: datetime = Field(
        description="The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."
    )
    updated_at: Missing[datetime] = Field(
        default=UNSET,
        description="The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )
    url: str = Field(description="The REST API URL of the alert resource.")
    html_url: str = Field(description="The GitHub URL of the alert resource.")
    instances_url: str = Field(
        description="The REST API URL for fetching the list of instances for an alert."
    )
    state: Literal["open", "dismissed", "fixed"] = Field(
        description="State of a code scanning alert."
    )
    fixed_at: Missing[Union[datetime, None]] = Field(
        default=UNSET,
        description="The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )
    dismissed_by: Union[None, SimpleUser] = Field()
    dismissed_at: Union[datetime, None] = Field(
        description="The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."
    )
    dismissed_reason: Union[
        None, Literal["false positive", "won't fix", "used in tests"]
    ] = Field(
        description="**Required when the state is dismissed.** The reason for dismissing or closing the alert."
    )
    dismissed_comment: Missing[
        Union[Annotated[str, Field(max_length=280)], None]
    ] = Field(
        default=UNSET,
        description="The dismissal comment associated with the dismissal of the alert.",
    )
    rule: CodeScanningAlertRuleSummary = Field()
    tool: CodeScanningAnalysisTool = Field()
    most_recent_instance: CodeScanningAlertInstance = Field()


class CodeScanningAlertRule(GitHubModel):
    """CodeScanningAlertRule"""

    id: Missing[Union[str, None]] = Field(
        default=UNSET,
        description="A unique identifier for the rule used to detect the alert.",
    )
    name: Missing[str] = Field(
        default=UNSET, description="The name of the rule used to detect the alert."
    )
    severity: Missing[Union[None, Literal["none", "note", "warning", "error"]]] = Field(
        default=UNSET, description="The severity of the alert."
    )
    security_severity_level: Missing[
        Union[None, Literal["low", "medium", "high", "critical"]]
    ] = Field(default=UNSET, description="The security severity of the alert.")
    description: Missing[str] = Field(
        default=UNSET,
        description="A short description of the rule used to detect the alert.",
    )
    full_description: Missing[str] = Field(
        default=UNSET, description="description of the rule used to detect the alert."
    )
    tags: Missing[Union[List[str], None]] = Field(
        default=UNSET, description="A set of tags applicable for the rule."
    )
    help_: Missing[Union[str, None]] = Field(
        default=UNSET,
        alias="help",
        description="Detailed documentation for the rule as GitHub Flavored Markdown.",
    )
    help_uri: Missing[Union[str, None]] = Field(
        default=UNSET,
        description="A link to the documentation for the rule used to detect the alert.",
    )


class CodeScanningAlert(GitHubModel):
    """CodeScanningAlert"""

    number: int = Field(description="The security alert number.")
    created_at: datetime = Field(
        description="The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."
    )
    updated_at: Missing[datetime] = Field(
        default=UNSET,
        description="The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )
    url: str = Field(description="The REST API URL of the alert resource.")
    html_url: str = Field(description="The GitHub URL of the alert resource.")
    instances_url: str = Field(
        description="The REST API URL for fetching the list of instances for an alert."
    )
    state: Literal["open", "dismissed", "fixed"] = Field(
        description="State of a code scanning alert."
    )
    fixed_at: Missing[Union[datetime, None]] = Field(
        default=UNSET,
        description="The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )
    dismissed_by: Union[None, SimpleUser] = Field()
    dismissed_at: Union[datetime, None] = Field(
        description="The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."
    )
    dismissed_reason: Union[
        None, Literal["false positive", "won't fix", "used in tests"]
    ] = Field(
        description="**Required when the state is dismissed.** The reason for dismissing or closing the alert."
    )
    dismissed_comment: Missing[
        Union[Annotated[str, Field(max_length=280)], None]
    ] = Field(
        default=UNSET,
        description="The dismissal comment associated with the dismissal of the alert.",
    )
    rule: CodeScanningAlertRule = Field()
    tool: CodeScanningAnalysisTool = Field()
    most_recent_instance: CodeScanningAlertInstance = Field()


class CodeScanningAnalysis(GitHubModel):
    """CodeScanningAnalysis"""

    ref: str = Field(
        description="The Git reference, formatted as `refs/pull/<number>/merge`, `refs/pull/<number>/head`,\n`refs/heads/<branch name>` or simply `<branch name>`."
    )
    commit_sha: Annotated[
        str, Field(min_length=40, max_length=40, pattern="^[0-9a-fA-F]+$")
    ] = Field(
        description="The SHA of the commit to which the analysis you are uploading relates."
    )
    analysis_key: str = Field(
        description="Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name."
    )
    environment: str = Field(
        description="Identifies the variable values associated with the environment in which this analysis was performed."
    )
    category: Missing[str] = Field(
        default=UNSET,
        description="Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code.",
    )
    error: str = Field()
    created_at: datetime = Field(
        description="The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."
    )
    results_count: int = Field(
        description="The total number of results in the analysis."
    )
    rules_count: int = Field(
        description="The total number of rules used in the analysis."
    )
    id: int = Field(description="Unique identifier for this analysis.")
    url: str = Field(description="The REST API URL of the analysis resource.")
    sarif_id: str = Field(description="An identifier for the upload.")
    tool: CodeScanningAnalysisTool = Field()
    deletable: bool = Field()
    warning: str = Field(description="Warning generated when processing the analysis")


class CodeScanningAnalysisDeletion(GitHubModel):
    """Analysis deletion

    Successful deletion of a code scanning analysis
    """

    next_analysis_url: Union[str, None] = Field(
        description="Next deletable analysis in chain, without last analysis deletion confirmation"
    )
    confirm_delete_url: Union[str, None] = Field(
        description="Next deletable analysis in chain, with last analysis deletion confirmation"
    )


class CodeScanningCodeqlDatabase(GitHubModel):
    """CodeQL Database

    A CodeQL database.
    """

    id: int = Field(description="The ID of the CodeQL database.")
    name: str = Field(description="The name of the CodeQL database.")
    language: str = Field(description="The language of the CodeQL database.")
    uploader: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    content_type: str = Field(description="The MIME type of the CodeQL database file.")
    size: int = Field(description="The size of the CodeQL database file in bytes.")
    created_at: datetime = Field(
        description="The date and time at which the CodeQL database was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ."
    )
    updated_at: datetime = Field(
        description="The date and time at which the CodeQL database was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ."
    )
    url: str = Field(
        description="The URL at which to download the CodeQL database. The `Accept` header must be set to the value of the `content_type` property."
    )
    commit_oid: Missing[Union[str, None]] = Field(
        default=UNSET,
        description="The commit SHA of the repository at the time the CodeQL database was created.",
    )


class CodeScanningDefaultSetup(GitHubModel):
    """CodeScanningDefaultSetup

    Configuration for code scanning default setup.
    """

    state: Missing[Literal["configured", "not-configured"]] = Field(
        default=UNSET,
        description="Code scanning default setup has been configured or not.",
    )
    languages: Missing[
        List[
            Literal[
                "c-cpp",
                "csharp",
                "go",
                "java-kotlin",
                "javascript-typescript",
                "javascript",
                "python",
                "ruby",
                "typescript",
                "swift",
            ]
        ]
    ] = Field(default=UNSET, description="Languages to be analyzed.")
    query_suite: Missing[Literal["default", "extended"]] = Field(
        default=UNSET, description="CodeQL query suite to be used."
    )
    updated_at: Missing[Union[datetime, None]] = Field(
        default=UNSET, description="Timestamp of latest configuration update."
    )
    schedule: Missing[Union[None, Literal["weekly"]]] = Field(
        default=UNSET, description="The frequency of the periodic analysis."
    )


class CodeScanningDefaultSetupUpdate(GitHubModel):
    """CodeScanningDefaultSetupUpdate

    Configuration for code scanning default setup.
    """

    state: Missing[Literal["configured", "not-configured"]] = Field(
        default=UNSET, description="The desired state of code scanning default setup."
    )
    query_suite: Missing[Literal["default", "extended"]] = Field(
        default=UNSET, description="CodeQL query suite to be used."
    )
    languages: Missing[
        List[
            Literal[
                "c-cpp",
                "csharp",
                "go",
                "java-kotlin",
                "javascript-typescript",
                "python",
                "ruby",
                "swift",
            ]
        ]
    ] = Field(default=UNSET, description="CodeQL languages to be analyzed.")


class CodeScanningDefaultSetupUpdateResponse(GitHubModel):
    """CodeScanningDefaultSetupUpdateResponse

    You can use `run_url` to track the status of the run. This includes a property
    status and conclusion.
    You should not rely on this always being an actions workflow run object.
    """

    run_id: Missing[int] = Field(
        default=UNSET, description="ID of the corresponding run."
    )
    run_url: Missing[str] = Field(
        default=UNSET, description="URL of the corresponding run."
    )


class CodeScanningSarifsReceipt(GitHubModel):
    """CodeScanningSarifsReceipt"""

    id: Missing[str] = Field(default=UNSET, description="An identifier for the upload.")
    url: Missing[str] = Field(
        default=UNSET,
        description="The REST API URL for checking the status of the upload.",
    )


class CodeScanningSarifsStatus(GitHubModel):
    """CodeScanningSarifsStatus"""

    processing_status: Missing[Literal["pending", "complete", "failed"]] = Field(
        default=UNSET,
        description="`pending` files have not yet been processed, while `complete` means results from the SARIF have been stored. `failed` files have either not been processed at all, or could only be partially processed.",
    )
    analyses_url: Missing[Union[str, None]] = Field(
        default=UNSET,
        description="The REST API URL for getting the analyses associated with the upload.",
    )
    errors: Missing[Union[List[str], None]] = Field(
        default=UNSET,
        description="Any errors that ocurred during processing of the delivery.",
    )


class CodeownersErrors(GitHubModel):
    """CODEOWNERS errors

    A list of errors found in a repo's CODEOWNERS file
    """

    errors: List[CodeownersErrorsPropErrorsItems] = Field()


class CodeownersErrorsPropErrorsItems(GitHubModel):
    """CodeownersErrorsPropErrorsItems"""

    line: int = Field(description="The line number where this errors occurs.")
    column: int = Field(description="The column number where this errors occurs.")
    source: Missing[str] = Field(
        default=UNSET, description="The contents of the line where the error occurs."
    )
    kind: str = Field(description="The type of error.")
    suggestion: Missing[Union[str, None]] = Field(
        default=UNSET,
        description="Suggested action to fix the error. This will usually be `null`, but is provided for some common errors.",
    )
    message: str = Field(
        description="A human-readable description of the error, combining information from multiple fields, laid out for display in a monospaced typeface (for example, a command-line setting)."
    )
    path: str = Field(description="The path of the file where the error occured.")


class CodespacesPermissionsCheckForDevcontainer(GitHubModel):
    """Codespaces Permissions Check

    Permission check result for a given devcontainer config.
    """

    accepted: bool = Field(
        description="Whether the user has accepted the permissions defined by the devcontainer config"
    )


class RepoCodespacesSecret(GitHubModel):
    """Codespaces Secret

    Set repository secrets for GitHub Codespaces.
    """

    name: str = Field(description="The name of the secret.")
    created_at: datetime = Field()
    updated_at: datetime = Field()


class Collaborator(GitHubModel):
    """Collaborator

    Collaborator
    """

    login: str = Field()
    id: int = Field()
    email: Missing[Union[str, None]] = Field(default=UNSET)
    name: Missing[Union[str, None]] = Field(default=UNSET)
    node_id: str = Field()
    avatar_url: str = Field()
    gravatar_id: Union[str, None] = Field()
    url: str = Field()
    html_url: str = Field()
    followers_url: str = Field()
    following_url: str = Field()
    gists_url: str = Field()
    starred_url: str = Field()
    subscriptions_url: str = Field()
    organizations_url: str = Field()
    repos_url: str = Field()
    events_url: str = Field()
    received_events_url: str = Field()
    type: str = Field()
    site_admin: bool = Field()
    permissions: Missing[CollaboratorPropPermissions] = Field(default=UNSET)
    role_name: str = Field()


class CollaboratorPropPermissions(GitHubModel):
    """CollaboratorPropPermissions"""

    pull: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)
    push: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    admin: bool = Field()


class RepositoryInvitation(GitHubModel):
    """Repository Invitation

    Repository invitations let you manage who you collaborate with.
    """

    id: int = Field(description="Unique identifier of the repository invitation.")
    repository: MinimalRepository = Field(
        title="Minimal Repository", description="Minimal Repository"
    )
    invitee: Union[None, SimpleUser] = Field()
    inviter: Union[None, SimpleUser] = Field()
    permissions: Literal["read", "write", "admin", "triage", "maintain"] = Field(
        description="The permission associated with the invitation."
    )
    created_at: datetime = Field()
    expired: Missing[bool] = Field(
        default=UNSET, description="Whether or not the invitation has expired"
    )
    url: str = Field(description="URL for the repository invitation")
    html_url: str = Field()
    node_id: str = Field()


class RepositoryCollaboratorPermission(GitHubModel):
    """Repository Collaborator Permission

    Repository Collaborator Permission
    """

    permission: str = Field()
    role_name: str = Field()
    user: Union[None, Collaborator] = Field()


class CommitComment(GitHubModel):
    """Commit Comment

    Commit Comment
    """

    html_url: str = Field()
    url: str = Field()
    id: int = Field()
    node_id: str = Field()
    body: str = Field()
    path: Union[str, None] = Field()
    position: Union[int, None] = Field()
    line: Union[int, None] = Field()
    commit_id: str = Field()
    user: Union[None, SimpleUser] = Field()
    created_at: datetime = Field()
    updated_at: datetime = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="author_association",
        description="How the author is associated with the repository.",
    )
    reactions: Missing[ReactionRollup] = Field(default=UNSET, title="Reaction Rollup")


class BranchShort(GitHubModel):
    """Branch Short

    Branch Short
    """

    name: str = Field()
    commit: BranchShortPropCommit = Field()
    protected: bool = Field()


class BranchShortPropCommit(GitHubModel):
    """BranchShortPropCommit"""

    sha: str = Field()
    url: str = Field()


class Link(GitHubModel):
    """Link

    Hypermedia Link
    """

    href: str = Field()


class AutoMerge(GitHubModel):
    """Auto merge

    The status of auto merging a pull request.
    """

    enabled_by: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    merge_method: Literal["merge", "squash", "rebase"] = Field(
        description="The merge method to use."
    )
    commit_title: Union[str, None] = Field(
        description="Title for the merge commit message."
    )
    commit_message: Union[str, None] = Field(
        description="Commit message for the merge commit."
    )


class PullRequestSimple(GitHubModel):
    """Pull Request Simple

    Pull Request Simple
    """

    url: str = Field()
    id: int = Field()
    node_id: str = Field()
    html_url: str = Field()
    diff_url: str = Field()
    patch_url: str = Field()
    issue_url: str = Field()
    commits_url: str = Field()
    review_comments_url: str = Field()
    review_comment_url: str = Field()
    comments_url: str = Field()
    statuses_url: str = Field()
    number: int = Field()
    state: str = Field()
    locked: bool = Field()
    title: str = Field()
    user: Union[None, SimpleUser] = Field()
    body: Union[str, None] = Field()
    labels: List[PullRequestSimplePropLabelsItems] = Field()
    milestone: Union[None, Milestone] = Field()
    active_lock_reason: Missing[Union[str, None]] = Field(default=UNSET)
    created_at: datetime = Field()
    updated_at: datetime = Field()
    closed_at: Union[datetime, None] = Field()
    merged_at: Union[datetime, None] = Field()
    merge_commit_sha: Union[str, None] = Field()
    assignee: Union[None, SimpleUser] = Field()
    assignees: Missing[Union[List[SimpleUser], None]] = Field(default=UNSET)
    requested_reviewers: Missing[Union[List[SimpleUser], None]] = Field(default=UNSET)
    requested_teams: Missing[Union[List[Team], None]] = Field(default=UNSET)
    head: PullRequestSimplePropHead = Field()
    base: PullRequestSimplePropBase = Field()
    links: PullRequestSimplePropLinks = Field(alias="_links")
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="author_association",
        description="How the author is associated with the repository.",
    )
    auto_merge: Union[AutoMerge, None] = Field(
        title="Auto merge", description="The status of auto merging a pull request."
    )
    draft: Missing[bool] = Field(
        default=UNSET,
        description="Indicates whether or not the pull request is a draft.",
    )


class PullRequestSimplePropLabelsItems(GitHubModel):
    """PullRequestSimplePropLabelsItems"""

    id: int = Field()
    node_id: str = Field()
    url: str = Field()
    name: str = Field()
    description: Union[str, None] = Field()
    color: str = Field()
    default: bool = Field()


class PullRequestSimplePropHead(GitHubModel):
    """PullRequestSimplePropHead"""

    label: Union[str, None] = Field()
    ref: str = Field()
    repo: Union[None, Repository] = Field()
    sha: str = Field()
    user: Union[None, SimpleUser] = Field()


class PullRequestSimplePropBase(GitHubModel):
    """PullRequestSimplePropBase"""

    label: str = Field()
    ref: str = Field()
    repo: Repository = Field(title="Repository", description="A repository on GitHub.")
    sha: str = Field()
    user: Union[None, SimpleUser] = Field()


class PullRequestSimplePropLinks(GitHubModel):
    """PullRequestSimplePropLinks"""

    comments: Link = Field(title="Link", description="Hypermedia Link")
    commits: Link = Field(title="Link", description="Hypermedia Link")
    statuses: Link = Field(title="Link", description="Hypermedia Link")
    html: Link = Field(title="Link", description="Hypermedia Link")
    issue: Link = Field(title="Link", description="Hypermedia Link")
    review_comments: Link = Field(title="Link", description="Hypermedia Link")
    review_comment: Link = Field(title="Link", description="Hypermedia Link")
    self_: Link = Field(alias="self", title="Link", description="Hypermedia Link")


class SimpleCommitStatus(GitHubModel):
    """Simple Commit Status"""

    description: Union[str, None] = Field()
    id: int = Field()
    node_id: str = Field()
    state: str = Field()
    context: str = Field()
    target_url: Union[str, None] = Field()
    required: Missing[Union[bool, None]] = Field(default=UNSET)
    avatar_url: Union[str, None] = Field()
    url: str = Field()
    created_at: datetime = Field()
    updated_at: datetime = Field()


class CombinedCommitStatus(GitHubModel):
    """Combined Commit Status

    Combined Commit Status
    """

    state: str = Field()
    statuses: List[SimpleCommitStatus] = Field()
    sha: str = Field()
    total_count: int = Field()
    repository: MinimalRepository = Field(
        title="Minimal Repository", description="Minimal Repository"
    )
    commit_url: str = Field()
    url: str = Field()


class Status(GitHubModel):
    """Status

    The status of a commit.
    """

    url: str = Field()
    avatar_url: Union[str, None] = Field()
    id: int = Field()
    node_id: str = Field()
    state: str = Field()
    description: Union[str, None] = Field()
    target_url: Union[str, None] = Field()
    context: str = Field()
    created_at: str = Field()
    updated_at: str = Field()
    creator: Union[None, SimpleUser] = Field()


class CommunityHealthFile(GitHubModel):
    """Community Health File"""

    url: str = Field()
    html_url: str = Field()


class CommunityProfile(GitHubModel):
    """Community Profile

    Community Profile
    """

    health_percentage: int = Field()
    description: Union[str, None] = Field()
    documentation: Union[str, None] = Field()
    files: CommunityProfilePropFiles = Field()
    updated_at: Union[datetime, None] = Field()
    content_reports_enabled: Missing[bool] = Field(default=UNSET)


class CommunityProfilePropFiles(GitHubModel):
    """CommunityProfilePropFiles"""

    code_of_conduct: Union[None, CodeOfConductSimple] = Field()
    code_of_conduct_file: Union[None, CommunityHealthFile] = Field()
    license_: Union[None, LicenseSimple] = Field(alias="license")
    contributing: Union[None, CommunityHealthFile] = Field()
    readme: Union[None, CommunityHealthFile] = Field()
    issue_template: Union[None, CommunityHealthFile] = Field()
    pull_request_template: Union[None, CommunityHealthFile] = Field()


class CommitComparison(GitHubModel):
    """Commit Comparison

    Commit Comparison
    """

    url: str = Field()
    html_url: str = Field()
    permalink_url: str = Field()
    diff_url: str = Field()
    patch_url: str = Field()
    base_commit: Commit = Field(title="Commit", description="Commit")
    merge_base_commit: Commit = Field(title="Commit", description="Commit")
    status: Literal["diverged", "ahead", "behind", "identical"] = Field()
    ahead_by: int = Field()
    behind_by: int = Field()
    total_commits: int = Field()
    commits: List[Commit] = Field()
    files: Missing[List[DiffEntry]] = Field(default=UNSET)


class ContentTree(GitHubModel):
    """Content Tree

    Content Tree
    """

    type: str = Field()
    size: int = Field()
    name: str = Field()
    path: str = Field()
    sha: str = Field()
    url: str = Field()
    git_url: Union[str, None] = Field()
    html_url: Union[str, None] = Field()
    download_url: Union[str, None] = Field()
    entries: Missing[List[ContentTreePropEntriesItems]] = Field(default=UNSET)
    links: ContentTreePropLinks = Field(alias="_links")


class ContentTreePropEntriesItems(GitHubModel):
    """ContentTreePropEntriesItems"""

    type: str = Field()
    size: int = Field()
    name: str = Field()
    path: str = Field()
    content: Missing[str] = Field(default=UNSET)
    sha: str = Field()
    url: str = Field()
    git_url: Union[str, None] = Field()
    html_url: Union[str, None] = Field()
    download_url: Union[str, None] = Field()
    links: ContentTreePropEntriesItemsPropLinks = Field(alias="_links")


class ContentTreePropEntriesItemsPropLinks(GitHubModel):
    """ContentTreePropEntriesItemsPropLinks"""

    git: Union[str, None] = Field()
    html: Union[str, None] = Field()
    self_: str = Field(alias="self")


class ContentTreePropLinks(GitHubModel):
    """ContentTreePropLinks"""

    git: Union[str, None] = Field()
    html: Union[str, None] = Field()
    self_: str = Field(alias="self")


class ContentDirectoryItems(GitHubModel):
    """ContentDirectoryItems"""

    type: Literal["dir", "file", "submodule", "symlink"] = Field()
    size: int = Field()
    name: str = Field()
    path: str = Field()
    content: Missing[str] = Field(default=UNSET)
    sha: str = Field()
    url: str = Field()
    git_url: Union[str, None] = Field()
    html_url: Union[str, None] = Field()
    download_url: Union[str, None] = Field()
    links: ContentDirectoryItemsPropLinks = Field(alias="_links")


class ContentDirectoryItemsPropLinks(GitHubModel):
    """ContentDirectoryItemsPropLinks"""

    git: Union[str, None] = Field()
    html: Union[str, None] = Field()
    self_: str = Field(alias="self")


class ContentFile(GitHubModel):
    """Content File

    Content File
    """

    type: Literal["file"] = Field()
    encoding: str = Field()
    size: int = Field()
    name: str = Field()
    path: str = Field()
    content: str = Field()
    sha: str = Field()
    url: str = Field()
    git_url: Union[str, None] = Field()
    html_url: Union[str, None] = Field()
    download_url: Union[str, None] = Field()
    links: ContentFilePropLinks = Field(alias="_links")
    target: Missing[str] = Field(default=UNSET)
    submodule_git_url: Missing[str] = Field(default=UNSET)


class ContentFilePropLinks(GitHubModel):
    """ContentFilePropLinks"""

    git: Union[str, None] = Field()
    html: Union[str, None] = Field()
    self_: str = Field(alias="self")


class ContentSymlink(GitHubModel):
    """Symlink Content

    An object describing a symlink
    """

    type: Literal["symlink"] = Field()
    target: str = Field()
    size: int = Field()
    name: str = Field()
    path: str = Field()
    sha: str = Field()
    url: str = Field()
    git_url: Union[str, None] = Field()
    html_url: Union[str, None] = Field()
    download_url: Union[str, None] = Field()
    links: ContentSymlinkPropLinks = Field(alias="_links")


class ContentSymlinkPropLinks(GitHubModel):
    """ContentSymlinkPropLinks"""

    git: Union[str, None] = Field()
    html: Union[str, None] = Field()
    self_: str = Field(alias="self")


class ContentSubmodule(GitHubModel):
    """Submodule Content

    An object describing a submodule
    """

    type: Literal["submodule"] = Field()
    submodule_git_url: str = Field()
    size: int = Field()
    name: str = Field()
    path: str = Field()
    sha: str = Field()
    url: str = Field()
    git_url: Union[str, None] = Field()
    html_url: Union[str, None] = Field()
    download_url: Union[str, None] = Field()
    links: ContentSubmodulePropLinks = Field(alias="_links")


class ContentSubmodulePropLinks(GitHubModel):
    """ContentSubmodulePropLinks"""

    git: Union[str, None] = Field()
    html: Union[str, None] = Field()
    self_: str = Field(alias="self")


class FileCommit(GitHubModel):
    """File Commit

    File Commit
    """

    content: Union[FileCommitPropContent, None] = Field()
    commit: FileCommitPropCommit = Field()


class FileCommitPropContentPropLinks(GitHubModel):
    """FileCommitPropContentPropLinks"""

    self_: Missing[str] = Field(default=UNSET, alias="self")
    git: Missing[str] = Field(default=UNSET)
    html: Missing[str] = Field(default=UNSET)


class FileCommitPropContent(GitHubModel):
    """FileCommitPropContent"""

    name: Missing[str] = Field(default=UNSET)
    path: Missing[str] = Field(default=UNSET)
    sha: Missing[str] = Field(default=UNSET)
    size: Missing[int] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    git_url: Missing[str] = Field(default=UNSET)
    download_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    links: Missing[FileCommitPropContentPropLinks] = Field(
        default=UNSET, alias="_links"
    )


class FileCommitPropCommit(GitHubModel):
    """FileCommitPropCommit"""

    sha: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    author: Missing[FileCommitPropCommitPropAuthor] = Field(default=UNSET)
    committer: Missing[FileCommitPropCommitPropCommitter] = Field(default=UNSET)
    message: Missing[str] = Field(default=UNSET)
    tree: Missing[FileCommitPropCommitPropTree] = Field(default=UNSET)
    parents: Missing[List[FileCommitPropCommitPropParentsItems]] = Field(default=UNSET)
    verification: Missing[FileCommitPropCommitPropVerification] = Field(default=UNSET)


class FileCommitPropCommitPropAuthor(GitHubModel):
    """FileCommitPropCommitPropAuthor"""

    date: Missing[str] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    email: Missing[str] = Field(default=UNSET)


class FileCommitPropCommitPropCommitter(GitHubModel):
    """FileCommitPropCommitPropCommitter"""

    date: Missing[str] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    email: Missing[str] = Field(default=UNSET)


class FileCommitPropCommitPropTree(GitHubModel):
    """FileCommitPropCommitPropTree"""

    url: Missing[str] = Field(default=UNSET)
    sha: Missing[str] = Field(default=UNSET)


class FileCommitPropCommitPropParentsItems(GitHubModel):
    """FileCommitPropCommitPropParentsItems"""

    url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    sha: Missing[str] = Field(default=UNSET)


class FileCommitPropCommitPropVerification(GitHubModel):
    """FileCommitPropCommitPropVerification"""

    verified: Missing[bool] = Field(default=UNSET)
    reason: Missing[str] = Field(default=UNSET)
    signature: Missing[Union[str, None]] = Field(default=UNSET)
    payload: Missing[Union[str, None]] = Field(default=UNSET)


class Contributor(GitHubModel):
    """Contributor

    Contributor
    """

    login: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    avatar_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[Union[str, None]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    type: str = Field()
    site_admin: Missing[bool] = Field(default=UNSET)
    contributions: int = Field()
    email: Missing[str] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)


class DependabotAlert(GitHubModel):
    """DependabotAlert

    A Dependabot alert.
    """

    number: int = Field(description="The security alert number.")
    state: Literal["auto_dismissed", "dismissed", "fixed", "open"] = Field(
        description="The state of the Dependabot alert."
    )
    dependency: DependabotAlertPropDependency = Field(
        description="Details for the vulnerable dependency."
    )
    security_advisory: DependabotAlertSecurityAdvisory = Field(
        description="Details for the GitHub Security Advisory."
    )
    security_vulnerability: DependabotAlertSecurityVulnerability = Field(
        description="Details pertaining to one vulnerable version range for the advisory."
    )
    url: str = Field(description="The REST API URL of the alert resource.")
    html_url: str = Field(description="The GitHub URL of the alert resource.")
    created_at: datetime = Field(
        description="The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."
    )
    updated_at: datetime = Field(
        description="The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."
    )
    dismissed_at: Union[datetime, None] = Field(
        description="The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."
    )
    dismissed_by: Union[None, SimpleUser] = Field()
    dismissed_reason: Union[
        None,
        Literal[
            "fix_started", "inaccurate", "no_bandwidth", "not_used", "tolerable_risk"
        ],
    ] = Field(description="The reason that the alert was dismissed.")
    dismissed_comment: Union[Annotated[str, Field(max_length=280)], None] = Field(
        description="An optional comment associated with the alert's dismissal."
    )
    fixed_at: Union[datetime, None] = Field(
        description="The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."
    )
    auto_dismissed_at: Missing[Union[datetime, None]] = Field(
        default=UNSET,
        description="The time that the alert was auto-dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )


class DependabotAlertPropDependency(GitHubModel):
    """DependabotAlertPropDependency

    Details for the vulnerable dependency.
    """

    package: Missing[DependabotAlertPackage] = Field(
        default=UNSET, description="Details for the vulnerable package."
    )
    manifest_path: Missing[str] = Field(
        default=UNSET,
        description="The full path to the dependency manifest file, relative to the root of the repository.",
    )
    scope: Missing[Union[None, Literal["development", "runtime"]]] = Field(
        default=UNSET, description="The execution scope of the vulnerable dependency."
    )


class DependabotSecret(GitHubModel):
    """Dependabot Secret

    Set secrets for Dependabot.
    """

    name: str = Field(description="The name of the secret.")
    created_at: datetime = Field()
    updated_at: datetime = Field()


class DependencyGraphDiffItems(GitHubModel):
    """DependencyGraphDiffItems"""

    change_type: Literal["added", "removed"] = Field()
    manifest: str = Field()
    ecosystem: str = Field()
    name: str = Field()
    version: str = Field()
    package_url: Union[str, None] = Field()
    license_: Union[str, None] = Field(alias="license")
    source_repository_url: Union[str, None] = Field()
    vulnerabilities: List[DependencyGraphDiffItemsPropVulnerabilitiesItems] = Field()
    scope: Literal["unknown", "runtime", "development"] = Field(
        description="Where the dependency is utilized. `development` means that the dependency is only utilized in the development environment. `runtime` means that the dependency is utilized at runtime and in the development environment."
    )


class DependencyGraphDiffItemsPropVulnerabilitiesItems(GitHubModel):
    """DependencyGraphDiffItemsPropVulnerabilitiesItems"""

    severity: str = Field()
    advisory_ghsa_id: str = Field()
    advisory_summary: str = Field()
    advisory_url: str = Field()


class DependencyGraphSpdxSbom(GitHubModel):
    """Dependency Graph SPDX SBOM

    A schema for the SPDX JSON format returned by the Dependency Graph.
    """

    sbom: DependencyGraphSpdxSbomPropSbom = Field()


class DependencyGraphSpdxSbomPropSbom(GitHubModel):
    """DependencyGraphSpdxSbomPropSbom"""

    spdxid: str = Field(
        alias="SPDXID", description="The SPDX identifier for the SPDX document."
    )
    spdx_version: str = Field(
        alias="spdxVersion",
        description="The version of the SPDX specification that this document conforms to.",
    )
    creation_info: DependencyGraphSpdxSbomPropSbomPropCreationInfo = Field(
        alias="creationInfo"
    )
    name: str = Field(description="The name of the SPDX document.")
    data_license: str = Field(
        alias="dataLicense",
        description="The license under which the SPDX document is licensed.",
    )
    document_describes: List[str] = Field(
        alias="documentDescribes",
        description="The name of the repository that the SPDX document describes.",
    )
    document_namespace: str = Field(
        alias="documentNamespace", description="The namespace for the SPDX document."
    )
    packages: List[DependencyGraphSpdxSbomPropSbomPropPackagesItems] = Field()


class DependencyGraphSpdxSbomPropSbomPropCreationInfo(GitHubModel):
    """DependencyGraphSpdxSbomPropSbomPropCreationInfo"""

    created: str = Field(description="The date and time the SPDX document was created.")
    creators: List[str] = Field(
        description="The tools that were used to generate the SPDX document."
    )


class DependencyGraphSpdxSbomPropSbomPropPackagesItems(GitHubModel):
    """DependencyGraphSpdxSbomPropSbomPropPackagesItems"""

    spdxid: Missing[str] = Field(
        default=UNSET,
        alias="SPDXID",
        description="A unique SPDX identifier for the package.",
    )
    name: Missing[str] = Field(default=UNSET, description="The name of the package.")
    version_info: Missing[str] = Field(
        default=UNSET,
        alias="versionInfo",
        description="The version of the package. If the package does not have an exact version specified,\na version range is given.",
    )
    download_location: Missing[str] = Field(
        default=UNSET,
        alias="downloadLocation",
        description="The location where the package can be downloaded,\nor NOASSERTION if this has not been determined.",
    )
    files_analyzed: Missing[bool] = Field(
        default=UNSET,
        alias="filesAnalyzed",
        description="Whether the package's file content has been subjected to\nanalysis during the creation of the SPDX document.",
    )
    license_concluded: Missing[str] = Field(
        default=UNSET,
        alias="licenseConcluded",
        description="The license of the package as determined while creating the SPDX document.",
    )
    license_declared: Missing[str] = Field(
        default=UNSET,
        alias="licenseDeclared",
        description="The license of the package as declared by its author, or NOASSERTION if this information\nwas not available when the SPDX document was created.",
    )
    supplier: Missing[str] = Field(
        default=UNSET,
        description="The distribution source of this package, or NOASSERTION if this was not determined.",
    )
    external_refs: Missing[
        List[DependencyGraphSpdxSbomPropSbomPropPackagesItemsPropExternalRefsItems]
    ] = Field(default=UNSET, alias="externalRefs")


class DependencyGraphSpdxSbomPropSbomPropPackagesItemsPropExternalRefsItems(
    GitHubModel
):
    """DependencyGraphSpdxSbomPropSbomPropPackagesItemsPropExternalRefsItems"""

    reference_category: str = Field(
        alias="referenceCategory",
        description="The category of reference to an external resource this reference refers to.",
    )
    reference_locator: str = Field(
        alias="referenceLocator",
        description="A locator for the particular external resource this reference refers to.",
    )
    reference_type: str = Field(
        alias="referenceType",
        description="The category of reference to an external resource this reference refers to.",
    )


class Metadata(ExtraGitHubModel):
    """metadata

    User-defined metadata to store domain-specific information limited to 8 keys
    with scalar values.
    """


class Dependency(GitHubModel):
    """Dependency"""

    package_url: Missing[Annotated[str, Field(pattern="^pkg")]] = Field(
        default=UNSET,
        description="Package-url (PURL) of dependency. See https://github.com/package-url/purl-spec for more details.",
    )
    metadata: Missing[Metadata] = Field(
        default=UNSET,
        title="metadata",
        description="User-defined metadata to store domain-specific information limited to 8 keys with scalar values.",
    )
    relationship: Missing[Literal["direct", "indirect"]] = Field(
        default=UNSET,
        description="A notation of whether a dependency is requested directly by this manifest or is a dependency of another dependency.",
    )
    scope: Missing[Literal["runtime", "development"]] = Field(
        default=UNSET,
        description="A notation of whether the dependency is required for the primary build artifact (runtime) or is only used for development. Future versions of this specification may allow for more granular scopes.",
    )
    dependencies: Missing[List[str]] = Field(
        default=UNSET,
        description="Array of package-url (PURLs) of direct child dependencies.",
    )


class Manifest(GitHubModel):
    """Manifest"""

    name: str = Field(description="The name of the manifest.")
    file: Missing[ManifestPropFile] = Field(default=UNSET)
    metadata: Missing[Metadata] = Field(
        default=UNSET,
        title="metadata",
        description="User-defined metadata to store domain-specific information limited to 8 keys with scalar values.",
    )
    resolved: Missing[ManifestPropResolved] = Field(
        default=UNSET, description="A collection of resolved package dependencies."
    )


class ManifestPropFile(GitHubModel):
    """ManifestPropFile"""

    source_location: Missing[str] = Field(
        default=UNSET,
        description="The path of the manifest file relative to the root of the Git repository.",
    )


class ManifestPropResolved(ExtraGitHubModel):
    """ManifestPropResolved

    A collection of resolved package dependencies.
    """


class Snapshot(GitHubModel):
    """snapshot

    Create a new snapshot of a repository's dependencies.
    """

    version: int = Field(
        description="The version of the repository snapshot submission."
    )
    job: SnapshotPropJob = Field()
    sha: Annotated[str, Field(min_length=40, max_length=40)] = Field(
        description="The commit SHA associated with this dependency snapshot. Maximum length: 40 characters."
    )
    ref: Annotated[str, Field(pattern="^refs/")] = Field(
        description="The repository branch that triggered this snapshot."
    )
    detector: SnapshotPropDetector = Field(
        description="A description of the detector used."
    )
    metadata: Missing[Metadata] = Field(
        default=UNSET,
        title="metadata",
        description="User-defined metadata to store domain-specific information limited to 8 keys with scalar values.",
    )
    manifests: Missing[SnapshotPropManifests] = Field(
        default=UNSET,
        description="A collection of package manifests, which are a collection of related dependencies declared in a file or representing a logical group of dependencies.",
    )
    scanned: datetime = Field(description="The time at which the snapshot was scanned.")


class SnapshotPropJob(GitHubModel):
    """SnapshotPropJob"""

    id: str = Field(description="The external ID of the job.")
    correlator: str = Field(
        description="Correlator provides a key that is used to group snapshots submitted over time. Only the \"latest\" submitted snapshot for a given combination of `job.correlator` and `detector.name` will be considered when calculating a repository's current dependencies. Correlator should be as unique as it takes to distinguish all detection runs for a given \"wave\" of CI workflow you run. If you're using GitHub Actions, a good default value for this could be the environment variables GITHUB_WORKFLOW and GITHUB_JOB concatenated together. If you're using a build matrix, then you'll also need to add additional key(s) to distinguish between each submission inside a matrix variation."
    )
    html_url: Missing[str] = Field(default=UNSET, description="The url for the job.")


class SnapshotPropDetector(GitHubModel):
    """SnapshotPropDetector

    A description of the detector used.
    """

    name: str = Field(description="The name of the detector used.")
    version: str = Field(description="The version of the detector used.")
    url: str = Field(description="The url of the detector used.")


class SnapshotPropManifests(ExtraGitHubModel):
    """SnapshotPropManifests

    A collection of package manifests, which are a collection of related
    dependencies declared in a file or representing a logical group of dependencies.
    """


class DeploymentStatus(GitHubModel):
    """Deployment Status

    The status of a deployment.
    """

    url: str = Field()
    id: int = Field()
    node_id: str = Field()
    state: Literal[
        "error", "failure", "inactive", "pending", "success", "queued", "in_progress"
    ] = Field(description="The state of the status.")
    creator: Union[None, SimpleUser] = Field()
    description: Annotated[str, Field(max_length=140)] = Field(
        default="", description="A short description of the status."
    )
    environment: Missing[str] = Field(
        default=UNSET,
        description="The environment of the deployment that the status is for.",
    )
    target_url: str = Field(
        default="", description="Deprecated: the URL to associate with this status."
    )
    created_at: datetime = Field()
    updated_at: datetime = Field()
    deployment_url: str = Field()
    repository_url: str = Field()
    environment_url: Missing[str] = Field(
        default=UNSET, description="The URL for accessing your environment."
    )
    log_url: Missing[str] = Field(
        default=UNSET, description="The URL to associate with this status."
    )
    performed_via_github_app: Missing[Union[None, Integration]] = Field(default=UNSET)


class DeploymentBranchPolicySettings(GitHubModel):
    """DeploymentBranchPolicySettings

    The type of deployment branch policy for this environment. To allow all branches
    to deploy, set to `null`.
    """

    protected_branches: bool = Field(
        description="Whether only branches with branch protection rules can deploy to this environment. If `protected_branches` is `true`, `custom_branch_policies` must be `false`; if `protected_branches` is `false`, `custom_branch_policies` must be `true`."
    )
    custom_branch_policies: bool = Field(
        description="Whether only branches that match the specified name patterns can deploy to this environment.  If `custom_branch_policies` is `true`, `protected_branches` must be `false`; if `custom_branch_policies` is `false`, `protected_branches` must be `true`."
    )


class Environment(GitHubModel):
    """Environment

    Details of a deployment environment
    """

    id: int = Field(description="The id of the environment.")
    node_id: str = Field()
    name: str = Field(description="The name of the environment.")
    url: str = Field()
    html_url: str = Field()
    created_at: datetime = Field(
        description="The time that the environment was created, in ISO 8601 format."
    )
    updated_at: datetime = Field(
        description="The time that the environment was last updated, in ISO 8601 format."
    )
    protection_rules: Missing[
        List[
            Union[
                EnvironmentPropProtectionRulesItemsAnyof0,
                EnvironmentPropProtectionRulesItemsAnyof1,
                EnvironmentPropProtectionRulesItemsAnyof2,
            ]
        ]
    ] = Field(
        default=UNSET,
        description="Built-in deployment protection rules for the environment.",
    )
    deployment_branch_policy: Missing[
        Union[DeploymentBranchPolicySettings, None]
    ] = Field(
        default=UNSET,
        description="The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`.",
    )


class EnvironmentPropProtectionRulesItemsAnyof0(GitHubModel):
    """EnvironmentPropProtectionRulesItemsAnyof0"""

    id: int = Field()
    node_id: str = Field()
    type: str = Field()
    wait_timer: Missing[int] = Field(
        default=UNSET,
        description="The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days).",
    )


class EnvironmentPropProtectionRulesItemsAnyof1(GitHubModel):
    """EnvironmentPropProtectionRulesItemsAnyof1"""

    id: int = Field()
    node_id: str = Field()
    prevent_self_review: Missing[bool] = Field(
        default=UNSET,
        description="Whether deployments to this environment can be approved by the user who created the deployment.",
    )
    type: str = Field()
    reviewers: Missing[
        List[EnvironmentPropProtectionRulesItemsAnyof1PropReviewersItems]
    ] = Field(
        default=UNSET,
        description="The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.",
    )


class EnvironmentPropProtectionRulesItemsAnyof1PropReviewersItems(GitHubModel):
    """EnvironmentPropProtectionRulesItemsAnyof1PropReviewersItems"""

    type: Missing[Literal["User", "Team"]] = Field(
        default=UNSET, description="The type of reviewer."
    )
    reviewer: Missing[Union[SimpleUser, Team]] = Field(default=UNSET)


class EnvironmentPropProtectionRulesItemsAnyof2(GitHubModel):
    """EnvironmentPropProtectionRulesItemsAnyof2"""

    id: int = Field()
    node_id: str = Field()
    type: str = Field()


class DeploymentBranchPolicy(GitHubModel):
    """Deployment branch policy

    Details of a deployment branch or tag policy.
    """

    id: Missing[int] = Field(
        default=UNSET, description="The unique identifier of the branch or tag policy."
    )
    node_id: Missing[str] = Field(default=UNSET)
    name: Missing[str] = Field(
        default=UNSET,
        description="The name pattern that branches or tags must match in order to deploy to the environment.",
    )
    type: Missing[Literal["branch", "tag"]] = Field(
        default=UNSET, description="Whether this rule targets a branch or tag."
    )


class DeploymentBranchPolicyNamePatternWithType(GitHubModel):
    """Deployment branch and tag policy name pattern"""

    name: str = Field(
        description="The name pattern that branches or tags must match in order to deploy to the environment.\n\nWildcard characters will not match `/`. For example, to match branches that begin with `release/` and contain an additional single slash, use `release/*/*`.\nFor more information about pattern matching syntax, see the [Ruby File.fnmatch documentation](https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch)."
    )
    type: Missing[Literal["branch", "tag"]] = Field(
        default=UNSET, description="Whether this rule targets a branch or tag"
    )


class DeploymentBranchPolicyNamePattern(GitHubModel):
    """Deployment branch policy name pattern"""

    name: str = Field(
        description="The name pattern that branches must match in order to deploy to the environment.\n\nWildcard characters will not match `/`. For example, to match branches that begin with `release/` and contain an additional single slash, use `release/*/*`.\nFor more information about pattern matching syntax, see the [Ruby File.fnmatch documentation](https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch)."
    )


class CustomDeploymentRuleApp(GitHubModel):
    """Custom deployment protection rule app

    A GitHub App that is providing a custom deployment protection rule.
    """

    id: int = Field(
        description="The unique identifier of the deployment protection rule integration."
    )
    slug: str = Field(
        description="The slugified name of the deployment protection rule integration."
    )
    integration_url: str = Field(
        description="The URL for the endpoint to get details about the app."
    )
    node_id: str = Field(
        description="The node ID for the deployment protection rule integration."
    )


class DeploymentProtectionRule(GitHubModel):
    """Deployment protection rule

    Deployment protection rule
    """

    id: int = Field(
        description="The unique identifier for the deployment protection rule."
    )
    node_id: str = Field(description="The node ID for the deployment protection rule.")
    enabled: bool = Field(
        description="Whether the deployment protection rule is enabled for the environment."
    )
    app: CustomDeploymentRuleApp = Field(
        title="Custom deployment protection rule app",
        description="A GitHub App that is providing a custom deployment protection rule.",
    )


class ShortBlob(GitHubModel):
    """Short Blob

    Short Blob
    """

    url: str = Field()
    sha: str = Field()


class Blob(GitHubModel):
    """Blob

    Blob
    """

    content: str = Field()
    encoding: str = Field()
    url: str = Field()
    sha: str = Field()
    size: Union[int, None] = Field()
    node_id: str = Field()
    highlighted_content: Missing[str] = Field(default=UNSET)


class GitCommit(GitHubModel):
    """Git Commit

    Low-level Git commit operations within a repository
    """

    sha: str = Field(description="SHA for the commit")
    node_id: str = Field()
    url: str = Field()
    author: GitCommitPropAuthor = Field(
        description="Identifying information for the git-user"
    )
    committer: GitCommitPropCommitter = Field(
        description="Identifying information for the git-user"
    )
    message: str = Field(description="Message describing the purpose of the commit")
    tree: GitCommitPropTree = Field()
    parents: List[GitCommitPropParentsItems] = Field()
    verification: GitCommitPropVerification = Field()
    html_url: str = Field()


class GitCommitPropAuthor(GitHubModel):
    """GitCommitPropAuthor

    Identifying information for the git-user
    """

    date: datetime = Field(description="Timestamp of the commit")
    email: str = Field(description="Git email address of the user")
    name: str = Field(description="Name of the git user")


class GitCommitPropCommitter(GitHubModel):
    """GitCommitPropCommitter

    Identifying information for the git-user
    """

    date: datetime = Field(description="Timestamp of the commit")
    email: str = Field(description="Git email address of the user")
    name: str = Field(description="Name of the git user")


class GitCommitPropTree(GitHubModel):
    """GitCommitPropTree"""

    sha: str = Field(description="SHA for the commit")
    url: str = Field()


class GitCommitPropParentsItems(GitHubModel):
    """GitCommitPropParentsItems"""

    sha: str = Field(description="SHA for the commit")
    url: str = Field()
    html_url: str = Field()


class GitCommitPropVerification(GitHubModel):
    """GitCommitPropVerification"""

    verified: bool = Field()
    reason: str = Field()
    signature: Union[str, None] = Field()
    payload: Union[str, None] = Field()


class GitRef(GitHubModel):
    """Git Reference

    Git references within a repository
    """

    ref: str = Field()
    node_id: str = Field()
    url: str = Field()
    object_: GitRefPropObject = Field(alias="object")


class GitRefPropObject(GitHubModel):
    """GitRefPropObject"""

    type: str = Field()
    sha: Annotated[str, Field(min_length=40, max_length=40)] = Field(
        description="SHA for the reference"
    )
    url: str = Field()


class GitTag(GitHubModel):
    """Git Tag

    Metadata for a Git tag
    """

    node_id: str = Field()
    tag: str = Field(description="Name of the tag")
    sha: str = Field()
    url: str = Field(description="URL for the tag")
    message: str = Field(description="Message describing the purpose of the tag")
    tagger: GitTagPropTagger = Field()
    object_: GitTagPropObject = Field(alias="object")
    verification: Missing[Verification] = Field(default=UNSET, title="Verification")


class GitTagPropTagger(GitHubModel):
    """GitTagPropTagger"""

    date: str = Field()
    email: str = Field()
    name: str = Field()


class GitTagPropObject(GitHubModel):
    """GitTagPropObject"""

    sha: str = Field()
    type: str = Field()
    url: str = Field()


class GitTree(GitHubModel):
    """Git Tree

    The hierarchy between files in a Git repository.
    """

    sha: str = Field()
    url: str = Field()
    truncated: bool = Field()
    tree: List[GitTreePropTreeItems] = Field(
        description="Objects specifying a tree structure"
    )


class GitTreePropTreeItems(GitHubModel):
    """GitTreePropTreeItems"""

    path: Missing[str] = Field(default=UNSET)
    mode: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    sha: Missing[str] = Field(default=UNSET)
    size: Missing[int] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class HookResponse(GitHubModel):
    """Hook Response"""

    code: Union[int, None] = Field()
    status: Union[str, None] = Field()
    message: Union[str, None] = Field()


class Hook(GitHubModel):
    """Webhook

    Webhooks for repositories.
    """

    type: str = Field()
    id: int = Field(description="Unique identifier of the webhook.")
    name: str = Field(
        description="The name of a valid service, use 'web' for a webhook."
    )
    active: bool = Field(
        description="Determines whether the hook is actually triggered on pushes."
    )
    events: List[str] = Field(
        description="Determines what events the hook is triggered for. Default: ['push']."
    )
    config: HookPropConfig = Field()
    updated_at: datetime = Field()
    created_at: datetime = Field()
    url: str = Field()
    test_url: str = Field()
    ping_url: str = Field()
    deliveries_url: Missing[str] = Field(default=UNSET)
    last_response: HookResponse = Field(title="Hook Response")


class HookPropConfig(GitHubModel):
    """HookPropConfig"""

    email: Missing[str] = Field(default=UNSET)
    password: Missing[str] = Field(default=UNSET)
    room: Missing[str] = Field(default=UNSET)
    subdomain: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(
        default=UNSET, description="The URL to which the payloads will be delivered."
    )
    insecure_ssl: Missing[Union[str, float]] = Field(default=UNSET)
    content_type: Missing[str] = Field(
        default=UNSET,
        description="The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
    )
    digest: Missing[str] = Field(default=UNSET)
    secret: Missing[str] = Field(
        default=UNSET,
        description="If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).",
    )
    token: Missing[str] = Field(default=UNSET)


class Import(GitHubModel):
    """Import

    A repository import from an external source.
    """

    vcs: Union[str, None] = Field()
    use_lfs: Missing[bool] = Field(default=UNSET)
    vcs_url: str = Field(description="The URL of the originating repository.")
    svc_root: Missing[str] = Field(default=UNSET)
    tfvc_project: Missing[str] = Field(default=UNSET)
    status: Literal[
        "auth",
        "error",
        "none",
        "detecting",
        "choose",
        "auth_failed",
        "importing",
        "mapping",
        "waiting_to_push",
        "pushing",
        "complete",
        "setup",
        "unknown",
        "detection_found_multiple",
        "detection_found_nothing",
        "detection_needs_auth",
    ] = Field()
    status_text: Missing[Union[str, None]] = Field(default=UNSET)
    failed_step: Missing[Union[str, None]] = Field(default=UNSET)
    error_message: Missing[Union[str, None]] = Field(default=UNSET)
    import_percent: Missing[Union[int, None]] = Field(default=UNSET)
    commit_count: Missing[Union[int, None]] = Field(default=UNSET)
    push_percent: Missing[Union[int, None]] = Field(default=UNSET)
    has_large_files: Missing[bool] = Field(default=UNSET)
    large_files_size: Missing[int] = Field(default=UNSET)
    large_files_count: Missing[int] = Field(default=UNSET)
    project_choices: Missing[List[ImportPropProjectChoicesItems]] = Field(default=UNSET)
    message: Missing[str] = Field(default=UNSET)
    authors_count: Missing[Union[int, None]] = Field(default=UNSET)
    url: str = Field()
    html_url: str = Field()
    authors_url: str = Field()
    repository_url: str = Field()
    svn_root: Missing[str] = Field(default=UNSET)


class ImportPropProjectChoicesItems(GitHubModel):
    """ImportPropProjectChoicesItems"""

    vcs: Missing[str] = Field(default=UNSET)
    tfvc_project: Missing[str] = Field(default=UNSET)
    human_name: Missing[str] = Field(default=UNSET)


class PorterAuthor(GitHubModel):
    """Porter Author

    Porter Author
    """

    id: int = Field()
    remote_id: str = Field()
    remote_name: str = Field()
    email: str = Field()
    name: str = Field()
    url: str = Field()
    import_url: str = Field()


class PorterLargeFile(GitHubModel):
    """Porter Large File

    Porter Large File
    """

    ref_name: str = Field()
    path: str = Field()
    oid: str = Field()
    size: int = Field()


class IssueEventLabel(GitHubModel):
    """Issue Event Label

    Issue Event Label
    """

    name: Union[str, None] = Field()
    color: Union[str, None] = Field()


class IssueEventDismissedReview(GitHubModel):
    """Issue Event Dismissed Review"""

    state: str = Field()
    review_id: int = Field()
    dismissal_message: Union[str, None] = Field()
    dismissal_commit_id: Missing[Union[str, None]] = Field(default=UNSET)


class IssueEventMilestone(GitHubModel):
    """Issue Event Milestone

    Issue Event Milestone
    """

    title: str = Field()


class IssueEventProjectCard(GitHubModel):
    """Issue Event Project Card

    Issue Event Project Card
    """

    url: str = Field()
    id: int = Field()
    project_url: str = Field()
    project_id: int = Field()
    column_name: str = Field()
    previous_column_name: Missing[str] = Field(default=UNSET)


class IssueEventRename(GitHubModel):
    """Issue Event Rename

    Issue Event Rename
    """

    from_: str = Field(alias="from")
    to: str = Field()


class IssueEvent(GitHubModel):
    """Issue Event

    Issue Event
    """

    id: int = Field()
    node_id: str = Field()
    url: str = Field()
    actor: Union[None, SimpleUser] = Field()
    event: str = Field()
    commit_id: Union[str, None] = Field()
    commit_url: Union[str, None] = Field()
    created_at: datetime = Field()
    issue: Missing[Union[None, Issue]] = Field(default=UNSET)
    label: Missing[IssueEventLabel] = Field(
        default=UNSET, title="Issue Event Label", description="Issue Event Label"
    )
    assignee: Missing[Union[None, SimpleUser]] = Field(default=UNSET)
    assigner: Missing[Union[None, SimpleUser]] = Field(default=UNSET)
    review_requester: Missing[Union[None, SimpleUser]] = Field(default=UNSET)
    requested_reviewer: Missing[Union[None, SimpleUser]] = Field(default=UNSET)
    requested_team: Missing[Team] = Field(
        default=UNSET,
        title="Team",
        description="Groups of organization members that gives permissions on specified repositories.",
    )
    dismissed_review: Missing[IssueEventDismissedReview] = Field(
        default=UNSET, title="Issue Event Dismissed Review"
    )
    milestone: Missing[IssueEventMilestone] = Field(
        default=UNSET,
        title="Issue Event Milestone",
        description="Issue Event Milestone",
    )
    project_card: Missing[IssueEventProjectCard] = Field(
        default=UNSET,
        title="Issue Event Project Card",
        description="Issue Event Project Card",
    )
    rename: Missing[IssueEventRename] = Field(
        default=UNSET, title="Issue Event Rename", description="Issue Event Rename"
    )
    author_association: Missing[
        Literal[
            "COLLABORATOR",
            "CONTRIBUTOR",
            "FIRST_TIMER",
            "FIRST_TIME_CONTRIBUTOR",
            "MANNEQUIN",
            "MEMBER",
            "NONE",
            "OWNER",
        ]
    ] = Field(
        default=UNSET,
        title="author_association",
        description="How the author is associated with the repository.",
    )
    lock_reason: Missing[Union[str, None]] = Field(default=UNSET)
    performed_via_github_app: Missing[Union[None, Integration]] = Field(default=UNSET)


class LabeledIssueEvent(GitHubModel):
    """Labeled Issue Event

    Labeled Issue Event
    """

    id: int = Field()
    node_id: str = Field()
    url: str = Field()
    actor: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    event: Literal["labeled"] = Field()
    commit_id: Union[str, None] = Field()
    commit_url: Union[str, None] = Field()
    created_at: str = Field()
    performed_via_github_app: Union[None, Integration] = Field()
    label: LabeledIssueEventPropLabel = Field()


class LabeledIssueEventPropLabel(GitHubModel):
    """LabeledIssueEventPropLabel"""

    name: str = Field()
    color: str = Field()


class UnlabeledIssueEvent(GitHubModel):
    """Unlabeled Issue Event

    Unlabeled Issue Event
    """

    id: int = Field()
    node_id: str = Field()
    url: str = Field()
    actor: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    event: Literal["unlabeled"] = Field()
    commit_id: Union[str, None] = Field()
    commit_url: Union[str, None] = Field()
    created_at: str = Field()
    performed_via_github_app: Union[None, Integration] = Field()
    label: UnlabeledIssueEventPropLabel = Field()


class UnlabeledIssueEventPropLabel(GitHubModel):
    """UnlabeledIssueEventPropLabel"""

    name: str = Field()
    color: str = Field()


class AssignedIssueEvent(GitHubModel):
    """Assigned Issue Event

    Assigned Issue Event
    """

    id: int = Field()
    node_id: str = Field()
    url: str = Field()
    actor: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    event: str = Field()
    commit_id: Union[str, None] = Field()
    commit_url: Union[str, None] = Field()
    created_at: str = Field()
    performed_via_github_app: Integration = Field(
        title="GitHub app",
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
    )
    assignee: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    assigner: SimpleUser = Field(title="Simple User", description="A GitHub user.")


class UnassignedIssueEvent(GitHubModel):
    """Unassigned Issue Event

    Unassigned Issue Event
    """

    id: int = Field()
    node_id: str = Field()
    url: str = Field()
    actor: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    event: str = Field()
    commit_id: Union[str, None] = Field()
    commit_url: Union[str, None] = Field()
    created_at: str = Field()
    performed_via_github_app: Union[None, Integration] = Field()
    assignee: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    assigner: SimpleUser = Field(title="Simple User", description="A GitHub user.")


class MilestonedIssueEvent(GitHubModel):
    """Milestoned Issue Event

    Milestoned Issue Event
    """

    id: int = Field()
    node_id: str = Field()
    url: str = Field()
    actor: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    event: Literal["milestoned"] = Field()
    commit_id: Union[str, None] = Field()
    commit_url: Union[str, None] = Field()
    created_at: str = Field()
    performed_via_github_app: Union[None, Integration] = Field()
    milestone: MilestonedIssueEventPropMilestone = Field()


class MilestonedIssueEventPropMilestone(GitHubModel):
    """MilestonedIssueEventPropMilestone"""

    title: str = Field()


class DemilestonedIssueEvent(GitHubModel):
    """Demilestoned Issue Event

    Demilestoned Issue Event
    """

    id: int = Field()
    node_id: str = Field()
    url: str = Field()
    actor: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    event: Literal["demilestoned"] = Field()
    commit_id: Union[str, None] = Field()
    commit_url: Union[str, None] = Field()
    created_at: str = Field()
    performed_via_github_app: Union[None, Integration] = Field()
    milestone: DemilestonedIssueEventPropMilestone = Field()


class DemilestonedIssueEventPropMilestone(GitHubModel):
    """DemilestonedIssueEventPropMilestone"""

    title: str = Field()


class RenamedIssueEvent(GitHubModel):
    """Renamed Issue Event

    Renamed Issue Event
    """

    id: int = Field()
    node_id: str = Field()
    url: str = Field()
    actor: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    event: Literal["renamed"] = Field()
    commit_id: Union[str, None] = Field()
    commit_url: Union[str, None] = Field()
    created_at: str = Field()
    performed_via_github_app: Union[None, Integration] = Field()
    rename: RenamedIssueEventPropRename = Field()


class RenamedIssueEventPropRename(GitHubModel):
    """RenamedIssueEventPropRename"""

    from_: str = Field(alias="from")
    to: str = Field()


class ReviewRequestedIssueEvent(GitHubModel):
    """Review Requested Issue Event

    Review Requested Issue Event
    """

    id: int = Field()
    node_id: str = Field()
    url: str = Field()
    actor: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    event: Literal["review_requested"] = Field()
    commit_id: Union[str, None] = Field()
    commit_url: Union[str, None] = Field()
    created_at: str = Field()
    performed_via_github_app: Union[None, Integration] = Field()
    review_requester: SimpleUser = Field(
        title="Simple User", description="A GitHub user."
    )
    requested_team: Missing[Team] = Field(
        default=UNSET,
        title="Team",
        description="Groups of organization members that gives permissions on specified repositories.",
    )
    requested_reviewer: Missing[SimpleUser] = Field(
        default=UNSET, title="Simple User", description="A GitHub user."
    )


class ReviewRequestRemovedIssueEvent(GitHubModel):
    """Review Request Removed Issue Event

    Review Request Removed Issue Event
    """

    id: int = Field()
    node_id: str = Field()
    url: str = Field()
    actor: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    event: Literal["review_request_removed"] = Field()
    commit_id: Union[str, None] = Field()
    commit_url: Union[str, None] = Field()
    created_at: str = Field()
    performed_via_github_app: Union[None, Integration] = Field()
    review_requester: SimpleUser = Field(
        title="Simple User", description="A GitHub user."
    )
    requested_team: Missing[Team] = Field(
        default=UNSET,
        title="Team",
        description="Groups of organization members that gives permissions on specified repositories.",
    )
    requested_reviewer: Missing[SimpleUser] = Field(
        default=UNSET, title="Simple User", description="A GitHub user."
    )


class ReviewDismissedIssueEvent(GitHubModel):
    """Review Dismissed Issue Event

    Review Dismissed Issue Event
    """

    id: int = Field()
    node_id: str = Field()
    url: str = Field()
    actor: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    event: Literal["review_dismissed"] = Field()
    commit_id: Union[str, None] = Field()
    commit_url: Union[str, None] = Field()
    created_at: str = Field()
    performed_via_github_app: Union[None, Integration] = Field()
    dismissed_review: ReviewDismissedIssueEventPropDismissedReview = Field()


class ReviewDismissedIssueEventPropDismissedReview(GitHubModel):
    """ReviewDismissedIssueEventPropDismissedReview"""

    state: str = Field()
    review_id: int = Field()
    dismissal_message: Union[str, None] = Field()
    dismissal_commit_id: Missing[str] = Field(default=UNSET)


class LockedIssueEvent(GitHubModel):
    """Locked Issue Event

    Locked Issue Event
    """

    id: int = Field()
    node_id: str = Field()
    url: str = Field()
    actor: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    event: Literal["locked"] = Field()
    commit_id: Union[str, None] = Field()
    commit_url: Union[str, None] = Field()
    created_at: str = Field()
    performed_via_github_app: Union[None, Integration] = Field()
    lock_reason: Union[str, None] = Field()


class AddedToProjectIssueEvent(GitHubModel):
    """Added to Project Issue Event

    Added to Project Issue Event
    """

    id: int = Field()
    node_id: str = Field()
    url: str = Field()
    actor: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    event: Literal["added_to_project"] = Field()
    commit_id: Union[str, None] = Field()
    commit_url: Union[str, None] = Field()
    created_at: str = Field()
    performed_via_github_app: Union[None, Integration] = Field()
    project_card: Missing[AddedToProjectIssueEventPropProjectCard] = Field(
        default=UNSET
    )


class AddedToProjectIssueEventPropProjectCard(GitHubModel):
    """AddedToProjectIssueEventPropProjectCard"""

    id: int = Field()
    url: str = Field()
    project_id: int = Field()
    project_url: str = Field()
    column_name: str = Field()
    previous_column_name: Missing[str] = Field(default=UNSET)


class MovedColumnInProjectIssueEvent(GitHubModel):
    """Moved Column in Project Issue Event

    Moved Column in Project Issue Event
    """

    id: int = Field()
    node_id: str = Field()
    url: str = Field()
    actor: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    event: Literal["moved_columns_in_project"] = Field()
    commit_id: Union[str, None] = Field()
    commit_url: Union[str, None] = Field()
    created_at: str = Field()
    performed_via_github_app: Union[None, Integration] = Field()
    project_card: Missing[MovedColumnInProjectIssueEventPropProjectCard] = Field(
        default=UNSET
    )


class MovedColumnInProjectIssueEventPropProjectCard(GitHubModel):
    """MovedColumnInProjectIssueEventPropProjectCard"""

    id: int = Field()
    url: str = Field()
    project_id: int = Field()
    project_url: str = Field()
    column_name: str = Field()
    previous_column_name: Missing[str] = Field(default=UNSET)


class RemovedFromProjectIssueEvent(GitHubModel):
    """Removed from Project Issue Event

    Removed from Project Issue Event
    """

    id: int = Field()
    node_id: str = Field()
    url: str = Field()
    actor: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    event: Literal["removed_from_project"] = Field()
    commit_id: Union[str, None] = Field()
    commit_url: Union[str, None] = Field()
    created_at: str = Field()
    performed_via_github_app: Union[None, Integration] = Field()
    project_card: Missing[RemovedFromProjectIssueEventPropProjectCard] = Field(
        default=UNSET
    )


class RemovedFromProjectIssueEventPropProjectCard(GitHubModel):
    """RemovedFromProjectIssueEventPropProjectCard"""

    id: int = Field()
    url: str = Field()
    project_id: int = Field()
    project_url: str = Field()
    column_name: str = Field()
    previous_column_name: Missing[str] = Field(default=UNSET)


class ConvertedNoteToIssueIssueEvent(GitHubModel):
    """Converted Note to Issue Issue Event

    Converted Note to Issue Issue Event
    """

    id: int = Field()
    node_id: str = Field()
    url: str = Field()
    actor: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    event: Literal["converted_note_to_issue"] = Field()
    commit_id: Union[str, None] = Field()
    commit_url: Union[str, None] = Field()
    created_at: str = Field()
    performed_via_github_app: Integration = Field(
        title="GitHub app",
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
    )
    project_card: Missing[ConvertedNoteToIssueIssueEventPropProjectCard] = Field(
        default=UNSET
    )


class ConvertedNoteToIssueIssueEventPropProjectCard(GitHubModel):
    """ConvertedNoteToIssueIssueEventPropProjectCard"""

    id: int = Field()
    url: str = Field()
    project_id: int = Field()
    project_url: str = Field()
    column_name: str = Field()
    previous_column_name: Missing[str] = Field(default=UNSET)


class Label(GitHubModel):
    """Label

    Color-coded labels help you categorize and filter your issues (just like labels
    in Gmail).
    """

    id: int = Field()
    node_id: str = Field()
    url: str = Field(description="URL for the label")
    name: str = Field(description="The name of the label.")
    description: Union[str, None] = Field()
    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()


class TimelineCommentEvent(GitHubModel):
    """Timeline Comment Event

    Timeline Comment Event
    """

    event: Literal["commented"] = Field()
    actor: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    id: int = Field(description="Unique identifier of the issue comment")
    node_id: str = Field()
    url: str = Field(description="URL for the issue comment")
    body: Missing[str] = Field(
        default=UNSET, description="Contents of the issue comment"
    )
    body_text: Missing[str] = Field(default=UNSET)
    body_html: Missing[str] = Field(default=UNSET)
    html_url: str = Field()
    user: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    created_at: datetime = Field()
    updated_at: datetime = Field()
    issue_url: str = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="author_association",
        description="How the author is associated with the repository.",
    )
    performed_via_github_app: Missing[Union[None, Integration]] = Field(default=UNSET)
    reactions: Missing[ReactionRollup] = Field(default=UNSET, title="Reaction Rollup")


class TimelineCrossReferencedEvent(GitHubModel):
    """Timeline Cross Referenced Event

    Timeline Cross Referenced Event
    """

    event: Literal["cross-referenced"] = Field()
    actor: Missing[SimpleUser] = Field(
        default=UNSET, title="Simple User", description="A GitHub user."
    )
    created_at: datetime = Field()
    updated_at: datetime = Field()
    source: TimelineCrossReferencedEventPropSource = Field()


class TimelineCrossReferencedEventPropSource(GitHubModel):
    """TimelineCrossReferencedEventPropSource"""

    type: Missing[str] = Field(default=UNSET)
    issue: Missing[Issue] = Field(
        default=UNSET,
        title="Issue",
        description="Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.",
    )


class TimelineCommittedEvent(GitHubModel):
    """Timeline Committed Event

    Timeline Committed Event
    """

    event: Missing[Literal["committed"]] = Field(default=UNSET)
    sha: str = Field(description="SHA for the commit")
    node_id: str = Field()
    url: str = Field()
    author: TimelineCommittedEventPropAuthor = Field(
        description="Identifying information for the git-user"
    )
    committer: TimelineCommittedEventPropCommitter = Field(
        description="Identifying information for the git-user"
    )
    message: str = Field(description="Message describing the purpose of the commit")
    tree: TimelineCommittedEventPropTree = Field()
    parents: List[TimelineCommittedEventPropParentsItems] = Field()
    verification: TimelineCommittedEventPropVerification = Field()
    html_url: str = Field()


class TimelineCommittedEventPropAuthor(GitHubModel):
    """TimelineCommittedEventPropAuthor

    Identifying information for the git-user
    """

    date: datetime = Field(description="Timestamp of the commit")
    email: str = Field(description="Git email address of the user")
    name: str = Field(description="Name of the git user")


class TimelineCommittedEventPropCommitter(GitHubModel):
    """TimelineCommittedEventPropCommitter

    Identifying information for the git-user
    """

    date: datetime = Field(description="Timestamp of the commit")
    email: str = Field(description="Git email address of the user")
    name: str = Field(description="Name of the git user")


class TimelineCommittedEventPropTree(GitHubModel):
    """TimelineCommittedEventPropTree"""

    sha: str = Field(description="SHA for the commit")
    url: str = Field()


class TimelineCommittedEventPropParentsItems(GitHubModel):
    """TimelineCommittedEventPropParentsItems"""

    sha: str = Field(description="SHA for the commit")
    url: str = Field()
    html_url: str = Field()


class TimelineCommittedEventPropVerification(GitHubModel):
    """TimelineCommittedEventPropVerification"""

    verified: bool = Field()
    reason: str = Field()
    signature: Union[str, None] = Field()
    payload: Union[str, None] = Field()


class TimelineReviewedEvent(GitHubModel):
    """Timeline Reviewed Event

    Timeline Reviewed Event
    """

    event: Literal["reviewed"] = Field()
    id: int = Field(description="Unique identifier of the review")
    node_id: str = Field()
    user: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    body: Union[str, None] = Field(description="The text of the review.")
    state: str = Field()
    html_url: str = Field()
    pull_request_url: str = Field()
    links: TimelineReviewedEventPropLinks = Field(alias="_links")
    submitted_at: Missing[datetime] = Field(default=UNSET)
    commit_id: str = Field(description="A commit SHA for the review.")
    body_html: Missing[Union[str, None]] = Field(default=UNSET)
    body_text: Missing[Union[str, None]] = Field(default=UNSET)
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="author_association",
        description="How the author is associated with the repository.",
    )


class TimelineReviewedEventPropLinks(GitHubModel):
    """TimelineReviewedEventPropLinks"""

    html: TimelineReviewedEventPropLinksPropHtml = Field()
    pull_request: TimelineReviewedEventPropLinksPropPullRequest = Field()


class TimelineReviewedEventPropLinksPropHtml(GitHubModel):
    """TimelineReviewedEventPropLinksPropHtml"""

    href: str = Field()


class TimelineReviewedEventPropLinksPropPullRequest(GitHubModel):
    """TimelineReviewedEventPropLinksPropPullRequest"""

    href: str = Field()


class PullRequestReviewComment(GitHubModel):
    """Pull Request Review Comment

    Pull Request Review Comments are comments on a portion of the Pull Request's
    diff.
    """

    url: str = Field(description="URL for the pull request review comment")
    pull_request_review_id: Union[int, None] = Field(
        description="The ID of the pull request review to which the comment belongs."
    )
    id: int = Field(description="The ID of the pull request review comment.")
    node_id: str = Field(description="The node ID of the pull request review comment.")
    diff_hunk: str = Field(
        description="The diff of the line that the comment refers to."
    )
    path: str = Field(
        description="The relative path of the file to which the comment applies."
    )
    position: Missing[int] = Field(
        default=UNSET,
        description="The line index in the diff to which the comment applies. This field is deprecated; use `line` instead.",
    )
    original_position: Missing[int] = Field(
        default=UNSET,
        description="The index of the original line in the diff to which the comment applies. This field is deprecated; use `original_line` instead.",
    )
    commit_id: str = Field(
        description="The SHA of the commit to which the comment applies."
    )
    original_commit_id: str = Field(
        description="The SHA of the original commit to which the comment applies."
    )
    in_reply_to_id: Missing[int] = Field(
        default=UNSET, description="The comment ID to reply to."
    )
    user: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    body: str = Field(description="The text of the comment.")
    created_at: datetime = Field()
    updated_at: datetime = Field()
    html_url: str = Field(description="HTML URL for the pull request review comment.")
    pull_request_url: str = Field(
        description="URL for the pull request that the review comment belongs to."
    )
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="author_association",
        description="How the author is associated with the repository.",
    )
    links: PullRequestReviewCommentPropLinks = Field(alias="_links")
    start_line: Missing[Union[int, None]] = Field(
        default=UNSET,
        description="The first line of the range for a multi-line comment.",
    )
    original_start_line: Missing[Union[int, None]] = Field(
        default=UNSET,
        description="The first line of the range for a multi-line comment.",
    )
    start_side: Missing[Union[None, Literal["LEFT", "RIGHT"]]] = Field(
        default=UNSET,
        description="The side of the first line of the range for a multi-line comment.",
    )
    line: Missing[int] = Field(
        default=UNSET,
        description="The line of the blob to which the comment applies. The last line of the range for a multi-line comment",
    )
    original_line: Missing[int] = Field(
        default=UNSET,
        description="The line of the blob to which the comment applies. The last line of the range for a multi-line comment",
    )
    side: Missing[Literal["LEFT", "RIGHT"]] = Field(
        default=UNSET,
        description="The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment",
    )
    subject_type: Missing[Literal["line", "file"]] = Field(
        default=UNSET,
        description="The level at which the comment is targeted, can be a diff line or a file.",
    )
    reactions: Missing[ReactionRollup] = Field(default=UNSET, title="Reaction Rollup")
    body_html: Missing[str] = Field(default=UNSET)
    body_text: Missing[str] = Field(default=UNSET)


class PullRequestReviewCommentPropLinks(GitHubModel):
    """PullRequestReviewCommentPropLinks"""

    self_: PullRequestReviewCommentPropLinksPropSelf = Field(alias="self")
    html: PullRequestReviewCommentPropLinksPropHtml = Field()
    pull_request: PullRequestReviewCommentPropLinksPropPullRequest = Field()


class PullRequestReviewCommentPropLinksPropSelf(GitHubModel):
    """PullRequestReviewCommentPropLinksPropSelf"""

    href: str = Field()


class PullRequestReviewCommentPropLinksPropHtml(GitHubModel):
    """PullRequestReviewCommentPropLinksPropHtml"""

    href: str = Field()


class PullRequestReviewCommentPropLinksPropPullRequest(GitHubModel):
    """PullRequestReviewCommentPropLinksPropPullRequest"""

    href: str = Field()


class TimelineLineCommentedEvent(GitHubModel):
    """Timeline Line Commented Event

    Timeline Line Commented Event
    """

    event: Missing[Literal["line_commented"]] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    comments: Missing[List[PullRequestReviewComment]] = Field(default=UNSET)


class TimelineCommitCommentedEvent(GitHubModel):
    """Timeline Commit Commented Event

    Timeline Commit Commented Event
    """

    event: Missing[Literal["commit_commented"]] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    commit_id: Missing[str] = Field(default=UNSET)
    comments: Missing[List[CommitComment]] = Field(default=UNSET)


class TimelineAssignedIssueEvent(GitHubModel):
    """Timeline Assigned Issue Event

    Timeline Assigned Issue Event
    """

    id: int = Field()
    node_id: str = Field()
    url: str = Field()
    actor: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    event: Literal["assigned"] = Field()
    commit_id: Union[str, None] = Field()
    commit_url: Union[str, None] = Field()
    created_at: str = Field()
    performed_via_github_app: Union[None, Integration] = Field()
    assignee: SimpleUser = Field(title="Simple User", description="A GitHub user.")


class TimelineUnassignedIssueEvent(GitHubModel):
    """Timeline Unassigned Issue Event

    Timeline Unassigned Issue Event
    """

    id: int = Field()
    node_id: str = Field()
    url: str = Field()
    actor: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    event: Literal["unassigned"] = Field()
    commit_id: Union[str, None] = Field()
    commit_url: Union[str, None] = Field()
    created_at: str = Field()
    performed_via_github_app: Union[None, Integration] = Field()
    assignee: SimpleUser = Field(title="Simple User", description="A GitHub user.")


class StateChangeIssueEvent(GitHubModel):
    """State Change Issue Event

    State Change Issue Event
    """

    id: int = Field()
    node_id: str = Field()
    url: str = Field()
    actor: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    event: str = Field()
    commit_id: Union[str, None] = Field()
    commit_url: Union[str, None] = Field()
    created_at: str = Field()
    performed_via_github_app: Union[None, Integration] = Field()
    state_reason: Missing[Union[str, None]] = Field(default=UNSET)


class DeployKey(GitHubModel):
    """Deploy Key

    An SSH key granting access to a single repository.
    """

    id: int = Field()
    key: str = Field()
    url: str = Field()
    title: str = Field()
    verified: bool = Field()
    created_at: str = Field()
    read_only: bool = Field()
    added_by: Missing[Union[str, None]] = Field(default=UNSET)
    last_used: Missing[Union[str, None]] = Field(default=UNSET)


class Language(ExtraGitHubModel):
    """Language

    Language
    """


class LicenseContent(GitHubModel):
    """License Content

    License Content
    """

    name: str = Field()
    path: str = Field()
    sha: str = Field()
    size: int = Field()
    url: str = Field()
    html_url: Union[str, None] = Field()
    git_url: Union[str, None] = Field()
    download_url: Union[str, None] = Field()
    type: str = Field()
    content: str = Field()
    encoding: str = Field()
    links: LicenseContentPropLinks = Field(alias="_links")
    license_: Union[None, LicenseSimple] = Field(alias="license")


class LicenseContentPropLinks(GitHubModel):
    """LicenseContentPropLinks"""

    git: Union[str, None] = Field()
    html: Union[str, None] = Field()
    self_: str = Field(alias="self")


class MergedUpstream(GitHubModel):
    """Merged upstream

    Results of a successful merge upstream request
    """

    message: Missing[str] = Field(default=UNSET)
    merge_type: Missing[Literal["merge", "fast-forward", "none"]] = Field(default=UNSET)
    base_branch: Missing[str] = Field(default=UNSET)


class PagesSourceHash(GitHubModel):
    """Pages Source Hash"""

    branch: str = Field()
    path: str = Field()


class PagesHttpsCertificate(GitHubModel):
    """Pages Https Certificate"""

    state: Literal[
        "new",
        "authorization_created",
        "authorization_pending",
        "authorized",
        "authorization_revoked",
        "issued",
        "uploaded",
        "approved",
        "errored",
        "bad_authz",
        "destroy_pending",
        "dns_changed",
    ] = Field()
    description: str = Field()
    domains: List[str] = Field(
        description="Array of the domain set and its alternate name (if it is configured)"
    )
    expires_at: Missing[date] = Field(default=UNSET)


class Page(GitHubModel):
    """GitHub Pages

    The configuration for GitHub Pages for a repository.
    """

    url: str = Field(description="The API address for accessing this Page resource.")
    status: Union[None, Literal["built", "building", "errored"]] = Field(
        description="The status of the most recent build of the Page."
    )
    cname: Union[str, None] = Field(description="The Pages site's custom domain")
    protected_domain_state: Missing[
        Union[None, Literal["pending", "verified", "unverified"]]
    ] = Field(default=UNSET, description="The state if the domain is verified")
    pending_domain_unverified_at: Missing[Union[datetime, None]] = Field(
        default=UNSET,
        description="The timestamp when a pending domain becomes unverified.",
    )
    custom_404: bool = Field(
        default=False, description="Whether the Page has a custom 404 page."
    )
    html_url: Missing[str] = Field(
        default=UNSET, description="The web address the Page can be accessed from."
    )
    build_type: Missing[Union[None, Literal["legacy", "workflow"]]] = Field(
        default=UNSET, description="The process in which the Page will be built."
    )
    source: Missing[PagesSourceHash] = Field(default=UNSET, title="Pages Source Hash")
    public: bool = Field(
        description="Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site."
    )
    https_certificate: Missing[PagesHttpsCertificate] = Field(
        default=UNSET, title="Pages Https Certificate"
    )
    https_enforced: Missing[bool] = Field(
        default=UNSET, description="Whether https is enabled on the domain"
    )


class PageBuild(GitHubModel):
    """Page Build

    Page Build
    """

    url: str = Field()
    status: str = Field()
    error: PageBuildPropError = Field()
    pusher: Union[None, SimpleUser] = Field()
    commit: str = Field()
    duration: int = Field()
    created_at: datetime = Field()
    updated_at: datetime = Field()


class PageBuildPropError(GitHubModel):
    """PageBuildPropError"""

    message: Union[str, None] = Field()


class PageBuildStatus(GitHubModel):
    """Page Build Status

    Page Build Status
    """

    url: str = Field()
    status: str = Field()


class PageDeployment(GitHubModel):
    """GitHub Pages

    The GitHub Pages deployment status.
    """

    status_url: str = Field(
        description="The URI to monitor GitHub Pages deployment status."
    )
    page_url: str = Field(description="The URI to the deployed GitHub Pages.")
    preview_url: Missing[str] = Field(
        default=UNSET, description="The URI to the deployed GitHub Pages preview."
    )


class PagesHealthCheck(GitHubModel):
    """Pages Health Check Status

    Pages Health Check Status
    """

    domain: Missing[PagesHealthCheckPropDomain] = Field(default=UNSET)
    alt_domain: Missing[Union[PagesHealthCheckPropAltDomain, None]] = Field(
        default=UNSET
    )


class PagesHealthCheckPropDomain(GitHubModel):
    """PagesHealthCheckPropDomain"""

    host: Missing[str] = Field(default=UNSET)
    uri: Missing[str] = Field(default=UNSET)
    nameservers: Missing[str] = Field(default=UNSET)
    dns_resolves: Missing[bool] = Field(default=UNSET)
    is_proxied: Missing[Union[bool, None]] = Field(default=UNSET)
    is_cloudflare_ip: Missing[Union[bool, None]] = Field(default=UNSET)
    is_fastly_ip: Missing[Union[bool, None]] = Field(default=UNSET)
    is_old_ip_address: Missing[Union[bool, None]] = Field(default=UNSET)
    is_a_record: Missing[Union[bool, None]] = Field(default=UNSET)
    has_cname_record: Missing[Union[bool, None]] = Field(default=UNSET)
    has_mx_records_present: Missing[Union[bool, None]] = Field(default=UNSET)
    is_valid_domain: Missing[bool] = Field(default=UNSET)
    is_apex_domain: Missing[bool] = Field(default=UNSET)
    should_be_a_record: Missing[Union[bool, None]] = Field(default=UNSET)
    is_cname_to_github_user_domain: Missing[Union[bool, None]] = Field(default=UNSET)
    is_cname_to_pages_dot_github_dot_com: Missing[Union[bool, None]] = Field(
        default=UNSET
    )
    is_cname_to_fastly: Missing[Union[bool, None]] = Field(default=UNSET)
    is_pointed_to_github_pages_ip: Missing[Union[bool, None]] = Field(default=UNSET)
    is_non_github_pages_ip_present: Missing[Union[bool, None]] = Field(default=UNSET)
    is_pages_domain: Missing[bool] = Field(default=UNSET)
    is_served_by_pages: Missing[Union[bool, None]] = Field(default=UNSET)
    is_valid: Missing[bool] = Field(default=UNSET)
    reason: Missing[Union[str, None]] = Field(default=UNSET)
    responds_to_https: Missing[bool] = Field(default=UNSET)
    enforces_https: Missing[bool] = Field(default=UNSET)
    https_error: Missing[Union[str, None]] = Field(default=UNSET)
    is_https_eligible: Missing[Union[bool, None]] = Field(default=UNSET)
    caa_error: Missing[Union[str, None]] = Field(default=UNSET)


class PagesHealthCheckPropAltDomain(GitHubModel):
    """PagesHealthCheckPropAltDomain"""

    host: Missing[str] = Field(default=UNSET)
    uri: Missing[str] = Field(default=UNSET)
    nameservers: Missing[str] = Field(default=UNSET)
    dns_resolves: Missing[bool] = Field(default=UNSET)
    is_proxied: Missing[Union[bool, None]] = Field(default=UNSET)
    is_cloudflare_ip: Missing[Union[bool, None]] = Field(default=UNSET)
    is_fastly_ip: Missing[Union[bool, None]] = Field(default=UNSET)
    is_old_ip_address: Missing[Union[bool, None]] = Field(default=UNSET)
    is_a_record: Missing[Union[bool, None]] = Field(default=UNSET)
    has_cname_record: Missing[Union[bool, None]] = Field(default=UNSET)
    has_mx_records_present: Missing[Union[bool, None]] = Field(default=UNSET)
    is_valid_domain: Missing[bool] = Field(default=UNSET)
    is_apex_domain: Missing[bool] = Field(default=UNSET)
    should_be_a_record: Missing[Union[bool, None]] = Field(default=UNSET)
    is_cname_to_github_user_domain: Missing[Union[bool, None]] = Field(default=UNSET)
    is_cname_to_pages_dot_github_dot_com: Missing[Union[bool, None]] = Field(
        default=UNSET
    )
    is_cname_to_fastly: Missing[Union[bool, None]] = Field(default=UNSET)
    is_pointed_to_github_pages_ip: Missing[Union[bool, None]] = Field(default=UNSET)
    is_non_github_pages_ip_present: Missing[Union[bool, None]] = Field(default=UNSET)
    is_pages_domain: Missing[bool] = Field(default=UNSET)
    is_served_by_pages: Missing[Union[bool, None]] = Field(default=UNSET)
    is_valid: Missing[bool] = Field(default=UNSET)
    reason: Missing[Union[str, None]] = Field(default=UNSET)
    responds_to_https: Missing[bool] = Field(default=UNSET)
    enforces_https: Missing[bool] = Field(default=UNSET)
    https_error: Missing[Union[str, None]] = Field(default=UNSET)
    is_https_eligible: Missing[Union[bool, None]] = Field(default=UNSET)
    caa_error: Missing[Union[str, None]] = Field(default=UNSET)


class PullRequest(GitHubModel):
    """Pull Request

    Pull requests let you tell others about changes you've pushed to a repository on
    GitHub. Once a pull request is sent, interested parties can review the set of
    changes, discuss potential modifications, and even push follow-up commits if
    necessary.
    """

    url: str = Field()
    id: int = Field()
    node_id: str = Field()
    html_url: str = Field()
    diff_url: str = Field()
    patch_url: str = Field()
    issue_url: str = Field()
    commits_url: str = Field()
    review_comments_url: str = Field()
    review_comment_url: str = Field()
    comments_url: str = Field()
    statuses_url: str = Field()
    number: int = Field(
        description="Number uniquely identifying the pull request within its repository."
    )
    state: Literal["open", "closed"] = Field(
        description="State of this Pull Request. Either `open` or `closed`."
    )
    locked: bool = Field()
    title: str = Field(description="The title of the pull request.")
    user: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    body: Union[str, None] = Field()
    labels: List[PullRequestPropLabelsItems] = Field()
    milestone: Union[None, Milestone] = Field()
    active_lock_reason: Missing[Union[str, None]] = Field(default=UNSET)
    created_at: datetime = Field()
    updated_at: datetime = Field()
    closed_at: Union[datetime, None] = Field()
    merged_at: Union[datetime, None] = Field()
    merge_commit_sha: Union[str, None] = Field()
    assignee: Union[None, SimpleUser] = Field()
    assignees: Missing[Union[List[SimpleUser], None]] = Field(default=UNSET)
    requested_reviewers: Missing[Union[List[SimpleUser], None]] = Field(default=UNSET)
    requested_teams: Missing[Union[List[TeamSimple], None]] = Field(default=UNSET)
    head: PullRequestPropHead = Field()
    base: PullRequestPropBase = Field()
    links: PullRequestPropLinks = Field(alias="_links")
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="author_association",
        description="How the author is associated with the repository.",
    )
    auto_merge: Union[AutoMerge, None] = Field(
        title="Auto merge", description="The status of auto merging a pull request."
    )
    draft: Missing[bool] = Field(
        default=UNSET,
        description="Indicates whether or not the pull request is a draft.",
    )
    merged: bool = Field()
    mergeable: Union[bool, None] = Field()
    rebaseable: Missing[Union[bool, None]] = Field(default=UNSET)
    mergeable_state: str = Field()
    merged_by: Union[None, SimpleUser] = Field()
    comments: int = Field()
    review_comments: int = Field()
    maintainer_can_modify: bool = Field(
        description="Indicates whether maintainers can modify the pull request."
    )
    commits: int = Field()
    additions: int = Field()
    deletions: int = Field()
    changed_files: int = Field()


class PullRequestPropLabelsItems(GitHubModel):
    """PullRequestPropLabelsItems"""

    id: int = Field()
    node_id: str = Field()
    url: str = Field()
    name: str = Field()
    description: Union[str, None] = Field()
    color: str = Field()
    default: bool = Field()


class PullRequestPropHead(GitHubModel):
    """PullRequestPropHead"""

    label: Union[str, None] = Field()
    ref: str = Field()
    repo: Union[PullRequestPropHeadPropRepo, None] = Field()
    sha: str = Field()
    user: Union[PullRequestPropHeadPropUser, None] = Field()


class PullRequestPropHeadPropRepoPropOwner(GitHubModel):
    """PullRequestPropHeadPropRepoPropOwner"""

    avatar_url: str = Field()
    events_url: str = Field()
    followers_url: str = Field()
    following_url: str = Field()
    gists_url: str = Field()
    gravatar_id: Union[str, None] = Field()
    html_url: str = Field()
    id: int = Field()
    node_id: str = Field()
    login: str = Field()
    organizations_url: str = Field()
    received_events_url: str = Field()
    repos_url: str = Field()
    site_admin: bool = Field()
    starred_url: str = Field()
    subscriptions_url: str = Field()
    type: str = Field()
    url: str = Field()


class PullRequestPropHeadPropRepoPropPermissions(GitHubModel):
    """PullRequestPropHeadPropRepoPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()


class PullRequestPropHeadPropRepoPropLicense(GitHubModel):
    """PullRequestPropHeadPropRepoPropLicense"""

    key: str = Field()
    name: str = Field()
    url: Union[str, None] = Field()
    spdx_id: Union[str, None] = Field()
    node_id: str = Field()


class PullRequestPropHeadPropRepo(GitHubModel):
    """PullRequestPropHeadPropRepo"""

    archive_url: str = Field()
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field()
    node_id: str = Field()
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    languages_url: str = Field()
    merges_url: str = Field()
    milestones_url: str = Field()
    name: str = Field()
    notifications_url: str = Field()
    owner: PullRequestPropHeadPropRepoPropOwner = Field()
    private: bool = Field()
    pulls_url: str = Field()
    releases_url: str = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    trees_url: str = Field()
    url: str = Field()
    clone_url: str = Field()
    default_branch: str = Field()
    forks: int = Field()
    forks_count: int = Field()
    git_url: str = Field()
    has_downloads: bool = Field()
    has_issues: bool = Field()
    has_projects: bool = Field()
    has_wiki: bool = Field()
    has_pages: bool = Field()
    has_discussions: bool = Field()
    homepage: Union[str, None] = Field()
    language: Union[str, None] = Field()
    master_branch: Missing[str] = Field(default=UNSET)
    archived: bool = Field()
    disabled: bool = Field()
    visibility: Missing[str] = Field(
        default=UNSET,
        description="The repository visibility: public, private, or internal.",
    )
    mirror_url: Union[str, None] = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    permissions: Missing[PullRequestPropHeadPropRepoPropPermissions] = Field(
        default=UNSET
    )
    temp_clone_token: Missing[Union[str, None]] = Field(default=UNSET)
    allow_merge_commit: Missing[bool] = Field(default=UNSET)
    allow_squash_merge: Missing[bool] = Field(default=UNSET)
    allow_rebase_merge: Missing[bool] = Field(default=UNSET)
    license_: Union[PullRequestPropHeadPropRepoPropLicense, None] = Field(
        alias="license"
    )
    pushed_at: datetime = Field()
    size: int = Field()
    ssh_url: str = Field()
    stargazers_count: int = Field()
    svn_url: str = Field()
    topics: Missing[List[str]] = Field(default=UNSET)
    watchers: int = Field()
    watchers_count: int = Field()
    created_at: datetime = Field()
    updated_at: datetime = Field()
    allow_forking: Missing[bool] = Field(default=UNSET)
    is_template: Missing[bool] = Field(default=UNSET)
    web_commit_signoff_required: Missing[bool] = Field(default=UNSET)


class PullRequestPropHeadPropUser(GitHubModel):
    """PullRequestPropHeadPropUser"""

    avatar_url: str = Field()
    events_url: str = Field()
    followers_url: str = Field()
    following_url: str = Field()
    gists_url: str = Field()
    gravatar_id: Union[str, None] = Field()
    html_url: str = Field()
    id: int = Field()
    node_id: str = Field()
    login: str = Field()
    organizations_url: str = Field()
    received_events_url: str = Field()
    repos_url: str = Field()
    site_admin: bool = Field()
    starred_url: str = Field()
    subscriptions_url: str = Field()
    type: str = Field()
    url: str = Field()


class PullRequestPropBase(GitHubModel):
    """PullRequestPropBase"""

    label: str = Field()
    ref: str = Field()
    repo: PullRequestPropBasePropRepo = Field()
    sha: str = Field()
    user: PullRequestPropBasePropUser = Field()


class PullRequestPropBasePropRepo(GitHubModel):
    """PullRequestPropBasePropRepo"""

    archive_url: str = Field()
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field()
    is_template: Missing[bool] = Field(default=UNSET)
    node_id: str = Field()
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    languages_url: str = Field()
    merges_url: str = Field()
    milestones_url: str = Field()
    name: str = Field()
    notifications_url: str = Field()
    owner: PullRequestPropBasePropRepoPropOwner = Field()
    private: bool = Field()
    pulls_url: str = Field()
    releases_url: str = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    trees_url: str = Field()
    url: str = Field()
    clone_url: str = Field()
    default_branch: str = Field()
    forks: int = Field()
    forks_count: int = Field()
    git_url: str = Field()
    has_downloads: bool = Field()
    has_issues: bool = Field()
    has_projects: bool = Field()
    has_wiki: bool = Field()
    has_pages: bool = Field()
    has_discussions: bool = Field()
    homepage: Union[str, None] = Field()
    language: Union[str, None] = Field()
    master_branch: Missing[str] = Field(default=UNSET)
    archived: bool = Field()
    disabled: bool = Field()
    visibility: Missing[str] = Field(
        default=UNSET,
        description="The repository visibility: public, private, or internal.",
    )
    mirror_url: Union[str, None] = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    permissions: Missing[PullRequestPropBasePropRepoPropPermissions] = Field(
        default=UNSET
    )
    temp_clone_token: Missing[Union[str, None]] = Field(default=UNSET)
    allow_merge_commit: Missing[bool] = Field(default=UNSET)
    allow_squash_merge: Missing[bool] = Field(default=UNSET)
    allow_rebase_merge: Missing[bool] = Field(default=UNSET)
    license_: Union[None, LicenseSimple] = Field(alias="license")
    pushed_at: datetime = Field()
    size: int = Field()
    ssh_url: str = Field()
    stargazers_count: int = Field()
    svn_url: str = Field()
    topics: Missing[List[str]] = Field(default=UNSET)
    watchers: int = Field()
    watchers_count: int = Field()
    created_at: datetime = Field()
    updated_at: datetime = Field()
    allow_forking: Missing[bool] = Field(default=UNSET)
    web_commit_signoff_required: Missing[bool] = Field(default=UNSET)


class PullRequestPropBasePropRepoPropOwner(GitHubModel):
    """PullRequestPropBasePropRepoPropOwner"""

    avatar_url: str = Field()
    events_url: str = Field()
    followers_url: str = Field()
    following_url: str = Field()
    gists_url: str = Field()
    gravatar_id: Union[str, None] = Field()
    html_url: str = Field()
    id: int = Field()
    node_id: str = Field()
    login: str = Field()
    organizations_url: str = Field()
    received_events_url: str = Field()
    repos_url: str = Field()
    site_admin: bool = Field()
    starred_url: str = Field()
    subscriptions_url: str = Field()
    type: str = Field()
    url: str = Field()


class PullRequestPropBasePropRepoPropPermissions(GitHubModel):
    """PullRequestPropBasePropRepoPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()


class PullRequestPropBasePropUser(GitHubModel):
    """PullRequestPropBasePropUser"""

    avatar_url: str = Field()
    events_url: str = Field()
    followers_url: str = Field()
    following_url: str = Field()
    gists_url: str = Field()
    gravatar_id: Union[str, None] = Field()
    html_url: str = Field()
    id: int = Field()
    node_id: str = Field()
    login: str = Field()
    organizations_url: str = Field()
    received_events_url: str = Field()
    repos_url: str = Field()
    site_admin: bool = Field()
    starred_url: str = Field()
    subscriptions_url: str = Field()
    type: str = Field()
    url: str = Field()


class PullRequestPropLinks(GitHubModel):
    """PullRequestPropLinks"""

    comments: Link = Field(title="Link", description="Hypermedia Link")
    commits: Link = Field(title="Link", description="Hypermedia Link")
    statuses: Link = Field(title="Link", description="Hypermedia Link")
    html: Link = Field(title="Link", description="Hypermedia Link")
    issue: Link = Field(title="Link", description="Hypermedia Link")
    review_comments: Link = Field(title="Link", description="Hypermedia Link")
    review_comment: Link = Field(title="Link", description="Hypermedia Link")
    self_: Link = Field(alias="self", title="Link", description="Hypermedia Link")


class PullRequestMergeResult(GitHubModel):
    """Pull Request Merge Result

    Pull Request Merge Result
    """

    sha: str = Field()
    merged: bool = Field()
    message: str = Field()


class PullRequestReviewRequest(GitHubModel):
    """Pull Request Review Request

    Pull Request Review Request
    """

    users: List[SimpleUser] = Field()
    teams: List[Team] = Field()


class PullRequestReview(GitHubModel):
    """Pull Request Review

    Pull Request Reviews are reviews on pull requests.
    """

    id: int = Field(description="Unique identifier of the review")
    node_id: str = Field()
    user: Union[None, SimpleUser] = Field()
    body: str = Field(description="The text of the review.")
    state: str = Field()
    html_url: str = Field()
    pull_request_url: str = Field()
    links: PullRequestReviewPropLinks = Field(alias="_links")
    submitted_at: Missing[datetime] = Field(default=UNSET)
    commit_id: Union[str, None] = Field(
        description="A commit SHA for the review. If the commit object was garbage collected or forcibly deleted, then it no longer exists in Git and this value will be `null`."
    )
    body_html: Missing[str] = Field(default=UNSET)
    body_text: Missing[str] = Field(default=UNSET)
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="author_association",
        description="How the author is associated with the repository.",
    )


class PullRequestReviewPropLinks(GitHubModel):
    """PullRequestReviewPropLinks"""

    html: PullRequestReviewPropLinksPropHtml = Field()
    pull_request: PullRequestReviewPropLinksPropPullRequest = Field()


class PullRequestReviewPropLinksPropHtml(GitHubModel):
    """PullRequestReviewPropLinksPropHtml"""

    href: str = Field()


class PullRequestReviewPropLinksPropPullRequest(GitHubModel):
    """PullRequestReviewPropLinksPropPullRequest"""

    href: str = Field()


class ReviewComment(GitHubModel):
    """Legacy Review Comment

    Legacy Review Comment
    """

    url: str = Field()
    pull_request_review_id: Union[int, None] = Field()
    id: int = Field()
    node_id: str = Field()
    diff_hunk: str = Field()
    path: str = Field()
    position: Union[int, None] = Field()
    original_position: int = Field()
    commit_id: str = Field()
    original_commit_id: str = Field()
    in_reply_to_id: Missing[int] = Field(default=UNSET)
    user: Union[None, SimpleUser] = Field()
    body: str = Field()
    created_at: datetime = Field()
    updated_at: datetime = Field()
    html_url: str = Field()
    pull_request_url: str = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="author_association",
        description="How the author is associated with the repository.",
    )
    links: ReviewCommentPropLinks = Field(alias="_links")
    body_text: Missing[str] = Field(default=UNSET)
    body_html: Missing[str] = Field(default=UNSET)
    reactions: Missing[ReactionRollup] = Field(default=UNSET, title="Reaction Rollup")
    side: Missing[Literal["LEFT", "RIGHT"]] = Field(
        default=UNSET,
        description="The side of the first line of the range for a multi-line comment.",
    )
    start_side: Missing[Union[None, Literal["LEFT", "RIGHT"]]] = Field(
        default=UNSET,
        description="The side of the first line of the range for a multi-line comment.",
    )
    line: Missing[int] = Field(
        default=UNSET,
        description="The line of the blob to which the comment applies. The last line of the range for a multi-line comment",
    )
    original_line: Missing[int] = Field(
        default=UNSET,
        description="The original line of the blob to which the comment applies. The last line of the range for a multi-line comment",
    )
    start_line: Missing[Union[int, None]] = Field(
        default=UNSET,
        description="The first line of the range for a multi-line comment.",
    )
    original_start_line: Missing[Union[int, None]] = Field(
        default=UNSET,
        description="The original first line of the range for a multi-line comment.",
    )


class ReviewCommentPropLinks(GitHubModel):
    """ReviewCommentPropLinks"""

    self_: Link = Field(alias="self", title="Link", description="Hypermedia Link")
    html: Link = Field(title="Link", description="Hypermedia Link")
    pull_request: Link = Field(title="Link", description="Hypermedia Link")


class ReleaseAsset(GitHubModel):
    """Release Asset

    Data related to a release.
    """

    url: str = Field()
    browser_download_url: str = Field()
    id: int = Field()
    node_id: str = Field()
    name: str = Field(description="The file name of the asset.")
    label: Union[str, None] = Field()
    state: Literal["uploaded", "open"] = Field(
        description="State of the release asset."
    )
    content_type: str = Field()
    size: int = Field()
    download_count: int = Field()
    created_at: datetime = Field()
    updated_at: datetime = Field()
    uploader: Union[None, SimpleUser] = Field()


class Release(GitHubModel):
    """Release

    A release.
    """

    url: str = Field()
    html_url: str = Field()
    assets_url: str = Field()
    upload_url: str = Field()
    tarball_url: Union[str, None] = Field()
    zipball_url: Union[str, None] = Field()
    id: int = Field()
    node_id: str = Field()
    tag_name: str = Field(description="The name of the tag.")
    target_commitish: str = Field(
        description="Specifies the commitish value that determines where the Git tag is created from."
    )
    name: Union[str, None] = Field()
    body: Missing[Union[str, None]] = Field(default=UNSET)
    draft: bool = Field(
        description="true to create a draft (unpublished) release, false to create a published one."
    )
    prerelease: bool = Field(
        description="Whether to identify the release as a prerelease or a full release."
    )
    created_at: datetime = Field()
    published_at: Union[datetime, None] = Field()
    author: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    assets: List[ReleaseAsset] = Field()
    body_html: Missing[Union[str, None]] = Field(default=UNSET)
    body_text: Missing[Union[str, None]] = Field(default=UNSET)
    mentions_count: Missing[int] = Field(default=UNSET)
    discussion_url: Missing[str] = Field(
        default=UNSET, description="The URL of the release discussion."
    )
    reactions: Missing[ReactionRollup] = Field(default=UNSET, title="Reaction Rollup")


class ReleaseNotesContent(GitHubModel):
    """Generated Release Notes Content

    Generated name and body describing a release
    """

    name: str = Field(description="The generated name of the release")
    body: str = Field(
        description="The generated body describing the contents of the release supporting markdown formatting"
    )


class RepositoryRuleRulesetInfo(GitHubModel):
    """repository ruleset data for rule

    User-defined metadata to store domain-specific information limited to 8 keys
    with scalar values.
    """

    ruleset_source_type: Missing[Literal["Repository", "Organization"]] = Field(
        default=UNSET,
        description="The type of source for the ruleset that includes this rule.",
    )
    ruleset_source: Missing[str] = Field(
        default=UNSET,
        description="The name of the source of the ruleset that includes this rule.",
    )
    ruleset_id: Missing[int] = Field(
        default=UNSET, description="The ID of the ruleset that includes this rule."
    )


class RepositoryRuleDetailedOneof0(GitHubModel):
    """RepositoryRuleDetailedOneof0"""

    type: Literal["creation"] = Field()
    ruleset_source_type: Missing[Literal["Repository", "Organization"]] = Field(
        default=UNSET,
        description="The type of source for the ruleset that includes this rule.",
    )
    ruleset_source: Missing[str] = Field(
        default=UNSET,
        description="The name of the source of the ruleset that includes this rule.",
    )
    ruleset_id: Missing[int] = Field(
        default=UNSET, description="The ID of the ruleset that includes this rule."
    )


class RepositoryRuleDetailedOneof1(GitHubModel):
    """RepositoryRuleDetailedOneof1"""

    type: Literal["update"] = Field()
    parameters: Missing[RepositoryRuleUpdatePropParameters] = Field(default=UNSET)
    ruleset_source_type: Missing[Literal["Repository", "Organization"]] = Field(
        default=UNSET,
        description="The type of source for the ruleset that includes this rule.",
    )
    ruleset_source: Missing[str] = Field(
        default=UNSET,
        description="The name of the source of the ruleset that includes this rule.",
    )
    ruleset_id: Missing[int] = Field(
        default=UNSET, description="The ID of the ruleset that includes this rule."
    )


class RepositoryRuleDetailedOneof2(GitHubModel):
    """RepositoryRuleDetailedOneof2"""

    type: Literal["deletion"] = Field()
    ruleset_source_type: Missing[Literal["Repository", "Organization"]] = Field(
        default=UNSET,
        description="The type of source for the ruleset that includes this rule.",
    )
    ruleset_source: Missing[str] = Field(
        default=UNSET,
        description="The name of the source of the ruleset that includes this rule.",
    )
    ruleset_id: Missing[int] = Field(
        default=UNSET, description="The ID of the ruleset that includes this rule."
    )


class RepositoryRuleDetailedOneof3(GitHubModel):
    """RepositoryRuleDetailedOneof3"""

    type: Literal["required_linear_history"] = Field()
    ruleset_source_type: Missing[Literal["Repository", "Organization"]] = Field(
        default=UNSET,
        description="The type of source for the ruleset that includes this rule.",
    )
    ruleset_source: Missing[str] = Field(
        default=UNSET,
        description="The name of the source of the ruleset that includes this rule.",
    )
    ruleset_id: Missing[int] = Field(
        default=UNSET, description="The ID of the ruleset that includes this rule."
    )


class RepositoryRuleDetailedOneof4(GitHubModel):
    """RepositoryRuleDetailedOneof4"""

    type: Literal["required_deployments"] = Field()
    parameters: Missing[RepositoryRuleRequiredDeploymentsPropParameters] = Field(
        default=UNSET
    )
    ruleset_source_type: Missing[Literal["Repository", "Organization"]] = Field(
        default=UNSET,
        description="The type of source for the ruleset that includes this rule.",
    )
    ruleset_source: Missing[str] = Field(
        default=UNSET,
        description="The name of the source of the ruleset that includes this rule.",
    )
    ruleset_id: Missing[int] = Field(
        default=UNSET, description="The ID of the ruleset that includes this rule."
    )


class RepositoryRuleDetailedOneof5(GitHubModel):
    """RepositoryRuleDetailedOneof5"""

    type: Literal["required_signatures"] = Field()
    ruleset_source_type: Missing[Literal["Repository", "Organization"]] = Field(
        default=UNSET,
        description="The type of source for the ruleset that includes this rule.",
    )
    ruleset_source: Missing[str] = Field(
        default=UNSET,
        description="The name of the source of the ruleset that includes this rule.",
    )
    ruleset_id: Missing[int] = Field(
        default=UNSET, description="The ID of the ruleset that includes this rule."
    )


class RepositoryRuleDetailedOneof6(GitHubModel):
    """RepositoryRuleDetailedOneof6"""

    type: Literal["pull_request"] = Field()
    parameters: Missing[RepositoryRulePullRequestPropParameters] = Field(default=UNSET)
    ruleset_source_type: Missing[Literal["Repository", "Organization"]] = Field(
        default=UNSET,
        description="The type of source for the ruleset that includes this rule.",
    )
    ruleset_source: Missing[str] = Field(
        default=UNSET,
        description="The name of the source of the ruleset that includes this rule.",
    )
    ruleset_id: Missing[int] = Field(
        default=UNSET, description="The ID of the ruleset that includes this rule."
    )


class RepositoryRuleDetailedOneof7(GitHubModel):
    """RepositoryRuleDetailedOneof7"""

    type: Literal["required_status_checks"] = Field()
    parameters: Missing[RepositoryRuleRequiredStatusChecksPropParameters] = Field(
        default=UNSET
    )
    ruleset_source_type: Missing[Literal["Repository", "Organization"]] = Field(
        default=UNSET,
        description="The type of source for the ruleset that includes this rule.",
    )
    ruleset_source: Missing[str] = Field(
        default=UNSET,
        description="The name of the source of the ruleset that includes this rule.",
    )
    ruleset_id: Missing[int] = Field(
        default=UNSET, description="The ID of the ruleset that includes this rule."
    )


class RepositoryRuleDetailedOneof8(GitHubModel):
    """RepositoryRuleDetailedOneof8"""

    type: Literal["non_fast_forward"] = Field()
    ruleset_source_type: Missing[Literal["Repository", "Organization"]] = Field(
        default=UNSET,
        description="The type of source for the ruleset that includes this rule.",
    )
    ruleset_source: Missing[str] = Field(
        default=UNSET,
        description="The name of the source of the ruleset that includes this rule.",
    )
    ruleset_id: Missing[int] = Field(
        default=UNSET, description="The ID of the ruleset that includes this rule."
    )


class RepositoryRuleDetailedOneof9(GitHubModel):
    """RepositoryRuleDetailedOneof9"""

    type: Literal["commit_message_pattern"] = Field()
    parameters: Missing[RepositoryRuleCommitMessagePatternPropParameters] = Field(
        default=UNSET
    )
    ruleset_source_type: Missing[Literal["Repository", "Organization"]] = Field(
        default=UNSET,
        description="The type of source for the ruleset that includes this rule.",
    )
    ruleset_source: Missing[str] = Field(
        default=UNSET,
        description="The name of the source of the ruleset that includes this rule.",
    )
    ruleset_id: Missing[int] = Field(
        default=UNSET, description="The ID of the ruleset that includes this rule."
    )


class RepositoryRuleDetailedOneof10(GitHubModel):
    """RepositoryRuleDetailedOneof10"""

    type: Literal["commit_author_email_pattern"] = Field()
    parameters: Missing[RepositoryRuleCommitAuthorEmailPatternPropParameters] = Field(
        default=UNSET
    )
    ruleset_source_type: Missing[Literal["Repository", "Organization"]] = Field(
        default=UNSET,
        description="The type of source for the ruleset that includes this rule.",
    )
    ruleset_source: Missing[str] = Field(
        default=UNSET,
        description="The name of the source of the ruleset that includes this rule.",
    )
    ruleset_id: Missing[int] = Field(
        default=UNSET, description="The ID of the ruleset that includes this rule."
    )


class RepositoryRuleDetailedOneof11(GitHubModel):
    """RepositoryRuleDetailedOneof11"""

    type: Literal["committer_email_pattern"] = Field()
    parameters: Missing[RepositoryRuleCommitterEmailPatternPropParameters] = Field(
        default=UNSET
    )
    ruleset_source_type: Missing[Literal["Repository", "Organization"]] = Field(
        default=UNSET,
        description="The type of source for the ruleset that includes this rule.",
    )
    ruleset_source: Missing[str] = Field(
        default=UNSET,
        description="The name of the source of the ruleset that includes this rule.",
    )
    ruleset_id: Missing[int] = Field(
        default=UNSET, description="The ID of the ruleset that includes this rule."
    )


class RepositoryRuleDetailedOneof12(GitHubModel):
    """RepositoryRuleDetailedOneof12"""

    type: Literal["branch_name_pattern"] = Field()
    parameters: Missing[RepositoryRuleBranchNamePatternPropParameters] = Field(
        default=UNSET
    )
    ruleset_source_type: Missing[Literal["Repository", "Organization"]] = Field(
        default=UNSET,
        description="The type of source for the ruleset that includes this rule.",
    )
    ruleset_source: Missing[str] = Field(
        default=UNSET,
        description="The name of the source of the ruleset that includes this rule.",
    )
    ruleset_id: Missing[int] = Field(
        default=UNSET, description="The ID of the ruleset that includes this rule."
    )


class RepositoryRuleDetailedOneof13(GitHubModel):
    """RepositoryRuleDetailedOneof13"""

    type: Literal["tag_name_pattern"] = Field()
    parameters: Missing[RepositoryRuleTagNamePatternPropParameters] = Field(
        default=UNSET
    )
    ruleset_source_type: Missing[Literal["Repository", "Organization"]] = Field(
        default=UNSET,
        description="The type of source for the ruleset that includes this rule.",
    )
    ruleset_source: Missing[str] = Field(
        default=UNSET,
        description="The name of the source of the ruleset that includes this rule.",
    )
    ruleset_id: Missing[int] = Field(
        default=UNSET, description="The ID of the ruleset that includes this rule."
    )


class RepositoryRuleDetailedOneof14(GitHubModel):
    """RepositoryRuleDetailedOneof14"""

    type: Literal["workflows"] = Field()
    parameters: Missing[RepositoryRuleWorkflowsPropParameters] = Field(default=UNSET)
    ruleset_source_type: Missing[Literal["Repository", "Organization"]] = Field(
        default=UNSET,
        description="The type of source for the ruleset that includes this rule.",
    )
    ruleset_source: Missing[str] = Field(
        default=UNSET,
        description="The name of the source of the ruleset that includes this rule.",
    )
    ruleset_id: Missing[int] = Field(
        default=UNSET, description="The ID of the ruleset that includes this rule."
    )


class SecretScanningAlert(GitHubModel):
    """SecretScanningAlert"""

    number: Missing[int] = Field(
        default=UNSET, description="The security alert number."
    )
    created_at: Missing[datetime] = Field(
        default=UNSET,
        description="The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )
    updated_at: Missing[Union[None, datetime]] = Field(default=UNSET)
    url: Missing[str] = Field(
        default=UNSET, description="The REST API URL of the alert resource."
    )
    html_url: Missing[str] = Field(
        default=UNSET, description="The GitHub URL of the alert resource."
    )
    locations_url: Missing[str] = Field(
        default=UNSET,
        description="The REST API URL of the code locations for this alert.",
    )
    state: Missing[Literal["open", "resolved"]] = Field(
        default=UNSET,
        description="Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`.",
    )
    resolution: Missing[
        Union[None, Literal["false_positive", "wont_fix", "revoked", "used_in_tests"]]
    ] = Field(
        default=UNSET,
        description="**Required when the `state` is `resolved`.** The reason for resolving the alert.",
    )
    resolved_at: Missing[Union[datetime, None]] = Field(
        default=UNSET,
        description="The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )
    resolved_by: Missing[Union[None, SimpleUser]] = Field(default=UNSET)
    resolution_comment: Missing[Union[str, None]] = Field(
        default=UNSET, description="An optional comment to resolve an alert."
    )
    secret_type: Missing[str] = Field(
        default=UNSET, description="The type of secret that secret scanning detected."
    )
    secret_type_display_name: Missing[str] = Field(
        default=UNSET,
        description='User-friendly name for the detected secret, matching the `secret_type`.\nFor a list of built-in patterns, see "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)."',
    )
    secret: Missing[str] = Field(
        default=UNSET, description="The secret that was detected."
    )
    push_protection_bypassed: Missing[Union[bool, None]] = Field(
        default=UNSET,
        description="Whether push protection was bypassed for the detected secret.",
    )
    push_protection_bypassed_by: Missing[Union[None, SimpleUser]] = Field(default=UNSET)
    push_protection_bypassed_at: Missing[Union[datetime, None]] = Field(
        default=UNSET,
        description="The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )
    validity: Missing[Literal["active", "inactive", "unknown"]] = Field(
        default=UNSET, description="The token status as of the latest validity check."
    )


class SecretScanningLocationCommit(GitHubModel):
    """SecretScanningLocationCommit

    Represents a 'commit' secret scanning location type. This location type shows
    that a secret was detected inside a commit to a repository.
    """

    path: str = Field(description="The file path in the repository")
    start_line: float = Field(
        description="Line number at which the secret starts in the file"
    )
    end_line: float = Field(
        description="Line number at which the secret ends in the file"
    )
    start_column: float = Field(
        description="The column at which the secret starts within the start line when the file is interpreted as 8BIT ASCII"
    )
    end_column: float = Field(
        description="The column at which the secret ends within the end line when the file is interpreted as 8BIT ASCII"
    )
    blob_sha: str = Field(description="SHA-1 hash ID of the associated blob")
    blob_url: str = Field(description="The API URL to get the associated blob resource")
    commit_sha: str = Field(description="SHA-1 hash ID of the associated commit")
    commit_url: str = Field(
        description="The API URL to get the associated commit resource"
    )


class SecretScanningLocationIssueTitle(GitHubModel):
    """SecretScanningLocationIssueTitle

    Represents an 'issue_title' secret scanning location type. This location type
    shows that a secret was detected in the title of an issue.
    """

    issue_title_url: str = Field(
        description="The API URL to get the issue where the secret was detected."
    )


class SecretScanningLocationIssueBody(GitHubModel):
    """SecretScanningLocationIssueBody

    Represents an 'issue_body' secret scanning location type. This location type
    shows that a secret was detected in the body of an issue.
    """

    issue_body_url: str = Field(
        description="The API URL to get the issue where the secret was detected."
    )


class SecretScanningLocationIssueComment(GitHubModel):
    """SecretScanningLocationIssueComment

    Represents an 'issue_comment' secret scanning location type. This location type
    shows that a secret was detected in a comment on an issue.
    """

    issue_comment_url: str = Field(
        description="The API URL to get the issue comment where the secret was detected."
    )


class SecretScanningLocationDiscussionTitle(GitHubModel):
    """SecretScanningLocationDiscussionTitle

    Represents a 'discussion_title' secret scanning location type. This location
    type shows that a secret was detected in the title of a discussion.
    """

    discussion_title_url: str = Field(
        description="The URL to the discussion where the secret was detected."
    )


class SecretScanningLocationDiscussionBody(GitHubModel):
    """SecretScanningLocationDiscussionBody

    Represents a 'discussion_body' secret scanning location type. This location type
    shows that a secret was detected in the body of a discussion.
    """

    discussion_body_url: str = Field(
        description="The URL to the discussion where the secret was detected."
    )


class SecretScanningLocationDiscussionComment(GitHubModel):
    """SecretScanningLocationDiscussionComment

    Represents a 'discussion_comment' secret scanning location type. This location
    type shows that a secret was detected in a comment on a discussion.
    """

    discussion_comment_url: str = Field(
        description="The API URL to get the discussion comment where the secret was detected."
    )


class SecretScanningLocationPullRequestTitle(GitHubModel):
    """SecretScanningLocationPullRequestTitle

    Represents a 'pull_request_title' secret scanning location type. This location
    type shows that a secret was detected in the title of a pull request.
    """

    pull_request_title_url: str = Field(
        description="The API URL to get the pull request where the secret was detected."
    )


class SecretScanningLocationPullRequestBody(GitHubModel):
    """SecretScanningLocationPullRequestBody

    Represents a 'pull_request_body' secret scanning location type. This location
    type shows that a secret was detected in the body of a pull request.
    """

    pull_request_body_url: str = Field(
        description="The API URL to get the pull request where the secret was detected."
    )


class SecretScanningLocationPullRequestComment(GitHubModel):
    """SecretScanningLocationPullRequestComment

    Represents a 'pull_request_comment' secret scanning location type. This location
    type shows that a secret was detected in a comment on a pull request.
    """

    pull_request_comment_url: str = Field(
        description="The API URL to get the pull request comment where the secret was detected."
    )


class SecretScanningLocationPullRequestReview(GitHubModel):
    """SecretScanningLocationPullRequestReview

    Represents a 'pull_request_review' secret scanning location type. This location
    type shows that a secret was detected in a review on a pull request.
    """

    pull_request_review_url: str = Field(
        description="The API URL to get the pull request review where the secret was detected."
    )


class SecretScanningLocationPullRequestReviewComment(GitHubModel):
    """SecretScanningLocationPullRequestReviewComment

    Represents a 'pull_request_review_comment' secret scanning location type. This
    location type shows that a secret was detected in a review comment on a pull
    request.
    """

    pull_request_review_comment_url: str = Field(
        description="The API URL to get the pull request review comment where the secret was detected."
    )


class SecretScanningLocation(GitHubModel):
    """SecretScanningLocation"""

    type: Literal[
        "commit",
        "issue_title",
        "issue_body",
        "issue_comment",
        "discussion_title",
        "discussion_body",
        "discussion_comment",
        "pull_request_title",
        "pull_request_body",
        "pull_request_comment",
        "pull_request_review",
        "pull_request_review_comment",
    ] = Field(
        description="The location type. Because secrets may be found in different types of resources (ie. code, comments, issues, pull requests, discussions), this field identifies the type of resource where the secret was found."
    )
    details: Union[
        SecretScanningLocationCommit,
        SecretScanningLocationIssueTitle,
        SecretScanningLocationIssueBody,
        SecretScanningLocationIssueComment,
        SecretScanningLocationDiscussionTitle,
        SecretScanningLocationDiscussionBody,
        SecretScanningLocationDiscussionComment,
        SecretScanningLocationPullRequestTitle,
        SecretScanningLocationPullRequestBody,
        SecretScanningLocationPullRequestComment,
        SecretScanningLocationPullRequestReview,
        SecretScanningLocationPullRequestReviewComment,
    ] = Field()


class RepositoryAdvisoryCreate(GitHubModel):
    """RepositoryAdvisoryCreate"""

    summary: Annotated[str, Field(max_length=1024)] = Field(
        description="A short summary of the advisory."
    )
    description: Annotated[str, Field(max_length=65535)] = Field(
        description="A detailed description of what the advisory impacts."
    )
    cve_id: Missing[Union[str, None]] = Field(
        default=UNSET, description="The Common Vulnerabilities and Exposures (CVE) ID."
    )
    vulnerabilities: List[RepositoryAdvisoryCreatePropVulnerabilitiesItems] = Field(
        description="A product affected by the vulnerability detailed in a repository security advisory."
    )
    cwe_ids: Missing[Union[List[str], None]] = Field(
        default=UNSET, description="A list of Common Weakness Enumeration (CWE) IDs."
    )
    credits_: Missing[
        Union[List[RepositoryAdvisoryCreatePropCreditsItems], None]
    ] = Field(
        default=UNSET,
        alias="credits",
        description="A list of users receiving credit for their participation in the security advisory.",
    )
    severity: Missing[
        Union[None, Literal["critical", "high", "medium", "low"]]
    ] = Field(
        default=UNSET,
        description="The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.",
    )
    cvss_vector_string: Missing[Union[str, None]] = Field(
        default=UNSET,
        description="The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`.",
    )
    start_private_fork: Missing[bool] = Field(
        default=UNSET,
        description="Whether to create a temporary private fork of the repository to collaborate on a fix.",
    )


class RepositoryAdvisoryCreatePropVulnerabilitiesItems(GitHubModel):
    """RepositoryAdvisoryCreatePropVulnerabilitiesItems"""

    package: RepositoryAdvisoryCreatePropVulnerabilitiesItemsPropPackage = Field(
        description="The name of the package affected by the vulnerability."
    )
    vulnerable_version_range: Missing[Union[str, None]] = Field(
        default=UNSET,
        description="The range of the package versions affected by the vulnerability.",
    )
    patched_versions: Missing[Union[str, None]] = Field(
        default=UNSET,
        description="The package version(s) that resolve the vulnerability.",
    )
    vulnerable_functions: Missing[Union[List[str], None]] = Field(
        default=UNSET, description="The functions in the package that are affected."
    )


class RepositoryAdvisoryCreatePropVulnerabilitiesItemsPropPackage(GitHubModel):
    """RepositoryAdvisoryCreatePropVulnerabilitiesItemsPropPackage

    The name of the package affected by the vulnerability.
    """

    ecosystem: Literal[
        "rubygems",
        "npm",
        "pip",
        "maven",
        "nuget",
        "composer",
        "go",
        "rust",
        "erlang",
        "actions",
        "pub",
        "other",
        "swift",
    ] = Field(description="The package's language or package management ecosystem.")
    name: Missing[Union[str, None]] = Field(
        default=UNSET, description="The unique package name within its ecosystem."
    )


class RepositoryAdvisoryCreatePropCreditsItems(GitHubModel):
    """RepositoryAdvisoryCreatePropCreditsItems"""

    login: str = Field(description="The username of the user credited.")
    type: Literal[
        "analyst",
        "finder",
        "reporter",
        "coordinator",
        "remediation_developer",
        "remediation_reviewer",
        "remediation_verifier",
        "tool",
        "sponsor",
        "other",
    ] = Field(description="The type of credit the user is receiving.")


class PrivateVulnerabilityReportCreate(GitHubModel):
    """PrivateVulnerabilityReportCreate"""

    summary: Annotated[str, Field(max_length=1024)] = Field(
        description="A short summary of the advisory."
    )
    description: Annotated[str, Field(max_length=65535)] = Field(
        description="A detailed description of what the advisory impacts."
    )
    vulnerabilities: Missing[
        Union[List[PrivateVulnerabilityReportCreatePropVulnerabilitiesItems], None]
    ] = Field(
        default=UNSET,
        description="An array of products affected by the vulnerability detailed in a repository security advisory.",
    )
    cwe_ids: Missing[Union[List[str], None]] = Field(
        default=UNSET, description="A list of Common Weakness Enumeration (CWE) IDs."
    )
    severity: Missing[
        Union[None, Literal["critical", "high", "medium", "low"]]
    ] = Field(
        default=UNSET,
        description="The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.",
    )
    cvss_vector_string: Missing[Union[str, None]] = Field(
        default=UNSET,
        description="The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`.",
    )
    start_private_fork: Missing[bool] = Field(
        default=UNSET,
        description="Whether to create a temporary private fork of the repository to collaborate on a fix.",
    )


class PrivateVulnerabilityReportCreatePropVulnerabilitiesItems(GitHubModel):
    """PrivateVulnerabilityReportCreatePropVulnerabilitiesItems"""

    package: PrivateVulnerabilityReportCreatePropVulnerabilitiesItemsPropPackage = (
        Field(description="The name of the package affected by the vulnerability.")
    )
    vulnerable_version_range: Missing[Union[str, None]] = Field(
        default=UNSET,
        description="The range of the package versions affected by the vulnerability.",
    )
    patched_versions: Missing[Union[str, None]] = Field(
        default=UNSET,
        description="The package version(s) that resolve the vulnerability.",
    )
    vulnerable_functions: Missing[Union[List[str], None]] = Field(
        default=UNSET, description="The functions in the package that are affected."
    )


class PrivateVulnerabilityReportCreatePropVulnerabilitiesItemsPropPackage(GitHubModel):
    """PrivateVulnerabilityReportCreatePropVulnerabilitiesItemsPropPackage

    The name of the package affected by the vulnerability.
    """

    ecosystem: Literal[
        "rubygems",
        "npm",
        "pip",
        "maven",
        "nuget",
        "composer",
        "go",
        "rust",
        "erlang",
        "actions",
        "pub",
        "other",
        "swift",
    ] = Field(description="The package's language or package management ecosystem.")
    name: Missing[Union[str, None]] = Field(
        default=UNSET, description="The unique package name within its ecosystem."
    )


class RepositoryAdvisoryUpdate(GitHubModel):
    """RepositoryAdvisoryUpdate"""

    summary: Missing[Annotated[str, Field(max_length=1024)]] = Field(
        default=UNSET, description="A short summary of the advisory."
    )
    description: Missing[Annotated[str, Field(max_length=65535)]] = Field(
        default=UNSET,
        description="A detailed description of what the advisory impacts.",
    )
    cve_id: Missing[Union[str, None]] = Field(
        default=UNSET, description="The Common Vulnerabilities and Exposures (CVE) ID."
    )
    vulnerabilities: Missing[
        List[RepositoryAdvisoryUpdatePropVulnerabilitiesItems]
    ] = Field(
        default=UNSET,
        description="A product affected by the vulnerability detailed in a repository security advisory.",
    )
    cwe_ids: Missing[Union[List[str], None]] = Field(
        default=UNSET, description="A list of Common Weakness Enumeration (CWE) IDs."
    )
    credits_: Missing[
        Union[List[RepositoryAdvisoryUpdatePropCreditsItems], None]
    ] = Field(
        default=UNSET,
        alias="credits",
        description="A list of users receiving credit for their participation in the security advisory.",
    )
    severity: Missing[
        Union[None, Literal["critical", "high", "medium", "low"]]
    ] = Field(
        default=UNSET,
        description="The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.",
    )
    cvss_vector_string: Missing[Union[str, None]] = Field(
        default=UNSET,
        description="The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`.",
    )
    state: Missing[Literal["published", "closed", "draft"]] = Field(
        default=UNSET, description="The state of the advisory."
    )
    collaborating_users: Missing[Union[List[str], None]] = Field(
        default=UNSET,
        description="A list of usernames who have been granted write access to the advisory.",
    )
    collaborating_teams: Missing[Union[List[str], None]] = Field(
        default=UNSET,
        description="A list of team slugs which have been granted write access to the advisory.",
    )


class RepositoryAdvisoryUpdatePropVulnerabilitiesItems(GitHubModel):
    """RepositoryAdvisoryUpdatePropVulnerabilitiesItems"""

    package: RepositoryAdvisoryUpdatePropVulnerabilitiesItemsPropPackage = Field(
        description="The name of the package affected by the vulnerability."
    )
    vulnerable_version_range: Missing[Union[str, None]] = Field(
        default=UNSET,
        description="The range of the package versions affected by the vulnerability.",
    )
    patched_versions: Missing[Union[str, None]] = Field(
        default=UNSET,
        description="The package version(s) that resolve the vulnerability.",
    )
    vulnerable_functions: Missing[Union[List[str], None]] = Field(
        default=UNSET, description="The functions in the package that are affected."
    )


class RepositoryAdvisoryUpdatePropVulnerabilitiesItemsPropPackage(GitHubModel):
    """RepositoryAdvisoryUpdatePropVulnerabilitiesItemsPropPackage

    The name of the package affected by the vulnerability.
    """

    ecosystem: Literal[
        "rubygems",
        "npm",
        "pip",
        "maven",
        "nuget",
        "composer",
        "go",
        "rust",
        "erlang",
        "actions",
        "pub",
        "other",
        "swift",
    ] = Field(description="The package's language or package management ecosystem.")
    name: Missing[Union[str, None]] = Field(
        default=UNSET, description="The unique package name within its ecosystem."
    )


class RepositoryAdvisoryUpdatePropCreditsItems(GitHubModel):
    """RepositoryAdvisoryUpdatePropCreditsItems"""

    login: str = Field(description="The username of the user credited.")
    type: Literal[
        "analyst",
        "finder",
        "reporter",
        "coordinator",
        "remediation_developer",
        "remediation_reviewer",
        "remediation_verifier",
        "tool",
        "sponsor",
        "other",
    ] = Field(description="The type of credit the user is receiving.")


class Stargazer(GitHubModel):
    """Stargazer

    Stargazer
    """

    starred_at: datetime = Field()
    user: Union[None, SimpleUser] = Field()


class CommitActivity(GitHubModel):
    """Commit Activity

    Commit Activity
    """

    days: List[int] = Field()
    total: int = Field()
    week: int = Field()


class ContributorActivity(GitHubModel):
    """Contributor Activity

    Contributor Activity
    """

    author: Union[None, SimpleUser] = Field()
    total: int = Field()
    weeks: List[ContributorActivityPropWeeksItems] = Field()


class ContributorActivityPropWeeksItems(GitHubModel):
    """ContributorActivityPropWeeksItems"""

    w: Missing[int] = Field(default=UNSET)
    a: Missing[int] = Field(default=UNSET)
    d: Missing[int] = Field(default=UNSET)
    c: Missing[int] = Field(default=UNSET)


class ParticipationStats(GitHubModel):
    """Participation Stats"""

    all_: List[int] = Field(alias="all")
    owner: List[int] = Field()


class RepositorySubscription(GitHubModel):
    """Repository Invitation

    Repository invitations let you manage who you collaborate with.
    """

    subscribed: bool = Field(
        description="Determines if notifications should be received from this repository."
    )
    ignored: bool = Field(
        description="Determines if all notifications should be blocked from this repository."
    )
    reason: Union[str, None] = Field()
    created_at: datetime = Field()
    url: str = Field()
    repository_url: str = Field()


class Tag(GitHubModel):
    """Tag

    Tag
    """

    name: str = Field()
    commit: TagPropCommit = Field()
    zipball_url: str = Field()
    tarball_url: str = Field()
    node_id: str = Field()


class TagPropCommit(GitHubModel):
    """TagPropCommit"""

    sha: str = Field()
    url: str = Field()


class TagProtection(GitHubModel):
    """Tag protection

    Tag protection
    """

    id: Missing[int] = Field(default=UNSET)
    created_at: Missing[str] = Field(default=UNSET)
    updated_at: Missing[str] = Field(default=UNSET)
    enabled: Missing[bool] = Field(default=UNSET)
    pattern: str = Field()


class Topic(GitHubModel):
    """Topic

    A topic aggregates entities that are related to a subject.
    """

    names: List[str] = Field()


class Traffic(GitHubModel):
    """Traffic"""

    timestamp: datetime = Field()
    uniques: int = Field()
    count: int = Field()


class CloneTraffic(GitHubModel):
    """Clone Traffic

    Clone Traffic
    """

    count: int = Field()
    uniques: int = Field()
    clones: List[Traffic] = Field()


class ContentTraffic(GitHubModel):
    """Content Traffic

    Content Traffic
    """

    path: str = Field()
    title: str = Field()
    count: int = Field()
    uniques: int = Field()


class ReferrerTraffic(GitHubModel):
    """Referrer Traffic

    Referrer Traffic
    """

    referrer: str = Field()
    count: int = Field()
    uniques: int = Field()


class ViewTraffic(GitHubModel):
    """View Traffic

    View Traffic
    """

    count: int = Field()
    uniques: int = Field()
    views: List[Traffic] = Field()


class SearchResultTextMatchesItems(GitHubModel):
    """SearchResultTextMatchesItems"""

    object_url: Missing[str] = Field(default=UNSET)
    object_type: Missing[Union[str, None]] = Field(default=UNSET)
    property_: Missing[str] = Field(default=UNSET, alias="property")
    fragment: Missing[str] = Field(default=UNSET)
    matches: Missing[List[SearchResultTextMatchesItemsPropMatchesItems]] = Field(
        default=UNSET
    )


class SearchResultTextMatchesItemsPropMatchesItems(GitHubModel):
    """SearchResultTextMatchesItemsPropMatchesItems"""

    text: Missing[str] = Field(default=UNSET)
    indices: Missing[List[int]] = Field(default=UNSET)


class CodeSearchResultItem(GitHubModel):
    """Code Search Result Item

    Code Search Result Item
    """

    name: str = Field()
    path: str = Field()
    sha: str = Field()
    url: str = Field()
    git_url: str = Field()
    html_url: str = Field()
    repository: MinimalRepository = Field(
        title="Minimal Repository", description="Minimal Repository"
    )
    score: float = Field()
    file_size: Missing[int] = Field(default=UNSET)
    language: Missing[Union[str, None]] = Field(default=UNSET)
    last_modified_at: Missing[datetime] = Field(default=UNSET)
    line_numbers: Missing[List[str]] = Field(default=UNSET)
    text_matches: Missing[List[SearchResultTextMatchesItems]] = Field(
        default=UNSET, title="Search Result Text Matches"
    )


class CommitSearchResultItem(GitHubModel):
    """Commit Search Result Item

    Commit Search Result Item
    """

    url: str = Field()
    sha: str = Field()
    html_url: str = Field()
    comments_url: str = Field()
    commit: CommitSearchResultItemPropCommit = Field()
    author: Union[None, SimpleUser] = Field()
    committer: Union[None, GitUser] = Field()
    parents: List[CommitSearchResultItemPropParentsItems] = Field()
    repository: MinimalRepository = Field(
        title="Minimal Repository", description="Minimal Repository"
    )
    score: float = Field()
    node_id: str = Field()
    text_matches: Missing[List[SearchResultTextMatchesItems]] = Field(
        default=UNSET, title="Search Result Text Matches"
    )


class CommitSearchResultItemPropCommit(GitHubModel):
    """CommitSearchResultItemPropCommit"""

    author: CommitSearchResultItemPropCommitPropAuthor = Field()
    committer: Union[None, GitUser] = Field()
    comment_count: int = Field()
    message: str = Field()
    tree: CommitSearchResultItemPropCommitPropTree = Field()
    url: str = Field()
    verification: Missing[Verification] = Field(default=UNSET, title="Verification")


class CommitSearchResultItemPropCommitPropAuthor(GitHubModel):
    """CommitSearchResultItemPropCommitPropAuthor"""

    name: str = Field()
    email: str = Field()
    date: datetime = Field()


class CommitSearchResultItemPropCommitPropTree(GitHubModel):
    """CommitSearchResultItemPropCommitPropTree"""

    sha: str = Field()
    url: str = Field()


class CommitSearchResultItemPropParentsItems(GitHubModel):
    """CommitSearchResultItemPropParentsItems"""

    url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    sha: Missing[str] = Field(default=UNSET)


class IssueSearchResultItem(GitHubModel):
    """Issue Search Result Item

    Issue Search Result Item
    """

    url: str = Field()
    repository_url: str = Field()
    labels_url: str = Field()
    comments_url: str = Field()
    events_url: str = Field()
    html_url: str = Field()
    id: int = Field()
    node_id: str = Field()
    number: int = Field()
    title: str = Field()
    locked: bool = Field()
    active_lock_reason: Missing[Union[str, None]] = Field(default=UNSET)
    assignees: Missing[Union[List[SimpleUser], None]] = Field(default=UNSET)
    user: Union[None, SimpleUser] = Field()
    labels: List[IssueSearchResultItemPropLabelsItems] = Field()
    state: str = Field()
    state_reason: Missing[Union[str, None]] = Field(default=UNSET)
    assignee: Union[None, SimpleUser] = Field()
    milestone: Union[None, Milestone] = Field()
    comments: int = Field()
    created_at: datetime = Field()
    updated_at: datetime = Field()
    closed_at: Union[datetime, None] = Field()
    text_matches: Missing[List[SearchResultTextMatchesItems]] = Field(
        default=UNSET, title="Search Result Text Matches"
    )
    pull_request: Missing[IssueSearchResultItemPropPullRequest] = Field(default=UNSET)
    body: Missing[str] = Field(default=UNSET)
    score: float = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="author_association",
        description="How the author is associated with the repository.",
    )
    draft: Missing[bool] = Field(default=UNSET)
    repository: Missing[Repository] = Field(
        default=UNSET, title="Repository", description="A repository on GitHub."
    )
    body_html: Missing[str] = Field(default=UNSET)
    body_text: Missing[str] = Field(default=UNSET)
    timeline_url: Missing[str] = Field(default=UNSET)
    performed_via_github_app: Missing[Union[None, Integration]] = Field(default=UNSET)
    reactions: Missing[ReactionRollup] = Field(default=UNSET, title="Reaction Rollup")


class IssueSearchResultItemPropLabelsItems(GitHubModel):
    """IssueSearchResultItemPropLabelsItems"""

    id: Missing[int] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    color: Missing[str] = Field(default=UNSET)
    default: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(default=UNSET)


class IssueSearchResultItemPropPullRequest(GitHubModel):
    """IssueSearchResultItemPropPullRequest"""

    merged_at: Missing[Union[datetime, None]] = Field(default=UNSET)
    diff_url: Union[str, None] = Field()
    html_url: Union[str, None] = Field()
    patch_url: Union[str, None] = Field()
    url: Union[str, None] = Field()


class LabelSearchResultItem(GitHubModel):
    """Label Search Result Item

    Label Search Result Item
    """

    id: int = Field()
    node_id: str = Field()
    url: str = Field()
    name: str = Field()
    color: str = Field()
    default: bool = Field()
    description: Union[str, None] = Field()
    score: float = Field()
    text_matches: Missing[List[SearchResultTextMatchesItems]] = Field(
        default=UNSET, title="Search Result Text Matches"
    )


class RepoSearchResultItem(GitHubModel):
    """Repo Search Result Item

    Repo Search Result Item
    """

    id: int = Field()
    node_id: str = Field()
    name: str = Field()
    full_name: str = Field()
    owner: Union[None, SimpleUser] = Field()
    private: bool = Field()
    html_url: str = Field()
    description: Union[str, None] = Field()
    fork: bool = Field()
    url: str = Field()
    created_at: datetime = Field()
    updated_at: datetime = Field()
    pushed_at: datetime = Field()
    homepage: Union[str, None] = Field()
    size: int = Field()
    stargazers_count: int = Field()
    watchers_count: int = Field()
    language: Union[str, None] = Field()
    forks_count: int = Field()
    open_issues_count: int = Field()
    master_branch: Missing[str] = Field(default=UNSET)
    default_branch: str = Field()
    score: float = Field()
    forks_url: str = Field()
    keys_url: str = Field()
    collaborators_url: str = Field()
    teams_url: str = Field()
    hooks_url: str = Field()
    issue_events_url: str = Field()
    events_url: str = Field()
    assignees_url: str = Field()
    branches_url: str = Field()
    tags_url: str = Field()
    blobs_url: str = Field()
    git_tags_url: str = Field()
    git_refs_url: str = Field()
    trees_url: str = Field()
    statuses_url: str = Field()
    languages_url: str = Field()
    stargazers_url: str = Field()
    contributors_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    commits_url: str = Field()
    git_commits_url: str = Field()
    comments_url: str = Field()
    issue_comment_url: str = Field()
    contents_url: str = Field()
    compare_url: str = Field()
    merges_url: str = Field()
    archive_url: str = Field()
    downloads_url: str = Field()
    issues_url: str = Field()
    pulls_url: str = Field()
    milestones_url: str = Field()
    notifications_url: str = Field()
    labels_url: str = Field()
    releases_url: str = Field()
    deployments_url: str = Field()
    git_url: str = Field()
    ssh_url: str = Field()
    clone_url: str = Field()
    svn_url: str = Field()
    forks: int = Field()
    open_issues: int = Field()
    watchers: int = Field()
    topics: Missing[List[str]] = Field(default=UNSET)
    mirror_url: Union[str, None] = Field()
    has_issues: bool = Field()
    has_projects: bool = Field()
    has_pages: bool = Field()
    has_wiki: bool = Field()
    has_downloads: bool = Field()
    has_discussions: Missing[bool] = Field(default=UNSET)
    archived: bool = Field()
    disabled: bool = Field(
        description="Returns whether or not this repository disabled."
    )
    visibility: Missing[str] = Field(
        default=UNSET,
        description="The repository visibility: public, private, or internal.",
    )
    license_: Union[None, LicenseSimple] = Field(alias="license")
    permissions: Missing[RepoSearchResultItemPropPermissions] = Field(default=UNSET)
    text_matches: Missing[List[SearchResultTextMatchesItems]] = Field(
        default=UNSET, title="Search Result Text Matches"
    )
    temp_clone_token: Missing[Union[str, None]] = Field(default=UNSET)
    allow_merge_commit: Missing[bool] = Field(default=UNSET)
    allow_squash_merge: Missing[bool] = Field(default=UNSET)
    allow_rebase_merge: Missing[bool] = Field(default=UNSET)
    allow_auto_merge: Missing[bool] = Field(default=UNSET)
    delete_branch_on_merge: Missing[bool] = Field(default=UNSET)
    allow_forking: Missing[bool] = Field(default=UNSET)
    is_template: Missing[bool] = Field(default=UNSET)
    web_commit_signoff_required: Missing[bool] = Field(default=UNSET)


class RepoSearchResultItemPropPermissions(GitHubModel):
    """RepoSearchResultItemPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()


class TopicSearchResultItem(GitHubModel):
    """Topic Search Result Item

    Topic Search Result Item
    """

    name: str = Field()
    display_name: Union[str, None] = Field()
    short_description: Union[str, None] = Field()
    description: Union[str, None] = Field()
    created_by: Union[str, None] = Field()
    released: Union[str, None] = Field()
    created_at: datetime = Field()
    updated_at: datetime = Field()
    featured: bool = Field()
    curated: bool = Field()
    score: float = Field()
    repository_count: Missing[Union[int, None]] = Field(default=UNSET)
    logo_url: Missing[Union[str, None]] = Field(default=UNSET)
    text_matches: Missing[List[SearchResultTextMatchesItems]] = Field(
        default=UNSET, title="Search Result Text Matches"
    )
    related: Missing[Union[List[TopicSearchResultItemPropRelatedItems], None]] = Field(
        default=UNSET
    )
    aliases: Missing[Union[List[TopicSearchResultItemPropAliasesItems], None]] = Field(
        default=UNSET
    )


class TopicSearchResultItemPropRelatedItems(GitHubModel):
    """TopicSearchResultItemPropRelatedItems"""

    topic_relation: Missing[
        TopicSearchResultItemPropRelatedItemsPropTopicRelation
    ] = Field(default=UNSET)


class TopicSearchResultItemPropRelatedItemsPropTopicRelation(GitHubModel):
    """TopicSearchResultItemPropRelatedItemsPropTopicRelation"""

    id: Missing[int] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    topic_id: Missing[int] = Field(default=UNSET)
    relation_type: Missing[str] = Field(default=UNSET)


class TopicSearchResultItemPropAliasesItems(GitHubModel):
    """TopicSearchResultItemPropAliasesItems"""

    topic_relation: Missing[
        TopicSearchResultItemPropAliasesItemsPropTopicRelation
    ] = Field(default=UNSET)


class TopicSearchResultItemPropAliasesItemsPropTopicRelation(GitHubModel):
    """TopicSearchResultItemPropAliasesItemsPropTopicRelation"""

    id: Missing[int] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    topic_id: Missing[int] = Field(default=UNSET)
    relation_type: Missing[str] = Field(default=UNSET)


class UserSearchResultItem(GitHubModel):
    """User Search Result Item

    User Search Result Item
    """

    login: str = Field()
    id: int = Field()
    node_id: str = Field()
    avatar_url: str = Field()
    gravatar_id: Union[str, None] = Field()
    url: str = Field()
    html_url: str = Field()
    followers_url: str = Field()
    subscriptions_url: str = Field()
    organizations_url: str = Field()
    repos_url: str = Field()
    received_events_url: str = Field()
    type: str = Field()
    score: float = Field()
    following_url: str = Field()
    gists_url: str = Field()
    starred_url: str = Field()
    events_url: str = Field()
    public_repos: Missing[int] = Field(default=UNSET)
    public_gists: Missing[int] = Field(default=UNSET)
    followers: Missing[int] = Field(default=UNSET)
    following: Missing[int] = Field(default=UNSET)
    created_at: Missing[datetime] = Field(default=UNSET)
    updated_at: Missing[datetime] = Field(default=UNSET)
    name: Missing[Union[str, None]] = Field(default=UNSET)
    bio: Missing[Union[str, None]] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    location: Missing[Union[str, None]] = Field(default=UNSET)
    site_admin: bool = Field()
    hireable: Missing[Union[bool, None]] = Field(default=UNSET)
    text_matches: Missing[List[SearchResultTextMatchesItems]] = Field(
        default=UNSET, title="Search Result Text Matches"
    )
    blog: Missing[Union[str, None]] = Field(default=UNSET)
    company: Missing[Union[str, None]] = Field(default=UNSET)
    suspended_at: Missing[Union[datetime, None]] = Field(default=UNSET)


class PrivateUser(GitHubModel):
    """Private User

    Private User
    """

    login: str = Field()
    id: int = Field()
    node_id: str = Field()
    avatar_url: str = Field()
    gravatar_id: Union[str, None] = Field()
    url: str = Field()
    html_url: str = Field()
    followers_url: str = Field()
    following_url: str = Field()
    gists_url: str = Field()
    starred_url: str = Field()
    subscriptions_url: str = Field()
    organizations_url: str = Field()
    repos_url: str = Field()
    events_url: str = Field()
    received_events_url: str = Field()
    type: str = Field()
    site_admin: bool = Field()
    name: Union[str, None] = Field()
    company: Union[str, None] = Field()
    blog: Union[str, None] = Field()
    location: Union[str, None] = Field()
    email: Union[str, None] = Field()
    hireable: Union[bool, None] = Field()
    bio: Union[str, None] = Field()
    twitter_username: Missing[Union[str, None]] = Field(default=UNSET)
    public_repos: int = Field()
    public_gists: int = Field()
    followers: int = Field()
    following: int = Field()
    created_at: datetime = Field()
    updated_at: datetime = Field()
    private_gists: int = Field()
    total_private_repos: int = Field()
    owned_private_repos: int = Field()
    disk_usage: int = Field()
    collaborators: int = Field()
    two_factor_authentication: bool = Field()
    plan: Missing[PrivateUserPropPlan] = Field(default=UNSET)
    suspended_at: Missing[Union[datetime, None]] = Field(default=UNSET)
    business_plus: Missing[bool] = Field(default=UNSET)
    ldap_dn: Missing[str] = Field(default=UNSET)


class PrivateUserPropPlan(GitHubModel):
    """PrivateUserPropPlan"""

    collaborators: int = Field()
    name: str = Field()
    space: int = Field()
    private_repos: int = Field()


class CodespacesSecret(GitHubModel):
    """Codespaces Secret

    Secrets for a GitHub Codespace.
    """

    name: str = Field(description="The name of the secret")
    created_at: datetime = Field(
        description="The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ."
    )
    updated_at: datetime = Field(
        description="The date and time at which the secret was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ."
    )
    visibility: Literal["all", "private", "selected"] = Field(
        description="The type of repositories in the organization that the secret is visible to"
    )
    selected_repositories_url: str = Field(
        description="The API URL at which the list of repositories this secret is visible to can be retrieved"
    )


class CodespacesUserPublicKey(GitHubModel):
    """CodespacesUserPublicKey

    The public key used for setting user Codespaces' Secrets.
    """

    key_id: str = Field(description="The identifier for the key.")
    key: str = Field(description="The Base64 encoded public key.")


class CodespaceExportDetails(GitHubModel):
    """Fetches information about an export of a codespace.

    An export of a codespace. Also, latest export details for a codespace can be
    fetched with id = latest
    """

    state: Missing[Union[str, None]] = Field(
        default=UNSET, description="State of the latest export"
    )
    completed_at: Missing[Union[datetime, None]] = Field(
        default=UNSET, description="Completion time of the last export operation"
    )
    branch: Missing[Union[str, None]] = Field(
        default=UNSET, description="Name of the exported branch"
    )
    sha: Missing[Union[str, None]] = Field(
        default=UNSET, description="Git commit SHA of the exported branch"
    )
    id: Missing[str] = Field(default=UNSET, description="Id for the export details")
    export_url: Missing[str] = Field(
        default=UNSET, description="Url for fetching export details"
    )
    html_url: Missing[Union[str, None]] = Field(
        default=UNSET, description="Web url for the exported branch"
    )


class CodespaceWithFullRepository(GitHubModel):
    """Codespace

    A codespace.
    """

    id: int = Field()
    name: str = Field(description="Automatically generated name of this codespace.")
    display_name: Missing[Union[str, None]] = Field(
        default=UNSET, description="Display name for this codespace."
    )
    environment_id: Union[str, None] = Field(
        description="UUID identifying this codespace's environment."
    )
    owner: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    billable_owner: SimpleUser = Field(
        title="Simple User", description="A GitHub user."
    )
    repository: FullRepository = Field(
        title="Full Repository", description="Full Repository"
    )
    machine: Union[None, CodespaceMachine] = Field()
    devcontainer_path: Missing[Union[str, None]] = Field(
        default=UNSET,
        description="Path to devcontainer.json from repo root used to create Codespace.",
    )
    prebuild: Union[bool, None] = Field(
        description="Whether the codespace was created from a prebuild."
    )
    created_at: datetime = Field()
    updated_at: datetime = Field()
    last_used_at: datetime = Field(
        description="Last known time this codespace was started."
    )
    state: Literal[
        "Unknown",
        "Created",
        "Queued",
        "Provisioning",
        "Available",
        "Awaiting",
        "Unavailable",
        "Deleted",
        "Moved",
        "Shutdown",
        "Archived",
        "Starting",
        "ShuttingDown",
        "Failed",
        "Exporting",
        "Updating",
        "Rebuilding",
    ] = Field(description="State of this codespace.")
    url: str = Field(description="API URL for this codespace.")
    git_status: CodespaceWithFullRepositoryPropGitStatus = Field(
        description="Details about the codespace's git repository."
    )
    location: Literal["EastUs", "SouthEastAsia", "WestEurope", "WestUs2"] = Field(
        description="The initally assigned location of a new codespace."
    )
    idle_timeout_minutes: Union[int, None] = Field(
        description="The number of minutes of inactivity after which this codespace will be automatically stopped."
    )
    web_url: str = Field(description="URL to access this codespace on the web.")
    machines_url: str = Field(
        description="API URL to access available alternate machine types for this codespace."
    )
    start_url: str = Field(description="API URL to start this codespace.")
    stop_url: str = Field(description="API URL to stop this codespace.")
    publish_url: Missing[Union[str, None]] = Field(
        default=UNSET,
        description="API URL to publish this codespace to a new repository.",
    )
    pulls_url: Union[str, None] = Field(
        description="API URL for the Pull Request associated with this codespace, if any."
    )
    recent_folders: List[str] = Field()
    runtime_constraints: Missing[
        CodespaceWithFullRepositoryPropRuntimeConstraints
    ] = Field(default=UNSET)
    pending_operation: Missing[Union[bool, None]] = Field(
        default=UNSET,
        description="Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable. The only thing that you can do with a codespace in this state is delete it.",
    )
    pending_operation_disabled_reason: Missing[Union[str, None]] = Field(
        default=UNSET,
        description="Text to show user when codespace is disabled by a pending operation",
    )
    idle_timeout_notice: Missing[Union[str, None]] = Field(
        default=UNSET,
        description="Text to show user when codespace idle timeout minutes has been overriden by an organization policy",
    )
    retention_period_minutes: Missing[Union[int, None]] = Field(
        default=UNSET,
        description="Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).",
    )
    retention_expires_at: Missing[Union[datetime, None]] = Field(
        default=UNSET,
        description='When a codespace will be auto-deleted based on the "retention_period_minutes" and "last_used_at"',
    )


class CodespaceWithFullRepositoryPropGitStatus(GitHubModel):
    """CodespaceWithFullRepositoryPropGitStatus

    Details about the codespace's git repository.
    """

    ahead: Missing[int] = Field(
        default=UNSET,
        description="The number of commits the local repository is ahead of the remote.",
    )
    behind: Missing[int] = Field(
        default=UNSET,
        description="The number of commits the local repository is behind the remote.",
    )
    has_unpushed_changes: Missing[bool] = Field(
        default=UNSET, description="Whether the local repository has unpushed changes."
    )
    has_uncommitted_changes: Missing[bool] = Field(
        default=UNSET,
        description="Whether the local repository has uncommitted changes.",
    )
    ref: Missing[str] = Field(
        default=UNSET,
        description="The current branch (or SHA if in detached HEAD state) of the local repository.",
    )


class CodespaceWithFullRepositoryPropRuntimeConstraints(GitHubModel):
    """CodespaceWithFullRepositoryPropRuntimeConstraints"""

    allowed_port_privacy_settings: Missing[Union[List[str], None]] = Field(
        default=UNSET,
        description="The privacy settings a user can select from when forwarding a port.",
    )


class Email(GitHubModel):
    """Email

    Email
    """

    email: str = Field()
    primary: bool = Field()
    verified: bool = Field()
    visibility: Union[str, None] = Field()


class GpgKey(GitHubModel):
    """GPG Key

    A unique encryption key
    """

    id: int = Field()
    name: Missing[Union[str, None]] = Field(default=UNSET)
    primary_key_id: Union[int, None] = Field()
    key_id: str = Field()
    public_key: str = Field()
    emails: List[GpgKeyPropEmailsItems] = Field()
    subkeys: List[GpgKeyPropSubkeysItems] = Field()
    can_sign: bool = Field()
    can_encrypt_comms: bool = Field()
    can_encrypt_storage: bool = Field()
    can_certify: bool = Field()
    created_at: datetime = Field()
    expires_at: Union[datetime, None] = Field()
    revoked: bool = Field()
    raw_key: Union[str, None] = Field()


class GpgKeyPropEmailsItems(GitHubModel):
    """GpgKeyPropEmailsItems"""

    email: Missing[str] = Field(default=UNSET)
    verified: Missing[bool] = Field(default=UNSET)


class GpgKeyPropSubkeysItems(GitHubModel):
    """GpgKeyPropSubkeysItems"""

    id: Missing[int] = Field(default=UNSET)
    primary_key_id: Missing[int] = Field(default=UNSET)
    key_id: Missing[str] = Field(default=UNSET)
    public_key: Missing[str] = Field(default=UNSET)
    emails: Missing[List[GpgKeyPropSubkeysItemsPropEmailsItems]] = Field(default=UNSET)
    subkeys: Missing[List[Any]] = Field(default=UNSET)
    can_sign: Missing[bool] = Field(default=UNSET)
    can_encrypt_comms: Missing[bool] = Field(default=UNSET)
    can_encrypt_storage: Missing[bool] = Field(default=UNSET)
    can_certify: Missing[bool] = Field(default=UNSET)
    created_at: Missing[str] = Field(default=UNSET)
    expires_at: Missing[Union[str, None]] = Field(default=UNSET)
    raw_key: Missing[Union[str, None]] = Field(default=UNSET)
    revoked: Missing[bool] = Field(default=UNSET)


class GpgKeyPropSubkeysItemsPropEmailsItems(GitHubModel):
    """GpgKeyPropSubkeysItemsPropEmailsItems"""

    email: Missing[str] = Field(default=UNSET)
    verified: Missing[bool] = Field(default=UNSET)


class Key(GitHubModel):
    """Key

    Key
    """

    key: str = Field()
    id: int = Field()
    url: str = Field()
    title: str = Field()
    created_at: datetime = Field()
    verified: bool = Field()
    read_only: bool = Field()


class MarketplaceAccount(GitHubModel):
    """Marketplace Account"""

    url: str = Field()
    id: int = Field()
    type: str = Field()
    node_id: Missing[str] = Field(default=UNSET)
    login: str = Field()
    email: Missing[Union[str, None]] = Field(default=UNSET)
    organization_billing_email: Missing[Union[str, None]] = Field(default=UNSET)


class UserMarketplacePurchase(GitHubModel):
    """User Marketplace Purchase

    User Marketplace Purchase
    """

    billing_cycle: str = Field()
    next_billing_date: Union[datetime, None] = Field()
    unit_count: Union[int, None] = Field()
    on_free_trial: bool = Field()
    free_trial_ends_on: Union[datetime, None] = Field()
    updated_at: Union[datetime, None] = Field()
    account: MarketplaceAccount = Field(title="Marketplace Account")
    plan: MarketplaceListingPlan = Field(
        title="Marketplace Listing Plan", description="Marketplace Listing Plan"
    )


class SocialAccount(GitHubModel):
    """Social account

    Social media account
    """

    provider: str = Field()
    url: str = Field()


class SshSigningKey(GitHubModel):
    """SSH Signing Key

    A public SSH key used to sign Git commits
    """

    key: str = Field()
    id: int = Field()
    title: str = Field()
    created_at: datetime = Field()


class StarredRepository(GitHubModel):
    """Starred Repository

    Starred Repository
    """

    starred_at: datetime = Field()
    repo: Repository = Field(title="Repository", description="A repository on GitHub.")


class Hovercard(GitHubModel):
    """Hovercard

    Hovercard
    """

    contexts: List[HovercardPropContextsItems] = Field()


class HovercardPropContextsItems(GitHubModel):
    """HovercardPropContextsItems"""

    message: str = Field()
    octicon: str = Field()


class KeySimple(GitHubModel):
    """Key Simple

    Key Simple
    """

    id: int = Field()
    key: str = Field()


class EnterpriseWebhooks(GitHubModel):
    """Enterprise

    An enterprise on GitHub. Webhook payloads contain the `enterprise` property when
    the webhook is configured
    on an enterprise account or an organization that's part of an enterprise
    account. For more information,
    see "[About enterprise accounts](https://docs.github.com/admin/overview/about-
    enterprise-accounts)."
    """

    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="A short description of the enterprise."
    )
    html_url: str = Field()
    website_url: Missing[Union[str, None]] = Field(
        default=UNSET, description="The enterprise's website URL."
    )
    id: int = Field(description="Unique identifier of the enterprise")
    node_id: str = Field()
    name: str = Field(description="The name of the enterprise.")
    slug: str = Field(description="The slug url identifier for the enterprise.")
    created_at: Union[datetime, None] = Field()
    updated_at: Union[datetime, None] = Field()
    avatar_url: str = Field()


class SimpleInstallation(GitHubModel):
    """Simple Installation

    The GitHub App installation. Webhook payloads contain the `installation`
    property when the event is configured
    for and sent to a GitHub App. For more information,
    see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-
    github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
    """

    id: int = Field(description="The ID of the installation.")
    node_id: str = Field(description="The global node ID of the installation.")


class OrganizationSimpleWebhooks(GitHubModel):
    """Organization Simple

    A GitHub organization. Webhook payloads contain the `organization` property when
    the webhook is configured for an
    organization, or when the event occurs from activity in a repository owned by an
    organization.
    """

    login: str = Field()
    id: int = Field()
    node_id: str = Field()
    url: str = Field()
    repos_url: str = Field()
    events_url: str = Field()
    hooks_url: str = Field()
    issues_url: str = Field()
    members_url: str = Field()
    public_members_url: str = Field()
    avatar_url: str = Field()
    description: Union[str, None] = Field()


class RepositoryWebhooks(GitHubModel):
    """Repository

    The repository on GitHub where the event occurred. Webhook payloads contain the
    `repository` property
    when the event occurs from activity in a repository.
    """

    id: int = Field(description="Unique identifier of the repository")
    node_id: str = Field()
    name: str = Field(description="The name of the repository.")
    full_name: str = Field()
    license_: Union[None, LicenseSimple] = Field(alias="license")
    organization: Missing[Union[None, SimpleUser]] = Field(default=UNSET)
    forks: int = Field()
    permissions: Missing[RepositoryWebhooksPropPermissions] = Field(default=UNSET)
    owner: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    private: bool = Field(
        default=False, description="Whether the repository is private or public."
    )
    html_url: str = Field()
    description: Union[str, None] = Field()
    fork: bool = Field()
    url: str = Field()
    archive_url: str = Field()
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    deployments_url: str = Field()
    downloads_url: str = Field()
    events_url: str = Field()
    forks_url: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    languages_url: str = Field()
    merges_url: str = Field()
    milestones_url: str = Field()
    notifications_url: str = Field()
    pulls_url: str = Field()
    releases_url: str = Field()
    ssh_url: str = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    trees_url: str = Field()
    clone_url: str = Field()
    mirror_url: Union[str, None] = Field()
    hooks_url: str = Field()
    svn_url: str = Field()
    homepage: Union[str, None] = Field()
    language: Union[str, None] = Field()
    forks_count: int = Field()
    stargazers_count: int = Field()
    watchers_count: int = Field()
    size: int = Field(
        description="The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0."
    )
    default_branch: str = Field(description="The default branch of the repository.")
    open_issues_count: int = Field()
    is_template: Missing[bool] = Field(
        default=UNSET,
        description="Whether this repository acts as a template that can be used to generate new repositories.",
    )
    topics: Missing[List[str]] = Field(default=UNSET)
    custom_properties: Missing[RepositoryWebhooksPropCustomProperties] = Field(
        default=UNSET,
        description="The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.",
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_pages: bool = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_discussions: Missing[bool] = Field(
        default=UNSET, description="Whether discussions are enabled."
    )
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    disabled: bool = Field(
        description="Returns whether or not this repository disabled."
    )
    visibility: Missing[str] = Field(
        default=UNSET,
        description="The repository visibility: public, private, or internal.",
    )
    pushed_at: Union[datetime, None] = Field()
    created_at: Union[datetime, None] = Field()
    updated_at: Union[datetime, None] = Field()
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    template_repository: Missing[
        Union[RepositoryWebhooksPropTemplateRepository, None]
    ] = Field(default=UNSET)
    temp_clone_token: Missing[str] = Field(default=UNSET)
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_auto_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to allow Auto-merge to be used on pull requests.",
    )
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    allow_update_branch: Missing[bool] = Field(
        default=UNSET,
        description="Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.",
    )
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow forking this repo"
    )
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )
    subscribers_count: Missing[int] = Field(default=UNSET)
    network_count: Missing[int] = Field(default=UNSET)
    open_issues: int = Field()
    watchers: int = Field()
    master_branch: Missing[str] = Field(default=UNSET)
    starred_at: Missing[str] = Field(default=UNSET)
    anonymous_access_enabled: Missing[bool] = Field(
        default=UNSET,
        description="Whether anonymous git access is enabled for this repository",
    )


class RepositoryWebhooksPropPermissions(GitHubModel):
    """RepositoryWebhooksPropPermissions"""

    admin: bool = Field()
    pull: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)
    push: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)


class RepositoryWebhooksPropCustomProperties(ExtraGitHubModel):
    """RepositoryWebhooksPropCustomProperties

    The custom properties that were defined for the repository. The keys are the
    custom property names, and the values are the corresponding custom property
    values.
    """


class RepositoryWebhooksPropTemplateRepositoryPropOwner(GitHubModel):
    """RepositoryWebhooksPropTemplateRepositoryPropOwner"""

    login: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    avatar_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)


class RepositoryWebhooksPropTemplateRepositoryPropPermissions(GitHubModel):
    """RepositoryWebhooksPropTemplateRepositoryPropPermissions"""

    admin: Missing[bool] = Field(default=UNSET)
    maintain: Missing[bool] = Field(default=UNSET)
    push: Missing[bool] = Field(default=UNSET)
    triage: Missing[bool] = Field(default=UNSET)
    pull: Missing[bool] = Field(default=UNSET)


class RepositoryWebhooksPropTemplateRepository(GitHubModel):
    """RepositoryWebhooksPropTemplateRepository"""

    id: Missing[int] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    full_name: Missing[str] = Field(default=UNSET)
    owner: Missing[RepositoryWebhooksPropTemplateRepositoryPropOwner] = Field(
        default=UNSET
    )
    private: Missing[bool] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    description: Missing[str] = Field(default=UNSET)
    fork: Missing[bool] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)
    archive_url: Missing[str] = Field(default=UNSET)
    assignees_url: Missing[str] = Field(default=UNSET)
    blobs_url: Missing[str] = Field(default=UNSET)
    branches_url: Missing[str] = Field(default=UNSET)
    collaborators_url: Missing[str] = Field(default=UNSET)
    comments_url: Missing[str] = Field(default=UNSET)
    commits_url: Missing[str] = Field(default=UNSET)
    compare_url: Missing[str] = Field(default=UNSET)
    contents_url: Missing[str] = Field(default=UNSET)
    contributors_url: Missing[str] = Field(default=UNSET)
    deployments_url: Missing[str] = Field(default=UNSET)
    downloads_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    forks_url: Missing[str] = Field(default=UNSET)
    git_commits_url: Missing[str] = Field(default=UNSET)
    git_refs_url: Missing[str] = Field(default=UNSET)
    git_tags_url: Missing[str] = Field(default=UNSET)
    git_url: Missing[str] = Field(default=UNSET)
    issue_comment_url: Missing[str] = Field(default=UNSET)
    issue_events_url: Missing[str] = Field(default=UNSET)
    issues_url: Missing[str] = Field(default=UNSET)
    keys_url: Missing[str] = Field(default=UNSET)
    labels_url: Missing[str] = Field(default=UNSET)
    languages_url: Missing[str] = Field(default=UNSET)
    merges_url: Missing[str] = Field(default=UNSET)
    milestones_url: Missing[str] = Field(default=UNSET)
    notifications_url: Missing[str] = Field(default=UNSET)
    pulls_url: Missing[str] = Field(default=UNSET)
    releases_url: Missing[str] = Field(default=UNSET)
    ssh_url: Missing[str] = Field(default=UNSET)
    stargazers_url: Missing[str] = Field(default=UNSET)
    statuses_url: Missing[str] = Field(default=UNSET)
    subscribers_url: Missing[str] = Field(default=UNSET)
    subscription_url: Missing[str] = Field(default=UNSET)
    tags_url: Missing[str] = Field(default=UNSET)
    teams_url: Missing[str] = Field(default=UNSET)
    trees_url: Missing[str] = Field(default=UNSET)
    clone_url: Missing[str] = Field(default=UNSET)
    mirror_url: Missing[str] = Field(default=UNSET)
    hooks_url: Missing[str] = Field(default=UNSET)
    svn_url: Missing[str] = Field(default=UNSET)
    homepage: Missing[str] = Field(default=UNSET)
    language: Missing[str] = Field(default=UNSET)
    forks_count: Missing[int] = Field(default=UNSET)
    stargazers_count: Missing[int] = Field(default=UNSET)
    watchers_count: Missing[int] = Field(default=UNSET)
    size: Missing[int] = Field(default=UNSET)
    default_branch: Missing[str] = Field(default=UNSET)
    open_issues_count: Missing[int] = Field(default=UNSET)
    is_template: Missing[bool] = Field(default=UNSET)
    topics: Missing[List[str]] = Field(default=UNSET)
    has_issues: Missing[bool] = Field(default=UNSET)
    has_projects: Missing[bool] = Field(default=UNSET)
    has_wiki: Missing[bool] = Field(default=UNSET)
    has_pages: Missing[bool] = Field(default=UNSET)
    has_downloads: Missing[bool] = Field(default=UNSET)
    archived: Missing[bool] = Field(default=UNSET)
    disabled: Missing[bool] = Field(default=UNSET)
    visibility: Missing[str] = Field(default=UNSET)
    pushed_at: Missing[str] = Field(default=UNSET)
    created_at: Missing[str] = Field(default=UNSET)
    updated_at: Missing[str] = Field(default=UNSET)
    permissions: Missing[
        RepositoryWebhooksPropTemplateRepositoryPropPermissions
    ] = Field(default=UNSET)
    allow_rebase_merge: Missing[bool] = Field(default=UNSET)
    temp_clone_token: Missing[str] = Field(default=UNSET)
    allow_squash_merge: Missing[bool] = Field(default=UNSET)
    allow_auto_merge: Missing[bool] = Field(default=UNSET)
    delete_branch_on_merge: Missing[bool] = Field(default=UNSET)
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    use_squash_pr_title_as_default: Missing[bool] = Field(default=UNSET)
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    allow_merge_commit: Missing[bool] = Field(default=UNSET)
    subscribers_count: Missing[int] = Field(default=UNSET)
    network_count: Missing[int] = Field(default=UNSET)


class SimpleUserWebhooks(GitHubModel):
    """Simple User

    The GitHub user that triggered the event. This property is included in every
    webhook payload.
    """

    name: Missing[Union[str, None]] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    login: str = Field()
    id: int = Field()
    node_id: str = Field()
    avatar_url: str = Field()
    gravatar_id: Union[str, None] = Field()
    url: str = Field()
    html_url: str = Field()
    followers_url: str = Field()
    following_url: str = Field()
    gists_url: str = Field()
    starred_url: str = Field()
    subscriptions_url: str = Field()
    organizations_url: str = Field()
    repos_url: str = Field()
    events_url: str = Field()
    received_events_url: str = Field()
    type: str = Field()
    site_admin: bool = Field()
    starred_at: Missing[str] = Field(default=UNSET)


class SimpleCheckSuite(GitHubModel):
    """SimpleCheckSuite

    A suite of checks performed on the code of a given code change
    """

    after: Missing[Union[str, None]] = Field(default=UNSET)
    app: Missing[Integration] = Field(
        default=UNSET,
        title="GitHub app",
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
    )
    before: Missing[Union[str, None]] = Field(default=UNSET)
    conclusion: Missing[
        Union[
            None,
            Literal[
                "success",
                "failure",
                "neutral",
                "cancelled",
                "skipped",
                "timed_out",
                "action_required",
                "stale",
                "startup_failure",
            ],
        ]
    ] = Field(default=UNSET)
    created_at: Missing[datetime] = Field(default=UNSET)
    head_branch: Missing[Union[str, None]] = Field(default=UNSET)
    head_sha: Missing[str] = Field(
        default=UNSET, description="The SHA of the head commit that is being checked."
    )
    id: Missing[int] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    pull_requests: Missing[List[PullRequestMinimal]] = Field(default=UNSET)
    repository: Missing[MinimalRepository] = Field(
        default=UNSET, title="Minimal Repository", description="Minimal Repository"
    )
    status: Missing[
        Literal["queued", "in_progress", "completed", "pending", "waiting"]
    ] = Field(default=UNSET)
    updated_at: Missing[datetime] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class CheckRunWithSimpleCheckSuite(GitHubModel):
    """CheckRun

    A check performed on the code of a given code change
    """

    app: Union[None, Integration] = Field()
    check_suite: SimpleCheckSuite = Field(
        description="A suite of checks performed on the code of a given code change"
    )
    completed_at: Union[datetime, None] = Field()
    conclusion: Union[
        None,
        Literal[
            "waiting",
            "pending",
            "startup_failure",
            "stale",
            "success",
            "failure",
            "neutral",
            "cancelled",
            "skipped",
            "timed_out",
            "action_required",
        ],
    ] = Field()
    deployment: Missing[DeploymentSimple] = Field(
        default=UNSET,
        title="Deployment",
        description="A deployment created as the result of an Actions check run from a workflow that references an environment",
    )
    details_url: str = Field()
    external_id: str = Field()
    head_sha: str = Field(description="The SHA of the commit that is being checked.")
    html_url: str = Field()
    id: int = Field(description="The id of the check.")
    name: str = Field(description="The name of the check.")
    node_id: str = Field()
    output: CheckRunWithSimpleCheckSuitePropOutput = Field()
    pull_requests: List[PullRequestMinimal] = Field()
    started_at: datetime = Field()
    status: Literal["queued", "in_progress", "completed", "pending"] = Field(
        description="The phase of the lifecycle that the check is currently in."
    )
    url: str = Field()


class CheckRunWithSimpleCheckSuitePropOutput(GitHubModel):
    """CheckRunWithSimpleCheckSuitePropOutput"""

    annotations_count: int = Field()
    annotations_url: str = Field()
    summary: Union[str, None] = Field()
    text: Union[str, None] = Field()
    title: Union[str, None] = Field()


class Discussion(GitHubModel):
    """Discussion

    A Discussion in a repository.
    """

    active_lock_reason: Union[str, None] = Field()
    answer_chosen_at: Union[str, None] = Field()
    answer_chosen_by: Union[DiscussionPropAnswerChosenBy, None] = Field(title="User")
    answer_html_url: Union[str, None] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: str = Field()
    category: DiscussionPropCategory = Field()
    comments: int = Field()
    created_at: datetime = Field()
    html_url: str = Field()
    id: int = Field()
    locked: bool = Field()
    node_id: str = Field()
    number: int = Field()
    reactions: Missing[DiscussionPropReactions] = Field(
        default=UNSET, title="Reactions"
    )
    repository_url: str = Field()
    state: Literal["open", "closed", "locked", "converting", "transferring"] = Field(
        description="The current state of the discussion.\n`converting` means that the discussion is being converted from an issue.\n`transferring` means that the discussion is being transferred from another repository."
    )
    state_reason: Union[
        None, Literal["resolved", "outdated", "duplicate", "reopened"]
    ] = Field(description="The reason for the current state")
    timeline_url: Missing[str] = Field(default=UNSET)
    title: str = Field()
    updated_at: datetime = Field()
    user: Union[DiscussionPropUser, None] = Field(title="User")


class DiscussionPropAnswerChosenBy(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class DiscussionPropCategory(GitHubModel):
    """DiscussionPropCategory"""

    created_at: datetime = Field()
    description: str = Field()
    emoji: str = Field()
    id: int = Field()
    is_answerable: bool = Field()
    name: str = Field()
    node_id: Missing[str] = Field(default=UNSET)
    repository_id: int = Field()
    slug: str = Field()
    updated_at: str = Field()


class DiscussionPropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class DiscussionPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class MergeGroup(GitHubModel):
    """Merge Group

    A group of pull requests that the merge queue has grouped together to be merged.
    """

    head_sha: str = Field(description="The SHA of the merge group.")
    head_ref: str = Field(description="The full ref of the merge group.")
    base_sha: str = Field(description="The SHA of the merge group's parent commit.")
    base_ref: str = Field(
        description="The full ref of the branch the merge group will be merged into."
    )
    head_commit: SimpleCommit = Field(title="Simple Commit", description="A commit.")


class PersonalAccessTokenRequest(GitHubModel):
    """Personal Access Token Request

    Details of a Personal Access Token Request.
    """

    id: int = Field(
        description="Unique identifier of the request for access via fine-grained personal access token. Used as the `pat_request_id` parameter in the list and review API calls."
    )
    owner: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    permissions_added: PersonalAccessTokenRequestPropPermissionsAdded = Field(
        description="New requested permissions, categorized by type of permission."
    )
    permissions_upgraded: PersonalAccessTokenRequestPropPermissionsUpgraded = Field(
        description="Requested permissions that elevate access for a previously approved request for access, categorized by type of permission."
    )
    permissions_result: PersonalAccessTokenRequestPropPermissionsResult = Field(
        description="Permissions requested, categorized by type of permission. This field incorporates `permissions_added` and `permissions_upgraded`."
    )
    repository_selection: Literal["none", "all", "subset"] = Field(
        description="Type of repository selection requested."
    )
    repository_count: Union[int, None] = Field(
        description="The number of repositories the token is requesting access to. This field is only populated when `repository_selection` is `subset`."
    )
    repositories: Union[
        List[PersonalAccessTokenRequestPropRepositoriesItems], None
    ] = Field(
        description="An array of repository objects the token is requesting access to. This field is only populated when `repository_selection` is `subset`."
    )
    created_at: str = Field(
        description="Date and time when the request for access was created."
    )
    token_expired: bool = Field(
        description="Whether the associated fine-grained personal access token has expired."
    )
    token_expires_at: Union[str, None] = Field(
        description="Date and time when the associated fine-grained personal access token expires."
    )
    token_last_used_at: Union[str, None] = Field(
        description="Date and time when the associated fine-grained personal access token was last used for authentication."
    )


class PersonalAccessTokenRequestPropPermissionsAdded(GitHubModel):
    """PersonalAccessTokenRequestPropPermissionsAdded

    New requested permissions, categorized by type of permission.
    """

    organization: Missing[
        PersonalAccessTokenRequestPropPermissionsAddedPropOrganization
    ] = Field(default=UNSET)
    repository: Missing[
        PersonalAccessTokenRequestPropPermissionsAddedPropRepository
    ] = Field(default=UNSET)
    other: Missing[PersonalAccessTokenRequestPropPermissionsAddedPropOther] = Field(
        default=UNSET
    )


class PersonalAccessTokenRequestPropPermissionsAddedPropOrganization(ExtraGitHubModel):
    """PersonalAccessTokenRequestPropPermissionsAddedPropOrganization"""


class PersonalAccessTokenRequestPropPermissionsAddedPropRepository(ExtraGitHubModel):
    """PersonalAccessTokenRequestPropPermissionsAddedPropRepository"""


class PersonalAccessTokenRequestPropPermissionsAddedPropOther(ExtraGitHubModel):
    """PersonalAccessTokenRequestPropPermissionsAddedPropOther"""


class PersonalAccessTokenRequestPropPermissionsUpgraded(GitHubModel):
    """PersonalAccessTokenRequestPropPermissionsUpgraded

    Requested permissions that elevate access for a previously approved request for
    access, categorized by type of permission.
    """

    organization: Missing[
        PersonalAccessTokenRequestPropPermissionsUpgradedPropOrganization
    ] = Field(default=UNSET)
    repository: Missing[
        PersonalAccessTokenRequestPropPermissionsUpgradedPropRepository
    ] = Field(default=UNSET)
    other: Missing[PersonalAccessTokenRequestPropPermissionsUpgradedPropOther] = Field(
        default=UNSET
    )


class PersonalAccessTokenRequestPropPermissionsUpgradedPropOrganization(
    ExtraGitHubModel
):
    """PersonalAccessTokenRequestPropPermissionsUpgradedPropOrganization"""


class PersonalAccessTokenRequestPropPermissionsUpgradedPropRepository(ExtraGitHubModel):
    """PersonalAccessTokenRequestPropPermissionsUpgradedPropRepository"""


class PersonalAccessTokenRequestPropPermissionsUpgradedPropOther(ExtraGitHubModel):
    """PersonalAccessTokenRequestPropPermissionsUpgradedPropOther"""


class PersonalAccessTokenRequestPropPermissionsResult(GitHubModel):
    """PersonalAccessTokenRequestPropPermissionsResult

    Permissions requested, categorized by type of permission. This field
    incorporates `permissions_added` and `permissions_upgraded`.
    """

    organization: Missing[
        PersonalAccessTokenRequestPropPermissionsResultPropOrganization
    ] = Field(default=UNSET)
    repository: Missing[
        PersonalAccessTokenRequestPropPermissionsResultPropRepository
    ] = Field(default=UNSET)
    other: Missing[PersonalAccessTokenRequestPropPermissionsResultPropOther] = Field(
        default=UNSET
    )


class PersonalAccessTokenRequestPropPermissionsResultPropOrganization(ExtraGitHubModel):
    """PersonalAccessTokenRequestPropPermissionsResultPropOrganization"""


class PersonalAccessTokenRequestPropPermissionsResultPropRepository(ExtraGitHubModel):
    """PersonalAccessTokenRequestPropPermissionsResultPropRepository"""


class PersonalAccessTokenRequestPropPermissionsResultPropOther(ExtraGitHubModel):
    """PersonalAccessTokenRequestPropPermissionsResultPropOther"""


class PersonalAccessTokenRequestPropRepositoriesItems(GitHubModel):
    """PersonalAccessTokenRequestPropRepositoriesItems"""

    full_name: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    private: bool = Field(description="Whether the repository is private or public.")


class ProjectsV2(GitHubModel):
    """Projects v2 Project

    A projects v2 project
    """

    id: float = Field()
    node_id: str = Field()
    owner: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    creator: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    title: str = Field()
    description: Union[str, None] = Field()
    public: bool = Field()
    closed_at: Union[datetime, None] = Field()
    created_at: datetime = Field()
    updated_at: datetime = Field()
    number: int = Field()
    short_description: Union[str, None] = Field()
    deleted_at: Union[datetime, None] = Field()
    deleted_by: Union[None, SimpleUser] = Field()


class ProjectsV2Item(GitHubModel):
    """Projects v2 Item

    An item belonging to a project
    """

    id: float = Field()
    node_id: Missing[str] = Field(default=UNSET)
    project_node_id: Missing[str] = Field(default=UNSET)
    content_node_id: str = Field()
    content_type: Literal["Issue", "PullRequest", "DraftIssue"] = Field(
        title="Projects v2 Item Content Type",
        description="The type of content tracked in a project item",
    )
    creator: Missing[SimpleUser] = Field(
        default=UNSET, title="Simple User", description="A GitHub user."
    )
    created_at: datetime = Field()
    updated_at: datetime = Field()
    archived_at: Union[datetime, None] = Field()


class SecretScanningAlertWebhook(GitHubModel):
    """SecretScanningAlertWebhook"""

    number: Missing[int] = Field(
        default=UNSET, description="The security alert number."
    )
    created_at: Missing[datetime] = Field(
        default=UNSET,
        description="The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )
    updated_at: Missing[Union[None, datetime]] = Field(default=UNSET)
    url: Missing[str] = Field(
        default=UNSET, description="The REST API URL of the alert resource."
    )
    html_url: Missing[str] = Field(
        default=UNSET, description="The GitHub URL of the alert resource."
    )
    locations_url: Missing[str] = Field(
        default=UNSET,
        description="The REST API URL of the code locations for this alert.",
    )
    resolution: Missing[
        Union[
            None,
            Literal[
                "false_positive",
                "wont_fix",
                "revoked",
                "used_in_tests",
                "pattern_deleted",
                "pattern_edited",
            ],
        ]
    ] = Field(default=UNSET, description="The reason for resolving the alert.")
    resolved_at: Missing[Union[datetime, None]] = Field(
        default=UNSET,
        description="The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )
    resolved_by: Missing[Union[None, SimpleUser]] = Field(default=UNSET)
    resolution_comment: Missing[Union[str, None]] = Field(
        default=UNSET, description="An optional comment to resolve an alert."
    )
    secret_type: Missing[str] = Field(
        default=UNSET, description="The type of secret that secret scanning detected."
    )
    push_protection_bypassed: Missing[Union[bool, None]] = Field(
        default=UNSET,
        description="Whether push protection was bypassed for the detected secret.",
    )
    push_protection_bypassed_by: Missing[Union[None, SimpleUser]] = Field(default=UNSET)
    push_protection_bypassed_at: Missing[Union[datetime, None]] = Field(
        default=UNSET,
        description="The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )


class WebhookBranchProtectionConfigurationDisabled(GitHubModel):
    """branch protection configuration disabled event"""

    action: Literal["disabled"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookBranchProtectionConfigurationEnabled(GitHubModel):
    """branch protection configuration enabled event"""

    action: Literal["enabled"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookBranchProtectionRuleCreated(GitHubModel):
    """branch protection rule created event"""

    action: Literal["created"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    rule: WebhookBranchProtectionRuleCreatedPropRule = Field(
        title="branch protection rule",
        description="The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookBranchProtectionRuleCreatedPropRule(GitHubModel):
    """branch protection rule

    The branch protection rule. Includes a `name` and all the [branch protection
    settings](https://docs.github.com/github/administering-a-repository/defining-
    the-mergeability-of-pull-requests/about-protected-branches#about-branch-
    protection-settings) applied to branches that match the name. Binary settings
    are boolean. Multi-level configurations are one of `off`, `non_admins`, or
    `everyone`. Actor and build lists are arrays of strings.
    """

    admin_enforced: bool = Field()
    allow_deletions_enforcement_level: Literal[
        "off", "non_admins", "everyone"
    ] = Field()
    allow_force_pushes_enforcement_level: Literal[
        "off", "non_admins", "everyone"
    ] = Field()
    authorized_actor_names: List[str] = Field()
    authorized_actors_only: bool = Field()
    authorized_dismissal_actors_only: bool = Field()
    create_protected: Missing[bool] = Field(default=UNSET)
    created_at: datetime = Field()
    dismiss_stale_reviews_on_push: bool = Field()
    id: int = Field()
    ignore_approvals_from_contributors: bool = Field()
    linear_history_requirement_enforcement_level: Literal[
        "off", "non_admins", "everyone"
    ] = Field()
    merge_queue_enforcement_level: Literal["off", "non_admins", "everyone"] = Field()
    name: str = Field()
    pull_request_reviews_enforcement_level: Literal[
        "off", "non_admins", "everyone"
    ] = Field()
    repository_id: int = Field()
    require_code_owner_review: bool = Field()
    require_last_push_approval: Missing[bool] = Field(
        default=UNSET,
        description="Whether the most recent push must be approved by someone other than the person who pushed it",
    )
    required_approving_review_count: int = Field()
    required_conversation_resolution_level: Literal[
        "off", "non_admins", "everyone"
    ] = Field()
    required_deployments_enforcement_level: Literal[
        "off", "non_admins", "everyone"
    ] = Field()
    required_status_checks: List[str] = Field()
    required_status_checks_enforcement_level: Literal[
        "off", "non_admins", "everyone"
    ] = Field()
    signature_requirement_enforcement_level: Literal[
        "off", "non_admins", "everyone"
    ] = Field()
    strict_required_status_checks_policy: bool = Field()
    updated_at: datetime = Field()


class WebhookBranchProtectionRuleDeleted(GitHubModel):
    """branch protection rule deleted event"""

    action: Literal["deleted"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    rule: WebhookBranchProtectionRuleDeletedPropRule = Field(
        title="branch protection rule",
        description="The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookBranchProtectionRuleDeletedPropRule(GitHubModel):
    """branch protection rule

    The branch protection rule. Includes a `name` and all the [branch protection
    settings](https://docs.github.com/github/administering-a-repository/defining-
    the-mergeability-of-pull-requests/about-protected-branches#about-branch-
    protection-settings) applied to branches that match the name. Binary settings
    are boolean. Multi-level configurations are one of `off`, `non_admins`, or
    `everyone`. Actor and build lists are arrays of strings.
    """

    admin_enforced: bool = Field()
    allow_deletions_enforcement_level: Literal[
        "off", "non_admins", "everyone"
    ] = Field()
    allow_force_pushes_enforcement_level: Literal[
        "off", "non_admins", "everyone"
    ] = Field()
    authorized_actor_names: List[str] = Field()
    authorized_actors_only: bool = Field()
    authorized_dismissal_actors_only: bool = Field()
    create_protected: Missing[bool] = Field(default=UNSET)
    created_at: datetime = Field()
    dismiss_stale_reviews_on_push: bool = Field()
    id: int = Field()
    ignore_approvals_from_contributors: bool = Field()
    linear_history_requirement_enforcement_level: Literal[
        "off", "non_admins", "everyone"
    ] = Field()
    merge_queue_enforcement_level: Literal["off", "non_admins", "everyone"] = Field()
    name: str = Field()
    pull_request_reviews_enforcement_level: Literal[
        "off", "non_admins", "everyone"
    ] = Field()
    repository_id: int = Field()
    require_code_owner_review: bool = Field()
    require_last_push_approval: Missing[bool] = Field(
        default=UNSET,
        description="Whether the most recent push must be approved by someone other than the person who pushed it",
    )
    required_approving_review_count: int = Field()
    required_conversation_resolution_level: Literal[
        "off", "non_admins", "everyone"
    ] = Field()
    required_deployments_enforcement_level: Literal[
        "off", "non_admins", "everyone"
    ] = Field()
    required_status_checks: List[str] = Field()
    required_status_checks_enforcement_level: Literal[
        "off", "non_admins", "everyone"
    ] = Field()
    signature_requirement_enforcement_level: Literal[
        "off", "non_admins", "everyone"
    ] = Field()
    strict_required_status_checks_policy: bool = Field()
    updated_at: datetime = Field()


class WebhookBranchProtectionRuleEdited(GitHubModel):
    """branch protection rule edited event"""

    action: Literal["edited"] = Field()
    changes: Missing[WebhookBranchProtectionRuleEditedPropChanges] = Field(
        default=UNSET,
        description="If the action was `edited`, the changes to the rule.",
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    rule: WebhookBranchProtectionRuleEditedPropRule = Field(
        title="branch protection rule",
        description="The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookBranchProtectionRuleEditedPropChanges(GitHubModel):
    """WebhookBranchProtectionRuleEditedPropChanges

    If the action was `edited`, the changes to the rule.
    """

    admin_enforced: Missing[
        WebhookBranchProtectionRuleEditedPropChangesPropAdminEnforced
    ] = Field(default=UNSET)
    authorized_actor_names: Missing[
        WebhookBranchProtectionRuleEditedPropChangesPropAuthorizedActorNames
    ] = Field(default=UNSET)
    authorized_actors_only: Missing[
        WebhookBranchProtectionRuleEditedPropChangesPropAuthorizedActorsOnly
    ] = Field(default=UNSET)
    authorized_dismissal_actors_only: Missing[
        WebhookBranchProtectionRuleEditedPropChangesPropAuthorizedDismissalActorsOnly
    ] = Field(default=UNSET)
    linear_history_requirement_enforcement_level: Missing[
        WebhookBranchProtectionRuleEditedPropChangesPropLinearHistoryRequirementEnforcementLevel
    ] = Field(default=UNSET)
    required_status_checks: Missing[
        WebhookBranchProtectionRuleEditedPropChangesPropRequiredStatusChecks
    ] = Field(default=UNSET)
    required_status_checks_enforcement_level: Missing[
        WebhookBranchProtectionRuleEditedPropChangesPropRequiredStatusChecksEnforcementLevel
    ] = Field(default=UNSET)


class WebhookBranchProtectionRuleEditedPropChangesPropAdminEnforced(GitHubModel):
    """WebhookBranchProtectionRuleEditedPropChangesPropAdminEnforced"""

    from_: Union[bool, None] = Field(alias="from")


class WebhookBranchProtectionRuleEditedPropChangesPropAuthorizedActorNames(GitHubModel):
    """WebhookBranchProtectionRuleEditedPropChangesPropAuthorizedActorNames"""

    from_: List[str] = Field(alias="from")


class WebhookBranchProtectionRuleEditedPropChangesPropAuthorizedActorsOnly(GitHubModel):
    """WebhookBranchProtectionRuleEditedPropChangesPropAuthorizedActorsOnly"""

    from_: Union[bool, None] = Field(alias="from")


class WebhookBranchProtectionRuleEditedPropChangesPropAuthorizedDismissalActorsOnly(
    GitHubModel
):
    """WebhookBranchProtectionRuleEditedPropChangesPropAuthorizedDismissalActorsOnly"""

    from_: Union[bool, None] = Field(alias="from")


class WebhookBranchProtectionRuleEditedPropChangesPropLinearHistoryRequirementEnforcementLevel(
    GitHubModel
):
    """WebhookBranchProtectionRuleEditedPropChangesPropLinearHistoryRequirementEnforcem
    entLevel
    """

    from_: Literal["off", "non_admins", "everyone"] = Field(alias="from")


class WebhookBranchProtectionRuleEditedPropChangesPropRequiredStatusChecks(GitHubModel):
    """WebhookBranchProtectionRuleEditedPropChangesPropRequiredStatusChecks"""

    from_: List[str] = Field(alias="from")


class WebhookBranchProtectionRuleEditedPropChangesPropRequiredStatusChecksEnforcementLevel(
    GitHubModel
):
    """WebhookBranchProtectionRuleEditedPropChangesPropRequiredStatusChecksEnforcementL
    evel
    """

    from_: Literal["off", "non_admins", "everyone"] = Field(alias="from")


class WebhookBranchProtectionRuleEditedPropRule(GitHubModel):
    """branch protection rule

    The branch protection rule. Includes a `name` and all the [branch protection
    settings](https://docs.github.com/github/administering-a-repository/defining-
    the-mergeability-of-pull-requests/about-protected-branches#about-branch-
    protection-settings) applied to branches that match the name. Binary settings
    are boolean. Multi-level configurations are one of `off`, `non_admins`, or
    `everyone`. Actor and build lists are arrays of strings.
    """

    admin_enforced: bool = Field()
    allow_deletions_enforcement_level: Literal[
        "off", "non_admins", "everyone"
    ] = Field()
    allow_force_pushes_enforcement_level: Literal[
        "off", "non_admins", "everyone"
    ] = Field()
    authorized_actor_names: List[str] = Field()
    authorized_actors_only: bool = Field()
    authorized_dismissal_actors_only: bool = Field()
    create_protected: Missing[bool] = Field(default=UNSET)
    created_at: datetime = Field()
    dismiss_stale_reviews_on_push: bool = Field()
    id: int = Field()
    ignore_approvals_from_contributors: bool = Field()
    linear_history_requirement_enforcement_level: Literal[
        "off", "non_admins", "everyone"
    ] = Field()
    merge_queue_enforcement_level: Literal["off", "non_admins", "everyone"] = Field()
    name: str = Field()
    pull_request_reviews_enforcement_level: Literal[
        "off", "non_admins", "everyone"
    ] = Field()
    repository_id: int = Field()
    require_code_owner_review: bool = Field()
    require_last_push_approval: Missing[bool] = Field(
        default=UNSET,
        description="Whether the most recent push must be approved by someone other than the person who pushed it",
    )
    required_approving_review_count: int = Field()
    required_conversation_resolution_level: Literal[
        "off", "non_admins", "everyone"
    ] = Field()
    required_deployments_enforcement_level: Literal[
        "off", "non_admins", "everyone"
    ] = Field()
    required_status_checks: List[str] = Field()
    required_status_checks_enforcement_level: Literal[
        "off", "non_admins", "everyone"
    ] = Field()
    signature_requirement_enforcement_level: Literal[
        "off", "non_admins", "everyone"
    ] = Field()
    strict_required_status_checks_policy: bool = Field()
    updated_at: datetime = Field()


class WebhookCheckRunCompleted(GitHubModel):
    """Check Run Completed Event"""

    action: Missing[Literal["completed"]] = Field(default=UNSET)
    check_run: CheckRunWithSimpleCheckSuite = Field(
        title="CheckRun",
        description="A check performed on the code of a given code change",
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookCheckRunCompletedFormEncoded(GitHubModel):
    """Check Run Completed Event

    The check_run.completed webhook encoded with URL encoding
    """

    payload: str = Field(
        description="A URL-encoded string of the check_run.completed JSON payload. The decoded payload is a JSON object."
    )


class WebhookCheckRunCreated(GitHubModel):
    """Check Run Created Event"""

    action: Missing[Literal["created"]] = Field(default=UNSET)
    check_run: CheckRunWithSimpleCheckSuite = Field(
        title="CheckRun",
        description="A check performed on the code of a given code change",
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookCheckRunCreatedFormEncoded(GitHubModel):
    """Check Run Created Event

    The check_run.created webhook encoded with URL encoding
    """

    payload: str = Field(
        description="A URL-encoded string of the check_run.created JSON payload. The decoded payload is a JSON object."
    )


class WebhookCheckRunRequestedAction(GitHubModel):
    """Check Run Requested Action Event"""

    action: Literal["requested_action"] = Field()
    check_run: CheckRunWithSimpleCheckSuite = Field(
        title="CheckRun",
        description="A check performed on the code of a given code change",
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    requested_action: Missing[
        WebhookCheckRunRequestedActionPropRequestedAction
    ] = Field(default=UNSET, description="The action requested by the user.")
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookCheckRunRequestedActionPropRequestedAction(GitHubModel):
    """WebhookCheckRunRequestedActionPropRequestedAction

    The action requested by the user.
    """

    identifier: Missing[str] = Field(
        default=UNSET,
        description="The integrator reference of the action requested by the user.",
    )


class WebhookCheckRunRequestedActionFormEncoded(GitHubModel):
    """Check Run Requested Action Event

    The check_run.requested_action webhook encoded with URL encoding
    """

    payload: str = Field(
        description="A URL-encoded string of the check_run.requested_action JSON payload. The decoded payload is a JSON object."
    )


class WebhookCheckRunRerequested(GitHubModel):
    """Check Run Re-Requested Event"""

    action: Missing[Literal["rerequested"]] = Field(default=UNSET)
    check_run: CheckRunWithSimpleCheckSuite = Field(
        title="CheckRun",
        description="A check performed on the code of a given code change",
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookCheckRunRerequestedFormEncoded(GitHubModel):
    """Check Run Re-Requested Event

    The check_run.rerequested webhook encoded with URL encoding
    """

    payload: str = Field(
        description="A URL-encoded string of the check_run.rerequested JSON payload. The decoded payload is a JSON object."
    )


class WebhookCheckSuiteCompleted(GitHubModel):
    """check_suite completed event"""

    action: Literal["completed"] = Field()
    check_suite: WebhookCheckSuiteCompletedPropCheckSuite = Field(
        description="The [check_suite](https://docs.github.com/rest/checks/suites#get-a-check-suite)."
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookCheckSuiteCompletedPropCheckSuite(GitHubModel):
    """WebhookCheckSuiteCompletedPropCheckSuite

    The [check_suite](https://docs.github.com/rest/checks/suites#get-a-check-suite).
    """

    after: Union[str, None] = Field()
    app: WebhookCheckSuiteCompletedPropCheckSuitePropApp = Field(
        title="App",
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
    )
    before: Union[str, None] = Field()
    check_runs_url: str = Field()
    conclusion: Union[
        None,
        Literal[
            "success",
            "failure",
            "neutral",
            "cancelled",
            "timed_out",
            "action_required",
            "stale",
            "skipped",
            "startup_failure",
        ],
    ] = Field(
        description="The summary conclusion for all check runs that are part of the check suite. This value will be `null` until the check run has `completed`."
    )
    created_at: datetime = Field()
    head_branch: Union[str, None] = Field(
        description="The head branch name the changes are on."
    )
    head_commit: WebhookCheckSuiteCompletedPropCheckSuitePropHeadCommit = Field(
        title="SimpleCommit"
    )
    head_sha: str = Field(
        description="The SHA of the head commit that is being checked."
    )
    id: int = Field()
    latest_check_runs_count: int = Field()
    node_id: str = Field()
    pull_requests: List[
        WebhookCheckSuiteCompletedPropCheckSuitePropPullRequestsItems
    ] = Field(
        description="An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty."
    )
    rerequestable: Missing[bool] = Field(default=UNSET)
    runs_rerequestable: Missing[bool] = Field(default=UNSET)
    status: Union[
        None, Literal["requested", "in_progress", "completed", "queued", "pending"]
    ] = Field(
        description="The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`."
    )
    updated_at: datetime = Field()
    url: str = Field(description="URL that points to the check suite API resource.")


class WebhookCheckSuiteCompletedPropCheckSuitePropApp(GitHubModel):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None] = Field()
    description: Union[str, None] = Field()
    events: Missing[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "merge_group",
                "pull_request_review_thread",
                "workflow_job",
                "merge_queue_entry",
                "security_and_analysis",
                "projects_v2_item",
                "secret_scanning_alert_location",
            ]
        ]
    ] = Field(default=UNSET, description="The list of events for the GitHub app")
    external_url: Union[str, None] = Field()
    html_url: str = Field()
    id: Union[int, None] = Field(description="Unique identifier of the GitHub app")
    name: str = Field(description="The name of the GitHub app")
    node_id: str = Field()
    owner: Union[
        WebhookCheckSuiteCompletedPropCheckSuitePropAppPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookCheckSuiteCompletedPropCheckSuitePropAppPropPermissions
    ] = Field(default=UNSET, description="The set of permissions for the GitHub app")
    slug: Missing[str] = Field(
        default=UNSET, description="The slug name of the GitHub app"
    )
    updated_at: Union[datetime, None] = Field()


class WebhookCheckSuiteCompletedPropCheckSuitePropAppPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookCheckSuiteCompletedPropCheckSuitePropAppPropPermissions(GitHubModel):
    """WebhookCheckSuiteCompletedPropCheckSuitePropAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    administration: Missing[Literal["read", "write"]] = Field(default=UNSET)
    checks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    content_references: Missing[Literal["read", "write"]] = Field(default=UNSET)
    contents: Missing[Literal["read", "write"]] = Field(default=UNSET)
    deployments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    emails: Missing[Literal["read", "write"]] = Field(default=UNSET)
    environments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    issues: Missing[Literal["read", "write"]] = Field(default=UNSET)
    keys: Missing[Literal["read", "write"]] = Field(default=UNSET)
    members: Missing[Literal["read", "write"]] = Field(default=UNSET)
    metadata: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_administration: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_plan: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_projects: Missing[Literal["read", "write", "admin"]] = Field(
        default=UNSET
    )
    organization_secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_self_hosted_runners: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_user_blocking: Missing[Literal["read", "write"]] = Field(default=UNSET)
    packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pull_requests: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_projects: Missing[Literal["read", "write", "admin"]] = Field(
        default=UNSET
    )
    secret_scanning_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_events: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_scanning_alert: Missing[Literal["read", "write"]] = Field(default=UNSET)
    single_file: Missing[Literal["read", "write"]] = Field(default=UNSET)
    statuses: Missing[Literal["read", "write"]] = Field(default=UNSET)
    team_discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    vulnerability_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    workflows: Missing[Literal["read", "write"]] = Field(default=UNSET)


class WebhookCheckSuiteCompletedPropCheckSuitePropHeadCommit(GitHubModel):
    """SimpleCommit"""

    author: WebhookCheckSuiteCompletedPropCheckSuitePropHeadCommitPropAuthor = Field(
        title="Committer",
        description="Metaproperties for Git author/committer information.",
    )
    committer: WebhookCheckSuiteCompletedPropCheckSuitePropHeadCommitPropCommitter = (
        Field(
            title="Committer",
            description="Metaproperties for Git author/committer information.",
        )
    )
    id: str = Field()
    message: str = Field()
    timestamp: str = Field()
    tree_id: str = Field()


class WebhookCheckSuiteCompletedPropCheckSuitePropHeadCommitPropAuthor(GitHubModel):
    """Committer

    Metaproperties for Git author/committer information.
    """

    date: Missing[datetime] = Field(default=UNSET)
    email: Union[str, None] = Field()
    name: str = Field(description="The git author's name.")
    username: Missing[str] = Field(default=UNSET)


class WebhookCheckSuiteCompletedPropCheckSuitePropHeadCommitPropCommitter(GitHubModel):
    """Committer

    Metaproperties for Git author/committer information.
    """

    date: Missing[datetime] = Field(default=UNSET)
    email: Union[str, None] = Field()
    name: str = Field(description="The git author's name.")
    username: Missing[str] = Field(default=UNSET)


class WebhookCheckSuiteCompletedPropCheckSuitePropPullRequestsItems(GitHubModel):
    """Check Run Pull Request"""

    base: WebhookCheckSuiteCompletedPropCheckSuitePropPullRequestsItemsPropBase = (
        Field()
    )
    head: WebhookCheckSuiteCompletedPropCheckSuitePropPullRequestsItemsPropHead = (
        Field()
    )
    id: int = Field()
    number: int = Field()
    url: str = Field()


class WebhookCheckSuiteCompletedPropCheckSuitePropPullRequestsItemsPropBase(
    GitHubModel
):
    """WebhookCheckSuiteCompletedPropCheckSuitePropPullRequestsItemsPropBase"""

    ref: str = Field()
    repo: WebhookCheckSuiteCompletedPropCheckSuitePropPullRequestsItemsPropBasePropRepo = Field(
        title="Repo Ref"
    )
    sha: str = Field()


class WebhookCheckSuiteCompletedPropCheckSuitePropPullRequestsItemsPropBasePropRepo(
    GitHubModel
):
    """Repo Ref"""

    id: int = Field()
    name: str = Field()
    url: str = Field()


class WebhookCheckSuiteCompletedPropCheckSuitePropPullRequestsItemsPropHead(
    GitHubModel
):
    """WebhookCheckSuiteCompletedPropCheckSuitePropPullRequestsItemsPropHead"""

    ref: str = Field()
    repo: WebhookCheckSuiteCompletedPropCheckSuitePropPullRequestsItemsPropHeadPropRepo = Field(
        title="Repo Ref"
    )
    sha: str = Field()


class WebhookCheckSuiteCompletedPropCheckSuitePropPullRequestsItemsPropHeadPropRepo(
    GitHubModel
):
    """Repo Ref"""

    id: int = Field()
    name: str = Field()
    url: str = Field()


class WebhookCheckSuiteRequested(GitHubModel):
    """check_suite requested event"""

    action: Literal["requested"] = Field()
    check_suite: WebhookCheckSuiteRequestedPropCheckSuite = Field(
        description="The [check_suite](https://docs.github.com/rest/checks/suites#get-a-check-suite)."
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookCheckSuiteRequestedPropCheckSuite(GitHubModel):
    """WebhookCheckSuiteRequestedPropCheckSuite

    The [check_suite](https://docs.github.com/rest/checks/suites#get-a-check-suite).
    """

    after: Union[str, None] = Field()
    app: WebhookCheckSuiteRequestedPropCheckSuitePropApp = Field(
        title="App",
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
    )
    before: Union[str, None] = Field()
    check_runs_url: str = Field()
    conclusion: Union[
        None,
        Literal[
            "success",
            "failure",
            "neutral",
            "cancelled",
            "timed_out",
            "action_required",
            "stale",
            "skipped",
        ],
    ] = Field(
        description="The summary conclusion for all check runs that are part of the check suite. This value will be `null` until the check run has completed."
    )
    created_at: datetime = Field()
    head_branch: Union[str, None] = Field(
        description="The head branch name the changes are on."
    )
    head_commit: WebhookCheckSuiteRequestedPropCheckSuitePropHeadCommit = Field(
        title="SimpleCommit"
    )
    head_sha: str = Field(
        description="The SHA of the head commit that is being checked."
    )
    id: int = Field()
    latest_check_runs_count: int = Field()
    node_id: str = Field()
    pull_requests: List[
        WebhookCheckSuiteRequestedPropCheckSuitePropPullRequestsItems
    ] = Field(
        description="An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty."
    )
    rerequestable: Missing[bool] = Field(default=UNSET)
    runs_rerequestable: Missing[bool] = Field(default=UNSET)
    status: Union[
        None, Literal["requested", "in_progress", "completed", "queued"]
    ] = Field(
        description="The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`."
    )
    updated_at: datetime = Field()
    url: str = Field(description="URL that points to the check suite API resource.")


class WebhookCheckSuiteRequestedPropCheckSuitePropApp(GitHubModel):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None] = Field()
    description: Union[str, None] = Field()
    events: Missing[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "pull_request_review_thread",
                "workflow_job",
                "merge_queue_entry",
                "security_and_analysis",
                "secret_scanning_alert_location",
                "projects_v2_item",
                "merge_group",
                "repository_import",
            ]
        ]
    ] = Field(default=UNSET, description="The list of events for the GitHub app")
    external_url: Union[str, None] = Field()
    html_url: str = Field()
    id: Union[int, None] = Field(description="Unique identifier of the GitHub app")
    name: str = Field(description="The name of the GitHub app")
    node_id: str = Field()
    owner: Union[
        WebhookCheckSuiteRequestedPropCheckSuitePropAppPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookCheckSuiteRequestedPropCheckSuitePropAppPropPermissions
    ] = Field(default=UNSET, description="The set of permissions for the GitHub app")
    slug: Missing[str] = Field(
        default=UNSET, description="The slug name of the GitHub app"
    )
    updated_at: Union[datetime, None] = Field()


class WebhookCheckSuiteRequestedPropCheckSuitePropAppPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookCheckSuiteRequestedPropCheckSuitePropAppPropPermissions(GitHubModel):
    """WebhookCheckSuiteRequestedPropCheckSuitePropAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    administration: Missing[Literal["read", "write"]] = Field(default=UNSET)
    checks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    content_references: Missing[Literal["read", "write"]] = Field(default=UNSET)
    contents: Missing[Literal["read", "write"]] = Field(default=UNSET)
    deployments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    emails: Missing[Literal["read", "write"]] = Field(default=UNSET)
    environments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    issues: Missing[Literal["read", "write"]] = Field(default=UNSET)
    keys: Missing[Literal["read", "write"]] = Field(default=UNSET)
    members: Missing[Literal["read", "write"]] = Field(default=UNSET)
    metadata: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_administration: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_plan: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_projects: Missing[Literal["read", "write", "admin"]] = Field(
        default=UNSET
    )
    organization_secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_self_hosted_runners: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_user_blocking: Missing[Literal["read", "write"]] = Field(default=UNSET)
    packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pull_requests: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_projects: Missing[Literal["read", "write", "admin"]] = Field(
        default=UNSET
    )
    secret_scanning_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_events: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_scanning_alert: Missing[Literal["read", "write"]] = Field(default=UNSET)
    single_file: Missing[Literal["read", "write"]] = Field(default=UNSET)
    statuses: Missing[Literal["read", "write"]] = Field(default=UNSET)
    team_discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    vulnerability_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    workflows: Missing[Literal["read", "write"]] = Field(default=UNSET)


class WebhookCheckSuiteRequestedPropCheckSuitePropHeadCommit(GitHubModel):
    """SimpleCommit"""

    author: WebhookCheckSuiteRequestedPropCheckSuitePropHeadCommitPropAuthor = Field(
        title="Committer",
        description="Metaproperties for Git author/committer information.",
    )
    committer: WebhookCheckSuiteRequestedPropCheckSuitePropHeadCommitPropCommitter = (
        Field(
            title="Committer",
            description="Metaproperties for Git author/committer information.",
        )
    )
    id: str = Field()
    message: str = Field()
    timestamp: str = Field()
    tree_id: str = Field()


class WebhookCheckSuiteRequestedPropCheckSuitePropHeadCommitPropAuthor(GitHubModel):
    """Committer

    Metaproperties for Git author/committer information.
    """

    date: Missing[datetime] = Field(default=UNSET)
    email: Union[str, None] = Field()
    name: str = Field(description="The git author's name.")
    username: Missing[str] = Field(default=UNSET)


class WebhookCheckSuiteRequestedPropCheckSuitePropHeadCommitPropCommitter(GitHubModel):
    """Committer

    Metaproperties for Git author/committer information.
    """

    date: Missing[datetime] = Field(default=UNSET)
    email: Union[str, None] = Field()
    name: str = Field(description="The git author's name.")
    username: Missing[str] = Field(default=UNSET)


class WebhookCheckSuiteRequestedPropCheckSuitePropPullRequestsItems(GitHubModel):
    """Check Run Pull Request"""

    base: WebhookCheckSuiteRequestedPropCheckSuitePropPullRequestsItemsPropBase = (
        Field()
    )
    head: WebhookCheckSuiteRequestedPropCheckSuitePropPullRequestsItemsPropHead = (
        Field()
    )
    id: int = Field()
    number: int = Field()
    url: str = Field()


class WebhookCheckSuiteRequestedPropCheckSuitePropPullRequestsItemsPropBase(
    GitHubModel
):
    """WebhookCheckSuiteRequestedPropCheckSuitePropPullRequestsItemsPropBase"""

    ref: str = Field()
    repo: WebhookCheckSuiteRequestedPropCheckSuitePropPullRequestsItemsPropBasePropRepo = Field(
        title="Repo Ref"
    )
    sha: str = Field()


class WebhookCheckSuiteRequestedPropCheckSuitePropPullRequestsItemsPropBasePropRepo(
    GitHubModel
):
    """Repo Ref"""

    id: int = Field()
    name: str = Field()
    url: str = Field()


class WebhookCheckSuiteRequestedPropCheckSuitePropPullRequestsItemsPropHead(
    GitHubModel
):
    """WebhookCheckSuiteRequestedPropCheckSuitePropPullRequestsItemsPropHead"""

    ref: str = Field()
    repo: WebhookCheckSuiteRequestedPropCheckSuitePropPullRequestsItemsPropHeadPropRepo = Field(
        title="Repo Ref"
    )
    sha: str = Field()


class WebhookCheckSuiteRequestedPropCheckSuitePropPullRequestsItemsPropHeadPropRepo(
    GitHubModel
):
    """Repo Ref"""

    id: int = Field()
    name: str = Field()
    url: str = Field()


class WebhookCheckSuiteRerequested(GitHubModel):
    """check_suite rerequested event"""

    action: Literal["rerequested"] = Field()
    check_suite: WebhookCheckSuiteRerequestedPropCheckSuite = Field(
        description="The [check_suite](https://docs.github.com/rest/checks/suites#get-a-check-suite)."
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookCheckSuiteRerequestedPropCheckSuite(GitHubModel):
    """WebhookCheckSuiteRerequestedPropCheckSuite

    The [check_suite](https://docs.github.com/rest/checks/suites#get-a-check-suite).
    """

    after: Union[str, None] = Field()
    app: WebhookCheckSuiteRerequestedPropCheckSuitePropApp = Field(
        title="App",
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
    )
    before: Union[str, None] = Field()
    check_runs_url: str = Field()
    conclusion: Union[
        None,
        Literal[
            "success",
            "failure",
            "neutral",
            "cancelled",
            "timed_out",
            "action_required",
            "stale",
        ],
    ] = Field(
        description="The summary conclusion for all check runs that are part of the check suite. This value will be `null` until the check run has completed."
    )
    created_at: datetime = Field()
    head_branch: Union[str, None] = Field(
        description="The head branch name the changes are on."
    )
    head_commit: WebhookCheckSuiteRerequestedPropCheckSuitePropHeadCommit = Field(
        title="SimpleCommit"
    )
    head_sha: str = Field(
        description="The SHA of the head commit that is being checked."
    )
    id: int = Field()
    latest_check_runs_count: int = Field()
    node_id: str = Field()
    pull_requests: List[
        WebhookCheckSuiteRerequestedPropCheckSuitePropPullRequestsItems
    ] = Field(
        description="An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty."
    )
    rerequestable: Missing[bool] = Field(default=UNSET)
    runs_rerequestable: Missing[bool] = Field(default=UNSET)
    status: Union[
        None, Literal["requested", "in_progress", "completed", "queued"]
    ] = Field(
        description="The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`."
    )
    updated_at: datetime = Field()
    url: str = Field(description="URL that points to the check suite API resource.")


class WebhookCheckSuiteRerequestedPropCheckSuitePropApp(GitHubModel):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None] = Field()
    description: Union[str, None] = Field()
    events: Missing[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "pull_request_review_thread",
                "merge_queue_entry",
                "workflow_job",
            ]
        ]
    ] = Field(default=UNSET, description="The list of events for the GitHub app")
    external_url: Union[str, None] = Field()
    html_url: str = Field()
    id: Union[int, None] = Field(description="Unique identifier of the GitHub app")
    name: str = Field(description="The name of the GitHub app")
    node_id: str = Field()
    owner: Union[
        WebhookCheckSuiteRerequestedPropCheckSuitePropAppPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookCheckSuiteRerequestedPropCheckSuitePropAppPropPermissions
    ] = Field(default=UNSET, description="The set of permissions for the GitHub app")
    slug: Missing[str] = Field(
        default=UNSET, description="The slug name of the GitHub app"
    )
    updated_at: Union[datetime, None] = Field()


class WebhookCheckSuiteRerequestedPropCheckSuitePropAppPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookCheckSuiteRerequestedPropCheckSuitePropAppPropPermissions(GitHubModel):
    """WebhookCheckSuiteRerequestedPropCheckSuitePropAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    administration: Missing[Literal["read", "write"]] = Field(default=UNSET)
    checks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    content_references: Missing[Literal["read", "write"]] = Field(default=UNSET)
    contents: Missing[Literal["read", "write"]] = Field(default=UNSET)
    deployments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    emails: Missing[Literal["read", "write"]] = Field(default=UNSET)
    environments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    issues: Missing[Literal["read", "write"]] = Field(default=UNSET)
    keys: Missing[Literal["read", "write"]] = Field(default=UNSET)
    members: Missing[Literal["read", "write"]] = Field(default=UNSET)
    metadata: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_administration: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_plan: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_projects: Missing[Literal["read", "write", "admin"]] = Field(
        default=UNSET
    )
    organization_secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_self_hosted_runners: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_user_blocking: Missing[Literal["read", "write"]] = Field(default=UNSET)
    packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pull_requests: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_projects: Missing[Literal["read", "write", "admin"]] = Field(
        default=UNSET
    )
    secret_scanning_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_events: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_scanning_alert: Missing[Literal["read", "write"]] = Field(default=UNSET)
    single_file: Missing[Literal["read", "write"]] = Field(default=UNSET)
    statuses: Missing[Literal["read", "write"]] = Field(default=UNSET)
    team_discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    vulnerability_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    workflows: Missing[Literal["read", "write"]] = Field(default=UNSET)


class WebhookCheckSuiteRerequestedPropCheckSuitePropHeadCommit(GitHubModel):
    """SimpleCommit"""

    author: WebhookCheckSuiteRerequestedPropCheckSuitePropHeadCommitPropAuthor = Field(
        title="Committer",
        description="Metaproperties for Git author/committer information.",
    )
    committer: WebhookCheckSuiteRerequestedPropCheckSuitePropHeadCommitPropCommitter = (
        Field(
            title="Committer",
            description="Metaproperties for Git author/committer information.",
        )
    )
    id: str = Field()
    message: str = Field()
    timestamp: str = Field()
    tree_id: str = Field()


class WebhookCheckSuiteRerequestedPropCheckSuitePropHeadCommitPropAuthor(GitHubModel):
    """Committer

    Metaproperties for Git author/committer information.
    """

    date: Missing[datetime] = Field(default=UNSET)
    email: Union[str, None] = Field()
    name: str = Field(description="The git author's name.")
    username: Missing[str] = Field(default=UNSET)


class WebhookCheckSuiteRerequestedPropCheckSuitePropHeadCommitPropCommitter(
    GitHubModel
):
    """Committer

    Metaproperties for Git author/committer information.
    """

    date: Missing[datetime] = Field(default=UNSET)
    email: Union[str, None] = Field()
    name: str = Field(description="The git author's name.")
    username: Missing[str] = Field(default=UNSET)


class WebhookCheckSuiteRerequestedPropCheckSuitePropPullRequestsItems(GitHubModel):
    """Check Run Pull Request"""

    base: WebhookCheckSuiteRerequestedPropCheckSuitePropPullRequestsItemsPropBase = (
        Field()
    )
    head: WebhookCheckSuiteRerequestedPropCheckSuitePropPullRequestsItemsPropHead = (
        Field()
    )
    id: int = Field()
    number: int = Field()
    url: str = Field()


class WebhookCheckSuiteRerequestedPropCheckSuitePropPullRequestsItemsPropBase(
    GitHubModel
):
    """WebhookCheckSuiteRerequestedPropCheckSuitePropPullRequestsItemsPropBase"""

    ref: str = Field()
    repo: WebhookCheckSuiteRerequestedPropCheckSuitePropPullRequestsItemsPropBasePropRepo = Field(
        title="Repo Ref"
    )
    sha: str = Field()


class WebhookCheckSuiteRerequestedPropCheckSuitePropPullRequestsItemsPropBasePropRepo(
    GitHubModel
):
    """Repo Ref"""

    id: int = Field()
    name: str = Field()
    url: str = Field()


class WebhookCheckSuiteRerequestedPropCheckSuitePropPullRequestsItemsPropHead(
    GitHubModel
):
    """WebhookCheckSuiteRerequestedPropCheckSuitePropPullRequestsItemsPropHead"""

    ref: str = Field()
    repo: WebhookCheckSuiteRerequestedPropCheckSuitePropPullRequestsItemsPropHeadPropRepo = Field(
        title="Repo Ref"
    )
    sha: str = Field()


class WebhookCheckSuiteRerequestedPropCheckSuitePropPullRequestsItemsPropHeadPropRepo(
    GitHubModel
):
    """Repo Ref"""

    id: int = Field()
    name: str = Field()
    url: str = Field()


class WebhookCodeScanningAlertAppearedInBranch(GitHubModel):
    """code_scanning_alert appeared_in_branch event"""

    action: Literal["appeared_in_branch"] = Field()
    alert: WebhookCodeScanningAlertAppearedInBranchPropAlert = Field(
        description="The code scanning alert involved in the event."
    )
    commit_oid: str = Field(
        description="The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty."
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    ref: str = Field(
        description="The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty."
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookCodeScanningAlertAppearedInBranchPropAlert(GitHubModel):
    """WebhookCodeScanningAlertAppearedInBranchPropAlert

    The code scanning alert involved in the event.
    """

    created_at: datetime = Field(
        description="The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`"
    )
    dismissed_at: Union[datetime, None] = Field(
        description="The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."
    )
    dismissed_by: Union[
        WebhookCodeScanningAlertAppearedInBranchPropAlertPropDismissedBy, None
    ] = Field(title="User")
    dismissed_reason: Union[
        None, Literal["false positive", "won't fix", "used in tests"]
    ] = Field(description="The reason for dismissing or closing the alert.")
    html_url: str = Field(description="The GitHub URL of the alert resource.")
    most_recent_instance: Missing[
        Union[
            WebhookCodeScanningAlertAppearedInBranchPropAlertPropMostRecentInstance,
            None,
        ]
    ] = Field(default=UNSET, title="Alert Instance")
    number: int = Field(description="The code scanning alert number.")
    rule: WebhookCodeScanningAlertAppearedInBranchPropAlertPropRule = Field()
    state: Literal["open", "dismissed", "fixed"] = Field(
        description="State of a code scanning alert."
    )
    tool: WebhookCodeScanningAlertAppearedInBranchPropAlertPropTool = Field()
    url: str = Field()


class WebhookCodeScanningAlertAppearedInBranchPropAlertPropDismissedBy(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookCodeScanningAlertAppearedInBranchPropAlertPropMostRecentInstancePropLocation(
    GitHubModel
):
    """WebhookCodeScanningAlertAppearedInBranchPropAlertPropMostRecentInstancePropLocat
    ion
    """

    end_column: Missing[int] = Field(default=UNSET)
    end_line: Missing[int] = Field(default=UNSET)
    path: Missing[str] = Field(default=UNSET)
    start_column: Missing[int] = Field(default=UNSET)
    start_line: Missing[int] = Field(default=UNSET)


class WebhookCodeScanningAlertAppearedInBranchPropAlertPropMostRecentInstancePropMessage(
    GitHubModel
):
    """WebhookCodeScanningAlertAppearedInBranchPropAlertPropMostRecentInstancePropMessa
    ge
    """

    text: Missing[str] = Field(default=UNSET)


class WebhookCodeScanningAlertAppearedInBranchPropAlertPropMostRecentInstance(
    GitHubModel
):
    """Alert Instance"""

    analysis_key: str = Field(
        description="Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name."
    )
    category: Missing[str] = Field(
        default=UNSET,
        description="Identifies the configuration under which the analysis was executed.",
    )
    classifications: Missing[List[str]] = Field(default=UNSET)
    commit_sha: Missing[str] = Field(default=UNSET)
    environment: str = Field(
        description="Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed."
    )
    location: Missing[
        WebhookCodeScanningAlertAppearedInBranchPropAlertPropMostRecentInstancePropLocation
    ] = Field(default=UNSET)
    message: Missing[
        WebhookCodeScanningAlertAppearedInBranchPropAlertPropMostRecentInstancePropMessage
    ] = Field(default=UNSET)
    ref: str = Field(
        description="The full Git reference, formatted as `refs/heads/<branch name>`."
    )
    state: Literal["open", "dismissed", "fixed"] = Field(
        description="State of a code scanning alert."
    )


class WebhookCodeScanningAlertAppearedInBranchPropAlertPropRule(GitHubModel):
    """WebhookCodeScanningAlertAppearedInBranchPropAlertPropRule"""

    description: str = Field(
        description="A short description of the rule used to detect the alert."
    )
    id: str = Field(
        description="A unique identifier for the rule used to detect the alert."
    )
    severity: Union[None, Literal["none", "note", "warning", "error"]] = Field(
        description="The severity of the alert."
    )


class WebhookCodeScanningAlertAppearedInBranchPropAlertPropTool(GitHubModel):
    """WebhookCodeScanningAlertAppearedInBranchPropAlertPropTool"""

    name: str = Field(
        description="The name of the tool used to generate the code scanning analysis alert."
    )
    version: Union[str, None] = Field(
        description="The version of the tool used to detect the alert."
    )


class WebhookCodeScanningAlertClosedByUser(GitHubModel):
    """code_scanning_alert closed_by_user event"""

    action: Literal["closed_by_user"] = Field()
    alert: WebhookCodeScanningAlertClosedByUserPropAlert = Field(
        description="The code scanning alert involved in the event."
    )
    commit_oid: str = Field(
        description="The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty."
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    ref: str = Field(
        description="The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty."
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookCodeScanningAlertClosedByUserPropAlert(GitHubModel):
    """WebhookCodeScanningAlertClosedByUserPropAlert

    The code scanning alert involved in the event.
    """

    created_at: datetime = Field(
        description="The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`"
    )
    dismissed_at: datetime = Field(
        description="The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."
    )
    dismissed_by: Union[
        WebhookCodeScanningAlertClosedByUserPropAlertPropDismissedBy, None
    ] = Field(title="User")
    dismissed_reason: Union[
        None, Literal["false positive", "won't fix", "used in tests"]
    ] = Field(description="The reason for dismissing or closing the alert.")
    html_url: str = Field(description="The GitHub URL of the alert resource.")
    most_recent_instance: Missing[
        Union[WebhookCodeScanningAlertClosedByUserPropAlertPropMostRecentInstance, None]
    ] = Field(default=UNSET, title="Alert Instance")
    number: int = Field(description="The code scanning alert number.")
    rule: WebhookCodeScanningAlertClosedByUserPropAlertPropRule = Field()
    state: Literal["dismissed", "fixed"] = Field(
        description="State of a code scanning alert."
    )
    tool: WebhookCodeScanningAlertClosedByUserPropAlertPropTool = Field()
    url: str = Field()


class WebhookCodeScanningAlertClosedByUserPropAlertPropDismissedBy(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookCodeScanningAlertClosedByUserPropAlertPropMostRecentInstancePropLocation(
    GitHubModel
):
    """WebhookCodeScanningAlertClosedByUserPropAlertPropMostRecentInstancePropLocation"""

    end_column: Missing[int] = Field(default=UNSET)
    end_line: Missing[int] = Field(default=UNSET)
    path: Missing[str] = Field(default=UNSET)
    start_column: Missing[int] = Field(default=UNSET)
    start_line: Missing[int] = Field(default=UNSET)


class WebhookCodeScanningAlertClosedByUserPropAlertPropMostRecentInstancePropMessage(
    GitHubModel
):
    """WebhookCodeScanningAlertClosedByUserPropAlertPropMostRecentInstancePropMessage"""

    text: Missing[str] = Field(default=UNSET)


class WebhookCodeScanningAlertClosedByUserPropAlertPropMostRecentInstance(GitHubModel):
    """Alert Instance"""

    analysis_key: str = Field(
        description="Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name."
    )
    category: Missing[str] = Field(
        default=UNSET,
        description="Identifies the configuration under which the analysis was executed.",
    )
    classifications: Missing[List[str]] = Field(default=UNSET)
    commit_sha: Missing[str] = Field(default=UNSET)
    environment: str = Field(
        description="Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed."
    )
    location: Missing[
        WebhookCodeScanningAlertClosedByUserPropAlertPropMostRecentInstancePropLocation
    ] = Field(default=UNSET)
    message: Missing[
        WebhookCodeScanningAlertClosedByUserPropAlertPropMostRecentInstancePropMessage
    ] = Field(default=UNSET)
    ref: str = Field(
        description="The full Git reference, formatted as `refs/heads/<branch name>`."
    )
    state: Literal["open", "dismissed", "fixed"] = Field(
        description="State of a code scanning alert."
    )


class WebhookCodeScanningAlertClosedByUserPropAlertPropRule(GitHubModel):
    """WebhookCodeScanningAlertClosedByUserPropAlertPropRule"""

    description: str = Field(
        description="A short description of the rule used to detect the alert."
    )
    full_description: Missing[str] = Field(default=UNSET)
    help_: Missing[Union[str, None]] = Field(default=UNSET, alias="help")
    help_uri: Missing[Union[str, None]] = Field(
        default=UNSET,
        description="A link to the documentation for the rule used to detect the alert.",
    )
    id: str = Field(
        description="A unique identifier for the rule used to detect the alert."
    )
    name: Missing[str] = Field(default=UNSET)
    severity: Union[None, Literal["none", "note", "warning", "error"]] = Field(
        description="The severity of the alert."
    )
    tags: Missing[Union[List[str], None]] = Field(default=UNSET)


class WebhookCodeScanningAlertClosedByUserPropAlertPropTool(GitHubModel):
    """WebhookCodeScanningAlertClosedByUserPropAlertPropTool"""

    guid: Missing[Union[str, None]] = Field(default=UNSET)
    name: str = Field(
        description="The name of the tool used to generate the code scanning analysis alert."
    )
    version: Union[str, None] = Field(
        description="The version of the tool used to detect the alert."
    )


class WebhookCodeScanningAlertCreated(GitHubModel):
    """code_scanning_alert created event"""

    action: Literal["created"] = Field()
    alert: WebhookCodeScanningAlertCreatedPropAlert = Field(
        description="The code scanning alert involved in the event."
    )
    commit_oid: str = Field(
        description="The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty."
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    ref: str = Field(
        description="The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty."
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookCodeScanningAlertCreatedPropAlert(GitHubModel):
    """WebhookCodeScanningAlertCreatedPropAlert

    The code scanning alert involved in the event.
    """

    created_at: Union[datetime, None] = Field(
        description="The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`"
    )
    dismissed_at: None = Field(
        description="The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."
    )
    dismissed_by: None = Field()
    dismissed_comment: Missing[
        Union[Annotated[str, Field(max_length=280)], None]
    ] = Field(
        default=UNSET,
        description="The dismissal comment associated with the dismissal of the alert.",
    )
    dismissed_reason: None = Field(
        description="The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`."
    )
    fixed_at: Missing[None] = Field(default=UNSET)
    html_url: str = Field(description="The GitHub URL of the alert resource.")
    instances_url: Missing[str] = Field(default=UNSET)
    most_recent_instance: Missing[
        Union[WebhookCodeScanningAlertCreatedPropAlertPropMostRecentInstance, None]
    ] = Field(default=UNSET, title="Alert Instance")
    number: int = Field(description="The code scanning alert number.")
    rule: WebhookCodeScanningAlertCreatedPropAlertPropRule = Field()
    state: Literal["open", "dismissed"] = Field(
        description="State of a code scanning alert."
    )
    tool: Union[WebhookCodeScanningAlertCreatedPropAlertPropTool, None] = Field()
    updated_at: Missing[Union[str, None]] = Field(default=UNSET)
    url: str = Field()


class WebhookCodeScanningAlertCreatedPropAlertPropMostRecentInstancePropLocation(
    GitHubModel
):
    """WebhookCodeScanningAlertCreatedPropAlertPropMostRecentInstancePropLocation"""

    end_column: Missing[int] = Field(default=UNSET)
    end_line: Missing[int] = Field(default=UNSET)
    path: Missing[str] = Field(default=UNSET)
    start_column: Missing[int] = Field(default=UNSET)
    start_line: Missing[int] = Field(default=UNSET)


class WebhookCodeScanningAlertCreatedPropAlertPropMostRecentInstancePropMessage(
    GitHubModel
):
    """WebhookCodeScanningAlertCreatedPropAlertPropMostRecentInstancePropMessage"""

    text: Missing[str] = Field(default=UNSET)


class WebhookCodeScanningAlertCreatedPropAlertPropMostRecentInstance(GitHubModel):
    """Alert Instance"""

    analysis_key: str = Field(
        description="Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name."
    )
    category: Missing[str] = Field(
        default=UNSET,
        description="Identifies the configuration under which the analysis was executed.",
    )
    classifications: Missing[List[str]] = Field(default=UNSET)
    commit_sha: Missing[str] = Field(default=UNSET)
    environment: str = Field(
        description="Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed."
    )
    location: Missing[
        WebhookCodeScanningAlertCreatedPropAlertPropMostRecentInstancePropLocation
    ] = Field(default=UNSET)
    message: Missing[
        WebhookCodeScanningAlertCreatedPropAlertPropMostRecentInstancePropMessage
    ] = Field(default=UNSET)
    ref: str = Field(
        description="The full Git reference, formatted as `refs/heads/<branch name>`."
    )
    state: Literal["open", "dismissed", "fixed"] = Field(
        description="State of a code scanning alert."
    )


class WebhookCodeScanningAlertCreatedPropAlertPropRule(GitHubModel):
    """WebhookCodeScanningAlertCreatedPropAlertPropRule"""

    description: str = Field(
        description="A short description of the rule used to detect the alert."
    )
    full_description: Missing[str] = Field(default=UNSET)
    help_: Missing[Union[str, None]] = Field(default=UNSET, alias="help")
    help_uri: Missing[Union[str, None]] = Field(
        default=UNSET,
        description="A link to the documentation for the rule used to detect the alert.",
    )
    id: str = Field(
        description="A unique identifier for the rule used to detect the alert."
    )
    name: Missing[str] = Field(default=UNSET)
    severity: Union[None, Literal["none", "note", "warning", "error"]] = Field(
        description="The severity of the alert."
    )
    tags: Missing[Union[List[str], None]] = Field(default=UNSET)


class WebhookCodeScanningAlertCreatedPropAlertPropTool(GitHubModel):
    """WebhookCodeScanningAlertCreatedPropAlertPropTool"""

    guid: Missing[Union[str, None]] = Field(default=UNSET)
    name: str = Field(
        description="The name of the tool used to generate the code scanning analysis alert."
    )
    version: Union[str, None] = Field(
        description="The version of the tool used to detect the alert."
    )


class WebhookCodeScanningAlertFixed(GitHubModel):
    """code_scanning_alert fixed event"""

    action: Literal["fixed"] = Field()
    alert: WebhookCodeScanningAlertFixedPropAlert = Field(
        description="The code scanning alert involved in the event."
    )
    commit_oid: str = Field(
        description="The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty."
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    ref: str = Field(
        description="The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty."
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookCodeScanningAlertFixedPropAlert(GitHubModel):
    """WebhookCodeScanningAlertFixedPropAlert

    The code scanning alert involved in the event.
    """

    created_at: datetime = Field(
        description="The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`"
    )
    dismissed_at: Union[datetime, None] = Field(
        description="The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."
    )
    dismissed_by: Union[
        WebhookCodeScanningAlertFixedPropAlertPropDismissedBy, None
    ] = Field(title="User")
    dismissed_reason: Union[
        None, Literal["false positive", "won't fix", "used in tests"]
    ] = Field(description="The reason for dismissing or closing the alert.")
    html_url: str = Field(description="The GitHub URL of the alert resource.")
    instances_url: Missing[str] = Field(default=UNSET)
    most_recent_instance: Missing[
        Union[WebhookCodeScanningAlertFixedPropAlertPropMostRecentInstance, None]
    ] = Field(default=UNSET, title="Alert Instance")
    number: int = Field(description="The code scanning alert number.")
    rule: WebhookCodeScanningAlertFixedPropAlertPropRule = Field()
    state: Literal["fixed"] = Field(description="State of a code scanning alert.")
    tool: WebhookCodeScanningAlertFixedPropAlertPropTool = Field()
    url: str = Field()


class WebhookCodeScanningAlertFixedPropAlertPropDismissedBy(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookCodeScanningAlertFixedPropAlertPropMostRecentInstancePropLocation(
    GitHubModel
):
    """WebhookCodeScanningAlertFixedPropAlertPropMostRecentInstancePropLocation"""

    end_column: Missing[int] = Field(default=UNSET)
    end_line: Missing[int] = Field(default=UNSET)
    path: Missing[str] = Field(default=UNSET)
    start_column: Missing[int] = Field(default=UNSET)
    start_line: Missing[int] = Field(default=UNSET)


class WebhookCodeScanningAlertFixedPropAlertPropMostRecentInstancePropMessage(
    GitHubModel
):
    """WebhookCodeScanningAlertFixedPropAlertPropMostRecentInstancePropMessage"""

    text: Missing[str] = Field(default=UNSET)


class WebhookCodeScanningAlertFixedPropAlertPropMostRecentInstance(GitHubModel):
    """Alert Instance"""

    analysis_key: str = Field(
        description="Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name."
    )
    category: Missing[str] = Field(
        default=UNSET,
        description="Identifies the configuration under which the analysis was executed.",
    )
    classifications: Missing[List[str]] = Field(default=UNSET)
    commit_sha: Missing[str] = Field(default=UNSET)
    environment: str = Field(
        description="Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed."
    )
    location: Missing[
        WebhookCodeScanningAlertFixedPropAlertPropMostRecentInstancePropLocation
    ] = Field(default=UNSET)
    message: Missing[
        WebhookCodeScanningAlertFixedPropAlertPropMostRecentInstancePropMessage
    ] = Field(default=UNSET)
    ref: str = Field(
        description="The full Git reference, formatted as `refs/heads/<branch name>`."
    )
    state: Literal["open", "dismissed", "fixed"] = Field(
        description="State of a code scanning alert."
    )


class WebhookCodeScanningAlertFixedPropAlertPropRule(GitHubModel):
    """WebhookCodeScanningAlertFixedPropAlertPropRule"""

    description: str = Field(
        description="A short description of the rule used to detect the alert."
    )
    full_description: Missing[str] = Field(default=UNSET)
    help_: Missing[Union[str, None]] = Field(default=UNSET, alias="help")
    help_uri: Missing[Union[str, None]] = Field(
        default=UNSET,
        description="A link to the documentation for the rule used to detect the alert.",
    )
    id: str = Field(
        description="A unique identifier for the rule used to detect the alert."
    )
    name: Missing[str] = Field(default=UNSET)
    severity: Union[None, Literal["none", "note", "warning", "error"]] = Field(
        description="The severity of the alert."
    )
    tags: Missing[Union[List[str], None]] = Field(default=UNSET)


class WebhookCodeScanningAlertFixedPropAlertPropTool(GitHubModel):
    """WebhookCodeScanningAlertFixedPropAlertPropTool"""

    guid: Missing[Union[str, None]] = Field(default=UNSET)
    name: str = Field(
        description="The name of the tool used to generate the code scanning analysis alert."
    )
    version: Union[str, None] = Field(
        description="The version of the tool used to detect the alert."
    )


class WebhookCodeScanningAlertReopened(GitHubModel):
    """code_scanning_alert reopened event"""

    action: Literal["reopened"] = Field()
    alert: Union[WebhookCodeScanningAlertReopenedPropAlert, None] = Field(
        description="The code scanning alert involved in the event."
    )
    commit_oid: Union[str, None] = Field(
        description="The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty."
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    ref: Union[str, None] = Field(
        description="The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty."
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookCodeScanningAlertReopenedPropAlertPropDismissedBy(GitHubModel):
    """WebhookCodeScanningAlertReopenedPropAlertPropDismissedBy"""


class WebhookCodeScanningAlertReopenedPropAlertPropMostRecentInstancePropLocation(
    GitHubModel
):
    """WebhookCodeScanningAlertReopenedPropAlertPropMostRecentInstancePropLocation"""

    end_column: Missing[int] = Field(default=UNSET)
    end_line: Missing[int] = Field(default=UNSET)
    path: Missing[str] = Field(default=UNSET)
    start_column: Missing[int] = Field(default=UNSET)
    start_line: Missing[int] = Field(default=UNSET)


class WebhookCodeScanningAlertReopenedPropAlertPropMostRecentInstancePropMessage(
    GitHubModel
):
    """WebhookCodeScanningAlertReopenedPropAlertPropMostRecentInstancePropMessage"""

    text: Missing[str] = Field(default=UNSET)


class WebhookCodeScanningAlertReopenedPropAlertPropMostRecentInstance(GitHubModel):
    """Alert Instance"""

    analysis_key: str = Field(
        description="Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name."
    )
    category: Missing[str] = Field(
        default=UNSET,
        description="Identifies the configuration under which the analysis was executed.",
    )
    classifications: Missing[List[str]] = Field(default=UNSET)
    commit_sha: Missing[str] = Field(default=UNSET)
    environment: str = Field(
        description="Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed."
    )
    location: Missing[
        WebhookCodeScanningAlertReopenedPropAlertPropMostRecentInstancePropLocation
    ] = Field(default=UNSET)
    message: Missing[
        WebhookCodeScanningAlertReopenedPropAlertPropMostRecentInstancePropMessage
    ] = Field(default=UNSET)
    ref: str = Field(
        description="The full Git reference, formatted as `refs/heads/<branch name>`."
    )
    state: Literal["open", "dismissed", "fixed"] = Field(
        description="State of a code scanning alert."
    )


class WebhookCodeScanningAlertReopenedPropAlertPropRule(GitHubModel):
    """WebhookCodeScanningAlertReopenedPropAlertPropRule"""

    description: str = Field(
        description="A short description of the rule used to detect the alert."
    )
    full_description: Missing[str] = Field(default=UNSET)
    help_: Missing[Union[str, None]] = Field(default=UNSET, alias="help")
    help_uri: Missing[Union[str, None]] = Field(
        default=UNSET,
        description="A link to the documentation for the rule used to detect the alert.",
    )
    id: str = Field(
        description="A unique identifier for the rule used to detect the alert."
    )
    name: Missing[str] = Field(default=UNSET)
    severity: Union[None, Literal["none", "note", "warning", "error"]] = Field(
        description="The severity of the alert."
    )
    tags: Missing[Union[List[str], None]] = Field(default=UNSET)


class WebhookCodeScanningAlertReopenedPropAlertPropTool(GitHubModel):
    """WebhookCodeScanningAlertReopenedPropAlertPropTool"""

    guid: Missing[Union[str, None]] = Field(default=UNSET)
    name: str = Field(
        description="The name of the tool used to generate the code scanning analysis alert."
    )
    version: Union[str, None] = Field(
        description="The version of the tool used to detect the alert."
    )


class WebhookCodeScanningAlertReopenedPropAlert(GitHubModel):
    """WebhookCodeScanningAlertReopenedPropAlert

    The code scanning alert involved in the event.
    """

    created_at: datetime = Field(
        description="The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`"
    )
    dismissed_at: Union[str, None] = Field(
        description="The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."
    )
    dismissed_by: Union[
        WebhookCodeScanningAlertReopenedPropAlertPropDismissedBy, None
    ] = Field()
    dismissed_reason: Union[str, None] = Field(
        description="The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`."
    )
    html_url: str = Field(description="The GitHub URL of the alert resource.")
    most_recent_instance: Missing[
        Union[WebhookCodeScanningAlertReopenedPropAlertPropMostRecentInstance, None]
    ] = Field(default=UNSET, title="Alert Instance")
    number: int = Field(description="The code scanning alert number.")
    rule: WebhookCodeScanningAlertReopenedPropAlertPropRule = Field()
    state: Literal["open", "dismissed", "fixed"] = Field(
        description="State of a code scanning alert."
    )
    tool: WebhookCodeScanningAlertReopenedPropAlertPropTool = Field()
    url: str = Field()


class WebhookCodeScanningAlertReopenedByUser(GitHubModel):
    """code_scanning_alert reopened_by_user event"""

    action: Literal["reopened_by_user"] = Field()
    alert: WebhookCodeScanningAlertReopenedByUserPropAlert = Field(
        description="The code scanning alert involved in the event."
    )
    commit_oid: str = Field(
        description="The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty."
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    ref: str = Field(
        description="The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty."
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookCodeScanningAlertReopenedByUserPropAlert(GitHubModel):
    """WebhookCodeScanningAlertReopenedByUserPropAlert

    The code scanning alert involved in the event.
    """

    created_at: datetime = Field(
        description="The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`"
    )
    dismissed_at: None = Field(
        description="The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."
    )
    dismissed_by: None = Field()
    dismissed_reason: None = Field(
        description="The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`."
    )
    html_url: str = Field(description="The GitHub URL of the alert resource.")
    most_recent_instance: Missing[
        Union[
            WebhookCodeScanningAlertReopenedByUserPropAlertPropMostRecentInstance, None
        ]
    ] = Field(default=UNSET, title="Alert Instance")
    number: int = Field(description="The code scanning alert number.")
    rule: WebhookCodeScanningAlertReopenedByUserPropAlertPropRule = Field()
    state: Literal["open", "fixed"] = Field(
        description="State of a code scanning alert."
    )
    tool: WebhookCodeScanningAlertReopenedByUserPropAlertPropTool = Field()
    url: str = Field()


class WebhookCodeScanningAlertReopenedByUserPropAlertPropMostRecentInstancePropLocation(
    GitHubModel
):
    """WebhookCodeScanningAlertReopenedByUserPropAlertPropMostRecentInstancePropLocatio
    n
    """

    end_column: Missing[int] = Field(default=UNSET)
    end_line: Missing[int] = Field(default=UNSET)
    path: Missing[str] = Field(default=UNSET)
    start_column: Missing[int] = Field(default=UNSET)
    start_line: Missing[int] = Field(default=UNSET)


class WebhookCodeScanningAlertReopenedByUserPropAlertPropMostRecentInstancePropMessage(
    GitHubModel
):
    """WebhookCodeScanningAlertReopenedByUserPropAlertPropMostRecentInstancePropMessage"""

    text: Missing[str] = Field(default=UNSET)


class WebhookCodeScanningAlertReopenedByUserPropAlertPropMostRecentInstance(
    GitHubModel
):
    """Alert Instance"""

    analysis_key: str = Field(
        description="Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name."
    )
    category: Missing[str] = Field(
        default=UNSET,
        description="Identifies the configuration under which the analysis was executed.",
    )
    classifications: Missing[List[str]] = Field(default=UNSET)
    commit_sha: Missing[str] = Field(default=UNSET)
    environment: str = Field(
        description="Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed."
    )
    location: Missing[
        WebhookCodeScanningAlertReopenedByUserPropAlertPropMostRecentInstancePropLocation
    ] = Field(default=UNSET)
    message: Missing[
        WebhookCodeScanningAlertReopenedByUserPropAlertPropMostRecentInstancePropMessage
    ] = Field(default=UNSET)
    ref: str = Field(
        description="The full Git reference, formatted as `refs/heads/<branch name>`."
    )
    state: Literal["open", "dismissed", "fixed"] = Field(
        description="State of a code scanning alert."
    )


class WebhookCodeScanningAlertReopenedByUserPropAlertPropRule(GitHubModel):
    """WebhookCodeScanningAlertReopenedByUserPropAlertPropRule"""

    description: str = Field(
        description="A short description of the rule used to detect the alert."
    )
    id: str = Field(
        description="A unique identifier for the rule used to detect the alert."
    )
    severity: Union[None, Literal["none", "note", "warning", "error"]] = Field(
        description="The severity of the alert."
    )


class WebhookCodeScanningAlertReopenedByUserPropAlertPropTool(GitHubModel):
    """WebhookCodeScanningAlertReopenedByUserPropAlertPropTool"""

    name: str = Field(
        description="The name of the tool used to generate the code scanning analysis alert."
    )
    version: Union[str, None] = Field(
        description="The version of the tool used to detect the alert."
    )


class WebhookCommitCommentCreated(GitHubModel):
    """commit_comment created event"""

    action: Literal["created"] = Field(
        description="The action performed. Can be `created`."
    )
    comment: WebhookCommitCommentCreatedPropComment = Field(
        description="The [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment) resource."
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookCommitCommentCreatedPropComment(GitHubModel):
    """WebhookCommitCommentCreatedPropComment

    The [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-
    comment) resource.
    """

    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: str = Field(description="The text of the comment.")
    commit_id: str = Field(
        description="The SHA of the commit to which the comment applies."
    )
    created_at: str = Field()
    html_url: str = Field()
    id: int = Field(description="The ID of the commit comment.")
    line: Union[int, None] = Field(
        description="The line of the blob to which the comment applies. The last line of the range for a multi-line comment"
    )
    node_id: str = Field(description="The node ID of the commit comment.")
    path: Union[str, None] = Field(
        description="The relative path of the file to which the comment applies."
    )
    position: Union[int, None] = Field(
        description="The line index in the diff to which the comment applies."
    )
    reactions: Missing[WebhookCommitCommentCreatedPropCommentPropReactions] = Field(
        default=UNSET, title="Reactions"
    )
    updated_at: str = Field()
    url: str = Field()
    user: Union[WebhookCommitCommentCreatedPropCommentPropUser, None] = Field(
        title="User"
    )


class WebhookCommitCommentCreatedPropCommentPropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookCommitCommentCreatedPropCommentPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookCreate(GitHubModel):
    """create event"""

    description: Union[str, None] = Field(
        description="The repository's current description."
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    master_branch: str = Field(
        description="The name of the repository's default branch (usually `main`)."
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    pusher_type: str = Field(
        description="The pusher type for the event. Can be either `user` or a deploy key."
    )
    ref: str = Field(
        description="The [`git ref`](https://docs.github.com/rest/git/refs#get-a-reference) resource."
    )
    ref_type: Literal["tag", "branch"] = Field(
        description="The type of Git ref object created in the repository."
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookCustomPropertyCreated(GitHubModel):
    """custom property created event"""

    action: Literal["created"] = Field()
    definition: OrgCustomProperty = Field(
        title="Organization Custom Property",
        description="Custom property defined on an organization",
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: OrganizationSimpleWebhooks = Field(
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    sender: Missing[SimpleUserWebhooks] = Field(
        default=UNSET,
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookCustomPropertyDeleted(GitHubModel):
    """custom property deleted event"""

    action: Literal["deleted"] = Field()
    definition: WebhookCustomPropertyDeletedPropDefinition = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: OrganizationSimpleWebhooks = Field(
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    sender: Missing[SimpleUserWebhooks] = Field(
        default=UNSET,
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookCustomPropertyDeletedPropDefinition(GitHubModel):
    """WebhookCustomPropertyDeletedPropDefinition"""

    property_name: str = Field(description="The name of the property that was deleted.")


class WebhookCustomPropertyUpdated(GitHubModel):
    """custom property updated event"""

    action: Literal["updated"] = Field()
    definition: OrgCustomProperty = Field(
        title="Organization Custom Property",
        description="Custom property defined on an organization",
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: OrganizationSimpleWebhooks = Field(
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    sender: Missing[SimpleUserWebhooks] = Field(
        default=UNSET,
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookCustomPropertyValuesUpdated(GitHubModel):
    """Custom property values updated event"""

    action: Literal["updated"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    organization: OrganizationSimpleWebhooks = Field(
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    sender: Missing[SimpleUserWebhooks] = Field(
        default=UNSET,
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )
    new_property_values: List[CustomPropertyValue] = Field(
        description="The new custom property values for the repository."
    )
    old_property_values: List[CustomPropertyValue] = Field(
        description="The old custom property values for the repository."
    )


class WebhookDelete(GitHubModel):
    """delete event"""

    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    pusher_type: str = Field(
        description="The pusher type for the event. Can be either `user` or a deploy key."
    )
    ref: str = Field(
        description="The [`git ref`](https://docs.github.com/rest/git/refs#get-a-reference) resource."
    )
    ref_type: Literal["tag", "branch"] = Field(
        description="The type of Git ref object deleted in the repository."
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookDependabotAlertAutoDismissed(GitHubModel):
    """Dependabot alert auto-dismissed event"""

    action: Literal["auto_dismissed"] = Field()
    alert: DependabotAlert = Field(description="A Dependabot alert.")
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookDependabotAlertAutoReopened(GitHubModel):
    """Dependabot alert auto-reopened event"""

    action: Literal["auto_reopened"] = Field()
    alert: DependabotAlert = Field(description="A Dependabot alert.")
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookDependabotAlertCreated(GitHubModel):
    """Dependabot alert created event"""

    action: Literal["created"] = Field()
    alert: DependabotAlert = Field(description="A Dependabot alert.")
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookDependabotAlertDismissed(GitHubModel):
    """Dependabot alert dismissed event"""

    action: Literal["dismissed"] = Field()
    alert: DependabotAlert = Field(description="A Dependabot alert.")
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookDependabotAlertFixed(GitHubModel):
    """Dependabot alert fixed event"""

    action: Literal["fixed"] = Field()
    alert: DependabotAlert = Field(description="A Dependabot alert.")
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookDependabotAlertReintroduced(GitHubModel):
    """Dependabot alert reintroduced event"""

    action: Literal["reintroduced"] = Field()
    alert: DependabotAlert = Field(description="A Dependabot alert.")
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookDependabotAlertReopened(GitHubModel):
    """Dependabot alert reopened event"""

    action: Literal["reopened"] = Field()
    alert: DependabotAlert = Field(description="A Dependabot alert.")
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookDeployKeyCreated(GitHubModel):
    """deploy_key created event"""

    action: Literal["created"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    key: WebhookDeployKeyCreatedPropKey = Field(
        description="The [`deploy key`](https://docs.github.com/rest/deploy-keys/deploy-keys#get-a-deploy-key) resource."
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookDeployKeyCreatedPropKey(GitHubModel):
    """WebhookDeployKeyCreatedPropKey

    The [`deploy key`](https://docs.github.com/rest/deploy-keys/deploy-keys#get-a-
    deploy-key) resource.
    """

    added_by: Missing[Union[str, None]] = Field(default=UNSET)
    created_at: str = Field()
    id: int = Field()
    key: str = Field()
    last_used: Missing[Union[str, None]] = Field(default=UNSET)
    read_only: bool = Field()
    title: str = Field()
    url: str = Field()
    verified: bool = Field()


class WebhookDeployKeyDeleted(GitHubModel):
    """deploy_key deleted event"""

    action: Literal["deleted"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    key: WebhookDeployKeyDeletedPropKey = Field(
        description="The [`deploy key`](https://docs.github.com/rest/deploy-keys/deploy-keys#get-a-deploy-key) resource."
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookDeployKeyDeletedPropKey(GitHubModel):
    """WebhookDeployKeyDeletedPropKey

    The [`deploy key`](https://docs.github.com/rest/deploy-keys/deploy-keys#get-a-
    deploy-key) resource.
    """

    added_by: Missing[Union[str, None]] = Field(default=UNSET)
    created_at: str = Field()
    id: int = Field()
    key: str = Field()
    last_used: Missing[Union[str, None]] = Field(default=UNSET)
    read_only: bool = Field()
    title: str = Field()
    url: str = Field()
    verified: bool = Field()


class WebhookDeploymentCreated(GitHubModel):
    """deployment created event"""

    action: Literal["created"] = Field()
    deployment: WebhookDeploymentCreatedPropDeployment = Field(
        title="Deployment",
        description="The [deployment](https://docs.github.com/rest/deployments/deployments#list-deployments).",
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )
    workflow: Union[WebhookDeploymentCreatedPropWorkflow, None] = Field(
        title="Workflow"
    )
    workflow_run: Union[WebhookDeploymentCreatedPropWorkflowRun, None] = Field(
        title="Deployment Workflow Run"
    )


class WebhookDeploymentCreatedPropDeployment(GitHubModel):
    """Deployment

    The [deployment](https://docs.github.com/rest/deployments/deployments#list-
    deployments).
    """

    created_at: str = Field()
    creator: Union[WebhookDeploymentCreatedPropDeploymentPropCreator, None] = Field(
        title="User"
    )
    description: Union[str, None] = Field()
    environment: str = Field()
    id: int = Field()
    node_id: str = Field()
    original_environment: str = Field()
    payload: Union[
        WebhookDeploymentCreatedPropDeploymentPropPayloadOneof0, str
    ] = Field()
    performed_via_github_app: Missing[
        Union[WebhookDeploymentCreatedPropDeploymentPropPerformedViaGithubApp, None]
    ] = Field(
        default=UNSET,
        title="App",
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
    )
    production_environment: Missing[bool] = Field(default=UNSET)
    ref: str = Field()
    repository_url: str = Field()
    sha: str = Field()
    statuses_url: str = Field()
    task: str = Field()
    transient_environment: Missing[bool] = Field(default=UNSET)
    updated_at: str = Field()
    url: str = Field()


class WebhookDeploymentCreatedPropDeploymentPropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentCreatedPropDeploymentPropPayloadOneof0(GitHubModel):
    """WebhookDeploymentCreatedPropDeploymentPropPayloadOneof0"""


class WebhookDeploymentCreatedPropDeploymentPropPerformedViaGithubAppPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentCreatedPropDeploymentPropPerformedViaGithubAppPropPermissions(
    GitHubModel
):
    """WebhookDeploymentCreatedPropDeploymentPropPerformedViaGithubAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    administration: Missing[Literal["read", "write"]] = Field(default=UNSET)
    checks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    content_references: Missing[Literal["read", "write"]] = Field(default=UNSET)
    contents: Missing[Literal["read", "write"]] = Field(default=UNSET)
    deployments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    emails: Missing[Literal["read", "write"]] = Field(default=UNSET)
    environments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    issues: Missing[Literal["read", "write"]] = Field(default=UNSET)
    keys: Missing[Literal["read", "write"]] = Field(default=UNSET)
    members: Missing[Literal["read", "write"]] = Field(default=UNSET)
    metadata: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_administration: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_plan: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_projects: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_self_hosted_runners: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_user_blocking: Missing[Literal["read", "write"]] = Field(default=UNSET)
    packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pull_requests: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_projects: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secret_scanning_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_events: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_scanning_alert: Missing[Literal["read", "write"]] = Field(default=UNSET)
    single_file: Missing[Literal["read", "write"]] = Field(default=UNSET)
    statuses: Missing[Literal["read", "write"]] = Field(default=UNSET)
    team_discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    vulnerability_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    workflows: Missing[Literal["read", "write"]] = Field(default=UNSET)


class WebhookDeploymentCreatedPropDeploymentPropPerformedViaGithubApp(GitHubModel):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None] = Field()
    description: Union[str, None] = Field()
    events: Missing[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "workflow_job",
                "pull_request_review_thread",
                "merge_queue_entry",
                "secret_scanning_alert_location",
                "merge_group",
            ]
        ]
    ] = Field(default=UNSET, description="The list of events for the GitHub app")
    external_url: Union[str, None] = Field()
    html_url: str = Field()
    id: Union[int, None] = Field(description="Unique identifier of the GitHub app")
    name: str = Field(description="The name of the GitHub app")
    node_id: str = Field()
    owner: Union[
        WebhookDeploymentCreatedPropDeploymentPropPerformedViaGithubAppPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookDeploymentCreatedPropDeploymentPropPerformedViaGithubAppPropPermissions
    ] = Field(default=UNSET, description="The set of permissions for the GitHub app")
    slug: Missing[str] = Field(
        default=UNSET, description="The slug name of the GitHub app"
    )
    updated_at: Union[datetime, None] = Field()


class WebhookDeploymentCreatedPropWorkflow(GitHubModel):
    """Workflow"""

    badge_url: str = Field()
    created_at: datetime = Field()
    html_url: str = Field()
    id: int = Field()
    name: str = Field()
    node_id: str = Field()
    path: str = Field()
    state: str = Field()
    updated_at: datetime = Field()
    url: str = Field()


class WebhookDeploymentCreatedPropWorkflowRunPropActor(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentCreatedPropWorkflowRunPropHeadRepository(GitHubModel):
    """WebhookDeploymentCreatedPropWorkflowRunPropHeadRepository"""

    archive_url: Missing[str] = Field(default=UNSET)
    assignees_url: Missing[str] = Field(default=UNSET)
    blobs_url: Missing[str] = Field(default=UNSET)
    branches_url: Missing[str] = Field(default=UNSET)
    collaborators_url: Missing[str] = Field(default=UNSET)
    comments_url: Missing[str] = Field(default=UNSET)
    commits_url: Missing[str] = Field(default=UNSET)
    compare_url: Missing[str] = Field(default=UNSET)
    contents_url: Missing[str] = Field(default=UNSET)
    contributors_url: Missing[str] = Field(default=UNSET)
    deployments_url: Missing[str] = Field(default=UNSET)
    description: Missing[None] = Field(default=UNSET)
    downloads_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    fork: Missing[bool] = Field(default=UNSET)
    forks_url: Missing[str] = Field(default=UNSET)
    full_name: Missing[str] = Field(default=UNSET)
    git_commits_url: Missing[str] = Field(default=UNSET)
    git_refs_url: Missing[str] = Field(default=UNSET)
    git_tags_url: Missing[str] = Field(default=UNSET)
    hooks_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    issue_comment_url: Missing[str] = Field(default=UNSET)
    issue_events_url: Missing[str] = Field(default=UNSET)
    issues_url: Missing[str] = Field(default=UNSET)
    keys_url: Missing[str] = Field(default=UNSET)
    labels_url: Missing[str] = Field(default=UNSET)
    languages_url: Missing[str] = Field(default=UNSET)
    merges_url: Missing[str] = Field(default=UNSET)
    milestones_url: Missing[str] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    notifications_url: Missing[str] = Field(default=UNSET)
    owner: Missing[
        WebhookDeploymentCreatedPropWorkflowRunPropHeadRepositoryPropOwner
    ] = Field(default=UNSET)
    private: Missing[bool] = Field(default=UNSET)
    pulls_url: Missing[str] = Field(default=UNSET)
    releases_url: Missing[str] = Field(default=UNSET)
    stargazers_url: Missing[str] = Field(default=UNSET)
    statuses_url: Missing[str] = Field(default=UNSET)
    subscribers_url: Missing[str] = Field(default=UNSET)
    subscription_url: Missing[str] = Field(default=UNSET)
    tags_url: Missing[str] = Field(default=UNSET)
    teams_url: Missing[str] = Field(default=UNSET)
    trees_url: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentCreatedPropWorkflowRunPropHeadRepositoryPropOwner(GitHubModel):
    """WebhookDeploymentCreatedPropWorkflowRunPropHeadRepositoryPropOwner"""

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentCreatedPropWorkflowRunPropPullRequestsItems(GitHubModel):
    """Check Run Pull Request"""

    base: WebhookDeploymentCreatedPropWorkflowRunPropPullRequestsItemsPropBase = Field()
    head: WebhookDeploymentCreatedPropWorkflowRunPropPullRequestsItemsPropHead = Field()
    id: int = Field()
    number: int = Field()
    url: str = Field()


class WebhookDeploymentCreatedPropWorkflowRunPropPullRequestsItemsPropBase(GitHubModel):
    """WebhookDeploymentCreatedPropWorkflowRunPropPullRequestsItemsPropBase"""

    ref: str = Field()
    repo: WebhookDeploymentCreatedPropWorkflowRunPropPullRequestsItemsPropBasePropRepo = Field(
        title="Repo Ref"
    )
    sha: str = Field()


class WebhookDeploymentCreatedPropWorkflowRunPropPullRequestsItemsPropBasePropRepo(
    GitHubModel
):
    """Repo Ref"""

    id: int = Field()
    name: str = Field()
    url: str = Field()


class WebhookDeploymentCreatedPropWorkflowRunPropPullRequestsItemsPropHead(GitHubModel):
    """WebhookDeploymentCreatedPropWorkflowRunPropPullRequestsItemsPropHead"""

    ref: str = Field()
    repo: WebhookDeploymentCreatedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepo = Field(
        title="Repo Ref"
    )
    sha: str = Field()


class WebhookDeploymentCreatedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepo(
    GitHubModel
):
    """Repo Ref"""

    id: int = Field()
    name: str = Field()
    url: str = Field()


class WebhookDeploymentCreatedPropWorkflowRunPropReferencedWorkflowsItems(GitHubModel):
    """WebhookDeploymentCreatedPropWorkflowRunPropReferencedWorkflowsItems"""

    path: str = Field()
    ref: Missing[str] = Field(default=UNSET)
    sha: str = Field()


class WebhookDeploymentCreatedPropWorkflowRunPropRepository(GitHubModel):
    """WebhookDeploymentCreatedPropWorkflowRunPropRepository"""

    archive_url: Missing[str] = Field(default=UNSET)
    assignees_url: Missing[str] = Field(default=UNSET)
    blobs_url: Missing[str] = Field(default=UNSET)
    branches_url: Missing[str] = Field(default=UNSET)
    collaborators_url: Missing[str] = Field(default=UNSET)
    comments_url: Missing[str] = Field(default=UNSET)
    commits_url: Missing[str] = Field(default=UNSET)
    compare_url: Missing[str] = Field(default=UNSET)
    contents_url: Missing[str] = Field(default=UNSET)
    contributors_url: Missing[str] = Field(default=UNSET)
    deployments_url: Missing[str] = Field(default=UNSET)
    description: Missing[None] = Field(default=UNSET)
    downloads_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    fork: Missing[bool] = Field(default=UNSET)
    forks_url: Missing[str] = Field(default=UNSET)
    full_name: Missing[str] = Field(default=UNSET)
    git_commits_url: Missing[str] = Field(default=UNSET)
    git_refs_url: Missing[str] = Field(default=UNSET)
    git_tags_url: Missing[str] = Field(default=UNSET)
    hooks_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    issue_comment_url: Missing[str] = Field(default=UNSET)
    issue_events_url: Missing[str] = Field(default=UNSET)
    issues_url: Missing[str] = Field(default=UNSET)
    keys_url: Missing[str] = Field(default=UNSET)
    labels_url: Missing[str] = Field(default=UNSET)
    languages_url: Missing[str] = Field(default=UNSET)
    merges_url: Missing[str] = Field(default=UNSET)
    milestones_url: Missing[str] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    notifications_url: Missing[str] = Field(default=UNSET)
    owner: Missing[
        WebhookDeploymentCreatedPropWorkflowRunPropRepositoryPropOwner
    ] = Field(default=UNSET)
    private: Missing[bool] = Field(default=UNSET)
    pulls_url: Missing[str] = Field(default=UNSET)
    releases_url: Missing[str] = Field(default=UNSET)
    stargazers_url: Missing[str] = Field(default=UNSET)
    statuses_url: Missing[str] = Field(default=UNSET)
    subscribers_url: Missing[str] = Field(default=UNSET)
    subscription_url: Missing[str] = Field(default=UNSET)
    tags_url: Missing[str] = Field(default=UNSET)
    teams_url: Missing[str] = Field(default=UNSET)
    trees_url: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentCreatedPropWorkflowRunPropRepositoryPropOwner(GitHubModel):
    """WebhookDeploymentCreatedPropWorkflowRunPropRepositoryPropOwner"""

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentCreatedPropWorkflowRunPropTriggeringActor(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentCreatedPropWorkflowRun(GitHubModel):
    """Deployment Workflow Run"""

    actor: Union[WebhookDeploymentCreatedPropWorkflowRunPropActor, None] = Field(
        title="User"
    )
    artifacts_url: Missing[str] = Field(default=UNSET)
    cancel_url: Missing[str] = Field(default=UNSET)
    check_suite_id: int = Field()
    check_suite_node_id: str = Field()
    check_suite_url: Missing[str] = Field(default=UNSET)
    conclusion: Union[
        None,
        Literal[
            "success",
            "failure",
            "neutral",
            "cancelled",
            "timed_out",
            "action_required",
            "stale",
        ],
    ] = Field()
    created_at: datetime = Field()
    display_title: str = Field()
    event: str = Field()
    head_branch: str = Field()
    head_commit: Missing[None] = Field(default=UNSET)
    head_repository: Missing[
        WebhookDeploymentCreatedPropWorkflowRunPropHeadRepository
    ] = Field(default=UNSET)
    head_sha: str = Field()
    html_url: str = Field()
    id: int = Field()
    jobs_url: Missing[str] = Field(default=UNSET)
    logs_url: Missing[str] = Field(default=UNSET)
    name: str = Field()
    node_id: str = Field()
    path: str = Field()
    previous_attempt_url: Missing[None] = Field(default=UNSET)
    pull_requests: List[
        WebhookDeploymentCreatedPropWorkflowRunPropPullRequestsItems
    ] = Field()
    referenced_workflows: Missing[
        Union[
            List[WebhookDeploymentCreatedPropWorkflowRunPropReferencedWorkflowsItems],
            None,
        ]
    ] = Field(default=UNSET)
    repository: Missing[WebhookDeploymentCreatedPropWorkflowRunPropRepository] = Field(
        default=UNSET
    )
    rerun_url: Missing[str] = Field(default=UNSET)
    run_attempt: int = Field()
    run_number: int = Field()
    run_started_at: datetime = Field()
    status: Literal[
        "requested", "in_progress", "completed", "queued", "waiting", "pending"
    ] = Field()
    triggering_actor: Missing[
        Union[WebhookDeploymentCreatedPropWorkflowRunPropTriggeringActor, None]
    ] = Field(default=UNSET, title="User")
    updated_at: datetime = Field()
    url: str = Field()
    workflow_id: int = Field()
    workflow_url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentProtectionRuleRequested(GitHubModel):
    """deployment protection rule requested event"""

    action: Missing[Literal["requested"]] = Field(default=UNSET)
    environment: Missing[str] = Field(
        default=UNSET,
        description="The name of the environment that has the deployment protection rule.",
    )
    event: Missing[str] = Field(
        default=UNSET,
        description="The event that triggered the deployment protection rule.",
    )
    deployment_callback_url: Missing[str] = Field(
        default=UNSET, description="The URL to review the deployment protection rule."
    )
    deployment: Missing[Deployment] = Field(
        default=UNSET,
        title="Deployment",
        description="A request for a specific ref(branch,sha,tag) to be deployed",
    )
    pull_requests: Missing[List[PullRequest]] = Field(default=UNSET)
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    sender: Missing[SimpleUserWebhooks] = Field(
        default=UNSET,
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookDeploymentReviewApproved(GitHubModel):
    """WebhookDeploymentReviewApproved"""

    action: Literal["approved"] = Field()
    approver: Missing[WebhookDeploymentReviewApprovedPropApprover] = Field(
        default=UNSET
    )
    comment: Missing[str] = Field(default=UNSET)
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: OrganizationSimpleWebhooks = Field(
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    reviewers: Missing[List[WebhookDeploymentReviewApprovedPropReviewersItems]] = Field(
        default=UNSET
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )
    since: str = Field()
    workflow_job_run: Missing[
        WebhookDeploymentReviewApprovedPropWorkflowJobRun
    ] = Field(default=UNSET)
    workflow_job_runs: Missing[
        List[WebhookDeploymentReviewApprovedPropWorkflowJobRunsItems]
    ] = Field(default=UNSET)
    workflow_run: Union[WebhookDeploymentReviewApprovedPropWorkflowRun, None] = Field(
        title="Deployment Workflow Run"
    )


class WebhookDeploymentReviewApprovedPropApprover(GitHubModel):
    """WebhookDeploymentReviewApprovedPropApprover"""

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentReviewApprovedPropReviewersItems(GitHubModel):
    """WebhookDeploymentReviewApprovedPropReviewersItems"""

    reviewer: Missing[
        Union[WebhookDeploymentReviewApprovedPropReviewersItemsPropReviewer, None]
    ] = Field(default=UNSET, title="User")
    type: Missing[Literal["User"]] = Field(default=UNSET)


class WebhookDeploymentReviewApprovedPropReviewersItemsPropReviewer(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentReviewApprovedPropWorkflowJobRun(GitHubModel):
    """WebhookDeploymentReviewApprovedPropWorkflowJobRun"""

    conclusion: None = Field()
    created_at: str = Field()
    environment: str = Field()
    html_url: str = Field()
    id: int = Field()
    name: None = Field()
    status: str = Field()
    updated_at: str = Field()


class WebhookDeploymentReviewApprovedPropWorkflowJobRunsItems(GitHubModel):
    """WebhookDeploymentReviewApprovedPropWorkflowJobRunsItems"""

    conclusion: Missing[None] = Field(default=UNSET)
    created_at: Missing[str] = Field(default=UNSET)
    environment: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    name: Missing[Union[str, None]] = Field(default=UNSET)
    status: Missing[str] = Field(default=UNSET)
    updated_at: Missing[str] = Field(default=UNSET)


class WebhookDeploymentReviewApprovedPropWorkflowRunPropActor(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentReviewApprovedPropWorkflowRunPropHeadCommit(GitHubModel):
    """WebhookDeploymentReviewApprovedPropWorkflowRunPropHeadCommit"""


class WebhookDeploymentReviewApprovedPropWorkflowRunPropHeadRepository(GitHubModel):
    """WebhookDeploymentReviewApprovedPropWorkflowRunPropHeadRepository"""

    archive_url: Missing[str] = Field(default=UNSET)
    assignees_url: Missing[str] = Field(default=UNSET)
    blobs_url: Missing[str] = Field(default=UNSET)
    branches_url: Missing[str] = Field(default=UNSET)
    collaborators_url: Missing[str] = Field(default=UNSET)
    comments_url: Missing[str] = Field(default=UNSET)
    commits_url: Missing[str] = Field(default=UNSET)
    compare_url: Missing[str] = Field(default=UNSET)
    contents_url: Missing[str] = Field(default=UNSET)
    contributors_url: Missing[str] = Field(default=UNSET)
    deployments_url: Missing[str] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(default=UNSET)
    downloads_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    fork: Missing[bool] = Field(default=UNSET)
    forks_url: Missing[str] = Field(default=UNSET)
    full_name: Missing[str] = Field(default=UNSET)
    git_commits_url: Missing[str] = Field(default=UNSET)
    git_refs_url: Missing[str] = Field(default=UNSET)
    git_tags_url: Missing[str] = Field(default=UNSET)
    hooks_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    issue_comment_url: Missing[str] = Field(default=UNSET)
    issue_events_url: Missing[str] = Field(default=UNSET)
    issues_url: Missing[str] = Field(default=UNSET)
    keys_url: Missing[str] = Field(default=UNSET)
    labels_url: Missing[str] = Field(default=UNSET)
    languages_url: Missing[str] = Field(default=UNSET)
    merges_url: Missing[str] = Field(default=UNSET)
    milestones_url: Missing[str] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    notifications_url: Missing[str] = Field(default=UNSET)
    owner: Missing[
        WebhookDeploymentReviewApprovedPropWorkflowRunPropHeadRepositoryPropOwner
    ] = Field(default=UNSET)
    private: Missing[bool] = Field(default=UNSET)
    pulls_url: Missing[str] = Field(default=UNSET)
    releases_url: Missing[str] = Field(default=UNSET)
    stargazers_url: Missing[str] = Field(default=UNSET)
    statuses_url: Missing[str] = Field(default=UNSET)
    subscribers_url: Missing[str] = Field(default=UNSET)
    subscription_url: Missing[str] = Field(default=UNSET)
    tags_url: Missing[str] = Field(default=UNSET)
    teams_url: Missing[str] = Field(default=UNSET)
    trees_url: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentReviewApprovedPropWorkflowRunPropHeadRepositoryPropOwner(
    GitHubModel
):
    """WebhookDeploymentReviewApprovedPropWorkflowRunPropHeadRepositoryPropOwner"""

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentReviewApprovedPropWorkflowRunPropPullRequestsItems(GitHubModel):
    """Check Run Pull Request"""

    base: WebhookDeploymentReviewApprovedPropWorkflowRunPropPullRequestsItemsPropBase = (
        Field()
    )
    head: WebhookDeploymentReviewApprovedPropWorkflowRunPropPullRequestsItemsPropHead = (
        Field()
    )
    id: int = Field()
    number: int = Field()
    url: str = Field()


class WebhookDeploymentReviewApprovedPropWorkflowRunPropPullRequestsItemsPropBase(
    GitHubModel
):
    """WebhookDeploymentReviewApprovedPropWorkflowRunPropPullRequestsItemsPropBase"""

    ref: str = Field()
    repo: WebhookDeploymentReviewApprovedPropWorkflowRunPropPullRequestsItemsPropBasePropRepo = Field(
        title="Repo Ref"
    )
    sha: str = Field()


class WebhookDeploymentReviewApprovedPropWorkflowRunPropPullRequestsItemsPropBasePropRepo(
    GitHubModel
):
    """Repo Ref"""

    id: int = Field()
    name: str = Field()
    url: str = Field()


class WebhookDeploymentReviewApprovedPropWorkflowRunPropPullRequestsItemsPropHead(
    GitHubModel
):
    """WebhookDeploymentReviewApprovedPropWorkflowRunPropPullRequestsItemsPropHead"""

    ref: str = Field()
    repo: WebhookDeploymentReviewApprovedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepo = Field(
        title="Repo Ref"
    )
    sha: str = Field()


class WebhookDeploymentReviewApprovedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepo(
    GitHubModel
):
    """Repo Ref"""

    id: int = Field()
    name: str = Field()
    url: str = Field()


class WebhookDeploymentReviewApprovedPropWorkflowRunPropReferencedWorkflowsItems(
    GitHubModel
):
    """WebhookDeploymentReviewApprovedPropWorkflowRunPropReferencedWorkflowsItems"""

    path: str = Field()
    ref: Missing[str] = Field(default=UNSET)
    sha: str = Field()


class WebhookDeploymentReviewApprovedPropWorkflowRunPropRepository(GitHubModel):
    """WebhookDeploymentReviewApprovedPropWorkflowRunPropRepository"""

    archive_url: Missing[str] = Field(default=UNSET)
    assignees_url: Missing[str] = Field(default=UNSET)
    blobs_url: Missing[str] = Field(default=UNSET)
    branches_url: Missing[str] = Field(default=UNSET)
    collaborators_url: Missing[str] = Field(default=UNSET)
    comments_url: Missing[str] = Field(default=UNSET)
    commits_url: Missing[str] = Field(default=UNSET)
    compare_url: Missing[str] = Field(default=UNSET)
    contents_url: Missing[str] = Field(default=UNSET)
    contributors_url: Missing[str] = Field(default=UNSET)
    deployments_url: Missing[str] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(default=UNSET)
    downloads_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    fork: Missing[bool] = Field(default=UNSET)
    forks_url: Missing[str] = Field(default=UNSET)
    full_name: Missing[str] = Field(default=UNSET)
    git_commits_url: Missing[str] = Field(default=UNSET)
    git_refs_url: Missing[str] = Field(default=UNSET)
    git_tags_url: Missing[str] = Field(default=UNSET)
    hooks_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    issue_comment_url: Missing[str] = Field(default=UNSET)
    issue_events_url: Missing[str] = Field(default=UNSET)
    issues_url: Missing[str] = Field(default=UNSET)
    keys_url: Missing[str] = Field(default=UNSET)
    labels_url: Missing[str] = Field(default=UNSET)
    languages_url: Missing[str] = Field(default=UNSET)
    merges_url: Missing[str] = Field(default=UNSET)
    milestones_url: Missing[str] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    notifications_url: Missing[str] = Field(default=UNSET)
    owner: Missing[
        WebhookDeploymentReviewApprovedPropWorkflowRunPropRepositoryPropOwner
    ] = Field(default=UNSET)
    private: Missing[bool] = Field(default=UNSET)
    pulls_url: Missing[str] = Field(default=UNSET)
    releases_url: Missing[str] = Field(default=UNSET)
    stargazers_url: Missing[str] = Field(default=UNSET)
    statuses_url: Missing[str] = Field(default=UNSET)
    subscribers_url: Missing[str] = Field(default=UNSET)
    subscription_url: Missing[str] = Field(default=UNSET)
    tags_url: Missing[str] = Field(default=UNSET)
    teams_url: Missing[str] = Field(default=UNSET)
    trees_url: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentReviewApprovedPropWorkflowRunPropRepositoryPropOwner(
    GitHubModel
):
    """WebhookDeploymentReviewApprovedPropWorkflowRunPropRepositoryPropOwner"""

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentReviewApprovedPropWorkflowRunPropTriggeringActor(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentReviewApprovedPropWorkflowRun(GitHubModel):
    """Deployment Workflow Run"""

    actor: Union[WebhookDeploymentReviewApprovedPropWorkflowRunPropActor, None] = Field(
        title="User"
    )
    artifacts_url: Missing[str] = Field(default=UNSET)
    cancel_url: Missing[str] = Field(default=UNSET)
    check_suite_id: int = Field()
    check_suite_node_id: str = Field()
    check_suite_url: Missing[str] = Field(default=UNSET)
    conclusion: Union[
        None,
        Literal[
            "success",
            "failure",
            "neutral",
            "cancelled",
            "timed_out",
            "action_required",
            "stale",
        ],
    ] = Field()
    created_at: datetime = Field()
    display_title: str = Field()
    event: str = Field()
    head_branch: str = Field()
    head_commit: Missing[
        Union[WebhookDeploymentReviewApprovedPropWorkflowRunPropHeadCommit, None]
    ] = Field(default=UNSET)
    head_repository: Missing[
        WebhookDeploymentReviewApprovedPropWorkflowRunPropHeadRepository
    ] = Field(default=UNSET)
    head_sha: str = Field()
    html_url: str = Field()
    id: int = Field()
    jobs_url: Missing[str] = Field(default=UNSET)
    logs_url: Missing[str] = Field(default=UNSET)
    name: str = Field()
    node_id: str = Field()
    path: str = Field()
    previous_attempt_url: Missing[Union[str, None]] = Field(default=UNSET)
    pull_requests: List[
        WebhookDeploymentReviewApprovedPropWorkflowRunPropPullRequestsItems
    ] = Field()
    referenced_workflows: Missing[
        Union[
            List[
                WebhookDeploymentReviewApprovedPropWorkflowRunPropReferencedWorkflowsItems
            ],
            None,
        ]
    ] = Field(default=UNSET)
    repository: Missing[
        WebhookDeploymentReviewApprovedPropWorkflowRunPropRepository
    ] = Field(default=UNSET)
    rerun_url: Missing[str] = Field(default=UNSET)
    run_attempt: int = Field()
    run_number: int = Field()
    run_started_at: datetime = Field()
    status: Literal[
        "requested", "in_progress", "completed", "queued", "waiting", "pending"
    ] = Field()
    triggering_actor: Union[
        WebhookDeploymentReviewApprovedPropWorkflowRunPropTriggeringActor, None
    ] = Field(title="User")
    updated_at: datetime = Field()
    url: str = Field()
    workflow_id: int = Field()
    workflow_url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentReviewRejected(GitHubModel):
    """WebhookDeploymentReviewRejected"""

    action: Literal["rejected"] = Field()
    approver: Missing[WebhookDeploymentReviewRejectedPropApprover] = Field(
        default=UNSET
    )
    comment: Missing[str] = Field(default=UNSET)
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: OrganizationSimpleWebhooks = Field(
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    reviewers: Missing[List[WebhookDeploymentReviewRejectedPropReviewersItems]] = Field(
        default=UNSET
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )
    since: str = Field()
    workflow_job_run: Missing[
        WebhookDeploymentReviewRejectedPropWorkflowJobRun
    ] = Field(default=UNSET)
    workflow_job_runs: Missing[
        List[WebhookDeploymentReviewRejectedPropWorkflowJobRunsItems]
    ] = Field(default=UNSET)
    workflow_run: Union[WebhookDeploymentReviewRejectedPropWorkflowRun, None] = Field(
        title="Deployment Workflow Run"
    )


class WebhookDeploymentReviewRejectedPropApprover(GitHubModel):
    """WebhookDeploymentReviewRejectedPropApprover"""

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentReviewRejectedPropReviewersItems(GitHubModel):
    """WebhookDeploymentReviewRejectedPropReviewersItems"""

    reviewer: Missing[
        Union[WebhookDeploymentReviewRejectedPropReviewersItemsPropReviewer, None]
    ] = Field(default=UNSET, title="User")
    type: Missing[Literal["User"]] = Field(default=UNSET)


class WebhookDeploymentReviewRejectedPropReviewersItemsPropReviewer(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentReviewRejectedPropWorkflowJobRun(GitHubModel):
    """WebhookDeploymentReviewRejectedPropWorkflowJobRun"""

    conclusion: None = Field()
    created_at: str = Field()
    environment: str = Field()
    html_url: str = Field()
    id: int = Field()
    name: None = Field()
    status: str = Field()
    updated_at: str = Field()


class WebhookDeploymentReviewRejectedPropWorkflowJobRunsItems(GitHubModel):
    """WebhookDeploymentReviewRejectedPropWorkflowJobRunsItems"""

    conclusion: Missing[Union[str, None]] = Field(default=UNSET)
    created_at: Missing[str] = Field(default=UNSET)
    environment: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    name: Missing[Union[str, None]] = Field(default=UNSET)
    status: Missing[str] = Field(default=UNSET)
    updated_at: Missing[str] = Field(default=UNSET)


class WebhookDeploymentReviewRejectedPropWorkflowRunPropActor(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentReviewRejectedPropWorkflowRunPropHeadCommit(GitHubModel):
    """WebhookDeploymentReviewRejectedPropWorkflowRunPropHeadCommit"""


class WebhookDeploymentReviewRejectedPropWorkflowRunPropHeadRepository(GitHubModel):
    """WebhookDeploymentReviewRejectedPropWorkflowRunPropHeadRepository"""

    archive_url: Missing[str] = Field(default=UNSET)
    assignees_url: Missing[str] = Field(default=UNSET)
    blobs_url: Missing[str] = Field(default=UNSET)
    branches_url: Missing[str] = Field(default=UNSET)
    collaborators_url: Missing[str] = Field(default=UNSET)
    comments_url: Missing[str] = Field(default=UNSET)
    commits_url: Missing[str] = Field(default=UNSET)
    compare_url: Missing[str] = Field(default=UNSET)
    contents_url: Missing[str] = Field(default=UNSET)
    contributors_url: Missing[str] = Field(default=UNSET)
    deployments_url: Missing[str] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(default=UNSET)
    downloads_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    fork: Missing[bool] = Field(default=UNSET)
    forks_url: Missing[str] = Field(default=UNSET)
    full_name: Missing[str] = Field(default=UNSET)
    git_commits_url: Missing[str] = Field(default=UNSET)
    git_refs_url: Missing[str] = Field(default=UNSET)
    git_tags_url: Missing[str] = Field(default=UNSET)
    hooks_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    issue_comment_url: Missing[str] = Field(default=UNSET)
    issue_events_url: Missing[str] = Field(default=UNSET)
    issues_url: Missing[str] = Field(default=UNSET)
    keys_url: Missing[str] = Field(default=UNSET)
    labels_url: Missing[str] = Field(default=UNSET)
    languages_url: Missing[str] = Field(default=UNSET)
    merges_url: Missing[str] = Field(default=UNSET)
    milestones_url: Missing[str] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    notifications_url: Missing[str] = Field(default=UNSET)
    owner: Missing[
        WebhookDeploymentReviewRejectedPropWorkflowRunPropHeadRepositoryPropOwner
    ] = Field(default=UNSET)
    private: Missing[bool] = Field(default=UNSET)
    pulls_url: Missing[str] = Field(default=UNSET)
    releases_url: Missing[str] = Field(default=UNSET)
    stargazers_url: Missing[str] = Field(default=UNSET)
    statuses_url: Missing[str] = Field(default=UNSET)
    subscribers_url: Missing[str] = Field(default=UNSET)
    subscription_url: Missing[str] = Field(default=UNSET)
    tags_url: Missing[str] = Field(default=UNSET)
    teams_url: Missing[str] = Field(default=UNSET)
    trees_url: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentReviewRejectedPropWorkflowRunPropHeadRepositoryPropOwner(
    GitHubModel
):
    """WebhookDeploymentReviewRejectedPropWorkflowRunPropHeadRepositoryPropOwner"""

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentReviewRejectedPropWorkflowRunPropPullRequestsItems(GitHubModel):
    """Check Run Pull Request"""

    base: WebhookDeploymentReviewRejectedPropWorkflowRunPropPullRequestsItemsPropBase = (
        Field()
    )
    head: WebhookDeploymentReviewRejectedPropWorkflowRunPropPullRequestsItemsPropHead = (
        Field()
    )
    id: int = Field()
    number: int = Field()
    url: str = Field()


class WebhookDeploymentReviewRejectedPropWorkflowRunPropPullRequestsItemsPropBase(
    GitHubModel
):
    """WebhookDeploymentReviewRejectedPropWorkflowRunPropPullRequestsItemsPropBase"""

    ref: str = Field()
    repo: WebhookDeploymentReviewRejectedPropWorkflowRunPropPullRequestsItemsPropBasePropRepo = Field(
        title="Repo Ref"
    )
    sha: str = Field()


class WebhookDeploymentReviewRejectedPropWorkflowRunPropPullRequestsItemsPropBasePropRepo(
    GitHubModel
):
    """Repo Ref"""

    id: int = Field()
    name: str = Field()
    url: str = Field()


class WebhookDeploymentReviewRejectedPropWorkflowRunPropPullRequestsItemsPropHead(
    GitHubModel
):
    """WebhookDeploymentReviewRejectedPropWorkflowRunPropPullRequestsItemsPropHead"""

    ref: str = Field()
    repo: WebhookDeploymentReviewRejectedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepo = Field(
        title="Repo Ref"
    )
    sha: str = Field()


class WebhookDeploymentReviewRejectedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepo(
    GitHubModel
):
    """Repo Ref"""

    id: int = Field()
    name: str = Field()
    url: str = Field()


class WebhookDeploymentReviewRejectedPropWorkflowRunPropReferencedWorkflowsItems(
    GitHubModel
):
    """WebhookDeploymentReviewRejectedPropWorkflowRunPropReferencedWorkflowsItems"""

    path: str = Field()
    ref: Missing[str] = Field(default=UNSET)
    sha: str = Field()


class WebhookDeploymentReviewRejectedPropWorkflowRunPropRepository(GitHubModel):
    """WebhookDeploymentReviewRejectedPropWorkflowRunPropRepository"""

    archive_url: Missing[str] = Field(default=UNSET)
    assignees_url: Missing[str] = Field(default=UNSET)
    blobs_url: Missing[str] = Field(default=UNSET)
    branches_url: Missing[str] = Field(default=UNSET)
    collaborators_url: Missing[str] = Field(default=UNSET)
    comments_url: Missing[str] = Field(default=UNSET)
    commits_url: Missing[str] = Field(default=UNSET)
    compare_url: Missing[str] = Field(default=UNSET)
    contents_url: Missing[str] = Field(default=UNSET)
    contributors_url: Missing[str] = Field(default=UNSET)
    deployments_url: Missing[str] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(default=UNSET)
    downloads_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    fork: Missing[bool] = Field(default=UNSET)
    forks_url: Missing[str] = Field(default=UNSET)
    full_name: Missing[str] = Field(default=UNSET)
    git_commits_url: Missing[str] = Field(default=UNSET)
    git_refs_url: Missing[str] = Field(default=UNSET)
    git_tags_url: Missing[str] = Field(default=UNSET)
    hooks_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    issue_comment_url: Missing[str] = Field(default=UNSET)
    issue_events_url: Missing[str] = Field(default=UNSET)
    issues_url: Missing[str] = Field(default=UNSET)
    keys_url: Missing[str] = Field(default=UNSET)
    labels_url: Missing[str] = Field(default=UNSET)
    languages_url: Missing[str] = Field(default=UNSET)
    merges_url: Missing[str] = Field(default=UNSET)
    milestones_url: Missing[str] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    notifications_url: Missing[str] = Field(default=UNSET)
    owner: Missing[
        WebhookDeploymentReviewRejectedPropWorkflowRunPropRepositoryPropOwner
    ] = Field(default=UNSET)
    private: Missing[bool] = Field(default=UNSET)
    pulls_url: Missing[str] = Field(default=UNSET)
    releases_url: Missing[str] = Field(default=UNSET)
    stargazers_url: Missing[str] = Field(default=UNSET)
    statuses_url: Missing[str] = Field(default=UNSET)
    subscribers_url: Missing[str] = Field(default=UNSET)
    subscription_url: Missing[str] = Field(default=UNSET)
    tags_url: Missing[str] = Field(default=UNSET)
    teams_url: Missing[str] = Field(default=UNSET)
    trees_url: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentReviewRejectedPropWorkflowRunPropRepositoryPropOwner(
    GitHubModel
):
    """WebhookDeploymentReviewRejectedPropWorkflowRunPropRepositoryPropOwner"""

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentReviewRejectedPropWorkflowRunPropTriggeringActor(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentReviewRejectedPropWorkflowRun(GitHubModel):
    """Deployment Workflow Run"""

    actor: Union[WebhookDeploymentReviewRejectedPropWorkflowRunPropActor, None] = Field(
        title="User"
    )
    artifacts_url: Missing[str] = Field(default=UNSET)
    cancel_url: Missing[str] = Field(default=UNSET)
    check_suite_id: int = Field()
    check_suite_node_id: str = Field()
    check_suite_url: Missing[str] = Field(default=UNSET)
    conclusion: Union[
        None,
        Literal[
            "success",
            "failure",
            "neutral",
            "cancelled",
            "timed_out",
            "action_required",
            "stale",
        ],
    ] = Field()
    created_at: datetime = Field()
    event: str = Field()
    head_branch: str = Field()
    head_commit: Missing[
        Union[WebhookDeploymentReviewRejectedPropWorkflowRunPropHeadCommit, None]
    ] = Field(default=UNSET)
    head_repository: Missing[
        WebhookDeploymentReviewRejectedPropWorkflowRunPropHeadRepository
    ] = Field(default=UNSET)
    head_sha: str = Field()
    html_url: str = Field()
    id: int = Field()
    jobs_url: Missing[str] = Field(default=UNSET)
    logs_url: Missing[str] = Field(default=UNSET)
    name: str = Field()
    node_id: str = Field()
    path: str = Field()
    previous_attempt_url: Missing[Union[str, None]] = Field(default=UNSET)
    pull_requests: List[
        WebhookDeploymentReviewRejectedPropWorkflowRunPropPullRequestsItems
    ] = Field()
    referenced_workflows: Missing[
        Union[
            List[
                WebhookDeploymentReviewRejectedPropWorkflowRunPropReferencedWorkflowsItems
            ],
            None,
        ]
    ] = Field(default=UNSET)
    repository: Missing[
        WebhookDeploymentReviewRejectedPropWorkflowRunPropRepository
    ] = Field(default=UNSET)
    rerun_url: Missing[str] = Field(default=UNSET)
    run_attempt: int = Field()
    run_number: int = Field()
    run_started_at: datetime = Field()
    status: Literal[
        "requested", "in_progress", "completed", "queued", "waiting"
    ] = Field()
    triggering_actor: Union[
        WebhookDeploymentReviewRejectedPropWorkflowRunPropTriggeringActor, None
    ] = Field(title="User")
    updated_at: datetime = Field()
    url: str = Field()
    workflow_id: int = Field()
    workflow_url: Missing[str] = Field(default=UNSET)
    display_title: str = Field()


class WebhookDeploymentReviewRequested(GitHubModel):
    """WebhookDeploymentReviewRequested"""

    action: Literal["requested"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    environment: str = Field()
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: OrganizationSimpleWebhooks = Field(
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    requestor: Union[WebhookDeploymentReviewRequestedPropRequestor, None] = Field(
        title="User"
    )
    reviewers: List[WebhookDeploymentReviewRequestedPropReviewersItems] = Field()
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )
    since: str = Field()
    workflow_job_run: WebhookDeploymentReviewRequestedPropWorkflowJobRun = Field()
    workflow_run: Union[WebhookDeploymentReviewRequestedPropWorkflowRun, None] = Field(
        title="Deployment Workflow Run"
    )


class WebhookDeploymentReviewRequestedPropRequestor(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentReviewRequestedPropReviewersItems(GitHubModel):
    """WebhookDeploymentReviewRequestedPropReviewersItems"""

    reviewer: Missing[
        Union[WebhookDeploymentReviewRequestedPropReviewersItemsPropReviewer, None]
    ] = Field(default=UNSET, title="User")
    type: Missing[Literal["User", "Team"]] = Field(default=UNSET)


class WebhookDeploymentReviewRequestedPropReviewersItemsPropReviewer(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: Missing[str] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentReviewRequestedPropWorkflowJobRun(GitHubModel):
    """WebhookDeploymentReviewRequestedPropWorkflowJobRun"""

    conclusion: None = Field()
    created_at: str = Field()
    environment: str = Field()
    html_url: str = Field()
    id: int = Field()
    name: Union[str, None] = Field()
    status: str = Field()
    updated_at: str = Field()


class WebhookDeploymentReviewRequestedPropWorkflowRunPropActor(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentReviewRequestedPropWorkflowRunPropHeadCommit(GitHubModel):
    """WebhookDeploymentReviewRequestedPropWorkflowRunPropHeadCommit"""


class WebhookDeploymentReviewRequestedPropWorkflowRunPropHeadRepository(GitHubModel):
    """WebhookDeploymentReviewRequestedPropWorkflowRunPropHeadRepository"""

    archive_url: Missing[str] = Field(default=UNSET)
    assignees_url: Missing[str] = Field(default=UNSET)
    blobs_url: Missing[str] = Field(default=UNSET)
    branches_url: Missing[str] = Field(default=UNSET)
    collaborators_url: Missing[str] = Field(default=UNSET)
    comments_url: Missing[str] = Field(default=UNSET)
    commits_url: Missing[str] = Field(default=UNSET)
    compare_url: Missing[str] = Field(default=UNSET)
    contents_url: Missing[str] = Field(default=UNSET)
    contributors_url: Missing[str] = Field(default=UNSET)
    deployments_url: Missing[str] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(default=UNSET)
    downloads_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    fork: Missing[bool] = Field(default=UNSET)
    forks_url: Missing[str] = Field(default=UNSET)
    full_name: Missing[str] = Field(default=UNSET)
    git_commits_url: Missing[str] = Field(default=UNSET)
    git_refs_url: Missing[str] = Field(default=UNSET)
    git_tags_url: Missing[str] = Field(default=UNSET)
    hooks_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    issue_comment_url: Missing[str] = Field(default=UNSET)
    issue_events_url: Missing[str] = Field(default=UNSET)
    issues_url: Missing[str] = Field(default=UNSET)
    keys_url: Missing[str] = Field(default=UNSET)
    labels_url: Missing[str] = Field(default=UNSET)
    languages_url: Missing[str] = Field(default=UNSET)
    merges_url: Missing[str] = Field(default=UNSET)
    milestones_url: Missing[str] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    notifications_url: Missing[str] = Field(default=UNSET)
    owner: Missing[
        WebhookDeploymentReviewRequestedPropWorkflowRunPropHeadRepositoryPropOwner
    ] = Field(default=UNSET)
    private: Missing[bool] = Field(default=UNSET)
    pulls_url: Missing[str] = Field(default=UNSET)
    releases_url: Missing[str] = Field(default=UNSET)
    stargazers_url: Missing[str] = Field(default=UNSET)
    statuses_url: Missing[str] = Field(default=UNSET)
    subscribers_url: Missing[str] = Field(default=UNSET)
    subscription_url: Missing[str] = Field(default=UNSET)
    tags_url: Missing[str] = Field(default=UNSET)
    teams_url: Missing[str] = Field(default=UNSET)
    trees_url: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentReviewRequestedPropWorkflowRunPropHeadRepositoryPropOwner(
    GitHubModel
):
    """WebhookDeploymentReviewRequestedPropWorkflowRunPropHeadRepositoryPropOwner"""

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentReviewRequestedPropWorkflowRunPropPullRequestsItems(GitHubModel):
    """Check Run Pull Request"""

    base: WebhookDeploymentReviewRequestedPropWorkflowRunPropPullRequestsItemsPropBase = (
        Field()
    )
    head: WebhookDeploymentReviewRequestedPropWorkflowRunPropPullRequestsItemsPropHead = (
        Field()
    )
    id: int = Field()
    number: int = Field()
    url: str = Field()


class WebhookDeploymentReviewRequestedPropWorkflowRunPropPullRequestsItemsPropBase(
    GitHubModel
):
    """WebhookDeploymentReviewRequestedPropWorkflowRunPropPullRequestsItemsPropBase"""

    ref: str = Field()
    repo: WebhookDeploymentReviewRequestedPropWorkflowRunPropPullRequestsItemsPropBasePropRepo = Field(
        title="Repo Ref"
    )
    sha: str = Field()


class WebhookDeploymentReviewRequestedPropWorkflowRunPropPullRequestsItemsPropBasePropRepo(
    GitHubModel
):
    """Repo Ref"""

    id: int = Field()
    name: str = Field()
    url: str = Field()


class WebhookDeploymentReviewRequestedPropWorkflowRunPropPullRequestsItemsPropHead(
    GitHubModel
):
    """WebhookDeploymentReviewRequestedPropWorkflowRunPropPullRequestsItemsPropHead"""

    ref: str = Field()
    repo: WebhookDeploymentReviewRequestedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepo = Field(
        title="Repo Ref"
    )
    sha: str = Field()


class WebhookDeploymentReviewRequestedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepo(
    GitHubModel
):
    """Repo Ref"""

    id: int = Field()
    name: str = Field()
    url: str = Field()


class WebhookDeploymentReviewRequestedPropWorkflowRunPropReferencedWorkflowsItems(
    GitHubModel
):
    """WebhookDeploymentReviewRequestedPropWorkflowRunPropReferencedWorkflowsItems"""

    path: str = Field()
    ref: Missing[str] = Field(default=UNSET)
    sha: str = Field()


class WebhookDeploymentReviewRequestedPropWorkflowRunPropRepository(GitHubModel):
    """WebhookDeploymentReviewRequestedPropWorkflowRunPropRepository"""

    archive_url: Missing[str] = Field(default=UNSET)
    assignees_url: Missing[str] = Field(default=UNSET)
    blobs_url: Missing[str] = Field(default=UNSET)
    branches_url: Missing[str] = Field(default=UNSET)
    collaborators_url: Missing[str] = Field(default=UNSET)
    comments_url: Missing[str] = Field(default=UNSET)
    commits_url: Missing[str] = Field(default=UNSET)
    compare_url: Missing[str] = Field(default=UNSET)
    contents_url: Missing[str] = Field(default=UNSET)
    contributors_url: Missing[str] = Field(default=UNSET)
    deployments_url: Missing[str] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(default=UNSET)
    downloads_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    fork: Missing[bool] = Field(default=UNSET)
    forks_url: Missing[str] = Field(default=UNSET)
    full_name: Missing[str] = Field(default=UNSET)
    git_commits_url: Missing[str] = Field(default=UNSET)
    git_refs_url: Missing[str] = Field(default=UNSET)
    git_tags_url: Missing[str] = Field(default=UNSET)
    hooks_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    issue_comment_url: Missing[str] = Field(default=UNSET)
    issue_events_url: Missing[str] = Field(default=UNSET)
    issues_url: Missing[str] = Field(default=UNSET)
    keys_url: Missing[str] = Field(default=UNSET)
    labels_url: Missing[str] = Field(default=UNSET)
    languages_url: Missing[str] = Field(default=UNSET)
    merges_url: Missing[str] = Field(default=UNSET)
    milestones_url: Missing[str] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    notifications_url: Missing[str] = Field(default=UNSET)
    owner: Missing[
        WebhookDeploymentReviewRequestedPropWorkflowRunPropRepositoryPropOwner
    ] = Field(default=UNSET)
    private: Missing[bool] = Field(default=UNSET)
    pulls_url: Missing[str] = Field(default=UNSET)
    releases_url: Missing[str] = Field(default=UNSET)
    stargazers_url: Missing[str] = Field(default=UNSET)
    statuses_url: Missing[str] = Field(default=UNSET)
    subscribers_url: Missing[str] = Field(default=UNSET)
    subscription_url: Missing[str] = Field(default=UNSET)
    tags_url: Missing[str] = Field(default=UNSET)
    teams_url: Missing[str] = Field(default=UNSET)
    trees_url: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentReviewRequestedPropWorkflowRunPropRepositoryPropOwner(
    GitHubModel
):
    """WebhookDeploymentReviewRequestedPropWorkflowRunPropRepositoryPropOwner"""

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentReviewRequestedPropWorkflowRunPropTriggeringActor(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentReviewRequestedPropWorkflowRun(GitHubModel):
    """Deployment Workflow Run"""

    actor: Union[
        WebhookDeploymentReviewRequestedPropWorkflowRunPropActor, None
    ] = Field(title="User")
    artifacts_url: Missing[str] = Field(default=UNSET)
    cancel_url: Missing[str] = Field(default=UNSET)
    check_suite_id: int = Field()
    check_suite_node_id: str = Field()
    check_suite_url: Missing[str] = Field(default=UNSET)
    conclusion: Union[
        None,
        Literal[
            "success",
            "failure",
            "neutral",
            "cancelled",
            "timed_out",
            "action_required",
            "stale",
        ],
    ] = Field()
    created_at: datetime = Field()
    event: str = Field()
    head_branch: str = Field()
    head_commit: Missing[
        Union[WebhookDeploymentReviewRequestedPropWorkflowRunPropHeadCommit, None]
    ] = Field(default=UNSET)
    head_repository: Missing[
        WebhookDeploymentReviewRequestedPropWorkflowRunPropHeadRepository
    ] = Field(default=UNSET)
    head_sha: str = Field()
    html_url: str = Field()
    id: int = Field()
    jobs_url: Missing[str] = Field(default=UNSET)
    logs_url: Missing[str] = Field(default=UNSET)
    name: str = Field()
    node_id: str = Field()
    path: str = Field()
    previous_attempt_url: Missing[Union[str, None]] = Field(default=UNSET)
    pull_requests: List[
        WebhookDeploymentReviewRequestedPropWorkflowRunPropPullRequestsItems
    ] = Field()
    referenced_workflows: Missing[
        Union[
            List[
                WebhookDeploymentReviewRequestedPropWorkflowRunPropReferencedWorkflowsItems
            ],
            None,
        ]
    ] = Field(default=UNSET)
    repository: Missing[
        WebhookDeploymentReviewRequestedPropWorkflowRunPropRepository
    ] = Field(default=UNSET)
    rerun_url: Missing[str] = Field(default=UNSET)
    run_attempt: int = Field()
    run_number: int = Field()
    run_started_at: datetime = Field()
    status: Literal[
        "requested", "in_progress", "completed", "queued", "waiting", "pending"
    ] = Field()
    triggering_actor: Union[
        WebhookDeploymentReviewRequestedPropWorkflowRunPropTriggeringActor, None
    ] = Field(title="User")
    updated_at: datetime = Field()
    url: str = Field()
    workflow_id: int = Field()
    workflow_url: Missing[str] = Field(default=UNSET)
    display_title: str = Field()


class WebhookDeploymentStatusCreated(GitHubModel):
    """deployment_status created event"""

    action: Literal["created"] = Field()
    check_run: Missing[Union[WebhookDeploymentStatusCreatedPropCheckRun, None]] = Field(
        default=UNSET
    )
    deployment: WebhookDeploymentStatusCreatedPropDeployment = Field(
        title="Deployment",
        description="The [deployment](https://docs.github.com/rest/deployments/deployments#list-deployments).",
    )
    deployment_status: WebhookDeploymentStatusCreatedPropDeploymentStatus = Field(
        description="The [deployment status](https://docs.github.com/rest/deployments/statuses#list-deployment-statuses)."
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )
    workflow: Missing[Union[WebhookDeploymentStatusCreatedPropWorkflow, None]] = Field(
        default=UNSET, title="Workflow"
    )
    workflow_run: Missing[
        Union[WebhookDeploymentStatusCreatedPropWorkflowRun, None]
    ] = Field(default=UNSET, title="Deployment Workflow Run")


class WebhookDeploymentStatusCreatedPropCheckRun(GitHubModel):
    """WebhookDeploymentStatusCreatedPropCheckRun"""

    completed_at: Union[datetime, None] = Field()
    conclusion: Union[
        None,
        Literal[
            "success",
            "failure",
            "neutral",
            "cancelled",
            "timed_out",
            "action_required",
            "stale",
            "skipped",
        ],
    ] = Field(
        description="The result of the completed check run. This value will be `null` until the check run has completed."
    )
    details_url: str = Field()
    external_id: str = Field()
    head_sha: str = Field(description="The SHA of the commit that is being checked.")
    html_url: str = Field()
    id: int = Field(description="The id of the check.")
    name: str = Field(description="The name of the check run.")
    node_id: str = Field()
    started_at: datetime = Field()
    status: Literal["queued", "in_progress", "completed", "waiting", "pending"] = Field(
        description="The current status of the check run. Can be `queued`, `in_progress`, or `completed`."
    )
    url: str = Field()


class WebhookDeploymentStatusCreatedPropDeployment(GitHubModel):
    """Deployment

    The [deployment](https://docs.github.com/rest/deployments/deployments#list-
    deployments).
    """

    created_at: str = Field()
    creator: Union[
        WebhookDeploymentStatusCreatedPropDeploymentPropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    environment: str = Field()
    id: int = Field()
    node_id: str = Field()
    original_environment: str = Field()
    payload: Union[
        str, WebhookDeploymentStatusCreatedPropDeploymentPropPayloadOneof1, None
    ] = Field()
    performed_via_github_app: Missing[
        Union[
            WebhookDeploymentStatusCreatedPropDeploymentPropPerformedViaGithubApp, None
        ]
    ] = Field(
        default=UNSET,
        title="App",
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
    )
    production_environment: Missing[bool] = Field(default=UNSET)
    ref: str = Field()
    repository_url: str = Field()
    sha: str = Field()
    statuses_url: str = Field()
    task: str = Field()
    transient_environment: Missing[bool] = Field(default=UNSET)
    updated_at: str = Field()
    url: str = Field()


class WebhookDeploymentStatusCreatedPropDeploymentPropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentStatusCreatedPropDeploymentPropPayloadOneof1(GitHubModel):
    """WebhookDeploymentStatusCreatedPropDeploymentPropPayloadOneof1"""


class WebhookDeploymentStatusCreatedPropDeploymentPropPerformedViaGithubAppPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentStatusCreatedPropDeploymentPropPerformedViaGithubAppPropPermissions(
    GitHubModel
):
    """WebhookDeploymentStatusCreatedPropDeploymentPropPerformedViaGithubAppPropPermiss
    ions

    The set of permissions for the GitHub app
    """

    actions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    administration: Missing[Literal["read", "write"]] = Field(default=UNSET)
    checks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    content_references: Missing[Literal["read", "write"]] = Field(default=UNSET)
    contents: Missing[Literal["read", "write"]] = Field(default=UNSET)
    deployments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    emails: Missing[Literal["read", "write"]] = Field(default=UNSET)
    environments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    issues: Missing[Literal["read", "write"]] = Field(default=UNSET)
    keys: Missing[Literal["read", "write"]] = Field(default=UNSET)
    members: Missing[Literal["read", "write"]] = Field(default=UNSET)
    metadata: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_administration: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_plan: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_projects: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_self_hosted_runners: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_user_blocking: Missing[Literal["read", "write"]] = Field(default=UNSET)
    packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pull_requests: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_projects: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secret_scanning_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_events: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_scanning_alert: Missing[Literal["read", "write"]] = Field(default=UNSET)
    single_file: Missing[Literal["read", "write"]] = Field(default=UNSET)
    statuses: Missing[Literal["read", "write"]] = Field(default=UNSET)
    team_discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    vulnerability_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    workflows: Missing[Literal["read", "write"]] = Field(default=UNSET)


class WebhookDeploymentStatusCreatedPropDeploymentPropPerformedViaGithubApp(
    GitHubModel
):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None] = Field()
    description: Union[str, None] = Field()
    events: Missing[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "merge_queue_entry",
                "workflow_job",
                "pull_request_review_thread",
                "secret_scanning_alert_location",
                "merge_group",
            ]
        ]
    ] = Field(default=UNSET, description="The list of events for the GitHub app")
    external_url: Union[str, None] = Field()
    html_url: str = Field()
    id: Union[int, None] = Field(description="Unique identifier of the GitHub app")
    name: str = Field(description="The name of the GitHub app")
    node_id: str = Field()
    owner: Union[
        WebhookDeploymentStatusCreatedPropDeploymentPropPerformedViaGithubAppPropOwner,
        None,
    ] = Field(title="User")
    permissions: Missing[
        WebhookDeploymentStatusCreatedPropDeploymentPropPerformedViaGithubAppPropPermissions
    ] = Field(default=UNSET, description="The set of permissions for the GitHub app")
    slug: Missing[str] = Field(
        default=UNSET, description="The slug name of the GitHub app"
    )
    updated_at: Union[datetime, None] = Field()


class WebhookDeploymentStatusCreatedPropDeploymentStatus(GitHubModel):
    """WebhookDeploymentStatusCreatedPropDeploymentStatus

    The [deployment status](https://docs.github.com/rest/deployments/statuses#list-
    deployment-statuses).
    """

    created_at: str = Field()
    creator: Union[
        WebhookDeploymentStatusCreatedPropDeploymentStatusPropCreator, None
    ] = Field(title="User")
    deployment_url: str = Field()
    description: str = Field(
        description="The optional human-readable description added to the status."
    )
    environment: str = Field()
    environment_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    log_url: Missing[str] = Field(default=UNSET)
    node_id: str = Field()
    performed_via_github_app: Missing[
        Union[
            WebhookDeploymentStatusCreatedPropDeploymentStatusPropPerformedViaGithubApp,
            None,
        ]
    ] = Field(
        default=UNSET,
        title="App",
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
    )
    repository_url: str = Field()
    state: str = Field(
        description="The new state. Can be `pending`, `success`, `failure`, or `error`."
    )
    target_url: str = Field(description="The optional link added to the status.")
    updated_at: str = Field()
    url: str = Field()


class WebhookDeploymentStatusCreatedPropDeploymentStatusPropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentStatusCreatedPropDeploymentStatusPropPerformedViaGithubAppPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentStatusCreatedPropDeploymentStatusPropPerformedViaGithubAppPropPermissions(
    GitHubModel
):
    """WebhookDeploymentStatusCreatedPropDeploymentStatusPropPerformedViaGithubAppPropP
    ermissions

    The set of permissions for the GitHub app
    """

    actions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    administration: Missing[Literal["read", "write"]] = Field(default=UNSET)
    checks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    content_references: Missing[Literal["read", "write"]] = Field(default=UNSET)
    contents: Missing[Literal["read", "write"]] = Field(default=UNSET)
    deployments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    emails: Missing[Literal["read", "write"]] = Field(default=UNSET)
    environments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    issues: Missing[Literal["read", "write"]] = Field(default=UNSET)
    keys: Missing[Literal["read", "write"]] = Field(default=UNSET)
    members: Missing[Literal["read", "write"]] = Field(default=UNSET)
    metadata: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_administration: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_plan: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_projects: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_self_hosted_runners: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_user_blocking: Missing[Literal["read", "write"]] = Field(default=UNSET)
    packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pull_requests: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_projects: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secret_scanning_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_events: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_scanning_alert: Missing[Literal["read", "write"]] = Field(default=UNSET)
    single_file: Missing[Literal["read", "write"]] = Field(default=UNSET)
    statuses: Missing[Literal["read", "write"]] = Field(default=UNSET)
    team_discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    vulnerability_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    workflows: Missing[Literal["read", "write"]] = Field(default=UNSET)


class WebhookDeploymentStatusCreatedPropDeploymentStatusPropPerformedViaGithubApp(
    GitHubModel
):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None] = Field()
    description: Union[str, None] = Field()
    events: Missing[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "pull_request_review_thread",
                "merge_queue_entry",
                "workflow_job",
                "merge_group",
                "secret_scanning_alert_location",
            ]
        ]
    ] = Field(default=UNSET, description="The list of events for the GitHub app")
    external_url: Union[str, None] = Field()
    html_url: str = Field()
    id: Union[int, None] = Field(description="Unique identifier of the GitHub app")
    name: str = Field(description="The name of the GitHub app")
    node_id: str = Field()
    owner: Union[
        WebhookDeploymentStatusCreatedPropDeploymentStatusPropPerformedViaGithubAppPropOwner,
        None,
    ] = Field(title="User")
    permissions: Missing[
        WebhookDeploymentStatusCreatedPropDeploymentStatusPropPerformedViaGithubAppPropPermissions
    ] = Field(default=UNSET, description="The set of permissions for the GitHub app")
    slug: Missing[str] = Field(
        default=UNSET, description="The slug name of the GitHub app"
    )
    updated_at: Union[datetime, None] = Field()


class WebhookDeploymentStatusCreatedPropWorkflow(GitHubModel):
    """Workflow"""

    badge_url: str = Field()
    created_at: datetime = Field()
    html_url: str = Field()
    id: int = Field()
    name: str = Field()
    node_id: str = Field()
    path: str = Field()
    state: str = Field()
    updated_at: datetime = Field()
    url: str = Field()


class WebhookDeploymentStatusCreatedPropWorkflowRunPropActor(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentStatusCreatedPropWorkflowRunPropHeadRepository(GitHubModel):
    """WebhookDeploymentStatusCreatedPropWorkflowRunPropHeadRepository"""

    archive_url: Missing[str] = Field(default=UNSET)
    assignees_url: Missing[str] = Field(default=UNSET)
    blobs_url: Missing[str] = Field(default=UNSET)
    branches_url: Missing[str] = Field(default=UNSET)
    collaborators_url: Missing[str] = Field(default=UNSET)
    comments_url: Missing[str] = Field(default=UNSET)
    commits_url: Missing[str] = Field(default=UNSET)
    compare_url: Missing[str] = Field(default=UNSET)
    contents_url: Missing[str] = Field(default=UNSET)
    contributors_url: Missing[str] = Field(default=UNSET)
    deployments_url: Missing[str] = Field(default=UNSET)
    description: Missing[None] = Field(default=UNSET)
    downloads_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    fork: Missing[bool] = Field(default=UNSET)
    forks_url: Missing[str] = Field(default=UNSET)
    full_name: Missing[str] = Field(default=UNSET)
    git_commits_url: Missing[str] = Field(default=UNSET)
    git_refs_url: Missing[str] = Field(default=UNSET)
    git_tags_url: Missing[str] = Field(default=UNSET)
    hooks_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    issue_comment_url: Missing[str] = Field(default=UNSET)
    issue_events_url: Missing[str] = Field(default=UNSET)
    issues_url: Missing[str] = Field(default=UNSET)
    keys_url: Missing[str] = Field(default=UNSET)
    labels_url: Missing[str] = Field(default=UNSET)
    languages_url: Missing[str] = Field(default=UNSET)
    merges_url: Missing[str] = Field(default=UNSET)
    milestones_url: Missing[str] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    notifications_url: Missing[str] = Field(default=UNSET)
    owner: Missing[
        WebhookDeploymentStatusCreatedPropWorkflowRunPropHeadRepositoryPropOwner
    ] = Field(default=UNSET)
    private: Missing[bool] = Field(default=UNSET)
    pulls_url: Missing[str] = Field(default=UNSET)
    releases_url: Missing[str] = Field(default=UNSET)
    stargazers_url: Missing[str] = Field(default=UNSET)
    statuses_url: Missing[str] = Field(default=UNSET)
    subscribers_url: Missing[str] = Field(default=UNSET)
    subscription_url: Missing[str] = Field(default=UNSET)
    tags_url: Missing[str] = Field(default=UNSET)
    teams_url: Missing[str] = Field(default=UNSET)
    trees_url: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentStatusCreatedPropWorkflowRunPropHeadRepositoryPropOwner(
    GitHubModel
):
    """WebhookDeploymentStatusCreatedPropWorkflowRunPropHeadRepositoryPropOwner"""

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentStatusCreatedPropWorkflowRunPropPullRequestsItems(GitHubModel):
    """Check Run Pull Request"""

    base: WebhookDeploymentStatusCreatedPropWorkflowRunPropPullRequestsItemsPropBase = (
        Field()
    )
    head: WebhookDeploymentStatusCreatedPropWorkflowRunPropPullRequestsItemsPropHead = (
        Field()
    )
    id: int = Field()
    number: int = Field()
    url: str = Field()


class WebhookDeploymentStatusCreatedPropWorkflowRunPropPullRequestsItemsPropBase(
    GitHubModel
):
    """WebhookDeploymentStatusCreatedPropWorkflowRunPropPullRequestsItemsPropBase"""

    ref: str = Field()
    repo: WebhookDeploymentStatusCreatedPropWorkflowRunPropPullRequestsItemsPropBasePropRepo = Field(
        title="Repo Ref"
    )
    sha: str = Field()


class WebhookDeploymentStatusCreatedPropWorkflowRunPropPullRequestsItemsPropBasePropRepo(
    GitHubModel
):
    """Repo Ref"""

    id: int = Field()
    name: str = Field()
    url: str = Field()


class WebhookDeploymentStatusCreatedPropWorkflowRunPropPullRequestsItemsPropHead(
    GitHubModel
):
    """WebhookDeploymentStatusCreatedPropWorkflowRunPropPullRequestsItemsPropHead"""

    ref: str = Field()
    repo: WebhookDeploymentStatusCreatedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepo = Field(
        title="Repo Ref"
    )
    sha: str = Field()


class WebhookDeploymentStatusCreatedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepo(
    GitHubModel
):
    """Repo Ref"""

    id: int = Field()
    name: str = Field()
    url: str = Field()


class WebhookDeploymentStatusCreatedPropWorkflowRunPropReferencedWorkflowsItems(
    GitHubModel
):
    """WebhookDeploymentStatusCreatedPropWorkflowRunPropReferencedWorkflowsItems"""

    path: str = Field()
    ref: Missing[str] = Field(default=UNSET)
    sha: str = Field()


class WebhookDeploymentStatusCreatedPropWorkflowRunPropRepository(GitHubModel):
    """WebhookDeploymentStatusCreatedPropWorkflowRunPropRepository"""

    archive_url: Missing[str] = Field(default=UNSET)
    assignees_url: Missing[str] = Field(default=UNSET)
    blobs_url: Missing[str] = Field(default=UNSET)
    branches_url: Missing[str] = Field(default=UNSET)
    collaborators_url: Missing[str] = Field(default=UNSET)
    comments_url: Missing[str] = Field(default=UNSET)
    commits_url: Missing[str] = Field(default=UNSET)
    compare_url: Missing[str] = Field(default=UNSET)
    contents_url: Missing[str] = Field(default=UNSET)
    contributors_url: Missing[str] = Field(default=UNSET)
    deployments_url: Missing[str] = Field(default=UNSET)
    description: Missing[None] = Field(default=UNSET)
    downloads_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    fork: Missing[bool] = Field(default=UNSET)
    forks_url: Missing[str] = Field(default=UNSET)
    full_name: Missing[str] = Field(default=UNSET)
    git_commits_url: Missing[str] = Field(default=UNSET)
    git_refs_url: Missing[str] = Field(default=UNSET)
    git_tags_url: Missing[str] = Field(default=UNSET)
    hooks_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    issue_comment_url: Missing[str] = Field(default=UNSET)
    issue_events_url: Missing[str] = Field(default=UNSET)
    issues_url: Missing[str] = Field(default=UNSET)
    keys_url: Missing[str] = Field(default=UNSET)
    labels_url: Missing[str] = Field(default=UNSET)
    languages_url: Missing[str] = Field(default=UNSET)
    merges_url: Missing[str] = Field(default=UNSET)
    milestones_url: Missing[str] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    notifications_url: Missing[str] = Field(default=UNSET)
    owner: Missing[
        WebhookDeploymentStatusCreatedPropWorkflowRunPropRepositoryPropOwner
    ] = Field(default=UNSET)
    private: Missing[bool] = Field(default=UNSET)
    pulls_url: Missing[str] = Field(default=UNSET)
    releases_url: Missing[str] = Field(default=UNSET)
    stargazers_url: Missing[str] = Field(default=UNSET)
    statuses_url: Missing[str] = Field(default=UNSET)
    subscribers_url: Missing[str] = Field(default=UNSET)
    subscription_url: Missing[str] = Field(default=UNSET)
    tags_url: Missing[str] = Field(default=UNSET)
    teams_url: Missing[str] = Field(default=UNSET)
    trees_url: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentStatusCreatedPropWorkflowRunPropRepositoryPropOwner(GitHubModel):
    """WebhookDeploymentStatusCreatedPropWorkflowRunPropRepositoryPropOwner"""

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentStatusCreatedPropWorkflowRunPropTriggeringActor(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDeploymentStatusCreatedPropWorkflowRun(GitHubModel):
    """Deployment Workflow Run"""

    actor: Union[WebhookDeploymentStatusCreatedPropWorkflowRunPropActor, None] = Field(
        title="User"
    )
    artifacts_url: Missing[str] = Field(default=UNSET)
    cancel_url: Missing[str] = Field(default=UNSET)
    check_suite_id: int = Field()
    check_suite_node_id: str = Field()
    check_suite_url: Missing[str] = Field(default=UNSET)
    conclusion: Union[
        None,
        Literal[
            "success",
            "failure",
            "neutral",
            "cancelled",
            "timed_out",
            "action_required",
            "stale",
            "startup_failure",
        ],
    ] = Field()
    created_at: datetime = Field()
    display_title: str = Field()
    event: str = Field()
    head_branch: str = Field()
    head_commit: Missing[None] = Field(default=UNSET)
    head_repository: Missing[
        WebhookDeploymentStatusCreatedPropWorkflowRunPropHeadRepository
    ] = Field(default=UNSET)
    head_sha: str = Field()
    html_url: str = Field()
    id: int = Field()
    jobs_url: Missing[str] = Field(default=UNSET)
    logs_url: Missing[str] = Field(default=UNSET)
    name: str = Field()
    node_id: str = Field()
    path: str = Field()
    previous_attempt_url: Missing[None] = Field(default=UNSET)
    pull_requests: List[
        WebhookDeploymentStatusCreatedPropWorkflowRunPropPullRequestsItems
    ] = Field()
    referenced_workflows: Missing[
        Union[
            List[
                WebhookDeploymentStatusCreatedPropWorkflowRunPropReferencedWorkflowsItems
            ],
            None,
        ]
    ] = Field(default=UNSET)
    repository: Missing[
        WebhookDeploymentStatusCreatedPropWorkflowRunPropRepository
    ] = Field(default=UNSET)
    rerun_url: Missing[str] = Field(default=UNSET)
    run_attempt: int = Field()
    run_number: int = Field()
    run_started_at: datetime = Field()
    status: Literal[
        "requested", "in_progress", "completed", "queued", "waiting", "pending"
    ] = Field()
    triggering_actor: Union[
        WebhookDeploymentStatusCreatedPropWorkflowRunPropTriggeringActor, None
    ] = Field(title="User")
    updated_at: datetime = Field()
    url: str = Field()
    workflow_id: int = Field()
    workflow_url: Missing[str] = Field(default=UNSET)


class WebhookDiscussionAnswered(GitHubModel):
    """discussion answered event"""

    action: Literal["answered"] = Field()
    answer: WebhookDiscussionAnsweredPropAnswer = Field()
    discussion: Discussion = Field(
        title="Discussion", description="A Discussion in a repository."
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookDiscussionAnsweredPropAnswer(GitHubModel):
    """WebhookDiscussionAnsweredPropAnswer"""

    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: str = Field()
    child_comment_count: int = Field()
    created_at: datetime = Field()
    discussion_id: int = Field()
    html_url: str = Field()
    id: int = Field()
    node_id: str = Field()
    parent_id: None = Field()
    reactions: Missing[WebhookDiscussionAnsweredPropAnswerPropReactions] = Field(
        default=UNSET, title="Reactions"
    )
    repository_url: str = Field()
    updated_at: datetime = Field()
    user: Union[WebhookDiscussionAnsweredPropAnswerPropUser, None] = Field(title="User")


class WebhookDiscussionAnsweredPropAnswerPropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookDiscussionAnsweredPropAnswerPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDiscussionCategoryChanged(GitHubModel):
    """discussion category changed event"""

    action: Literal["category_changed"] = Field()
    changes: WebhookDiscussionCategoryChangedPropChanges = Field()
    discussion: Discussion = Field(
        title="Discussion", description="A Discussion in a repository."
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookDiscussionCategoryChangedPropChanges(GitHubModel):
    """WebhookDiscussionCategoryChangedPropChanges"""

    category: WebhookDiscussionCategoryChangedPropChangesPropCategory = Field()


class WebhookDiscussionCategoryChangedPropChangesPropCategory(GitHubModel):
    """WebhookDiscussionCategoryChangedPropChangesPropCategory"""

    from_: WebhookDiscussionCategoryChangedPropChangesPropCategoryPropFrom = Field(
        alias="from"
    )


class WebhookDiscussionCategoryChangedPropChangesPropCategoryPropFrom(GitHubModel):
    """WebhookDiscussionCategoryChangedPropChangesPropCategoryPropFrom"""

    created_at: datetime = Field()
    description: str = Field()
    emoji: str = Field()
    id: int = Field()
    is_answerable: bool = Field()
    name: str = Field()
    node_id: Missing[str] = Field(default=UNSET)
    repository_id: int = Field()
    slug: str = Field()
    updated_at: str = Field()


class WebhookDiscussionClosed(GitHubModel):
    """discussion closed event"""

    action: Literal["closed"] = Field()
    discussion: Discussion = Field(
        title="Discussion", description="A Discussion in a repository."
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookDiscussionCommentCreated(GitHubModel):
    """discussion_comment created event"""

    action: Literal["created"] = Field()
    comment: WebhookDiscussionCommentCreatedPropComment = Field()
    discussion: Discussion = Field(
        title="Discussion", description="A Discussion in a repository."
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookDiscussionCommentCreatedPropComment(GitHubModel):
    """WebhookDiscussionCommentCreatedPropComment"""

    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: str = Field()
    child_comment_count: int = Field()
    created_at: str = Field()
    discussion_id: int = Field()
    html_url: str = Field()
    id: int = Field()
    node_id: str = Field()
    parent_id: Union[int, None] = Field()
    reactions: WebhookDiscussionCommentCreatedPropCommentPropReactions = Field(
        title="Reactions"
    )
    repository_url: str = Field()
    updated_at: str = Field()
    user: Union[WebhookDiscussionCommentCreatedPropCommentPropUser, None] = Field(
        title="User"
    )


class WebhookDiscussionCommentCreatedPropCommentPropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookDiscussionCommentCreatedPropCommentPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDiscussionCommentDeleted(GitHubModel):
    """discussion_comment deleted event"""

    action: Literal["deleted"] = Field()
    comment: WebhookDiscussionCommentDeletedPropComment = Field()
    discussion: Discussion = Field(
        title="Discussion", description="A Discussion in a repository."
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookDiscussionCommentDeletedPropComment(GitHubModel):
    """WebhookDiscussionCommentDeletedPropComment"""

    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: str = Field()
    child_comment_count: int = Field()
    created_at: str = Field()
    discussion_id: int = Field()
    html_url: str = Field()
    id: int = Field()
    node_id: str = Field()
    parent_id: Union[int, None] = Field()
    reactions: WebhookDiscussionCommentDeletedPropCommentPropReactions = Field(
        title="Reactions"
    )
    repository_url: str = Field()
    updated_at: str = Field()
    user: Union[WebhookDiscussionCommentDeletedPropCommentPropUser, None] = Field(
        title="User"
    )


class WebhookDiscussionCommentDeletedPropCommentPropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookDiscussionCommentDeletedPropCommentPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDiscussionCommentEdited(GitHubModel):
    """discussion_comment edited event"""

    action: Literal["edited"] = Field()
    changes: WebhookDiscussionCommentEditedPropChanges = Field()
    comment: WebhookDiscussionCommentEditedPropComment = Field()
    discussion: Discussion = Field(
        title="Discussion", description="A Discussion in a repository."
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookDiscussionCommentEditedPropChanges(GitHubModel):
    """WebhookDiscussionCommentEditedPropChanges"""

    body: WebhookDiscussionCommentEditedPropChangesPropBody = Field()


class WebhookDiscussionCommentEditedPropChangesPropBody(GitHubModel):
    """WebhookDiscussionCommentEditedPropChangesPropBody"""

    from_: str = Field(alias="from")


class WebhookDiscussionCommentEditedPropComment(GitHubModel):
    """WebhookDiscussionCommentEditedPropComment"""

    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: str = Field()
    child_comment_count: int = Field()
    created_at: str = Field()
    discussion_id: int = Field()
    html_url: str = Field()
    id: int = Field()
    node_id: str = Field()
    parent_id: Union[int, None] = Field()
    reactions: WebhookDiscussionCommentEditedPropCommentPropReactions = Field(
        title="Reactions"
    )
    repository_url: str = Field()
    updated_at: str = Field()
    user: Union[WebhookDiscussionCommentEditedPropCommentPropUser, None] = Field(
        title="User"
    )


class WebhookDiscussionCommentEditedPropCommentPropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookDiscussionCommentEditedPropCommentPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDiscussionCreated(GitHubModel):
    """discussion created event"""

    action: Literal["created"] = Field()
    discussion: WebhookDiscussionCreatedPropDiscussion = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookDiscussionCreatedPropDiscussion(GitHubModel):
    """WebhookDiscussionCreatedPropDiscussion"""

    active_lock_reason: Union[None, None] = Field()
    answer_chosen_at: Union[None, None] = Field()
    answer_chosen_by: Union[None, None] = Field()
    answer_html_url: Union[Union[str, None], None] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: Union[Union[str, None], None] = Field()
    category: WebhookDiscussionCreatedPropDiscussionMergedCategory = Field()
    comments: int = Field()
    created_at: datetime = Field()
    html_url: str = Field()
    id: int = Field()
    locked: Literal[False] = Field()
    node_id: str = Field()
    number: int = Field()
    reactions: Missing[WebhookDiscussionCreatedPropDiscussionMergedReactions] = Field(
        default=UNSET
    )
    repository_url: str = Field()
    state: Literal["open", "converting", "transferring"] = Field()
    timeline_url: Missing[str] = Field(default=UNSET)
    title: str = Field()
    updated_at: datetime = Field()
    user: WebhookDiscussionCreatedPropDiscussionMergedUser = Field()


class WebhookDiscussionCreatedPropDiscussionAllof0(GitHubModel):
    """Discussion"""

    active_lock_reason: Union[str, None] = Field()
    answer_chosen_at: Union[str, None] = Field()
    answer_chosen_by: Union[
        WebhookDiscussionCreatedPropDiscussionAllof0PropAnswerChosenBy, None
    ] = Field(title="User")
    answer_html_url: Union[str, None] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: Union[str, None] = Field()
    category: WebhookDiscussionCreatedPropDiscussionAllof0PropCategory = Field()
    comments: int = Field()
    created_at: datetime = Field()
    html_url: str = Field()
    id: int = Field()
    locked: bool = Field()
    node_id: str = Field()
    number: int = Field()
    reactions: Missing[
        WebhookDiscussionCreatedPropDiscussionAllof0PropReactions
    ] = Field(default=UNSET, title="Reactions")
    repository_url: str = Field()
    state: Literal["open", "locked", "converting", "transferring"] = Field()
    timeline_url: Missing[str] = Field(default=UNSET)
    title: str = Field()
    updated_at: datetime = Field()
    user: Union[WebhookDiscussionCreatedPropDiscussionAllof0PropUser, None] = Field(
        title="User"
    )


class WebhookDiscussionCreatedPropDiscussionAllof0PropAnswerChosenBy(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDiscussionCreatedPropDiscussionAllof0PropCategory(GitHubModel):
    """WebhookDiscussionCreatedPropDiscussionAllof0PropCategory"""

    created_at: datetime = Field()
    description: str = Field()
    emoji: str = Field()
    id: int = Field()
    is_answerable: bool = Field()
    name: str = Field()
    node_id: Missing[str] = Field(default=UNSET)
    repository_id: int = Field()
    slug: str = Field()
    updated_at: str = Field()


class WebhookDiscussionCreatedPropDiscussionAllof0PropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookDiscussionCreatedPropDiscussionAllof0PropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDiscussionCreatedPropDiscussionAllof1(GitHubModel):
    """WebhookDiscussionCreatedPropDiscussionAllof1"""

    active_lock_reason: Missing[None] = Field(default=UNSET)
    answer_chosen_at: None = Field()
    answer_chosen_by: None = Field()
    answer_html_url: Union[str, None] = Field()
    author_association: Missing[str] = Field(default=UNSET)
    body: Missing[Union[str, None]] = Field(default=UNSET)
    category: Missing[WebhookDiscussionCreatedPropDiscussionAllof1PropCategory] = Field(
        default=UNSET
    )
    comments: Missing[int] = Field(default=UNSET)
    created_at: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    locked: Literal[False] = Field()
    node_id: Missing[str] = Field(default=UNSET)
    number: Missing[int] = Field(default=UNSET)
    reactions: Missing[
        WebhookDiscussionCreatedPropDiscussionAllof1PropReactions
    ] = Field(default=UNSET)
    repository_url: Missing[str] = Field(default=UNSET)
    state: Literal["open", "converting", "transferring"] = Field()
    timeline_url: Missing[str] = Field(default=UNSET)
    title: Missing[str] = Field(default=UNSET)
    updated_at: Missing[str] = Field(default=UNSET)
    user: Missing[WebhookDiscussionCreatedPropDiscussionAllof1PropUser] = Field(
        default=UNSET
    )


class WebhookDiscussionCreatedPropDiscussionAllof1PropCategory(GitHubModel):
    """WebhookDiscussionCreatedPropDiscussionAllof1PropCategory"""

    created_at: Missing[str] = Field(default=UNSET)
    description: Missing[str] = Field(default=UNSET)
    emoji: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    is_answerable: Missing[bool] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    repository_id: Missing[int] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    updated_at: Missing[str] = Field(default=UNSET)


class WebhookDiscussionCreatedPropDiscussionAllof1PropReactions(GitHubModel):
    """WebhookDiscussionCreatedPropDiscussionAllof1PropReactions"""

    plus_one: Missing[int] = Field(default=UNSET, alias="+1")
    minus_one: Missing[int] = Field(default=UNSET, alias="-1")
    confused: Missing[int] = Field(default=UNSET)
    eyes: Missing[int] = Field(default=UNSET)
    heart: Missing[int] = Field(default=UNSET)
    hooray: Missing[int] = Field(default=UNSET)
    laugh: Missing[int] = Field(default=UNSET)
    rocket: Missing[int] = Field(default=UNSET)
    total_count: Missing[int] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDiscussionCreatedPropDiscussionAllof1PropUser(GitHubModel):
    """WebhookDiscussionCreatedPropDiscussionAllof1PropUser"""

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDiscussionCreatedPropDiscussionMergedCategory(GitHubModel):
    """WebhookDiscussionCreatedPropDiscussionMergedCategory"""

    created_at: datetime = Field()
    description: str = Field()
    emoji: str = Field()
    id: int = Field()
    is_answerable: bool = Field()
    name: str = Field()
    node_id: Missing[str] = Field(default=UNSET)
    repository_id: int = Field()
    slug: str = Field()
    updated_at: str = Field()


class WebhookDiscussionCreatedPropDiscussionMergedReactions(GitHubModel):
    """WebhookDiscussionCreatedPropDiscussionMergedReactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookDiscussionCreatedPropDiscussionMergedUser(GitHubModel):
    """WebhookDiscussionCreatedPropDiscussionMergedUser"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDiscussionDeleted(GitHubModel):
    """discussion deleted event"""

    action: Literal["deleted"] = Field()
    discussion: Discussion = Field(
        title="Discussion", description="A Discussion in a repository."
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookDiscussionEdited(GitHubModel):
    """discussion edited event"""

    action: Literal["edited"] = Field()
    changes: Missing[WebhookDiscussionEditedPropChanges] = Field(default=UNSET)
    discussion: Discussion = Field(
        title="Discussion", description="A Discussion in a repository."
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookDiscussionEditedPropChanges(GitHubModel):
    """WebhookDiscussionEditedPropChanges"""

    body: Missing[WebhookDiscussionEditedPropChangesPropBody] = Field(default=UNSET)
    title: Missing[WebhookDiscussionEditedPropChangesPropTitle] = Field(default=UNSET)


class WebhookDiscussionEditedPropChangesPropBody(GitHubModel):
    """WebhookDiscussionEditedPropChangesPropBody"""

    from_: str = Field(alias="from")


class WebhookDiscussionEditedPropChangesPropTitle(GitHubModel):
    """WebhookDiscussionEditedPropChangesPropTitle"""

    from_: str = Field(alias="from")


class WebhookDiscussionLabeled(GitHubModel):
    """discussion labeled event"""

    action: Literal["labeled"] = Field()
    discussion: Discussion = Field(
        title="Discussion", description="A Discussion in a repository."
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    label: WebhookDiscussionLabeledPropLabel = Field(title="Label")
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookDiscussionLabeledPropLabel(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookDiscussionLocked(GitHubModel):
    """discussion locked event"""

    action: Literal["locked"] = Field()
    discussion: Discussion = Field(
        title="Discussion", description="A Discussion in a repository."
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookDiscussionPinned(GitHubModel):
    """discussion pinned event"""

    action: Literal["pinned"] = Field()
    discussion: Discussion = Field(
        title="Discussion", description="A Discussion in a repository."
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookDiscussionReopened(GitHubModel):
    """discussion reopened event"""

    action: Literal["reopened"] = Field()
    discussion: Discussion = Field(
        title="Discussion", description="A Discussion in a repository."
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookDiscussionTransferred(GitHubModel):
    """discussion transferred event"""

    action: Literal["transferred"] = Field()
    changes: WebhookDiscussionTransferredPropChanges = Field()
    discussion: Discussion = Field(
        title="Discussion", description="A Discussion in a repository."
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookDiscussionTransferredPropChanges(GitHubModel):
    """WebhookDiscussionTransferredPropChanges"""

    new_discussion: Discussion = Field(
        title="Discussion", description="A Discussion in a repository."
    )
    new_repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )


class WebhookDiscussionUnanswered(GitHubModel):
    """discussion unanswered event"""

    action: Literal["unanswered"] = Field()
    discussion: Discussion = Field(
        title="Discussion", description="A Discussion in a repository."
    )
    old_answer: WebhookDiscussionUnansweredPropOldAnswer = Field()
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: Missing[SimpleUserWebhooks] = Field(
        default=UNSET,
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookDiscussionUnansweredPropOldAnswer(GitHubModel):
    """WebhookDiscussionUnansweredPropOldAnswer"""

    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: str = Field()
    child_comment_count: int = Field()
    created_at: datetime = Field()
    discussion_id: int = Field()
    html_url: str = Field()
    id: int = Field()
    node_id: str = Field()
    parent_id: None = Field()
    reactions: Missing[WebhookDiscussionUnansweredPropOldAnswerPropReactions] = Field(
        default=UNSET, title="Reactions"
    )
    repository_url: str = Field()
    updated_at: datetime = Field()
    user: Union[WebhookDiscussionUnansweredPropOldAnswerPropUser, None] = Field(
        title="User"
    )


class WebhookDiscussionUnansweredPropOldAnswerPropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookDiscussionUnansweredPropOldAnswerPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookDiscussionUnlabeled(GitHubModel):
    """discussion unlabeled event"""

    action: Literal["unlabeled"] = Field()
    discussion: Discussion = Field(
        title="Discussion", description="A Discussion in a repository."
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    label: WebhookDiscussionUnlabeledPropLabel = Field(title="Label")
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookDiscussionUnlabeledPropLabel(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookDiscussionUnlocked(GitHubModel):
    """discussion unlocked event"""

    action: Literal["unlocked"] = Field()
    discussion: Discussion = Field(
        title="Discussion", description="A Discussion in a repository."
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookDiscussionUnpinned(GitHubModel):
    """discussion unpinned event"""

    action: Literal["unpinned"] = Field()
    discussion: Discussion = Field(
        title="Discussion", description="A Discussion in a repository."
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookFork(GitHubModel):
    """fork event

    A user forks a repository.
    """

    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    forkee: WebhookForkPropForkee = Field(
        description="The created [`repository`](https://docs.github.com/rest/repos/repos#get-a-repository) resource."
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookForkPropForkee(GitHubModel):
    """WebhookForkPropForkee

    The created [`repository`](https://docs.github.com/rest/repos/repos#get-a-
    repository) resource.
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: datetime = Field()
    custom_properties: Missing[WebhookForkPropForkeeAllof0PropCustomProperties] = Field(
        default=UNSET,
        description="The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.",
    )
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[Union[str, None], None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: Literal[True] = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    homepage: Union[Union[str, None], None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[None, None] = Field()
    languages_url: str = Field()
    license_: Union[WebhookForkPropForkeeMergedLicense, None] = Field(alias="license")
    master_branch: Missing[str] = Field(default=UNSET)
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[None, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: WebhookForkPropForkeeMergedOwner = Field()
    permissions: Missing[WebhookForkPropForkeeAllof0PropPermissions] = Field(
        default=UNSET
    )
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: datetime = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookForkPropForkeeAllof0(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    custom_properties: Missing[WebhookForkPropForkeeAllof0PropCustomProperties] = Field(
        default=UNSET,
        description="The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.",
    )
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[WebhookForkPropForkeeAllof0PropLicense, None] = Field(
        alias="license", title="License"
    )
    master_branch: Missing[str] = Field(default=UNSET)
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[WebhookForkPropForkeeAllof0PropOwner, None] = Field(title="User")
    permissions: Missing[WebhookForkPropForkeeAllof0PropPermissions] = Field(
        default=UNSET
    )
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookForkPropForkeeAllof0PropCustomProperties(ExtraGitHubModel):
    """WebhookForkPropForkeeAllof0PropCustomProperties

    The custom properties that were defined for the repository. The keys are the
    custom property names, and the values are the corresponding custom property
    values.
    """


class WebhookForkPropForkeeAllof0PropLicense(GitHubModel):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookForkPropForkeeAllof0PropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookForkPropForkeeAllof0PropPermissions(GitHubModel):
    """WebhookForkPropForkeeAllof0PropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookForkPropForkeeAllof1(GitHubModel):
    """WebhookForkPropForkeeAllof1"""

    allow_forking: Missing[bool] = Field(default=UNSET)
    archive_url: Missing[str] = Field(default=UNSET)
    archived: Missing[bool] = Field(default=UNSET)
    assignees_url: Missing[str] = Field(default=UNSET)
    blobs_url: Missing[str] = Field(default=UNSET)
    branches_url: Missing[str] = Field(default=UNSET)
    clone_url: Missing[str] = Field(default=UNSET)
    collaborators_url: Missing[str] = Field(default=UNSET)
    comments_url: Missing[str] = Field(default=UNSET)
    commits_url: Missing[str] = Field(default=UNSET)
    compare_url: Missing[str] = Field(default=UNSET)
    contents_url: Missing[str] = Field(default=UNSET)
    contributors_url: Missing[str] = Field(default=UNSET)
    created_at: Missing[str] = Field(default=UNSET)
    default_branch: Missing[str] = Field(default=UNSET)
    deployments_url: Missing[str] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(default=UNSET)
    disabled: Missing[bool] = Field(default=UNSET)
    downloads_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    fork: Missing[Literal[True]] = Field(default=UNSET)
    forks: Missing[int] = Field(default=UNSET)
    forks_count: Missing[int] = Field(default=UNSET)
    forks_url: Missing[str] = Field(default=UNSET)
    full_name: Missing[str] = Field(default=UNSET)
    git_commits_url: Missing[str] = Field(default=UNSET)
    git_refs_url: Missing[str] = Field(default=UNSET)
    git_tags_url: Missing[str] = Field(default=UNSET)
    git_url: Missing[str] = Field(default=UNSET)
    has_downloads: Missing[bool] = Field(default=UNSET)
    has_issues: Missing[bool] = Field(default=UNSET)
    has_pages: Missing[bool] = Field(default=UNSET)
    has_projects: Missing[bool] = Field(default=UNSET)
    has_wiki: Missing[bool] = Field(default=UNSET)
    homepage: Missing[Union[str, None]] = Field(default=UNSET)
    hooks_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: Missing[str] = Field(default=UNSET)
    issue_events_url: Missing[str] = Field(default=UNSET)
    issues_url: Missing[str] = Field(default=UNSET)
    keys_url: Missing[str] = Field(default=UNSET)
    labels_url: Missing[str] = Field(default=UNSET)
    language: Missing[None] = Field(default=UNSET)
    languages_url: Missing[str] = Field(default=UNSET)
    license_: Missing[Union[WebhookForkPropForkeeAllof1PropLicense, None]] = Field(
        default=UNSET, alias="license"
    )
    merges_url: Missing[str] = Field(default=UNSET)
    milestones_url: Missing[str] = Field(default=UNSET)
    mirror_url: Missing[None] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    notifications_url: Missing[str] = Field(default=UNSET)
    open_issues: Missing[int] = Field(default=UNSET)
    open_issues_count: Missing[int] = Field(default=UNSET)
    owner: Missing[WebhookForkPropForkeeAllof1PropOwner] = Field(default=UNSET)
    private: Missing[bool] = Field(default=UNSET)
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: Missing[str] = Field(default=UNSET)
    pushed_at: Missing[str] = Field(default=UNSET)
    releases_url: Missing[str] = Field(default=UNSET)
    size: Missing[int] = Field(default=UNSET)
    ssh_url: Missing[str] = Field(default=UNSET)
    stargazers_count: Missing[int] = Field(default=UNSET)
    stargazers_url: Missing[str] = Field(default=UNSET)
    statuses_url: Missing[str] = Field(default=UNSET)
    subscribers_url: Missing[str] = Field(default=UNSET)
    subscription_url: Missing[str] = Field(default=UNSET)
    svn_url: Missing[str] = Field(default=UNSET)
    tags_url: Missing[str] = Field(default=UNSET)
    teams_url: Missing[str] = Field(default=UNSET)
    topics: Missing[List[Union[str, None]]] = Field(default=UNSET)
    trees_url: Missing[str] = Field(default=UNSET)
    updated_at: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)
    visibility: Missing[str] = Field(default=UNSET)
    watchers: Missing[int] = Field(default=UNSET)
    watchers_count: Missing[int] = Field(default=UNSET)


class WebhookForkPropForkeeAllof1PropLicense(GitHubModel):
    """WebhookForkPropForkeeAllof1PropLicense"""


class WebhookForkPropForkeeAllof1PropOwner(GitHubModel):
    """WebhookForkPropForkeeAllof1PropOwner"""

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookForkPropForkeeMergedLicense(GitHubModel):
    """WebhookForkPropForkeeMergedLicense"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookForkPropForkeeMergedOwner(GitHubModel):
    """WebhookForkPropForkeeMergedOwner"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookGithubAppAuthorizationRevoked(GitHubModel):
    """github_app_authorization revoked event"""

    action: Literal["revoked"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookGollum(GitHubModel):
    """gollum event"""

    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    pages: List[WebhookGollumPropPagesItems] = Field(
        description="The pages that were updated."
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookGollumPropPagesItems(GitHubModel):
    """WebhookGollumPropPagesItems"""

    action: Literal["created", "edited"] = Field(
        description="The action that was performed on the page. Can be `created` or `edited`."
    )
    html_url: str = Field(description="Points to the HTML wiki page.")
    page_name: str = Field(description="The name of the page.")
    sha: str = Field(description="The latest commit SHA of the page.")
    summary: Union[str, None] = Field()
    title: str = Field(description="The current page title.")


class WebhookInstallationCreated(GitHubModel):
    """installation created event"""

    action: Literal["created"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Installation = Field(title="Installation", description="Installation")
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repositories: Missing[
        List[WebhookInstallationCreatedPropRepositoriesItems]
    ] = Field(
        default=UNSET,
        description="An array of repository objects that the installation can access.",
    )
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    requester: Missing[Union[WebhookInstallationCreatedPropRequester, None]] = Field(
        default=UNSET, title="User"
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookInstallationCreatedPropRepositoriesItems(GitHubModel):
    """WebhookInstallationCreatedPropRepositoriesItems"""

    full_name: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    private: bool = Field(description="Whether the repository is private or public.")


class WebhookInstallationCreatedPropRequester(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookInstallationDeleted(GitHubModel):
    """installation deleted event"""

    action: Literal["deleted"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Installation = Field(title="Installation", description="Installation")
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repositories: Missing[
        List[WebhookInstallationDeletedPropRepositoriesItems]
    ] = Field(
        default=UNSET,
        description="An array of repository objects that the installation can access.",
    )
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    requester: Missing[None] = Field(default=UNSET)
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookInstallationDeletedPropRepositoriesItems(GitHubModel):
    """WebhookInstallationDeletedPropRepositoriesItems"""

    full_name: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    private: bool = Field(description="Whether the repository is private or public.")


class WebhookInstallationNewPermissionsAccepted(GitHubModel):
    """installation new_permissions_accepted event"""

    action: Literal["new_permissions_accepted"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Installation = Field(title="Installation", description="Installation")
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repositories: Missing[
        List[WebhookInstallationNewPermissionsAcceptedPropRepositoriesItems]
    ] = Field(
        default=UNSET,
        description="An array of repository objects that the installation can access.",
    )
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    requester: Missing[None] = Field(default=UNSET)
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookInstallationNewPermissionsAcceptedPropRepositoriesItems(GitHubModel):
    """WebhookInstallationNewPermissionsAcceptedPropRepositoriesItems"""

    full_name: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    private: bool = Field(description="Whether the repository is private or public.")


class WebhookInstallationRepositoriesAdded(GitHubModel):
    """installation_repositories added event"""

    action: Literal["added"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Installation = Field(title="Installation", description="Installation")
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repositories_added: List[
        WebhookInstallationRepositoriesAddedPropRepositoriesAddedItems
    ] = Field(
        description="An array of repository objects, which were added to the installation."
    )
    repositories_removed: List[
        WebhookInstallationRepositoriesAddedPropRepositoriesRemovedItems
    ] = Field(
        description="An array of repository objects, which were removed from the installation."
    )
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    repository_selection: Literal["all", "selected"] = Field(
        description="Describe whether all repositories have been selected or there's a selection involved"
    )
    requester: Union[WebhookInstallationRepositoriesAddedPropRequester, None] = Field(
        title="User"
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookInstallationRepositoriesAddedPropRepositoriesAddedItems(GitHubModel):
    """WebhookInstallationRepositoriesAddedPropRepositoriesAddedItems"""

    full_name: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    private: bool = Field(description="Whether the repository is private or public.")


class WebhookInstallationRepositoriesAddedPropRepositoriesRemovedItems(GitHubModel):
    """WebhookInstallationRepositoriesAddedPropRepositoriesRemovedItems"""

    full_name: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(
        default=UNSET, description="Unique identifier of the repository"
    )
    name: Missing[str] = Field(default=UNSET, description="The name of the repository.")
    node_id: Missing[str] = Field(default=UNSET)
    private: Missing[bool] = Field(
        default=UNSET, description="Whether the repository is private or public."
    )


class WebhookInstallationRepositoriesAddedPropRequester(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookInstallationRepositoriesRemoved(GitHubModel):
    """installation_repositories removed event"""

    action: Literal["removed"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Installation = Field(title="Installation", description="Installation")
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repositories_added: List[
        WebhookInstallationRepositoriesRemovedPropRepositoriesAddedItems
    ] = Field(
        description="An array of repository objects, which were added to the installation."
    )
    repositories_removed: List[
        WebhookInstallationRepositoriesRemovedPropRepositoriesRemovedItems
    ] = Field(
        description="An array of repository objects, which were removed from the installation."
    )
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    repository_selection: Literal["all", "selected"] = Field(
        description="Describe whether all repositories have been selected or there's a selection involved"
    )
    requester: Union[WebhookInstallationRepositoriesRemovedPropRequester, None] = Field(
        title="User"
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookInstallationRepositoriesRemovedPropRepositoriesAddedItems(GitHubModel):
    """WebhookInstallationRepositoriesRemovedPropRepositoriesAddedItems"""

    full_name: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    private: bool = Field(description="Whether the repository is private or public.")


class WebhookInstallationRepositoriesRemovedPropRepositoriesRemovedItems(GitHubModel):
    """WebhookInstallationRepositoriesRemovedPropRepositoriesRemovedItems"""

    full_name: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    private: bool = Field(description="Whether the repository is private or public.")


class WebhookInstallationRepositoriesRemovedPropRequester(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookInstallationSuspend(GitHubModel):
    """installation suspend event"""

    action: Literal["suspend"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Installation = Field(title="Installation", description="Installation")
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repositories: Missing[
        List[WebhookInstallationSuspendPropRepositoriesItems]
    ] = Field(
        default=UNSET,
        description="An array of repository objects that the installation can access.",
    )
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    requester: Missing[None] = Field(default=UNSET)
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookInstallationSuspendPropRepositoriesItems(GitHubModel):
    """WebhookInstallationSuspendPropRepositoriesItems"""

    full_name: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    private: bool = Field(description="Whether the repository is private or public.")


class WebhookInstallationTargetRenamed(GitHubModel):
    """WebhookInstallationTargetRenamed"""

    account: WebhookInstallationTargetRenamedPropAccount = Field()
    action: Literal["renamed"] = Field()
    changes: WebhookInstallationTargetRenamedPropChanges = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: SimpleInstallation = Field(
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: Missing[SimpleUserWebhooks] = Field(
        default=UNSET,
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )
    target_type: str = Field()


class WebhookInstallationTargetRenamedPropAccount(GitHubModel):
    """WebhookInstallationTargetRenamedPropAccount"""

    archived_at: Missing[Union[str, None]] = Field(default=UNSET)
    avatar_url: str = Field()
    created_at: Missing[str] = Field(default=UNSET)
    description: Missing[None] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers: Missing[int] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following: Missing[int] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    has_organization_projects: Missing[bool] = Field(default=UNSET)
    has_repository_projects: Missing[bool] = Field(default=UNSET)
    hooks_url: Missing[str] = Field(default=UNSET)
    html_url: str = Field()
    id: int = Field()
    is_verified: Missing[bool] = Field(default=UNSET)
    issues_url: Missing[str] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    members_url: Missing[str] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    node_id: str = Field()
    organizations_url: Missing[str] = Field(default=UNSET)
    public_gists: Missing[int] = Field(default=UNSET)
    public_members_url: Missing[str] = Field(default=UNSET)
    public_repos: Missing[int] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    updated_at: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)
    website_url: Missing[None] = Field(default=UNSET)


class WebhookInstallationTargetRenamedPropChanges(GitHubModel):
    """WebhookInstallationTargetRenamedPropChanges"""

    login: Missing[WebhookInstallationTargetRenamedPropChangesPropLogin] = Field(
        default=UNSET
    )
    slug: Missing[WebhookInstallationTargetRenamedPropChangesPropSlug] = Field(
        default=UNSET
    )


class WebhookInstallationTargetRenamedPropChangesPropLogin(GitHubModel):
    """WebhookInstallationTargetRenamedPropChangesPropLogin"""

    from_: str = Field(alias="from")


class WebhookInstallationTargetRenamedPropChangesPropSlug(GitHubModel):
    """WebhookInstallationTargetRenamedPropChangesPropSlug"""

    from_: str = Field(alias="from")


class WebhookInstallationUnsuspend(GitHubModel):
    """installation unsuspend event"""

    action: Literal["unsuspend"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Installation = Field(title="Installation", description="Installation")
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repositories: Missing[
        List[WebhookInstallationUnsuspendPropRepositoriesItems]
    ] = Field(
        default=UNSET,
        description="An array of repository objects that the installation can access.",
    )
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    requester: Missing[None] = Field(default=UNSET)
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookInstallationUnsuspendPropRepositoriesItems(GitHubModel):
    """WebhookInstallationUnsuspendPropRepositoriesItems"""

    full_name: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    private: bool = Field(description="Whether the repository is private or public.")


class WebhookIssueCommentCreated(GitHubModel):
    """issue_comment created event"""

    action: Literal["created"] = Field()
    comment: WebhookIssueCommentCreatedPropComment = Field(
        title="issue comment",
        description="The [comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment) itself.",
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    issue: WebhookIssueCommentCreatedPropIssue = Field(
        description="The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) the comment belongs to."
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookIssueCommentCreatedPropComment(GitHubModel):
    """issue comment

    The [comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment)
    itself.
    """

    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: str = Field(description="Contents of the issue comment")
    created_at: datetime = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the issue comment")
    issue_url: str = Field()
    node_id: str = Field()
    performed_via_github_app: Union[None, Integration] = Field()
    reactions: WebhookIssueCommentCreatedPropCommentPropReactions = Field(
        title="Reactions"
    )
    updated_at: datetime = Field()
    url: str = Field(description="URL for the issue comment")
    user: Union[WebhookIssueCommentCreatedPropCommentPropUser, None] = Field(
        title="User"
    )


class WebhookIssueCommentCreatedPropCommentPropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookIssueCommentCreatedPropCommentPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssueCommentCreatedPropIssue(GitHubModel):
    """WebhookIssueCommentCreatedPropIssue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) the comment
    belongs to.
    """

    active_lock_reason: Union[
        Literal["resolved", "off-topic", "too heated", "spam"], None
    ] = Field()
    assignee: Union[
        Union[WebhookIssueCommentCreatedPropIssueAllof0PropAssignee, None], None
    ] = Field(title="User")
    assignees: List[WebhookIssueCommentCreatedPropIssueMergedAssignees] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: Union[Union[str, None], None] = Field(description="Contents of the issue")
    closed_at: Union[datetime, None] = Field()
    comments: int = Field()
    comments_url: str = Field()
    created_at: datetime = Field()
    draft: Missing[bool] = Field(default=UNSET)
    events_url: str = Field()
    html_url: str = Field()
    id: int = Field()
    labels: List[WebhookIssueCommentCreatedPropIssueAllof0PropLabelsItems] = Field()
    labels_url: str = Field()
    locked: bool = Field()
    milestone: Union[WebhookIssueCommentCreatedPropIssueMergedMilestone, None] = Field()
    node_id: str = Field()
    number: int = Field()
    performed_via_github_app: Missing[
        Union[WebhookIssueCommentCreatedPropIssueMergedPerformedViaGithubApp, None]
    ] = Field(default=UNSET)
    pull_request: Missing[
        WebhookIssueCommentCreatedPropIssueAllof0PropPullRequest
    ] = Field(default=UNSET)
    reactions: WebhookIssueCommentCreatedPropIssueMergedReactions = Field()
    repository_url: str = Field()
    state: Literal["open", "closed"] = Field(
        description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Missing[Union[str, None]] = Field(default=UNSET)
    timeline_url: Missing[str] = Field(default=UNSET)
    title: str = Field(description="Title of the issue")
    updated_at: datetime = Field()
    url: str = Field(description="URL for the issue")
    user: WebhookIssueCommentCreatedPropIssueMergedUser = Field()


class WebhookIssueCommentCreatedPropIssueAllof0(GitHubModel):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    assignee: Missing[
        Union[WebhookIssueCommentCreatedPropIssueAllof0PropAssignee, None]
    ] = Field(default=UNSET, title="User")
    assignees: List[
        Union[WebhookIssueCommentCreatedPropIssueAllof0PropAssigneesItems, None]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: Union[str, None] = Field(description="Contents of the issue")
    closed_at: Union[datetime, None] = Field()
    comments: int = Field()
    comments_url: str = Field()
    created_at: datetime = Field()
    draft: Missing[bool] = Field(default=UNSET)
    events_url: str = Field()
    html_url: str = Field()
    id: int = Field()
    labels: Missing[
        List[WebhookIssueCommentCreatedPropIssueAllof0PropLabelsItems]
    ] = Field(default=UNSET)
    labels_url: str = Field()
    locked: Missing[bool] = Field(default=UNSET)
    milestone: Union[
        WebhookIssueCommentCreatedPropIssueAllof0PropMilestone, None
    ] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field()
    performed_via_github_app: Missing[
        Union[WebhookIssueCommentCreatedPropIssueAllof0PropPerformedViaGithubApp, None]
    ] = Field(
        default=UNSET,
        title="App",
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
    )
    pull_request: Missing[
        WebhookIssueCommentCreatedPropIssueAllof0PropPullRequest
    ] = Field(default=UNSET)
    reactions: WebhookIssueCommentCreatedPropIssueAllof0PropReactions = Field(
        title="Reactions"
    )
    repository_url: str = Field()
    state: Missing[Literal["open", "closed"]] = Field(
        default=UNSET, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Missing[Union[str, None]] = Field(default=UNSET)
    timeline_url: Missing[str] = Field(default=UNSET)
    title: str = Field(description="Title of the issue")
    updated_at: datetime = Field()
    url: str = Field(description="URL for the issue")
    user: Union[WebhookIssueCommentCreatedPropIssueAllof0PropUser, None] = Field(
        title="User"
    )


class WebhookIssueCommentCreatedPropIssueAllof0PropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssueCommentCreatedPropIssueAllof0PropAssigneesItems(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssueCommentCreatedPropIssueAllof0PropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookIssueCommentCreatedPropIssueAllof0PropMilestonePropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssueCommentCreatedPropIssueAllof0PropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookIssueCommentCreatedPropIssueAllof0PropMilestonePropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookIssueCommentCreatedPropIssueAllof0PropPerformedViaGithubAppPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssueCommentCreatedPropIssueAllof0PropPerformedViaGithubAppPropPermissions(
    GitHubModel
):
    """WebhookIssueCommentCreatedPropIssueAllof0PropPerformedViaGithubAppPropPermission
    s

    The set of permissions for the GitHub app
    """

    actions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    administration: Missing[Literal["read", "write"]] = Field(default=UNSET)
    checks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    content_references: Missing[Literal["read", "write"]] = Field(default=UNSET)
    contents: Missing[Literal["read", "write"]] = Field(default=UNSET)
    deployments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    emails: Missing[Literal["read", "write"]] = Field(default=UNSET)
    environments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    issues: Missing[Literal["read", "write"]] = Field(default=UNSET)
    keys: Missing[Literal["read", "write"]] = Field(default=UNSET)
    members: Missing[Literal["read", "write"]] = Field(default=UNSET)
    metadata: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_administration: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_plan: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_projects: Missing[Literal["read", "write", "admin"]] = Field(
        default=UNSET
    )
    organization_secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_self_hosted_runners: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_user_blocking: Missing[Literal["read", "write"]] = Field(default=UNSET)
    packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pull_requests: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_projects: Missing[Literal["read", "write", "admin"]] = Field(
        default=UNSET
    )
    secret_scanning_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_events: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_scanning_alert: Missing[Literal["read", "write"]] = Field(default=UNSET)
    single_file: Missing[Literal["read", "write"]] = Field(default=UNSET)
    statuses: Missing[Literal["read", "write"]] = Field(default=UNSET)
    team_discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    vulnerability_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    workflows: Missing[Literal["read", "write"]] = Field(default=UNSET)


class WebhookIssueCommentCreatedPropIssueAllof0PropPerformedViaGithubApp(GitHubModel):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None] = Field()
    description: Union[str, None] = Field()
    events: Missing[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "reminder",
                "pull_request_review_thread",
            ]
        ]
    ] = Field(default=UNSET, description="The list of events for the GitHub app")
    external_url: Union[str, None] = Field()
    html_url: str = Field()
    id: Union[int, None] = Field(description="Unique identifier of the GitHub app")
    name: str = Field(description="The name of the GitHub app")
    node_id: str = Field()
    owner: Union[
        WebhookIssueCommentCreatedPropIssueAllof0PropPerformedViaGithubAppPropOwner,
        None,
    ] = Field(title="User")
    permissions: Missing[
        WebhookIssueCommentCreatedPropIssueAllof0PropPerformedViaGithubAppPropPermissions
    ] = Field(default=UNSET, description="The set of permissions for the GitHub app")
    slug: Missing[str] = Field(
        default=UNSET, description="The slug name of the GitHub app"
    )
    updated_at: Union[datetime, None] = Field()


class WebhookIssueCommentCreatedPropIssueAllof0PropPullRequest(GitHubModel):
    """WebhookIssueCommentCreatedPropIssueAllof0PropPullRequest"""

    diff_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    merged_at: Missing[Union[datetime, None]] = Field(default=UNSET)
    patch_url: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssueCommentCreatedPropIssueAllof0PropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookIssueCommentCreatedPropIssueAllof0PropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssueCommentCreatedPropIssueAllof1(GitHubModel):
    """WebhookIssueCommentCreatedPropIssueAllof1"""

    active_lock_reason: Missing[Union[str, None]] = Field(default=UNSET)
    assignee: Union[
        WebhookIssueCommentCreatedPropIssueAllof1PropAssignee, None
    ] = Field(title="User")
    assignees: Missing[
        List[Union[WebhookIssueCommentCreatedPropIssueAllof1PropAssigneesItems, None]]
    ] = Field(default=UNSET)
    author_association: Missing[str] = Field(default=UNSET)
    body: Missing[Union[str, None]] = Field(default=UNSET)
    closed_at: Missing[Union[str, None]] = Field(default=UNSET)
    comments: Missing[int] = Field(default=UNSET)
    comments_url: Missing[str] = Field(default=UNSET)
    created_at: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    labels: List[WebhookIssueCommentCreatedPropIssueAllof1PropLabelsItems] = Field()
    labels_url: Missing[str] = Field(default=UNSET)
    locked: bool = Field()
    milestone: Missing[
        Union[WebhookIssueCommentCreatedPropIssueAllof1PropMilestone, None]
    ] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    number: Missing[int] = Field(default=UNSET)
    performed_via_github_app: Missing[
        Union[WebhookIssueCommentCreatedPropIssueAllof1PropPerformedViaGithubApp, None]
    ] = Field(default=UNSET)
    reactions: Missing[WebhookIssueCommentCreatedPropIssueAllof1PropReactions] = Field(
        default=UNSET
    )
    repository_url: Missing[str] = Field(default=UNSET)
    state: Literal["open", "closed"] = Field(
        description="State of the issue; either 'open' or 'closed'"
    )
    timeline_url: Missing[str] = Field(default=UNSET)
    title: Missing[str] = Field(default=UNSET)
    updated_at: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)
    user: Missing[WebhookIssueCommentCreatedPropIssueAllof1PropUser] = Field(
        default=UNSET
    )


class WebhookIssueCommentCreatedPropIssueAllof1PropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssueCommentCreatedPropIssueAllof1PropAssigneesItems(GitHubModel):
    """WebhookIssueCommentCreatedPropIssueAllof1PropAssigneesItems"""


class WebhookIssueCommentCreatedPropIssueAllof1PropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookIssueCommentCreatedPropIssueAllof1PropMilestone(GitHubModel):
    """WebhookIssueCommentCreatedPropIssueAllof1PropMilestone"""


class WebhookIssueCommentCreatedPropIssueAllof1PropPerformedViaGithubApp(GitHubModel):
    """WebhookIssueCommentCreatedPropIssueAllof1PropPerformedViaGithubApp"""


class WebhookIssueCommentCreatedPropIssueAllof1PropReactions(GitHubModel):
    """WebhookIssueCommentCreatedPropIssueAllof1PropReactions"""

    plus_one: Missing[int] = Field(default=UNSET, alias="+1")
    minus_one: Missing[int] = Field(default=UNSET, alias="-1")
    confused: Missing[int] = Field(default=UNSET)
    eyes: Missing[int] = Field(default=UNSET)
    heart: Missing[int] = Field(default=UNSET)
    hooray: Missing[int] = Field(default=UNSET)
    laugh: Missing[int] = Field(default=UNSET)
    rocket: Missing[int] = Field(default=UNSET)
    total_count: Missing[int] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssueCommentCreatedPropIssueAllof1PropUser(GitHubModel):
    """WebhookIssueCommentCreatedPropIssueAllof1PropUser"""

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssueCommentCreatedPropIssueMergedAssignees(GitHubModel):
    """WebhookIssueCommentCreatedPropIssueMergedAssignees"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssueCommentCreatedPropIssueMergedMilestone(GitHubModel):
    """WebhookIssueCommentCreatedPropIssueMergedMilestone"""

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookIssueCommentCreatedPropIssueAllof0PropMilestonePropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookIssueCommentCreatedPropIssueMergedPerformedViaGithubApp(GitHubModel):
    """WebhookIssueCommentCreatedPropIssueMergedPerformedViaGithubApp"""

    created_at: Union[datetime, None] = Field()
    description: Union[str, None] = Field()
    events: Missing[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "reminder",
                "pull_request_review_thread",
            ]
        ]
    ] = Field(default=UNSET, description="The list of events for the GitHub app")
    external_url: Union[str, None] = Field()
    html_url: str = Field()
    id: Union[int, None] = Field(description="Unique identifier of the GitHub app")
    name: str = Field(description="The name of the GitHub app")
    node_id: str = Field()
    owner: Union[
        WebhookIssueCommentCreatedPropIssueAllof0PropPerformedViaGithubAppPropOwner,
        None,
    ] = Field(title="User")
    permissions: Missing[
        WebhookIssueCommentCreatedPropIssueAllof0PropPerformedViaGithubAppPropPermissions
    ] = Field(default=UNSET, description="The set of permissions for the GitHub app")
    slug: Missing[str] = Field(
        default=UNSET, description="The slug name of the GitHub app"
    )
    updated_at: Union[datetime, None] = Field()


class WebhookIssueCommentCreatedPropIssueMergedReactions(GitHubModel):
    """WebhookIssueCommentCreatedPropIssueMergedReactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookIssueCommentCreatedPropIssueMergedUser(GitHubModel):
    """WebhookIssueCommentCreatedPropIssueMergedUser"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssueCommentDeleted(GitHubModel):
    """issue_comment deleted event"""

    action: Literal["deleted"] = Field()
    comment: WebhookIssueCommentDeletedPropComment = Field(
        title="issue comment",
        description="The [comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment) itself.",
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    issue: WebhookIssueCommentDeletedPropIssue = Field(
        description="The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) the comment belongs to."
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookIssueCommentDeletedPropComment(GitHubModel):
    """issue comment

    The [comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment)
    itself.
    """

    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: str = Field(description="Contents of the issue comment")
    created_at: datetime = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the issue comment")
    issue_url: str = Field()
    node_id: str = Field()
    performed_via_github_app: Union[None, Integration] = Field()
    reactions: WebhookIssueCommentDeletedPropCommentPropReactions = Field(
        title="Reactions"
    )
    updated_at: datetime = Field()
    url: str = Field(description="URL for the issue comment")
    user: Union[WebhookIssueCommentDeletedPropCommentPropUser, None] = Field(
        title="User"
    )


class WebhookIssueCommentDeletedPropCommentPropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookIssueCommentDeletedPropCommentPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssueCommentDeletedPropIssue(GitHubModel):
    """WebhookIssueCommentDeletedPropIssue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) the comment
    belongs to.
    """

    active_lock_reason: Union[
        Literal["resolved", "off-topic", "too heated", "spam"], None
    ] = Field()
    assignee: Union[
        Union[WebhookIssueCommentDeletedPropIssueAllof0PropAssignee, None], None
    ] = Field(title="User")
    assignees: List[WebhookIssueCommentDeletedPropIssueMergedAssignees] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: Union[Union[str, None], None] = Field(description="Contents of the issue")
    closed_at: Union[datetime, None] = Field()
    comments: int = Field()
    comments_url: str = Field()
    created_at: datetime = Field()
    draft: Missing[bool] = Field(default=UNSET)
    events_url: str = Field()
    html_url: str = Field()
    id: int = Field()
    labels: List[WebhookIssueCommentDeletedPropIssueAllof0PropLabelsItems] = Field()
    labels_url: str = Field()
    locked: bool = Field()
    milestone: Union[WebhookIssueCommentDeletedPropIssueMergedMilestone, None] = Field()
    node_id: str = Field()
    number: int = Field()
    performed_via_github_app: Missing[
        Union[WebhookIssueCommentDeletedPropIssueMergedPerformedViaGithubApp, None]
    ] = Field(default=UNSET)
    pull_request: Missing[
        WebhookIssueCommentDeletedPropIssueAllof0PropPullRequest
    ] = Field(default=UNSET)
    reactions: WebhookIssueCommentDeletedPropIssueMergedReactions = Field()
    repository_url: str = Field()
    state: Literal["open", "closed"] = Field(
        description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Missing[Union[str, None]] = Field(default=UNSET)
    timeline_url: Missing[str] = Field(default=UNSET)
    title: str = Field(description="Title of the issue")
    updated_at: datetime = Field()
    url: str = Field(description="URL for the issue")
    user: WebhookIssueCommentDeletedPropIssueMergedUser = Field()


class WebhookIssueCommentDeletedPropIssueAllof0(GitHubModel):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    assignee: Missing[
        Union[WebhookIssueCommentDeletedPropIssueAllof0PropAssignee, None]
    ] = Field(default=UNSET, title="User")
    assignees: List[
        Union[WebhookIssueCommentDeletedPropIssueAllof0PropAssigneesItems, None]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: Union[str, None] = Field(description="Contents of the issue")
    closed_at: Union[datetime, None] = Field()
    comments: int = Field()
    comments_url: str = Field()
    created_at: datetime = Field()
    draft: Missing[bool] = Field(default=UNSET)
    events_url: str = Field()
    html_url: str = Field()
    id: int = Field()
    labels: Missing[
        List[WebhookIssueCommentDeletedPropIssueAllof0PropLabelsItems]
    ] = Field(default=UNSET)
    labels_url: str = Field()
    locked: Missing[bool] = Field(default=UNSET)
    milestone: Union[
        WebhookIssueCommentDeletedPropIssueAllof0PropMilestone, None
    ] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field()
    performed_via_github_app: Missing[
        Union[WebhookIssueCommentDeletedPropIssueAllof0PropPerformedViaGithubApp, None]
    ] = Field(
        default=UNSET,
        title="App",
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
    )
    pull_request: Missing[
        WebhookIssueCommentDeletedPropIssueAllof0PropPullRequest
    ] = Field(default=UNSET)
    reactions: WebhookIssueCommentDeletedPropIssueAllof0PropReactions = Field(
        title="Reactions"
    )
    repository_url: str = Field()
    state: Missing[Literal["open", "closed"]] = Field(
        default=UNSET, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Missing[Union[str, None]] = Field(default=UNSET)
    timeline_url: Missing[str] = Field(default=UNSET)
    title: str = Field(description="Title of the issue")
    updated_at: datetime = Field()
    url: str = Field(description="URL for the issue")
    user: Union[WebhookIssueCommentDeletedPropIssueAllof0PropUser, None] = Field(
        title="User"
    )


class WebhookIssueCommentDeletedPropIssueAllof0PropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssueCommentDeletedPropIssueAllof0PropAssigneesItems(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssueCommentDeletedPropIssueAllof0PropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookIssueCommentDeletedPropIssueAllof0PropMilestonePropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssueCommentDeletedPropIssueAllof0PropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookIssueCommentDeletedPropIssueAllof0PropMilestonePropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookIssueCommentDeletedPropIssueAllof0PropPerformedViaGithubAppPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssueCommentDeletedPropIssueAllof0PropPerformedViaGithubAppPropPermissions(
    GitHubModel
):
    """WebhookIssueCommentDeletedPropIssueAllof0PropPerformedViaGithubAppPropPermission
    s

    The set of permissions for the GitHub app
    """

    actions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    administration: Missing[Literal["read", "write"]] = Field(default=UNSET)
    checks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    content_references: Missing[Literal["read", "write"]] = Field(default=UNSET)
    contents: Missing[Literal["read", "write"]] = Field(default=UNSET)
    deployments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    emails: Missing[Literal["read", "write"]] = Field(default=UNSET)
    environments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    issues: Missing[Literal["read", "write"]] = Field(default=UNSET)
    keys: Missing[Literal["read", "write"]] = Field(default=UNSET)
    members: Missing[Literal["read", "write"]] = Field(default=UNSET)
    metadata: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_administration: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_plan: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_projects: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_self_hosted_runners: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_user_blocking: Missing[Literal["read", "write"]] = Field(default=UNSET)
    packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pull_requests: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_projects: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secret_scanning_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_events: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_scanning_alert: Missing[Literal["read", "write"]] = Field(default=UNSET)
    single_file: Missing[Literal["read", "write"]] = Field(default=UNSET)
    statuses: Missing[Literal["read", "write"]] = Field(default=UNSET)
    team_discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    vulnerability_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    workflows: Missing[Literal["read", "write"]] = Field(default=UNSET)


class WebhookIssueCommentDeletedPropIssueAllof0PropPerformedViaGithubApp(GitHubModel):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None] = Field()
    description: Union[str, None] = Field()
    events: Missing[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
            ]
        ]
    ] = Field(default=UNSET, description="The list of events for the GitHub app")
    external_url: Union[str, None] = Field()
    html_url: str = Field()
    id: Union[int, None] = Field(description="Unique identifier of the GitHub app")
    name: str = Field(description="The name of the GitHub app")
    node_id: str = Field()
    owner: Union[
        WebhookIssueCommentDeletedPropIssueAllof0PropPerformedViaGithubAppPropOwner,
        None,
    ] = Field(title="User")
    permissions: Missing[
        WebhookIssueCommentDeletedPropIssueAllof0PropPerformedViaGithubAppPropPermissions
    ] = Field(default=UNSET, description="The set of permissions for the GitHub app")
    slug: Missing[str] = Field(
        default=UNSET, description="The slug name of the GitHub app"
    )
    updated_at: Union[datetime, None] = Field()


class WebhookIssueCommentDeletedPropIssueAllof0PropPullRequest(GitHubModel):
    """WebhookIssueCommentDeletedPropIssueAllof0PropPullRequest"""

    diff_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    merged_at: Missing[Union[datetime, None]] = Field(default=UNSET)
    patch_url: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssueCommentDeletedPropIssueAllof0PropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookIssueCommentDeletedPropIssueAllof0PropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssueCommentDeletedPropIssueAllof1(GitHubModel):
    """WebhookIssueCommentDeletedPropIssueAllof1"""

    active_lock_reason: Missing[Union[str, None]] = Field(default=UNSET)
    assignee: Union[
        WebhookIssueCommentDeletedPropIssueAllof1PropAssignee, None
    ] = Field(title="User")
    assignees: Missing[
        List[Union[WebhookIssueCommentDeletedPropIssueAllof1PropAssigneesItems, None]]
    ] = Field(default=UNSET)
    author_association: Missing[str] = Field(default=UNSET)
    body: Missing[Union[str, None]] = Field(default=UNSET)
    closed_at: Missing[Union[str, None]] = Field(default=UNSET)
    comments: Missing[int] = Field(default=UNSET)
    comments_url: Missing[str] = Field(default=UNSET)
    created_at: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    labels: List[WebhookIssueCommentDeletedPropIssueAllof1PropLabelsItems] = Field()
    labels_url: Missing[str] = Field(default=UNSET)
    locked: bool = Field()
    milestone: Missing[
        Union[WebhookIssueCommentDeletedPropIssueAllof1PropMilestone, None]
    ] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    number: Missing[int] = Field(default=UNSET)
    performed_via_github_app: Missing[
        Union[WebhookIssueCommentDeletedPropIssueAllof1PropPerformedViaGithubApp, None]
    ] = Field(default=UNSET)
    reactions: Missing[WebhookIssueCommentDeletedPropIssueAllof1PropReactions] = Field(
        default=UNSET
    )
    repository_url: Missing[str] = Field(default=UNSET)
    state: Literal["open", "closed"] = Field(
        description="State of the issue; either 'open' or 'closed'"
    )
    timeline_url: Missing[str] = Field(default=UNSET)
    title: Missing[str] = Field(default=UNSET)
    updated_at: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)
    user: Missing[WebhookIssueCommentDeletedPropIssueAllof1PropUser] = Field(
        default=UNSET
    )


class WebhookIssueCommentDeletedPropIssueAllof1PropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssueCommentDeletedPropIssueAllof1PropAssigneesItems(GitHubModel):
    """WebhookIssueCommentDeletedPropIssueAllof1PropAssigneesItems"""


class WebhookIssueCommentDeletedPropIssueAllof1PropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookIssueCommentDeletedPropIssueAllof1PropMilestone(GitHubModel):
    """WebhookIssueCommentDeletedPropIssueAllof1PropMilestone"""


class WebhookIssueCommentDeletedPropIssueAllof1PropPerformedViaGithubApp(GitHubModel):
    """WebhookIssueCommentDeletedPropIssueAllof1PropPerformedViaGithubApp"""


class WebhookIssueCommentDeletedPropIssueAllof1PropReactions(GitHubModel):
    """WebhookIssueCommentDeletedPropIssueAllof1PropReactions"""

    plus_one: Missing[int] = Field(default=UNSET, alias="+1")
    minus_one: Missing[int] = Field(default=UNSET, alias="-1")
    confused: Missing[int] = Field(default=UNSET)
    eyes: Missing[int] = Field(default=UNSET)
    heart: Missing[int] = Field(default=UNSET)
    hooray: Missing[int] = Field(default=UNSET)
    laugh: Missing[int] = Field(default=UNSET)
    rocket: Missing[int] = Field(default=UNSET)
    total_count: Missing[int] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssueCommentDeletedPropIssueAllof1PropUser(GitHubModel):
    """WebhookIssueCommentDeletedPropIssueAllof1PropUser"""

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssueCommentDeletedPropIssueMergedAssignees(GitHubModel):
    """WebhookIssueCommentDeletedPropIssueMergedAssignees"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssueCommentDeletedPropIssueMergedMilestone(GitHubModel):
    """WebhookIssueCommentDeletedPropIssueMergedMilestone"""

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookIssueCommentDeletedPropIssueAllof0PropMilestonePropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookIssueCommentDeletedPropIssueMergedPerformedViaGithubApp(GitHubModel):
    """WebhookIssueCommentDeletedPropIssueMergedPerformedViaGithubApp"""

    created_at: Union[datetime, None] = Field()
    description: Union[str, None] = Field()
    events: Missing[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
            ]
        ]
    ] = Field(default=UNSET, description="The list of events for the GitHub app")
    external_url: Union[str, None] = Field()
    html_url: str = Field()
    id: Union[int, None] = Field(description="Unique identifier of the GitHub app")
    name: str = Field(description="The name of the GitHub app")
    node_id: str = Field()
    owner: Union[
        WebhookIssueCommentDeletedPropIssueAllof0PropPerformedViaGithubAppPropOwner,
        None,
    ] = Field(title="User")
    permissions: Missing[
        WebhookIssueCommentDeletedPropIssueAllof0PropPerformedViaGithubAppPropPermissions
    ] = Field(default=UNSET, description="The set of permissions for the GitHub app")
    slug: Missing[str] = Field(
        default=UNSET, description="The slug name of the GitHub app"
    )
    updated_at: Union[datetime, None] = Field()


class WebhookIssueCommentDeletedPropIssueMergedReactions(GitHubModel):
    """WebhookIssueCommentDeletedPropIssueMergedReactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookIssueCommentDeletedPropIssueMergedUser(GitHubModel):
    """WebhookIssueCommentDeletedPropIssueMergedUser"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssueCommentEdited(GitHubModel):
    """issue_comment edited event"""

    action: Literal["edited"] = Field()
    changes: WebhookIssueCommentEditedPropChanges = Field(
        description="The changes to the comment."
    )
    comment: WebhookIssueCommentEditedPropComment = Field(
        title="issue comment",
        description="The [comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment) itself.",
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    issue: WebhookIssueCommentEditedPropIssue = Field(
        description="The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) the comment belongs to."
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookIssueCommentEditedPropChanges(GitHubModel):
    """WebhookIssueCommentEditedPropChanges

    The changes to the comment.
    """

    body: Missing[WebhookIssueCommentEditedPropChangesPropBody] = Field(default=UNSET)


class WebhookIssueCommentEditedPropChangesPropBody(GitHubModel):
    """WebhookIssueCommentEditedPropChangesPropBody"""

    from_: str = Field(alias="from", description="The previous version of the body.")


class WebhookIssueCommentEditedPropComment(GitHubModel):
    """issue comment

    The [comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment)
    itself.
    """

    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: str = Field(description="Contents of the issue comment")
    created_at: datetime = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the issue comment")
    issue_url: str = Field()
    node_id: str = Field()
    performed_via_github_app: Union[None, Integration] = Field()
    reactions: WebhookIssueCommentEditedPropCommentPropReactions = Field(
        title="Reactions"
    )
    updated_at: datetime = Field()
    url: str = Field(description="URL for the issue comment")
    user: Union[WebhookIssueCommentEditedPropCommentPropUser, None] = Field(
        title="User"
    )


class WebhookIssueCommentEditedPropCommentPropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookIssueCommentEditedPropCommentPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssueCommentEditedPropIssue(GitHubModel):
    """WebhookIssueCommentEditedPropIssue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) the comment
    belongs to.
    """

    active_lock_reason: Union[
        Literal["resolved", "off-topic", "too heated", "spam"], None
    ] = Field()
    assignee: Union[
        Union[WebhookIssueCommentEditedPropIssueAllof0PropAssignee, None], None
    ] = Field(title="User")
    assignees: List[WebhookIssueCommentEditedPropIssueMergedAssignees] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: Union[Union[str, None], None] = Field(description="Contents of the issue")
    closed_at: Union[datetime, None] = Field()
    comments: int = Field()
    comments_url: str = Field()
    created_at: datetime = Field()
    draft: Missing[bool] = Field(default=UNSET)
    events_url: str = Field()
    html_url: str = Field()
    id: int = Field()
    labels: List[WebhookIssueCommentEditedPropIssueAllof0PropLabelsItems] = Field()
    labels_url: str = Field()
    locked: bool = Field()
    milestone: Union[WebhookIssueCommentEditedPropIssueMergedMilestone, None] = Field()
    node_id: str = Field()
    number: int = Field()
    performed_via_github_app: Missing[
        Union[WebhookIssueCommentEditedPropIssueMergedPerformedViaGithubApp, None]
    ] = Field(default=UNSET)
    pull_request: Missing[
        WebhookIssueCommentEditedPropIssueAllof0PropPullRequest
    ] = Field(default=UNSET)
    reactions: WebhookIssueCommentEditedPropIssueMergedReactions = Field()
    repository_url: str = Field()
    state: Literal["open", "closed"] = Field(
        description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Missing[Union[str, None]] = Field(default=UNSET)
    timeline_url: Missing[str] = Field(default=UNSET)
    title: str = Field(description="Title of the issue")
    updated_at: datetime = Field()
    url: str = Field(description="URL for the issue")
    user: WebhookIssueCommentEditedPropIssueMergedUser = Field()


class WebhookIssueCommentEditedPropIssueAllof0(GitHubModel):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    assignee: Missing[
        Union[WebhookIssueCommentEditedPropIssueAllof0PropAssignee, None]
    ] = Field(default=UNSET, title="User")
    assignees: List[
        Union[WebhookIssueCommentEditedPropIssueAllof0PropAssigneesItems, None]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: Union[str, None] = Field(description="Contents of the issue")
    closed_at: Union[datetime, None] = Field()
    comments: int = Field()
    comments_url: str = Field()
    created_at: datetime = Field()
    draft: Missing[bool] = Field(default=UNSET)
    events_url: str = Field()
    html_url: str = Field()
    id: int = Field()
    labels: Missing[
        List[WebhookIssueCommentEditedPropIssueAllof0PropLabelsItems]
    ] = Field(default=UNSET)
    labels_url: str = Field()
    locked: Missing[bool] = Field(default=UNSET)
    milestone: Union[
        WebhookIssueCommentEditedPropIssueAllof0PropMilestone, None
    ] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field()
    performed_via_github_app: Missing[
        Union[WebhookIssueCommentEditedPropIssueAllof0PropPerformedViaGithubApp, None]
    ] = Field(
        default=UNSET,
        title="App",
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
    )
    pull_request: Missing[
        WebhookIssueCommentEditedPropIssueAllof0PropPullRequest
    ] = Field(default=UNSET)
    reactions: WebhookIssueCommentEditedPropIssueAllof0PropReactions = Field(
        title="Reactions"
    )
    repository_url: str = Field()
    state: Missing[Literal["open", "closed"]] = Field(
        default=UNSET, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Missing[Union[str, None]] = Field(default=UNSET)
    timeline_url: Missing[str] = Field(default=UNSET)
    title: str = Field(description="Title of the issue")
    updated_at: datetime = Field()
    url: str = Field(description="URL for the issue")
    user: Union[WebhookIssueCommentEditedPropIssueAllof0PropUser, None] = Field(
        title="User"
    )


class WebhookIssueCommentEditedPropIssueAllof0PropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssueCommentEditedPropIssueAllof0PropAssigneesItems(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssueCommentEditedPropIssueAllof0PropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookIssueCommentEditedPropIssueAllof0PropMilestonePropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssueCommentEditedPropIssueAllof0PropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookIssueCommentEditedPropIssueAllof0PropMilestonePropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookIssueCommentEditedPropIssueAllof0PropPerformedViaGithubAppPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssueCommentEditedPropIssueAllof0PropPerformedViaGithubAppPropPermissions(
    GitHubModel
):
    """WebhookIssueCommentEditedPropIssueAllof0PropPerformedViaGithubAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    administration: Missing[Literal["read", "write"]] = Field(default=UNSET)
    checks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    content_references: Missing[Literal["read", "write"]] = Field(default=UNSET)
    contents: Missing[Literal["read", "write"]] = Field(default=UNSET)
    deployments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    emails: Missing[Literal["read", "write"]] = Field(default=UNSET)
    environments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    issues: Missing[Literal["read", "write"]] = Field(default=UNSET)
    keys: Missing[Literal["read", "write"]] = Field(default=UNSET)
    members: Missing[Literal["read", "write"]] = Field(default=UNSET)
    metadata: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_administration: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_plan: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_projects: Missing[Literal["read", "write", "admin"]] = Field(
        default=UNSET
    )
    organization_secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_self_hosted_runners: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_user_blocking: Missing[Literal["read", "write"]] = Field(default=UNSET)
    packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pull_requests: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_projects: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secret_scanning_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_events: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_scanning_alert: Missing[Literal["read", "write"]] = Field(default=UNSET)
    single_file: Missing[Literal["read", "write"]] = Field(default=UNSET)
    statuses: Missing[Literal["read", "write"]] = Field(default=UNSET)
    team_discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    vulnerability_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    workflows: Missing[Literal["read", "write"]] = Field(default=UNSET)


class WebhookIssueCommentEditedPropIssueAllof0PropPerformedViaGithubApp(GitHubModel):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None] = Field()
    description: Union[str, None] = Field()
    events: Missing[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "reminder",
                "pull_request_review_thread",
            ]
        ]
    ] = Field(default=UNSET, description="The list of events for the GitHub app")
    external_url: Union[str, None] = Field()
    html_url: str = Field()
    id: Union[int, None] = Field(description="Unique identifier of the GitHub app")
    name: str = Field(description="The name of the GitHub app")
    node_id: str = Field()
    owner: Union[
        WebhookIssueCommentEditedPropIssueAllof0PropPerformedViaGithubAppPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookIssueCommentEditedPropIssueAllof0PropPerformedViaGithubAppPropPermissions
    ] = Field(default=UNSET, description="The set of permissions for the GitHub app")
    slug: Missing[str] = Field(
        default=UNSET, description="The slug name of the GitHub app"
    )
    updated_at: Union[datetime, None] = Field()


class WebhookIssueCommentEditedPropIssueAllof0PropPullRequest(GitHubModel):
    """WebhookIssueCommentEditedPropIssueAllof0PropPullRequest"""

    diff_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    merged_at: Missing[Union[datetime, None]] = Field(default=UNSET)
    patch_url: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssueCommentEditedPropIssueAllof0PropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookIssueCommentEditedPropIssueAllof0PropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssueCommentEditedPropIssueAllof1(GitHubModel):
    """WebhookIssueCommentEditedPropIssueAllof1"""

    active_lock_reason: Missing[Union[str, None]] = Field(default=UNSET)
    assignee: Union[WebhookIssueCommentEditedPropIssueAllof1PropAssignee, None] = Field(
        title="User"
    )
    assignees: Missing[
        List[Union[WebhookIssueCommentEditedPropIssueAllof1PropAssigneesItems, None]]
    ] = Field(default=UNSET)
    author_association: Missing[str] = Field(default=UNSET)
    body: Missing[Union[str, None]] = Field(default=UNSET)
    closed_at: Missing[Union[str, None]] = Field(default=UNSET)
    comments: Missing[int] = Field(default=UNSET)
    comments_url: Missing[str] = Field(default=UNSET)
    created_at: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    labels: List[WebhookIssueCommentEditedPropIssueAllof1PropLabelsItems] = Field()
    labels_url: Missing[str] = Field(default=UNSET)
    locked: bool = Field()
    milestone: Missing[
        Union[WebhookIssueCommentEditedPropIssueAllof1PropMilestone, None]
    ] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    number: Missing[int] = Field(default=UNSET)
    performed_via_github_app: Missing[
        Union[WebhookIssueCommentEditedPropIssueAllof1PropPerformedViaGithubApp, None]
    ] = Field(default=UNSET)
    reactions: Missing[WebhookIssueCommentEditedPropIssueAllof1PropReactions] = Field(
        default=UNSET
    )
    repository_url: Missing[str] = Field(default=UNSET)
    state: Literal["open", "closed"] = Field(
        description="State of the issue; either 'open' or 'closed'"
    )
    timeline_url: Missing[str] = Field(default=UNSET)
    title: Missing[str] = Field(default=UNSET)
    updated_at: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)
    user: Missing[WebhookIssueCommentEditedPropIssueAllof1PropUser] = Field(
        default=UNSET
    )


class WebhookIssueCommentEditedPropIssueAllof1PropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssueCommentEditedPropIssueAllof1PropAssigneesItems(GitHubModel):
    """WebhookIssueCommentEditedPropIssueAllof1PropAssigneesItems"""


class WebhookIssueCommentEditedPropIssueAllof1PropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookIssueCommentEditedPropIssueAllof1PropMilestone(GitHubModel):
    """WebhookIssueCommentEditedPropIssueAllof1PropMilestone"""


class WebhookIssueCommentEditedPropIssueAllof1PropPerformedViaGithubApp(GitHubModel):
    """WebhookIssueCommentEditedPropIssueAllof1PropPerformedViaGithubApp"""


class WebhookIssueCommentEditedPropIssueAllof1PropReactions(GitHubModel):
    """WebhookIssueCommentEditedPropIssueAllof1PropReactions"""

    plus_one: Missing[int] = Field(default=UNSET, alias="+1")
    minus_one: Missing[int] = Field(default=UNSET, alias="-1")
    confused: Missing[int] = Field(default=UNSET)
    eyes: Missing[int] = Field(default=UNSET)
    heart: Missing[int] = Field(default=UNSET)
    hooray: Missing[int] = Field(default=UNSET)
    laugh: Missing[int] = Field(default=UNSET)
    rocket: Missing[int] = Field(default=UNSET)
    total_count: Missing[int] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssueCommentEditedPropIssueAllof1PropUser(GitHubModel):
    """WebhookIssueCommentEditedPropIssueAllof1PropUser"""

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssueCommentEditedPropIssueMergedAssignees(GitHubModel):
    """WebhookIssueCommentEditedPropIssueMergedAssignees"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssueCommentEditedPropIssueMergedMilestone(GitHubModel):
    """WebhookIssueCommentEditedPropIssueMergedMilestone"""

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookIssueCommentEditedPropIssueAllof0PropMilestonePropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookIssueCommentEditedPropIssueMergedPerformedViaGithubApp(GitHubModel):
    """WebhookIssueCommentEditedPropIssueMergedPerformedViaGithubApp"""

    created_at: Union[datetime, None] = Field()
    description: Union[str, None] = Field()
    events: Missing[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "reminder",
                "pull_request_review_thread",
            ]
        ]
    ] = Field(default=UNSET, description="The list of events for the GitHub app")
    external_url: Union[str, None] = Field()
    html_url: str = Field()
    id: Union[int, None] = Field(description="Unique identifier of the GitHub app")
    name: str = Field(description="The name of the GitHub app")
    node_id: str = Field()
    owner: Union[
        WebhookIssueCommentEditedPropIssueAllof0PropPerformedViaGithubAppPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookIssueCommentEditedPropIssueAllof0PropPerformedViaGithubAppPropPermissions
    ] = Field(default=UNSET, description="The set of permissions for the GitHub app")
    slug: Missing[str] = Field(
        default=UNSET, description="The slug name of the GitHub app"
    )
    updated_at: Union[datetime, None] = Field()


class WebhookIssueCommentEditedPropIssueMergedReactions(GitHubModel):
    """WebhookIssueCommentEditedPropIssueMergedReactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookIssueCommentEditedPropIssueMergedUser(GitHubModel):
    """WebhookIssueCommentEditedPropIssueMergedUser"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesAssigned(GitHubModel):
    """issues assigned event"""

    action: Literal["assigned"] = Field(description="The action that was performed.")
    assignee: Missing[Union[WebhookIssuesAssignedPropAssignee, None]] = Field(
        default=UNSET, title="User"
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    issue: WebhookIssuesAssignedPropIssue = Field(
        title="Issue",
        description="The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.",
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookIssuesAssignedPropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesAssignedPropIssue(GitHubModel):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    assignee: Missing[Union[WebhookIssuesAssignedPropIssuePropAssignee, None]] = Field(
        default=UNSET, title="User"
    )
    assignees: List[
        Union[WebhookIssuesAssignedPropIssuePropAssigneesItems, None]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: Union[str, None] = Field(description="Contents of the issue")
    closed_at: Union[datetime, None] = Field()
    comments: int = Field()
    comments_url: str = Field()
    created_at: datetime = Field()
    draft: Missing[bool] = Field(default=UNSET)
    events_url: str = Field()
    html_url: str = Field()
    id: int = Field()
    labels: Missing[List[WebhookIssuesAssignedPropIssuePropLabelsItems]] = Field(
        default=UNSET
    )
    labels_url: str = Field()
    locked: Missing[bool] = Field(default=UNSET)
    milestone: Union[WebhookIssuesAssignedPropIssuePropMilestone, None] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field()
    performed_via_github_app: Missing[
        Union[WebhookIssuesAssignedPropIssuePropPerformedViaGithubApp, None]
    ] = Field(
        default=UNSET,
        title="App",
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
    )
    pull_request: Missing[WebhookIssuesAssignedPropIssuePropPullRequest] = Field(
        default=UNSET
    )
    reactions: WebhookIssuesAssignedPropIssuePropReactions = Field(title="Reactions")
    repository_url: str = Field()
    state: Missing[Literal["open", "closed"]] = Field(
        default=UNSET, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Missing[Union[str, None]] = Field(default=UNSET)
    timeline_url: Missing[str] = Field(default=UNSET)
    title: str = Field(description="Title of the issue")
    updated_at: datetime = Field()
    url: str = Field(description="URL for the issue")
    user: Union[WebhookIssuesAssignedPropIssuePropUser, None] = Field(title="User")


class WebhookIssuesAssignedPropIssuePropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesAssignedPropIssuePropAssigneesItems(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesAssignedPropIssuePropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookIssuesAssignedPropIssuePropMilestonePropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesAssignedPropIssuePropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookIssuesAssignedPropIssuePropMilestonePropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookIssuesAssignedPropIssuePropPerformedViaGithubAppPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesAssignedPropIssuePropPerformedViaGithubAppPropPermissions(
    GitHubModel
):
    """WebhookIssuesAssignedPropIssuePropPerformedViaGithubAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    administration: Missing[Literal["read", "write"]] = Field(default=UNSET)
    checks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    content_references: Missing[Literal["read", "write"]] = Field(default=UNSET)
    contents: Missing[Literal["read", "write"]] = Field(default=UNSET)
    deployments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    emails: Missing[Literal["read", "write"]] = Field(default=UNSET)
    environments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    issues: Missing[Literal["read", "write"]] = Field(default=UNSET)
    keys: Missing[Literal["read", "write"]] = Field(default=UNSET)
    members: Missing[Literal["read", "write"]] = Field(default=UNSET)
    metadata: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_administration: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_plan: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_projects: Missing[Literal["read", "write", "admin"]] = Field(
        default=UNSET
    )
    organization_secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_self_hosted_runners: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_user_blocking: Missing[Literal["read", "write"]] = Field(default=UNSET)
    packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pull_requests: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_projects: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secret_scanning_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_events: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_scanning_alert: Missing[Literal["read", "write"]] = Field(default=UNSET)
    single_file: Missing[Literal["read", "write"]] = Field(default=UNSET)
    statuses: Missing[Literal["read", "write"]] = Field(default=UNSET)
    team_discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    vulnerability_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    workflows: Missing[Literal["read", "write"]] = Field(default=UNSET)


class WebhookIssuesAssignedPropIssuePropPerformedViaGithubApp(GitHubModel):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None] = Field()
    description: Union[str, None] = Field()
    events: Missing[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "reminder",
                "pull_request_review_thread",
            ]
        ]
    ] = Field(default=UNSET, description="The list of events for the GitHub app")
    external_url: Union[str, None] = Field()
    html_url: str = Field()
    id: Union[int, None] = Field(description="Unique identifier of the GitHub app")
    name: str = Field(description="The name of the GitHub app")
    node_id: str = Field()
    owner: Union[
        WebhookIssuesAssignedPropIssuePropPerformedViaGithubAppPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookIssuesAssignedPropIssuePropPerformedViaGithubAppPropPermissions
    ] = Field(default=UNSET, description="The set of permissions for the GitHub app")
    slug: Missing[str] = Field(
        default=UNSET, description="The slug name of the GitHub app"
    )
    updated_at: Union[datetime, None] = Field()


class WebhookIssuesAssignedPropIssuePropPullRequest(GitHubModel):
    """WebhookIssuesAssignedPropIssuePropPullRequest"""

    diff_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    merged_at: Missing[Union[datetime, None]] = Field(default=UNSET)
    patch_url: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesAssignedPropIssuePropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookIssuesAssignedPropIssuePropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesClosed(GitHubModel):
    """issues closed event"""

    action: Literal["closed"] = Field(description="The action that was performed.")
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    issue: WebhookIssuesClosedPropIssue = Field(
        description="The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself."
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookIssuesClosedPropIssue(GitHubModel):
    """WebhookIssuesClosedPropIssue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        Literal["resolved", "off-topic", "too heated", "spam"], None
    ] = Field()
    assignee: Missing[Union[WebhookIssuesClosedPropIssueMergedAssignee, None]] = Field(
        default=UNSET
    )
    assignees: List[WebhookIssuesClosedPropIssueMergedAssignees] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: Union[Union[str, None], None] = Field(description="Contents of the issue")
    closed_at: Union[datetime, None] = Field()
    comments: int = Field()
    comments_url: str = Field()
    created_at: datetime = Field()
    draft: Missing[bool] = Field(default=UNSET)
    events_url: str = Field()
    html_url: str = Field()
    id: int = Field()
    labels: Missing[List[WebhookIssuesClosedPropIssueMergedLabels]] = Field(
        default=UNSET
    )
    labels_url: str = Field()
    locked: Missing[bool] = Field(default=UNSET)
    milestone: Union[WebhookIssuesClosedPropIssueMergedMilestone, None] = Field()
    node_id: str = Field()
    number: int = Field()
    performed_via_github_app: Missing[
        Union[WebhookIssuesClosedPropIssueMergedPerformedViaGithubApp, None]
    ] = Field(default=UNSET)
    pull_request: Missing[WebhookIssuesClosedPropIssueAllof0PropPullRequest] = Field(
        default=UNSET
    )
    reactions: WebhookIssuesClosedPropIssueMergedReactions = Field()
    repository_url: str = Field()
    state: Literal["open", "closed"] = Field(
        description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Missing[Union[str, None]] = Field(default=UNSET)
    timeline_url: Missing[str] = Field(default=UNSET)
    title: str = Field(description="Title of the issue")
    updated_at: datetime = Field()
    url: str = Field(description="URL for the issue")
    user: WebhookIssuesClosedPropIssueMergedUser = Field()


class WebhookIssuesClosedPropIssueAllof0(GitHubModel):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    assignee: Missing[
        Union[WebhookIssuesClosedPropIssueAllof0PropAssignee, None]
    ] = Field(default=UNSET, title="User")
    assignees: List[
        Union[WebhookIssuesClosedPropIssueAllof0PropAssigneesItems, None]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: Union[str, None] = Field(description="Contents of the issue")
    closed_at: Union[datetime, None] = Field()
    comments: int = Field()
    comments_url: str = Field()
    created_at: datetime = Field()
    draft: Missing[bool] = Field(default=UNSET)
    events_url: str = Field()
    html_url: str = Field()
    id: int = Field()
    labels: Missing[List[WebhookIssuesClosedPropIssueAllof0PropLabelsItems]] = Field(
        default=UNSET
    )
    labels_url: str = Field()
    locked: Missing[bool] = Field(default=UNSET)
    milestone: Union[WebhookIssuesClosedPropIssueAllof0PropMilestone, None] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field()
    performed_via_github_app: Missing[
        Union[WebhookIssuesClosedPropIssueAllof0PropPerformedViaGithubApp, None]
    ] = Field(
        default=UNSET,
        title="App",
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
    )
    pull_request: Missing[WebhookIssuesClosedPropIssueAllof0PropPullRequest] = Field(
        default=UNSET
    )
    reactions: WebhookIssuesClosedPropIssueAllof0PropReactions = Field(
        title="Reactions"
    )
    repository_url: str = Field()
    state: Missing[Literal["open", "closed"]] = Field(
        default=UNSET, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Missing[Union[str, None]] = Field(default=UNSET)
    timeline_url: Missing[str] = Field(default=UNSET)
    title: str = Field(description="Title of the issue")
    updated_at: datetime = Field()
    url: str = Field(description="URL for the issue")
    user: Union[WebhookIssuesClosedPropIssueAllof0PropUser, None] = Field(title="User")


class WebhookIssuesClosedPropIssueAllof0PropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesClosedPropIssueAllof0PropAssigneesItems(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesClosedPropIssueAllof0PropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookIssuesClosedPropIssueAllof0PropMilestonePropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesClosedPropIssueAllof0PropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookIssuesClosedPropIssueAllof0PropMilestonePropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookIssuesClosedPropIssueAllof0PropPerformedViaGithubAppPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesClosedPropIssueAllof0PropPerformedViaGithubAppPropPermissions(
    GitHubModel
):
    """WebhookIssuesClosedPropIssueAllof0PropPerformedViaGithubAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    administration: Missing[Literal["read", "write"]] = Field(default=UNSET)
    checks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    content_references: Missing[Literal["read", "write"]] = Field(default=UNSET)
    contents: Missing[Literal["read", "write"]] = Field(default=UNSET)
    deployments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    emails: Missing[Literal["read", "write"]] = Field(default=UNSET)
    environments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    issues: Missing[Literal["read", "write"]] = Field(default=UNSET)
    keys: Missing[Literal["read", "write"]] = Field(default=UNSET)
    members: Missing[Literal["read", "write"]] = Field(default=UNSET)
    metadata: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_administration: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_plan: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_projects: Missing[Literal["read", "write", "admin"]] = Field(
        default=UNSET
    )
    organization_secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_self_hosted_runners: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_user_blocking: Missing[Literal["read", "write"]] = Field(default=UNSET)
    packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pull_requests: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_projects: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secret_scanning_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_events: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_scanning_alert: Missing[Literal["read", "write"]] = Field(default=UNSET)
    single_file: Missing[Literal["read", "write"]] = Field(default=UNSET)
    statuses: Missing[Literal["read", "write"]] = Field(default=UNSET)
    team_discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    vulnerability_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    workflows: Missing[Literal["read", "write"]] = Field(default=UNSET)


class WebhookIssuesClosedPropIssueAllof0PropPerformedViaGithubApp(GitHubModel):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None] = Field()
    description: Union[str, None] = Field()
    events: Missing[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "security_and_analysis",
                "reminder",
                "pull_request_review_thread",
            ]
        ]
    ] = Field(default=UNSET, description="The list of events for the GitHub app")
    external_url: Union[str, None] = Field()
    html_url: str = Field()
    id: Union[int, None] = Field(description="Unique identifier of the GitHub app")
    name: str = Field(description="The name of the GitHub app")
    node_id: str = Field()
    owner: Union[
        WebhookIssuesClosedPropIssueAllof0PropPerformedViaGithubAppPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookIssuesClosedPropIssueAllof0PropPerformedViaGithubAppPropPermissions
    ] = Field(default=UNSET, description="The set of permissions for the GitHub app")
    slug: Missing[str] = Field(
        default=UNSET, description="The slug name of the GitHub app"
    )
    updated_at: Union[datetime, None] = Field()


class WebhookIssuesClosedPropIssueAllof0PropPullRequest(GitHubModel):
    """WebhookIssuesClosedPropIssueAllof0PropPullRequest"""

    diff_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    merged_at: Missing[Union[datetime, None]] = Field(default=UNSET)
    patch_url: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesClosedPropIssueAllof0PropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookIssuesClosedPropIssueAllof0PropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesClosedPropIssueAllof1(GitHubModel):
    """WebhookIssuesClosedPropIssueAllof1"""

    active_lock_reason: Missing[Union[str, None]] = Field(default=UNSET)
    assignee: Missing[
        Union[WebhookIssuesClosedPropIssueAllof1PropAssignee, None]
    ] = Field(default=UNSET)
    assignees: Missing[
        List[Union[WebhookIssuesClosedPropIssueAllof1PropAssigneesItems, None]]
    ] = Field(default=UNSET)
    author_association: Missing[str] = Field(default=UNSET)
    body: Missing[Union[str, None]] = Field(default=UNSET)
    closed_at: Union[str, None] = Field()
    comments: Missing[int] = Field(default=UNSET)
    comments_url: Missing[str] = Field(default=UNSET)
    created_at: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    labels: Missing[
        List[Union[WebhookIssuesClosedPropIssueAllof1PropLabelsItems, None]]
    ] = Field(default=UNSET)
    labels_url: Missing[str] = Field(default=UNSET)
    locked: Missing[bool] = Field(default=UNSET)
    milestone: Missing[
        Union[WebhookIssuesClosedPropIssueAllof1PropMilestone, None]
    ] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    number: Missing[int] = Field(default=UNSET)
    performed_via_github_app: Missing[
        Union[WebhookIssuesClosedPropIssueAllof1PropPerformedViaGithubApp, None]
    ] = Field(default=UNSET)
    reactions: Missing[WebhookIssuesClosedPropIssueAllof1PropReactions] = Field(
        default=UNSET
    )
    repository_url: Missing[str] = Field(default=UNSET)
    state: Literal["closed", "open"] = Field()
    timeline_url: Missing[str] = Field(default=UNSET)
    title: Missing[str] = Field(default=UNSET)
    updated_at: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)
    user: Missing[WebhookIssuesClosedPropIssueAllof1PropUser] = Field(default=UNSET)


class WebhookIssuesClosedPropIssueAllof1PropAssignee(GitHubModel):
    """WebhookIssuesClosedPropIssueAllof1PropAssignee"""


class WebhookIssuesClosedPropIssueAllof1PropAssigneesItems(GitHubModel):
    """WebhookIssuesClosedPropIssueAllof1PropAssigneesItems"""


class WebhookIssuesClosedPropIssueAllof1PropLabelsItems(GitHubModel):
    """WebhookIssuesClosedPropIssueAllof1PropLabelsItems"""


class WebhookIssuesClosedPropIssueAllof1PropMilestone(GitHubModel):
    """WebhookIssuesClosedPropIssueAllof1PropMilestone"""


class WebhookIssuesClosedPropIssueAllof1PropPerformedViaGithubApp(GitHubModel):
    """WebhookIssuesClosedPropIssueAllof1PropPerformedViaGithubApp"""


class WebhookIssuesClosedPropIssueAllof1PropReactions(GitHubModel):
    """WebhookIssuesClosedPropIssueAllof1PropReactions"""

    plus_one: Missing[int] = Field(default=UNSET, alias="+1")
    minus_one: Missing[int] = Field(default=UNSET, alias="-1")
    confused: Missing[int] = Field(default=UNSET)
    eyes: Missing[int] = Field(default=UNSET)
    heart: Missing[int] = Field(default=UNSET)
    hooray: Missing[int] = Field(default=UNSET)
    laugh: Missing[int] = Field(default=UNSET)
    rocket: Missing[int] = Field(default=UNSET)
    total_count: Missing[int] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesClosedPropIssueAllof1PropUser(GitHubModel):
    """WebhookIssuesClosedPropIssueAllof1PropUser"""

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesClosedPropIssueMergedAssignee(GitHubModel):
    """WebhookIssuesClosedPropIssueMergedAssignee"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesClosedPropIssueMergedAssignees(GitHubModel):
    """WebhookIssuesClosedPropIssueMergedAssignees"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesClosedPropIssueMergedLabels(GitHubModel):
    """WebhookIssuesClosedPropIssueMergedLabels"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookIssuesClosedPropIssueMergedMilestone(GitHubModel):
    """WebhookIssuesClosedPropIssueMergedMilestone"""

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookIssuesClosedPropIssueAllof0PropMilestonePropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookIssuesClosedPropIssueMergedPerformedViaGithubApp(GitHubModel):
    """WebhookIssuesClosedPropIssueMergedPerformedViaGithubApp"""

    created_at: Union[datetime, None] = Field()
    description: Union[str, None] = Field()
    events: Missing[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "security_and_analysis",
                "reminder",
                "pull_request_review_thread",
            ]
        ]
    ] = Field(default=UNSET, description="The list of events for the GitHub app")
    external_url: Union[str, None] = Field()
    html_url: str = Field()
    id: Union[int, None] = Field(description="Unique identifier of the GitHub app")
    name: str = Field(description="The name of the GitHub app")
    node_id: str = Field()
    owner: Union[
        WebhookIssuesClosedPropIssueAllof0PropPerformedViaGithubAppPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookIssuesClosedPropIssueAllof0PropPerformedViaGithubAppPropPermissions
    ] = Field(default=UNSET, description="The set of permissions for the GitHub app")
    slug: Missing[str] = Field(
        default=UNSET, description="The slug name of the GitHub app"
    )
    updated_at: Union[datetime, None] = Field()


class WebhookIssuesClosedPropIssueMergedReactions(GitHubModel):
    """WebhookIssuesClosedPropIssueMergedReactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookIssuesClosedPropIssueMergedUser(GitHubModel):
    """WebhookIssuesClosedPropIssueMergedUser"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesDeleted(GitHubModel):
    """issues deleted event"""

    action: Literal["deleted"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    issue: WebhookIssuesDeletedPropIssue = Field(
        title="Issue",
        description="The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.",
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookIssuesDeletedPropIssue(GitHubModel):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    assignee: Missing[Union[WebhookIssuesDeletedPropIssuePropAssignee, None]] = Field(
        default=UNSET, title="User"
    )
    assignees: List[
        Union[WebhookIssuesDeletedPropIssuePropAssigneesItems, None]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: Union[str, None] = Field(description="Contents of the issue")
    closed_at: Union[datetime, None] = Field()
    comments: int = Field()
    comments_url: str = Field()
    created_at: datetime = Field()
    draft: Missing[bool] = Field(default=UNSET)
    events_url: str = Field()
    html_url: str = Field()
    id: int = Field()
    labels: Missing[List[WebhookIssuesDeletedPropIssuePropLabelsItems]] = Field(
        default=UNSET
    )
    labels_url: str = Field()
    locked: Missing[bool] = Field(default=UNSET)
    milestone: Union[WebhookIssuesDeletedPropIssuePropMilestone, None] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field()
    performed_via_github_app: Missing[
        Union[WebhookIssuesDeletedPropIssuePropPerformedViaGithubApp, None]
    ] = Field(
        default=UNSET,
        title="App",
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
    )
    pull_request: Missing[WebhookIssuesDeletedPropIssuePropPullRequest] = Field(
        default=UNSET
    )
    reactions: WebhookIssuesDeletedPropIssuePropReactions = Field(title="Reactions")
    repository_url: str = Field()
    state: Missing[Literal["open", "closed"]] = Field(
        default=UNSET, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Missing[Union[str, None]] = Field(default=UNSET)
    timeline_url: Missing[str] = Field(default=UNSET)
    title: str = Field(description="Title of the issue")
    updated_at: datetime = Field()
    url: str = Field(description="URL for the issue")
    user: Union[WebhookIssuesDeletedPropIssuePropUser, None] = Field(title="User")


class WebhookIssuesDeletedPropIssuePropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesDeletedPropIssuePropAssigneesItems(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesDeletedPropIssuePropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookIssuesDeletedPropIssuePropMilestonePropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesDeletedPropIssuePropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[WebhookIssuesDeletedPropIssuePropMilestonePropCreator, None] = Field(
        title="User"
    )
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookIssuesDeletedPropIssuePropPerformedViaGithubAppPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesDeletedPropIssuePropPerformedViaGithubAppPropPermissions(
    GitHubModel
):
    """WebhookIssuesDeletedPropIssuePropPerformedViaGithubAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    administration: Missing[Literal["read", "write"]] = Field(default=UNSET)
    checks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    content_references: Missing[Literal["read", "write"]] = Field(default=UNSET)
    contents: Missing[Literal["read", "write"]] = Field(default=UNSET)
    deployments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    emails: Missing[Literal["read", "write"]] = Field(default=UNSET)
    environments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    issues: Missing[Literal["read", "write"]] = Field(default=UNSET)
    keys: Missing[Literal["read", "write"]] = Field(default=UNSET)
    members: Missing[Literal["read", "write"]] = Field(default=UNSET)
    metadata: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_administration: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_plan: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_projects: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_self_hosted_runners: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_user_blocking: Missing[Literal["read", "write"]] = Field(default=UNSET)
    packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pull_requests: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_projects: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secret_scanning_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_events: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_scanning_alert: Missing[Literal["read", "write"]] = Field(default=UNSET)
    single_file: Missing[Literal["read", "write"]] = Field(default=UNSET)
    statuses: Missing[Literal["read", "write"]] = Field(default=UNSET)
    team_discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    vulnerability_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    workflows: Missing[Literal["read", "write"]] = Field(default=UNSET)


class WebhookIssuesDeletedPropIssuePropPerformedViaGithubApp(GitHubModel):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None] = Field()
    description: Union[str, None] = Field()
    events: Missing[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "reminder",
            ]
        ]
    ] = Field(default=UNSET, description="The list of events for the GitHub app")
    external_url: Union[str, None] = Field()
    html_url: str = Field()
    id: Union[int, None] = Field(description="Unique identifier of the GitHub app")
    name: str = Field(description="The name of the GitHub app")
    node_id: str = Field()
    owner: Union[
        WebhookIssuesDeletedPropIssuePropPerformedViaGithubAppPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookIssuesDeletedPropIssuePropPerformedViaGithubAppPropPermissions
    ] = Field(default=UNSET, description="The set of permissions for the GitHub app")
    slug: Missing[str] = Field(
        default=UNSET, description="The slug name of the GitHub app"
    )
    updated_at: Union[datetime, None] = Field()


class WebhookIssuesDeletedPropIssuePropPullRequest(GitHubModel):
    """WebhookIssuesDeletedPropIssuePropPullRequest"""

    diff_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    merged_at: Missing[Union[datetime, None]] = Field(default=UNSET)
    patch_url: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesDeletedPropIssuePropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookIssuesDeletedPropIssuePropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesDemilestoned(GitHubModel):
    """issues demilestoned event"""

    action: Literal["demilestoned"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    issue: WebhookIssuesDemilestonedPropIssue = Field()
    milestone: Missing[WebhookIssuesDemilestonedPropMilestone] = Field(
        default=UNSET,
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookIssuesDemilestonedPropIssue(GitHubModel):
    """WebhookIssuesDemilestonedPropIssue"""

    active_lock_reason: Union[
        Literal["resolved", "off-topic", "too heated", "spam"], None
    ] = Field()
    assignee: Missing[
        Union[WebhookIssuesDemilestonedPropIssueMergedAssignee, None]
    ] = Field(default=UNSET)
    assignees: List[WebhookIssuesDemilestonedPropIssueMergedAssignees] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: Union[Union[str, None], None] = Field(description="Contents of the issue")
    closed_at: Union[datetime, None] = Field()
    comments: int = Field()
    comments_url: str = Field()
    created_at: datetime = Field()
    draft: Missing[bool] = Field(default=UNSET)
    events_url: str = Field()
    html_url: str = Field()
    id: int = Field()
    labels: Missing[List[WebhookIssuesDemilestonedPropIssueMergedLabels]] = Field(
        default=UNSET
    )
    labels_url: str = Field()
    locked: Missing[bool] = Field(default=UNSET)
    milestone: Union[
        Union[WebhookIssuesDemilestonedPropIssueAllof0PropMilestone, None], None
    ] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field()
    performed_via_github_app: Missing[
        Union[WebhookIssuesDemilestonedPropIssueMergedPerformedViaGithubApp, None]
    ] = Field(default=UNSET)
    pull_request: Missing[
        WebhookIssuesDemilestonedPropIssueAllof0PropPullRequest
    ] = Field(default=UNSET)
    reactions: WebhookIssuesDemilestonedPropIssueMergedReactions = Field()
    repository_url: str = Field()
    state: Missing[Literal["open", "closed"]] = Field(
        default=UNSET, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Missing[Union[str, None]] = Field(default=UNSET)
    timeline_url: Missing[str] = Field(default=UNSET)
    title: str = Field(description="Title of the issue")
    updated_at: datetime = Field()
    url: str = Field(description="URL for the issue")
    user: WebhookIssuesDemilestonedPropIssueMergedUser = Field()


class WebhookIssuesDemilestonedPropIssueAllof0(GitHubModel):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    assignee: Missing[
        Union[WebhookIssuesDemilestonedPropIssueAllof0PropAssignee, None]
    ] = Field(default=UNSET, title="User")
    assignees: List[
        Union[WebhookIssuesDemilestonedPropIssueAllof0PropAssigneesItems, None]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: Union[str, None] = Field(description="Contents of the issue")
    closed_at: Union[datetime, None] = Field()
    comments: int = Field()
    comments_url: str = Field()
    created_at: datetime = Field()
    draft: Missing[bool] = Field(default=UNSET)
    events_url: str = Field()
    html_url: str = Field()
    id: int = Field()
    labels: Missing[
        List[WebhookIssuesDemilestonedPropIssueAllof0PropLabelsItems]
    ] = Field(default=UNSET)
    labels_url: str = Field()
    locked: Missing[bool] = Field(default=UNSET)
    milestone: Union[
        WebhookIssuesDemilestonedPropIssueAllof0PropMilestone, None
    ] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field()
    performed_via_github_app: Missing[
        Union[WebhookIssuesDemilestonedPropIssueAllof0PropPerformedViaGithubApp, None]
    ] = Field(
        default=UNSET,
        title="App",
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
    )
    pull_request: Missing[
        WebhookIssuesDemilestonedPropIssueAllof0PropPullRequest
    ] = Field(default=UNSET)
    reactions: WebhookIssuesDemilestonedPropIssueAllof0PropReactions = Field(
        title="Reactions"
    )
    repository_url: str = Field()
    state: Missing[Literal["open", "closed"]] = Field(
        default=UNSET, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Missing[Union[str, None]] = Field(default=UNSET)
    timeline_url: Missing[str] = Field(default=UNSET)
    title: str = Field(description="Title of the issue")
    updated_at: datetime = Field()
    url: str = Field(description="URL for the issue")
    user: Union[WebhookIssuesDemilestonedPropIssueAllof0PropUser, None] = Field(
        title="User"
    )


class WebhookIssuesDemilestonedPropIssueAllof0PropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesDemilestonedPropIssueAllof0PropAssigneesItems(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesDemilestonedPropIssueAllof0PropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookIssuesDemilestonedPropIssueAllof0PropMilestonePropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesDemilestonedPropIssueAllof0PropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookIssuesDemilestonedPropIssueAllof0PropMilestonePropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookIssuesDemilestonedPropIssueAllof0PropPerformedViaGithubAppPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesDemilestonedPropIssueAllof0PropPerformedViaGithubAppPropPermissions(
    GitHubModel
):
    """WebhookIssuesDemilestonedPropIssueAllof0PropPerformedViaGithubAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    administration: Missing[Literal["read", "write"]] = Field(default=UNSET)
    checks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    content_references: Missing[Literal["read", "write"]] = Field(default=UNSET)
    contents: Missing[Literal["read", "write"]] = Field(default=UNSET)
    deployments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    emails: Missing[Literal["read", "write"]] = Field(default=UNSET)
    environments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    issues: Missing[Literal["read", "write"]] = Field(default=UNSET)
    keys: Missing[Literal["read", "write"]] = Field(default=UNSET)
    members: Missing[Literal["read", "write"]] = Field(default=UNSET)
    metadata: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_administration: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_plan: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_projects: Missing[Literal["read", "write", "admin"]] = Field(
        default=UNSET
    )
    organization_secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_self_hosted_runners: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_user_blocking: Missing[Literal["read", "write"]] = Field(default=UNSET)
    packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pull_requests: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_projects: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secret_scanning_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_events: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_scanning_alert: Missing[Literal["read", "write"]] = Field(default=UNSET)
    single_file: Missing[Literal["read", "write"]] = Field(default=UNSET)
    statuses: Missing[Literal["read", "write"]] = Field(default=UNSET)
    team_discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    vulnerability_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    workflows: Missing[Literal["read", "write"]] = Field(default=UNSET)


class WebhookIssuesDemilestonedPropIssueAllof0PropPerformedViaGithubApp(GitHubModel):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None] = Field()
    description: Union[str, None] = Field()
    events: Missing[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
            ]
        ]
    ] = Field(default=UNSET, description="The list of events for the GitHub app")
    external_url: Union[str, None] = Field()
    html_url: str = Field()
    id: Union[int, None] = Field(description="Unique identifier of the GitHub app")
    name: str = Field(description="The name of the GitHub app")
    node_id: str = Field()
    owner: Union[
        WebhookIssuesDemilestonedPropIssueAllof0PropPerformedViaGithubAppPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookIssuesDemilestonedPropIssueAllof0PropPerformedViaGithubAppPropPermissions
    ] = Field(default=UNSET, description="The set of permissions for the GitHub app")
    slug: Missing[str] = Field(
        default=UNSET, description="The slug name of the GitHub app"
    )
    updated_at: Union[datetime, None] = Field()


class WebhookIssuesDemilestonedPropIssueAllof0PropPullRequest(GitHubModel):
    """WebhookIssuesDemilestonedPropIssueAllof0PropPullRequest"""

    diff_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    merged_at: Missing[Union[datetime, None]] = Field(default=UNSET)
    patch_url: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesDemilestonedPropIssueAllof0PropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookIssuesDemilestonedPropIssueAllof0PropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesDemilestonedPropIssueAllof1(GitHubModel):
    """WebhookIssuesDemilestonedPropIssueAllof1"""

    active_lock_reason: Missing[Union[str, None]] = Field(default=UNSET)
    assignee: Missing[
        Union[WebhookIssuesDemilestonedPropIssueAllof1PropAssignee, None]
    ] = Field(default=UNSET)
    assignees: Missing[
        List[Union[WebhookIssuesDemilestonedPropIssueAllof1PropAssigneesItems, None]]
    ] = Field(default=UNSET)
    author_association: Missing[str] = Field(default=UNSET)
    body: Missing[Union[str, None]] = Field(default=UNSET)
    closed_at: Missing[Union[str, None]] = Field(default=UNSET)
    comments: Missing[int] = Field(default=UNSET)
    comments_url: Missing[str] = Field(default=UNSET)
    created_at: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    labels: Missing[
        List[Union[WebhookIssuesDemilestonedPropIssueAllof1PropLabelsItems, None]]
    ] = Field(default=UNSET)
    labels_url: Missing[str] = Field(default=UNSET)
    locked: Missing[bool] = Field(default=UNSET)
    milestone: Union[
        WebhookIssuesDemilestonedPropIssueAllof1PropMilestone, None
    ] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: Missing[str] = Field(default=UNSET)
    number: Missing[int] = Field(default=UNSET)
    performed_via_github_app: Missing[
        Union[WebhookIssuesDemilestonedPropIssueAllof1PropPerformedViaGithubApp, None]
    ] = Field(default=UNSET)
    reactions: Missing[WebhookIssuesDemilestonedPropIssueAllof1PropReactions] = Field(
        default=UNSET
    )
    repository_url: Missing[str] = Field(default=UNSET)
    state: Missing[str] = Field(default=UNSET)
    timeline_url: Missing[str] = Field(default=UNSET)
    title: Missing[str] = Field(default=UNSET)
    updated_at: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)
    user: Missing[WebhookIssuesDemilestonedPropIssueAllof1PropUser] = Field(
        default=UNSET
    )


class WebhookIssuesDemilestonedPropIssueAllof1PropAssignee(GitHubModel):
    """WebhookIssuesDemilestonedPropIssueAllof1PropAssignee"""


class WebhookIssuesDemilestonedPropIssueAllof1PropAssigneesItems(GitHubModel):
    """WebhookIssuesDemilestonedPropIssueAllof1PropAssigneesItems"""


class WebhookIssuesDemilestonedPropIssueAllof1PropLabelsItems(GitHubModel):
    """WebhookIssuesDemilestonedPropIssueAllof1PropLabelsItems"""


class WebhookIssuesDemilestonedPropIssueAllof1PropMilestonePropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesDemilestonedPropIssueAllof1PropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookIssuesDemilestonedPropIssueAllof1PropMilestonePropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookIssuesDemilestonedPropIssueAllof1PropPerformedViaGithubApp(GitHubModel):
    """WebhookIssuesDemilestonedPropIssueAllof1PropPerformedViaGithubApp"""


class WebhookIssuesDemilestonedPropIssueAllof1PropReactions(GitHubModel):
    """WebhookIssuesDemilestonedPropIssueAllof1PropReactions"""

    plus_one: Missing[int] = Field(default=UNSET, alias="+1")
    minus_one: Missing[int] = Field(default=UNSET, alias="-1")
    confused: Missing[int] = Field(default=UNSET)
    eyes: Missing[int] = Field(default=UNSET)
    heart: Missing[int] = Field(default=UNSET)
    hooray: Missing[int] = Field(default=UNSET)
    laugh: Missing[int] = Field(default=UNSET)
    rocket: Missing[int] = Field(default=UNSET)
    total_count: Missing[int] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesDemilestonedPropIssueAllof1PropUser(GitHubModel):
    """WebhookIssuesDemilestonedPropIssueAllof1PropUser"""

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesDemilestonedPropIssueMergedAssignee(GitHubModel):
    """WebhookIssuesDemilestonedPropIssueMergedAssignee"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesDemilestonedPropIssueMergedAssignees(GitHubModel):
    """WebhookIssuesDemilestonedPropIssueMergedAssignees"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesDemilestonedPropIssueMergedLabels(GitHubModel):
    """WebhookIssuesDemilestonedPropIssueMergedLabels"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookIssuesDemilestonedPropIssueMergedPerformedViaGithubApp(GitHubModel):
    """WebhookIssuesDemilestonedPropIssueMergedPerformedViaGithubApp"""

    created_at: Union[datetime, None] = Field()
    description: Union[str, None] = Field()
    events: Missing[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
            ]
        ]
    ] = Field(default=UNSET, description="The list of events for the GitHub app")
    external_url: Union[str, None] = Field()
    html_url: str = Field()
    id: Union[int, None] = Field(description="Unique identifier of the GitHub app")
    name: str = Field(description="The name of the GitHub app")
    node_id: str = Field()
    owner: Union[
        WebhookIssuesDemilestonedPropIssueAllof0PropPerformedViaGithubAppPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookIssuesDemilestonedPropIssueAllof0PropPerformedViaGithubAppPropPermissions
    ] = Field(default=UNSET, description="The set of permissions for the GitHub app")
    slug: Missing[str] = Field(
        default=UNSET, description="The slug name of the GitHub app"
    )
    updated_at: Union[datetime, None] = Field()


class WebhookIssuesDemilestonedPropIssueMergedReactions(GitHubModel):
    """WebhookIssuesDemilestonedPropIssueMergedReactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookIssuesDemilestonedPropIssueMergedUser(GitHubModel):
    """WebhookIssuesDemilestonedPropIssueMergedUser"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesDemilestonedPropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[WebhookIssuesDemilestonedPropMilestonePropCreator, None] = Field(
        title="User"
    )
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookIssuesDemilestonedPropMilestonePropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesEdited(GitHubModel):
    """issues edited event"""

    action: Literal["edited"] = Field()
    changes: WebhookIssuesEditedPropChanges = Field(
        description="The changes to the issue."
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    issue: WebhookIssuesEditedPropIssue = Field(
        title="Issue",
        description="The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.",
    )
    label: Missing[WebhookIssuesEditedPropLabel] = Field(default=UNSET, title="Label")
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookIssuesEditedPropChanges(GitHubModel):
    """WebhookIssuesEditedPropChanges

    The changes to the issue.
    """

    body: Missing[WebhookIssuesEditedPropChangesPropBody] = Field(default=UNSET)
    title: Missing[WebhookIssuesEditedPropChangesPropTitle] = Field(default=UNSET)


class WebhookIssuesEditedPropChangesPropBody(GitHubModel):
    """WebhookIssuesEditedPropChangesPropBody"""

    from_: str = Field(alias="from", description="The previous version of the body.")


class WebhookIssuesEditedPropChangesPropTitle(GitHubModel):
    """WebhookIssuesEditedPropChangesPropTitle"""

    from_: str = Field(alias="from", description="The previous version of the title.")


class WebhookIssuesEditedPropIssue(GitHubModel):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    assignee: Missing[Union[WebhookIssuesEditedPropIssuePropAssignee, None]] = Field(
        default=UNSET, title="User"
    )
    assignees: List[
        Union[WebhookIssuesEditedPropIssuePropAssigneesItems, None]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: Union[str, None] = Field(description="Contents of the issue")
    closed_at: Union[datetime, None] = Field()
    comments: int = Field()
    comments_url: str = Field()
    created_at: datetime = Field()
    draft: Missing[bool] = Field(default=UNSET)
    events_url: str = Field()
    html_url: str = Field()
    id: int = Field()
    labels: Missing[List[WebhookIssuesEditedPropIssuePropLabelsItems]] = Field(
        default=UNSET
    )
    labels_url: str = Field()
    locked: Missing[bool] = Field(default=UNSET)
    milestone: Union[WebhookIssuesEditedPropIssuePropMilestone, None] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field()
    performed_via_github_app: Missing[
        Union[WebhookIssuesEditedPropIssuePropPerformedViaGithubApp, None]
    ] = Field(
        default=UNSET,
        title="App",
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
    )
    pull_request: Missing[WebhookIssuesEditedPropIssuePropPullRequest] = Field(
        default=UNSET
    )
    reactions: WebhookIssuesEditedPropIssuePropReactions = Field(title="Reactions")
    repository_url: str = Field()
    state: Missing[Literal["open", "closed"]] = Field(
        default=UNSET, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Missing[Union[str, None]] = Field(default=UNSET)
    timeline_url: Missing[str] = Field(default=UNSET)
    title: str = Field(description="Title of the issue")
    updated_at: datetime = Field()
    url: str = Field(description="URL for the issue")
    user: Union[WebhookIssuesEditedPropIssuePropUser, None] = Field(title="User")


class WebhookIssuesEditedPropIssuePropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesEditedPropIssuePropAssigneesItems(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesEditedPropIssuePropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookIssuesEditedPropIssuePropMilestonePropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesEditedPropIssuePropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[WebhookIssuesEditedPropIssuePropMilestonePropCreator, None] = Field(
        title="User"
    )
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookIssuesEditedPropIssuePropPerformedViaGithubAppPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesEditedPropIssuePropPerformedViaGithubAppPropPermissions(GitHubModel):
    """WebhookIssuesEditedPropIssuePropPerformedViaGithubAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    administration: Missing[Literal["read", "write"]] = Field(default=UNSET)
    checks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    content_references: Missing[Literal["read", "write"]] = Field(default=UNSET)
    contents: Missing[Literal["read", "write"]] = Field(default=UNSET)
    deployments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    emails: Missing[Literal["read", "write"]] = Field(default=UNSET)
    environments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    issues: Missing[Literal["read", "write"]] = Field(default=UNSET)
    keys: Missing[Literal["read", "write"]] = Field(default=UNSET)
    members: Missing[Literal["read", "write"]] = Field(default=UNSET)
    metadata: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_administration: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_plan: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_projects: Missing[Literal["read", "write", "admin"]] = Field(
        default=UNSET
    )
    organization_secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_self_hosted_runners: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_user_blocking: Missing[Literal["read", "write"]] = Field(default=UNSET)
    packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pull_requests: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_projects: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secret_scanning_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_events: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_scanning_alert: Missing[Literal["read", "write"]] = Field(default=UNSET)
    single_file: Missing[Literal["read", "write"]] = Field(default=UNSET)
    statuses: Missing[Literal["read", "write"]] = Field(default=UNSET)
    team_discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    vulnerability_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    workflows: Missing[Literal["read", "write"]] = Field(default=UNSET)


class WebhookIssuesEditedPropIssuePropPerformedViaGithubApp(GitHubModel):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None] = Field()
    description: Union[str, None] = Field()
    events: Missing[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "security_and_analysis",
                "pull_request_review_thread",
                "reminder",
            ]
        ]
    ] = Field(default=UNSET, description="The list of events for the GitHub app")
    external_url: Union[str, None] = Field()
    html_url: str = Field()
    id: Union[int, None] = Field(description="Unique identifier of the GitHub app")
    name: str = Field(description="The name of the GitHub app")
    node_id: str = Field()
    owner: Union[
        WebhookIssuesEditedPropIssuePropPerformedViaGithubAppPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookIssuesEditedPropIssuePropPerformedViaGithubAppPropPermissions
    ] = Field(default=UNSET, description="The set of permissions for the GitHub app")
    slug: Missing[str] = Field(
        default=UNSET, description="The slug name of the GitHub app"
    )
    updated_at: Union[datetime, None] = Field()


class WebhookIssuesEditedPropIssuePropPullRequest(GitHubModel):
    """WebhookIssuesEditedPropIssuePropPullRequest"""

    diff_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    merged_at: Missing[Union[datetime, None]] = Field(default=UNSET)
    patch_url: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesEditedPropIssuePropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookIssuesEditedPropIssuePropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesEditedPropLabel(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookIssuesLabeled(GitHubModel):
    """issues labeled event"""

    action: Literal["labeled"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    issue: WebhookIssuesLabeledPropIssue = Field(
        title="Issue",
        description="The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.",
    )
    label: Missing[WebhookIssuesLabeledPropLabel] = Field(default=UNSET, title="Label")
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookIssuesLabeledPropIssue(GitHubModel):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    assignee: Missing[Union[WebhookIssuesLabeledPropIssuePropAssignee, None]] = Field(
        default=UNSET, title="User"
    )
    assignees: List[
        Union[WebhookIssuesLabeledPropIssuePropAssigneesItems, None]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: Union[str, None] = Field(description="Contents of the issue")
    closed_at: Union[datetime, None] = Field()
    comments: int = Field()
    comments_url: str = Field()
    created_at: datetime = Field()
    draft: Missing[bool] = Field(default=UNSET)
    events_url: str = Field()
    html_url: str = Field()
    id: int = Field()
    labels: Missing[List[WebhookIssuesLabeledPropIssuePropLabelsItems]] = Field(
        default=UNSET
    )
    labels_url: str = Field()
    locked: Missing[bool] = Field(default=UNSET)
    milestone: Union[WebhookIssuesLabeledPropIssuePropMilestone, None] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field()
    performed_via_github_app: Missing[
        Union[WebhookIssuesLabeledPropIssuePropPerformedViaGithubApp, None]
    ] = Field(
        default=UNSET,
        title="App",
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
    )
    pull_request: Missing[WebhookIssuesLabeledPropIssuePropPullRequest] = Field(
        default=UNSET
    )
    reactions: WebhookIssuesLabeledPropIssuePropReactions = Field(title="Reactions")
    repository_url: str = Field()
    state: Missing[Literal["open", "closed"]] = Field(
        default=UNSET, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Missing[Union[str, None]] = Field(default=UNSET)
    timeline_url: Missing[str] = Field(default=UNSET)
    title: str = Field(description="Title of the issue")
    updated_at: datetime = Field()
    url: str = Field(description="URL for the issue")
    user: Union[WebhookIssuesLabeledPropIssuePropUser, None] = Field(title="User")


class WebhookIssuesLabeledPropIssuePropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesLabeledPropIssuePropAssigneesItems(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesLabeledPropIssuePropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookIssuesLabeledPropIssuePropMilestonePropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesLabeledPropIssuePropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[WebhookIssuesLabeledPropIssuePropMilestonePropCreator, None] = Field(
        title="User"
    )
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookIssuesLabeledPropIssuePropPerformedViaGithubAppPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesLabeledPropIssuePropPerformedViaGithubAppPropPermissions(
    GitHubModel
):
    """WebhookIssuesLabeledPropIssuePropPerformedViaGithubAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    administration: Missing[Literal["read", "write"]] = Field(default=UNSET)
    checks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    content_references: Missing[Literal["read", "write"]] = Field(default=UNSET)
    contents: Missing[Literal["read", "write"]] = Field(default=UNSET)
    deployments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    emails: Missing[Literal["read", "write"]] = Field(default=UNSET)
    environments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    issues: Missing[Literal["read", "write"]] = Field(default=UNSET)
    keys: Missing[Literal["read", "write"]] = Field(default=UNSET)
    members: Missing[Literal["read", "write"]] = Field(default=UNSET)
    metadata: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_administration: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_plan: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_projects: Missing[Literal["read", "write", "admin"]] = Field(
        default=UNSET
    )
    organization_secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_self_hosted_runners: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_user_blocking: Missing[Literal["read", "write"]] = Field(default=UNSET)
    packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pull_requests: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_projects: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secret_scanning_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_events: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_scanning_alert: Missing[Literal["read", "write"]] = Field(default=UNSET)
    single_file: Missing[Literal["read", "write"]] = Field(default=UNSET)
    statuses: Missing[Literal["read", "write"]] = Field(default=UNSET)
    team_discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    vulnerability_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    workflows: Missing[Literal["read", "write"]] = Field(default=UNSET)


class WebhookIssuesLabeledPropIssuePropPerformedViaGithubApp(GitHubModel):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None] = Field()
    description: Union[str, None] = Field()
    events: Missing[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "pull_request_review_thread",
                "reminder",
            ]
        ]
    ] = Field(default=UNSET, description="The list of events for the GitHub app")
    external_url: Union[str, None] = Field()
    html_url: str = Field()
    id: Union[int, None] = Field(description="Unique identifier of the GitHub app")
    name: str = Field(description="The name of the GitHub app")
    node_id: str = Field()
    owner: Union[
        WebhookIssuesLabeledPropIssuePropPerformedViaGithubAppPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookIssuesLabeledPropIssuePropPerformedViaGithubAppPropPermissions
    ] = Field(default=UNSET, description="The set of permissions for the GitHub app")
    slug: Missing[str] = Field(
        default=UNSET, description="The slug name of the GitHub app"
    )
    updated_at: Union[datetime, None] = Field()


class WebhookIssuesLabeledPropIssuePropPullRequest(GitHubModel):
    """WebhookIssuesLabeledPropIssuePropPullRequest"""

    diff_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    merged_at: Missing[Union[datetime, None]] = Field(default=UNSET)
    patch_url: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesLabeledPropIssuePropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookIssuesLabeledPropIssuePropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesLabeledPropLabel(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookIssuesLocked(GitHubModel):
    """issues locked event"""

    action: Literal["locked"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    issue: WebhookIssuesLockedPropIssue = Field()
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookIssuesLockedPropIssue(GitHubModel):
    """WebhookIssuesLockedPropIssue"""

    active_lock_reason: Union[
        Union[None, Literal["resolved", "off-topic", "too heated", "spam"]], None
    ] = Field()
    assignee: Missing[Union[WebhookIssuesLockedPropIssueMergedAssignee, None]] = Field(
        default=UNSET
    )
    assignees: List[WebhookIssuesLockedPropIssueMergedAssignees] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: Union[Union[str, None], None] = Field(description="Contents of the issue")
    closed_at: Union[datetime, None] = Field()
    comments: int = Field()
    comments_url: str = Field()
    created_at: datetime = Field()
    draft: Missing[bool] = Field(default=UNSET)
    events_url: str = Field()
    html_url: str = Field()
    id: int = Field()
    labels: Missing[List[WebhookIssuesLockedPropIssueMergedLabels]] = Field(
        default=UNSET
    )
    labels_url: str = Field()
    locked: Literal[True] = Field()
    milestone: Union[WebhookIssuesLockedPropIssueMergedMilestone, None] = Field()
    node_id: str = Field()
    number: int = Field()
    performed_via_github_app: Missing[
        Union[WebhookIssuesLockedPropIssueMergedPerformedViaGithubApp, None]
    ] = Field(default=UNSET)
    pull_request: Missing[WebhookIssuesLockedPropIssueAllof0PropPullRequest] = Field(
        default=UNSET
    )
    reactions: WebhookIssuesLockedPropIssueMergedReactions = Field()
    repository_url: str = Field()
    state: Missing[Literal["open", "closed"]] = Field(
        default=UNSET, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Missing[Union[str, None]] = Field(default=UNSET)
    timeline_url: Missing[str] = Field(default=UNSET)
    title: str = Field(description="Title of the issue")
    updated_at: datetime = Field()
    url: str = Field(description="URL for the issue")
    user: WebhookIssuesLockedPropIssueMergedUser = Field()


class WebhookIssuesLockedPropIssueAllof0(GitHubModel):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    assignee: Missing[
        Union[WebhookIssuesLockedPropIssueAllof0PropAssignee, None]
    ] = Field(default=UNSET, title="User")
    assignees: List[
        Union[WebhookIssuesLockedPropIssueAllof0PropAssigneesItems, None]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: Union[str, None] = Field(description="Contents of the issue")
    closed_at: Union[datetime, None] = Field()
    comments: int = Field()
    comments_url: str = Field()
    created_at: datetime = Field()
    draft: Missing[bool] = Field(default=UNSET)
    events_url: str = Field()
    html_url: str = Field()
    id: int = Field()
    labels: Missing[List[WebhookIssuesLockedPropIssueAllof0PropLabelsItems]] = Field(
        default=UNSET
    )
    labels_url: str = Field()
    locked: Missing[bool] = Field(default=UNSET)
    milestone: Union[WebhookIssuesLockedPropIssueAllof0PropMilestone, None] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field()
    performed_via_github_app: Missing[
        Union[WebhookIssuesLockedPropIssueAllof0PropPerformedViaGithubApp, None]
    ] = Field(
        default=UNSET,
        title="App",
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
    )
    pull_request: Missing[WebhookIssuesLockedPropIssueAllof0PropPullRequest] = Field(
        default=UNSET
    )
    reactions: WebhookIssuesLockedPropIssueAllof0PropReactions = Field(
        title="Reactions"
    )
    repository_url: str = Field()
    state: Missing[Literal["open", "closed"]] = Field(
        default=UNSET, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Missing[Union[str, None]] = Field(default=UNSET)
    timeline_url: Missing[str] = Field(default=UNSET)
    title: str = Field(description="Title of the issue")
    updated_at: datetime = Field()
    url: str = Field(description="URL for the issue")
    user: Union[WebhookIssuesLockedPropIssueAllof0PropUser, None] = Field(title="User")


class WebhookIssuesLockedPropIssueAllof0PropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesLockedPropIssueAllof0PropAssigneesItems(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesLockedPropIssueAllof0PropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookIssuesLockedPropIssueAllof0PropMilestonePropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesLockedPropIssueAllof0PropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookIssuesLockedPropIssueAllof0PropMilestonePropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookIssuesLockedPropIssueAllof0PropPerformedViaGithubAppPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesLockedPropIssueAllof0PropPerformedViaGithubAppPropPermissions(
    GitHubModel
):
    """WebhookIssuesLockedPropIssueAllof0PropPerformedViaGithubAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    administration: Missing[Literal["read", "write"]] = Field(default=UNSET)
    checks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    content_references: Missing[Literal["read", "write"]] = Field(default=UNSET)
    contents: Missing[Literal["read", "write"]] = Field(default=UNSET)
    deployments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    emails: Missing[Literal["read", "write"]] = Field(default=UNSET)
    environments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    issues: Missing[Literal["read", "write"]] = Field(default=UNSET)
    keys: Missing[Literal["read", "write"]] = Field(default=UNSET)
    members: Missing[Literal["read", "write"]] = Field(default=UNSET)
    metadata: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_administration: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_plan: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_projects: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_self_hosted_runners: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_user_blocking: Missing[Literal["read", "write"]] = Field(default=UNSET)
    packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pull_requests: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_projects: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secret_scanning_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_events: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_scanning_alert: Missing[Literal["read", "write"]] = Field(default=UNSET)
    single_file: Missing[Literal["read", "write"]] = Field(default=UNSET)
    statuses: Missing[Literal["read", "write"]] = Field(default=UNSET)
    team_discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    vulnerability_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    workflows: Missing[Literal["read", "write"]] = Field(default=UNSET)


class WebhookIssuesLockedPropIssueAllof0PropPerformedViaGithubApp(GitHubModel):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None] = Field()
    description: Union[str, None] = Field()
    events: Missing[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "reminder",
                "security_and_analysis",
            ]
        ]
    ] = Field(default=UNSET, description="The list of events for the GitHub app")
    external_url: Union[str, None] = Field()
    html_url: str = Field()
    id: Union[int, None] = Field(description="Unique identifier of the GitHub app")
    name: str = Field(description="The name of the GitHub app")
    node_id: str = Field()
    owner: Union[
        WebhookIssuesLockedPropIssueAllof0PropPerformedViaGithubAppPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookIssuesLockedPropIssueAllof0PropPerformedViaGithubAppPropPermissions
    ] = Field(default=UNSET, description="The set of permissions for the GitHub app")
    slug: Missing[str] = Field(
        default=UNSET, description="The slug name of the GitHub app"
    )
    updated_at: Union[datetime, None] = Field()


class WebhookIssuesLockedPropIssueAllof0PropPullRequest(GitHubModel):
    """WebhookIssuesLockedPropIssueAllof0PropPullRequest"""

    diff_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    merged_at: Missing[Union[datetime, None]] = Field(default=UNSET)
    patch_url: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesLockedPropIssueAllof0PropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookIssuesLockedPropIssueAllof0PropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesLockedPropIssueAllof1(GitHubModel):
    """WebhookIssuesLockedPropIssueAllof1"""

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    assignee: Missing[
        Union[WebhookIssuesLockedPropIssueAllof1PropAssignee, None]
    ] = Field(default=UNSET)
    assignees: Missing[
        List[Union[WebhookIssuesLockedPropIssueAllof1PropAssigneesItems, None]]
    ] = Field(default=UNSET)
    author_association: Missing[str] = Field(default=UNSET)
    body: Missing[Union[str, None]] = Field(default=UNSET)
    closed_at: Missing[Union[str, None]] = Field(default=UNSET)
    comments: Missing[int] = Field(default=UNSET)
    comments_url: Missing[str] = Field(default=UNSET)
    created_at: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    labels: Missing[
        List[Union[WebhookIssuesLockedPropIssueAllof1PropLabelsItems, None]]
    ] = Field(default=UNSET)
    labels_url: Missing[str] = Field(default=UNSET)
    locked: Literal[True] = Field()
    milestone: Missing[
        Union[WebhookIssuesLockedPropIssueAllof1PropMilestone, None]
    ] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    number: Missing[int] = Field(default=UNSET)
    performed_via_github_app: Missing[
        Union[WebhookIssuesLockedPropIssueAllof1PropPerformedViaGithubApp, None]
    ] = Field(default=UNSET)
    reactions: Missing[WebhookIssuesLockedPropIssueAllof1PropReactions] = Field(
        default=UNSET
    )
    repository_url: Missing[str] = Field(default=UNSET)
    state: Missing[str] = Field(default=UNSET)
    timeline_url: Missing[str] = Field(default=UNSET)
    title: Missing[str] = Field(default=UNSET)
    updated_at: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)
    user: Missing[WebhookIssuesLockedPropIssueAllof1PropUser] = Field(default=UNSET)


class WebhookIssuesLockedPropIssueAllof1PropAssignee(GitHubModel):
    """WebhookIssuesLockedPropIssueAllof1PropAssignee"""


class WebhookIssuesLockedPropIssueAllof1PropAssigneesItems(GitHubModel):
    """WebhookIssuesLockedPropIssueAllof1PropAssigneesItems"""


class WebhookIssuesLockedPropIssueAllof1PropLabelsItems(GitHubModel):
    """WebhookIssuesLockedPropIssueAllof1PropLabelsItems"""


class WebhookIssuesLockedPropIssueAllof1PropMilestone(GitHubModel):
    """WebhookIssuesLockedPropIssueAllof1PropMilestone"""


class WebhookIssuesLockedPropIssueAllof1PropPerformedViaGithubApp(GitHubModel):
    """WebhookIssuesLockedPropIssueAllof1PropPerformedViaGithubApp"""


class WebhookIssuesLockedPropIssueAllof1PropReactions(GitHubModel):
    """WebhookIssuesLockedPropIssueAllof1PropReactions"""

    plus_one: Missing[int] = Field(default=UNSET, alias="+1")
    minus_one: Missing[int] = Field(default=UNSET, alias="-1")
    confused: Missing[int] = Field(default=UNSET)
    eyes: Missing[int] = Field(default=UNSET)
    heart: Missing[int] = Field(default=UNSET)
    hooray: Missing[int] = Field(default=UNSET)
    laugh: Missing[int] = Field(default=UNSET)
    rocket: Missing[int] = Field(default=UNSET)
    total_count: Missing[int] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesLockedPropIssueAllof1PropUser(GitHubModel):
    """WebhookIssuesLockedPropIssueAllof1PropUser"""

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesLockedPropIssueMergedAssignee(GitHubModel):
    """WebhookIssuesLockedPropIssueMergedAssignee"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesLockedPropIssueMergedAssignees(GitHubModel):
    """WebhookIssuesLockedPropIssueMergedAssignees"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesLockedPropIssueMergedLabels(GitHubModel):
    """WebhookIssuesLockedPropIssueMergedLabels"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookIssuesLockedPropIssueMergedMilestone(GitHubModel):
    """WebhookIssuesLockedPropIssueMergedMilestone"""

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookIssuesLockedPropIssueAllof0PropMilestonePropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookIssuesLockedPropIssueMergedPerformedViaGithubApp(GitHubModel):
    """WebhookIssuesLockedPropIssueMergedPerformedViaGithubApp"""

    created_at: Union[datetime, None] = Field()
    description: Union[str, None] = Field()
    events: Missing[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "reminder",
                "security_and_analysis",
            ]
        ]
    ] = Field(default=UNSET, description="The list of events for the GitHub app")
    external_url: Union[str, None] = Field()
    html_url: str = Field()
    id: Union[int, None] = Field(description="Unique identifier of the GitHub app")
    name: str = Field(description="The name of the GitHub app")
    node_id: str = Field()
    owner: Union[
        WebhookIssuesLockedPropIssueAllof0PropPerformedViaGithubAppPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookIssuesLockedPropIssueAllof0PropPerformedViaGithubAppPropPermissions
    ] = Field(default=UNSET, description="The set of permissions for the GitHub app")
    slug: Missing[str] = Field(
        default=UNSET, description="The slug name of the GitHub app"
    )
    updated_at: Union[datetime, None] = Field()


class WebhookIssuesLockedPropIssueMergedReactions(GitHubModel):
    """WebhookIssuesLockedPropIssueMergedReactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookIssuesLockedPropIssueMergedUser(GitHubModel):
    """WebhookIssuesLockedPropIssueMergedUser"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesMilestoned(GitHubModel):
    """issues milestoned event"""

    action: Literal["milestoned"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    issue: WebhookIssuesMilestonedPropIssue = Field()
    milestone: WebhookIssuesMilestonedPropMilestone = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookIssuesMilestonedPropIssue(GitHubModel):
    """WebhookIssuesMilestonedPropIssue"""

    active_lock_reason: Union[
        Literal["resolved", "off-topic", "too heated", "spam"], None
    ] = Field()
    assignee: Missing[
        Union[WebhookIssuesMilestonedPropIssueMergedAssignee, None]
    ] = Field(default=UNSET)
    assignees: List[WebhookIssuesMilestonedPropIssueMergedAssignees] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: Union[Union[str, None], None] = Field(description="Contents of the issue")
    closed_at: Union[datetime, None] = Field()
    comments: int = Field()
    comments_url: str = Field()
    created_at: datetime = Field()
    draft: Missing[bool] = Field(default=UNSET)
    events_url: str = Field()
    html_url: str = Field()
    id: int = Field()
    labels: Missing[List[WebhookIssuesMilestonedPropIssueMergedLabels]] = Field(
        default=UNSET
    )
    labels_url: str = Field()
    locked: Missing[bool] = Field(default=UNSET)
    milestone: WebhookIssuesMilestonedPropIssueAllof1PropMilestone = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field()
    performed_via_github_app: Missing[
        Union[WebhookIssuesMilestonedPropIssueMergedPerformedViaGithubApp, None]
    ] = Field(default=UNSET)
    pull_request: Missing[
        WebhookIssuesMilestonedPropIssueAllof0PropPullRequest
    ] = Field(default=UNSET)
    reactions: WebhookIssuesMilestonedPropIssueMergedReactions = Field()
    repository_url: str = Field()
    state: Missing[Literal["open", "closed"]] = Field(
        default=UNSET, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Missing[Union[str, None]] = Field(default=UNSET)
    timeline_url: Missing[str] = Field(default=UNSET)
    title: str = Field(description="Title of the issue")
    updated_at: datetime = Field()
    url: str = Field(description="URL for the issue")
    user: WebhookIssuesMilestonedPropIssueMergedUser = Field()


class WebhookIssuesMilestonedPropIssueAllof0(GitHubModel):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    assignee: Missing[
        Union[WebhookIssuesMilestonedPropIssueAllof0PropAssignee, None]
    ] = Field(default=UNSET, title="User")
    assignees: List[
        Union[WebhookIssuesMilestonedPropIssueAllof0PropAssigneesItems, None]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: Union[str, None] = Field(description="Contents of the issue")
    closed_at: Union[datetime, None] = Field()
    comments: int = Field()
    comments_url: str = Field()
    created_at: datetime = Field()
    draft: Missing[bool] = Field(default=UNSET)
    events_url: str = Field()
    html_url: str = Field()
    id: int = Field()
    labels: Missing[
        List[WebhookIssuesMilestonedPropIssueAllof0PropLabelsItems]
    ] = Field(default=UNSET)
    labels_url: str = Field()
    locked: Missing[bool] = Field(default=UNSET)
    milestone: Union[WebhookIssuesMilestonedPropIssueAllof0PropMilestone, None] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field()
    performed_via_github_app: Missing[
        Union[WebhookIssuesMilestonedPropIssueAllof0PropPerformedViaGithubApp, None]
    ] = Field(
        default=UNSET,
        title="App",
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
    )
    pull_request: Missing[
        WebhookIssuesMilestonedPropIssueAllof0PropPullRequest
    ] = Field(default=UNSET)
    reactions: WebhookIssuesMilestonedPropIssueAllof0PropReactions = Field(
        title="Reactions"
    )
    repository_url: str = Field()
    state: Missing[Literal["open", "closed"]] = Field(
        default=UNSET, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Missing[Union[str, None]] = Field(default=UNSET)
    timeline_url: Missing[str] = Field(default=UNSET)
    title: str = Field(description="Title of the issue")
    updated_at: datetime = Field()
    url: str = Field(description="URL for the issue")
    user: Union[WebhookIssuesMilestonedPropIssueAllof0PropUser, None] = Field(
        title="User"
    )


class WebhookIssuesMilestonedPropIssueAllof0PropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesMilestonedPropIssueAllof0PropAssigneesItems(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesMilestonedPropIssueAllof0PropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookIssuesMilestonedPropIssueAllof0PropMilestonePropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesMilestonedPropIssueAllof0PropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookIssuesMilestonedPropIssueAllof0PropMilestonePropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookIssuesMilestonedPropIssueAllof0PropPerformedViaGithubAppPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesMilestonedPropIssueAllof0PropPerformedViaGithubAppPropPermissions(
    GitHubModel
):
    """WebhookIssuesMilestonedPropIssueAllof0PropPerformedViaGithubAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    administration: Missing[Literal["read", "write"]] = Field(default=UNSET)
    checks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    content_references: Missing[Literal["read", "write"]] = Field(default=UNSET)
    contents: Missing[Literal["read", "write"]] = Field(default=UNSET)
    deployments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    emails: Missing[Literal["read", "write"]] = Field(default=UNSET)
    environments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    issues: Missing[Literal["read", "write"]] = Field(default=UNSET)
    keys: Missing[Literal["read", "write"]] = Field(default=UNSET)
    members: Missing[Literal["read", "write"]] = Field(default=UNSET)
    metadata: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_administration: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_plan: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_projects: Missing[Literal["read", "write", "admin"]] = Field(
        default=UNSET
    )
    organization_secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_self_hosted_runners: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_user_blocking: Missing[Literal["read", "write"]] = Field(default=UNSET)
    packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pull_requests: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_projects: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secret_scanning_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_events: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_scanning_alert: Missing[Literal["read", "write"]] = Field(default=UNSET)
    single_file: Missing[Literal["read", "write"]] = Field(default=UNSET)
    statuses: Missing[Literal["read", "write"]] = Field(default=UNSET)
    team_discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    vulnerability_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    workflows: Missing[Literal["read", "write"]] = Field(default=UNSET)


class WebhookIssuesMilestonedPropIssueAllof0PropPerformedViaGithubApp(GitHubModel):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None] = Field()
    description: Union[str, None] = Field()
    events: Missing[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "reminder",
            ]
        ]
    ] = Field(default=UNSET, description="The list of events for the GitHub app")
    external_url: Union[str, None] = Field()
    html_url: str = Field()
    id: Union[int, None] = Field(description="Unique identifier of the GitHub app")
    name: str = Field(description="The name of the GitHub app")
    node_id: str = Field()
    owner: Union[
        WebhookIssuesMilestonedPropIssueAllof0PropPerformedViaGithubAppPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookIssuesMilestonedPropIssueAllof0PropPerformedViaGithubAppPropPermissions
    ] = Field(default=UNSET, description="The set of permissions for the GitHub app")
    slug: Missing[str] = Field(
        default=UNSET, description="The slug name of the GitHub app"
    )
    updated_at: Union[datetime, None] = Field()


class WebhookIssuesMilestonedPropIssueAllof0PropPullRequest(GitHubModel):
    """WebhookIssuesMilestonedPropIssueAllof0PropPullRequest"""

    diff_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    merged_at: Missing[Union[datetime, None]] = Field(default=UNSET)
    patch_url: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesMilestonedPropIssueAllof0PropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookIssuesMilestonedPropIssueAllof0PropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesMilestonedPropIssueAllof1(GitHubModel):
    """WebhookIssuesMilestonedPropIssueAllof1"""

    active_lock_reason: Missing[Union[str, None]] = Field(default=UNSET)
    assignee: Missing[
        Union[WebhookIssuesMilestonedPropIssueAllof1PropAssignee, None]
    ] = Field(default=UNSET)
    assignees: Missing[
        List[Union[WebhookIssuesMilestonedPropIssueAllof1PropAssigneesItems, None]]
    ] = Field(default=UNSET)
    author_association: Missing[str] = Field(default=UNSET)
    body: Missing[Union[str, None]] = Field(default=UNSET)
    closed_at: Missing[Union[str, None]] = Field(default=UNSET)
    comments: Missing[int] = Field(default=UNSET)
    comments_url: Missing[str] = Field(default=UNSET)
    created_at: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    labels: Missing[
        List[Union[WebhookIssuesMilestonedPropIssueAllof1PropLabelsItems, None]]
    ] = Field(default=UNSET)
    labels_url: Missing[str] = Field(default=UNSET)
    locked: Missing[bool] = Field(default=UNSET)
    milestone: WebhookIssuesMilestonedPropIssueAllof1PropMilestone = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: Missing[str] = Field(default=UNSET)
    number: Missing[int] = Field(default=UNSET)
    performed_via_github_app: Missing[
        Union[WebhookIssuesMilestonedPropIssueAllof1PropPerformedViaGithubApp, None]
    ] = Field(default=UNSET)
    reactions: Missing[WebhookIssuesMilestonedPropIssueAllof1PropReactions] = Field(
        default=UNSET
    )
    repository_url: Missing[str] = Field(default=UNSET)
    state: Missing[str] = Field(default=UNSET)
    timeline_url: Missing[str] = Field(default=UNSET)
    title: Missing[str] = Field(default=UNSET)
    updated_at: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)
    user: Missing[WebhookIssuesMilestonedPropIssueAllof1PropUser] = Field(default=UNSET)


class WebhookIssuesMilestonedPropIssueAllof1PropAssignee(GitHubModel):
    """WebhookIssuesMilestonedPropIssueAllof1PropAssignee"""


class WebhookIssuesMilestonedPropIssueAllof1PropAssigneesItems(GitHubModel):
    """WebhookIssuesMilestonedPropIssueAllof1PropAssigneesItems"""


class WebhookIssuesMilestonedPropIssueAllof1PropLabelsItems(GitHubModel):
    """WebhookIssuesMilestonedPropIssueAllof1PropLabelsItems"""


class WebhookIssuesMilestonedPropIssueAllof1PropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookIssuesMilestonedPropIssueAllof1PropMilestonePropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookIssuesMilestonedPropIssueAllof1PropMilestonePropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesMilestonedPropIssueAllof1PropPerformedViaGithubApp(GitHubModel):
    """WebhookIssuesMilestonedPropIssueAllof1PropPerformedViaGithubApp"""


class WebhookIssuesMilestonedPropIssueAllof1PropReactions(GitHubModel):
    """WebhookIssuesMilestonedPropIssueAllof1PropReactions"""

    plus_one: Missing[int] = Field(default=UNSET, alias="+1")
    minus_one: Missing[int] = Field(default=UNSET, alias="-1")
    confused: Missing[int] = Field(default=UNSET)
    eyes: Missing[int] = Field(default=UNSET)
    heart: Missing[int] = Field(default=UNSET)
    hooray: Missing[int] = Field(default=UNSET)
    laugh: Missing[int] = Field(default=UNSET)
    rocket: Missing[int] = Field(default=UNSET)
    total_count: Missing[int] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesMilestonedPropIssueAllof1PropUser(GitHubModel):
    """WebhookIssuesMilestonedPropIssueAllof1PropUser"""

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesMilestonedPropIssueMergedAssignee(GitHubModel):
    """WebhookIssuesMilestonedPropIssueMergedAssignee"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesMilestonedPropIssueMergedAssignees(GitHubModel):
    """WebhookIssuesMilestonedPropIssueMergedAssignees"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesMilestonedPropIssueMergedLabels(GitHubModel):
    """WebhookIssuesMilestonedPropIssueMergedLabels"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookIssuesMilestonedPropIssueMergedPerformedViaGithubApp(GitHubModel):
    """WebhookIssuesMilestonedPropIssueMergedPerformedViaGithubApp"""

    created_at: Union[datetime, None] = Field()
    description: Union[str, None] = Field()
    events: Missing[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "reminder",
            ]
        ]
    ] = Field(default=UNSET, description="The list of events for the GitHub app")
    external_url: Union[str, None] = Field()
    html_url: str = Field()
    id: Union[int, None] = Field(description="Unique identifier of the GitHub app")
    name: str = Field(description="The name of the GitHub app")
    node_id: str = Field()
    owner: Union[
        WebhookIssuesMilestonedPropIssueAllof0PropPerformedViaGithubAppPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookIssuesMilestonedPropIssueAllof0PropPerformedViaGithubAppPropPermissions
    ] = Field(default=UNSET, description="The set of permissions for the GitHub app")
    slug: Missing[str] = Field(
        default=UNSET, description="The slug name of the GitHub app"
    )
    updated_at: Union[datetime, None] = Field()


class WebhookIssuesMilestonedPropIssueMergedReactions(GitHubModel):
    """WebhookIssuesMilestonedPropIssueMergedReactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookIssuesMilestonedPropIssueMergedUser(GitHubModel):
    """WebhookIssuesMilestonedPropIssueMergedUser"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesMilestonedPropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[WebhookIssuesMilestonedPropMilestonePropCreator, None] = Field(
        title="User"
    )
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookIssuesMilestonedPropMilestonePropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesOpened(GitHubModel):
    """issues opened event"""

    action: Literal["opened"] = Field()
    changes: Missing[WebhookIssuesOpenedPropChanges] = Field(default=UNSET)
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    issue: WebhookIssuesOpenedPropIssue = Field(
        title="Issue",
        description="The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.",
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookIssuesOpenedPropChanges(GitHubModel):
    """WebhookIssuesOpenedPropChanges"""

    old_issue: Union[WebhookIssuesOpenedPropChangesPropOldIssue, None] = Field(
        title="Issue",
        description="The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.",
    )
    old_repository: WebhookIssuesOpenedPropChangesPropOldRepository = Field(
        title="Repository", description="A git repository"
    )


class WebhookIssuesOpenedPropChangesPropOldIssuePropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesOpenedPropChangesPropOldIssuePropAssigneesItems(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesOpenedPropChangesPropOldIssuePropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookIssuesOpenedPropChangesPropOldIssuePropMilestonePropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesOpenedPropChangesPropOldIssuePropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookIssuesOpenedPropChangesPropOldIssuePropMilestonePropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookIssuesOpenedPropChangesPropOldIssuePropPerformedViaGithubAppPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesOpenedPropChangesPropOldIssuePropPerformedViaGithubAppPropPermissions(
    GitHubModel
):
    """WebhookIssuesOpenedPropChangesPropOldIssuePropPerformedViaGithubAppPropPermissio
    ns

    The set of permissions for the GitHub app
    """

    actions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    administration: Missing[Literal["read", "write"]] = Field(default=UNSET)
    checks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    content_references: Missing[Literal["read", "write"]] = Field(default=UNSET)
    contents: Missing[Literal["read", "write"]] = Field(default=UNSET)
    deployments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    emails: Missing[Literal["read", "write"]] = Field(default=UNSET)
    environments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    issues: Missing[Literal["read", "write"]] = Field(default=UNSET)
    keys: Missing[Literal["read", "write"]] = Field(default=UNSET)
    members: Missing[Literal["read", "write"]] = Field(default=UNSET)
    metadata: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_administration: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_plan: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_projects: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_self_hosted_runners: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_user_blocking: Missing[Literal["read", "write"]] = Field(default=UNSET)
    packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pull_requests: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_projects: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secret_scanning_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_events: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_scanning_alert: Missing[Literal["read", "write"]] = Field(default=UNSET)
    single_file: Missing[Literal["read", "write"]] = Field(default=UNSET)
    statuses: Missing[Literal["read", "write"]] = Field(default=UNSET)
    team_discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    vulnerability_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    workflows: Missing[Literal["read", "write"]] = Field(default=UNSET)


class WebhookIssuesOpenedPropChangesPropOldIssuePropPerformedViaGithubApp(GitHubModel):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None] = Field()
    description: Union[str, None] = Field()
    events: Missing[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
            ]
        ]
    ] = Field(default=UNSET, description="The list of events for the GitHub app")
    external_url: Union[str, None] = Field()
    html_url: str = Field()
    id: Union[int, None] = Field(description="Unique identifier of the GitHub app")
    name: str = Field(description="The name of the GitHub app")
    node_id: str = Field()
    owner: Union[
        WebhookIssuesOpenedPropChangesPropOldIssuePropPerformedViaGithubAppPropOwner,
        None,
    ] = Field(title="User")
    permissions: Missing[
        WebhookIssuesOpenedPropChangesPropOldIssuePropPerformedViaGithubAppPropPermissions
    ] = Field(default=UNSET, description="The set of permissions for the GitHub app")
    slug: Missing[str] = Field(
        default=UNSET, description="The slug name of the GitHub app"
    )
    updated_at: Union[datetime, None] = Field()


class WebhookIssuesOpenedPropChangesPropOldIssuePropPullRequest(GitHubModel):
    """WebhookIssuesOpenedPropChangesPropOldIssuePropPullRequest"""

    diff_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    merged_at: Missing[Union[datetime, None]] = Field(default=UNSET)
    patch_url: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesOpenedPropChangesPropOldIssuePropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookIssuesOpenedPropChangesPropOldIssuePropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesOpenedPropChangesPropOldIssue(GitHubModel):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    assignee: Missing[
        Union[WebhookIssuesOpenedPropChangesPropOldIssuePropAssignee, None]
    ] = Field(default=UNSET, title="User")
    assignees: List[
        Union[WebhookIssuesOpenedPropChangesPropOldIssuePropAssigneesItems, None]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: Union[str, None] = Field(description="Contents of the issue")
    closed_at: Union[datetime, None] = Field()
    comments: int = Field()
    comments_url: str = Field()
    created_at: datetime = Field()
    draft: Missing[bool] = Field(default=UNSET)
    events_url: str = Field()
    html_url: str = Field()
    id: int = Field()
    labels: Missing[
        List[WebhookIssuesOpenedPropChangesPropOldIssuePropLabelsItems]
    ] = Field(default=UNSET)
    labels_url: str = Field()
    locked: Missing[bool] = Field(default=UNSET)
    milestone: Union[
        WebhookIssuesOpenedPropChangesPropOldIssuePropMilestone, None
    ] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field()
    performed_via_github_app: Missing[
        Union[WebhookIssuesOpenedPropChangesPropOldIssuePropPerformedViaGithubApp, None]
    ] = Field(
        default=UNSET,
        title="App",
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
    )
    pull_request: Missing[
        WebhookIssuesOpenedPropChangesPropOldIssuePropPullRequest
    ] = Field(default=UNSET)
    reactions: WebhookIssuesOpenedPropChangesPropOldIssuePropReactions = Field(
        title="Reactions"
    )
    repository_url: str = Field()
    state: Missing[Literal["open", "closed"]] = Field(
        default=UNSET, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Missing[Union[str, None]] = Field(default=UNSET)
    timeline_url: Missing[str] = Field(default=UNSET)
    title: str = Field(description="Title of the issue")
    updated_at: datetime = Field()
    url: str = Field(description="URL for the issue")
    user: Union[WebhookIssuesOpenedPropChangesPropOldIssuePropUser, None] = Field(
        title="User"
    )


class WebhookIssuesOpenedPropChangesPropOldRepository(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    custom_properties: Missing[
        WebhookIssuesOpenedPropChangesPropOldRepositoryPropCustomProperties
    ] = Field(
        default=UNSET,
        description="The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.",
    )
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_discussions: Missing[bool] = Field(
        default=UNSET, description="Whether the repository has discussions enabled."
    )
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookIssuesOpenedPropChangesPropOldRepositoryPropLicense, None
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookIssuesOpenedPropChangesPropOldRepositoryPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookIssuesOpenedPropChangesPropOldRepositoryPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET, description="Whether to require commit signoff."
    )


class WebhookIssuesOpenedPropChangesPropOldRepositoryPropCustomProperties(
    ExtraGitHubModel
):
    """WebhookIssuesOpenedPropChangesPropOldRepositoryPropCustomProperties

    The custom properties that were defined for the repository. The keys are the
    custom property names, and the values are the corresponding custom property
    values.
    """


class WebhookIssuesOpenedPropChangesPropOldRepositoryPropLicense(GitHubModel):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookIssuesOpenedPropChangesPropOldRepositoryPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesOpenedPropChangesPropOldRepositoryPropPermissions(GitHubModel):
    """WebhookIssuesOpenedPropChangesPropOldRepositoryPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookIssuesOpenedPropIssue(GitHubModel):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    assignee: Missing[Union[WebhookIssuesOpenedPropIssuePropAssignee, None]] = Field(
        default=UNSET, title="User"
    )
    assignees: List[
        Union[WebhookIssuesOpenedPropIssuePropAssigneesItems, None]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: Union[str, None] = Field(description="Contents of the issue")
    closed_at: Union[datetime, None] = Field()
    comments: int = Field()
    comments_url: str = Field()
    created_at: datetime = Field()
    draft: Missing[bool] = Field(default=UNSET)
    events_url: str = Field()
    html_url: str = Field()
    id: int = Field()
    labels: Missing[List[WebhookIssuesOpenedPropIssuePropLabelsItems]] = Field(
        default=UNSET
    )
    labels_url: str = Field()
    locked: Missing[bool] = Field(default=UNSET)
    milestone: Union[WebhookIssuesOpenedPropIssuePropMilestone, None] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field()
    performed_via_github_app: Missing[
        Union[WebhookIssuesOpenedPropIssuePropPerformedViaGithubApp, None]
    ] = Field(
        default=UNSET,
        title="App",
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
    )
    pull_request: Missing[WebhookIssuesOpenedPropIssuePropPullRequest] = Field(
        default=UNSET
    )
    reactions: WebhookIssuesOpenedPropIssuePropReactions = Field(title="Reactions")
    repository_url: str = Field()
    state: Missing[Literal["open", "closed"]] = Field(
        default=UNSET, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Missing[Union[str, None]] = Field(default=UNSET)
    timeline_url: Missing[str] = Field(default=UNSET)
    title: str = Field(description="Title of the issue")
    updated_at: datetime = Field()
    url: str = Field(description="URL for the issue")
    user: Union[WebhookIssuesOpenedPropIssuePropUser, None] = Field(title="User")


class WebhookIssuesOpenedPropIssuePropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesOpenedPropIssuePropAssigneesItems(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesOpenedPropIssuePropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookIssuesOpenedPropIssuePropMilestonePropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesOpenedPropIssuePropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[WebhookIssuesOpenedPropIssuePropMilestonePropCreator, None] = Field(
        title="User"
    )
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookIssuesOpenedPropIssuePropPerformedViaGithubAppPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesOpenedPropIssuePropPerformedViaGithubAppPropPermissions(GitHubModel):
    """WebhookIssuesOpenedPropIssuePropPerformedViaGithubAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    administration: Missing[Literal["read", "write"]] = Field(default=UNSET)
    checks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    content_references: Missing[Literal["read", "write"]] = Field(default=UNSET)
    contents: Missing[Literal["read", "write"]] = Field(default=UNSET)
    deployments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    emails: Missing[Literal["read", "write"]] = Field(default=UNSET)
    environments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    issues: Missing[Literal["read", "write"]] = Field(default=UNSET)
    keys: Missing[Literal["read", "write"]] = Field(default=UNSET)
    members: Missing[Literal["read", "write"]] = Field(default=UNSET)
    metadata: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_administration: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_plan: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_projects: Missing[Literal["read", "write", "admin"]] = Field(
        default=UNSET
    )
    organization_secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_self_hosted_runners: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_user_blocking: Missing[Literal["read", "write"]] = Field(default=UNSET)
    packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pull_requests: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_projects: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secret_scanning_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_events: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_scanning_alert: Missing[Literal["read", "write"]] = Field(default=UNSET)
    single_file: Missing[Literal["read", "write"]] = Field(default=UNSET)
    statuses: Missing[Literal["read", "write"]] = Field(default=UNSET)
    team_discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    vulnerability_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    workflows: Missing[Literal["read", "write"]] = Field(default=UNSET)


class WebhookIssuesOpenedPropIssuePropPerformedViaGithubApp(GitHubModel):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None] = Field()
    description: Union[str, None] = Field()
    events: Missing[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "security_and_analysis",
                "pull_request_review_thread",
                "reminder",
            ]
        ]
    ] = Field(default=UNSET, description="The list of events for the GitHub app")
    external_url: Union[str, None] = Field()
    html_url: str = Field()
    id: Union[int, None] = Field(description="Unique identifier of the GitHub app")
    name: str = Field(description="The name of the GitHub app")
    node_id: str = Field()
    owner: Union[
        WebhookIssuesOpenedPropIssuePropPerformedViaGithubAppPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookIssuesOpenedPropIssuePropPerformedViaGithubAppPropPermissions
    ] = Field(default=UNSET, description="The set of permissions for the GitHub app")
    slug: Missing[str] = Field(
        default=UNSET, description="The slug name of the GitHub app"
    )
    updated_at: Union[datetime, None] = Field()


class WebhookIssuesOpenedPropIssuePropPullRequest(GitHubModel):
    """WebhookIssuesOpenedPropIssuePropPullRequest"""

    diff_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    merged_at: Missing[Union[datetime, None]] = Field(default=UNSET)
    patch_url: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesOpenedPropIssuePropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookIssuesOpenedPropIssuePropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesPinned(GitHubModel):
    """issues pinned event"""

    action: Literal["pinned"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    issue: WebhookIssuesPinnedPropIssue = Field(
        title="Issue",
        description="The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.",
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookIssuesPinnedPropIssue(GitHubModel):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    assignee: Missing[Union[WebhookIssuesPinnedPropIssuePropAssignee, None]] = Field(
        default=UNSET, title="User"
    )
    assignees: List[
        Union[WebhookIssuesPinnedPropIssuePropAssigneesItems, None]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: Union[str, None] = Field(description="Contents of the issue")
    closed_at: Union[datetime, None] = Field()
    comments: int = Field()
    comments_url: str = Field()
    created_at: datetime = Field()
    draft: Missing[bool] = Field(default=UNSET)
    events_url: str = Field()
    html_url: str = Field()
    id: int = Field()
    labels: Missing[List[WebhookIssuesPinnedPropIssuePropLabelsItems]] = Field(
        default=UNSET
    )
    labels_url: str = Field()
    locked: Missing[bool] = Field(default=UNSET)
    milestone: Union[WebhookIssuesPinnedPropIssuePropMilestone, None] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field()
    performed_via_github_app: Missing[
        Union[WebhookIssuesPinnedPropIssuePropPerformedViaGithubApp, None]
    ] = Field(
        default=UNSET,
        title="App",
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
    )
    pull_request: Missing[WebhookIssuesPinnedPropIssuePropPullRequest] = Field(
        default=UNSET
    )
    reactions: WebhookIssuesPinnedPropIssuePropReactions = Field(title="Reactions")
    repository_url: str = Field()
    state: Missing[Literal["open", "closed"]] = Field(
        default=UNSET, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Missing[Union[str, None]] = Field(default=UNSET)
    timeline_url: Missing[str] = Field(default=UNSET)
    title: str = Field(description="Title of the issue")
    updated_at: datetime = Field()
    url: str = Field(description="URL for the issue")
    user: Union[WebhookIssuesPinnedPropIssuePropUser, None] = Field(title="User")


class WebhookIssuesPinnedPropIssuePropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesPinnedPropIssuePropAssigneesItems(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesPinnedPropIssuePropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookIssuesPinnedPropIssuePropMilestonePropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesPinnedPropIssuePropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[WebhookIssuesPinnedPropIssuePropMilestonePropCreator, None] = Field(
        title="User"
    )
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookIssuesPinnedPropIssuePropPerformedViaGithubAppPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesPinnedPropIssuePropPerformedViaGithubAppPropPermissions(GitHubModel):
    """WebhookIssuesPinnedPropIssuePropPerformedViaGithubAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    administration: Missing[Literal["read", "write"]] = Field(default=UNSET)
    checks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    content_references: Missing[Literal["read", "write"]] = Field(default=UNSET)
    contents: Missing[Literal["read", "write"]] = Field(default=UNSET)
    deployments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    emails: Missing[Literal["read", "write"]] = Field(default=UNSET)
    environments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    issues: Missing[Literal["read", "write"]] = Field(default=UNSET)
    keys: Missing[Literal["read", "write"]] = Field(default=UNSET)
    members: Missing[Literal["read", "write"]] = Field(default=UNSET)
    metadata: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_administration: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_plan: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_projects: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_self_hosted_runners: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_user_blocking: Missing[Literal["read", "write"]] = Field(default=UNSET)
    packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pull_requests: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_projects: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secret_scanning_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_events: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_scanning_alert: Missing[Literal["read", "write"]] = Field(default=UNSET)
    single_file: Missing[Literal["read", "write"]] = Field(default=UNSET)
    statuses: Missing[Literal["read", "write"]] = Field(default=UNSET)
    team_discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    vulnerability_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    workflows: Missing[Literal["read", "write"]] = Field(default=UNSET)


class WebhookIssuesPinnedPropIssuePropPerformedViaGithubApp(GitHubModel):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None] = Field()
    description: Union[str, None] = Field()
    events: Missing[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
            ]
        ]
    ] = Field(default=UNSET, description="The list of events for the GitHub app")
    external_url: Union[str, None] = Field()
    html_url: str = Field()
    id: Union[int, None] = Field(description="Unique identifier of the GitHub app")
    name: str = Field(description="The name of the GitHub app")
    node_id: str = Field()
    owner: Union[
        WebhookIssuesPinnedPropIssuePropPerformedViaGithubAppPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookIssuesPinnedPropIssuePropPerformedViaGithubAppPropPermissions
    ] = Field(default=UNSET, description="The set of permissions for the GitHub app")
    slug: Missing[str] = Field(
        default=UNSET, description="The slug name of the GitHub app"
    )
    updated_at: Union[datetime, None] = Field()


class WebhookIssuesPinnedPropIssuePropPullRequest(GitHubModel):
    """WebhookIssuesPinnedPropIssuePropPullRequest"""

    diff_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    merged_at: Missing[Union[datetime, None]] = Field(default=UNSET)
    patch_url: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesPinnedPropIssuePropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookIssuesPinnedPropIssuePropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesReopened(GitHubModel):
    """issues reopened event"""

    action: Literal["reopened"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    issue: WebhookIssuesReopenedPropIssue = Field()
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookIssuesReopenedPropIssue(GitHubModel):
    """WebhookIssuesReopenedPropIssue"""

    active_lock_reason: Union[
        Literal["resolved", "off-topic", "too heated", "spam"], None
    ] = Field()
    assignee: Missing[
        Union[WebhookIssuesReopenedPropIssueMergedAssignee, None]
    ] = Field(default=UNSET)
    assignees: List[WebhookIssuesReopenedPropIssueMergedAssignees] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: Union[Union[str, None], None] = Field(description="Contents of the issue")
    closed_at: Union[datetime, None] = Field()
    comments: int = Field()
    comments_url: str = Field()
    created_at: datetime = Field()
    draft: Missing[bool] = Field(default=UNSET)
    events_url: str = Field()
    html_url: str = Field()
    id: int = Field()
    labels: Missing[List[WebhookIssuesReopenedPropIssueMergedLabels]] = Field(
        default=UNSET
    )
    labels_url: str = Field()
    locked: Missing[bool] = Field(default=UNSET)
    milestone: Union[WebhookIssuesReopenedPropIssueMergedMilestone, None] = Field()
    node_id: str = Field()
    number: int = Field()
    performed_via_github_app: Missing[
        Union[WebhookIssuesReopenedPropIssueMergedPerformedViaGithubApp, None]
    ] = Field(default=UNSET)
    pull_request: Missing[WebhookIssuesReopenedPropIssueAllof0PropPullRequest] = Field(
        default=UNSET
    )
    reactions: WebhookIssuesReopenedPropIssueMergedReactions = Field()
    repository_url: str = Field()
    state: Literal["open", "closed"] = Field(
        description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Missing[Union[str, None]] = Field(default=UNSET)
    timeline_url: Missing[str] = Field(default=UNSET)
    title: str = Field(description="Title of the issue")
    updated_at: datetime = Field()
    url: str = Field(description="URL for the issue")
    user: WebhookIssuesReopenedPropIssueMergedUser = Field()


class WebhookIssuesReopenedPropIssueAllof0(GitHubModel):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    assignee: Missing[
        Union[WebhookIssuesReopenedPropIssueAllof0PropAssignee, None]
    ] = Field(default=UNSET, title="User")
    assignees: List[
        Union[WebhookIssuesReopenedPropIssueAllof0PropAssigneesItems, None]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: Union[str, None] = Field(description="Contents of the issue")
    closed_at: Union[datetime, None] = Field()
    comments: int = Field()
    comments_url: str = Field()
    created_at: datetime = Field()
    draft: Missing[bool] = Field(default=UNSET)
    events_url: str = Field()
    html_url: str = Field()
    id: int = Field()
    labels: Missing[List[WebhookIssuesReopenedPropIssueAllof0PropLabelsItems]] = Field(
        default=UNSET
    )
    labels_url: str = Field()
    locked: Missing[bool] = Field(default=UNSET)
    milestone: Union[WebhookIssuesReopenedPropIssueAllof0PropMilestone, None] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field()
    performed_via_github_app: Missing[
        Union[WebhookIssuesReopenedPropIssueAllof0PropPerformedViaGithubApp, None]
    ] = Field(
        default=UNSET,
        title="App",
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
    )
    pull_request: Missing[WebhookIssuesReopenedPropIssueAllof0PropPullRequest] = Field(
        default=UNSET
    )
    reactions: WebhookIssuesReopenedPropIssueAllof0PropReactions = Field(
        title="Reactions"
    )
    repository_url: str = Field()
    state: Missing[Literal["open", "closed"]] = Field(
        default=UNSET, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Missing[Union[str, None]] = Field(default=UNSET)
    timeline_url: Missing[str] = Field(default=UNSET)
    title: str = Field(description="Title of the issue")
    updated_at: datetime = Field()
    url: str = Field(description="URL for the issue")
    user: Union[WebhookIssuesReopenedPropIssueAllof0PropUser, None] = Field(
        title="User"
    )


class WebhookIssuesReopenedPropIssueAllof0PropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesReopenedPropIssueAllof0PropAssigneesItems(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesReopenedPropIssueAllof0PropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookIssuesReopenedPropIssueAllof0PropMilestonePropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesReopenedPropIssueAllof0PropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookIssuesReopenedPropIssueAllof0PropMilestonePropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookIssuesReopenedPropIssueAllof0PropPerformedViaGithubAppPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesReopenedPropIssueAllof0PropPerformedViaGithubAppPropPermissions(
    GitHubModel
):
    """WebhookIssuesReopenedPropIssueAllof0PropPerformedViaGithubAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    administration: Missing[Literal["read", "write"]] = Field(default=UNSET)
    checks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    content_references: Missing[Literal["read", "write"]] = Field(default=UNSET)
    contents: Missing[Literal["read", "write"]] = Field(default=UNSET)
    deployments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    emails: Missing[Literal["read", "write"]] = Field(default=UNSET)
    environments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    issues: Missing[Literal["read", "write"]] = Field(default=UNSET)
    keys: Missing[Literal["read", "write"]] = Field(default=UNSET)
    members: Missing[Literal["read", "write"]] = Field(default=UNSET)
    metadata: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_administration: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_plan: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_projects: Missing[Literal["read", "write", "admin"]] = Field(
        default=UNSET
    )
    organization_secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_self_hosted_runners: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_user_blocking: Missing[Literal["read", "write"]] = Field(default=UNSET)
    packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pull_requests: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_projects: Missing[Literal["read", "write", "admin"]] = Field(
        default=UNSET
    )
    secret_scanning_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_events: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_scanning_alert: Missing[Literal["read", "write"]] = Field(default=UNSET)
    single_file: Missing[Literal["read", "write"]] = Field(default=UNSET)
    statuses: Missing[Literal["read", "write"]] = Field(default=UNSET)
    team_discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    vulnerability_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    workflows: Missing[Literal["read", "write"]] = Field(default=UNSET)


class WebhookIssuesReopenedPropIssueAllof0PropPerformedViaGithubApp(GitHubModel):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None] = Field()
    description: Union[str, None] = Field()
    events: Missing[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "pull_request_review_thread",
                "reminder",
            ]
        ]
    ] = Field(default=UNSET, description="The list of events for the GitHub app")
    external_url: Union[str, None] = Field()
    html_url: str = Field()
    id: Union[int, None] = Field(description="Unique identifier of the GitHub app")
    name: str = Field(description="The name of the GitHub app")
    node_id: str = Field()
    owner: Union[
        WebhookIssuesReopenedPropIssueAllof0PropPerformedViaGithubAppPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookIssuesReopenedPropIssueAllof0PropPerformedViaGithubAppPropPermissions
    ] = Field(default=UNSET, description="The set of permissions for the GitHub app")
    slug: Missing[str] = Field(
        default=UNSET, description="The slug name of the GitHub app"
    )
    updated_at: Union[datetime, None] = Field()


class WebhookIssuesReopenedPropIssueAllof0PropPullRequest(GitHubModel):
    """WebhookIssuesReopenedPropIssueAllof0PropPullRequest"""

    diff_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    merged_at: Missing[Union[datetime, None]] = Field(default=UNSET)
    patch_url: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesReopenedPropIssueAllof0PropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookIssuesReopenedPropIssueAllof0PropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesReopenedPropIssueAllof1(GitHubModel):
    """WebhookIssuesReopenedPropIssueAllof1"""

    active_lock_reason: Missing[Union[str, None]] = Field(default=UNSET)
    assignee: Missing[
        Union[WebhookIssuesReopenedPropIssueAllof1PropAssignee, None]
    ] = Field(default=UNSET)
    assignees: Missing[
        List[Union[WebhookIssuesReopenedPropIssueAllof1PropAssigneesItems, None]]
    ] = Field(default=UNSET)
    author_association: Missing[str] = Field(default=UNSET)
    body: Missing[Union[str, None]] = Field(default=UNSET)
    closed_at: Missing[Union[str, None]] = Field(default=UNSET)
    comments: Missing[int] = Field(default=UNSET)
    comments_url: Missing[str] = Field(default=UNSET)
    created_at: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    labels: Missing[
        List[Union[WebhookIssuesReopenedPropIssueAllof1PropLabelsItems, None]]
    ] = Field(default=UNSET)
    labels_url: Missing[str] = Field(default=UNSET)
    locked: Missing[bool] = Field(default=UNSET)
    milestone: Missing[
        Union[WebhookIssuesReopenedPropIssueAllof1PropMilestone, None]
    ] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    number: Missing[int] = Field(default=UNSET)
    performed_via_github_app: Missing[
        Union[WebhookIssuesReopenedPropIssueAllof1PropPerformedViaGithubApp, None]
    ] = Field(default=UNSET)
    reactions: Missing[WebhookIssuesReopenedPropIssueAllof1PropReactions] = Field(
        default=UNSET
    )
    repository_url: Missing[str] = Field(default=UNSET)
    state: Literal["open", "closed"] = Field()
    timeline_url: Missing[str] = Field(default=UNSET)
    title: Missing[str] = Field(default=UNSET)
    updated_at: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)
    user: Missing[WebhookIssuesReopenedPropIssueAllof1PropUser] = Field(default=UNSET)


class WebhookIssuesReopenedPropIssueAllof1PropAssignee(GitHubModel):
    """WebhookIssuesReopenedPropIssueAllof1PropAssignee"""


class WebhookIssuesReopenedPropIssueAllof1PropAssigneesItems(GitHubModel):
    """WebhookIssuesReopenedPropIssueAllof1PropAssigneesItems"""


class WebhookIssuesReopenedPropIssueAllof1PropLabelsItems(GitHubModel):
    """WebhookIssuesReopenedPropIssueAllof1PropLabelsItems"""


class WebhookIssuesReopenedPropIssueAllof1PropMilestone(GitHubModel):
    """WebhookIssuesReopenedPropIssueAllof1PropMilestone"""


class WebhookIssuesReopenedPropIssueAllof1PropPerformedViaGithubApp(GitHubModel):
    """WebhookIssuesReopenedPropIssueAllof1PropPerformedViaGithubApp"""


class WebhookIssuesReopenedPropIssueAllof1PropReactions(GitHubModel):
    """WebhookIssuesReopenedPropIssueAllof1PropReactions"""

    plus_one: Missing[int] = Field(default=UNSET, alias="+1")
    minus_one: Missing[int] = Field(default=UNSET, alias="-1")
    confused: Missing[int] = Field(default=UNSET)
    eyes: Missing[int] = Field(default=UNSET)
    heart: Missing[int] = Field(default=UNSET)
    hooray: Missing[int] = Field(default=UNSET)
    laugh: Missing[int] = Field(default=UNSET)
    rocket: Missing[int] = Field(default=UNSET)
    total_count: Missing[int] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesReopenedPropIssueAllof1PropUser(GitHubModel):
    """WebhookIssuesReopenedPropIssueAllof1PropUser"""

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesReopenedPropIssueMergedAssignee(GitHubModel):
    """WebhookIssuesReopenedPropIssueMergedAssignee"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesReopenedPropIssueMergedAssignees(GitHubModel):
    """WebhookIssuesReopenedPropIssueMergedAssignees"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesReopenedPropIssueMergedLabels(GitHubModel):
    """WebhookIssuesReopenedPropIssueMergedLabels"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookIssuesReopenedPropIssueMergedMilestone(GitHubModel):
    """WebhookIssuesReopenedPropIssueMergedMilestone"""

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookIssuesReopenedPropIssueAllof0PropMilestonePropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookIssuesReopenedPropIssueMergedPerformedViaGithubApp(GitHubModel):
    """WebhookIssuesReopenedPropIssueMergedPerformedViaGithubApp"""

    created_at: Union[datetime, None] = Field()
    description: Union[str, None] = Field()
    events: Missing[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "pull_request_review_thread",
                "reminder",
            ]
        ]
    ] = Field(default=UNSET, description="The list of events for the GitHub app")
    external_url: Union[str, None] = Field()
    html_url: str = Field()
    id: Union[int, None] = Field(description="Unique identifier of the GitHub app")
    name: str = Field(description="The name of the GitHub app")
    node_id: str = Field()
    owner: Union[
        WebhookIssuesReopenedPropIssueAllof0PropPerformedViaGithubAppPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookIssuesReopenedPropIssueAllof0PropPerformedViaGithubAppPropPermissions
    ] = Field(default=UNSET, description="The set of permissions for the GitHub app")
    slug: Missing[str] = Field(
        default=UNSET, description="The slug name of the GitHub app"
    )
    updated_at: Union[datetime, None] = Field()


class WebhookIssuesReopenedPropIssueMergedReactions(GitHubModel):
    """WebhookIssuesReopenedPropIssueMergedReactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookIssuesReopenedPropIssueMergedUser(GitHubModel):
    """WebhookIssuesReopenedPropIssueMergedUser"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesTransferred(GitHubModel):
    """issues transferred event"""

    action: Literal["transferred"] = Field()
    changes: WebhookIssuesTransferredPropChanges = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    issue: WebhookIssuesTransferredPropIssue = Field(
        title="Issue",
        description="The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.",
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookIssuesTransferredPropChanges(GitHubModel):
    """WebhookIssuesTransferredPropChanges"""

    new_issue: WebhookIssuesTransferredPropChangesPropNewIssue = Field(
        title="Issue",
        description="The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.",
    )
    new_repository: WebhookIssuesTransferredPropChangesPropNewRepository = Field(
        title="Repository", description="A git repository"
    )


class WebhookIssuesTransferredPropChangesPropNewIssue(GitHubModel):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    assignee: Missing[
        Union[WebhookIssuesTransferredPropChangesPropNewIssuePropAssignee, None]
    ] = Field(default=UNSET, title="User")
    assignees: List[
        Union[WebhookIssuesTransferredPropChangesPropNewIssuePropAssigneesItems, None]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: Union[str, None] = Field(description="Contents of the issue")
    closed_at: Union[datetime, None] = Field()
    comments: int = Field()
    comments_url: str = Field()
    created_at: datetime = Field()
    draft: Missing[bool] = Field(default=UNSET)
    events_url: str = Field()
    html_url: str = Field()
    id: int = Field()
    labels: Missing[
        List[WebhookIssuesTransferredPropChangesPropNewIssuePropLabelsItems]
    ] = Field(default=UNSET)
    labels_url: str = Field()
    locked: Missing[bool] = Field(default=UNSET)
    milestone: Union[
        WebhookIssuesTransferredPropChangesPropNewIssuePropMilestone, None
    ] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field()
    performed_via_github_app: Missing[
        Union[
            WebhookIssuesTransferredPropChangesPropNewIssuePropPerformedViaGithubApp,
            None,
        ]
    ] = Field(
        default=UNSET,
        title="App",
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
    )
    pull_request: Missing[
        WebhookIssuesTransferredPropChangesPropNewIssuePropPullRequest
    ] = Field(default=UNSET)
    reactions: WebhookIssuesTransferredPropChangesPropNewIssuePropReactions = Field(
        title="Reactions"
    )
    repository_url: str = Field()
    state: Missing[Literal["open", "closed"]] = Field(
        default=UNSET, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Missing[Union[str, None]] = Field(default=UNSET)
    timeline_url: Missing[str] = Field(default=UNSET)
    title: str = Field(description="Title of the issue")
    updated_at: datetime = Field()
    url: str = Field(description="URL for the issue")
    user: Union[WebhookIssuesTransferredPropChangesPropNewIssuePropUser, None] = Field(
        title="User"
    )


class WebhookIssuesTransferredPropChangesPropNewIssuePropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesTransferredPropChangesPropNewIssuePropAssigneesItems(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesTransferredPropChangesPropNewIssuePropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookIssuesTransferredPropChangesPropNewIssuePropMilestonePropCreator(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesTransferredPropChangesPropNewIssuePropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookIssuesTransferredPropChangesPropNewIssuePropMilestonePropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookIssuesTransferredPropChangesPropNewIssuePropPerformedViaGithubAppPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesTransferredPropChangesPropNewIssuePropPerformedViaGithubAppPropPermissions(
    GitHubModel
):
    """WebhookIssuesTransferredPropChangesPropNewIssuePropPerformedViaGithubAppPropPerm
    issions

    The set of permissions for the GitHub app
    """

    actions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    administration: Missing[Literal["read", "write"]] = Field(default=UNSET)
    checks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    content_references: Missing[Literal["read", "write"]] = Field(default=UNSET)
    contents: Missing[Literal["read", "write"]] = Field(default=UNSET)
    deployments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    emails: Missing[Literal["read", "write"]] = Field(default=UNSET)
    environments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    issues: Missing[Literal["read", "write"]] = Field(default=UNSET)
    keys: Missing[Literal["read", "write"]] = Field(default=UNSET)
    members: Missing[Literal["read", "write"]] = Field(default=UNSET)
    metadata: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_administration: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_plan: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_projects: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_self_hosted_runners: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_user_blocking: Missing[Literal["read", "write"]] = Field(default=UNSET)
    packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pull_requests: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_projects: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secret_scanning_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_events: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_scanning_alert: Missing[Literal["read", "write"]] = Field(default=UNSET)
    single_file: Missing[Literal["read", "write"]] = Field(default=UNSET)
    statuses: Missing[Literal["read", "write"]] = Field(default=UNSET)
    team_discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    vulnerability_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    workflows: Missing[Literal["read", "write"]] = Field(default=UNSET)


class WebhookIssuesTransferredPropChangesPropNewIssuePropPerformedViaGithubApp(
    GitHubModel
):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None] = Field()
    description: Union[str, None] = Field()
    events: Missing[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
            ]
        ]
    ] = Field(default=UNSET, description="The list of events for the GitHub app")
    external_url: Union[str, None] = Field()
    html_url: str = Field()
    id: Union[int, None] = Field(description="Unique identifier of the GitHub app")
    name: str = Field(description="The name of the GitHub app")
    node_id: str = Field()
    owner: Union[
        WebhookIssuesTransferredPropChangesPropNewIssuePropPerformedViaGithubAppPropOwner,
        None,
    ] = Field(title="User")
    permissions: Missing[
        WebhookIssuesTransferredPropChangesPropNewIssuePropPerformedViaGithubAppPropPermissions
    ] = Field(default=UNSET, description="The set of permissions for the GitHub app")
    slug: Missing[str] = Field(
        default=UNSET, description="The slug name of the GitHub app"
    )
    updated_at: Union[datetime, None] = Field()


class WebhookIssuesTransferredPropChangesPropNewIssuePropPullRequest(GitHubModel):
    """WebhookIssuesTransferredPropChangesPropNewIssuePropPullRequest"""

    diff_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    merged_at: Missing[Union[datetime, None]] = Field(default=UNSET)
    patch_url: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesTransferredPropChangesPropNewIssuePropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookIssuesTransferredPropChangesPropNewIssuePropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesTransferredPropChangesPropNewRepository(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    custom_properties: Missing[
        WebhookIssuesTransferredPropChangesPropNewRepositoryPropCustomProperties
    ] = Field(
        default=UNSET,
        description="The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.",
    )
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookIssuesTransferredPropChangesPropNewRepositoryPropLicense, None
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookIssuesTransferredPropChangesPropNewRepositoryPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookIssuesTransferredPropChangesPropNewRepositoryPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookIssuesTransferredPropChangesPropNewRepositoryPropCustomProperties(
    ExtraGitHubModel
):
    """WebhookIssuesTransferredPropChangesPropNewRepositoryPropCustomProperties

    The custom properties that were defined for the repository. The keys are the
    custom property names, and the values are the corresponding custom property
    values.
    """


class WebhookIssuesTransferredPropChangesPropNewRepositoryPropLicense(GitHubModel):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookIssuesTransferredPropChangesPropNewRepositoryPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesTransferredPropChangesPropNewRepositoryPropPermissions(GitHubModel):
    """WebhookIssuesTransferredPropChangesPropNewRepositoryPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookIssuesTransferredPropIssue(GitHubModel):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    assignee: Missing[
        Union[WebhookIssuesTransferredPropIssuePropAssignee, None]
    ] = Field(default=UNSET, title="User")
    assignees: List[
        Union[WebhookIssuesTransferredPropIssuePropAssigneesItems, None]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: Union[str, None] = Field(description="Contents of the issue")
    closed_at: Union[datetime, None] = Field()
    comments: int = Field()
    comments_url: str = Field()
    created_at: datetime = Field()
    draft: Missing[bool] = Field(default=UNSET)
    events_url: str = Field()
    html_url: str = Field()
    id: int = Field()
    labels: Missing[List[WebhookIssuesTransferredPropIssuePropLabelsItems]] = Field(
        default=UNSET
    )
    labels_url: str = Field()
    locked: Missing[bool] = Field(default=UNSET)
    milestone: Union[WebhookIssuesTransferredPropIssuePropMilestone, None] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field()
    performed_via_github_app: Missing[
        Union[WebhookIssuesTransferredPropIssuePropPerformedViaGithubApp, None]
    ] = Field(
        default=UNSET,
        title="App",
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
    )
    pull_request: Missing[WebhookIssuesTransferredPropIssuePropPullRequest] = Field(
        default=UNSET
    )
    reactions: WebhookIssuesTransferredPropIssuePropReactions = Field(title="Reactions")
    repository_url: str = Field()
    state: Missing[Literal["open", "closed"]] = Field(
        default=UNSET, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Missing[Union[str, None]] = Field(default=UNSET)
    timeline_url: Missing[str] = Field(default=UNSET)
    title: str = Field(description="Title of the issue")
    updated_at: datetime = Field()
    url: str = Field(description="URL for the issue")
    user: Union[WebhookIssuesTransferredPropIssuePropUser, None] = Field(title="User")


class WebhookIssuesTransferredPropIssuePropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesTransferredPropIssuePropAssigneesItems(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesTransferredPropIssuePropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookIssuesTransferredPropIssuePropMilestonePropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesTransferredPropIssuePropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookIssuesTransferredPropIssuePropMilestonePropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookIssuesTransferredPropIssuePropPerformedViaGithubAppPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesTransferredPropIssuePropPerformedViaGithubAppPropPermissions(
    GitHubModel
):
    """WebhookIssuesTransferredPropIssuePropPerformedViaGithubAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    administration: Missing[Literal["read", "write"]] = Field(default=UNSET)
    checks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    content_references: Missing[Literal["read", "write"]] = Field(default=UNSET)
    contents: Missing[Literal["read", "write"]] = Field(default=UNSET)
    deployments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    emails: Missing[Literal["read", "write"]] = Field(default=UNSET)
    environments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    issues: Missing[Literal["read", "write"]] = Field(default=UNSET)
    keys: Missing[Literal["read", "write"]] = Field(default=UNSET)
    members: Missing[Literal["read", "write"]] = Field(default=UNSET)
    metadata: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_administration: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_plan: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_projects: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_self_hosted_runners: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_user_blocking: Missing[Literal["read", "write"]] = Field(default=UNSET)
    packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pull_requests: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_projects: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secret_scanning_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_events: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_scanning_alert: Missing[Literal["read", "write"]] = Field(default=UNSET)
    single_file: Missing[Literal["read", "write"]] = Field(default=UNSET)
    statuses: Missing[Literal["read", "write"]] = Field(default=UNSET)
    team_discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    vulnerability_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    workflows: Missing[Literal["read", "write"]] = Field(default=UNSET)


class WebhookIssuesTransferredPropIssuePropPerformedViaGithubApp(GitHubModel):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None] = Field()
    description: Union[str, None] = Field()
    events: Missing[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
            ]
        ]
    ] = Field(default=UNSET, description="The list of events for the GitHub app")
    external_url: Union[str, None] = Field()
    html_url: str = Field()
    id: Union[int, None] = Field(description="Unique identifier of the GitHub app")
    name: str = Field(description="The name of the GitHub app")
    node_id: str = Field()
    owner: Union[
        WebhookIssuesTransferredPropIssuePropPerformedViaGithubAppPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookIssuesTransferredPropIssuePropPerformedViaGithubAppPropPermissions
    ] = Field(default=UNSET, description="The set of permissions for the GitHub app")
    slug: Missing[str] = Field(
        default=UNSET, description="The slug name of the GitHub app"
    )
    updated_at: Union[datetime, None] = Field()


class WebhookIssuesTransferredPropIssuePropPullRequest(GitHubModel):
    """WebhookIssuesTransferredPropIssuePropPullRequest"""

    diff_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    merged_at: Missing[Union[datetime, None]] = Field(default=UNSET)
    patch_url: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesTransferredPropIssuePropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookIssuesTransferredPropIssuePropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesUnassigned(GitHubModel):
    """issues unassigned event"""

    action: Literal["unassigned"] = Field(description="The action that was performed.")
    assignee: Missing[Union[WebhookIssuesUnassignedPropAssignee, None]] = Field(
        default=UNSET, title="User"
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    issue: WebhookIssuesUnassignedPropIssue = Field(
        title="Issue",
        description="The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.",
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookIssuesUnassignedPropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesUnassignedPropIssue(GitHubModel):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    assignee: Missing[
        Union[WebhookIssuesUnassignedPropIssuePropAssignee, None]
    ] = Field(default=UNSET, title="User")
    assignees: List[
        Union[WebhookIssuesUnassignedPropIssuePropAssigneesItems, None]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: Union[str, None] = Field(description="Contents of the issue")
    closed_at: Union[datetime, None] = Field()
    comments: int = Field()
    comments_url: str = Field()
    created_at: datetime = Field()
    draft: Missing[bool] = Field(default=UNSET)
    events_url: str = Field()
    html_url: str = Field()
    id: int = Field()
    labels: Missing[List[WebhookIssuesUnassignedPropIssuePropLabelsItems]] = Field(
        default=UNSET
    )
    labels_url: str = Field()
    locked: Missing[bool] = Field(default=UNSET)
    milestone: Union[WebhookIssuesUnassignedPropIssuePropMilestone, None] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field()
    performed_via_github_app: Missing[
        Union[WebhookIssuesUnassignedPropIssuePropPerformedViaGithubApp, None]
    ] = Field(
        default=UNSET,
        title="App",
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
    )
    pull_request: Missing[WebhookIssuesUnassignedPropIssuePropPullRequest] = Field(
        default=UNSET
    )
    reactions: WebhookIssuesUnassignedPropIssuePropReactions = Field(title="Reactions")
    repository_url: str = Field()
    state: Missing[Literal["open", "closed"]] = Field(
        default=UNSET, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Missing[Union[str, None]] = Field(default=UNSET)
    timeline_url: Missing[str] = Field(default=UNSET)
    title: str = Field(description="Title of the issue")
    updated_at: datetime = Field()
    url: str = Field(description="URL for the issue")
    user: Union[WebhookIssuesUnassignedPropIssuePropUser, None] = Field(title="User")


class WebhookIssuesUnassignedPropIssuePropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesUnassignedPropIssuePropAssigneesItems(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesUnassignedPropIssuePropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookIssuesUnassignedPropIssuePropMilestonePropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesUnassignedPropIssuePropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookIssuesUnassignedPropIssuePropMilestonePropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookIssuesUnassignedPropIssuePropPerformedViaGithubAppPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesUnassignedPropIssuePropPerformedViaGithubAppPropPermissions(
    GitHubModel
):
    """WebhookIssuesUnassignedPropIssuePropPerformedViaGithubAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    administration: Missing[Literal["read", "write"]] = Field(default=UNSET)
    checks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    content_references: Missing[Literal["read", "write"]] = Field(default=UNSET)
    contents: Missing[Literal["read", "write"]] = Field(default=UNSET)
    deployments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    emails: Missing[Literal["read", "write"]] = Field(default=UNSET)
    environments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    issues: Missing[Literal["read", "write"]] = Field(default=UNSET)
    keys: Missing[Literal["read", "write"]] = Field(default=UNSET)
    members: Missing[Literal["read", "write"]] = Field(default=UNSET)
    metadata: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_administration: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_plan: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_projects: Missing[Literal["read", "write", "admin"]] = Field(
        default=UNSET
    )
    organization_secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_self_hosted_runners: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_user_blocking: Missing[Literal["read", "write"]] = Field(default=UNSET)
    packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pull_requests: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_projects: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secret_scanning_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_events: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_scanning_alert: Missing[Literal["read", "write"]] = Field(default=UNSET)
    single_file: Missing[Literal["read", "write"]] = Field(default=UNSET)
    statuses: Missing[Literal["read", "write"]] = Field(default=UNSET)
    team_discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    vulnerability_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    workflows: Missing[Literal["read", "write"]] = Field(default=UNSET)


class WebhookIssuesUnassignedPropIssuePropPerformedViaGithubApp(GitHubModel):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None] = Field()
    description: Union[str, None] = Field()
    events: Missing[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "reminder",
                "pull_request_review_thread",
            ]
        ]
    ] = Field(default=UNSET, description="The list of events for the GitHub app")
    external_url: Union[str, None] = Field()
    html_url: str = Field()
    id: Union[int, None] = Field(description="Unique identifier of the GitHub app")
    name: str = Field(description="The name of the GitHub app")
    node_id: str = Field()
    owner: Union[
        WebhookIssuesUnassignedPropIssuePropPerformedViaGithubAppPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookIssuesUnassignedPropIssuePropPerformedViaGithubAppPropPermissions
    ] = Field(default=UNSET, description="The set of permissions for the GitHub app")
    slug: Missing[str] = Field(
        default=UNSET, description="The slug name of the GitHub app"
    )
    updated_at: Union[datetime, None] = Field()


class WebhookIssuesUnassignedPropIssuePropPullRequest(GitHubModel):
    """WebhookIssuesUnassignedPropIssuePropPullRequest"""

    diff_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    merged_at: Missing[Union[datetime, None]] = Field(default=UNSET)
    patch_url: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesUnassignedPropIssuePropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookIssuesUnassignedPropIssuePropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesUnlabeled(GitHubModel):
    """issues unlabeled event"""

    action: Literal["unlabeled"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    issue: WebhookIssuesUnlabeledPropIssue = Field(
        title="Issue",
        description="The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.",
    )
    label: Missing[WebhookIssuesUnlabeledPropLabel] = Field(
        default=UNSET, title="Label"
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookIssuesUnlabeledPropIssue(GitHubModel):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    assignee: Missing[Union[WebhookIssuesUnlabeledPropIssuePropAssignee, None]] = Field(
        default=UNSET, title="User"
    )
    assignees: List[
        Union[WebhookIssuesUnlabeledPropIssuePropAssigneesItems, None]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: Union[str, None] = Field(description="Contents of the issue")
    closed_at: Union[datetime, None] = Field()
    comments: int = Field()
    comments_url: str = Field()
    created_at: datetime = Field()
    draft: Missing[bool] = Field(default=UNSET)
    events_url: str = Field()
    html_url: str = Field()
    id: int = Field()
    labels: Missing[List[WebhookIssuesUnlabeledPropIssuePropLabelsItems]] = Field(
        default=UNSET
    )
    labels_url: str = Field()
    locked: Missing[bool] = Field(default=UNSET)
    milestone: Union[WebhookIssuesUnlabeledPropIssuePropMilestone, None] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field()
    performed_via_github_app: Missing[
        Union[WebhookIssuesUnlabeledPropIssuePropPerformedViaGithubApp, None]
    ] = Field(
        default=UNSET,
        title="App",
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
    )
    pull_request: Missing[WebhookIssuesUnlabeledPropIssuePropPullRequest] = Field(
        default=UNSET
    )
    reactions: WebhookIssuesUnlabeledPropIssuePropReactions = Field(title="Reactions")
    repository_url: str = Field()
    state: Missing[Literal["open", "closed"]] = Field(
        default=UNSET, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Missing[Union[str, None]] = Field(default=UNSET)
    timeline_url: Missing[str] = Field(default=UNSET)
    title: str = Field(description="Title of the issue")
    updated_at: datetime = Field()
    url: str = Field(description="URL for the issue")
    user: Union[WebhookIssuesUnlabeledPropIssuePropUser, None] = Field(title="User")


class WebhookIssuesUnlabeledPropIssuePropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesUnlabeledPropIssuePropAssigneesItems(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesUnlabeledPropIssuePropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookIssuesUnlabeledPropIssuePropMilestonePropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesUnlabeledPropIssuePropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookIssuesUnlabeledPropIssuePropMilestonePropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookIssuesUnlabeledPropIssuePropPerformedViaGithubAppPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesUnlabeledPropIssuePropPerformedViaGithubAppPropPermissions(
    GitHubModel
):
    """WebhookIssuesUnlabeledPropIssuePropPerformedViaGithubAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    administration: Missing[Literal["read", "write"]] = Field(default=UNSET)
    checks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    content_references: Missing[Literal["read", "write"]] = Field(default=UNSET)
    contents: Missing[Literal["read", "write"]] = Field(default=UNSET)
    deployments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    emails: Missing[Literal["read", "write"]] = Field(default=UNSET)
    environments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    issues: Missing[Literal["read", "write"]] = Field(default=UNSET)
    keys: Missing[Literal["read", "write"]] = Field(default=UNSET)
    members: Missing[Literal["read", "write"]] = Field(default=UNSET)
    metadata: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_administration: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_plan: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_projects: Missing[Literal["read", "write", "admin"]] = Field(
        default=UNSET
    )
    organization_secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_self_hosted_runners: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_user_blocking: Missing[Literal["read", "write"]] = Field(default=UNSET)
    packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pull_requests: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_projects: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secret_scanning_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_events: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_scanning_alert: Missing[Literal["read", "write"]] = Field(default=UNSET)
    single_file: Missing[Literal["read", "write"]] = Field(default=UNSET)
    statuses: Missing[Literal["read", "write"]] = Field(default=UNSET)
    team_discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    vulnerability_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    workflows: Missing[Literal["read", "write"]] = Field(default=UNSET)


class WebhookIssuesUnlabeledPropIssuePropPerformedViaGithubApp(GitHubModel):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None] = Field()
    description: Union[str, None] = Field()
    events: Missing[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "reminder",
                "pull_request_review_thread",
            ]
        ]
    ] = Field(default=UNSET, description="The list of events for the GitHub app")
    external_url: Union[str, None] = Field()
    html_url: str = Field()
    id: Union[int, None] = Field(description="Unique identifier of the GitHub app")
    name: str = Field(description="The name of the GitHub app")
    node_id: str = Field()
    owner: Union[
        WebhookIssuesUnlabeledPropIssuePropPerformedViaGithubAppPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookIssuesUnlabeledPropIssuePropPerformedViaGithubAppPropPermissions
    ] = Field(default=UNSET, description="The set of permissions for the GitHub app")
    slug: Missing[str] = Field(
        default=UNSET, description="The slug name of the GitHub app"
    )
    updated_at: Union[datetime, None] = Field()


class WebhookIssuesUnlabeledPropIssuePropPullRequest(GitHubModel):
    """WebhookIssuesUnlabeledPropIssuePropPullRequest"""

    diff_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    merged_at: Missing[Union[datetime, None]] = Field(default=UNSET)
    patch_url: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesUnlabeledPropIssuePropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookIssuesUnlabeledPropIssuePropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesUnlabeledPropLabel(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookIssuesUnlocked(GitHubModel):
    """issues unlocked event"""

    action: Literal["unlocked"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    issue: WebhookIssuesUnlockedPropIssue = Field()
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookIssuesUnlockedPropIssue(GitHubModel):
    """WebhookIssuesUnlockedPropIssue"""

    active_lock_reason: Union[None, None] = Field()
    assignee: Missing[
        Union[WebhookIssuesUnlockedPropIssueMergedAssignee, None]
    ] = Field(default=UNSET)
    assignees: List[WebhookIssuesUnlockedPropIssueMergedAssignees] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: Union[Union[str, None], None] = Field(description="Contents of the issue")
    closed_at: Union[datetime, None] = Field()
    comments: int = Field()
    comments_url: str = Field()
    created_at: datetime = Field()
    draft: Missing[bool] = Field(default=UNSET)
    events_url: str = Field()
    html_url: str = Field()
    id: int = Field()
    labels: Missing[List[WebhookIssuesUnlockedPropIssueMergedLabels]] = Field(
        default=UNSET
    )
    labels_url: str = Field()
    locked: Literal[False] = Field()
    milestone: Union[WebhookIssuesUnlockedPropIssueMergedMilestone, None] = Field()
    node_id: str = Field()
    number: int = Field()
    performed_via_github_app: Missing[Union[None, None]] = Field(default=UNSET)
    pull_request: Missing[WebhookIssuesUnlockedPropIssueAllof0PropPullRequest] = Field(
        default=UNSET
    )
    reactions: WebhookIssuesUnlockedPropIssueMergedReactions = Field()
    repository_url: str = Field()
    state: Missing[Literal["open", "closed"]] = Field(
        default=UNSET, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Missing[Union[str, None]] = Field(default=UNSET)
    timeline_url: Missing[str] = Field(default=UNSET)
    title: str = Field(description="Title of the issue")
    updated_at: datetime = Field()
    url: str = Field(description="URL for the issue")
    user: WebhookIssuesUnlockedPropIssueMergedUser = Field()


class WebhookIssuesUnlockedPropIssueAllof0(GitHubModel):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    assignee: Missing[
        Union[WebhookIssuesUnlockedPropIssueAllof0PropAssignee, None]
    ] = Field(default=UNSET, title="User")
    assignees: List[
        Union[WebhookIssuesUnlockedPropIssueAllof0PropAssigneesItems, None]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: Union[str, None] = Field(description="Contents of the issue")
    closed_at: Union[datetime, None] = Field()
    comments: int = Field()
    comments_url: str = Field()
    created_at: datetime = Field()
    draft: Missing[bool] = Field(default=UNSET)
    events_url: str = Field()
    html_url: str = Field()
    id: int = Field()
    labels: Missing[List[WebhookIssuesUnlockedPropIssueAllof0PropLabelsItems]] = Field(
        default=UNSET
    )
    labels_url: str = Field()
    locked: Missing[bool] = Field(default=UNSET)
    milestone: Union[WebhookIssuesUnlockedPropIssueAllof0PropMilestone, None] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field()
    performed_via_github_app: Missing[
        Union[WebhookIssuesUnlockedPropIssueAllof0PropPerformedViaGithubApp, None]
    ] = Field(
        default=UNSET,
        title="App",
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
    )
    pull_request: Missing[WebhookIssuesUnlockedPropIssueAllof0PropPullRequest] = Field(
        default=UNSET
    )
    reactions: WebhookIssuesUnlockedPropIssueAllof0PropReactions = Field(
        title="Reactions"
    )
    repository_url: str = Field()
    state: Missing[Literal["open", "closed"]] = Field(
        default=UNSET, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Missing[Union[str, None]] = Field(default=UNSET)
    timeline_url: Missing[str] = Field(default=UNSET)
    title: str = Field(description="Title of the issue")
    updated_at: datetime = Field()
    url: str = Field(description="URL for the issue")
    user: Union[WebhookIssuesUnlockedPropIssueAllof0PropUser, None] = Field(
        title="User"
    )


class WebhookIssuesUnlockedPropIssueAllof0PropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesUnlockedPropIssueAllof0PropAssigneesItems(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesUnlockedPropIssueAllof0PropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookIssuesUnlockedPropIssueAllof0PropMilestonePropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesUnlockedPropIssueAllof0PropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookIssuesUnlockedPropIssueAllof0PropMilestonePropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookIssuesUnlockedPropIssueAllof0PropPerformedViaGithubAppPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesUnlockedPropIssueAllof0PropPerformedViaGithubAppPropPermissions(
    GitHubModel
):
    """WebhookIssuesUnlockedPropIssueAllof0PropPerformedViaGithubAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    administration: Missing[Literal["read", "write"]] = Field(default=UNSET)
    checks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    content_references: Missing[Literal["read", "write"]] = Field(default=UNSET)
    contents: Missing[Literal["read", "write"]] = Field(default=UNSET)
    deployments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    emails: Missing[Literal["read", "write"]] = Field(default=UNSET)
    environments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    issues: Missing[Literal["read", "write"]] = Field(default=UNSET)
    keys: Missing[Literal["read", "write"]] = Field(default=UNSET)
    members: Missing[Literal["read", "write"]] = Field(default=UNSET)
    metadata: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_administration: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_plan: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_projects: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_self_hosted_runners: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_user_blocking: Missing[Literal["read", "write"]] = Field(default=UNSET)
    packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pull_requests: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_projects: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secret_scanning_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_events: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_scanning_alert: Missing[Literal["read", "write"]] = Field(default=UNSET)
    single_file: Missing[Literal["read", "write"]] = Field(default=UNSET)
    statuses: Missing[Literal["read", "write"]] = Field(default=UNSET)
    team_discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    vulnerability_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    workflows: Missing[Literal["read", "write"]] = Field(default=UNSET)


class WebhookIssuesUnlockedPropIssueAllof0PropPerformedViaGithubApp(GitHubModel):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None] = Field()
    description: Union[str, None] = Field()
    events: Missing[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
            ]
        ]
    ] = Field(default=UNSET, description="The list of events for the GitHub app")
    external_url: Union[str, None] = Field()
    html_url: str = Field()
    id: Union[int, None] = Field(description="Unique identifier of the GitHub app")
    name: str = Field(description="The name of the GitHub app")
    node_id: str = Field()
    owner: Union[
        WebhookIssuesUnlockedPropIssueAllof0PropPerformedViaGithubAppPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookIssuesUnlockedPropIssueAllof0PropPerformedViaGithubAppPropPermissions
    ] = Field(default=UNSET, description="The set of permissions for the GitHub app")
    slug: Missing[str] = Field(
        default=UNSET, description="The slug name of the GitHub app"
    )
    updated_at: Union[datetime, None] = Field()


class WebhookIssuesUnlockedPropIssueAllof0PropPullRequest(GitHubModel):
    """WebhookIssuesUnlockedPropIssueAllof0PropPullRequest"""

    diff_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    merged_at: Missing[Union[datetime, None]] = Field(default=UNSET)
    patch_url: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesUnlockedPropIssueAllof0PropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookIssuesUnlockedPropIssueAllof0PropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesUnlockedPropIssueAllof1(GitHubModel):
    """WebhookIssuesUnlockedPropIssueAllof1"""

    active_lock_reason: None = Field()
    assignee: Missing[
        Union[WebhookIssuesUnlockedPropIssueAllof1PropAssignee, None]
    ] = Field(default=UNSET)
    assignees: Missing[
        List[Union[WebhookIssuesUnlockedPropIssueAllof1PropAssigneesItems, None]]
    ] = Field(default=UNSET)
    author_association: Missing[str] = Field(default=UNSET)
    body: Missing[Union[str, None]] = Field(default=UNSET)
    closed_at: Missing[Union[str, None]] = Field(default=UNSET)
    comments: Missing[int] = Field(default=UNSET)
    comments_url: Missing[str] = Field(default=UNSET)
    created_at: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    labels: Missing[
        List[Union[WebhookIssuesUnlockedPropIssueAllof1PropLabelsItems, None]]
    ] = Field(default=UNSET)
    labels_url: Missing[str] = Field(default=UNSET)
    locked: Literal[False] = Field()
    milestone: Missing[
        Union[WebhookIssuesUnlockedPropIssueAllof1PropMilestone, None]
    ] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    number: Missing[int] = Field(default=UNSET)
    performed_via_github_app: Missing[None] = Field(default=UNSET)
    reactions: Missing[WebhookIssuesUnlockedPropIssueAllof1PropReactions] = Field(
        default=UNSET
    )
    repository_url: Missing[str] = Field(default=UNSET)
    state: Missing[str] = Field(default=UNSET)
    timeline_url: Missing[str] = Field(default=UNSET)
    title: Missing[str] = Field(default=UNSET)
    updated_at: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)
    user: Missing[WebhookIssuesUnlockedPropIssueAllof1PropUser] = Field(default=UNSET)


class WebhookIssuesUnlockedPropIssueAllof1PropAssignee(GitHubModel):
    """WebhookIssuesUnlockedPropIssueAllof1PropAssignee"""


class WebhookIssuesUnlockedPropIssueAllof1PropAssigneesItems(GitHubModel):
    """WebhookIssuesUnlockedPropIssueAllof1PropAssigneesItems"""


class WebhookIssuesUnlockedPropIssueAllof1PropLabelsItems(GitHubModel):
    """WebhookIssuesUnlockedPropIssueAllof1PropLabelsItems"""


class WebhookIssuesUnlockedPropIssueAllof1PropMilestone(GitHubModel):
    """WebhookIssuesUnlockedPropIssueAllof1PropMilestone"""


class WebhookIssuesUnlockedPropIssueAllof1PropReactions(GitHubModel):
    """WebhookIssuesUnlockedPropIssueAllof1PropReactions"""

    plus_one: Missing[int] = Field(default=UNSET, alias="+1")
    minus_one: Missing[int] = Field(default=UNSET, alias="-1")
    confused: Missing[int] = Field(default=UNSET)
    eyes: Missing[int] = Field(default=UNSET)
    heart: Missing[int] = Field(default=UNSET)
    hooray: Missing[int] = Field(default=UNSET)
    laugh: Missing[int] = Field(default=UNSET)
    rocket: Missing[int] = Field(default=UNSET)
    total_count: Missing[int] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesUnlockedPropIssueAllof1PropUser(GitHubModel):
    """WebhookIssuesUnlockedPropIssueAllof1PropUser"""

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesUnlockedPropIssueMergedAssignee(GitHubModel):
    """WebhookIssuesUnlockedPropIssueMergedAssignee"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesUnlockedPropIssueMergedAssignees(GitHubModel):
    """WebhookIssuesUnlockedPropIssueMergedAssignees"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesUnlockedPropIssueMergedLabels(GitHubModel):
    """WebhookIssuesUnlockedPropIssueMergedLabels"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookIssuesUnlockedPropIssueMergedMilestone(GitHubModel):
    """WebhookIssuesUnlockedPropIssueMergedMilestone"""

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookIssuesUnlockedPropIssueAllof0PropMilestonePropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookIssuesUnlockedPropIssueMergedReactions(GitHubModel):
    """WebhookIssuesUnlockedPropIssueMergedReactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookIssuesUnlockedPropIssueMergedUser(GitHubModel):
    """WebhookIssuesUnlockedPropIssueMergedUser"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesUnpinned(GitHubModel):
    """issues unpinned event"""

    action: Literal["unpinned"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    issue: WebhookIssuesUnpinnedPropIssue = Field(
        title="Issue",
        description="The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.",
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookIssuesUnpinnedPropIssue(GitHubModel):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    assignee: Missing[Union[WebhookIssuesUnpinnedPropIssuePropAssignee, None]] = Field(
        default=UNSET, title="User"
    )
    assignees: List[
        Union[WebhookIssuesUnpinnedPropIssuePropAssigneesItems, None]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: Union[str, None] = Field(description="Contents of the issue")
    closed_at: Union[datetime, None] = Field()
    comments: int = Field()
    comments_url: str = Field()
    created_at: datetime = Field()
    draft: Missing[bool] = Field(default=UNSET)
    events_url: str = Field()
    html_url: str = Field()
    id: int = Field()
    labels: Missing[List[WebhookIssuesUnpinnedPropIssuePropLabelsItems]] = Field(
        default=UNSET
    )
    labels_url: str = Field()
    locked: Missing[bool] = Field(default=UNSET)
    milestone: Union[WebhookIssuesUnpinnedPropIssuePropMilestone, None] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field()
    performed_via_github_app: Missing[
        Union[WebhookIssuesUnpinnedPropIssuePropPerformedViaGithubApp, None]
    ] = Field(
        default=UNSET,
        title="App",
        description="GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
    )
    pull_request: Missing[WebhookIssuesUnpinnedPropIssuePropPullRequest] = Field(
        default=UNSET
    )
    reactions: WebhookIssuesUnpinnedPropIssuePropReactions = Field(title="Reactions")
    repository_url: str = Field()
    state: Missing[Literal["open", "closed"]] = Field(
        default=UNSET, description="State of the issue; either 'open' or 'closed'"
    )
    state_reason: Missing[Union[str, None]] = Field(default=UNSET)
    timeline_url: Missing[str] = Field(default=UNSET)
    title: str = Field(description="Title of the issue")
    updated_at: datetime = Field()
    url: str = Field(description="URL for the issue")
    user: Union[WebhookIssuesUnpinnedPropIssuePropUser, None] = Field(title="User")


class WebhookIssuesUnpinnedPropIssuePropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesUnpinnedPropIssuePropAssigneesItems(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesUnpinnedPropIssuePropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookIssuesUnpinnedPropIssuePropMilestonePropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesUnpinnedPropIssuePropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookIssuesUnpinnedPropIssuePropMilestonePropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookIssuesUnpinnedPropIssuePropPerformedViaGithubAppPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesUnpinnedPropIssuePropPerformedViaGithubAppPropPermissions(
    GitHubModel
):
    """WebhookIssuesUnpinnedPropIssuePropPerformedViaGithubAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    administration: Missing[Literal["read", "write"]] = Field(default=UNSET)
    checks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    content_references: Missing[Literal["read", "write"]] = Field(default=UNSET)
    contents: Missing[Literal["read", "write"]] = Field(default=UNSET)
    deployments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    emails: Missing[Literal["read", "write"]] = Field(default=UNSET)
    environments: Missing[Literal["read", "write"]] = Field(default=UNSET)
    issues: Missing[Literal["read", "write"]] = Field(default=UNSET)
    keys: Missing[Literal["read", "write"]] = Field(default=UNSET)
    members: Missing[Literal["read", "write"]] = Field(default=UNSET)
    metadata: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_administration: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_plan: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_projects: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    organization_self_hosted_runners: Missing[Literal["read", "write"]] = Field(
        default=UNSET
    )
    organization_user_blocking: Missing[Literal["read", "write"]] = Field(default=UNSET)
    packages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pages: Missing[Literal["read", "write"]] = Field(default=UNSET)
    pull_requests: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_hooks: Missing[Literal["read", "write"]] = Field(default=UNSET)
    repository_projects: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secret_scanning_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    secrets: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_events: Missing[Literal["read", "write"]] = Field(default=UNSET)
    security_scanning_alert: Missing[Literal["read", "write"]] = Field(default=UNSET)
    single_file: Missing[Literal["read", "write"]] = Field(default=UNSET)
    statuses: Missing[Literal["read", "write"]] = Field(default=UNSET)
    team_discussions: Missing[Literal["read", "write"]] = Field(default=UNSET)
    vulnerability_alerts: Missing[Literal["read", "write"]] = Field(default=UNSET)
    workflows: Missing[Literal["read", "write"]] = Field(default=UNSET)


class WebhookIssuesUnpinnedPropIssuePropPerformedViaGithubApp(GitHubModel):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None] = Field()
    description: Union[str, None] = Field()
    events: Missing[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
            ]
        ]
    ] = Field(default=UNSET, description="The list of events for the GitHub app")
    external_url: Union[str, None] = Field()
    html_url: str = Field()
    id: Union[int, None] = Field(description="Unique identifier of the GitHub app")
    name: str = Field(description="The name of the GitHub app")
    node_id: str = Field()
    owner: Union[
        WebhookIssuesUnpinnedPropIssuePropPerformedViaGithubAppPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookIssuesUnpinnedPropIssuePropPerformedViaGithubAppPropPermissions
    ] = Field(default=UNSET, description="The set of permissions for the GitHub app")
    slug: Missing[str] = Field(
        default=UNSET, description="The slug name of the GitHub app"
    )
    updated_at: Union[datetime, None] = Field()


class WebhookIssuesUnpinnedPropIssuePropPullRequest(GitHubModel):
    """WebhookIssuesUnpinnedPropIssuePropPullRequest"""

    diff_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    merged_at: Missing[Union[datetime, None]] = Field(default=UNSET)
    patch_url: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookIssuesUnpinnedPropIssuePropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookIssuesUnpinnedPropIssuePropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookLabelCreated(GitHubModel):
    """label created event"""

    action: Literal["created"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    label: WebhookLabelCreatedPropLabel = Field(title="Label")
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: Missing[SimpleUserWebhooks] = Field(
        default=UNSET,
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookLabelCreatedPropLabel(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookLabelDeleted(GitHubModel):
    """label deleted event"""

    action: Literal["deleted"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    label: WebhookLabelDeletedPropLabel = Field(title="Label")
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookLabelDeletedPropLabel(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookLabelEdited(GitHubModel):
    """label edited event"""

    action: Literal["edited"] = Field()
    changes: Missing[WebhookLabelEditedPropChanges] = Field(
        default=UNSET,
        description="The changes to the label if the action was `edited`.",
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    label: WebhookLabelEditedPropLabel = Field(title="Label")
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookLabelEditedPropChanges(GitHubModel):
    """WebhookLabelEditedPropChanges

    The changes to the label if the action was `edited`.
    """

    color: Missing[WebhookLabelEditedPropChangesPropColor] = Field(default=UNSET)
    description: Missing[WebhookLabelEditedPropChangesPropDescription] = Field(
        default=UNSET
    )
    name: Missing[WebhookLabelEditedPropChangesPropName] = Field(default=UNSET)


class WebhookLabelEditedPropChangesPropColor(GitHubModel):
    """WebhookLabelEditedPropChangesPropColor"""

    from_: str = Field(
        alias="from",
        description="The previous version of the color if the action was `edited`.",
    )


class WebhookLabelEditedPropChangesPropDescription(GitHubModel):
    """WebhookLabelEditedPropChangesPropDescription"""

    from_: str = Field(
        alias="from",
        description="The previous version of the description if the action was `edited`.",
    )


class WebhookLabelEditedPropChangesPropName(GitHubModel):
    """WebhookLabelEditedPropChangesPropName"""

    from_: str = Field(
        alias="from",
        description="The previous version of the name if the action was `edited`.",
    )


class WebhookLabelEditedPropLabel(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookMarketplacePurchaseCancelled(GitHubModel):
    """marketplace_purchase cancelled event"""

    action: Literal["cancelled"] = Field()
    effective_date: str = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    marketplace_purchase: WebhookMarketplacePurchaseCancelledPropMarketplacePurchase = (
        Field()
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    previous_marketplace_purchase: Missing[
        WebhookMarketplacePurchaseCancelledPropPreviousMarketplacePurchase
    ] = Field(default=UNSET, title="Marketplace Purchase")
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookMarketplacePurchaseCancelledPropMarketplacePurchase(GitHubModel):
    """WebhookMarketplacePurchaseCancelledPropMarketplacePurchase"""

    account: WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseMergedAccount = (
        Field()
    )
    billing_cycle: str = Field()
    free_trial_ends_on: Union[Union[str, None], None] = Field()
    next_billing_date: Union[Union[str, None], None] = Field()
    on_free_trial: bool = Field()
    plan: WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseMergedPlan = Field()
    unit_count: int = Field()


class WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof0(GitHubModel):
    """Marketplace Purchase"""

    account: WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof0PropAccount = (
        Field()
    )
    billing_cycle: str = Field()
    free_trial_ends_on: Union[str, None] = Field()
    next_billing_date: Missing[Union[str, None]] = Field(default=UNSET)
    on_free_trial: bool = Field()
    plan: WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof0PropPlan = (
        Field()
    )
    unit_count: int = Field()


class WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof0PropAccount(
    GitHubModel
):
    """WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof0PropAccount"""

    id: int = Field()
    login: str = Field()
    node_id: str = Field()
    organization_billing_email: Union[str, None] = Field()
    type: str = Field()


class WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof0PropPlan(
    GitHubModel
):
    """WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof0PropPlan"""

    bullets: List[str] = Field()
    description: str = Field()
    has_free_trial: bool = Field()
    id: int = Field()
    monthly_price_in_cents: int = Field()
    name: str = Field()
    price_model: Literal["FREE", "FLAT_RATE", "PER_UNIT"] = Field()
    unit_name: Union[str, None] = Field()
    yearly_price_in_cents: int = Field()


class WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof1(GitHubModel):
    """WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof1"""

    account: Missing[
        WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof1PropAccount
    ] = Field(default=UNSET)
    billing_cycle: Missing[str] = Field(default=UNSET)
    free_trial_ends_on: Missing[Union[str, None]] = Field(default=UNSET)
    next_billing_date: Union[str, None] = Field()
    on_free_trial: Missing[bool] = Field(default=UNSET)
    plan: Missing[
        WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof1PropPlan
    ] = Field(default=UNSET)
    unit_count: Missing[int] = Field(default=UNSET)


class WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof1PropAccount(
    GitHubModel
):
    """WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof1PropAccount"""

    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organization_billing_email: Missing[Union[str, None]] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)


class WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof1PropPlan(
    GitHubModel
):
    """WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof1PropPlan"""

    bullets: Missing[List[Union[str, None]]] = Field(default=UNSET)
    description: Missing[str] = Field(default=UNSET)
    has_free_trial: Missing[bool] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    monthly_price_in_cents: Missing[int] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    price_model: Missing[Literal["FREE", "FLAT_RATE", "PER_UNIT"]] = Field(
        default=UNSET
    )
    unit_name: Missing[Union[str, None]] = Field(default=UNSET)
    yearly_price_in_cents: Missing[int] = Field(default=UNSET)


class WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseMergedAccount(
    GitHubModel
):
    """WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseMergedAccount"""

    id: int = Field()
    login: str = Field()
    node_id: str = Field()
    organization_billing_email: Union[Union[str, None], None] = Field()
    type: str = Field()


class WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseMergedPlan(GitHubModel):
    """WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseMergedPlan"""

    bullets: List[str] = Field()
    description: str = Field()
    has_free_trial: bool = Field()
    id: int = Field()
    monthly_price_in_cents: int = Field()
    name: str = Field()
    price_model: Literal["FREE", "FLAT_RATE", "PER_UNIT"] = Field()
    unit_name: Union[Union[str, None], None] = Field()
    yearly_price_in_cents: int = Field()


class WebhookMarketplacePurchaseCancelledPropPreviousMarketplacePurchase(GitHubModel):
    """Marketplace Purchase"""

    account: WebhookMarketplacePurchaseCancelledPropPreviousMarketplacePurchasePropAccount = (
        Field()
    )
    billing_cycle: str = Field()
    free_trial_ends_on: None = Field()
    next_billing_date: Missing[Union[str, None]] = Field(default=UNSET)
    on_free_trial: bool = Field()
    plan: WebhookMarketplacePurchaseCancelledPropPreviousMarketplacePurchasePropPlan = (
        Field()
    )
    unit_count: int = Field()


class WebhookMarketplacePurchaseCancelledPropPreviousMarketplacePurchasePropAccount(
    GitHubModel
):
    """WebhookMarketplacePurchaseCancelledPropPreviousMarketplacePurchasePropAccount"""

    id: int = Field()
    login: str = Field()
    node_id: str = Field()
    organization_billing_email: Union[str, None] = Field()
    type: str = Field()


class WebhookMarketplacePurchaseCancelledPropPreviousMarketplacePurchasePropPlan(
    GitHubModel
):
    """WebhookMarketplacePurchaseCancelledPropPreviousMarketplacePurchasePropPlan"""

    bullets: List[str] = Field()
    description: str = Field()
    has_free_trial: bool = Field()
    id: int = Field()
    monthly_price_in_cents: int = Field()
    name: str = Field()
    price_model: Literal["FREE", "FLAT_RATE", "PER_UNIT"] = Field()
    unit_name: Union[str, None] = Field()
    yearly_price_in_cents: int = Field()


class WebhookMarketplacePurchaseChanged(GitHubModel):
    """marketplace_purchase changed event"""

    action: Literal["changed"] = Field()
    effective_date: str = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    marketplace_purchase: WebhookMarketplacePurchaseChangedPropMarketplacePurchase = (
        Field()
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    previous_marketplace_purchase: Missing[
        WebhookMarketplacePurchaseChangedPropPreviousMarketplacePurchase
    ] = Field(default=UNSET, title="Marketplace Purchase")
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookMarketplacePurchaseChangedPropMarketplacePurchase(GitHubModel):
    """WebhookMarketplacePurchaseChangedPropMarketplacePurchase"""

    account: WebhookMarketplacePurchaseChangedPropMarketplacePurchaseMergedAccount = (
        Field()
    )
    billing_cycle: str = Field()
    free_trial_ends_on: Union[Union[str, None], None] = Field()
    next_billing_date: Union[Union[str, None], None] = Field()
    on_free_trial: bool = Field()
    plan: WebhookMarketplacePurchaseChangedPropMarketplacePurchaseMergedPlan = Field()
    unit_count: int = Field()


class WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof0(GitHubModel):
    """Marketplace Purchase"""

    account: WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof0PropAccount = (
        Field()
    )
    billing_cycle: str = Field()
    free_trial_ends_on: Union[str, None] = Field()
    next_billing_date: Missing[Union[str, None]] = Field(default=UNSET)
    on_free_trial: bool = Field()
    plan: WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof0PropPlan = (
        Field()
    )
    unit_count: int = Field()


class WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof0PropAccount(
    GitHubModel
):
    """WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof0PropAccount"""

    id: int = Field()
    login: str = Field()
    node_id: str = Field()
    organization_billing_email: Union[str, None] = Field()
    type: str = Field()


class WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof0PropPlan(
    GitHubModel
):
    """WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof0PropPlan"""

    bullets: List[str] = Field()
    description: str = Field()
    has_free_trial: bool = Field()
    id: int = Field()
    monthly_price_in_cents: int = Field()
    name: str = Field()
    price_model: Literal["FREE", "FLAT_RATE", "PER_UNIT"] = Field()
    unit_name: Union[str, None] = Field()
    yearly_price_in_cents: int = Field()


class WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof1(GitHubModel):
    """WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof1"""

    account: Missing[
        WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof1PropAccount
    ] = Field(default=UNSET)
    billing_cycle: Missing[str] = Field(default=UNSET)
    free_trial_ends_on: Missing[Union[str, None]] = Field(default=UNSET)
    next_billing_date: Union[str, None] = Field()
    on_free_trial: Missing[bool] = Field(default=UNSET)
    plan: Missing[
        WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof1PropPlan
    ] = Field(default=UNSET)
    unit_count: Missing[int] = Field(default=UNSET)


class WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof1PropAccount(
    GitHubModel
):
    """WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof1PropAccount"""

    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organization_billing_email: Missing[Union[str, None]] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)


class WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof1PropPlan(
    GitHubModel
):
    """WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof1PropPlan"""

    bullets: Missing[List[Union[str, None]]] = Field(default=UNSET)
    description: Missing[str] = Field(default=UNSET)
    has_free_trial: Missing[bool] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    monthly_price_in_cents: Missing[int] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    price_model: Missing[Literal["FREE", "FLAT_RATE", "PER_UNIT"]] = Field(
        default=UNSET
    )
    unit_name: Missing[Union[str, None]] = Field(default=UNSET)
    yearly_price_in_cents: Missing[int] = Field(default=UNSET)


class WebhookMarketplacePurchaseChangedPropMarketplacePurchaseMergedAccount(
    GitHubModel
):
    """WebhookMarketplacePurchaseChangedPropMarketplacePurchaseMergedAccount"""

    id: int = Field()
    login: str = Field()
    node_id: str = Field()
    organization_billing_email: Union[Union[str, None], None] = Field()
    type: str = Field()


class WebhookMarketplacePurchaseChangedPropMarketplacePurchaseMergedPlan(GitHubModel):
    """WebhookMarketplacePurchaseChangedPropMarketplacePurchaseMergedPlan"""

    bullets: List[str] = Field()
    description: str = Field()
    has_free_trial: bool = Field()
    id: int = Field()
    monthly_price_in_cents: int = Field()
    name: str = Field()
    price_model: Literal["FREE", "FLAT_RATE", "PER_UNIT"] = Field()
    unit_name: Union[Union[str, None], None] = Field()
    yearly_price_in_cents: int = Field()


class WebhookMarketplacePurchaseChangedPropPreviousMarketplacePurchase(GitHubModel):
    """Marketplace Purchase"""

    account: WebhookMarketplacePurchaseChangedPropPreviousMarketplacePurchasePropAccount = (
        Field()
    )
    billing_cycle: str = Field()
    free_trial_ends_on: Union[str, None] = Field()
    next_billing_date: Missing[Union[str, None]] = Field(default=UNSET)
    on_free_trial: Union[bool, None] = Field()
    plan: WebhookMarketplacePurchaseChangedPropPreviousMarketplacePurchasePropPlan = (
        Field()
    )
    unit_count: int = Field()


class WebhookMarketplacePurchaseChangedPropPreviousMarketplacePurchasePropAccount(
    GitHubModel
):
    """WebhookMarketplacePurchaseChangedPropPreviousMarketplacePurchasePropAccount"""

    id: int = Field()
    login: str = Field()
    node_id: str = Field()
    organization_billing_email: Union[str, None] = Field()
    type: str = Field()


class WebhookMarketplacePurchaseChangedPropPreviousMarketplacePurchasePropPlan(
    GitHubModel
):
    """WebhookMarketplacePurchaseChangedPropPreviousMarketplacePurchasePropPlan"""

    bullets: List[str] = Field()
    description: str = Field()
    has_free_trial: bool = Field()
    id: int = Field()
    monthly_price_in_cents: int = Field()
    name: str = Field()
    price_model: Literal["FREE", "FLAT_RATE", "PER_UNIT"] = Field()
    unit_name: Union[str, None] = Field()
    yearly_price_in_cents: int = Field()


class WebhookMarketplacePurchasePendingChange(GitHubModel):
    """marketplace_purchase pending_change event"""

    action: Literal["pending_change"] = Field()
    effective_date: str = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    marketplace_purchase: WebhookMarketplacePurchasePendingChangePropMarketplacePurchase = (
        Field()
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    previous_marketplace_purchase: Missing[
        WebhookMarketplacePurchasePendingChangePropPreviousMarketplacePurchase
    ] = Field(default=UNSET, title="Marketplace Purchase")
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookMarketplacePurchasePendingChangePropMarketplacePurchase(GitHubModel):
    """WebhookMarketplacePurchasePendingChangePropMarketplacePurchase"""

    account: WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseMergedAccount = (
        Field()
    )
    billing_cycle: str = Field()
    free_trial_ends_on: Union[Union[str, None], None] = Field()
    next_billing_date: Union[Union[str, None], None] = Field()
    on_free_trial: bool = Field()
    plan: WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseMergedPlan = (
        Field()
    )
    unit_count: int = Field()


class WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof0(GitHubModel):
    """Marketplace Purchase"""

    account: WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof0PropAccount = (
        Field()
    )
    billing_cycle: str = Field()
    free_trial_ends_on: Union[str, None] = Field()
    next_billing_date: Missing[Union[str, None]] = Field(default=UNSET)
    on_free_trial: bool = Field()
    plan: WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof0PropPlan = (
        Field()
    )
    unit_count: int = Field()


class WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof0PropAccount(
    GitHubModel
):
    """WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof0PropAccount"""

    id: int = Field()
    login: str = Field()
    node_id: str = Field()
    organization_billing_email: Union[str, None] = Field()
    type: str = Field()


class WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof0PropPlan(
    GitHubModel
):
    """WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof0PropPlan"""

    bullets: List[str] = Field()
    description: str = Field()
    has_free_trial: bool = Field()
    id: int = Field()
    monthly_price_in_cents: int = Field()
    name: str = Field()
    price_model: Literal["FREE", "FLAT_RATE", "PER_UNIT"] = Field()
    unit_name: Union[str, None] = Field()
    yearly_price_in_cents: int = Field()


class WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof1(GitHubModel):
    """WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof1"""

    account: Missing[
        WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof1PropAccount
    ] = Field(default=UNSET)
    billing_cycle: Missing[str] = Field(default=UNSET)
    free_trial_ends_on: Missing[Union[str, None]] = Field(default=UNSET)
    next_billing_date: Union[str, None] = Field()
    on_free_trial: Missing[bool] = Field(default=UNSET)
    plan: Missing[
        WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof1PropPlan
    ] = Field(default=UNSET)
    unit_count: Missing[int] = Field(default=UNSET)


class WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof1PropAccount(
    GitHubModel
):
    """WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof1PropAccount"""

    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organization_billing_email: Missing[Union[str, None]] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)


class WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof1PropPlan(
    GitHubModel
):
    """WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof1PropPlan"""

    bullets: Missing[List[Union[str, None]]] = Field(default=UNSET)
    description: Missing[str] = Field(default=UNSET)
    has_free_trial: Missing[bool] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    monthly_price_in_cents: Missing[int] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    price_model: Missing[Literal["FREE", "FLAT_RATE", "PER_UNIT"]] = Field(
        default=UNSET
    )
    unit_name: Missing[Union[str, None]] = Field(default=UNSET)
    yearly_price_in_cents: Missing[int] = Field(default=UNSET)


class WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseMergedAccount(
    GitHubModel
):
    """WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseMergedAccount"""

    id: int = Field()
    login: str = Field()
    node_id: str = Field()
    organization_billing_email: Union[Union[str, None], None] = Field()
    type: str = Field()


class WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseMergedPlan(
    GitHubModel
):
    """WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseMergedPlan"""

    bullets: List[str] = Field()
    description: str = Field()
    has_free_trial: bool = Field()
    id: int = Field()
    monthly_price_in_cents: int = Field()
    name: str = Field()
    price_model: Literal["FREE", "FLAT_RATE", "PER_UNIT"] = Field()
    unit_name: Union[Union[str, None], None] = Field()
    yearly_price_in_cents: int = Field()


class WebhookMarketplacePurchasePendingChangePropPreviousMarketplacePurchase(
    GitHubModel
):
    """Marketplace Purchase"""

    account: WebhookMarketplacePurchasePendingChangePropPreviousMarketplacePurchasePropAccount = (
        Field()
    )
    billing_cycle: str = Field()
    free_trial_ends_on: Union[str, None] = Field()
    next_billing_date: Missing[Union[str, None]] = Field(default=UNSET)
    on_free_trial: bool = Field()
    plan: WebhookMarketplacePurchasePendingChangePropPreviousMarketplacePurchasePropPlan = (
        Field()
    )
    unit_count: int = Field()


class WebhookMarketplacePurchasePendingChangePropPreviousMarketplacePurchasePropAccount(
    GitHubModel
):
    """WebhookMarketplacePurchasePendingChangePropPreviousMarketplacePurchasePropAccoun
    t
    """

    id: int = Field()
    login: str = Field()
    node_id: str = Field()
    organization_billing_email: Union[str, None] = Field()
    type: str = Field()


class WebhookMarketplacePurchasePendingChangePropPreviousMarketplacePurchasePropPlan(
    GitHubModel
):
    """WebhookMarketplacePurchasePendingChangePropPreviousMarketplacePurchasePropPlan"""

    bullets: List[str] = Field()
    description: str = Field()
    has_free_trial: bool = Field()
    id: int = Field()
    monthly_price_in_cents: int = Field()
    name: str = Field()
    price_model: Literal["FREE", "FLAT_RATE", "PER_UNIT"] = Field()
    unit_name: Union[str, None] = Field()
    yearly_price_in_cents: int = Field()


class WebhookMarketplacePurchasePendingChangeCancelled(GitHubModel):
    """marketplace_purchase pending_change_cancelled event"""

    action: Literal["pending_change_cancelled"] = Field()
    effective_date: str = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    marketplace_purchase: WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchase = (
        Field()
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    previous_marketplace_purchase: Missing[
        WebhookMarketplacePurchasePendingChangeCancelledPropPreviousMarketplacePurchase
    ] = Field(default=UNSET, title="Marketplace Purchase")
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchase(
    GitHubModel
):
    """WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchase"""

    account: WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchaseAllof0PropAccount = (
        Field()
    )
    billing_cycle: str = Field()
    free_trial_ends_on: None = Field()
    next_billing_date: str = Field()
    on_free_trial: bool = Field()
    plan: WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchaseAllof0PropPlan = (
        Field()
    )
    unit_count: int = Field()


class WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchaseAllof0(
    GitHubModel
):
    """Marketplace Purchase"""

    account: WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchaseAllof0PropAccount = (
        Field()
    )
    billing_cycle: str = Field()
    free_trial_ends_on: None = Field()
    next_billing_date: Missing[Union[str, None]] = Field(default=UNSET)
    on_free_trial: bool = Field()
    plan: WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchaseAllof0PropPlan = (
        Field()
    )
    unit_count: int = Field()


class WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchaseAllof0PropAccount(
    GitHubModel
):
    """WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchaseAllof0Pro
    pAccount
    """

    id: int = Field()
    login: str = Field()
    node_id: str = Field()
    organization_billing_email: Union[str, None] = Field()
    type: str = Field()


class WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchaseAllof0PropPlan(
    GitHubModel
):
    """WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchaseAllof0Pro
    pPlan
    """

    bullets: List[str] = Field()
    description: str = Field()
    has_free_trial: bool = Field()
    id: int = Field()
    monthly_price_in_cents: int = Field()
    name: str = Field()
    price_model: Literal["FREE", "FLAT_RATE", "PER_UNIT"] = Field()
    unit_name: Union[str, None] = Field()
    yearly_price_in_cents: int = Field()


class WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchaseAllof1(
    GitHubModel
):
    """WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchaseAllof1"""

    next_billing_date: str = Field()


class WebhookMarketplacePurchasePendingChangeCancelledPropPreviousMarketplacePurchase(
    GitHubModel
):
    """Marketplace Purchase"""

    account: WebhookMarketplacePurchasePendingChangeCancelledPropPreviousMarketplacePurchasePropAccount = (
        Field()
    )
    billing_cycle: str = Field()
    free_trial_ends_on: None = Field()
    next_billing_date: Missing[Union[str, None]] = Field(default=UNSET)
    on_free_trial: bool = Field()
    plan: WebhookMarketplacePurchasePendingChangeCancelledPropPreviousMarketplacePurchasePropPlan = (
        Field()
    )
    unit_count: int = Field()


class WebhookMarketplacePurchasePendingChangeCancelledPropPreviousMarketplacePurchasePropAccount(
    GitHubModel
):
    """WebhookMarketplacePurchasePendingChangeCancelledPropPreviousMarketplacePurchaseP
    ropAccount
    """

    id: int = Field()
    login: str = Field()
    node_id: str = Field()
    organization_billing_email: Union[str, None] = Field()
    type: str = Field()


class WebhookMarketplacePurchasePendingChangeCancelledPropPreviousMarketplacePurchasePropPlan(
    GitHubModel
):
    """WebhookMarketplacePurchasePendingChangeCancelledPropPreviousMarketplacePurchaseP
    ropPlan
    """

    bullets: List[str] = Field()
    description: str = Field()
    has_free_trial: bool = Field()
    id: int = Field()
    monthly_price_in_cents: int = Field()
    name: str = Field()
    price_model: Literal["FREE", "FLAT_RATE", "PER_UNIT"] = Field()
    unit_name: Union[str, None] = Field()
    yearly_price_in_cents: int = Field()


class WebhookMarketplacePurchasePurchased(GitHubModel):
    """marketplace_purchase purchased event"""

    action: Literal["purchased"] = Field()
    effective_date: str = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    marketplace_purchase: WebhookMarketplacePurchasePurchasedPropMarketplacePurchase = (
        Field()
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    previous_marketplace_purchase: Missing[
        WebhookMarketplacePurchasePurchasedPropPreviousMarketplacePurchase
    ] = Field(default=UNSET, title="Marketplace Purchase")
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookMarketplacePurchasePurchasedPropMarketplacePurchase(GitHubModel):
    """WebhookMarketplacePurchasePurchasedPropMarketplacePurchase"""

    account: WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseMergedAccount = (
        Field()
    )
    billing_cycle: str = Field()
    free_trial_ends_on: Union[Union[str, None], None] = Field()
    next_billing_date: Union[Union[str, None], None] = Field()
    on_free_trial: bool = Field()
    plan: WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseMergedPlan = Field()
    unit_count: int = Field()


class WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof0(GitHubModel):
    """Marketplace Purchase"""

    account: WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof0PropAccount = (
        Field()
    )
    billing_cycle: str = Field()
    free_trial_ends_on: Union[str, None] = Field()
    next_billing_date: Missing[Union[str, None]] = Field(default=UNSET)
    on_free_trial: bool = Field()
    plan: WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof0PropPlan = (
        Field()
    )
    unit_count: int = Field()


class WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof0PropAccount(
    GitHubModel
):
    """WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof0PropAccount"""

    id: int = Field()
    login: str = Field()
    node_id: str = Field()
    organization_billing_email: Union[str, None] = Field()
    type: str = Field()


class WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof0PropPlan(
    GitHubModel
):
    """WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof0PropPlan"""

    bullets: List[str] = Field()
    description: str = Field()
    has_free_trial: bool = Field()
    id: int = Field()
    monthly_price_in_cents: int = Field()
    name: str = Field()
    price_model: Literal["FREE", "FLAT_RATE", "PER_UNIT"] = Field()
    unit_name: Union[str, None] = Field()
    yearly_price_in_cents: int = Field()


class WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof1(GitHubModel):
    """WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof1"""

    account: Missing[
        WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof1PropAccount
    ] = Field(default=UNSET)
    billing_cycle: Missing[str] = Field(default=UNSET)
    free_trial_ends_on: Missing[Union[str, None]] = Field(default=UNSET)
    next_billing_date: Union[str, None] = Field()
    on_free_trial: Missing[bool] = Field(default=UNSET)
    plan: Missing[
        WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof1PropPlan
    ] = Field(default=UNSET)
    unit_count: Missing[int] = Field(default=UNSET)


class WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof1PropAccount(
    GitHubModel
):
    """WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof1PropAccount"""

    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organization_billing_email: Missing[Union[str, None]] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)


class WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof1PropPlan(
    GitHubModel
):
    """WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof1PropPlan"""

    bullets: Missing[List[Union[str, None]]] = Field(default=UNSET)
    description: Missing[str] = Field(default=UNSET)
    has_free_trial: Missing[bool] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    monthly_price_in_cents: Missing[int] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    price_model: Missing[Literal["FREE", "FLAT_RATE", "PER_UNIT"]] = Field(
        default=UNSET
    )
    unit_name: Missing[Union[str, None]] = Field(default=UNSET)
    yearly_price_in_cents: Missing[int] = Field(default=UNSET)


class WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseMergedAccount(
    GitHubModel
):
    """WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseMergedAccount"""

    id: int = Field()
    login: str = Field()
    node_id: str = Field()
    organization_billing_email: Union[Union[str, None], None] = Field()
    type: str = Field()


class WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseMergedPlan(GitHubModel):
    """WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseMergedPlan"""

    bullets: List[str] = Field()
    description: str = Field()
    has_free_trial: bool = Field()
    id: int = Field()
    monthly_price_in_cents: int = Field()
    name: str = Field()
    price_model: Literal["FREE", "FLAT_RATE", "PER_UNIT"] = Field()
    unit_name: Union[Union[str, None], None] = Field()
    yearly_price_in_cents: int = Field()


class WebhookMarketplacePurchasePurchasedPropPreviousMarketplacePurchase(GitHubModel):
    """Marketplace Purchase"""

    account: WebhookMarketplacePurchasePurchasedPropPreviousMarketplacePurchasePropAccount = (
        Field()
    )
    billing_cycle: str = Field()
    free_trial_ends_on: None = Field()
    next_billing_date: Missing[Union[str, None]] = Field(default=UNSET)
    on_free_trial: bool = Field()
    plan: WebhookMarketplacePurchasePurchasedPropPreviousMarketplacePurchasePropPlan = (
        Field()
    )
    unit_count: int = Field()


class WebhookMarketplacePurchasePurchasedPropPreviousMarketplacePurchasePropAccount(
    GitHubModel
):
    """WebhookMarketplacePurchasePurchasedPropPreviousMarketplacePurchasePropAccount"""

    id: int = Field()
    login: str = Field()
    node_id: str = Field()
    organization_billing_email: Union[str, None] = Field()
    type: str = Field()


class WebhookMarketplacePurchasePurchasedPropPreviousMarketplacePurchasePropPlan(
    GitHubModel
):
    """WebhookMarketplacePurchasePurchasedPropPreviousMarketplacePurchasePropPlan"""

    bullets: List[str] = Field()
    description: str = Field()
    has_free_trial: bool = Field()
    id: int = Field()
    monthly_price_in_cents: int = Field()
    name: str = Field()
    price_model: Literal["FREE", "FLAT_RATE", "PER_UNIT"] = Field()
    unit_name: Union[str, None] = Field()
    yearly_price_in_cents: int = Field()


class WebhookMemberAdded(GitHubModel):
    """member added event"""

    action: Literal["added"] = Field()
    changes: Missing[WebhookMemberAddedPropChanges] = Field(default=UNSET)
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    member: Union[WebhookMemberAddedPropMember, None] = Field(title="User")
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookMemberAddedPropChanges(GitHubModel):
    """WebhookMemberAddedPropChanges"""

    permission: Missing[WebhookMemberAddedPropChangesPropPermission] = Field(
        default=UNSET
    )


class WebhookMemberAddedPropChangesPropPermission(GitHubModel):
    """WebhookMemberAddedPropChangesPropPermission"""

    to: Literal["write", "admin", "read"] = Field()


class WebhookMemberAddedPropMember(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookMemberEdited(GitHubModel):
    """member edited event"""

    action: Literal["edited"] = Field()
    changes: WebhookMemberEditedPropChanges = Field(
        description="The changes to the collaborator permissions"
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    member: Union[WebhookMemberEditedPropMember, None] = Field(title="User")
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookMemberEditedPropChanges(GitHubModel):
    """WebhookMemberEditedPropChanges

    The changes to the collaborator permissions
    """

    old_permission: Missing[WebhookMemberEditedPropChangesPropOldPermission] = Field(
        default=UNSET
    )
    permission: Missing[WebhookMemberEditedPropChangesPropPermission] = Field(
        default=UNSET
    )


class WebhookMemberEditedPropChangesPropOldPermission(GitHubModel):
    """WebhookMemberEditedPropChangesPropOldPermission"""

    from_: str = Field(
        alias="from",
        description="The previous permissions of the collaborator if the action was edited.",
    )


class WebhookMemberEditedPropChangesPropPermission(GitHubModel):
    """WebhookMemberEditedPropChangesPropPermission"""

    from_: Missing[Union[str, None]] = Field(default=UNSET, alias="from")
    to: Missing[Union[str, None]] = Field(default=UNSET)


class WebhookMemberEditedPropMember(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookMemberRemoved(GitHubModel):
    """member removed event"""

    action: Literal["removed"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    member: Union[WebhookMemberRemovedPropMember, None] = Field(title="User")
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookMemberRemovedPropMember(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookMembershipAdded(GitHubModel):
    """membership added event"""

    action: Literal["added"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    member: Union[WebhookMembershipAddedPropMember, None] = Field(title="User")
    organization: OrganizationSimpleWebhooks = Field(
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    scope: Literal["team"] = Field(
        description="The scope of the membership. Currently, can only be `team`."
    )
    sender: Union[WebhookMembershipAddedPropSender, None] = Field(title="User")
    team: WebhookMembershipAddedPropTeam = Field(
        title="Team",
        description="Groups of organization members that gives permissions on specified repositories.",
    )


class WebhookMembershipAddedPropMember(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookMembershipAddedPropSender(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookMembershipAddedPropTeam(GitHubModel):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Description of the team"
    )
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field(description="Unique identifier of the team")
    members_url: Missing[str] = Field(default=UNSET)
    name: str = Field(description="Name of the team")
    node_id: Missing[str] = Field(default=UNSET)
    parent: Missing[Union[WebhookMembershipAddedPropTeamPropParent, None]] = Field(
        default=UNSET
    )
    permission: Missing[str] = Field(
        default=UNSET,
        description="Permission that the team will have for its repositories",
    )
    privacy: Missing[Literal["open", "closed", "secret"]] = Field(default=UNSET)
    notification_setting: Missing[
        Literal["notifications_enabled", "notifications_disabled"]
    ] = Field(default=UNSET)
    repositories_url: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET, description="URL for the team")


class WebhookMembershipAddedPropTeamPropParent(GitHubModel):
    """WebhookMembershipAddedPropTeamPropParent"""

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    notification_setting: Literal[
        "notifications_enabled", "notifications_disabled"
    ] = Field(
        description="Whether team members will receive notifications when their team is @mentioned"
    )
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookMembershipRemoved(GitHubModel):
    """membership removed event"""

    action: Literal["removed"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    member: Union[WebhookMembershipRemovedPropMember, None] = Field(title="User")
    organization: OrganizationSimpleWebhooks = Field(
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    scope: Literal["team", "organization"] = Field(
        description="The scope of the membership. Currently, can only be `team`."
    )
    sender: Union[WebhookMembershipRemovedPropSender, None] = Field(title="User")
    team: WebhookMembershipRemovedPropTeam = Field(
        title="Team",
        description="Groups of organization members that gives permissions on specified repositories.",
    )


class WebhookMembershipRemovedPropMember(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookMembershipRemovedPropSender(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookMembershipRemovedPropTeam(GitHubModel):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Description of the team"
    )
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field(description="Unique identifier of the team")
    members_url: Missing[str] = Field(default=UNSET)
    name: str = Field(description="Name of the team")
    node_id: Missing[str] = Field(default=UNSET)
    parent: Missing[Union[WebhookMembershipRemovedPropTeamPropParent, None]] = Field(
        default=UNSET
    )
    permission: Missing[str] = Field(
        default=UNSET,
        description="Permission that the team will have for its repositories",
    )
    privacy: Missing[Literal["open", "closed", "secret"]] = Field(default=UNSET)
    notification_setting: Missing[
        Literal["notifications_enabled", "notifications_disabled"]
    ] = Field(default=UNSET)
    repositories_url: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET, description="URL for the team")


class WebhookMembershipRemovedPropTeamPropParent(GitHubModel):
    """WebhookMembershipRemovedPropTeamPropParent"""

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    notification_setting: Literal[
        "notifications_enabled", "notifications_disabled"
    ] = Field(
        description="Whether team members will receive notifications when their team is @mentioned"
    )
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookMergeGroupChecksRequested(GitHubModel):
    """WebhookMergeGroupChecksRequested"""

    action: Literal["checks_requested"] = Field()
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    merge_group: MergeGroup = Field(
        title="Merge Group",
        description="A group of pull requests that the merge queue has grouped together to be merged.\n",
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: Missing[SimpleUserWebhooks] = Field(
        default=UNSET,
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookMergeGroupDestroyed(GitHubModel):
    """WebhookMergeGroupDestroyed"""

    action: Literal["destroyed"] = Field()
    reason: Missing[Literal["merged", "invalidated", "dequeued"]] = Field(
        default=UNSET,
        description="Explains why the merge group is being destroyed. The group could have been merged, removed from the queue (dequeued), or invalidated by an earlier queue entry being dequeued (invalidated).",
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    merge_group: MergeGroup = Field(
        title="Merge Group",
        description="A group of pull requests that the merge queue has grouped together to be merged.\n",
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: Missing[SimpleUserWebhooks] = Field(
        default=UNSET,
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookMetaDeleted(GitHubModel):
    """meta deleted event"""

    action: Literal["deleted"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    hook: WebhookMetaDeletedPropHook = Field(
        description="The modified webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace."
    )
    hook_id: int = Field(description="The id of the modified webhook.")
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: Missing[Union[None, RepositoryWebhooks]] = Field(default=UNSET)
    sender: Missing[SimpleUserWebhooks] = Field(
        default=UNSET,
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookMetaDeletedPropHook(GitHubModel):
    """WebhookMetaDeletedPropHook

    The modified webhook. This will contain different keys based on the type of
    webhook it is: repository, organization, business, app, or GitHub Marketplace.
    """

    active: bool = Field()
    config: WebhookMetaDeletedPropHookPropConfig = Field()
    created_at: str = Field()
    events: List[
        Literal[
            "*",
            "branch_protection_rule",
            "check_run",
            "check_suite",
            "code_scanning_alert",
            "commit_comment",
            "create",
            "delete",
            "deployment",
            "deployment_status",
            "deploy_key",
            "discussion",
            "discussion_comment",
            "fork",
            "gollum",
            "issues",
            "issue_comment",
            "label",
            "member",
            "membership",
            "meta",
            "milestone",
            "organization",
            "org_block",
            "package",
            "page_build",
            "project",
            "project_card",
            "project_column",
            "public",
            "pull_request",
            "pull_request_review",
            "pull_request_review_comment",
            "pull_request_review_thread",
            "push",
            "registry_package",
            "release",
            "repository",
            "repository_import",
            "repository_vulnerability_alert",
            "secret_scanning_alert",
            "secret_scanning_alert_location",
            "security_and_analysis",
            "star",
            "status",
            "team",
            "team_add",
            "watch",
            "workflow_job",
            "workflow_run",
            "repository_dispatch",
            "projects_v2_item",
        ]
    ] = Field()
    id: int = Field()
    name: str = Field()
    type: str = Field()
    updated_at: str = Field()


class WebhookMetaDeletedPropHookPropConfig(GitHubModel):
    """WebhookMetaDeletedPropHookPropConfig"""

    content_type: Literal["json", "form"] = Field()
    insecure_ssl: str = Field()
    secret: Missing[str] = Field(default=UNSET)
    url: str = Field()


class WebhookMilestoneClosed(GitHubModel):
    """milestone closed event"""

    action: Literal["closed"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    milestone: WebhookMilestoneClosedPropMilestone = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookMilestoneClosedPropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[WebhookMilestoneClosedPropMilestonePropCreator, None] = Field(
        title="User"
    )
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookMilestoneClosedPropMilestonePropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookMilestoneCreated(GitHubModel):
    """milestone created event"""

    action: Literal["created"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    milestone: WebhookMilestoneCreatedPropMilestone = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookMilestoneCreatedPropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[WebhookMilestoneCreatedPropMilestonePropCreator, None] = Field(
        title="User"
    )
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookMilestoneCreatedPropMilestonePropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookMilestoneDeleted(GitHubModel):
    """milestone deleted event"""

    action: Literal["deleted"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    milestone: WebhookMilestoneDeletedPropMilestone = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookMilestoneDeletedPropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[WebhookMilestoneDeletedPropMilestonePropCreator, None] = Field(
        title="User"
    )
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookMilestoneDeletedPropMilestonePropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookMilestoneEdited(GitHubModel):
    """milestone edited event"""

    action: Literal["edited"] = Field()
    changes: WebhookMilestoneEditedPropChanges = Field(
        description="The changes to the milestone if the action was `edited`."
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    milestone: WebhookMilestoneEditedPropMilestone = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookMilestoneEditedPropChanges(GitHubModel):
    """WebhookMilestoneEditedPropChanges

    The changes to the milestone if the action was `edited`.
    """

    description: Missing[WebhookMilestoneEditedPropChangesPropDescription] = Field(
        default=UNSET
    )
    due_on: Missing[WebhookMilestoneEditedPropChangesPropDueOn] = Field(default=UNSET)
    title: Missing[WebhookMilestoneEditedPropChangesPropTitle] = Field(default=UNSET)


class WebhookMilestoneEditedPropChangesPropDescription(GitHubModel):
    """WebhookMilestoneEditedPropChangesPropDescription"""

    from_: str = Field(
        alias="from",
        description="The previous version of the description if the action was `edited`.",
    )


class WebhookMilestoneEditedPropChangesPropDueOn(GitHubModel):
    """WebhookMilestoneEditedPropChangesPropDueOn"""

    from_: str = Field(
        alias="from",
        description="The previous version of the due date if the action was `edited`.",
    )


class WebhookMilestoneEditedPropChangesPropTitle(GitHubModel):
    """WebhookMilestoneEditedPropChangesPropTitle"""

    from_: str = Field(
        alias="from",
        description="The previous version of the title if the action was `edited`.",
    )


class WebhookMilestoneEditedPropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[WebhookMilestoneEditedPropMilestonePropCreator, None] = Field(
        title="User"
    )
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookMilestoneEditedPropMilestonePropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookMilestoneOpened(GitHubModel):
    """milestone opened event"""

    action: Literal["opened"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    milestone: WebhookMilestoneOpenedPropMilestone = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookMilestoneOpenedPropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[WebhookMilestoneOpenedPropMilestonePropCreator, None] = Field(
        title="User"
    )
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookMilestoneOpenedPropMilestonePropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookOrgBlockBlocked(GitHubModel):
    """org_block blocked event"""

    action: Literal["blocked"] = Field()
    blocked_user: Union[WebhookOrgBlockBlockedPropBlockedUser, None] = Field(
        title="User"
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: OrganizationSimpleWebhooks = Field(
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookOrgBlockBlockedPropBlockedUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookOrgBlockUnblocked(GitHubModel):
    """org_block unblocked event"""

    action: Literal["unblocked"] = Field()
    blocked_user: Union[WebhookOrgBlockUnblockedPropBlockedUser, None] = Field(
        title="User"
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: OrganizationSimpleWebhooks = Field(
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookOrgBlockUnblockedPropBlockedUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookOrganizationDeleted(GitHubModel):
    """organization deleted event"""

    action: Literal["deleted"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    membership: Missing[WebhookOrganizationDeletedPropMembership] = Field(
        default=UNSET,
        title="Membership",
        description="The membership between the user and the organization. Not present when the action is `member_invited`.",
    )
    organization: OrganizationSimpleWebhooks = Field(
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookOrganizationDeletedPropMembership(GitHubModel):
    """Membership

    The membership between the user and the organization. Not present when the
    action is `member_invited`.
    """

    organization_url: str = Field()
    role: str = Field()
    state: str = Field()
    url: str = Field()
    user: Union[WebhookOrganizationDeletedPropMembershipPropUser, None] = Field(
        title="User"
    )


class WebhookOrganizationDeletedPropMembershipPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookOrganizationMemberAdded(GitHubModel):
    """organization member_added event"""

    action: Literal["member_added"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    membership: WebhookOrganizationMemberAddedPropMembership = Field(
        title="Membership",
        description="The membership between the user and the organization. Not present when the action is `member_invited`.",
    )
    organization: OrganizationSimpleWebhooks = Field(
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookOrganizationMemberAddedPropMembership(GitHubModel):
    """Membership

    The membership between the user and the organization. Not present when the
    action is `member_invited`.
    """

    organization_url: str = Field()
    role: str = Field()
    state: str = Field()
    url: str = Field()
    user: Union[WebhookOrganizationMemberAddedPropMembershipPropUser, None] = Field(
        title="User"
    )


class WebhookOrganizationMemberAddedPropMembershipPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookOrganizationMemberInvited(GitHubModel):
    """organization member_invited event"""

    action: Literal["member_invited"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    invitation: WebhookOrganizationMemberInvitedPropInvitation = Field(
        description="The invitation for the user or email if the action is `member_invited`."
    )
    organization: OrganizationSimpleWebhooks = Field(
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )
    user: Missing[Union[WebhookOrganizationMemberInvitedPropUser, None]] = Field(
        default=UNSET, title="User"
    )


class WebhookOrganizationMemberInvitedPropInvitation(GitHubModel):
    """WebhookOrganizationMemberInvitedPropInvitation

    The invitation for the user or email if the action is `member_invited`.
    """

    created_at: datetime = Field()
    email: Union[str, None] = Field()
    failed_at: Union[datetime, None] = Field()
    failed_reason: Union[str, None] = Field()
    id: float = Field()
    invitation_teams_url: str = Field()
    inviter: Union[
        WebhookOrganizationMemberInvitedPropInvitationPropInviter, None
    ] = Field(title="User")
    login: Union[str, None] = Field()
    node_id: str = Field()
    role: str = Field()
    team_count: float = Field()
    invitation_source: Missing[str] = Field(default=UNSET)


class WebhookOrganizationMemberInvitedPropInvitationPropInviter(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookOrganizationMemberInvitedPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookOrganizationMemberRemoved(GitHubModel):
    """organization member_removed event"""

    action: Literal["member_removed"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    membership: WebhookOrganizationMemberRemovedPropMembership = Field(
        title="Membership",
        description="The membership between the user and the organization. Not present when the action is `member_invited`.",
    )
    organization: OrganizationSimpleWebhooks = Field(
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookOrganizationMemberRemovedPropMembership(GitHubModel):
    """Membership

    The membership between the user and the organization. Not present when the
    action is `member_invited`.
    """

    organization_url: str = Field()
    role: str = Field()
    state: str = Field()
    url: str = Field()
    user: Union[WebhookOrganizationMemberRemovedPropMembershipPropUser, None] = Field(
        title="User"
    )


class WebhookOrganizationMemberRemovedPropMembershipPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookOrganizationRenamed(GitHubModel):
    """organization renamed event"""

    action: Literal["renamed"] = Field()
    changes: Missing[WebhookOrganizationRenamedPropChanges] = Field(default=UNSET)
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    membership: Missing[WebhookOrganizationRenamedPropMembership] = Field(
        default=UNSET,
        title="Membership",
        description="The membership between the user and the organization. Not present when the action is `member_invited`.",
    )
    organization: OrganizationSimpleWebhooks = Field(
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookOrganizationRenamedPropChanges(GitHubModel):
    """WebhookOrganizationRenamedPropChanges"""

    login: Missing[WebhookOrganizationRenamedPropChangesPropLogin] = Field(
        default=UNSET
    )


class WebhookOrganizationRenamedPropChangesPropLogin(GitHubModel):
    """WebhookOrganizationRenamedPropChangesPropLogin"""

    from_: Missing[str] = Field(default=UNSET, alias="from")


class WebhookOrganizationRenamedPropMembership(GitHubModel):
    """Membership

    The membership between the user and the organization. Not present when the
    action is `member_invited`.
    """

    organization_url: str = Field()
    role: str = Field()
    state: str = Field()
    url: str = Field()
    user: Union[WebhookOrganizationRenamedPropMembershipPropUser, None] = Field(
        title="User"
    )


class WebhookOrganizationRenamedPropMembershipPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookRubygemsMetadata(GitHubModel):
    """Ruby Gems metadata"""

    name: Missing[str] = Field(default=UNSET)
    description: Missing[str] = Field(default=UNSET)
    readme: Missing[str] = Field(default=UNSET)
    homepage: Missing[str] = Field(default=UNSET)
    version_info: Missing[WebhookRubygemsMetadataPropVersionInfo] = Field(default=UNSET)
    platform: Missing[str] = Field(default=UNSET)
    metadata: Missing[WebhookRubygemsMetadataPropMetadata] = Field(default=UNSET)
    repo: Missing[str] = Field(default=UNSET)
    dependencies: Missing[List[WebhookRubygemsMetadataPropDependenciesItems]] = Field(
        default=UNSET
    )
    commit_oid: Missing[str] = Field(default=UNSET)


class WebhookRubygemsMetadataPropVersionInfo(GitHubModel):
    """WebhookRubygemsMetadataPropVersionInfo"""

    version: Missing[str] = Field(default=UNSET)


class WebhookRubygemsMetadataPropMetadata(ExtraGitHubModel):
    """WebhookRubygemsMetadataPropMetadata"""


class WebhookRubygemsMetadataPropDependenciesItems(ExtraGitHubModel):
    """WebhookRubygemsMetadataPropDependenciesItems"""


class WebhookPackagePublished(GitHubModel):
    """package published event"""

    action: Literal["published"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    package: WebhookPackagePublishedPropPackage = Field(
        description="Information about the package."
    )
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookPackagePublishedPropPackage(GitHubModel):
    """WebhookPackagePublishedPropPackage

    Information about the package.
    """

    created_at: Union[str, None] = Field()
    description: Union[str, None] = Field()
    ecosystem: str = Field()
    html_url: str = Field()
    id: int = Field()
    name: str = Field()
    namespace: str = Field()
    owner: Union[WebhookPackagePublishedPropPackagePropOwner, None] = Field(
        title="User"
    )
    package_type: str = Field()
    package_version: Union[
        WebhookPackagePublishedPropPackagePropPackageVersion, None
    ] = Field()
    registry: Union[WebhookPackagePublishedPropPackagePropRegistry, None] = Field()
    updated_at: Union[str, None] = Field()


class WebhookPackagePublishedPropPackagePropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPackagePublishedPropPackagePropPackageVersionPropAuthor(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPackagePublishedPropPackagePropPackageVersionPropBodyOneof1(GitHubModel):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropBodyOneof1"""


class WebhookPackagePublishedPropPackagePropPackageVersionPropContainerMetadataPropLabels(
    GitHubModel
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropContainerMetadataPropLab
    els
    """


class WebhookPackagePublishedPropPackagePropPackageVersionPropContainerMetadataPropManifest(
    GitHubModel
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropContainerMetadataPropMan
    ifest
    """


class WebhookPackagePublishedPropPackagePropPackageVersionPropContainerMetadataPropTag(
    GitHubModel
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropContainerMetadataPropTag"""

    digest: Missing[str] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)


class WebhookPackagePublishedPropPackagePropPackageVersionPropContainerMetadata(
    GitHubModel
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropContainerMetadata"""

    labels: Missing[
        Union[
            WebhookPackagePublishedPropPackagePropPackageVersionPropContainerMetadataPropLabels,
            None,
        ]
    ] = Field(default=UNSET)
    manifest: Missing[
        Union[
            WebhookPackagePublishedPropPackagePropPackageVersionPropContainerMetadataPropManifest,
            None,
        ]
    ] = Field(default=UNSET)
    tag: Missing[
        WebhookPackagePublishedPropPackagePropPackageVersionPropContainerMetadataPropTag
    ] = Field(default=UNSET)


class WebhookPackagePublishedPropPackagePropPackageVersionPropDockerMetadataItems(
    GitHubModel
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropDockerMetadataItems"""

    tags: Missing[List[str]] = Field(default=UNSET)


class WebhookPackagePublishedPropPackagePropPackageVersionPropMetadataItems(
    ExtraGitHubModel
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropMetadataItems"""


class WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropAuthor(
    GitHubModel
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropAuthor"""


class WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropBugs(
    GitHubModel
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropBugs"""


class WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropDependencies(
    GitHubModel
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropDependenc
    ies
    """


class WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropDevDependencies(
    GitHubModel
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropDevDepend
    encies
    """


class WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropPeerDependencies(
    GitHubModel
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropPeerDepen
    dencies
    """


class WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropOptionalDependencies(
    GitHubModel
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropOptionalD
    ependencies
    """


class WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropDist(
    GitHubModel
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropDist"""


class WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropRepository(
    GitHubModel
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropRepositor
    y
    """


class WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropScripts(
    GitHubModel
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropScripts"""


class WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropMaintainersItems(
    GitHubModel
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropMaintaine
    rsItems
    """


class WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropContributorsItems(
    GitHubModel
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropContribut
    orsItems
    """


class WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropEngines(
    GitHubModel
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropEngines"""


class WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropBin(
    GitHubModel
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropBin"""


class WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropMan(
    GitHubModel
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropMan"""


class WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropDirectories(
    GitHubModel
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropDirectori
    es
    """


class WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadata(GitHubModel):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadata"""

    name: Missing[str] = Field(default=UNSET)
    version: Missing[str] = Field(default=UNSET)
    npm_user: Missing[str] = Field(default=UNSET)
    author: Missing[
        Union[
            WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropAuthor,
            None,
        ]
    ] = Field(default=UNSET)
    bugs: Missing[
        Union[
            WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropBugs,
            None,
        ]
    ] = Field(default=UNSET)
    dependencies: Missing[
        WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropDependencies
    ] = Field(default=UNSET)
    dev_dependencies: Missing[
        WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropDevDependencies
    ] = Field(default=UNSET)
    peer_dependencies: Missing[
        WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropPeerDependencies
    ] = Field(default=UNSET)
    optional_dependencies: Missing[
        WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropOptionalDependencies
    ] = Field(default=UNSET)
    description: Missing[str] = Field(default=UNSET)
    dist: Missing[
        Union[
            WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropDist,
            None,
        ]
    ] = Field(default=UNSET)
    git_head: Missing[str] = Field(default=UNSET)
    homepage: Missing[str] = Field(default=UNSET)
    license_: Missing[str] = Field(default=UNSET, alias="license")
    main: Missing[str] = Field(default=UNSET)
    repository: Missing[
        Union[
            WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropRepository,
            None,
        ]
    ] = Field(default=UNSET)
    scripts: Missing[
        WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropScripts
    ] = Field(default=UNSET)
    id: Missing[str] = Field(default=UNSET)
    node_version: Missing[str] = Field(default=UNSET)
    npm_version: Missing[str] = Field(default=UNSET)
    has_shrinkwrap: Missing[bool] = Field(default=UNSET)
    maintainers: Missing[
        List[
            WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropMaintainersItems
        ]
    ] = Field(default=UNSET)
    contributors: Missing[
        List[
            WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropContributorsItems
        ]
    ] = Field(default=UNSET)
    engines: Missing[
        WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropEngines
    ] = Field(default=UNSET)
    keywords: Missing[List[str]] = Field(default=UNSET)
    files: Missing[List[str]] = Field(default=UNSET)
    bin_: Missing[
        WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropBin
    ] = Field(default=UNSET, alias="bin")
    man: Missing[
        WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropMan
    ] = Field(default=UNSET)
    directories: Missing[
        Union[
            WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropDirectories,
            None,
        ]
    ] = Field(default=UNSET)
    os: Missing[List[str]] = Field(default=UNSET)
    cpu: Missing[List[str]] = Field(default=UNSET)
    readme: Missing[str] = Field(default=UNSET)
    installation_command: Missing[str] = Field(default=UNSET)
    release_id: Missing[int] = Field(default=UNSET)
    commit_oid: Missing[str] = Field(default=UNSET)
    published_via_actions: Missing[bool] = Field(default=UNSET)
    deleted_by_id: Missing[int] = Field(default=UNSET)


class WebhookPackagePublishedPropPackagePropPackageVersionPropNugetMetadataItems(
    GitHubModel
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropNugetMetadataItems"""

    id: Missing[Union[int, str]] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    value: Missing[
        Union[
            bool,
            str,
            int,
            WebhookPackagePublishedPropPackagePropPackageVersionPropNugetMetadataItemsPropValueOneof3,
        ]
    ] = Field(default=UNSET)


class WebhookPackagePublishedPropPackagePropPackageVersionPropNugetMetadataItemsPropValueOneof3(
    GitHubModel
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropNugetMetadataItemsPropVa
    lueOneof3
    """

    url: Missing[str] = Field(default=UNSET)
    branch: Missing[str] = Field(default=UNSET)
    commit: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)


class WebhookPackagePublishedPropPackagePropPackageVersionPropPackageFilesItems(
    GitHubModel
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropPackageFilesItems"""

    content_type: str = Field()
    created_at: str = Field()
    download_url: str = Field()
    id: int = Field()
    md5: Union[str, None] = Field()
    name: str = Field()
    sha1: Union[str, None] = Field()
    sha256: Union[str, None] = Field()
    size: int = Field()
    state: Union[str, None] = Field()
    updated_at: str = Field()


class WebhookPackagePublishedPropPackagePropPackageVersionPropRelease(GitHubModel):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropRelease"""

    author: Union[
        WebhookPackagePublishedPropPackagePropPackageVersionPropReleasePropAuthor, None
    ] = Field(title="User")
    created_at: str = Field()
    draft: bool = Field()
    html_url: str = Field()
    id: int = Field()
    name: Union[str, None] = Field()
    prerelease: bool = Field()
    published_at: str = Field()
    tag_name: str = Field()
    target_commitish: str = Field()
    url: str = Field()


class WebhookPackagePublishedPropPackagePropPackageVersionPropReleasePropAuthor(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPackagePublishedPropPackagePropPackageVersion(GitHubModel):
    """WebhookPackagePublishedPropPackagePropPackageVersion"""

    author: Missing[
        Union[WebhookPackagePublishedPropPackagePropPackageVersionPropAuthor, None]
    ] = Field(default=UNSET, title="User")
    body: Missing[
        Union[str, WebhookPackagePublishedPropPackagePropPackageVersionPropBodyOneof1]
    ] = Field(default=UNSET)
    body_html: Missing[str] = Field(default=UNSET)
    container_metadata: Missing[
        Union[
            WebhookPackagePublishedPropPackagePropPackageVersionPropContainerMetadata,
            None,
        ]
    ] = Field(default=UNSET)
    created_at: Missing[str] = Field(default=UNSET)
    description: str = Field()
    docker_metadata: Missing[
        List[
            WebhookPackagePublishedPropPackagePropPackageVersionPropDockerMetadataItems
        ]
    ] = Field(default=UNSET)
    draft: Missing[bool] = Field(default=UNSET)
    html_url: str = Field()
    id: int = Field()
    installation_command: str = Field()
    manifest: Missing[str] = Field(default=UNSET)
    metadata: List[
        WebhookPackagePublishedPropPackagePropPackageVersionPropMetadataItems
    ] = Field()
    name: str = Field()
    npm_metadata: Missing[
        Union[WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadata, None]
    ] = Field(default=UNSET)
    nuget_metadata: Missing[
        Union[
            List[
                WebhookPackagePublishedPropPackagePropPackageVersionPropNugetMetadataItems
            ],
            None,
        ]
    ] = Field(default=UNSET)
    package_files: List[
        WebhookPackagePublishedPropPackagePropPackageVersionPropPackageFilesItems
    ] = Field()
    package_url: Missing[str] = Field(default=UNSET)
    prerelease: Missing[bool] = Field(default=UNSET)
    release: Missing[
        WebhookPackagePublishedPropPackagePropPackageVersionPropRelease
    ] = Field(default=UNSET)
    rubygems_metadata: Missing[List[WebhookRubygemsMetadata]] = Field(default=UNSET)
    source_url: Missing[str] = Field(default=UNSET)
    summary: str = Field()
    tag_name: Missing[str] = Field(default=UNSET)
    target_commitish: Missing[str] = Field(default=UNSET)
    target_oid: Missing[str] = Field(default=UNSET)
    updated_at: Missing[str] = Field(default=UNSET)
    version: str = Field()


class WebhookPackagePublishedPropPackagePropRegistry(GitHubModel):
    """WebhookPackagePublishedPropPackagePropRegistry"""

    about_url: str = Field()
    name: str = Field()
    type: str = Field()
    url: str = Field()
    vendor: str = Field()


class WebhookPackageUpdated(GitHubModel):
    """package updated event"""

    action: Literal["updated"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    package: WebhookPackageUpdatedPropPackage = Field(
        description="Information about the package."
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookPackageUpdatedPropPackage(GitHubModel):
    """WebhookPackageUpdatedPropPackage

    Information about the package.
    """

    created_at: str = Field()
    description: Union[str, None] = Field()
    ecosystem: str = Field()
    html_url: str = Field()
    id: int = Field()
    name: str = Field()
    namespace: str = Field()
    owner: Union[WebhookPackageUpdatedPropPackagePropOwner, None] = Field(title="User")
    package_type: str = Field()
    package_version: WebhookPackageUpdatedPropPackagePropPackageVersion = Field()
    registry: Union[WebhookPackageUpdatedPropPackagePropRegistry, None] = Field()
    updated_at: str = Field()


class WebhookPackageUpdatedPropPackagePropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPackageUpdatedPropPackagePropPackageVersion(GitHubModel):
    """WebhookPackageUpdatedPropPackagePropPackageVersion"""

    author: Union[
        WebhookPackageUpdatedPropPackagePropPackageVersionPropAuthor, None
    ] = Field(title="User")
    body: str = Field()
    body_html: str = Field()
    created_at: str = Field()
    description: str = Field()
    docker_metadata: Missing[
        List[WebhookPackageUpdatedPropPackagePropPackageVersionPropDockerMetadataItems]
    ] = Field(default=UNSET)
    draft: Missing[bool] = Field(default=UNSET)
    html_url: str = Field()
    id: int = Field()
    installation_command: str = Field()
    manifest: Missing[str] = Field(default=UNSET)
    metadata: List[
        WebhookPackageUpdatedPropPackagePropPackageVersionPropMetadataItems
    ] = Field()
    name: str = Field()
    package_files: List[
        WebhookPackageUpdatedPropPackagePropPackageVersionPropPackageFilesItems
    ] = Field()
    package_url: Missing[str] = Field(default=UNSET)
    prerelease: Missing[bool] = Field(default=UNSET)
    release: Missing[
        WebhookPackageUpdatedPropPackagePropPackageVersionPropRelease
    ] = Field(default=UNSET)
    rubygems_metadata: Missing[List[WebhookRubygemsMetadata]] = Field(default=UNSET)
    source_url: Missing[str] = Field(default=UNSET)
    summary: str = Field()
    tag_name: Missing[str] = Field(default=UNSET)
    target_commitish: str = Field()
    target_oid: str = Field()
    updated_at: str = Field()
    version: str = Field()


class WebhookPackageUpdatedPropPackagePropPackageVersionPropAuthor(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPackageUpdatedPropPackagePropPackageVersionPropDockerMetadataItems(
    GitHubModel
):
    """WebhookPackageUpdatedPropPackagePropPackageVersionPropDockerMetadataItems"""

    tags: Missing[List[str]] = Field(default=UNSET)


class WebhookPackageUpdatedPropPackagePropPackageVersionPropMetadataItems(
    ExtraGitHubModel
):
    """WebhookPackageUpdatedPropPackagePropPackageVersionPropMetadataItems"""


class WebhookPackageUpdatedPropPackagePropPackageVersionPropPackageFilesItems(
    GitHubModel
):
    """WebhookPackageUpdatedPropPackagePropPackageVersionPropPackageFilesItems"""

    content_type: str = Field()
    created_at: str = Field()
    download_url: str = Field()
    id: int = Field()
    md5: Union[str, None] = Field()
    name: str = Field()
    sha1: Union[str, None] = Field()
    sha256: str = Field()
    size: int = Field()
    state: str = Field()
    updated_at: str = Field()


class WebhookPackageUpdatedPropPackagePropPackageVersionPropRelease(GitHubModel):
    """WebhookPackageUpdatedPropPackagePropPackageVersionPropRelease"""

    author: Union[
        WebhookPackageUpdatedPropPackagePropPackageVersionPropReleasePropAuthor, None
    ] = Field(title="User")
    created_at: str = Field()
    draft: bool = Field()
    html_url: str = Field()
    id: int = Field()
    name: str = Field()
    prerelease: bool = Field()
    published_at: str = Field()
    tag_name: str = Field()
    target_commitish: str = Field()
    url: str = Field()


class WebhookPackageUpdatedPropPackagePropPackageVersionPropReleasePropAuthor(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPackageUpdatedPropPackagePropRegistry(GitHubModel):
    """WebhookPackageUpdatedPropPackagePropRegistry"""

    about_url: str = Field()
    name: str = Field()
    type: str = Field()
    url: str = Field()
    vendor: str = Field()


class WebhookPageBuild(GitHubModel):
    """page_build event"""

    build: WebhookPageBuildPropBuild = Field(
        description="The [List GitHub Pages builds](https://docs.github.com/rest/pages/pages#list-github-pages-builds) itself."
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    id: int = Field()
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookPageBuildPropBuild(GitHubModel):
    """WebhookPageBuildPropBuild

    The [List GitHub Pages builds](https://docs.github.com/rest/pages/pages#list-
    github-pages-builds) itself.
    """

    commit: Union[str, None] = Field()
    created_at: str = Field()
    duration: int = Field()
    error: WebhookPageBuildPropBuildPropError = Field()
    pusher: Union[WebhookPageBuildPropBuildPropPusher, None] = Field(title="User")
    status: str = Field()
    updated_at: str = Field()
    url: str = Field()


class WebhookPageBuildPropBuildPropError(GitHubModel):
    """WebhookPageBuildPropBuildPropError"""

    message: Union[str, None] = Field()


class WebhookPageBuildPropBuildPropPusher(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPersonalAccessTokenRequestApproved(GitHubModel):
    """personal_access_token_request approved event"""

    action: Literal["approved"] = Field()
    personal_access_token_request: PersonalAccessTokenRequest = Field(
        title="Personal Access Token Request",
        description="Details of a Personal Access Token Request.",
    )
    organization: OrganizationSimpleWebhooks = Field(
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )
    installation: SimpleInstallation = Field(
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )


class WebhookPersonalAccessTokenRequestCancelled(GitHubModel):
    """personal_access_token_request cancelled event"""

    action: Literal["cancelled"] = Field()
    personal_access_token_request: PersonalAccessTokenRequest = Field(
        title="Personal Access Token Request",
        description="Details of a Personal Access Token Request.",
    )
    organization: OrganizationSimpleWebhooks = Field(
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )
    installation: SimpleInstallation = Field(
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )


class WebhookPersonalAccessTokenRequestCreated(GitHubModel):
    """personal_access_token_request created event"""

    action: Literal["created"] = Field()
    personal_access_token_request: PersonalAccessTokenRequest = Field(
        title="Personal Access Token Request",
        description="Details of a Personal Access Token Request.",
    )
    organization: OrganizationSimpleWebhooks = Field(
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )
    installation: SimpleInstallation = Field(
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )


class WebhookPersonalAccessTokenRequestDenied(GitHubModel):
    """personal_access_token_request denied event"""

    action: Literal["denied"] = Field()
    personal_access_token_request: PersonalAccessTokenRequest = Field(
        title="Personal Access Token Request",
        description="Details of a Personal Access Token Request.",
    )
    organization: OrganizationSimpleWebhooks = Field(
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )
    installation: SimpleInstallation = Field(
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )


class WebhookPing(GitHubModel):
    """WebhookPing"""

    hook: Missing[WebhookPingPropHook] = Field(
        default=UNSET, title="Webhook", description="The webhook that is being pinged"
    )
    hook_id: Missing[int] = Field(
        default=UNSET, description="The ID of the webhook that triggered the ping."
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: Missing[SimpleUserWebhooks] = Field(
        default=UNSET,
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )
    zen: Missing[str] = Field(default=UNSET, description="Random string of GitHub zen.")


class WebhookPingPropHook(GitHubModel):
    """Webhook

    The webhook that is being pinged
    """

    active: bool = Field(
        description="Determines whether the hook is actually triggered for the events it subscribes to."
    )
    app_id: Missing[int] = Field(
        default=UNSET,
        description="Only included for GitHub Apps. When you register a new GitHub App, GitHub sends a ping event to the webhook URL you specified during registration. The GitHub App ID sent in this field is required for authenticating an app.",
    )
    config: WebhookPingPropHookPropConfig = Field()
    created_at: datetime = Field()
    deliveries_url: Missing[str] = Field(default=UNSET)
    events: List[str] = Field(
        description="Determines what events the hook is triggered for. Default: ['push']."
    )
    id: int = Field(description="Unique identifier of the webhook.")
    last_response: Missing[HookResponse] = Field(default=UNSET, title="Hook Response")
    name: Literal["web"] = Field(
        description="The type of webhook. The only valid value is 'web'."
    )
    ping_url: Missing[str] = Field(default=UNSET)
    test_url: Missing[str] = Field(default=UNSET)
    type: str = Field()
    updated_at: datetime = Field()
    url: Missing[str] = Field(default=UNSET)


class WebhookPingPropHookPropConfig(GitHubModel):
    """WebhookPingPropHookPropConfig"""

    content_type: Missing[str] = Field(
        default=UNSET,
        description="The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
    )
    insecure_ssl: Missing[Union[str, float]] = Field(default=UNSET)
    secret: Missing[str] = Field(
        default=UNSET,
        description="If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).",
    )
    url: Missing[str] = Field(
        default=UNSET, description="The URL to which the payloads will be delivered."
    )


class WebhookPingFormEncoded(GitHubModel):
    """WebhookPingFormEncoded

    The webhooks ping payload encoded with URL encoding.
    """

    payload: str = Field(
        description="A URL-encoded string of the ping JSON payload. The decoded payload is a JSON object."
    )


class WebhookProjectCardConverted(GitHubModel):
    """project_card converted event"""

    action: Literal["converted"] = Field()
    changes: WebhookProjectCardConvertedPropChanges = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    project_card: WebhookProjectCardConvertedPropProjectCard = Field(
        title="Project Card"
    )
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookProjectCardConvertedPropChanges(GitHubModel):
    """WebhookProjectCardConvertedPropChanges"""

    note: WebhookProjectCardConvertedPropChangesPropNote = Field()


class WebhookProjectCardConvertedPropChangesPropNote(GitHubModel):
    """WebhookProjectCardConvertedPropChangesPropNote"""

    from_: str = Field(alias="from")


class WebhookProjectCardConvertedPropProjectCard(GitHubModel):
    """Project Card"""

    after_id: Missing[Union[int, None]] = Field(default=UNSET)
    archived: bool = Field(description="Whether or not the card is archived")
    column_id: int = Field()
    column_url: str = Field()
    content_url: Missing[str] = Field(default=UNSET)
    created_at: datetime = Field()
    creator: Union[WebhookProjectCardConvertedPropProjectCardPropCreator, None] = Field(
        title="User"
    )
    id: int = Field(description="The project card's ID")
    node_id: str = Field()
    note: Union[str, None] = Field()
    project_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()


class WebhookProjectCardConvertedPropProjectCardPropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookProjectCardCreated(GitHubModel):
    """project_card created event"""

    action: Literal["created"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    project_card: WebhookProjectCardCreatedPropProjectCard = Field(title="Project Card")
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookProjectCardCreatedPropProjectCard(GitHubModel):
    """Project Card"""

    after_id: Missing[Union[int, None]] = Field(default=UNSET)
    archived: bool = Field(description="Whether or not the card is archived")
    column_id: int = Field()
    column_url: str = Field()
    content_url: Missing[str] = Field(default=UNSET)
    created_at: datetime = Field()
    creator: Union[WebhookProjectCardCreatedPropProjectCardPropCreator, None] = Field(
        title="User"
    )
    id: int = Field(description="The project card's ID")
    node_id: str = Field()
    note: Union[str, None] = Field()
    project_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()


class WebhookProjectCardCreatedPropProjectCardPropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookProjectCardDeleted(GitHubModel):
    """project_card deleted event"""

    action: Literal["deleted"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    project_card: WebhookProjectCardDeletedPropProjectCard = Field(title="Project Card")
    repository: Missing[Union[None, RepositoryWebhooks]] = Field(default=UNSET)
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookProjectCardDeletedPropProjectCard(GitHubModel):
    """Project Card"""

    after_id: Missing[Union[int, None]] = Field(default=UNSET)
    archived: bool = Field(description="Whether or not the card is archived")
    column_id: Union[int, None] = Field()
    column_url: str = Field()
    content_url: Missing[str] = Field(default=UNSET)
    created_at: datetime = Field()
    creator: Union[WebhookProjectCardDeletedPropProjectCardPropCreator, None] = Field(
        title="User"
    )
    id: int = Field(description="The project card's ID")
    node_id: str = Field()
    note: Union[str, None] = Field()
    project_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()


class WebhookProjectCardDeletedPropProjectCardPropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookProjectCardEdited(GitHubModel):
    """project_card edited event"""

    action: Literal["edited"] = Field()
    changes: WebhookProjectCardEditedPropChanges = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    project_card: WebhookProjectCardEditedPropProjectCard = Field(title="Project Card")
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookProjectCardEditedPropChanges(GitHubModel):
    """WebhookProjectCardEditedPropChanges"""

    note: WebhookProjectCardEditedPropChangesPropNote = Field()


class WebhookProjectCardEditedPropChangesPropNote(GitHubModel):
    """WebhookProjectCardEditedPropChangesPropNote"""

    from_: Union[str, None] = Field(alias="from")


class WebhookProjectCardEditedPropProjectCard(GitHubModel):
    """Project Card"""

    after_id: Missing[Union[int, None]] = Field(default=UNSET)
    archived: bool = Field(description="Whether or not the card is archived")
    column_id: int = Field()
    column_url: str = Field()
    content_url: Missing[str] = Field(default=UNSET)
    created_at: datetime = Field()
    creator: Union[WebhookProjectCardEditedPropProjectCardPropCreator, None] = Field(
        title="User"
    )
    id: int = Field(description="The project card's ID")
    node_id: str = Field()
    note: Union[str, None] = Field()
    project_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()


class WebhookProjectCardEditedPropProjectCardPropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookProjectCardMoved(GitHubModel):
    """project_card moved event"""

    action: Literal["moved"] = Field()
    changes: Missing[WebhookProjectCardMovedPropChanges] = Field(default=UNSET)
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    project_card: WebhookProjectCardMovedPropProjectCard = Field()
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookProjectCardMovedPropChanges(GitHubModel):
    """WebhookProjectCardMovedPropChanges"""

    column_id: WebhookProjectCardMovedPropChangesPropColumnId = Field()


class WebhookProjectCardMovedPropChangesPropColumnId(GitHubModel):
    """WebhookProjectCardMovedPropChangesPropColumnId"""

    from_: int = Field(alias="from")


class WebhookProjectCardMovedPropProjectCard(GitHubModel):
    """WebhookProjectCardMovedPropProjectCard"""

    after_id: Union[Union[int, None], None] = Field()
    archived: bool = Field(description="Whether or not the card is archived")
    column_id: int = Field()
    column_url: str = Field()
    content_url: Missing[str] = Field(default=UNSET)
    created_at: datetime = Field()
    creator: Union[WebhookProjectCardMovedPropProjectCardMergedCreator, None] = Field()
    id: int = Field(description="The project card's ID")
    node_id: str = Field()
    note: Union[Union[str, None], None] = Field()
    project_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()


class WebhookProjectCardMovedPropProjectCardAllof0(GitHubModel):
    """Project Card"""

    after_id: Missing[Union[int, None]] = Field(default=UNSET)
    archived: bool = Field(description="Whether or not the card is archived")
    column_id: int = Field()
    column_url: str = Field()
    content_url: Missing[str] = Field(default=UNSET)
    created_at: datetime = Field()
    creator: Union[
        WebhookProjectCardMovedPropProjectCardAllof0PropCreator, None
    ] = Field(title="User")
    id: int = Field(description="The project card's ID")
    node_id: str = Field()
    note: Union[str, None] = Field()
    project_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()


class WebhookProjectCardMovedPropProjectCardAllof0PropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookProjectCardMovedPropProjectCardAllof1(GitHubModel):
    """WebhookProjectCardMovedPropProjectCardAllof1"""

    after_id: Union[int, None] = Field()
    archived: Missing[bool] = Field(default=UNSET)
    column_id: Missing[int] = Field(default=UNSET)
    column_url: Missing[str] = Field(default=UNSET)
    created_at: Missing[str] = Field(default=UNSET)
    creator: Missing[
        Union[WebhookProjectCardMovedPropProjectCardAllof1PropCreator, None]
    ] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    note: Missing[Union[str, None]] = Field(default=UNSET)
    project_url: Missing[str] = Field(default=UNSET)
    updated_at: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookProjectCardMovedPropProjectCardAllof1PropCreator(GitHubModel):
    """WebhookProjectCardMovedPropProjectCardAllof1PropCreator"""

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookProjectCardMovedPropProjectCardMergedCreator(GitHubModel):
    """WebhookProjectCardMovedPropProjectCardMergedCreator"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookProjectClosed(GitHubModel):
    """project closed event"""

    action: Literal["closed"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    project: WebhookProjectClosedPropProject = Field(title="Project")
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookProjectClosedPropProject(GitHubModel):
    """Project"""

    body: Union[str, None] = Field(description="Body of the project")
    columns_url: str = Field()
    created_at: datetime = Field()
    creator: Union[WebhookProjectClosedPropProjectPropCreator, None] = Field(
        title="User"
    )
    html_url: str = Field()
    id: int = Field()
    name: str = Field(description="Name of the project")
    node_id: str = Field()
    number: int = Field()
    owner_url: str = Field()
    state: Literal["open", "closed"] = Field(
        description="State of the project; either 'open' or 'closed'"
    )
    updated_at: datetime = Field()
    url: str = Field()


class WebhookProjectClosedPropProjectPropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookProjectColumnCreated(GitHubModel):
    """project_column created event"""

    action: Literal["created"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    project_column: WebhookProjectColumnCreatedPropProjectColumn = Field(
        title="Project Column"
    )
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: Missing[SimpleUserWebhooks] = Field(
        default=UNSET,
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookProjectColumnCreatedPropProjectColumn(GitHubModel):
    """Project Column"""

    after_id: Missing[Union[int, None]] = Field(default=UNSET)
    cards_url: str = Field()
    created_at: datetime = Field()
    id: int = Field(description="The unique identifier of the project column")
    name: str = Field(description="Name of the project column")
    node_id: str = Field()
    project_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()


class WebhookProjectColumnDeleted(GitHubModel):
    """project_column deleted event"""

    action: Literal["deleted"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    project_column: WebhookProjectColumnDeletedPropProjectColumn = Field(
        title="Project Column"
    )
    repository: Missing[Union[None, RepositoryWebhooks]] = Field(default=UNSET)
    sender: Missing[SimpleUserWebhooks] = Field(
        default=UNSET,
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookProjectColumnDeletedPropProjectColumn(GitHubModel):
    """Project Column"""

    after_id: Missing[Union[int, None]] = Field(default=UNSET)
    cards_url: str = Field()
    created_at: datetime = Field()
    id: int = Field(description="The unique identifier of the project column")
    name: str = Field(description="Name of the project column")
    node_id: str = Field()
    project_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()


class WebhookProjectColumnEdited(GitHubModel):
    """project_column edited event"""

    action: Literal["edited"] = Field()
    changes: WebhookProjectColumnEditedPropChanges = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    project_column: WebhookProjectColumnEditedPropProjectColumn = Field(
        title="Project Column"
    )
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: Missing[SimpleUserWebhooks] = Field(
        default=UNSET,
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookProjectColumnEditedPropChanges(GitHubModel):
    """WebhookProjectColumnEditedPropChanges"""

    name: Missing[WebhookProjectColumnEditedPropChangesPropName] = Field(default=UNSET)


class WebhookProjectColumnEditedPropChangesPropName(GitHubModel):
    """WebhookProjectColumnEditedPropChangesPropName"""

    from_: str = Field(alias="from")


class WebhookProjectColumnEditedPropProjectColumn(GitHubModel):
    """Project Column"""

    after_id: Missing[Union[int, None]] = Field(default=UNSET)
    cards_url: str = Field()
    created_at: datetime = Field()
    id: int = Field(description="The unique identifier of the project column")
    name: str = Field(description="Name of the project column")
    node_id: str = Field()
    project_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()


class WebhookProjectColumnMoved(GitHubModel):
    """project_column moved event"""

    action: Literal["moved"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    project_column: WebhookProjectColumnMovedPropProjectColumn = Field(
        title="Project Column"
    )
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookProjectColumnMovedPropProjectColumn(GitHubModel):
    """Project Column"""

    after_id: Missing[Union[int, None]] = Field(default=UNSET)
    cards_url: str = Field()
    created_at: datetime = Field()
    id: int = Field(description="The unique identifier of the project column")
    name: str = Field(description="Name of the project column")
    node_id: str = Field()
    project_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()


class WebhookProjectCreated(GitHubModel):
    """project created event"""

    action: Literal["created"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    project: WebhookProjectCreatedPropProject = Field(title="Project")
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookProjectCreatedPropProject(GitHubModel):
    """Project"""

    body: Union[str, None] = Field(description="Body of the project")
    columns_url: str = Field()
    created_at: datetime = Field()
    creator: Union[WebhookProjectCreatedPropProjectPropCreator, None] = Field(
        title="User"
    )
    html_url: str = Field()
    id: int = Field()
    name: str = Field(description="Name of the project")
    node_id: str = Field()
    number: int = Field()
    owner_url: str = Field()
    state: Literal["open", "closed"] = Field(
        description="State of the project; either 'open' or 'closed'"
    )
    updated_at: datetime = Field()
    url: str = Field()


class WebhookProjectCreatedPropProjectPropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookProjectDeleted(GitHubModel):
    """project deleted event"""

    action: Literal["deleted"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    project: WebhookProjectDeletedPropProject = Field(title="Project")
    repository: Missing[Union[None, RepositoryWebhooks]] = Field(default=UNSET)
    sender: Missing[SimpleUserWebhooks] = Field(
        default=UNSET,
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookProjectDeletedPropProject(GitHubModel):
    """Project"""

    body: Union[str, None] = Field(description="Body of the project")
    columns_url: str = Field()
    created_at: datetime = Field()
    creator: Union[WebhookProjectDeletedPropProjectPropCreator, None] = Field(
        title="User"
    )
    html_url: str = Field()
    id: int = Field()
    name: str = Field(description="Name of the project")
    node_id: str = Field()
    number: int = Field()
    owner_url: str = Field()
    state: Literal["open", "closed"] = Field(
        description="State of the project; either 'open' or 'closed'"
    )
    updated_at: datetime = Field()
    url: str = Field()


class WebhookProjectDeletedPropProjectPropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookProjectEdited(GitHubModel):
    """project edited event"""

    action: Literal["edited"] = Field()
    changes: Missing[WebhookProjectEditedPropChanges] = Field(
        default=UNSET,
        description="The changes to the project if the action was `edited`.",
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    project: WebhookProjectEditedPropProject = Field(title="Project")
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: Missing[SimpleUserWebhooks] = Field(
        default=UNSET,
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookProjectEditedPropChanges(GitHubModel):
    """WebhookProjectEditedPropChanges

    The changes to the project if the action was `edited`.
    """

    body: Missing[WebhookProjectEditedPropChangesPropBody] = Field(default=UNSET)
    name: Missing[WebhookProjectEditedPropChangesPropName] = Field(default=UNSET)


class WebhookProjectEditedPropChangesPropBody(GitHubModel):
    """WebhookProjectEditedPropChangesPropBody"""

    from_: str = Field(
        alias="from",
        description="The previous version of the body if the action was `edited`.",
    )


class WebhookProjectEditedPropChangesPropName(GitHubModel):
    """WebhookProjectEditedPropChangesPropName"""

    from_: str = Field(
        alias="from",
        description="The changes to the project if the action was `edited`.",
    )


class WebhookProjectEditedPropProject(GitHubModel):
    """Project"""

    body: Union[str, None] = Field(description="Body of the project")
    columns_url: str = Field()
    created_at: datetime = Field()
    creator: Union[WebhookProjectEditedPropProjectPropCreator, None] = Field(
        title="User"
    )
    html_url: str = Field()
    id: int = Field()
    name: str = Field(description="Name of the project")
    node_id: str = Field()
    number: int = Field()
    owner_url: str = Field()
    state: Literal["open", "closed"] = Field(
        description="State of the project; either 'open' or 'closed'"
    )
    updated_at: datetime = Field()
    url: str = Field()


class WebhookProjectEditedPropProjectPropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookProjectReopened(GitHubModel):
    """project reopened event"""

    action: Literal["reopened"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    project: WebhookProjectReopenedPropProject = Field(title="Project")
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookProjectReopenedPropProject(GitHubModel):
    """Project"""

    body: Union[str, None] = Field(description="Body of the project")
    columns_url: str = Field()
    created_at: datetime = Field()
    creator: Union[WebhookProjectReopenedPropProjectPropCreator, None] = Field(
        title="User"
    )
    html_url: str = Field()
    id: int = Field()
    name: str = Field(description="Name of the project")
    node_id: str = Field()
    number: int = Field()
    owner_url: str = Field()
    state: Literal["open", "closed"] = Field(
        description="State of the project; either 'open' or 'closed'"
    )
    updated_at: datetime = Field()
    url: str = Field()


class WebhookProjectReopenedPropProjectPropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookProjectsV2ProjectClosed(GitHubModel):
    """Projects v2 Project Closed Event"""

    action: Literal["closed"] = Field()
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: OrganizationSimpleWebhooks = Field(
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    projects_v2: ProjectsV2 = Field(
        title="Projects v2 Project", description="A projects v2 project"
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookProjectsV2ProjectCreated(GitHubModel):
    """WebhookProjectsV2ProjectCreated

    A project was created
    """

    action: Literal["created"] = Field()
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: OrganizationSimpleWebhooks = Field(
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    projects_v2: ProjectsV2 = Field(
        title="Projects v2 Project", description="A projects v2 project"
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookProjectsV2ProjectDeleted(GitHubModel):
    """Projects v2 Project Deleted Event"""

    action: Literal["deleted"] = Field()
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: OrganizationSimpleWebhooks = Field(
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    projects_v2: ProjectsV2 = Field(
        title="Projects v2 Project", description="A projects v2 project"
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookProjectsV2ProjectEdited(GitHubModel):
    """Projects v2 Project Edited Event"""

    action: Literal["edited"] = Field()
    changes: WebhookProjectsV2ProjectEditedPropChanges = Field()
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: OrganizationSimpleWebhooks = Field(
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    projects_v2: ProjectsV2 = Field(
        title="Projects v2 Project", description="A projects v2 project"
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookProjectsV2ProjectEditedPropChanges(GitHubModel):
    """WebhookProjectsV2ProjectEditedPropChanges"""

    description: Missing[
        WebhookProjectsV2ProjectEditedPropChangesPropDescription
    ] = Field(default=UNSET)
    public: Missing[WebhookProjectsV2ProjectEditedPropChangesPropPublic] = Field(
        default=UNSET
    )
    short_description: Missing[
        WebhookProjectsV2ProjectEditedPropChangesPropShortDescription
    ] = Field(default=UNSET)
    title: Missing[WebhookProjectsV2ProjectEditedPropChangesPropTitle] = Field(
        default=UNSET
    )


class WebhookProjectsV2ProjectEditedPropChangesPropDescription(GitHubModel):
    """WebhookProjectsV2ProjectEditedPropChangesPropDescription"""

    from_: Missing[Union[str, None]] = Field(default=UNSET, alias="from")
    to: Missing[Union[str, None]] = Field(default=UNSET)


class WebhookProjectsV2ProjectEditedPropChangesPropPublic(GitHubModel):
    """WebhookProjectsV2ProjectEditedPropChangesPropPublic"""

    from_: Missing[bool] = Field(default=UNSET, alias="from")
    to: Missing[bool] = Field(default=UNSET)


class WebhookProjectsV2ProjectEditedPropChangesPropShortDescription(GitHubModel):
    """WebhookProjectsV2ProjectEditedPropChangesPropShortDescription"""

    from_: Missing[Union[str, None]] = Field(default=UNSET, alias="from")
    to: Missing[Union[str, None]] = Field(default=UNSET)


class WebhookProjectsV2ProjectEditedPropChangesPropTitle(GitHubModel):
    """WebhookProjectsV2ProjectEditedPropChangesPropTitle"""

    from_: Missing[str] = Field(default=UNSET, alias="from")
    to: Missing[str] = Field(default=UNSET)


class WebhookProjectsV2ItemArchived(GitHubModel):
    """Projects v2 Item Archived Event"""

    action: Literal["archived"] = Field()
    changes: WebhookProjectsV2ItemArchivedPropChanges = Field()
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: OrganizationSimpleWebhooks = Field(
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    projects_v2_item: ProjectsV2Item = Field(
        title="Projects v2 Item", description="An item belonging to a project"
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookProjectsV2ItemArchivedPropChanges(GitHubModel):
    """WebhookProjectsV2ItemArchivedPropChanges"""

    archived_at: Missing[
        WebhookProjectsV2ItemArchivedPropChangesPropArchivedAt
    ] = Field(default=UNSET)


class WebhookProjectsV2ItemArchivedPropChangesPropArchivedAt(GitHubModel):
    """WebhookProjectsV2ItemArchivedPropChangesPropArchivedAt"""

    from_: Missing[Union[datetime, None]] = Field(default=UNSET, alias="from")
    to: Missing[Union[datetime, None]] = Field(default=UNSET)


class WebhookProjectsV2ItemConverted(GitHubModel):
    """Projects v2 Item Converted Event"""

    action: Literal["converted"] = Field()
    changes: WebhookProjectsV2ItemConvertedPropChanges = Field()
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: OrganizationSimpleWebhooks = Field(
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    projects_v2_item: ProjectsV2Item = Field(
        title="Projects v2 Item", description="An item belonging to a project"
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookProjectsV2ItemConvertedPropChanges(GitHubModel):
    """WebhookProjectsV2ItemConvertedPropChanges"""

    content_type: Missing[
        WebhookProjectsV2ItemConvertedPropChangesPropContentType
    ] = Field(default=UNSET)


class WebhookProjectsV2ItemConvertedPropChangesPropContentType(GitHubModel):
    """WebhookProjectsV2ItemConvertedPropChangesPropContentType"""

    from_: Missing[Union[str, None]] = Field(default=UNSET, alias="from")
    to: Missing[str] = Field(default=UNSET)


class WebhookProjectsV2ItemCreated(GitHubModel):
    """Projects v2 Item Created Event"""

    action: Literal["created"] = Field()
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: OrganizationSimpleWebhooks = Field(
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    projects_v2_item: ProjectsV2Item = Field(
        title="Projects v2 Item", description="An item belonging to a project"
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookProjectsV2ItemDeleted(GitHubModel):
    """Projects v2 Item Deleted Event"""

    action: Literal["deleted"] = Field()
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: OrganizationSimpleWebhooks = Field(
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    projects_v2_item: ProjectsV2Item = Field(
        title="Projects v2 Item", description="An item belonging to a project"
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookProjectsV2ItemEdited(GitHubModel):
    """Projects v2 Item Edited Event"""

    action: Literal["edited"] = Field()
    changes: Missing[
        Union[
            WebhookProjectsV2ItemEditedPropChangesOneof0,
            WebhookProjectsV2ItemEditedPropChangesOneof1,
        ]
    ] = Field(default=UNSET)
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: OrganizationSimpleWebhooks = Field(
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    projects_v2_item: ProjectsV2Item = Field(
        title="Projects v2 Item", description="An item belonging to a project"
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookProjectsV2ItemEditedPropChangesOneof0(GitHubModel):
    """WebhookProjectsV2ItemEditedPropChangesOneof0"""

    field_value: WebhookProjectsV2ItemEditedPropChangesOneof0PropFieldValue = Field()


class WebhookProjectsV2ItemEditedPropChangesOneof0PropFieldValue(GitHubModel):
    """WebhookProjectsV2ItemEditedPropChangesOneof0PropFieldValue"""

    field_node_id: Missing[str] = Field(default=UNSET)
    field_type: Missing[str] = Field(default=UNSET)


class WebhookProjectsV2ItemEditedPropChangesOneof1(GitHubModel):
    """WebhookProjectsV2ItemEditedPropChangesOneof1"""

    body: WebhookProjectsV2ItemEditedPropChangesOneof1PropBody = Field()


class WebhookProjectsV2ItemEditedPropChangesOneof1PropBody(GitHubModel):
    """WebhookProjectsV2ItemEditedPropChangesOneof1PropBody"""

    from_: Missing[Union[str, None]] = Field(default=UNSET, alias="from")
    to: Missing[Union[str, None]] = Field(default=UNSET)


class WebhookProjectsV2ItemReordered(GitHubModel):
    """Projects v2 Item Reordered Event"""

    action: Literal["reordered"] = Field()
    changes: WebhookProjectsV2ItemReorderedPropChanges = Field()
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: OrganizationSimpleWebhooks = Field(
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    projects_v2_item: ProjectsV2Item = Field(
        title="Projects v2 Item", description="An item belonging to a project"
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookProjectsV2ItemReorderedPropChanges(GitHubModel):
    """WebhookProjectsV2ItemReorderedPropChanges"""

    previous_projects_v2_item_node_id: Missing[
        WebhookProjectsV2ItemReorderedPropChangesPropPreviousProjectsV2ItemNodeId
    ] = Field(default=UNSET)


class WebhookProjectsV2ItemReorderedPropChangesPropPreviousProjectsV2ItemNodeId(
    GitHubModel
):
    """WebhookProjectsV2ItemReorderedPropChangesPropPreviousProjectsV2ItemNodeId"""

    from_: Missing[Union[str, None]] = Field(default=UNSET, alias="from")
    to: Missing[Union[str, None]] = Field(default=UNSET)


class WebhookProjectsV2ItemRestored(GitHubModel):
    """Projects v2 Item Restored Event"""

    action: Literal["restored"] = Field()
    changes: WebhookProjectsV2ItemRestoredPropChanges = Field()
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: OrganizationSimpleWebhooks = Field(
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    projects_v2_item: ProjectsV2Item = Field(
        title="Projects v2 Item", description="An item belonging to a project"
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookProjectsV2ItemRestoredPropChanges(GitHubModel):
    """WebhookProjectsV2ItemRestoredPropChanges"""

    archived_at: Missing[
        WebhookProjectsV2ItemRestoredPropChangesPropArchivedAt
    ] = Field(default=UNSET)


class WebhookProjectsV2ItemRestoredPropChangesPropArchivedAt(GitHubModel):
    """WebhookProjectsV2ItemRestoredPropChangesPropArchivedAt"""

    from_: Missing[Union[datetime, None]] = Field(default=UNSET, alias="from")
    to: Missing[Union[datetime, None]] = Field(default=UNSET)


class WebhookProjectsV2ProjectReopened(GitHubModel):
    """Projects v2 Project Reopened Event"""

    action: Literal["reopened"] = Field()
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: OrganizationSimpleWebhooks = Field(
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    projects_v2: ProjectsV2 = Field(
        title="Projects v2 Project", description="A projects v2 project"
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookPublic(GitHubModel):
    """public event"""

    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookPullRequestAssigned(GitHubModel):
    """pull_request assigned event"""

    action: Literal["assigned"] = Field()
    assignee: Union[WebhookPullRequestAssignedPropAssignee, None] = Field(title="User")
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    number: int = Field(description="The pull request number.")
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    pull_request: WebhookPullRequestAssignedPropPullRequest = Field(
        title="Pull Request"
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookPullRequestAssignedPropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestAssignedPropPullRequest(GitHubModel):
    """Pull Request"""

    links: WebhookPullRequestAssignedPropPullRequestPropLinks = Field(alias="_links")
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    additions: Missing[int] = Field(default=UNSET)
    assignee: Union[
        WebhookPullRequestAssignedPropPullRequestPropAssignee, None
    ] = Field(title="User")
    assignees: List[
        Union[WebhookPullRequestAssignedPropPullRequestPropAssigneesItems, None]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    auto_merge: Union[
        WebhookPullRequestAssignedPropPullRequestPropAutoMerge, None
    ] = Field(
        title="PullRequestAutoMerge",
        description="The status of auto merging a pull request.",
    )
    base: WebhookPullRequestAssignedPropPullRequestPropBase = Field()
    body: Union[str, None] = Field()
    changed_files: Missing[int] = Field(default=UNSET)
    closed_at: Union[datetime, None] = Field()
    comments: Missing[int] = Field(default=UNSET)
    comments_url: str = Field()
    commits: Missing[int] = Field(default=UNSET)
    commits_url: str = Field()
    created_at: datetime = Field()
    deletions: Missing[int] = Field(default=UNSET)
    diff_url: str = Field()
    draft: bool = Field(
        description="Indicates whether or not the pull request is a draft."
    )
    head: WebhookPullRequestAssignedPropPullRequestPropHead = Field()
    html_url: str = Field()
    id: int = Field()
    issue_url: str = Field()
    labels: List[WebhookPullRequestAssignedPropPullRequestPropLabelsItems] = Field()
    locked: bool = Field()
    maintainer_can_modify: Missing[bool] = Field(
        default=UNSET,
        description="Indicates whether maintainers can modify the pull request.",
    )
    merge_commit_sha: Union[str, None] = Field()
    mergeable: Missing[Union[bool, None]] = Field(default=UNSET)
    mergeable_state: Missing[str] = Field(default=UNSET)
    merged: Missing[Union[bool, None]] = Field(default=UNSET)
    merged_at: Union[datetime, None] = Field()
    merged_by: Missing[
        Union[WebhookPullRequestAssignedPropPullRequestPropMergedBy, None]
    ] = Field(default=UNSET, title="User")
    milestone: Union[
        WebhookPullRequestAssignedPropPullRequestPropMilestone, None
    ] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field(
        description="Number uniquely identifying the pull request within its repository."
    )
    patch_url: str = Field()
    rebaseable: Missing[Union[bool, None]] = Field(default=UNSET)
    requested_reviewers: List[
        Union[
            WebhookPullRequestAssignedPropPullRequestPropRequestedReviewersItemsOneof0,
            None,
            WebhookPullRequestAssignedPropPullRequestPropRequestedReviewersItemsOneof1,
        ]
    ] = Field()
    requested_teams: List[
        WebhookPullRequestAssignedPropPullRequestPropRequestedTeamsItems
    ] = Field()
    review_comment_url: str = Field()
    review_comments: Missing[int] = Field(default=UNSET)
    review_comments_url: str = Field()
    state: Literal["open", "closed"] = Field(
        description="State of this Pull Request. Either `open` or `closed`."
    )
    statuses_url: str = Field()
    title: str = Field(description="The title of the pull request.")
    updated_at: datetime = Field()
    url: str = Field()
    user: Union[WebhookPullRequestAssignedPropPullRequestPropUser, None] = Field(
        title="User"
    )


class WebhookPullRequestAssignedPropPullRequestPropLinks(GitHubModel):
    """WebhookPullRequestAssignedPropPullRequestPropLinks"""

    comments: WebhookPullRequestAssignedPropPullRequestPropLinksPropComments = Field(
        title="Link"
    )
    commits: WebhookPullRequestAssignedPropPullRequestPropLinksPropCommits = Field(
        title="Link"
    )
    html: WebhookPullRequestAssignedPropPullRequestPropLinksPropHtml = Field(
        title="Link"
    )
    issue: WebhookPullRequestAssignedPropPullRequestPropLinksPropIssue = Field(
        title="Link"
    )
    review_comment: WebhookPullRequestAssignedPropPullRequestPropLinksPropReviewComment = Field(
        title="Link"
    )
    review_comments: WebhookPullRequestAssignedPropPullRequestPropLinksPropReviewComments = Field(
        title="Link"
    )
    self_: WebhookPullRequestAssignedPropPullRequestPropLinksPropSelf = Field(
        alias="self", title="Link"
    )
    statuses: WebhookPullRequestAssignedPropPullRequestPropLinksPropStatuses = Field(
        title="Link"
    )


class WebhookPullRequestAssignedPropPullRequestPropLinksPropComments(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestAssignedPropPullRequestPropLinksPropCommits(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestAssignedPropPullRequestPropLinksPropHtml(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestAssignedPropPullRequestPropLinksPropIssue(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestAssignedPropPullRequestPropLinksPropReviewComment(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestAssignedPropPullRequestPropLinksPropReviewComments(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestAssignedPropPullRequestPropLinksPropSelf(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestAssignedPropPullRequestPropLinksPropStatuses(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestAssignedPropPullRequestPropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestAssignedPropPullRequestPropAssigneesItems(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestAssignedPropPullRequestPropAutoMergePropEnabledBy(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestAssignedPropPullRequestPropAutoMerge(GitHubModel):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None] = Field(
        description="Commit message for the merge commit."
    )
    commit_title: Union[str, None] = Field(
        description="Title for the merge commit message."
    )
    enabled_by: Union[
        WebhookPullRequestAssignedPropPullRequestPropAutoMergePropEnabledBy, None
    ] = Field(title="User")
    merge_method: Literal["merge", "squash", "rebase"] = Field(
        description="The merge method to use."
    )


class WebhookPullRequestAssignedPropPullRequestPropBase(GitHubModel):
    """WebhookPullRequestAssignedPropPullRequestPropBase"""

    label: str = Field()
    ref: str = Field()
    repo: WebhookPullRequestAssignedPropPullRequestPropBasePropRepo = Field(
        title="Repository", description="A git repository"
    )
    sha: str = Field()
    user: Union[
        WebhookPullRequestAssignedPropPullRequestPropBasePropUser, None
    ] = Field(title="User")


class WebhookPullRequestAssignedPropPullRequestPropBasePropRepo(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestAssignedPropPullRequestPropBasePropRepoPropLicense, None
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestAssignedPropPullRequestPropBasePropRepoPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestAssignedPropPullRequestPropBasePropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestAssignedPropPullRequestPropBasePropRepoPropLicense(GitHubModel):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestAssignedPropPullRequestPropBasePropRepoPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestAssignedPropPullRequestPropBasePropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestAssignedPropPullRequestPropBasePropRepoPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestAssignedPropPullRequestPropBasePropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestAssignedPropPullRequestPropHead(GitHubModel):
    """WebhookPullRequestAssignedPropPullRequestPropHead"""

    label: Union[str, None] = Field()
    ref: str = Field()
    repo: Union[
        WebhookPullRequestAssignedPropPullRequestPropHeadPropRepo, None
    ] = Field(title="Repository", description="A git repository")
    sha: str = Field()
    user: Union[
        WebhookPullRequestAssignedPropPullRequestPropHeadPropUser, None
    ] = Field(title="User")


class WebhookPullRequestAssignedPropPullRequestPropHeadPropRepoPropLicense(GitHubModel):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestAssignedPropPullRequestPropHeadPropRepoPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestAssignedPropPullRequestPropHeadPropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestAssignedPropPullRequestPropHeadPropRepoPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestAssignedPropPullRequestPropHeadPropRepo(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestAssignedPropPullRequestPropHeadPropRepoPropLicense, None
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestAssignedPropPullRequestPropHeadPropRepoPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestAssignedPropPullRequestPropHeadPropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestAssignedPropPullRequestPropHeadPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestAssignedPropPullRequestPropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookPullRequestAssignedPropPullRequestPropMergedBy(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestAssignedPropPullRequestPropMilestonePropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestAssignedPropPullRequestPropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookPullRequestAssignedPropPullRequestPropMilestonePropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookPullRequestAssignedPropPullRequestPropRequestedReviewersItemsOneof0(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestAssignedPropPullRequestPropRequestedReviewersItemsOneof1(
    GitHubModel
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    parent: Missing[
        Union[
            WebhookPullRequestAssignedPropPullRequestPropRequestedReviewersItemsOneof1PropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestAssignedPropPullRequestPropRequestedReviewersItemsOneof1PropParent(
    GitHubModel
):
    """WebhookPullRequestAssignedPropPullRequestPropRequestedReviewersItemsOneof1PropPa
    rent
    """

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestAssignedPropPullRequestPropRequestedTeamsItems(GitHubModel):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Description of the team"
    )
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field(description="Unique identifier of the team")
    members_url: Missing[str] = Field(default=UNSET)
    name: str = Field(description="Name of the team")
    node_id: Missing[str] = Field(default=UNSET)
    parent: Missing[
        Union[
            WebhookPullRequestAssignedPropPullRequestPropRequestedTeamsItemsPropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: Missing[str] = Field(
        default=UNSET,
        description="Permission that the team will have for its repositories",
    )
    privacy: Missing[Literal["open", "closed", "secret"]] = Field(default=UNSET)
    repositories_url: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET, description="URL for the team")


class WebhookPullRequestAssignedPropPullRequestPropRequestedTeamsItemsPropParent(
    GitHubModel
):
    """WebhookPullRequestAssignedPropPullRequestPropRequestedTeamsItemsPropParent"""

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestAssignedPropPullRequestPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestAutoMergeDisabled(GitHubModel):
    """pull_request auto_merge_disabled event"""

    action: Literal["auto_merge_disabled"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    number: int = Field()
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    pull_request: WebhookPullRequestAutoMergeDisabledPropPullRequest = Field(
        title="Pull Request"
    )
    reason: str = Field()
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookPullRequestAutoMergeDisabledPropPullRequest(GitHubModel):
    """Pull Request"""

    links: WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinks = Field(
        alias="_links"
    )
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    additions: Missing[int] = Field(default=UNSET)
    assignee: Union[
        WebhookPullRequestAutoMergeDisabledPropPullRequestPropAssignee, None
    ] = Field(title="User")
    assignees: List[
        Union[
            WebhookPullRequestAutoMergeDisabledPropPullRequestPropAssigneesItems, None
        ]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    auto_merge: Union[
        WebhookPullRequestAutoMergeDisabledPropPullRequestPropAutoMerge, None
    ] = Field(
        title="PullRequestAutoMerge",
        description="The status of auto merging a pull request.",
    )
    base: WebhookPullRequestAutoMergeDisabledPropPullRequestPropBase = Field()
    body: Union[str, None] = Field()
    changed_files: Missing[int] = Field(default=UNSET)
    closed_at: Union[datetime, None] = Field()
    comments: Missing[int] = Field(default=UNSET)
    comments_url: str = Field()
    commits: Missing[int] = Field(default=UNSET)
    commits_url: str = Field()
    created_at: datetime = Field()
    deletions: Missing[int] = Field(default=UNSET)
    diff_url: str = Field()
    draft: bool = Field(
        description="Indicates whether or not the pull request is a draft."
    )
    head: WebhookPullRequestAutoMergeDisabledPropPullRequestPropHead = Field()
    html_url: str = Field()
    id: int = Field()
    issue_url: str = Field()
    labels: List[
        WebhookPullRequestAutoMergeDisabledPropPullRequestPropLabelsItems
    ] = Field()
    locked: bool = Field()
    maintainer_can_modify: Missing[bool] = Field(
        default=UNSET,
        description="Indicates whether maintainers can modify the pull request.",
    )
    merge_commit_sha: Union[str, None] = Field()
    mergeable: Missing[Union[bool, None]] = Field(default=UNSET)
    mergeable_state: Missing[str] = Field(default=UNSET)
    merged: Missing[Union[bool, None]] = Field(default=UNSET)
    merged_at: Union[datetime, None] = Field()
    merged_by: Missing[
        Union[WebhookPullRequestAutoMergeDisabledPropPullRequestPropMergedBy, None]
    ] = Field(default=UNSET, title="User")
    milestone: Union[
        WebhookPullRequestAutoMergeDisabledPropPullRequestPropMilestone, None
    ] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field(
        description="Number uniquely identifying the pull request within its repository."
    )
    patch_url: str = Field()
    rebaseable: Missing[Union[bool, None]] = Field(default=UNSET)
    requested_reviewers: List[
        Union[
            WebhookPullRequestAutoMergeDisabledPropPullRequestPropRequestedReviewersItemsOneof0,
            None,
            WebhookPullRequestAutoMergeDisabledPropPullRequestPropRequestedReviewersItemsOneof1,
        ]
    ] = Field()
    requested_teams: List[
        WebhookPullRequestAutoMergeDisabledPropPullRequestPropRequestedTeamsItems
    ] = Field()
    review_comment_url: str = Field()
    review_comments: Missing[int] = Field(default=UNSET)
    review_comments_url: str = Field()
    state: Literal["open", "closed"] = Field(
        description="State of this Pull Request. Either `open` or `closed`."
    )
    statuses_url: str = Field()
    title: str = Field(description="The title of the pull request.")
    updated_at: datetime = Field()
    url: str = Field()
    user: Union[
        WebhookPullRequestAutoMergeDisabledPropPullRequestPropUser, None
    ] = Field(title="User")


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinks(GitHubModel):
    """WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinks"""

    comments: WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropComments = Field(
        title="Link"
    )
    commits: WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropCommits = (
        Field(title="Link")
    )
    html: WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropHtml = Field(
        title="Link"
    )
    issue: WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropIssue = Field(
        title="Link"
    )
    review_comment: WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropReviewComment = Field(
        title="Link"
    )
    review_comments: WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropReviewComments = Field(
        title="Link"
    )
    self_: WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropSelf = Field(
        alias="self", title="Link"
    )
    statuses: WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropStatuses = Field(
        title="Link"
    )


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropComments(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropCommits(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropHtml(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropIssue(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropReviewComment(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropReviewComments(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropSelf(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropStatuses(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropAssigneesItems(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropAutoMergePropEnabledBy(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropAutoMerge(GitHubModel):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None] = Field(
        description="Commit message for the merge commit."
    )
    commit_title: Union[str, None] = Field(
        description="Title for the merge commit message."
    )
    enabled_by: Union[
        WebhookPullRequestAutoMergeDisabledPropPullRequestPropAutoMergePropEnabledBy,
        None,
    ] = Field(title="User")
    merge_method: Literal["merge", "squash", "rebase"] = Field(
        description="The merge method to use."
    )


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropBase(GitHubModel):
    """WebhookPullRequestAutoMergeDisabledPropPullRequestPropBase"""

    label: str = Field()
    ref: str = Field()
    repo: WebhookPullRequestAutoMergeDisabledPropPullRequestPropBasePropRepo = Field(
        title="Repository", description="A git repository"
    )
    sha: str = Field()
    user: Union[
        WebhookPullRequestAutoMergeDisabledPropPullRequestPropBasePropUser, None
    ] = Field(title="User")


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropBasePropRepo(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestAutoMergeDisabledPropPullRequestPropBasePropRepoPropLicense,
        None,
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestAutoMergeDisabledPropPullRequestPropBasePropRepoPropOwner,
        None,
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestAutoMergeDisabledPropPullRequestPropBasePropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropBasePropRepoPropLicense(
    GitHubModel
):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropBasePropRepoPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropBasePropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestAutoMergeDisabledPropPullRequestPropBasePropRepoPropPermission
    s
    """

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropBasePropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropHead(GitHubModel):
    """WebhookPullRequestAutoMergeDisabledPropPullRequestPropHead"""

    label: str = Field()
    ref: str = Field()
    repo: WebhookPullRequestAutoMergeDisabledPropPullRequestPropHeadPropRepo = Field(
        title="Repository", description="A git repository"
    )
    sha: str = Field()
    user: Union[
        WebhookPullRequestAutoMergeDisabledPropPullRequestPropHeadPropUser, None
    ] = Field(title="User")


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropHeadPropRepo(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestAutoMergeDisabledPropPullRequestPropHeadPropRepoPropLicense,
        None,
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestAutoMergeDisabledPropPullRequestPropHeadPropRepoPropOwner,
        None,
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestAutoMergeDisabledPropPullRequestPropHeadPropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropHeadPropRepoPropLicense(
    GitHubModel
):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropHeadPropRepoPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropHeadPropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestAutoMergeDisabledPropPullRequestPropHeadPropRepoPropPermission
    s
    """

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropHeadPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropMergedBy(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropMilestonePropCreator(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookPullRequestAutoMergeDisabledPropPullRequestPropMilestonePropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropRequestedReviewersItemsOneof0(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropRequestedReviewersItemsOneof1(
    GitHubModel
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    parent: Missing[
        Union[
            WebhookPullRequestAutoMergeDisabledPropPullRequestPropRequestedReviewersItemsOneof1PropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropRequestedReviewersItemsOneof1PropParent(
    GitHubModel
):
    """WebhookPullRequestAutoMergeDisabledPropPullRequestPropRequestedReviewersItemsOne
    of1PropParent
    """

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropRequestedTeamsItems(
    GitHubModel
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Description of the team"
    )
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field(description="Unique identifier of the team")
    members_url: Missing[str] = Field(default=UNSET)
    name: str = Field(description="Name of the team")
    node_id: Missing[str] = Field(default=UNSET)
    parent: Missing[
        Union[
            WebhookPullRequestAutoMergeDisabledPropPullRequestPropRequestedTeamsItemsPropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: Missing[str] = Field(
        default=UNSET,
        description="Permission that the team will have for its repositories",
    )
    privacy: Missing[Literal["open", "closed", "secret"]] = Field(default=UNSET)
    repositories_url: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET, description="URL for the team")


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropRequestedTeamsItemsPropParent(
    GitHubModel
):
    """WebhookPullRequestAutoMergeDisabledPropPullRequestPropRequestedTeamsItemsPropPar
    ent
    """

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestAutoMergeEnabled(GitHubModel):
    """pull_request auto_merge_enabled event"""

    action: Literal["auto_merge_enabled"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    number: int = Field()
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    pull_request: WebhookPullRequestAutoMergeEnabledPropPullRequest = Field(
        title="Pull Request"
    )
    reason: Missing[str] = Field(default=UNSET)
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookPullRequestAutoMergeEnabledPropPullRequest(GitHubModel):
    """Pull Request"""

    links: WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinks = Field(
        alias="_links"
    )
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    additions: Missing[int] = Field(default=UNSET)
    assignee: Union[
        WebhookPullRequestAutoMergeEnabledPropPullRequestPropAssignee, None
    ] = Field(title="User")
    assignees: List[
        Union[WebhookPullRequestAutoMergeEnabledPropPullRequestPropAssigneesItems, None]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    auto_merge: Union[
        WebhookPullRequestAutoMergeEnabledPropPullRequestPropAutoMerge, None
    ] = Field(
        title="PullRequestAutoMerge",
        description="The status of auto merging a pull request.",
    )
    base: WebhookPullRequestAutoMergeEnabledPropPullRequestPropBase = Field()
    body: Union[str, None] = Field()
    changed_files: Missing[int] = Field(default=UNSET)
    closed_at: Union[datetime, None] = Field()
    comments: Missing[int] = Field(default=UNSET)
    comments_url: str = Field()
    commits: Missing[int] = Field(default=UNSET)
    commits_url: str = Field()
    created_at: datetime = Field()
    deletions: Missing[int] = Field(default=UNSET)
    diff_url: str = Field()
    draft: bool = Field(
        description="Indicates whether or not the pull request is a draft."
    )
    head: WebhookPullRequestAutoMergeEnabledPropPullRequestPropHead = Field()
    html_url: str = Field()
    id: int = Field()
    issue_url: str = Field()
    labels: List[
        WebhookPullRequestAutoMergeEnabledPropPullRequestPropLabelsItems
    ] = Field()
    locked: bool = Field()
    maintainer_can_modify: Missing[bool] = Field(
        default=UNSET,
        description="Indicates whether maintainers can modify the pull request.",
    )
    merge_commit_sha: Union[str, None] = Field()
    mergeable: Missing[Union[bool, None]] = Field(default=UNSET)
    mergeable_state: Missing[str] = Field(default=UNSET)
    merged: Missing[Union[bool, None]] = Field(default=UNSET)
    merged_at: Union[datetime, None] = Field()
    merged_by: Missing[
        Union[WebhookPullRequestAutoMergeEnabledPropPullRequestPropMergedBy, None]
    ] = Field(default=UNSET, title="User")
    milestone: Union[
        WebhookPullRequestAutoMergeEnabledPropPullRequestPropMilestone, None
    ] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field(
        description="Number uniquely identifying the pull request within its repository."
    )
    patch_url: str = Field()
    rebaseable: Missing[Union[bool, None]] = Field(default=UNSET)
    requested_reviewers: List[
        Union[
            WebhookPullRequestAutoMergeEnabledPropPullRequestPropRequestedReviewersItemsOneof0,
            None,
            WebhookPullRequestAutoMergeEnabledPropPullRequestPropRequestedReviewersItemsOneof1,
        ]
    ] = Field()
    requested_teams: List[
        WebhookPullRequestAutoMergeEnabledPropPullRequestPropRequestedTeamsItems
    ] = Field()
    review_comment_url: str = Field()
    review_comments: Missing[int] = Field(default=UNSET)
    review_comments_url: str = Field()
    state: Literal["open", "closed"] = Field(
        description="State of this Pull Request. Either `open` or `closed`."
    )
    statuses_url: str = Field()
    title: str = Field(description="The title of the pull request.")
    updated_at: datetime = Field()
    url: str = Field()
    user: Union[
        WebhookPullRequestAutoMergeEnabledPropPullRequestPropUser, None
    ] = Field(title="User")


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinks(GitHubModel):
    """WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinks"""

    comments: WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropComments = (
        Field(title="Link")
    )
    commits: WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropCommits = (
        Field(title="Link")
    )
    html: WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropHtml = Field(
        title="Link"
    )
    issue: WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropIssue = Field(
        title="Link"
    )
    review_comment: WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropReviewComment = Field(
        title="Link"
    )
    review_comments: WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropReviewComments = Field(
        title="Link"
    )
    self_: WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropSelf = Field(
        alias="self", title="Link"
    )
    statuses: WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropStatuses = (
        Field(title="Link")
    )


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropComments(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropCommits(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropHtml(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropIssue(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropReviewComment(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropReviewComments(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropSelf(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropStatuses(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropAssigneesItems(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropAutoMergePropEnabledBy(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropAutoMerge(GitHubModel):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None] = Field(
        description="Commit message for the merge commit."
    )
    commit_title: Union[str, None] = Field(
        description="Title for the merge commit message."
    )
    enabled_by: Union[
        WebhookPullRequestAutoMergeEnabledPropPullRequestPropAutoMergePropEnabledBy,
        None,
    ] = Field(title="User")
    merge_method: Literal["merge", "squash", "rebase"] = Field(
        description="The merge method to use."
    )


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropBase(GitHubModel):
    """WebhookPullRequestAutoMergeEnabledPropPullRequestPropBase"""

    label: str = Field()
    ref: str = Field()
    repo: WebhookPullRequestAutoMergeEnabledPropPullRequestPropBasePropRepo = Field(
        title="Repository", description="A git repository"
    )
    sha: str = Field()
    user: Union[
        WebhookPullRequestAutoMergeEnabledPropPullRequestPropBasePropUser, None
    ] = Field(title="User")


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropBasePropRepo(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestAutoMergeEnabledPropPullRequestPropBasePropRepoPropLicense,
        None,
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestAutoMergeEnabledPropPullRequestPropBasePropRepoPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestAutoMergeEnabledPropPullRequestPropBasePropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropBasePropRepoPropLicense(
    GitHubModel
):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropBasePropRepoPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropBasePropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestAutoMergeEnabledPropPullRequestPropBasePropRepoPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropBasePropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropHead(GitHubModel):
    """WebhookPullRequestAutoMergeEnabledPropPullRequestPropHead"""

    label: str = Field()
    ref: str = Field()
    repo: WebhookPullRequestAutoMergeEnabledPropPullRequestPropHeadPropRepo = Field(
        title="Repository", description="A git repository"
    )
    sha: str = Field()
    user: Union[
        WebhookPullRequestAutoMergeEnabledPropPullRequestPropHeadPropUser, None
    ] = Field(title="User")


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropHeadPropRepo(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestAutoMergeEnabledPropPullRequestPropHeadPropRepoPropLicense,
        None,
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestAutoMergeEnabledPropPullRequestPropHeadPropRepoPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestAutoMergeEnabledPropPullRequestPropHeadPropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropHeadPropRepoPropLicense(
    GitHubModel
):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropHeadPropRepoPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropHeadPropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestAutoMergeEnabledPropPullRequestPropHeadPropRepoPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropHeadPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropMergedBy(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropMilestonePropCreator(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookPullRequestAutoMergeEnabledPropPullRequestPropMilestonePropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropRequestedReviewersItemsOneof0(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropRequestedReviewersItemsOneof1(
    GitHubModel
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    parent: Missing[
        Union[
            WebhookPullRequestAutoMergeEnabledPropPullRequestPropRequestedReviewersItemsOneof1PropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropRequestedReviewersItemsOneof1PropParent(
    GitHubModel
):
    """WebhookPullRequestAutoMergeEnabledPropPullRequestPropRequestedReviewersItemsOneo
    f1PropParent
    """

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropRequestedTeamsItems(
    GitHubModel
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Description of the team"
    )
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field(description="Unique identifier of the team")
    members_url: Missing[str] = Field(default=UNSET)
    name: str = Field(description="Name of the team")
    node_id: Missing[str] = Field(default=UNSET)
    parent: Missing[
        Union[
            WebhookPullRequestAutoMergeEnabledPropPullRequestPropRequestedTeamsItemsPropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: Missing[str] = Field(
        default=UNSET,
        description="Permission that the team will have for its repositories",
    )
    privacy: Missing[Literal["open", "closed", "secret"]] = Field(default=UNSET)
    repositories_url: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET, description="URL for the team")


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropRequestedTeamsItemsPropParent(
    GitHubModel
):
    """WebhookPullRequestAutoMergeEnabledPropPullRequestPropRequestedTeamsItemsPropPare
    nt
    """

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestClosed(GitHubModel):
    """pull_request closed event"""

    action: Literal["closed"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    number: int = Field(description="The pull request number.")
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    pull_request: WebhookPullRequestClosedPropPullRequest = Field()
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookPullRequestClosedPropPullRequest(GitHubModel):
    """WebhookPullRequestClosedPropPullRequest"""

    url: str = Field()
    id: int = Field()
    node_id: str = Field()
    html_url: str = Field()
    diff_url: str = Field()
    patch_url: str = Field()
    issue_url: str = Field()
    commits_url: str = Field()
    review_comments_url: str = Field()
    review_comment_url: str = Field()
    comments_url: str = Field()
    statuses_url: str = Field()
    number: int = Field(
        description="Number uniquely identifying the pull request within its repository."
    )
    state: Literal["open", "closed"] = Field(
        description="State of this Pull Request. Either `open` or `closed`."
    )
    locked: bool = Field()
    title: str = Field(description="The title of the pull request.")
    user: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    body: Union[str, None] = Field()
    labels: List[PullRequestPropLabelsItems] = Field()
    milestone: Union[None, Milestone] = Field()
    active_lock_reason: Missing[Union[str, None]] = Field(default=UNSET)
    created_at: datetime = Field()
    updated_at: datetime = Field()
    closed_at: Union[datetime, None] = Field()
    merged_at: Union[datetime, None] = Field()
    merge_commit_sha: Union[str, None] = Field()
    assignee: Union[None, SimpleUser] = Field()
    assignees: Missing[Union[List[SimpleUser], None]] = Field(default=UNSET)
    requested_reviewers: Missing[Union[List[SimpleUser], None]] = Field(default=UNSET)
    requested_teams: Missing[Union[List[TeamSimple], None]] = Field(default=UNSET)
    head: PullRequestPropHead = Field()
    base: PullRequestPropBase = Field()
    links: PullRequestPropLinks = Field(alias="_links")
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="author_association",
        description="How the author is associated with the repository.",
    )
    auto_merge: Union[AutoMerge, None] = Field(
        title="Auto merge", description="The status of auto merging a pull request."
    )
    draft: Missing[bool] = Field(
        default=UNSET,
        description="Indicates whether or not the pull request is a draft.",
    )
    merged: bool = Field()
    mergeable: Union[bool, None] = Field()
    rebaseable: Missing[Union[bool, None]] = Field(default=UNSET)
    mergeable_state: str = Field()
    merged_by: Union[None, SimpleUser] = Field()
    comments: int = Field()
    review_comments: int = Field()
    maintainer_can_modify: bool = Field(
        description="Indicates whether maintainers can modify the pull request."
    )
    commits: int = Field()
    additions: int = Field()
    deletions: int = Field()
    changed_files: int = Field()
    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(
        default=UNSET,
        description="Whether to allow updating the pull request's branch.",
    )
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged.",
    )
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description='The default value for a merge commit title.\n- `PR_TITLE` - default to the pull request\'s title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., "Merge pull request #123 from branch-name").',
    )
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.**",
    )


class WebhookPullRequestClosedPropPullRequestAllof1(GitHubModel):
    """WebhookPullRequestClosedPropPullRequestAllof1"""

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(
        default=UNSET,
        description="Whether to allow updating the pull request's branch.",
    )
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged.",
    )
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description='The default value for a merge commit title.\n- `PR_TITLE` - default to the pull request\'s title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., "Merge pull request #123 from branch-name").',
    )
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.**",
    )


class WebhookPullRequestConvertedToDraft(GitHubModel):
    """pull_request converted_to_draft event"""

    action: Literal["converted_to_draft"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    number: int = Field(description="The pull request number.")
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    pull_request: WebhookPullRequestConvertedToDraftPropPullRequest = Field()
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookPullRequestConvertedToDraftPropPullRequest(GitHubModel):
    """WebhookPullRequestConvertedToDraftPropPullRequest"""

    url: str = Field()
    id: int = Field()
    node_id: str = Field()
    html_url: str = Field()
    diff_url: str = Field()
    patch_url: str = Field()
    issue_url: str = Field()
    commits_url: str = Field()
    review_comments_url: str = Field()
    review_comment_url: str = Field()
    comments_url: str = Field()
    statuses_url: str = Field()
    number: int = Field(
        description="Number uniquely identifying the pull request within its repository."
    )
    state: Literal["open", "closed"] = Field(
        description="State of this Pull Request. Either `open` or `closed`."
    )
    locked: bool = Field()
    title: str = Field(description="The title of the pull request.")
    user: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    body: Union[str, None] = Field()
    labels: List[PullRequestPropLabelsItems] = Field()
    milestone: Union[None, Milestone] = Field()
    active_lock_reason: Missing[Union[str, None]] = Field(default=UNSET)
    created_at: datetime = Field()
    updated_at: datetime = Field()
    closed_at: Union[datetime, None] = Field()
    merged_at: Union[datetime, None] = Field()
    merge_commit_sha: Union[str, None] = Field()
    assignee: Union[None, SimpleUser] = Field()
    assignees: Missing[Union[List[SimpleUser], None]] = Field(default=UNSET)
    requested_reviewers: Missing[Union[List[SimpleUser], None]] = Field(default=UNSET)
    requested_teams: Missing[Union[List[TeamSimple], None]] = Field(default=UNSET)
    head: PullRequestPropHead = Field()
    base: PullRequestPropBase = Field()
    links: PullRequestPropLinks = Field(alias="_links")
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="author_association",
        description="How the author is associated with the repository.",
    )
    auto_merge: Union[AutoMerge, None] = Field(
        title="Auto merge", description="The status of auto merging a pull request."
    )
    draft: Missing[bool] = Field(
        default=UNSET,
        description="Indicates whether or not the pull request is a draft.",
    )
    merged: bool = Field()
    mergeable: Union[bool, None] = Field()
    rebaseable: Missing[Union[bool, None]] = Field(default=UNSET)
    mergeable_state: str = Field()
    merged_by: Union[None, SimpleUser] = Field()
    comments: int = Field()
    review_comments: int = Field()
    maintainer_can_modify: bool = Field(
        description="Indicates whether maintainers can modify the pull request."
    )
    commits: int = Field()
    additions: int = Field()
    deletions: int = Field()
    changed_files: int = Field()
    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(
        default=UNSET,
        description="Whether to allow updating the pull request's branch.",
    )
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged.",
    )
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description='The default value for a merge commit title.\n- `PR_TITLE` - default to the pull request\'s title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., "Merge pull request #123 from branch-name").',
    )
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.**",
    )


class WebhookPullRequestConvertedToDraftPropPullRequestAllof1(GitHubModel):
    """WebhookPullRequestConvertedToDraftPropPullRequestAllof1"""

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(
        default=UNSET,
        description="Whether to allow updating the pull request's branch.",
    )
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged.",
    )
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description='The default value for a merge commit title.\n- `PR_TITLE` - default to the pull request\'s title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., "Merge pull request #123 from branch-name").',
    )
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.**",
    )


class WebhookPullRequestDemilestoned(GitHubModel):
    """pull_request demilestoned event"""

    action: Literal["demilestoned"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    milestone: Missing[Milestone] = Field(
        default=UNSET,
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    number: int = Field(description="The pull request number.")
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    pull_request: WebhookPullRequestDemilestonedPropPullRequest = Field(
        title="Pull Request"
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: Missing[SimpleUserWebhooks] = Field(
        default=UNSET,
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookPullRequestDemilestonedPropPullRequest(GitHubModel):
    """Pull Request"""

    links: WebhookPullRequestDemilestonedPropPullRequestPropLinks = Field(
        alias="_links"
    )
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    additions: Missing[int] = Field(default=UNSET)
    assignee: Union[
        WebhookPullRequestDemilestonedPropPullRequestPropAssignee, None
    ] = Field(title="User")
    assignees: List[
        Union[WebhookPullRequestDemilestonedPropPullRequestPropAssigneesItems, None]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    auto_merge: Union[
        WebhookPullRequestDemilestonedPropPullRequestPropAutoMerge, None
    ] = Field(
        title="PullRequestAutoMerge",
        description="The status of auto merging a pull request.",
    )
    base: WebhookPullRequestDemilestonedPropPullRequestPropBase = Field()
    body: Union[str, None] = Field()
    changed_files: Missing[int] = Field(default=UNSET)
    closed_at: Union[datetime, None] = Field()
    comments: Missing[int] = Field(default=UNSET)
    comments_url: str = Field()
    commits: Missing[int] = Field(default=UNSET)
    commits_url: str = Field()
    created_at: datetime = Field()
    deletions: Missing[int] = Field(default=UNSET)
    diff_url: str = Field()
    draft: bool = Field(
        description="Indicates whether or not the pull request is a draft."
    )
    head: WebhookPullRequestDemilestonedPropPullRequestPropHead = Field()
    html_url: str = Field()
    id: int = Field()
    issue_url: str = Field()
    labels: List[WebhookPullRequestDemilestonedPropPullRequestPropLabelsItems] = Field()
    locked: bool = Field()
    maintainer_can_modify: Missing[bool] = Field(
        default=UNSET,
        description="Indicates whether maintainers can modify the pull request.",
    )
    merge_commit_sha: Union[str, None] = Field()
    mergeable: Missing[Union[bool, None]] = Field(default=UNSET)
    mergeable_state: Missing[str] = Field(default=UNSET)
    merged: Missing[Union[bool, None]] = Field(default=UNSET)
    merged_at: Union[datetime, None] = Field()
    merged_by: Missing[
        Union[WebhookPullRequestDemilestonedPropPullRequestPropMergedBy, None]
    ] = Field(default=UNSET, title="User")
    milestone: Union[
        WebhookPullRequestDemilestonedPropPullRequestPropMilestone, None
    ] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field(
        description="Number uniquely identifying the pull request within its repository."
    )
    patch_url: str = Field()
    rebaseable: Missing[Union[bool, None]] = Field(default=UNSET)
    requested_reviewers: List[
        Union[
            WebhookPullRequestDemilestonedPropPullRequestPropRequestedReviewersItemsOneof0,
            None,
            WebhookPullRequestDemilestonedPropPullRequestPropRequestedReviewersItemsOneof1,
        ]
    ] = Field()
    requested_teams: List[
        WebhookPullRequestDemilestonedPropPullRequestPropRequestedTeamsItems
    ] = Field()
    review_comment_url: str = Field()
    review_comments: Missing[int] = Field(default=UNSET)
    review_comments_url: str = Field()
    state: Literal["open", "closed"] = Field(
        description="State of this Pull Request. Either `open` or `closed`."
    )
    statuses_url: str = Field()
    title: str = Field(description="The title of the pull request.")
    updated_at: datetime = Field()
    url: str = Field()
    user: Union[WebhookPullRequestDemilestonedPropPullRequestPropUser, None] = Field(
        title="User"
    )


class WebhookPullRequestDemilestonedPropPullRequestPropLinks(GitHubModel):
    """WebhookPullRequestDemilestonedPropPullRequestPropLinks"""

    comments: WebhookPullRequestDemilestonedPropPullRequestPropLinksPropComments = (
        Field(title="Link")
    )
    commits: WebhookPullRequestDemilestonedPropPullRequestPropLinksPropCommits = Field(
        title="Link"
    )
    html: WebhookPullRequestDemilestonedPropPullRequestPropLinksPropHtml = Field(
        title="Link"
    )
    issue: WebhookPullRequestDemilestonedPropPullRequestPropLinksPropIssue = Field(
        title="Link"
    )
    review_comment: WebhookPullRequestDemilestonedPropPullRequestPropLinksPropReviewComment = Field(
        title="Link"
    )
    review_comments: WebhookPullRequestDemilestonedPropPullRequestPropLinksPropReviewComments = Field(
        title="Link"
    )
    self_: WebhookPullRequestDemilestonedPropPullRequestPropLinksPropSelf = Field(
        alias="self", title="Link"
    )
    statuses: WebhookPullRequestDemilestonedPropPullRequestPropLinksPropStatuses = (
        Field(title="Link")
    )


class WebhookPullRequestDemilestonedPropPullRequestPropLinksPropComments(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestDemilestonedPropPullRequestPropLinksPropCommits(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestDemilestonedPropPullRequestPropLinksPropHtml(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestDemilestonedPropPullRequestPropLinksPropIssue(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestDemilestonedPropPullRequestPropLinksPropReviewComment(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestDemilestonedPropPullRequestPropLinksPropReviewComments(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestDemilestonedPropPullRequestPropLinksPropSelf(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestDemilestonedPropPullRequestPropLinksPropStatuses(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestDemilestonedPropPullRequestPropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestDemilestonedPropPullRequestPropAssigneesItems(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestDemilestonedPropPullRequestPropAutoMergePropEnabledBy(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestDemilestonedPropPullRequestPropAutoMerge(GitHubModel):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None] = Field(
        description="Commit message for the merge commit."
    )
    commit_title: Union[str, None] = Field(
        description="Title for the merge commit message."
    )
    enabled_by: Union[
        WebhookPullRequestDemilestonedPropPullRequestPropAutoMergePropEnabledBy, None
    ] = Field(title="User")
    merge_method: Literal["merge", "squash", "rebase"] = Field(
        description="The merge method to use."
    )


class WebhookPullRequestDemilestonedPropPullRequestPropBase(GitHubModel):
    """WebhookPullRequestDemilestonedPropPullRequestPropBase"""

    label: str = Field()
    ref: str = Field()
    repo: WebhookPullRequestDemilestonedPropPullRequestPropBasePropRepo = Field(
        title="Repository", description="A git repository"
    )
    sha: str = Field()
    user: Union[
        WebhookPullRequestDemilestonedPropPullRequestPropBasePropUser, None
    ] = Field(title="User")


class WebhookPullRequestDemilestonedPropPullRequestPropBasePropRepo(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestDemilestonedPropPullRequestPropBasePropRepoPropLicense, None
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestDemilestonedPropPullRequestPropBasePropRepoPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestDemilestonedPropPullRequestPropBasePropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestDemilestonedPropPullRequestPropBasePropRepoPropLicense(
    GitHubModel
):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestDemilestonedPropPullRequestPropBasePropRepoPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestDemilestonedPropPullRequestPropBasePropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestDemilestonedPropPullRequestPropBasePropRepoPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestDemilestonedPropPullRequestPropBasePropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestDemilestonedPropPullRequestPropHead(GitHubModel):
    """WebhookPullRequestDemilestonedPropPullRequestPropHead"""

    label: str = Field()
    ref: str = Field()
    repo: WebhookPullRequestDemilestonedPropPullRequestPropHeadPropRepo = Field(
        title="Repository", description="A git repository"
    )
    sha: str = Field()
    user: Union[
        WebhookPullRequestDemilestonedPropPullRequestPropHeadPropUser, None
    ] = Field(title="User")


class WebhookPullRequestDemilestonedPropPullRequestPropHeadPropRepo(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestDemilestonedPropPullRequestPropHeadPropRepoPropLicense, None
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestDemilestonedPropPullRequestPropHeadPropRepoPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestDemilestonedPropPullRequestPropHeadPropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestDemilestonedPropPullRequestPropHeadPropRepoPropLicense(
    GitHubModel
):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestDemilestonedPropPullRequestPropHeadPropRepoPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestDemilestonedPropPullRequestPropHeadPropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestDemilestonedPropPullRequestPropHeadPropRepoPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestDemilestonedPropPullRequestPropHeadPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestDemilestonedPropPullRequestPropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookPullRequestDemilestonedPropPullRequestPropMergedBy(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestDemilestonedPropPullRequestPropMilestonePropCreator(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestDemilestonedPropPullRequestPropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookPullRequestDemilestonedPropPullRequestPropMilestonePropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookPullRequestDemilestonedPropPullRequestPropRequestedReviewersItemsOneof0(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestDemilestonedPropPullRequestPropRequestedReviewersItemsOneof1(
    GitHubModel
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Description of the team"
    )
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field(description="Unique identifier of the team")
    members_url: Missing[str] = Field(default=UNSET)
    name: str = Field(description="Name of the team")
    node_id: Missing[str] = Field(default=UNSET)
    parent: Missing[
        Union[
            WebhookPullRequestDemilestonedPropPullRequestPropRequestedReviewersItemsOneof1PropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: Missing[str] = Field(
        default=UNSET,
        description="Permission that the team will have for its repositories",
    )
    privacy: Missing[Literal["open", "closed", "secret"]] = Field(default=UNSET)
    repositories_url: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET, description="URL for the team")


class WebhookPullRequestDemilestonedPropPullRequestPropRequestedReviewersItemsOneof1PropParent(
    GitHubModel
):
    """WebhookPullRequestDemilestonedPropPullRequestPropRequestedReviewersItemsOneof1Pr
    opParent
    """

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestDemilestonedPropPullRequestPropRequestedTeamsItems(GitHubModel):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Description of the team"
    )
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field(description="Unique identifier of the team")
    members_url: Missing[str] = Field(default=UNSET)
    name: str = Field(description="Name of the team")
    node_id: Missing[str] = Field(default=UNSET)
    parent: Missing[
        Union[
            WebhookPullRequestDemilestonedPropPullRequestPropRequestedTeamsItemsPropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: Missing[str] = Field(
        default=UNSET,
        description="Permission that the team will have for its repositories",
    )
    privacy: Missing[Literal["open", "closed", "secret"]] = Field(default=UNSET)
    repositories_url: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET, description="URL for the team")


class WebhookPullRequestDemilestonedPropPullRequestPropRequestedTeamsItemsPropParent(
    GitHubModel
):
    """WebhookPullRequestDemilestonedPropPullRequestPropRequestedTeamsItemsPropParent"""

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestDemilestonedPropPullRequestPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestDequeued(GitHubModel):
    """pull_request dequeued event"""

    action: Literal["dequeued"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    number: int = Field()
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    pull_request: WebhookPullRequestDequeuedPropPullRequest = Field(
        title="Pull Request"
    )
    reason: str = Field()
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookPullRequestDequeuedPropPullRequest(GitHubModel):
    """Pull Request"""

    links: WebhookPullRequestDequeuedPropPullRequestPropLinks = Field(alias="_links")
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    additions: Missing[int] = Field(default=UNSET)
    assignee: Union[
        WebhookPullRequestDequeuedPropPullRequestPropAssignee, None
    ] = Field(title="User")
    assignees: List[
        Union[WebhookPullRequestDequeuedPropPullRequestPropAssigneesItems, None]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    auto_merge: Union[
        WebhookPullRequestDequeuedPropPullRequestPropAutoMerge, None
    ] = Field(
        title="PullRequestAutoMerge",
        description="The status of auto merging a pull request.",
    )
    base: WebhookPullRequestDequeuedPropPullRequestPropBase = Field()
    body: Union[str, None] = Field()
    changed_files: Missing[int] = Field(default=UNSET)
    closed_at: Union[datetime, None] = Field()
    comments: Missing[int] = Field(default=UNSET)
    comments_url: str = Field()
    commits: Missing[int] = Field(default=UNSET)
    commits_url: str = Field()
    created_at: datetime = Field()
    deletions: Missing[int] = Field(default=UNSET)
    diff_url: str = Field()
    draft: bool = Field(
        description="Indicates whether or not the pull request is a draft."
    )
    head: WebhookPullRequestDequeuedPropPullRequestPropHead = Field()
    html_url: str = Field()
    id: int = Field()
    issue_url: str = Field()
    labels: List[WebhookPullRequestDequeuedPropPullRequestPropLabelsItems] = Field()
    locked: bool = Field()
    maintainer_can_modify: Missing[bool] = Field(
        default=UNSET,
        description="Indicates whether maintainers can modify the pull request.",
    )
    merge_commit_sha: Union[str, None] = Field()
    mergeable: Missing[Union[bool, None]] = Field(default=UNSET)
    mergeable_state: Missing[str] = Field(default=UNSET)
    merged: Missing[Union[bool, None]] = Field(default=UNSET)
    merged_at: Union[datetime, None] = Field()
    merged_by: Missing[
        Union[WebhookPullRequestDequeuedPropPullRequestPropMergedBy, None]
    ] = Field(default=UNSET, title="User")
    milestone: Union[
        WebhookPullRequestDequeuedPropPullRequestPropMilestone, None
    ] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field(
        description="Number uniquely identifying the pull request within its repository."
    )
    patch_url: str = Field()
    rebaseable: Missing[Union[bool, None]] = Field(default=UNSET)
    requested_reviewers: List[
        Union[
            WebhookPullRequestDequeuedPropPullRequestPropRequestedReviewersItemsOneof0,
            None,
            WebhookPullRequestDequeuedPropPullRequestPropRequestedReviewersItemsOneof1,
        ]
    ] = Field()
    requested_teams: List[
        WebhookPullRequestDequeuedPropPullRequestPropRequestedTeamsItems
    ] = Field()
    review_comment_url: str = Field()
    review_comments: Missing[int] = Field(default=UNSET)
    review_comments_url: str = Field()
    state: Literal["open", "closed"] = Field(
        description="State of this Pull Request. Either `open` or `closed`."
    )
    statuses_url: str = Field()
    title: str = Field(description="The title of the pull request.")
    updated_at: datetime = Field()
    url: str = Field()
    user: Union[WebhookPullRequestDequeuedPropPullRequestPropUser, None] = Field(
        title="User"
    )


class WebhookPullRequestDequeuedPropPullRequestPropLinks(GitHubModel):
    """WebhookPullRequestDequeuedPropPullRequestPropLinks"""

    comments: WebhookPullRequestDequeuedPropPullRequestPropLinksPropComments = Field(
        title="Link"
    )
    commits: WebhookPullRequestDequeuedPropPullRequestPropLinksPropCommits = Field(
        title="Link"
    )
    html: WebhookPullRequestDequeuedPropPullRequestPropLinksPropHtml = Field(
        title="Link"
    )
    issue: WebhookPullRequestDequeuedPropPullRequestPropLinksPropIssue = Field(
        title="Link"
    )
    review_comment: WebhookPullRequestDequeuedPropPullRequestPropLinksPropReviewComment = Field(
        title="Link"
    )
    review_comments: WebhookPullRequestDequeuedPropPullRequestPropLinksPropReviewComments = Field(
        title="Link"
    )
    self_: WebhookPullRequestDequeuedPropPullRequestPropLinksPropSelf = Field(
        alias="self", title="Link"
    )
    statuses: WebhookPullRequestDequeuedPropPullRequestPropLinksPropStatuses = Field(
        title="Link"
    )


class WebhookPullRequestDequeuedPropPullRequestPropLinksPropComments(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestDequeuedPropPullRequestPropLinksPropCommits(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestDequeuedPropPullRequestPropLinksPropHtml(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestDequeuedPropPullRequestPropLinksPropIssue(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestDequeuedPropPullRequestPropLinksPropReviewComment(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestDequeuedPropPullRequestPropLinksPropReviewComments(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestDequeuedPropPullRequestPropLinksPropSelf(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestDequeuedPropPullRequestPropLinksPropStatuses(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestDequeuedPropPullRequestPropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestDequeuedPropPullRequestPropAssigneesItems(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestDequeuedPropPullRequestPropAutoMergePropEnabledBy(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestDequeuedPropPullRequestPropAutoMerge(GitHubModel):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None] = Field(
        description="Commit message for the merge commit."
    )
    commit_title: Union[str, None] = Field(
        description="Title for the merge commit message."
    )
    enabled_by: Union[
        WebhookPullRequestDequeuedPropPullRequestPropAutoMergePropEnabledBy, None
    ] = Field(title="User")
    merge_method: Literal["merge", "squash", "rebase"] = Field(
        description="The merge method to use."
    )


class WebhookPullRequestDequeuedPropPullRequestPropBase(GitHubModel):
    """WebhookPullRequestDequeuedPropPullRequestPropBase"""

    label: str = Field()
    ref: str = Field()
    repo: WebhookPullRequestDequeuedPropPullRequestPropBasePropRepo = Field(
        title="Repository", description="A git repository"
    )
    sha: str = Field()
    user: Union[
        WebhookPullRequestDequeuedPropPullRequestPropBasePropUser, None
    ] = Field(title="User")


class WebhookPullRequestDequeuedPropPullRequestPropBasePropRepo(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestDequeuedPropPullRequestPropBasePropRepoPropLicense, None
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestDequeuedPropPullRequestPropBasePropRepoPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestDequeuedPropPullRequestPropBasePropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestDequeuedPropPullRequestPropBasePropRepoPropLicense(GitHubModel):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestDequeuedPropPullRequestPropBasePropRepoPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestDequeuedPropPullRequestPropBasePropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestDequeuedPropPullRequestPropBasePropRepoPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestDequeuedPropPullRequestPropBasePropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestDequeuedPropPullRequestPropHead(GitHubModel):
    """WebhookPullRequestDequeuedPropPullRequestPropHead"""

    label: str = Field()
    ref: str = Field()
    repo: WebhookPullRequestDequeuedPropPullRequestPropHeadPropRepo = Field(
        title="Repository", description="A git repository"
    )
    sha: str = Field()
    user: Union[
        WebhookPullRequestDequeuedPropPullRequestPropHeadPropUser, None
    ] = Field(title="User")


class WebhookPullRequestDequeuedPropPullRequestPropHeadPropRepo(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestDequeuedPropPullRequestPropHeadPropRepoPropLicense, None
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestDequeuedPropPullRequestPropHeadPropRepoPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestDequeuedPropPullRequestPropHeadPropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestDequeuedPropPullRequestPropHeadPropRepoPropLicense(GitHubModel):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestDequeuedPropPullRequestPropHeadPropRepoPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestDequeuedPropPullRequestPropHeadPropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestDequeuedPropPullRequestPropHeadPropRepoPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestDequeuedPropPullRequestPropHeadPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestDequeuedPropPullRequestPropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookPullRequestDequeuedPropPullRequestPropMergedBy(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestDequeuedPropPullRequestPropMilestonePropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestDequeuedPropPullRequestPropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookPullRequestDequeuedPropPullRequestPropMilestonePropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookPullRequestDequeuedPropPullRequestPropRequestedReviewersItemsOneof0(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestDequeuedPropPullRequestPropRequestedReviewersItemsOneof1(
    GitHubModel
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Description of the team"
    )
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field(description="Unique identifier of the team")
    members_url: Missing[str] = Field(default=UNSET)
    name: str = Field(description="Name of the team")
    node_id: Missing[str] = Field(default=UNSET)
    parent: Missing[
        Union[
            WebhookPullRequestDequeuedPropPullRequestPropRequestedReviewersItemsOneof1PropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: Missing[str] = Field(
        default=UNSET,
        description="Permission that the team will have for its repositories",
    )
    privacy: Missing[Literal["open", "closed", "secret"]] = Field(default=UNSET)
    repositories_url: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET, description="URL for the team")


class WebhookPullRequestDequeuedPropPullRequestPropRequestedReviewersItemsOneof1PropParent(
    GitHubModel
):
    """WebhookPullRequestDequeuedPropPullRequestPropRequestedReviewersItemsOneof1PropPa
    rent
    """

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestDequeuedPropPullRequestPropRequestedTeamsItems(GitHubModel):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Description of the team"
    )
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field(description="Unique identifier of the team")
    members_url: Missing[str] = Field(default=UNSET)
    name: str = Field(description="Name of the team")
    node_id: Missing[str] = Field(default=UNSET)
    parent: Missing[
        Union[
            WebhookPullRequestDequeuedPropPullRequestPropRequestedTeamsItemsPropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: Missing[str] = Field(
        default=UNSET,
        description="Permission that the team will have for its repositories",
    )
    privacy: Missing[Literal["open", "closed", "secret"]] = Field(default=UNSET)
    repositories_url: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET, description="URL for the team")


class WebhookPullRequestDequeuedPropPullRequestPropRequestedTeamsItemsPropParent(
    GitHubModel
):
    """WebhookPullRequestDequeuedPropPullRequestPropRequestedTeamsItemsPropParent"""

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestDequeuedPropPullRequestPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestEdited(GitHubModel):
    """pull_request edited event"""

    action: Literal["edited"] = Field()
    changes: WebhookPullRequestEditedPropChanges = Field(
        description="The changes to the comment if the action was `edited`."
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    number: int = Field(description="The pull request number.")
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    pull_request: WebhookPullRequestEditedPropPullRequest = Field()
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: Missing[SimpleUserWebhooks] = Field(
        default=UNSET,
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookPullRequestEditedPropChanges(GitHubModel):
    """WebhookPullRequestEditedPropChanges

    The changes to the comment if the action was `edited`.
    """

    base: Missing[WebhookPullRequestEditedPropChangesPropBase] = Field(default=UNSET)
    body: Missing[WebhookPullRequestEditedPropChangesPropBody] = Field(default=UNSET)
    title: Missing[WebhookPullRequestEditedPropChangesPropTitle] = Field(default=UNSET)


class WebhookPullRequestEditedPropChangesPropBase(GitHubModel):
    """WebhookPullRequestEditedPropChangesPropBase"""

    ref: WebhookPullRequestEditedPropChangesPropBasePropRef = Field()
    sha: WebhookPullRequestEditedPropChangesPropBasePropSha = Field()


class WebhookPullRequestEditedPropChangesPropBasePropRef(GitHubModel):
    """WebhookPullRequestEditedPropChangesPropBasePropRef"""

    from_: str = Field(alias="from")


class WebhookPullRequestEditedPropChangesPropBasePropSha(GitHubModel):
    """WebhookPullRequestEditedPropChangesPropBasePropSha"""

    from_: str = Field(alias="from")


class WebhookPullRequestEditedPropChangesPropBody(GitHubModel):
    """WebhookPullRequestEditedPropChangesPropBody"""

    from_: str = Field(
        alias="from",
        description="The previous version of the body if the action was `edited`.",
    )


class WebhookPullRequestEditedPropChangesPropTitle(GitHubModel):
    """WebhookPullRequestEditedPropChangesPropTitle"""

    from_: str = Field(
        alias="from",
        description="The previous version of the title if the action was `edited`.",
    )


class WebhookPullRequestEditedPropPullRequest(GitHubModel):
    """WebhookPullRequestEditedPropPullRequest"""

    url: str = Field()
    id: int = Field()
    node_id: str = Field()
    html_url: str = Field()
    diff_url: str = Field()
    patch_url: str = Field()
    issue_url: str = Field()
    commits_url: str = Field()
    review_comments_url: str = Field()
    review_comment_url: str = Field()
    comments_url: str = Field()
    statuses_url: str = Field()
    number: int = Field(
        description="Number uniquely identifying the pull request within its repository."
    )
    state: Literal["open", "closed"] = Field(
        description="State of this Pull Request. Either `open` or `closed`."
    )
    locked: bool = Field()
    title: str = Field(description="The title of the pull request.")
    user: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    body: Union[str, None] = Field()
    labels: List[PullRequestPropLabelsItems] = Field()
    milestone: Union[None, Milestone] = Field()
    active_lock_reason: Missing[Union[str, None]] = Field(default=UNSET)
    created_at: datetime = Field()
    updated_at: datetime = Field()
    closed_at: Union[datetime, None] = Field()
    merged_at: Union[datetime, None] = Field()
    merge_commit_sha: Union[str, None] = Field()
    assignee: Union[None, SimpleUser] = Field()
    assignees: Missing[Union[List[SimpleUser], None]] = Field(default=UNSET)
    requested_reviewers: Missing[Union[List[SimpleUser], None]] = Field(default=UNSET)
    requested_teams: Missing[Union[List[TeamSimple], None]] = Field(default=UNSET)
    head: PullRequestPropHead = Field()
    base: PullRequestPropBase = Field()
    links: PullRequestPropLinks = Field(alias="_links")
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="author_association",
        description="How the author is associated with the repository.",
    )
    auto_merge: Union[AutoMerge, None] = Field(
        title="Auto merge", description="The status of auto merging a pull request."
    )
    draft: Missing[bool] = Field(
        default=UNSET,
        description="Indicates whether or not the pull request is a draft.",
    )
    merged: bool = Field()
    mergeable: Union[bool, None] = Field()
    rebaseable: Missing[Union[bool, None]] = Field(default=UNSET)
    mergeable_state: str = Field()
    merged_by: Union[None, SimpleUser] = Field()
    comments: int = Field()
    review_comments: int = Field()
    maintainer_can_modify: bool = Field(
        description="Indicates whether maintainers can modify the pull request."
    )
    commits: int = Field()
    additions: int = Field()
    deletions: int = Field()
    changed_files: int = Field()
    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(
        default=UNSET,
        description="Whether to allow updating the pull request's branch.",
    )
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged.",
    )
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description='The default value for a merge commit title.\n- `PR_TITLE` - default to the pull request\'s title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., "Merge pull request #123 from branch-name").',
    )
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )


class WebhookPullRequestEditedPropPullRequestAllof1(GitHubModel):
    """WebhookPullRequestEditedPropPullRequestAllof1"""

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(
        default=UNSET,
        description="Whether to allow updating the pull request's branch.",
    )
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged.",
    )
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description='The default value for a merge commit title.\n- `PR_TITLE` - default to the pull request\'s title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., "Merge pull request #123 from branch-name").',
    )
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )


class WebhookPullRequestEnqueued(GitHubModel):
    """pull_request enqueued event"""

    action: Literal["enqueued"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    number: int = Field()
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    pull_request: WebhookPullRequestEnqueuedPropPullRequest = Field(
        title="Pull Request"
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookPullRequestEnqueuedPropPullRequest(GitHubModel):
    """Pull Request"""

    links: WebhookPullRequestEnqueuedPropPullRequestPropLinks = Field(alias="_links")
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    additions: Missing[int] = Field(default=UNSET)
    assignee: Union[
        WebhookPullRequestEnqueuedPropPullRequestPropAssignee, None
    ] = Field(title="User")
    assignees: List[
        Union[WebhookPullRequestEnqueuedPropPullRequestPropAssigneesItems, None]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    auto_merge: Union[
        WebhookPullRequestEnqueuedPropPullRequestPropAutoMerge, None
    ] = Field(
        title="PullRequestAutoMerge",
        description="The status of auto merging a pull request.",
    )
    base: WebhookPullRequestEnqueuedPropPullRequestPropBase = Field()
    body: Union[str, None] = Field()
    changed_files: Missing[int] = Field(default=UNSET)
    closed_at: Union[datetime, None] = Field()
    comments: Missing[int] = Field(default=UNSET)
    comments_url: str = Field()
    commits: Missing[int] = Field(default=UNSET)
    commits_url: str = Field()
    created_at: datetime = Field()
    deletions: Missing[int] = Field(default=UNSET)
    diff_url: str = Field()
    draft: bool = Field(
        description="Indicates whether or not the pull request is a draft."
    )
    head: WebhookPullRequestEnqueuedPropPullRequestPropHead = Field()
    html_url: str = Field()
    id: int = Field()
    issue_url: str = Field()
    labels: List[WebhookPullRequestEnqueuedPropPullRequestPropLabelsItems] = Field()
    locked: bool = Field()
    maintainer_can_modify: Missing[bool] = Field(
        default=UNSET,
        description="Indicates whether maintainers can modify the pull request.",
    )
    merge_commit_sha: Union[str, None] = Field()
    mergeable: Missing[Union[bool, None]] = Field(default=UNSET)
    mergeable_state: Missing[str] = Field(default=UNSET)
    merged: Missing[Union[bool, None]] = Field(default=UNSET)
    merged_at: Union[datetime, None] = Field()
    merged_by: Missing[
        Union[WebhookPullRequestEnqueuedPropPullRequestPropMergedBy, None]
    ] = Field(default=UNSET, title="User")
    milestone: Union[
        WebhookPullRequestEnqueuedPropPullRequestPropMilestone, None
    ] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field(
        description="Number uniquely identifying the pull request within its repository."
    )
    patch_url: str = Field()
    rebaseable: Missing[Union[bool, None]] = Field(default=UNSET)
    requested_reviewers: List[
        Union[
            WebhookPullRequestEnqueuedPropPullRequestPropRequestedReviewersItemsOneof0,
            None,
            WebhookPullRequestEnqueuedPropPullRequestPropRequestedReviewersItemsOneof1,
        ]
    ] = Field()
    requested_teams: List[
        WebhookPullRequestEnqueuedPropPullRequestPropRequestedTeamsItems
    ] = Field()
    review_comment_url: str = Field()
    review_comments: Missing[int] = Field(default=UNSET)
    review_comments_url: str = Field()
    state: Literal["open", "closed"] = Field(
        description="State of this Pull Request. Either `open` or `closed`."
    )
    statuses_url: str = Field()
    title: str = Field(description="The title of the pull request.")
    updated_at: datetime = Field()
    url: str = Field()
    user: Union[WebhookPullRequestEnqueuedPropPullRequestPropUser, None] = Field(
        title="User"
    )


class WebhookPullRequestEnqueuedPropPullRequestPropLinks(GitHubModel):
    """WebhookPullRequestEnqueuedPropPullRequestPropLinks"""

    comments: WebhookPullRequestEnqueuedPropPullRequestPropLinksPropComments = Field(
        title="Link"
    )
    commits: WebhookPullRequestEnqueuedPropPullRequestPropLinksPropCommits = Field(
        title="Link"
    )
    html: WebhookPullRequestEnqueuedPropPullRequestPropLinksPropHtml = Field(
        title="Link"
    )
    issue: WebhookPullRequestEnqueuedPropPullRequestPropLinksPropIssue = Field(
        title="Link"
    )
    review_comment: WebhookPullRequestEnqueuedPropPullRequestPropLinksPropReviewComment = Field(
        title="Link"
    )
    review_comments: WebhookPullRequestEnqueuedPropPullRequestPropLinksPropReviewComments = Field(
        title="Link"
    )
    self_: WebhookPullRequestEnqueuedPropPullRequestPropLinksPropSelf = Field(
        alias="self", title="Link"
    )
    statuses: WebhookPullRequestEnqueuedPropPullRequestPropLinksPropStatuses = Field(
        title="Link"
    )


class WebhookPullRequestEnqueuedPropPullRequestPropLinksPropComments(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestEnqueuedPropPullRequestPropLinksPropCommits(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestEnqueuedPropPullRequestPropLinksPropHtml(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestEnqueuedPropPullRequestPropLinksPropIssue(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestEnqueuedPropPullRequestPropLinksPropReviewComment(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestEnqueuedPropPullRequestPropLinksPropReviewComments(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestEnqueuedPropPullRequestPropLinksPropSelf(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestEnqueuedPropPullRequestPropLinksPropStatuses(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestEnqueuedPropPullRequestPropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestEnqueuedPropPullRequestPropAssigneesItems(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestEnqueuedPropPullRequestPropAutoMergePropEnabledBy(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestEnqueuedPropPullRequestPropAutoMerge(GitHubModel):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None] = Field(
        description="Commit message for the merge commit."
    )
    commit_title: Union[str, None] = Field(
        description="Title for the merge commit message."
    )
    enabled_by: Union[
        WebhookPullRequestEnqueuedPropPullRequestPropAutoMergePropEnabledBy, None
    ] = Field(title="User")
    merge_method: Literal["merge", "squash", "rebase"] = Field(
        description="The merge method to use."
    )


class WebhookPullRequestEnqueuedPropPullRequestPropBase(GitHubModel):
    """WebhookPullRequestEnqueuedPropPullRequestPropBase"""

    label: str = Field()
    ref: str = Field()
    repo: WebhookPullRequestEnqueuedPropPullRequestPropBasePropRepo = Field(
        title="Repository", description="A git repository"
    )
    sha: str = Field()
    user: Union[
        WebhookPullRequestEnqueuedPropPullRequestPropBasePropUser, None
    ] = Field(title="User")


class WebhookPullRequestEnqueuedPropPullRequestPropBasePropRepo(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestEnqueuedPropPullRequestPropBasePropRepoPropLicense, None
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestEnqueuedPropPullRequestPropBasePropRepoPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestEnqueuedPropPullRequestPropBasePropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestEnqueuedPropPullRequestPropBasePropRepoPropLicense(GitHubModel):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestEnqueuedPropPullRequestPropBasePropRepoPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestEnqueuedPropPullRequestPropBasePropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestEnqueuedPropPullRequestPropBasePropRepoPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestEnqueuedPropPullRequestPropBasePropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestEnqueuedPropPullRequestPropHead(GitHubModel):
    """WebhookPullRequestEnqueuedPropPullRequestPropHead"""

    label: str = Field()
    ref: str = Field()
    repo: WebhookPullRequestEnqueuedPropPullRequestPropHeadPropRepo = Field(
        title="Repository", description="A git repository"
    )
    sha: str = Field()
    user: Union[
        WebhookPullRequestEnqueuedPropPullRequestPropHeadPropUser, None
    ] = Field(title="User")


class WebhookPullRequestEnqueuedPropPullRequestPropHeadPropRepo(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestEnqueuedPropPullRequestPropHeadPropRepoPropLicense, None
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestEnqueuedPropPullRequestPropHeadPropRepoPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestEnqueuedPropPullRequestPropHeadPropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestEnqueuedPropPullRequestPropHeadPropRepoPropLicense(GitHubModel):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestEnqueuedPropPullRequestPropHeadPropRepoPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestEnqueuedPropPullRequestPropHeadPropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestEnqueuedPropPullRequestPropHeadPropRepoPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestEnqueuedPropPullRequestPropHeadPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestEnqueuedPropPullRequestPropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookPullRequestEnqueuedPropPullRequestPropMergedBy(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestEnqueuedPropPullRequestPropMilestonePropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestEnqueuedPropPullRequestPropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookPullRequestEnqueuedPropPullRequestPropMilestonePropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookPullRequestEnqueuedPropPullRequestPropRequestedReviewersItemsOneof0(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestEnqueuedPropPullRequestPropRequestedReviewersItemsOneof1(
    GitHubModel
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Description of the team"
    )
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field(description="Unique identifier of the team")
    members_url: Missing[str] = Field(default=UNSET)
    name: str = Field(description="Name of the team")
    node_id: Missing[str] = Field(default=UNSET)
    parent: Missing[
        Union[
            WebhookPullRequestEnqueuedPropPullRequestPropRequestedReviewersItemsOneof1PropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: Missing[str] = Field(
        default=UNSET,
        description="Permission that the team will have for its repositories",
    )
    privacy: Missing[Literal["open", "closed", "secret"]] = Field(default=UNSET)
    repositories_url: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET, description="URL for the team")


class WebhookPullRequestEnqueuedPropPullRequestPropRequestedReviewersItemsOneof1PropParent(
    GitHubModel
):
    """WebhookPullRequestEnqueuedPropPullRequestPropRequestedReviewersItemsOneof1PropPa
    rent
    """

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestEnqueuedPropPullRequestPropRequestedTeamsItems(GitHubModel):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Description of the team"
    )
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field(description="Unique identifier of the team")
    members_url: Missing[str] = Field(default=UNSET)
    name: str = Field(description="Name of the team")
    node_id: Missing[str] = Field(default=UNSET)
    parent: Missing[
        Union[
            WebhookPullRequestEnqueuedPropPullRequestPropRequestedTeamsItemsPropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: Missing[str] = Field(
        default=UNSET,
        description="Permission that the team will have for its repositories",
    )
    privacy: Missing[Literal["open", "closed", "secret"]] = Field(default=UNSET)
    repositories_url: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET, description="URL for the team")


class WebhookPullRequestEnqueuedPropPullRequestPropRequestedTeamsItemsPropParent(
    GitHubModel
):
    """WebhookPullRequestEnqueuedPropPullRequestPropRequestedTeamsItemsPropParent"""

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestEnqueuedPropPullRequestPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestLabeled(GitHubModel):
    """pull_request labeled event"""

    action: Literal["labeled"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    label: Missing[WebhookPullRequestLabeledPropLabel] = Field(
        default=UNSET, title="Label"
    )
    number: int = Field(description="The pull request number.")
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    pull_request: WebhookPullRequestLabeledPropPullRequest = Field(title="Pull Request")
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookPullRequestLabeledPropLabel(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookPullRequestLabeledPropPullRequest(GitHubModel):
    """Pull Request"""

    links: WebhookPullRequestLabeledPropPullRequestPropLinks = Field(alias="_links")
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    additions: Missing[int] = Field(default=UNSET)
    assignee: Union[WebhookPullRequestLabeledPropPullRequestPropAssignee, None] = Field(
        title="User"
    )
    assignees: List[
        Union[WebhookPullRequestLabeledPropPullRequestPropAssigneesItems, None]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    auto_merge: Union[
        WebhookPullRequestLabeledPropPullRequestPropAutoMerge, None
    ] = Field(
        title="PullRequestAutoMerge",
        description="The status of auto merging a pull request.",
    )
    base: WebhookPullRequestLabeledPropPullRequestPropBase = Field()
    body: Union[str, None] = Field()
    changed_files: Missing[int] = Field(default=UNSET)
    closed_at: Union[datetime, None] = Field()
    comments: Missing[int] = Field(default=UNSET)
    comments_url: str = Field()
    commits: Missing[int] = Field(default=UNSET)
    commits_url: str = Field()
    created_at: datetime = Field()
    deletions: Missing[int] = Field(default=UNSET)
    diff_url: str = Field()
    draft: bool = Field(
        description="Indicates whether or not the pull request is a draft."
    )
    head: WebhookPullRequestLabeledPropPullRequestPropHead = Field()
    html_url: str = Field()
    id: int = Field()
    issue_url: str = Field()
    labels: List[WebhookPullRequestLabeledPropPullRequestPropLabelsItems] = Field()
    locked: bool = Field()
    maintainer_can_modify: Missing[bool] = Field(
        default=UNSET,
        description="Indicates whether maintainers can modify the pull request.",
    )
    merge_commit_sha: Union[str, None] = Field()
    mergeable: Missing[Union[bool, None]] = Field(default=UNSET)
    mergeable_state: Missing[str] = Field(default=UNSET)
    merged: Missing[Union[bool, None]] = Field(default=UNSET)
    merged_at: Union[datetime, None] = Field()
    merged_by: Missing[
        Union[WebhookPullRequestLabeledPropPullRequestPropMergedBy, None]
    ] = Field(default=UNSET, title="User")
    milestone: Union[
        WebhookPullRequestLabeledPropPullRequestPropMilestone, None
    ] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field(
        description="Number uniquely identifying the pull request within its repository."
    )
    patch_url: str = Field()
    rebaseable: Missing[Union[bool, None]] = Field(default=UNSET)
    requested_reviewers: List[
        Union[
            WebhookPullRequestLabeledPropPullRequestPropRequestedReviewersItemsOneof0,
            None,
            WebhookPullRequestLabeledPropPullRequestPropRequestedReviewersItemsOneof1,
        ]
    ] = Field()
    requested_teams: List[
        WebhookPullRequestLabeledPropPullRequestPropRequestedTeamsItems
    ] = Field()
    review_comment_url: str = Field()
    review_comments: Missing[int] = Field(default=UNSET)
    review_comments_url: str = Field()
    state: Literal["open", "closed"] = Field(
        description="State of this Pull Request. Either `open` or `closed`."
    )
    statuses_url: str = Field()
    title: str = Field(description="The title of the pull request.")
    updated_at: datetime = Field()
    url: str = Field()
    user: Union[WebhookPullRequestLabeledPropPullRequestPropUser, None] = Field(
        title="User"
    )


class WebhookPullRequestLabeledPropPullRequestPropLinks(GitHubModel):
    """WebhookPullRequestLabeledPropPullRequestPropLinks"""

    comments: WebhookPullRequestLabeledPropPullRequestPropLinksPropComments = Field(
        title="Link"
    )
    commits: WebhookPullRequestLabeledPropPullRequestPropLinksPropCommits = Field(
        title="Link"
    )
    html: WebhookPullRequestLabeledPropPullRequestPropLinksPropHtml = Field(
        title="Link"
    )
    issue: WebhookPullRequestLabeledPropPullRequestPropLinksPropIssue = Field(
        title="Link"
    )
    review_comment: WebhookPullRequestLabeledPropPullRequestPropLinksPropReviewComment = Field(
        title="Link"
    )
    review_comments: WebhookPullRequestLabeledPropPullRequestPropLinksPropReviewComments = Field(
        title="Link"
    )
    self_: WebhookPullRequestLabeledPropPullRequestPropLinksPropSelf = Field(
        alias="self", title="Link"
    )
    statuses: WebhookPullRequestLabeledPropPullRequestPropLinksPropStatuses = Field(
        title="Link"
    )


class WebhookPullRequestLabeledPropPullRequestPropLinksPropComments(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestLabeledPropPullRequestPropLinksPropCommits(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestLabeledPropPullRequestPropLinksPropHtml(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestLabeledPropPullRequestPropLinksPropIssue(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestLabeledPropPullRequestPropLinksPropReviewComment(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestLabeledPropPullRequestPropLinksPropReviewComments(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestLabeledPropPullRequestPropLinksPropSelf(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestLabeledPropPullRequestPropLinksPropStatuses(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestLabeledPropPullRequestPropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestLabeledPropPullRequestPropAssigneesItems(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestLabeledPropPullRequestPropAutoMergePropEnabledBy(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestLabeledPropPullRequestPropAutoMerge(GitHubModel):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None] = Field(
        description="Commit message for the merge commit."
    )
    commit_title: Union[str, None] = Field(
        description="Title for the merge commit message."
    )
    enabled_by: Union[
        WebhookPullRequestLabeledPropPullRequestPropAutoMergePropEnabledBy, None
    ] = Field(title="User")
    merge_method: Literal["merge", "squash", "rebase"] = Field(
        description="The merge method to use."
    )


class WebhookPullRequestLabeledPropPullRequestPropBase(GitHubModel):
    """WebhookPullRequestLabeledPropPullRequestPropBase"""

    label: str = Field()
    ref: str = Field()
    repo: WebhookPullRequestLabeledPropPullRequestPropBasePropRepo = Field(
        title="Repository", description="A git repository"
    )
    sha: str = Field()
    user: Union[WebhookPullRequestLabeledPropPullRequestPropBasePropUser, None] = Field(
        title="User"
    )


class WebhookPullRequestLabeledPropPullRequestPropBasePropRepo(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestLabeledPropPullRequestPropBasePropRepoPropLicense, None
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestLabeledPropPullRequestPropBasePropRepoPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestLabeledPropPullRequestPropBasePropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestLabeledPropPullRequestPropBasePropRepoPropLicense(GitHubModel):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestLabeledPropPullRequestPropBasePropRepoPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestLabeledPropPullRequestPropBasePropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestLabeledPropPullRequestPropBasePropRepoPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestLabeledPropPullRequestPropBasePropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestLabeledPropPullRequestPropHead(GitHubModel):
    """WebhookPullRequestLabeledPropPullRequestPropHead"""

    label: Union[str, None] = Field()
    ref: str = Field()
    repo: Union[WebhookPullRequestLabeledPropPullRequestPropHeadPropRepo, None] = Field(
        title="Repository", description="A git repository"
    )
    sha: str = Field()
    user: Union[WebhookPullRequestLabeledPropPullRequestPropHeadPropUser, None] = Field(
        title="User"
    )


class WebhookPullRequestLabeledPropPullRequestPropHeadPropRepoPropLicense(GitHubModel):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestLabeledPropPullRequestPropHeadPropRepoPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestLabeledPropPullRequestPropHeadPropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestLabeledPropPullRequestPropHeadPropRepoPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestLabeledPropPullRequestPropHeadPropRepo(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestLabeledPropPullRequestPropHeadPropRepoPropLicense, None
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestLabeledPropPullRequestPropHeadPropRepoPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestLabeledPropPullRequestPropHeadPropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestLabeledPropPullRequestPropHeadPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestLabeledPropPullRequestPropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookPullRequestLabeledPropPullRequestPropMergedBy(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestLabeledPropPullRequestPropMilestonePropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestLabeledPropPullRequestPropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookPullRequestLabeledPropPullRequestPropMilestonePropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookPullRequestLabeledPropPullRequestPropRequestedReviewersItemsOneof0(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestLabeledPropPullRequestPropRequestedReviewersItemsOneof1(
    GitHubModel
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    parent: Missing[
        Union[
            WebhookPullRequestLabeledPropPullRequestPropRequestedReviewersItemsOneof1PropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestLabeledPropPullRequestPropRequestedReviewersItemsOneof1PropParent(
    GitHubModel
):
    """WebhookPullRequestLabeledPropPullRequestPropRequestedReviewersItemsOneof1PropPar
    ent
    """

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestLabeledPropPullRequestPropRequestedTeamsItems(GitHubModel):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Description of the team"
    )
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field(description="Unique identifier of the team")
    members_url: Missing[str] = Field(default=UNSET)
    name: str = Field(description="Name of the team")
    node_id: Missing[str] = Field(default=UNSET)
    parent: Missing[
        Union[
            WebhookPullRequestLabeledPropPullRequestPropRequestedTeamsItemsPropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: Missing[str] = Field(
        default=UNSET,
        description="Permission that the team will have for its repositories",
    )
    privacy: Missing[Literal["open", "closed", "secret"]] = Field(default=UNSET)
    repositories_url: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET, description="URL for the team")


class WebhookPullRequestLabeledPropPullRequestPropRequestedTeamsItemsPropParent(
    GitHubModel
):
    """WebhookPullRequestLabeledPropPullRequestPropRequestedTeamsItemsPropParent"""

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestLabeledPropPullRequestPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestLocked(GitHubModel):
    """pull_request locked event"""

    action: Literal["locked"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    number: int = Field(description="The pull request number.")
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    pull_request: WebhookPullRequestLockedPropPullRequest = Field(title="Pull Request")
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookPullRequestLockedPropPullRequest(GitHubModel):
    """Pull Request"""

    links: WebhookPullRequestLockedPropPullRequestPropLinks = Field(alias="_links")
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    additions: Missing[int] = Field(default=UNSET)
    assignee: Union[WebhookPullRequestLockedPropPullRequestPropAssignee, None] = Field(
        title="User"
    )
    assignees: List[
        Union[WebhookPullRequestLockedPropPullRequestPropAssigneesItems, None]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    auto_merge: Union[
        WebhookPullRequestLockedPropPullRequestPropAutoMerge, None
    ] = Field(
        title="PullRequestAutoMerge",
        description="The status of auto merging a pull request.",
    )
    base: WebhookPullRequestLockedPropPullRequestPropBase = Field()
    body: Union[str, None] = Field()
    changed_files: Missing[int] = Field(default=UNSET)
    closed_at: Union[datetime, None] = Field()
    comments: Missing[int] = Field(default=UNSET)
    comments_url: str = Field()
    commits: Missing[int] = Field(default=UNSET)
    commits_url: str = Field()
    created_at: datetime = Field()
    deletions: Missing[int] = Field(default=UNSET)
    diff_url: str = Field()
    draft: bool = Field(
        description="Indicates whether or not the pull request is a draft."
    )
    head: WebhookPullRequestLockedPropPullRequestPropHead = Field()
    html_url: str = Field()
    id: int = Field()
    issue_url: str = Field()
    labels: List[WebhookPullRequestLockedPropPullRequestPropLabelsItems] = Field()
    locked: bool = Field()
    maintainer_can_modify: Missing[bool] = Field(
        default=UNSET,
        description="Indicates whether maintainers can modify the pull request.",
    )
    merge_commit_sha: Union[str, None] = Field()
    mergeable: Missing[Union[bool, None]] = Field(default=UNSET)
    mergeable_state: Missing[str] = Field(default=UNSET)
    merged: Missing[Union[bool, None]] = Field(default=UNSET)
    merged_at: Union[datetime, None] = Field()
    merged_by: Missing[
        Union[WebhookPullRequestLockedPropPullRequestPropMergedBy, None]
    ] = Field(default=UNSET, title="User")
    milestone: Union[
        WebhookPullRequestLockedPropPullRequestPropMilestone, None
    ] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field(
        description="Number uniquely identifying the pull request within its repository."
    )
    patch_url: str = Field()
    rebaseable: Missing[Union[bool, None]] = Field(default=UNSET)
    requested_reviewers: List[
        Union[
            WebhookPullRequestLockedPropPullRequestPropRequestedReviewersItemsOneof0,
            None,
            WebhookPullRequestLockedPropPullRequestPropRequestedReviewersItemsOneof1,
        ]
    ] = Field()
    requested_teams: List[
        WebhookPullRequestLockedPropPullRequestPropRequestedTeamsItems
    ] = Field()
    review_comment_url: str = Field()
    review_comments: Missing[int] = Field(default=UNSET)
    review_comments_url: str = Field()
    state: Literal["open", "closed"] = Field(
        description="State of this Pull Request. Either `open` or `closed`."
    )
    statuses_url: str = Field()
    title: str = Field(description="The title of the pull request.")
    updated_at: datetime = Field()
    url: str = Field()
    user: Union[WebhookPullRequestLockedPropPullRequestPropUser, None] = Field(
        title="User"
    )


class WebhookPullRequestLockedPropPullRequestPropLinks(GitHubModel):
    """WebhookPullRequestLockedPropPullRequestPropLinks"""

    comments: WebhookPullRequestLockedPropPullRequestPropLinksPropComments = Field(
        title="Link"
    )
    commits: WebhookPullRequestLockedPropPullRequestPropLinksPropCommits = Field(
        title="Link"
    )
    html: WebhookPullRequestLockedPropPullRequestPropLinksPropHtml = Field(title="Link")
    issue: WebhookPullRequestLockedPropPullRequestPropLinksPropIssue = Field(
        title="Link"
    )
    review_comment: WebhookPullRequestLockedPropPullRequestPropLinksPropReviewComment = Field(
        title="Link"
    )
    review_comments: WebhookPullRequestLockedPropPullRequestPropLinksPropReviewComments = Field(
        title="Link"
    )
    self_: WebhookPullRequestLockedPropPullRequestPropLinksPropSelf = Field(
        alias="self", title="Link"
    )
    statuses: WebhookPullRequestLockedPropPullRequestPropLinksPropStatuses = Field(
        title="Link"
    )


class WebhookPullRequestLockedPropPullRequestPropLinksPropComments(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestLockedPropPullRequestPropLinksPropCommits(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestLockedPropPullRequestPropLinksPropHtml(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestLockedPropPullRequestPropLinksPropIssue(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestLockedPropPullRequestPropLinksPropReviewComment(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestLockedPropPullRequestPropLinksPropReviewComments(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestLockedPropPullRequestPropLinksPropSelf(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestLockedPropPullRequestPropLinksPropStatuses(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestLockedPropPullRequestPropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestLockedPropPullRequestPropAssigneesItems(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestLockedPropPullRequestPropAutoMergePropEnabledBy(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestLockedPropPullRequestPropAutoMerge(GitHubModel):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None] = Field(
        description="Commit message for the merge commit."
    )
    commit_title: Union[str, None] = Field(
        description="Title for the merge commit message."
    )
    enabled_by: Union[
        WebhookPullRequestLockedPropPullRequestPropAutoMergePropEnabledBy, None
    ] = Field(title="User")
    merge_method: Literal["merge", "squash", "rebase"] = Field(
        description="The merge method to use."
    )


class WebhookPullRequestLockedPropPullRequestPropBase(GitHubModel):
    """WebhookPullRequestLockedPropPullRequestPropBase"""

    label: str = Field()
    ref: str = Field()
    repo: WebhookPullRequestLockedPropPullRequestPropBasePropRepo = Field(
        title="Repository", description="A git repository"
    )
    sha: str = Field()
    user: Union[WebhookPullRequestLockedPropPullRequestPropBasePropUser, None] = Field(
        title="User"
    )


class WebhookPullRequestLockedPropPullRequestPropBasePropRepo(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestLockedPropPullRequestPropBasePropRepoPropLicense, None
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestLockedPropPullRequestPropBasePropRepoPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestLockedPropPullRequestPropBasePropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestLockedPropPullRequestPropBasePropRepoPropLicense(GitHubModel):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestLockedPropPullRequestPropBasePropRepoPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestLockedPropPullRequestPropBasePropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestLockedPropPullRequestPropBasePropRepoPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestLockedPropPullRequestPropBasePropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestLockedPropPullRequestPropHead(GitHubModel):
    """WebhookPullRequestLockedPropPullRequestPropHead"""

    label: Union[str, None] = Field()
    ref: str = Field()
    repo: Union[WebhookPullRequestLockedPropPullRequestPropHeadPropRepo, None] = Field(
        title="Repository", description="A git repository"
    )
    sha: str = Field()
    user: Union[WebhookPullRequestLockedPropPullRequestPropHeadPropUser, None] = Field(
        title="User"
    )


class WebhookPullRequestLockedPropPullRequestPropHeadPropRepoPropLicense(GitHubModel):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestLockedPropPullRequestPropHeadPropRepoPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestLockedPropPullRequestPropHeadPropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestLockedPropPullRequestPropHeadPropRepoPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestLockedPropPullRequestPropHeadPropRepo(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestLockedPropPullRequestPropHeadPropRepoPropLicense, None
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestLockedPropPullRequestPropHeadPropRepoPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestLockedPropPullRequestPropHeadPropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestLockedPropPullRequestPropHeadPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestLockedPropPullRequestPropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookPullRequestLockedPropPullRequestPropMergedBy(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestLockedPropPullRequestPropMilestonePropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestLockedPropPullRequestPropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookPullRequestLockedPropPullRequestPropMilestonePropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookPullRequestLockedPropPullRequestPropRequestedReviewersItemsOneof0(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestLockedPropPullRequestPropRequestedReviewersItemsOneof1(
    GitHubModel
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    parent: Missing[
        Union[
            WebhookPullRequestLockedPropPullRequestPropRequestedReviewersItemsOneof1PropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestLockedPropPullRequestPropRequestedReviewersItemsOneof1PropParent(
    GitHubModel
):
    """WebhookPullRequestLockedPropPullRequestPropRequestedReviewersItemsOneof1PropPare
    nt
    """

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestLockedPropPullRequestPropRequestedTeamsItems(GitHubModel):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Description of the team"
    )
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field(description="Unique identifier of the team")
    members_url: Missing[str] = Field(default=UNSET)
    name: str = Field(description="Name of the team")
    node_id: Missing[str] = Field(default=UNSET)
    parent: Missing[
        Union[
            WebhookPullRequestLockedPropPullRequestPropRequestedTeamsItemsPropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: Missing[str] = Field(
        default=UNSET,
        description="Permission that the team will have for its repositories",
    )
    privacy: Missing[Literal["open", "closed", "secret"]] = Field(default=UNSET)
    repositories_url: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET, description="URL for the team")


class WebhookPullRequestLockedPropPullRequestPropRequestedTeamsItemsPropParent(
    GitHubModel
):
    """WebhookPullRequestLockedPropPullRequestPropRequestedTeamsItemsPropParent"""

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestLockedPropPullRequestPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestMilestoned(GitHubModel):
    """pull_request milestoned event"""

    action: Literal["milestoned"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    milestone: Missing[Milestone] = Field(
        default=UNSET,
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    number: int = Field(description="The pull request number.")
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    pull_request: WebhookPullRequestMilestonedPropPullRequest = Field(
        title="Pull Request"
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: Missing[SimpleUserWebhooks] = Field(
        default=UNSET,
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookPullRequestMilestonedPropPullRequest(GitHubModel):
    """Pull Request"""

    links: WebhookPullRequestMilestonedPropPullRequestPropLinks = Field(alias="_links")
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    additions: Missing[int] = Field(default=UNSET)
    assignee: Union[
        WebhookPullRequestMilestonedPropPullRequestPropAssignee, None
    ] = Field(title="User")
    assignees: List[
        Union[WebhookPullRequestMilestonedPropPullRequestPropAssigneesItems, None]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    auto_merge: Union[
        WebhookPullRequestMilestonedPropPullRequestPropAutoMerge, None
    ] = Field(
        title="PullRequestAutoMerge",
        description="The status of auto merging a pull request.",
    )
    base: WebhookPullRequestMilestonedPropPullRequestPropBase = Field()
    body: Union[str, None] = Field()
    changed_files: Missing[int] = Field(default=UNSET)
    closed_at: Union[datetime, None] = Field()
    comments: Missing[int] = Field(default=UNSET)
    comments_url: str = Field()
    commits: Missing[int] = Field(default=UNSET)
    commits_url: str = Field()
    created_at: datetime = Field()
    deletions: Missing[int] = Field(default=UNSET)
    diff_url: str = Field()
    draft: bool = Field(
        description="Indicates whether or not the pull request is a draft."
    )
    head: WebhookPullRequestMilestonedPropPullRequestPropHead = Field()
    html_url: str = Field()
    id: int = Field()
    issue_url: str = Field()
    labels: List[WebhookPullRequestMilestonedPropPullRequestPropLabelsItems] = Field()
    locked: bool = Field()
    maintainer_can_modify: Missing[bool] = Field(
        default=UNSET,
        description="Indicates whether maintainers can modify the pull request.",
    )
    merge_commit_sha: Union[str, None] = Field()
    mergeable: Missing[Union[bool, None]] = Field(default=UNSET)
    mergeable_state: Missing[str] = Field(default=UNSET)
    merged: Missing[Union[bool, None]] = Field(default=UNSET)
    merged_at: Union[datetime, None] = Field()
    merged_by: Missing[
        Union[WebhookPullRequestMilestonedPropPullRequestPropMergedBy, None]
    ] = Field(default=UNSET, title="User")
    milestone: Union[
        WebhookPullRequestMilestonedPropPullRequestPropMilestone, None
    ] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field(
        description="Number uniquely identifying the pull request within its repository."
    )
    patch_url: str = Field()
    rebaseable: Missing[Union[bool, None]] = Field(default=UNSET)
    requested_reviewers: List[
        Union[
            WebhookPullRequestMilestonedPropPullRequestPropRequestedReviewersItemsOneof0,
            None,
            WebhookPullRequestMilestonedPropPullRequestPropRequestedReviewersItemsOneof1,
        ]
    ] = Field()
    requested_teams: List[
        WebhookPullRequestMilestonedPropPullRequestPropRequestedTeamsItems
    ] = Field()
    review_comment_url: str = Field()
    review_comments: Missing[int] = Field(default=UNSET)
    review_comments_url: str = Field()
    state: Literal["open", "closed"] = Field(
        description="State of this Pull Request. Either `open` or `closed`."
    )
    statuses_url: str = Field()
    title: str = Field(description="The title of the pull request.")
    updated_at: datetime = Field()
    url: str = Field()
    user: Union[WebhookPullRequestMilestonedPropPullRequestPropUser, None] = Field(
        title="User"
    )


class WebhookPullRequestMilestonedPropPullRequestPropLinks(GitHubModel):
    """WebhookPullRequestMilestonedPropPullRequestPropLinks"""

    comments: WebhookPullRequestMilestonedPropPullRequestPropLinksPropComments = Field(
        title="Link"
    )
    commits: WebhookPullRequestMilestonedPropPullRequestPropLinksPropCommits = Field(
        title="Link"
    )
    html: WebhookPullRequestMilestonedPropPullRequestPropLinksPropHtml = Field(
        title="Link"
    )
    issue: WebhookPullRequestMilestonedPropPullRequestPropLinksPropIssue = Field(
        title="Link"
    )
    review_comment: WebhookPullRequestMilestonedPropPullRequestPropLinksPropReviewComment = Field(
        title="Link"
    )
    review_comments: WebhookPullRequestMilestonedPropPullRequestPropLinksPropReviewComments = Field(
        title="Link"
    )
    self_: WebhookPullRequestMilestonedPropPullRequestPropLinksPropSelf = Field(
        alias="self", title="Link"
    )
    statuses: WebhookPullRequestMilestonedPropPullRequestPropLinksPropStatuses = Field(
        title="Link"
    )


class WebhookPullRequestMilestonedPropPullRequestPropLinksPropComments(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestMilestonedPropPullRequestPropLinksPropCommits(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestMilestonedPropPullRequestPropLinksPropHtml(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestMilestonedPropPullRequestPropLinksPropIssue(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestMilestonedPropPullRequestPropLinksPropReviewComment(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestMilestonedPropPullRequestPropLinksPropReviewComments(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestMilestonedPropPullRequestPropLinksPropSelf(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestMilestonedPropPullRequestPropLinksPropStatuses(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestMilestonedPropPullRequestPropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestMilestonedPropPullRequestPropAssigneesItems(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestMilestonedPropPullRequestPropAutoMergePropEnabledBy(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestMilestonedPropPullRequestPropAutoMerge(GitHubModel):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None] = Field(
        description="Commit message for the merge commit."
    )
    commit_title: Union[str, None] = Field(
        description="Title for the merge commit message."
    )
    enabled_by: Union[
        WebhookPullRequestMilestonedPropPullRequestPropAutoMergePropEnabledBy, None
    ] = Field(title="User")
    merge_method: Literal["merge", "squash", "rebase"] = Field(
        description="The merge method to use."
    )


class WebhookPullRequestMilestonedPropPullRequestPropBase(GitHubModel):
    """WebhookPullRequestMilestonedPropPullRequestPropBase"""

    label: str = Field()
    ref: str = Field()
    repo: WebhookPullRequestMilestonedPropPullRequestPropBasePropRepo = Field(
        title="Repository", description="A git repository"
    )
    sha: str = Field()
    user: Union[
        WebhookPullRequestMilestonedPropPullRequestPropBasePropUser, None
    ] = Field(title="User")


class WebhookPullRequestMilestonedPropPullRequestPropBasePropRepo(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestMilestonedPropPullRequestPropBasePropRepoPropLicense, None
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestMilestonedPropPullRequestPropBasePropRepoPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestMilestonedPropPullRequestPropBasePropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestMilestonedPropPullRequestPropBasePropRepoPropLicense(
    GitHubModel
):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestMilestonedPropPullRequestPropBasePropRepoPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestMilestonedPropPullRequestPropBasePropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestMilestonedPropPullRequestPropBasePropRepoPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestMilestonedPropPullRequestPropBasePropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestMilestonedPropPullRequestPropHead(GitHubModel):
    """WebhookPullRequestMilestonedPropPullRequestPropHead"""

    label: str = Field()
    ref: str = Field()
    repo: WebhookPullRequestMilestonedPropPullRequestPropHeadPropRepo = Field(
        title="Repository", description="A git repository"
    )
    sha: str = Field()
    user: Union[
        WebhookPullRequestMilestonedPropPullRequestPropHeadPropUser, None
    ] = Field(title="User")


class WebhookPullRequestMilestonedPropPullRequestPropHeadPropRepo(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestMilestonedPropPullRequestPropHeadPropRepoPropLicense, None
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestMilestonedPropPullRequestPropHeadPropRepoPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestMilestonedPropPullRequestPropHeadPropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestMilestonedPropPullRequestPropHeadPropRepoPropLicense(
    GitHubModel
):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestMilestonedPropPullRequestPropHeadPropRepoPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestMilestonedPropPullRequestPropHeadPropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestMilestonedPropPullRequestPropHeadPropRepoPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestMilestonedPropPullRequestPropHeadPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestMilestonedPropPullRequestPropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookPullRequestMilestonedPropPullRequestPropMergedBy(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestMilestonedPropPullRequestPropMilestonePropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestMilestonedPropPullRequestPropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookPullRequestMilestonedPropPullRequestPropMilestonePropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookPullRequestMilestonedPropPullRequestPropRequestedReviewersItemsOneof0(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestMilestonedPropPullRequestPropRequestedReviewersItemsOneof1(
    GitHubModel
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Description of the team"
    )
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field(description="Unique identifier of the team")
    members_url: Missing[str] = Field(default=UNSET)
    name: str = Field(description="Name of the team")
    node_id: Missing[str] = Field(default=UNSET)
    parent: Missing[
        Union[
            WebhookPullRequestMilestonedPropPullRequestPropRequestedReviewersItemsOneof1PropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: Missing[str] = Field(
        default=UNSET,
        description="Permission that the team will have for its repositories",
    )
    privacy: Missing[Literal["open", "closed", "secret"]] = Field(default=UNSET)
    repositories_url: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET, description="URL for the team")


class WebhookPullRequestMilestonedPropPullRequestPropRequestedReviewersItemsOneof1PropParent(
    GitHubModel
):
    """WebhookPullRequestMilestonedPropPullRequestPropRequestedReviewersItemsOneof1Prop
    Parent
    """

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestMilestonedPropPullRequestPropRequestedTeamsItems(GitHubModel):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Description of the team"
    )
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field(description="Unique identifier of the team")
    members_url: Missing[str] = Field(default=UNSET)
    name: str = Field(description="Name of the team")
    node_id: Missing[str] = Field(default=UNSET)
    parent: Missing[
        Union[
            WebhookPullRequestMilestonedPropPullRequestPropRequestedTeamsItemsPropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: Missing[str] = Field(
        default=UNSET,
        description="Permission that the team will have for its repositories",
    )
    privacy: Missing[Literal["open", "closed", "secret"]] = Field(default=UNSET)
    repositories_url: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET, description="URL for the team")


class WebhookPullRequestMilestonedPropPullRequestPropRequestedTeamsItemsPropParent(
    GitHubModel
):
    """WebhookPullRequestMilestonedPropPullRequestPropRequestedTeamsItemsPropParent"""

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestMilestonedPropPullRequestPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestOpened(GitHubModel):
    """pull_request opened event"""

    action: Literal["opened"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    number: int = Field(description="The pull request number.")
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    pull_request: WebhookPullRequestOpenedPropPullRequest = Field()
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookPullRequestOpenedPropPullRequest(GitHubModel):
    """WebhookPullRequestOpenedPropPullRequest"""

    url: str = Field()
    id: int = Field()
    node_id: str = Field()
    html_url: str = Field()
    diff_url: str = Field()
    patch_url: str = Field()
    issue_url: str = Field()
    commits_url: str = Field()
    review_comments_url: str = Field()
    review_comment_url: str = Field()
    comments_url: str = Field()
    statuses_url: str = Field()
    number: int = Field(
        description="Number uniquely identifying the pull request within its repository."
    )
    state: Literal["open", "closed"] = Field(
        description="State of this Pull Request. Either `open` or `closed`."
    )
    locked: bool = Field()
    title: str = Field(description="The title of the pull request.")
    user: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    body: Union[str, None] = Field()
    labels: List[PullRequestPropLabelsItems] = Field()
    milestone: Union[None, Milestone] = Field()
    active_lock_reason: Missing[Union[str, None]] = Field(default=UNSET)
    created_at: datetime = Field()
    updated_at: datetime = Field()
    closed_at: Union[datetime, None] = Field()
    merged_at: Union[datetime, None] = Field()
    merge_commit_sha: Union[str, None] = Field()
    assignee: Union[None, SimpleUser] = Field()
    assignees: Missing[Union[List[SimpleUser], None]] = Field(default=UNSET)
    requested_reviewers: Missing[Union[List[SimpleUser], None]] = Field(default=UNSET)
    requested_teams: Missing[Union[List[TeamSimple], None]] = Field(default=UNSET)
    head: PullRequestPropHead = Field()
    base: PullRequestPropBase = Field()
    links: PullRequestPropLinks = Field(alias="_links")
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="author_association",
        description="How the author is associated with the repository.",
    )
    auto_merge: Union[AutoMerge, None] = Field(
        title="Auto merge", description="The status of auto merging a pull request."
    )
    draft: Missing[bool] = Field(
        default=UNSET,
        description="Indicates whether or not the pull request is a draft.",
    )
    merged: bool = Field()
    mergeable: Union[bool, None] = Field()
    rebaseable: Missing[Union[bool, None]] = Field(default=UNSET)
    mergeable_state: str = Field()
    merged_by: Union[None, SimpleUser] = Field()
    comments: int = Field()
    review_comments: int = Field()
    maintainer_can_modify: bool = Field(
        description="Indicates whether maintainers can modify the pull request."
    )
    commits: int = Field()
    additions: int = Field()
    deletions: int = Field()
    changed_files: int = Field()
    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(
        default=UNSET,
        description="Whether to allow updating the pull request's branch.",
    )
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged.",
    )
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.**",
    )


class WebhookPullRequestOpenedPropPullRequestAllof1(GitHubModel):
    """WebhookPullRequestOpenedPropPullRequestAllof1"""

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(
        default=UNSET,
        description="Whether to allow updating the pull request's branch.",
    )
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged.",
    )
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.**",
    )


class WebhookPullRequestReadyForReview(GitHubModel):
    """pull_request ready_for_review event"""

    action: Literal["ready_for_review"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    number: int = Field(description="The pull request number.")
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    pull_request: WebhookPullRequestReadyForReviewPropPullRequest = Field()
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookPullRequestReadyForReviewPropPullRequest(GitHubModel):
    """WebhookPullRequestReadyForReviewPropPullRequest"""

    url: str = Field()
    id: int = Field()
    node_id: str = Field()
    html_url: str = Field()
    diff_url: str = Field()
    patch_url: str = Field()
    issue_url: str = Field()
    commits_url: str = Field()
    review_comments_url: str = Field()
    review_comment_url: str = Field()
    comments_url: str = Field()
    statuses_url: str = Field()
    number: int = Field(
        description="Number uniquely identifying the pull request within its repository."
    )
    state: Literal["open", "closed"] = Field(
        description="State of this Pull Request. Either `open` or `closed`."
    )
    locked: bool = Field()
    title: str = Field(description="The title of the pull request.")
    user: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    body: Union[str, None] = Field()
    labels: List[PullRequestPropLabelsItems] = Field()
    milestone: Union[None, Milestone] = Field()
    active_lock_reason: Missing[Union[str, None]] = Field(default=UNSET)
    created_at: datetime = Field()
    updated_at: datetime = Field()
    closed_at: Union[datetime, None] = Field()
    merged_at: Union[datetime, None] = Field()
    merge_commit_sha: Union[str, None] = Field()
    assignee: Union[None, SimpleUser] = Field()
    assignees: Missing[Union[List[SimpleUser], None]] = Field(default=UNSET)
    requested_reviewers: Missing[Union[List[SimpleUser], None]] = Field(default=UNSET)
    requested_teams: Missing[Union[List[TeamSimple], None]] = Field(default=UNSET)
    head: PullRequestPropHead = Field()
    base: PullRequestPropBase = Field()
    links: PullRequestPropLinks = Field(alias="_links")
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="author_association",
        description="How the author is associated with the repository.",
    )
    auto_merge: Union[AutoMerge, None] = Field(
        title="Auto merge", description="The status of auto merging a pull request."
    )
    draft: Missing[bool] = Field(
        default=UNSET,
        description="Indicates whether or not the pull request is a draft.",
    )
    merged: bool = Field()
    mergeable: Union[bool, None] = Field()
    rebaseable: Missing[Union[bool, None]] = Field(default=UNSET)
    mergeable_state: str = Field()
    merged_by: Union[None, SimpleUser] = Field()
    comments: int = Field()
    review_comments: int = Field()
    maintainer_can_modify: bool = Field(
        description="Indicates whether maintainers can modify the pull request."
    )
    commits: int = Field()
    additions: int = Field()
    deletions: int = Field()
    changed_files: int = Field()
    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(
        default=UNSET,
        description="Whether to allow updating the pull request's branch.",
    )
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged.",
    )
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description='The default value for a merge commit title.\n- `PR_TITLE` - default to the pull request\'s title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., "Merge pull request #123 from branch-name").',
    )
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.**",
    )


class WebhookPullRequestReadyForReviewPropPullRequestAllof1(GitHubModel):
    """WebhookPullRequestReadyForReviewPropPullRequestAllof1"""

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(
        default=UNSET,
        description="Whether to allow updating the pull request's branch.",
    )
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged.",
    )
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description='The default value for a merge commit title.\n- `PR_TITLE` - default to the pull request\'s title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., "Merge pull request #123 from branch-name").',
    )
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.**",
    )


class WebhookPullRequestReopened(GitHubModel):
    """pull_request reopened event"""

    action: Literal["reopened"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    number: int = Field(description="The pull request number.")
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    pull_request: WebhookPullRequestReopenedPropPullRequest = Field()
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookPullRequestReopenedPropPullRequest(GitHubModel):
    """WebhookPullRequestReopenedPropPullRequest"""

    url: str = Field()
    id: int = Field()
    node_id: str = Field()
    html_url: str = Field()
    diff_url: str = Field()
    patch_url: str = Field()
    issue_url: str = Field()
    commits_url: str = Field()
    review_comments_url: str = Field()
    review_comment_url: str = Field()
    comments_url: str = Field()
    statuses_url: str = Field()
    number: int = Field(
        description="Number uniquely identifying the pull request within its repository."
    )
    state: Literal["open", "closed"] = Field(
        description="State of this Pull Request. Either `open` or `closed`."
    )
    locked: bool = Field()
    title: str = Field(description="The title of the pull request.")
    user: SimpleUser = Field(title="Simple User", description="A GitHub user.")
    body: Union[str, None] = Field()
    labels: List[PullRequestPropLabelsItems] = Field()
    milestone: Union[None, Milestone] = Field()
    active_lock_reason: Missing[Union[str, None]] = Field(default=UNSET)
    created_at: datetime = Field()
    updated_at: datetime = Field()
    closed_at: Union[datetime, None] = Field()
    merged_at: Union[datetime, None] = Field()
    merge_commit_sha: Union[str, None] = Field()
    assignee: Union[None, SimpleUser] = Field()
    assignees: Missing[Union[List[SimpleUser], None]] = Field(default=UNSET)
    requested_reviewers: Missing[Union[List[SimpleUser], None]] = Field(default=UNSET)
    requested_teams: Missing[Union[List[TeamSimple], None]] = Field(default=UNSET)
    head: PullRequestPropHead = Field()
    base: PullRequestPropBase = Field()
    links: PullRequestPropLinks = Field(alias="_links")
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="author_association",
        description="How the author is associated with the repository.",
    )
    auto_merge: Union[AutoMerge, None] = Field(
        title="Auto merge", description="The status of auto merging a pull request."
    )
    draft: Missing[bool] = Field(
        default=UNSET,
        description="Indicates whether or not the pull request is a draft.",
    )
    merged: bool = Field()
    mergeable: Union[bool, None] = Field()
    rebaseable: Missing[Union[bool, None]] = Field(default=UNSET)
    mergeable_state: str = Field()
    merged_by: Union[None, SimpleUser] = Field()
    comments: int = Field()
    review_comments: int = Field()
    maintainer_can_modify: bool = Field(
        description="Indicates whether maintainers can modify the pull request."
    )
    commits: int = Field()
    additions: int = Field()
    deletions: int = Field()
    changed_files: int = Field()
    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(
        default=UNSET,
        description="Whether to allow updating the pull request's branch.",
    )
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged.",
    )
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description='The default value for a merge commit title.\n- `PR_TITLE` - default to the pull request\'s title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., "Merge pull request #123 from branch-name").',
    )
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.**",
    )


class WebhookPullRequestReopenedPropPullRequestAllof1(GitHubModel):
    """WebhookPullRequestReopenedPropPullRequestAllof1"""

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(
        default=UNSET,
        description="Whether to allow updating the pull request's branch.",
    )
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged.",
    )
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description='The default value for a merge commit title.\n- `PR_TITLE` - default to the pull request\'s title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., "Merge pull request #123 from branch-name").',
    )
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.**",
    )


class WebhookPullRequestReviewCommentCreated(GitHubModel):
    """pull_request_review_comment created event"""

    action: Literal["created"] = Field()
    comment: WebhookPullRequestReviewCommentCreatedPropComment = Field(
        title="Pull Request Review Comment",
        description="The [comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request) itself.",
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    pull_request: WebhookPullRequestReviewCommentCreatedPropPullRequest = Field()
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookPullRequestReviewCommentCreatedPropComment(GitHubModel):
    """Pull Request Review Comment

    The [comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-
    for-a-pull-request) itself.
    """

    links: WebhookPullRequestReviewCommentCreatedPropCommentPropLinks = Field(
        alias="_links"
    )
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: str = Field(description="The text of the comment.")
    commit_id: str = Field(
        description="The SHA of the commit to which the comment applies."
    )
    created_at: datetime = Field()
    diff_hunk: str = Field(
        description="The diff of the line that the comment refers to."
    )
    html_url: str = Field(description="HTML URL for the pull request review comment.")
    id: int = Field(description="The ID of the pull request review comment.")
    in_reply_to_id: Missing[int] = Field(
        default=UNSET, description="The comment ID to reply to."
    )
    line: Union[int, None] = Field(
        description="The line of the blob to which the comment applies. The last line of the range for a multi-line comment"
    )
    node_id: str = Field(description="The node ID of the pull request review comment.")
    original_commit_id: str = Field(
        description="The SHA of the original commit to which the comment applies."
    )
    original_line: Union[int, None] = Field(
        description="The line of the blob to which the comment applies. The last line of the range for a multi-line comment"
    )
    original_position: int = Field(
        description="The index of the original line in the diff to which the comment applies."
    )
    original_start_line: Union[int, None] = Field(
        description="The first line of the range for a multi-line comment."
    )
    path: str = Field(
        description="The relative path of the file to which the comment applies."
    )
    position: Union[int, None] = Field(
        description="The line index in the diff to which the comment applies."
    )
    pull_request_review_id: Union[int, None] = Field(
        description="The ID of the pull request review to which the comment belongs."
    )
    pull_request_url: str = Field(
        description="URL for the pull request that the review comment belongs to."
    )
    reactions: WebhookPullRequestReviewCommentCreatedPropCommentPropReactions = Field(
        title="Reactions"
    )
    side: Literal["LEFT", "RIGHT"] = Field(
        description="The side of the first line of the range for a multi-line comment."
    )
    start_line: Union[int, None] = Field(
        description="The first line of the range for a multi-line comment."
    )
    start_side: Union[None, Literal["LEFT", "RIGHT"]] = Field(
        default="RIGHT",
        description="The side of the first line of the range for a multi-line comment.",
    )
    subject_type: Missing[Literal["line", "file"]] = Field(
        default=UNSET,
        description="The level at which the comment is targeted, can be a diff line or a file.",
    )
    updated_at: datetime = Field()
    url: str = Field(description="URL for the pull request review comment")
    user: Union[
        WebhookPullRequestReviewCommentCreatedPropCommentPropUser, None
    ] = Field(title="User")


class WebhookPullRequestReviewCommentCreatedPropCommentPropLinks(GitHubModel):
    """WebhookPullRequestReviewCommentCreatedPropCommentPropLinks"""

    html: WebhookPullRequestReviewCommentCreatedPropCommentPropLinksPropHtml = Field(
        title="Link"
    )
    pull_request: WebhookPullRequestReviewCommentCreatedPropCommentPropLinksPropPullRequest = Field(
        title="Link"
    )
    self_: WebhookPullRequestReviewCommentCreatedPropCommentPropLinksPropSelf = Field(
        alias="self", title="Link"
    )


class WebhookPullRequestReviewCommentCreatedPropCommentPropLinksPropHtml(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewCommentCreatedPropCommentPropLinksPropPullRequest(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewCommentCreatedPropCommentPropLinksPropSelf(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewCommentCreatedPropCommentPropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookPullRequestReviewCommentCreatedPropCommentPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewCommentCreatedPropPullRequest(GitHubModel):
    """WebhookPullRequestReviewCommentCreatedPropPullRequest"""

    links: WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinks = Field(
        alias="_links"
    )
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    assignee: Union[
        WebhookPullRequestReviewCommentCreatedPropPullRequestPropAssignee, None
    ] = Field(title="User")
    assignees: List[
        Union[
            WebhookPullRequestReviewCommentCreatedPropPullRequestPropAssigneesItems,
            None,
        ]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    auto_merge: Missing[
        Union[WebhookPullRequestReviewCommentCreatedPropPullRequestPropAutoMerge, None]
    ] = Field(
        default=UNSET,
        title="PullRequestAutoMerge",
        description="The status of auto merging a pull request.",
    )
    base: WebhookPullRequestReviewCommentCreatedPropPullRequestPropBase = Field()
    body: Union[str, None] = Field()
    closed_at: Union[str, None] = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    created_at: str = Field()
    diff_url: str = Field()
    draft: Missing[bool] = Field(default=UNSET)
    head: WebhookPullRequestReviewCommentCreatedPropPullRequestPropHead = Field()
    html_url: str = Field()
    id: int = Field()
    issue_url: str = Field()
    labels: List[
        WebhookPullRequestReviewCommentCreatedPropPullRequestPropLabelsItems
    ] = Field()
    locked: bool = Field()
    merge_commit_sha: Union[str, None] = Field()
    merged_at: Union[str, None] = Field()
    milestone: Union[
        WebhookPullRequestReviewCommentCreatedPropPullRequestPropMilestone, None
    ] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field()
    patch_url: str = Field()
    requested_reviewers: List[
        Union[
            WebhookPullRequestReviewCommentCreatedPropPullRequestPropRequestedReviewersItemsOneof0,
            None,
            WebhookPullRequestReviewCommentCreatedPropPullRequestPropRequestedReviewersItemsOneof1,
        ]
    ] = Field()
    requested_teams: List[
        WebhookPullRequestReviewCommentCreatedPropPullRequestPropRequestedTeamsItems
    ] = Field()
    review_comment_url: str = Field()
    review_comments_url: str = Field()
    state: Literal["open", "closed"] = Field()
    statuses_url: str = Field()
    title: str = Field()
    updated_at: str = Field()
    url: str = Field()
    user: Union[
        WebhookPullRequestReviewCommentCreatedPropPullRequestPropUser, None
    ] = Field(title="User")


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinks(GitHubModel):
    """WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinks"""

    comments: WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropComments = Field(
        title="Link"
    )
    commits: WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropCommits = Field(
        title="Link"
    )
    html: WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropHtml = (
        Field(title="Link")
    )
    issue: WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropIssue = (
        Field(title="Link")
    )
    review_comment: WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropReviewComment = Field(
        title="Link"
    )
    review_comments: WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropReviewComments = Field(
        title="Link"
    )
    self_: WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropSelf = (
        Field(alias="self", title="Link")
    )
    statuses: WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropStatuses = Field(
        title="Link"
    )


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropComments(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropCommits(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropHtml(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropIssue(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropReviewComment(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropReviewComments(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropSelf(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropStatuses(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropAssigneesItems(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropAutoMergePropEnabledBy(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropAutoMerge(GitHubModel):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None] = Field(
        description="Commit message for the merge commit."
    )
    commit_title: Union[str, None] = Field(
        description="Title for the merge commit message."
    )
    enabled_by: Union[
        WebhookPullRequestReviewCommentCreatedPropPullRequestPropAutoMergePropEnabledBy,
        None,
    ] = Field(title="User")
    merge_method: Literal["merge", "squash", "rebase"] = Field(
        description="The merge method to use."
    )


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropBase(GitHubModel):
    """WebhookPullRequestReviewCommentCreatedPropPullRequestPropBase"""

    label: str = Field()
    ref: str = Field()
    repo: WebhookPullRequestReviewCommentCreatedPropPullRequestPropBasePropRepo = Field(
        title="Repository", description="A git repository"
    )
    sha: str = Field()
    user: Union[
        WebhookPullRequestReviewCommentCreatedPropPullRequestPropBasePropUser, None
    ] = Field(title="User")


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropBasePropRepo(
    GitHubModel
):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestReviewCommentCreatedPropPullRequestPropBasePropRepoPropLicense,
        None,
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestReviewCommentCreatedPropPullRequestPropBasePropRepoPropOwner,
        None,
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestReviewCommentCreatedPropPullRequestPropBasePropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropBasePropRepoPropLicense(
    GitHubModel
):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropBasePropRepoPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropBasePropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestReviewCommentCreatedPropPullRequestPropBasePropRepoPropPermiss
    ions
    """

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropBasePropUser(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropHead(GitHubModel):
    """WebhookPullRequestReviewCommentCreatedPropPullRequestPropHead"""

    label: str = Field()
    ref: str = Field()
    repo: Union[
        WebhookPullRequestReviewCommentCreatedPropPullRequestPropHeadPropRepo, None
    ] = Field(title="Repository", description="A git repository")
    sha: str = Field()
    user: Union[
        WebhookPullRequestReviewCommentCreatedPropPullRequestPropHeadPropUser, None
    ] = Field(title="User")


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropHeadPropRepoPropLicense(
    GitHubModel
):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropHeadPropRepoPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropHeadPropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestReviewCommentCreatedPropPullRequestPropHeadPropRepoPropPermiss
    ions
    """

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropHeadPropRepo(
    GitHubModel
):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: Missing[bool] = Field(
        default=UNSET, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestReviewCommentCreatedPropPullRequestPropHeadPropRepoPropLicense,
        None,
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestReviewCommentCreatedPropPullRequestPropHeadPropRepoPropOwner,
        None,
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestReviewCommentCreatedPropPullRequestPropHeadPropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropHeadPropUser(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropMilestonePropCreator(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookPullRequestReviewCommentCreatedPropPullRequestPropMilestonePropCreator,
        None,
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropRequestedReviewersItemsOneof0(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropRequestedReviewersItemsOneof1(
    GitHubModel
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    parent: Missing[
        Union[
            WebhookPullRequestReviewCommentCreatedPropPullRequestPropRequestedReviewersItemsOneof1PropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropRequestedReviewersItemsOneof1PropParent(
    GitHubModel
):
    """WebhookPullRequestReviewCommentCreatedPropPullRequestPropRequestedReviewersItems
    Oneof1PropParent
    """

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropRequestedTeamsItems(
    GitHubModel
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Description of the team"
    )
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field(description="Unique identifier of the team")
    members_url: Missing[str] = Field(default=UNSET)
    name: str = Field(description="Name of the team")
    node_id: Missing[str] = Field(default=UNSET)
    parent: Missing[
        Union[
            WebhookPullRequestReviewCommentCreatedPropPullRequestPropRequestedTeamsItemsPropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: Missing[str] = Field(
        default=UNSET,
        description="Permission that the team will have for its repositories",
    )
    privacy: Missing[Literal["open", "closed", "secret"]] = Field(default=UNSET)
    repositories_url: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET, description="URL for the team")


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropRequestedTeamsItemsPropParent(
    GitHubModel
):
    """WebhookPullRequestReviewCommentCreatedPropPullRequestPropRequestedTeamsItemsProp
    Parent
    """

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewCommentDeleted(GitHubModel):
    """pull_request_review_comment deleted event"""

    action: Literal["deleted"] = Field()
    comment: WebhookPullRequestReviewCommentDeletedPropComment = Field(
        title="Pull Request Review Comment",
        description="The [comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request) itself.",
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    pull_request: WebhookPullRequestReviewCommentDeletedPropPullRequest = Field()
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookPullRequestReviewCommentDeletedPropComment(GitHubModel):
    """Pull Request Review Comment

    The [comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-
    for-a-pull-request) itself.
    """

    links: WebhookPullRequestReviewCommentDeletedPropCommentPropLinks = Field(
        alias="_links"
    )
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: str = Field(description="The text of the comment.")
    commit_id: str = Field(
        description="The SHA of the commit to which the comment applies."
    )
    created_at: datetime = Field()
    diff_hunk: str = Field(
        description="The diff of the line that the comment refers to."
    )
    html_url: str = Field(description="HTML URL for the pull request review comment.")
    id: int = Field(description="The ID of the pull request review comment.")
    in_reply_to_id: Missing[int] = Field(
        default=UNSET, description="The comment ID to reply to."
    )
    line: Union[int, None] = Field(
        description="The line of the blob to which the comment applies. The last line of the range for a multi-line comment"
    )
    node_id: str = Field(description="The node ID of the pull request review comment.")
    original_commit_id: str = Field(
        description="The SHA of the original commit to which the comment applies."
    )
    original_line: int = Field(
        description="The line of the blob to which the comment applies. The last line of the range for a multi-line comment"
    )
    original_position: int = Field(
        description="The index of the original line in the diff to which the comment applies."
    )
    original_start_line: Union[int, None] = Field(
        description="The first line of the range for a multi-line comment."
    )
    path: str = Field(
        description="The relative path of the file to which the comment applies."
    )
    position: Union[int, None] = Field(
        description="The line index in the diff to which the comment applies."
    )
    pull_request_review_id: Union[int, None] = Field(
        description="The ID of the pull request review to which the comment belongs."
    )
    pull_request_url: str = Field(
        description="URL for the pull request that the review comment belongs to."
    )
    reactions: WebhookPullRequestReviewCommentDeletedPropCommentPropReactions = Field(
        title="Reactions"
    )
    side: Literal["LEFT", "RIGHT"] = Field(
        description="The side of the first line of the range for a multi-line comment."
    )
    start_line: Union[int, None] = Field(
        description="The first line of the range for a multi-line comment."
    )
    start_side: Union[None, Literal["LEFT", "RIGHT"]] = Field(
        default="RIGHT",
        description="The side of the first line of the range for a multi-line comment.",
    )
    subject_type: Missing[Literal["line", "file"]] = Field(
        default=UNSET,
        description="The level at which the comment is targeted, can be a diff line or a file.",
    )
    updated_at: datetime = Field()
    url: str = Field(description="URL for the pull request review comment")
    user: Union[
        WebhookPullRequestReviewCommentDeletedPropCommentPropUser, None
    ] = Field(title="User")


class WebhookPullRequestReviewCommentDeletedPropCommentPropLinks(GitHubModel):
    """WebhookPullRequestReviewCommentDeletedPropCommentPropLinks"""

    html: WebhookPullRequestReviewCommentDeletedPropCommentPropLinksPropHtml = Field(
        title="Link"
    )
    pull_request: WebhookPullRequestReviewCommentDeletedPropCommentPropLinksPropPullRequest = Field(
        title="Link"
    )
    self_: WebhookPullRequestReviewCommentDeletedPropCommentPropLinksPropSelf = Field(
        alias="self", title="Link"
    )


class WebhookPullRequestReviewCommentDeletedPropCommentPropLinksPropHtml(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewCommentDeletedPropCommentPropLinksPropPullRequest(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewCommentDeletedPropCommentPropLinksPropSelf(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewCommentDeletedPropCommentPropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookPullRequestReviewCommentDeletedPropCommentPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewCommentDeletedPropPullRequest(GitHubModel):
    """WebhookPullRequestReviewCommentDeletedPropPullRequest"""

    links: WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinks = Field(
        alias="_links"
    )
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    assignee: Union[
        WebhookPullRequestReviewCommentDeletedPropPullRequestPropAssignee, None
    ] = Field(title="User")
    assignees: List[
        Union[
            WebhookPullRequestReviewCommentDeletedPropPullRequestPropAssigneesItems,
            None,
        ]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    auto_merge: Missing[
        Union[WebhookPullRequestReviewCommentDeletedPropPullRequestPropAutoMerge, None]
    ] = Field(
        default=UNSET,
        title="PullRequestAutoMerge",
        description="The status of auto merging a pull request.",
    )
    base: WebhookPullRequestReviewCommentDeletedPropPullRequestPropBase = Field()
    body: Union[str, None] = Field()
    closed_at: Union[str, None] = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    created_at: str = Field()
    diff_url: str = Field()
    draft: Missing[bool] = Field(default=UNSET)
    head: WebhookPullRequestReviewCommentDeletedPropPullRequestPropHead = Field()
    html_url: str = Field()
    id: int = Field()
    issue_url: str = Field()
    labels: List[
        WebhookPullRequestReviewCommentDeletedPropPullRequestPropLabelsItems
    ] = Field()
    locked: bool = Field()
    merge_commit_sha: Union[str, None] = Field()
    merged_at: Union[str, None] = Field()
    milestone: Union[
        WebhookPullRequestReviewCommentDeletedPropPullRequestPropMilestone, None
    ] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field()
    patch_url: str = Field()
    requested_reviewers: List[
        Union[
            WebhookPullRequestReviewCommentDeletedPropPullRequestPropRequestedReviewersItemsOneof0,
            None,
            WebhookPullRequestReviewCommentDeletedPropPullRequestPropRequestedReviewersItemsOneof1,
        ]
    ] = Field()
    requested_teams: List[
        WebhookPullRequestReviewCommentDeletedPropPullRequestPropRequestedTeamsItems
    ] = Field()
    review_comment_url: str = Field()
    review_comments_url: str = Field()
    state: Literal["open", "closed"] = Field()
    statuses_url: str = Field()
    title: str = Field()
    updated_at: str = Field()
    url: str = Field()
    user: Union[
        WebhookPullRequestReviewCommentDeletedPropPullRequestPropUser, None
    ] = Field(title="User")


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinks(GitHubModel):
    """WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinks"""

    comments: WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropComments = Field(
        title="Link"
    )
    commits: WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropCommits = Field(
        title="Link"
    )
    html: WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropHtml = (
        Field(title="Link")
    )
    issue: WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropIssue = (
        Field(title="Link")
    )
    review_comment: WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropReviewComment = Field(
        title="Link"
    )
    review_comments: WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropReviewComments = Field(
        title="Link"
    )
    self_: WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropSelf = (
        Field(alias="self", title="Link")
    )
    statuses: WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropStatuses = Field(
        title="Link"
    )


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropComments(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropCommits(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropHtml(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropIssue(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropReviewComment(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropReviewComments(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropSelf(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropStatuses(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropAssigneesItems(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropAutoMergePropEnabledBy(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropAutoMerge(GitHubModel):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None] = Field(
        description="Commit message for the merge commit."
    )
    commit_title: Union[str, None] = Field(
        description="Title for the merge commit message."
    )
    enabled_by: Union[
        WebhookPullRequestReviewCommentDeletedPropPullRequestPropAutoMergePropEnabledBy,
        None,
    ] = Field(title="User")
    merge_method: Literal["merge", "squash", "rebase"] = Field(
        description="The merge method to use."
    )


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropBase(GitHubModel):
    """WebhookPullRequestReviewCommentDeletedPropPullRequestPropBase"""

    label: str = Field()
    ref: str = Field()
    repo: WebhookPullRequestReviewCommentDeletedPropPullRequestPropBasePropRepo = Field(
        title="Repository", description="A git repository"
    )
    sha: str = Field()
    user: Union[
        WebhookPullRequestReviewCommentDeletedPropPullRequestPropBasePropUser, None
    ] = Field(title="User")


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropBasePropRepo(
    GitHubModel
):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestReviewCommentDeletedPropPullRequestPropBasePropRepoPropLicense,
        None,
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestReviewCommentDeletedPropPullRequestPropBasePropRepoPropOwner,
        None,
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestReviewCommentDeletedPropPullRequestPropBasePropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropBasePropRepoPropLicense(
    GitHubModel
):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropBasePropRepoPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropBasePropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestReviewCommentDeletedPropPullRequestPropBasePropRepoPropPermiss
    ions
    """

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropBasePropUser(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropHead(GitHubModel):
    """WebhookPullRequestReviewCommentDeletedPropPullRequestPropHead"""

    label: str = Field()
    ref: str = Field()
    repo: Union[
        WebhookPullRequestReviewCommentDeletedPropPullRequestPropHeadPropRepo, None
    ] = Field(title="Repository", description="A git repository")
    sha: str = Field()
    user: Union[
        WebhookPullRequestReviewCommentDeletedPropPullRequestPropHeadPropUser, None
    ] = Field(title="User")


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropHeadPropRepoPropLicense(
    GitHubModel
):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropHeadPropRepoPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropHeadPropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestReviewCommentDeletedPropPullRequestPropHeadPropRepoPropPermiss
    ions
    """

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropHeadPropRepo(
    GitHubModel
):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestReviewCommentDeletedPropPullRequestPropHeadPropRepoPropLicense,
        None,
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestReviewCommentDeletedPropPullRequestPropHeadPropRepoPropOwner,
        None,
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestReviewCommentDeletedPropPullRequestPropHeadPropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropHeadPropUser(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropMilestonePropCreator(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookPullRequestReviewCommentDeletedPropPullRequestPropMilestonePropCreator,
        None,
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropRequestedReviewersItemsOneof0(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropRequestedReviewersItemsOneof1(
    GitHubModel
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Description of the team"
    )
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field(description="Unique identifier of the team")
    members_url: Missing[str] = Field(default=UNSET)
    name: str = Field(description="Name of the team")
    node_id: Missing[str] = Field(default=UNSET)
    parent: Missing[
        Union[
            WebhookPullRequestReviewCommentDeletedPropPullRequestPropRequestedReviewersItemsOneof1PropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: Missing[str] = Field(
        default=UNSET,
        description="Permission that the team will have for its repositories",
    )
    privacy: Missing[Literal["open", "closed", "secret"]] = Field(default=UNSET)
    repositories_url: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET, description="URL for the team")


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropRequestedReviewersItemsOneof1PropParent(
    GitHubModel
):
    """WebhookPullRequestReviewCommentDeletedPropPullRequestPropRequestedReviewersItems
    Oneof1PropParent
    """

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropRequestedTeamsItems(
    GitHubModel
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Description of the team"
    )
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field(description="Unique identifier of the team")
    members_url: Missing[str] = Field(default=UNSET)
    name: str = Field(description="Name of the team")
    node_id: Missing[str] = Field(default=UNSET)
    parent: Missing[
        Union[
            WebhookPullRequestReviewCommentDeletedPropPullRequestPropRequestedTeamsItemsPropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: Missing[str] = Field(
        default=UNSET,
        description="Permission that the team will have for its repositories",
    )
    privacy: Missing[Literal["open", "closed", "secret"]] = Field(default=UNSET)
    repositories_url: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET, description="URL for the team")


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropRequestedTeamsItemsPropParent(
    GitHubModel
):
    """WebhookPullRequestReviewCommentDeletedPropPullRequestPropRequestedTeamsItemsProp
    Parent
    """

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewCommentEdited(GitHubModel):
    """pull_request_review_comment edited event"""

    action: Literal["edited"] = Field()
    changes: WebhookPullRequestReviewCommentEditedPropChanges = Field(
        description="The changes to the comment."
    )
    comment: WebhookPullRequestReviewCommentEditedPropComment = Field(
        title="Pull Request Review Comment",
        description="The [comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request) itself.",
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    pull_request: WebhookPullRequestReviewCommentEditedPropPullRequest = Field()
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookPullRequestReviewCommentEditedPropChanges(GitHubModel):
    """WebhookPullRequestReviewCommentEditedPropChanges

    The changes to the comment.
    """

    body: Missing[WebhookPullRequestReviewCommentEditedPropChangesPropBody] = Field(
        default=UNSET
    )


class WebhookPullRequestReviewCommentEditedPropChangesPropBody(GitHubModel):
    """WebhookPullRequestReviewCommentEditedPropChangesPropBody"""

    from_: str = Field(alias="from", description="The previous version of the body.")


class WebhookPullRequestReviewCommentEditedPropComment(GitHubModel):
    """Pull Request Review Comment

    The [comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-
    for-a-pull-request) itself.
    """

    links: WebhookPullRequestReviewCommentEditedPropCommentPropLinks = Field(
        alias="_links"
    )
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: str = Field(description="The text of the comment.")
    commit_id: str = Field(
        description="The SHA of the commit to which the comment applies."
    )
    created_at: datetime = Field()
    diff_hunk: str = Field(
        description="The diff of the line that the comment refers to."
    )
    html_url: str = Field(description="HTML URL for the pull request review comment.")
    id: int = Field(description="The ID of the pull request review comment.")
    in_reply_to_id: Missing[int] = Field(
        default=UNSET, description="The comment ID to reply to."
    )
    line: Union[int, None] = Field(
        description="The line of the blob to which the comment applies. The last line of the range for a multi-line comment"
    )
    node_id: str = Field(description="The node ID of the pull request review comment.")
    original_commit_id: str = Field(
        description="The SHA of the original commit to which the comment applies."
    )
    original_line: int = Field(
        description="The line of the blob to which the comment applies. The last line of the range for a multi-line comment"
    )
    original_position: int = Field(
        description="The index of the original line in the diff to which the comment applies."
    )
    original_start_line: Union[int, None] = Field(
        description="The first line of the range for a multi-line comment."
    )
    path: str = Field(
        description="The relative path of the file to which the comment applies."
    )
    position: Union[int, None] = Field(
        description="The line index in the diff to which the comment applies."
    )
    pull_request_review_id: Union[int, None] = Field(
        description="The ID of the pull request review to which the comment belongs."
    )
    pull_request_url: str = Field(
        description="URL for the pull request that the review comment belongs to."
    )
    reactions: WebhookPullRequestReviewCommentEditedPropCommentPropReactions = Field(
        title="Reactions"
    )
    side: Literal["LEFT", "RIGHT"] = Field(
        description="The side of the first line of the range for a multi-line comment."
    )
    start_line: Union[int, None] = Field(
        description="The first line of the range for a multi-line comment."
    )
    start_side: Union[None, Literal["LEFT", "RIGHT"]] = Field(
        default="RIGHT",
        description="The side of the first line of the range for a multi-line comment.",
    )
    subject_type: Missing[Literal["line", "file"]] = Field(
        default=UNSET,
        description="The level at which the comment is targeted, can be a diff line or a file.",
    )
    updated_at: datetime = Field()
    url: str = Field(description="URL for the pull request review comment")
    user: Union[WebhookPullRequestReviewCommentEditedPropCommentPropUser, None] = Field(
        title="User"
    )


class WebhookPullRequestReviewCommentEditedPropCommentPropLinks(GitHubModel):
    """WebhookPullRequestReviewCommentEditedPropCommentPropLinks"""

    html: WebhookPullRequestReviewCommentEditedPropCommentPropLinksPropHtml = Field(
        title="Link"
    )
    pull_request: WebhookPullRequestReviewCommentEditedPropCommentPropLinksPropPullRequest = Field(
        title="Link"
    )
    self_: WebhookPullRequestReviewCommentEditedPropCommentPropLinksPropSelf = Field(
        alias="self", title="Link"
    )


class WebhookPullRequestReviewCommentEditedPropCommentPropLinksPropHtml(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewCommentEditedPropCommentPropLinksPropPullRequest(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewCommentEditedPropCommentPropLinksPropSelf(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewCommentEditedPropCommentPropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookPullRequestReviewCommentEditedPropCommentPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewCommentEditedPropPullRequest(GitHubModel):
    """WebhookPullRequestReviewCommentEditedPropPullRequest"""

    links: WebhookPullRequestReviewCommentEditedPropPullRequestPropLinks = Field(
        alias="_links"
    )
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    assignee: Union[
        WebhookPullRequestReviewCommentEditedPropPullRequestPropAssignee, None
    ] = Field(title="User")
    assignees: List[
        Union[
            WebhookPullRequestReviewCommentEditedPropPullRequestPropAssigneesItems, None
        ]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    auto_merge: Missing[
        Union[WebhookPullRequestReviewCommentEditedPropPullRequestPropAutoMerge, None]
    ] = Field(
        default=UNSET,
        title="PullRequestAutoMerge",
        description="The status of auto merging a pull request.",
    )
    base: WebhookPullRequestReviewCommentEditedPropPullRequestPropBase = Field()
    body: Union[str, None] = Field()
    closed_at: Union[str, None] = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    created_at: str = Field()
    diff_url: str = Field()
    draft: Missing[bool] = Field(default=UNSET)
    head: WebhookPullRequestReviewCommentEditedPropPullRequestPropHead = Field()
    html_url: str = Field()
    id: int = Field()
    issue_url: str = Field()
    labels: List[
        WebhookPullRequestReviewCommentEditedPropPullRequestPropLabelsItems
    ] = Field()
    locked: bool = Field()
    merge_commit_sha: Union[str, None] = Field()
    merged_at: Union[str, None] = Field()
    milestone: Union[
        WebhookPullRequestReviewCommentEditedPropPullRequestPropMilestone, None
    ] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field()
    patch_url: str = Field()
    requested_reviewers: List[
        Union[
            WebhookPullRequestReviewCommentEditedPropPullRequestPropRequestedReviewersItemsOneof0,
            None,
            WebhookPullRequestReviewCommentEditedPropPullRequestPropRequestedReviewersItemsOneof1,
        ]
    ] = Field()
    requested_teams: List[
        WebhookPullRequestReviewCommentEditedPropPullRequestPropRequestedTeamsItems
    ] = Field()
    review_comment_url: str = Field()
    review_comments_url: str = Field()
    state: Literal["open", "closed"] = Field()
    statuses_url: str = Field()
    title: str = Field()
    updated_at: str = Field()
    url: str = Field()
    user: Union[
        WebhookPullRequestReviewCommentEditedPropPullRequestPropUser, None
    ] = Field(title="User")


class WebhookPullRequestReviewCommentEditedPropPullRequestPropLinks(GitHubModel):
    """WebhookPullRequestReviewCommentEditedPropPullRequestPropLinks"""

    comments: WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropComments = Field(
        title="Link"
    )
    commits: WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropCommits = Field(
        title="Link"
    )
    html: WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropHtml = Field(
        title="Link"
    )
    issue: WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropIssue = (
        Field(title="Link")
    )
    review_comment: WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropReviewComment = Field(
        title="Link"
    )
    review_comments: WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropReviewComments = Field(
        title="Link"
    )
    self_: WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropSelf = (
        Field(alias="self", title="Link")
    )
    statuses: WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropStatuses = Field(
        title="Link"
    )


class WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropComments(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropCommits(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropHtml(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropIssue(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropReviewComment(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropReviewComments(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropSelf(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropStatuses(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewCommentEditedPropPullRequestPropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewCommentEditedPropPullRequestPropAssigneesItems(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewCommentEditedPropPullRequestPropAutoMergePropEnabledBy(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewCommentEditedPropPullRequestPropAutoMerge(GitHubModel):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None] = Field(
        description="Commit message for the merge commit."
    )
    commit_title: Union[str, None] = Field(
        description="Title for the merge commit message."
    )
    enabled_by: Union[
        WebhookPullRequestReviewCommentEditedPropPullRequestPropAutoMergePropEnabledBy,
        None,
    ] = Field(title="User")
    merge_method: Literal["merge", "squash", "rebase"] = Field(
        description="The merge method to use."
    )


class WebhookPullRequestReviewCommentEditedPropPullRequestPropBase(GitHubModel):
    """WebhookPullRequestReviewCommentEditedPropPullRequestPropBase"""

    label: str = Field()
    ref: str = Field()
    repo: WebhookPullRequestReviewCommentEditedPropPullRequestPropBasePropRepo = Field(
        title="Repository", description="A git repository"
    )
    sha: str = Field()
    user: Union[
        WebhookPullRequestReviewCommentEditedPropPullRequestPropBasePropUser, None
    ] = Field(title="User")


class WebhookPullRequestReviewCommentEditedPropPullRequestPropBasePropRepo(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestReviewCommentEditedPropPullRequestPropBasePropRepoPropLicense,
        None,
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestReviewCommentEditedPropPullRequestPropBasePropRepoPropOwner,
        None,
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestReviewCommentEditedPropPullRequestPropBasePropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestReviewCommentEditedPropPullRequestPropBasePropRepoPropLicense(
    GitHubModel
):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestReviewCommentEditedPropPullRequestPropBasePropRepoPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewCommentEditedPropPullRequestPropBasePropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestReviewCommentEditedPropPullRequestPropBasePropRepoPropPermissi
    ons
    """

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestReviewCommentEditedPropPullRequestPropBasePropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewCommentEditedPropPullRequestPropHead(GitHubModel):
    """WebhookPullRequestReviewCommentEditedPropPullRequestPropHead"""

    label: str = Field()
    ref: str = Field()
    repo: Union[
        WebhookPullRequestReviewCommentEditedPropPullRequestPropHeadPropRepo, None
    ] = Field(title="Repository", description="A git repository")
    sha: str = Field()
    user: Union[
        WebhookPullRequestReviewCommentEditedPropPullRequestPropHeadPropUser, None
    ] = Field(title="User")


class WebhookPullRequestReviewCommentEditedPropPullRequestPropHeadPropRepoPropLicense(
    GitHubModel
):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestReviewCommentEditedPropPullRequestPropHeadPropRepoPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewCommentEditedPropPullRequestPropHeadPropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestReviewCommentEditedPropPullRequestPropHeadPropRepoPropPermissi
    ons
    """

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestReviewCommentEditedPropPullRequestPropHeadPropRepo(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestReviewCommentEditedPropPullRequestPropHeadPropRepoPropLicense,
        None,
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestReviewCommentEditedPropPullRequestPropHeadPropRepoPropOwner,
        None,
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestReviewCommentEditedPropPullRequestPropHeadPropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestReviewCommentEditedPropPullRequestPropHeadPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewCommentEditedPropPullRequestPropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookPullRequestReviewCommentEditedPropPullRequestPropMilestonePropCreator(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewCommentEditedPropPullRequestPropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookPullRequestReviewCommentEditedPropPullRequestPropMilestonePropCreator,
        None,
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookPullRequestReviewCommentEditedPropPullRequestPropRequestedReviewersItemsOneof0(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewCommentEditedPropPullRequestPropRequestedReviewersItemsOneof1(
    GitHubModel
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Description of the team"
    )
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field(description="Unique identifier of the team")
    members_url: Missing[str] = Field(default=UNSET)
    name: str = Field(description="Name of the team")
    node_id: Missing[str] = Field(default=UNSET)
    parent: Missing[
        Union[
            WebhookPullRequestReviewCommentEditedPropPullRequestPropRequestedReviewersItemsOneof1PropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: Missing[str] = Field(
        default=UNSET,
        description="Permission that the team will have for its repositories",
    )
    privacy: Missing[Literal["open", "closed", "secret"]] = Field(default=UNSET)
    repositories_url: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET, description="URL for the team")


class WebhookPullRequestReviewCommentEditedPropPullRequestPropRequestedReviewersItemsOneof1PropParent(
    GitHubModel
):
    """WebhookPullRequestReviewCommentEditedPropPullRequestPropRequestedReviewersItemsO
    neof1PropParent
    """

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestReviewCommentEditedPropPullRequestPropRequestedTeamsItems(
    GitHubModel
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Description of the team"
    )
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field(description="Unique identifier of the team")
    members_url: Missing[str] = Field(default=UNSET)
    name: str = Field(description="Name of the team")
    node_id: Missing[str] = Field(default=UNSET)
    parent: Missing[
        Union[
            WebhookPullRequestReviewCommentEditedPropPullRequestPropRequestedTeamsItemsPropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: Missing[str] = Field(
        default=UNSET,
        description="Permission that the team will have for its repositories",
    )
    privacy: Missing[Literal["open", "closed", "secret"]] = Field(default=UNSET)
    repositories_url: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET, description="URL for the team")


class WebhookPullRequestReviewCommentEditedPropPullRequestPropRequestedTeamsItemsPropParent(
    GitHubModel
):
    """WebhookPullRequestReviewCommentEditedPropPullRequestPropRequestedTeamsItemsPropP
    arent
    """

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestReviewCommentEditedPropPullRequestPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewDismissed(GitHubModel):
    """pull_request_review dismissed event"""

    action: Literal["dismissed"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    pull_request: WebhookPullRequestReviewDismissedPropPullRequest = Field(
        title="Simple Pull Request"
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    review: WebhookPullRequestReviewDismissedPropReview = Field(
        description="The review that was affected."
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookPullRequestReviewDismissedPropPullRequest(GitHubModel):
    """Simple Pull Request"""

    links: WebhookPullRequestReviewDismissedPropPullRequestPropLinks = Field(
        alias="_links"
    )
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    assignee: Union[
        WebhookPullRequestReviewDismissedPropPullRequestPropAssignee, None
    ] = Field(title="User")
    assignees: List[
        Union[WebhookPullRequestReviewDismissedPropPullRequestPropAssigneesItems, None]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    auto_merge: Union[
        WebhookPullRequestReviewDismissedPropPullRequestPropAutoMerge, None
    ] = Field(
        title="PullRequestAutoMerge",
        description="The status of auto merging a pull request.",
    )
    base: WebhookPullRequestReviewDismissedPropPullRequestPropBase = Field()
    body: Union[str, None] = Field()
    closed_at: Union[str, None] = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    created_at: str = Field()
    diff_url: str = Field()
    draft: bool = Field()
    head: WebhookPullRequestReviewDismissedPropPullRequestPropHead = Field()
    html_url: str = Field()
    id: int = Field()
    issue_url: str = Field()
    labels: List[
        WebhookPullRequestReviewDismissedPropPullRequestPropLabelsItems
    ] = Field()
    locked: bool = Field()
    merge_commit_sha: Union[str, None] = Field()
    merged_at: Union[str, None] = Field()
    milestone: Union[
        WebhookPullRequestReviewDismissedPropPullRequestPropMilestone, None
    ] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field()
    patch_url: str = Field()
    requested_reviewers: List[
        Union[
            WebhookPullRequestReviewDismissedPropPullRequestPropRequestedReviewersItemsOneof0,
            None,
            WebhookPullRequestReviewDismissedPropPullRequestPropRequestedReviewersItemsOneof1,
        ]
    ] = Field()
    requested_teams: List[
        WebhookPullRequestReviewDismissedPropPullRequestPropRequestedTeamsItems
    ] = Field()
    review_comment_url: str = Field()
    review_comments_url: str = Field()
    state: Literal["open", "closed"] = Field()
    statuses_url: str = Field()
    title: str = Field()
    updated_at: str = Field()
    url: str = Field()
    user: Union[WebhookPullRequestReviewDismissedPropPullRequestPropUser, None] = Field(
        title="User"
    )


class WebhookPullRequestReviewDismissedPropPullRequestPropLinks(GitHubModel):
    """WebhookPullRequestReviewDismissedPropPullRequestPropLinks"""

    comments: WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropComments = (
        Field(title="Link")
    )
    commits: WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropCommits = (
        Field(title="Link")
    )
    html: WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropHtml = Field(
        title="Link"
    )
    issue: WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropIssue = Field(
        title="Link"
    )
    review_comment: WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropReviewComment = Field(
        title="Link"
    )
    review_comments: WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropReviewComments = Field(
        title="Link"
    )
    self_: WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropSelf = Field(
        alias="self", title="Link"
    )
    statuses: WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropStatuses = (
        Field(title="Link")
    )


class WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropComments(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropCommits(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropHtml(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropIssue(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropReviewComment(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropReviewComments(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropSelf(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropStatuses(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewDismissedPropPullRequestPropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewDismissedPropPullRequestPropAssigneesItems(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewDismissedPropPullRequestPropAutoMergePropEnabledBy(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewDismissedPropPullRequestPropAutoMerge(GitHubModel):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None] = Field(
        description="Commit message for the merge commit."
    )
    commit_title: Union[str, None] = Field(
        description="Title for the merge commit message."
    )
    enabled_by: Union[
        WebhookPullRequestReviewDismissedPropPullRequestPropAutoMergePropEnabledBy, None
    ] = Field(title="User")
    merge_method: Literal["merge", "squash", "rebase"] = Field(
        description="The merge method to use."
    )


class WebhookPullRequestReviewDismissedPropPullRequestPropBase(GitHubModel):
    """WebhookPullRequestReviewDismissedPropPullRequestPropBase"""

    label: str = Field()
    ref: str = Field()
    repo: WebhookPullRequestReviewDismissedPropPullRequestPropBasePropRepo = Field(
        title="Repository", description="A git repository"
    )
    sha: str = Field()
    user: Union[
        WebhookPullRequestReviewDismissedPropPullRequestPropBasePropUser, None
    ] = Field(title="User")


class WebhookPullRequestReviewDismissedPropPullRequestPropBasePropRepo(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestReviewDismissedPropPullRequestPropBasePropRepoPropLicense,
        None,
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestReviewDismissedPropPullRequestPropBasePropRepoPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestReviewDismissedPropPullRequestPropBasePropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestReviewDismissedPropPullRequestPropBasePropRepoPropLicense(
    GitHubModel
):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestReviewDismissedPropPullRequestPropBasePropRepoPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewDismissedPropPullRequestPropBasePropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestReviewDismissedPropPullRequestPropBasePropRepoPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestReviewDismissedPropPullRequestPropBasePropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewDismissedPropPullRequestPropHead(GitHubModel):
    """WebhookPullRequestReviewDismissedPropPullRequestPropHead"""

    label: str = Field()
    ref: str = Field()
    repo: Union[
        WebhookPullRequestReviewDismissedPropPullRequestPropHeadPropRepo, None
    ] = Field(title="Repository", description="A git repository")
    sha: str = Field()
    user: Union[
        WebhookPullRequestReviewDismissedPropPullRequestPropHeadPropUser, None
    ] = Field(title="User")


class WebhookPullRequestReviewDismissedPropPullRequestPropHeadPropRepoPropLicense(
    GitHubModel
):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestReviewDismissedPropPullRequestPropHeadPropRepoPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewDismissedPropPullRequestPropHeadPropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestReviewDismissedPropPullRequestPropHeadPropRepoPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestReviewDismissedPropPullRequestPropHeadPropRepo(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestReviewDismissedPropPullRequestPropHeadPropRepoPropLicense,
        None,
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestReviewDismissedPropPullRequestPropHeadPropRepoPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestReviewDismissedPropPullRequestPropHeadPropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestReviewDismissedPropPullRequestPropHeadPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewDismissedPropPullRequestPropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookPullRequestReviewDismissedPropPullRequestPropMilestonePropCreator(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewDismissedPropPullRequestPropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookPullRequestReviewDismissedPropPullRequestPropMilestonePropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookPullRequestReviewDismissedPropPullRequestPropRequestedReviewersItemsOneof0(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewDismissedPropPullRequestPropRequestedReviewersItemsOneof1(
    GitHubModel
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    parent: Missing[
        Union[
            WebhookPullRequestReviewDismissedPropPullRequestPropRequestedReviewersItemsOneof1PropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestReviewDismissedPropPullRequestPropRequestedReviewersItemsOneof1PropParent(
    GitHubModel
):
    """WebhookPullRequestReviewDismissedPropPullRequestPropRequestedReviewersItemsOneof
    1PropParent
    """

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestReviewDismissedPropPullRequestPropRequestedTeamsItems(
    GitHubModel
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Description of the team"
    )
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field(description="Unique identifier of the team")
    members_url: Missing[str] = Field(default=UNSET)
    name: str = Field(description="Name of the team")
    node_id: Missing[str] = Field(default=UNSET)
    parent: Missing[
        Union[
            WebhookPullRequestReviewDismissedPropPullRequestPropRequestedTeamsItemsPropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: Missing[str] = Field(
        default=UNSET,
        description="Permission that the team will have for its repositories",
    )
    privacy: Missing[Literal["open", "closed", "secret"]] = Field(default=UNSET)
    repositories_url: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET, description="URL for the team")


class WebhookPullRequestReviewDismissedPropPullRequestPropRequestedTeamsItemsPropParent(
    GitHubModel
):
    """WebhookPullRequestReviewDismissedPropPullRequestPropRequestedTeamsItemsPropParen
    t
    """

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestReviewDismissedPropPullRequestPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewDismissedPropReview(GitHubModel):
    """WebhookPullRequestReviewDismissedPropReview

    The review that was affected.
    """

    links: WebhookPullRequestReviewDismissedPropReviewPropLinks = Field(alias="_links")
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: Union[str, None] = Field(description="The text of the review.")
    commit_id: str = Field(description="A commit SHA for the review.")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the review")
    node_id: str = Field()
    pull_request_url: str = Field()
    state: Literal["dismissed", "approved", "changes_requested"] = Field()
    submitted_at: datetime = Field()
    user: Union[WebhookPullRequestReviewDismissedPropReviewPropUser, None] = Field(
        title="User"
    )


class WebhookPullRequestReviewDismissedPropReviewPropLinks(GitHubModel):
    """WebhookPullRequestReviewDismissedPropReviewPropLinks"""

    html: WebhookPullRequestReviewDismissedPropReviewPropLinksPropHtml = Field(
        title="Link"
    )
    pull_request: WebhookPullRequestReviewDismissedPropReviewPropLinksPropPullRequest = Field(
        title="Link"
    )


class WebhookPullRequestReviewDismissedPropReviewPropLinksPropHtml(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewDismissedPropReviewPropLinksPropPullRequest(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewDismissedPropReviewPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewEdited(GitHubModel):
    """pull_request_review edited event"""

    action: Literal["edited"] = Field()
    changes: WebhookPullRequestReviewEditedPropChanges = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    pull_request: WebhookPullRequestReviewEditedPropPullRequest = Field(
        title="Simple Pull Request"
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    review: WebhookPullRequestReviewEditedPropReview = Field(
        description="The review that was affected."
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookPullRequestReviewEditedPropChanges(GitHubModel):
    """WebhookPullRequestReviewEditedPropChanges"""

    body: Missing[WebhookPullRequestReviewEditedPropChangesPropBody] = Field(
        default=UNSET
    )


class WebhookPullRequestReviewEditedPropChangesPropBody(GitHubModel):
    """WebhookPullRequestReviewEditedPropChangesPropBody"""

    from_: str = Field(
        alias="from",
        description="The previous version of the body if the action was `edited`.",
    )


class WebhookPullRequestReviewEditedPropPullRequest(GitHubModel):
    """Simple Pull Request"""

    links: WebhookPullRequestReviewEditedPropPullRequestPropLinks = Field(
        alias="_links"
    )
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    assignee: Union[
        WebhookPullRequestReviewEditedPropPullRequestPropAssignee, None
    ] = Field(title="User")
    assignees: List[
        Union[WebhookPullRequestReviewEditedPropPullRequestPropAssigneesItems, None]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    auto_merge: Union[
        WebhookPullRequestReviewEditedPropPullRequestPropAutoMerge, None
    ] = Field(
        title="PullRequestAutoMerge",
        description="The status of auto merging a pull request.",
    )
    base: WebhookPullRequestReviewEditedPropPullRequestPropBase = Field()
    body: Union[str, None] = Field()
    closed_at: Union[str, None] = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    created_at: str = Field()
    diff_url: str = Field()
    draft: bool = Field()
    head: WebhookPullRequestReviewEditedPropPullRequestPropHead = Field()
    html_url: str = Field()
    id: int = Field()
    issue_url: str = Field()
    labels: List[WebhookPullRequestReviewEditedPropPullRequestPropLabelsItems] = Field()
    locked: bool = Field()
    merge_commit_sha: Union[str, None] = Field()
    merged_at: Union[str, None] = Field()
    milestone: Union[
        WebhookPullRequestReviewEditedPropPullRequestPropMilestone, None
    ] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field()
    patch_url: str = Field()
    requested_reviewers: List[
        Union[
            WebhookPullRequestReviewEditedPropPullRequestPropRequestedReviewersItemsOneof0,
            None,
            WebhookPullRequestReviewEditedPropPullRequestPropRequestedReviewersItemsOneof1,
        ]
    ] = Field()
    requested_teams: List[
        WebhookPullRequestReviewEditedPropPullRequestPropRequestedTeamsItems
    ] = Field()
    review_comment_url: str = Field()
    review_comments_url: str = Field()
    state: Literal["open", "closed"] = Field()
    statuses_url: str = Field()
    title: str = Field()
    updated_at: str = Field()
    url: str = Field()
    user: Union[WebhookPullRequestReviewEditedPropPullRequestPropUser, None] = Field(
        title="User"
    )


class WebhookPullRequestReviewEditedPropPullRequestPropLinks(GitHubModel):
    """WebhookPullRequestReviewEditedPropPullRequestPropLinks"""

    comments: WebhookPullRequestReviewEditedPropPullRequestPropLinksPropComments = (
        Field(title="Link")
    )
    commits: WebhookPullRequestReviewEditedPropPullRequestPropLinksPropCommits = Field(
        title="Link"
    )
    html: WebhookPullRequestReviewEditedPropPullRequestPropLinksPropHtml = Field(
        title="Link"
    )
    issue: WebhookPullRequestReviewEditedPropPullRequestPropLinksPropIssue = Field(
        title="Link"
    )
    review_comment: WebhookPullRequestReviewEditedPropPullRequestPropLinksPropReviewComment = Field(
        title="Link"
    )
    review_comments: WebhookPullRequestReviewEditedPropPullRequestPropLinksPropReviewComments = Field(
        title="Link"
    )
    self_: WebhookPullRequestReviewEditedPropPullRequestPropLinksPropSelf = Field(
        alias="self", title="Link"
    )
    statuses: WebhookPullRequestReviewEditedPropPullRequestPropLinksPropStatuses = (
        Field(title="Link")
    )


class WebhookPullRequestReviewEditedPropPullRequestPropLinksPropComments(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewEditedPropPullRequestPropLinksPropCommits(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewEditedPropPullRequestPropLinksPropHtml(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewEditedPropPullRequestPropLinksPropIssue(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewEditedPropPullRequestPropLinksPropReviewComment(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewEditedPropPullRequestPropLinksPropReviewComments(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewEditedPropPullRequestPropLinksPropSelf(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewEditedPropPullRequestPropLinksPropStatuses(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewEditedPropPullRequestPropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewEditedPropPullRequestPropAssigneesItems(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewEditedPropPullRequestPropAutoMergePropEnabledBy(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewEditedPropPullRequestPropAutoMerge(GitHubModel):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None] = Field(
        description="Commit message for the merge commit."
    )
    commit_title: Union[str, None] = Field(
        description="Title for the merge commit message."
    )
    enabled_by: Union[
        WebhookPullRequestReviewEditedPropPullRequestPropAutoMergePropEnabledBy, None
    ] = Field(title="User")
    merge_method: Literal["merge", "squash", "rebase"] = Field(
        description="The merge method to use."
    )


class WebhookPullRequestReviewEditedPropPullRequestPropBase(GitHubModel):
    """WebhookPullRequestReviewEditedPropPullRequestPropBase"""

    label: str = Field()
    ref: str = Field()
    repo: WebhookPullRequestReviewEditedPropPullRequestPropBasePropRepo = Field(
        title="Repository", description="A git repository"
    )
    sha: str = Field()
    user: Union[
        WebhookPullRequestReviewEditedPropPullRequestPropBasePropUser, None
    ] = Field(title="User")


class WebhookPullRequestReviewEditedPropPullRequestPropBasePropRepo(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestReviewEditedPropPullRequestPropBasePropRepoPropLicense, None
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestReviewEditedPropPullRequestPropBasePropRepoPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestReviewEditedPropPullRequestPropBasePropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()


class WebhookPullRequestReviewEditedPropPullRequestPropBasePropRepoPropLicense(
    GitHubModel
):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestReviewEditedPropPullRequestPropBasePropRepoPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewEditedPropPullRequestPropBasePropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestReviewEditedPropPullRequestPropBasePropRepoPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestReviewEditedPropPullRequestPropBasePropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewEditedPropPullRequestPropHead(GitHubModel):
    """WebhookPullRequestReviewEditedPropPullRequestPropHead"""

    label: str = Field()
    ref: str = Field()
    repo: Union[
        WebhookPullRequestReviewEditedPropPullRequestPropHeadPropRepo, None
    ] = Field(title="Repository", description="A git repository")
    sha: str = Field()
    user: Union[
        WebhookPullRequestReviewEditedPropPullRequestPropHeadPropUser, None
    ] = Field(title="User")


class WebhookPullRequestReviewEditedPropPullRequestPropHeadPropRepoPropLicense(
    GitHubModel
):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestReviewEditedPropPullRequestPropHeadPropRepoPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewEditedPropPullRequestPropHeadPropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestReviewEditedPropPullRequestPropHeadPropRepoPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestReviewEditedPropPullRequestPropHeadPropRepo(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestReviewEditedPropPullRequestPropHeadPropRepoPropLicense, None
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestReviewEditedPropPullRequestPropHeadPropRepoPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestReviewEditedPropPullRequestPropHeadPropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()


class WebhookPullRequestReviewEditedPropPullRequestPropHeadPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewEditedPropPullRequestPropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookPullRequestReviewEditedPropPullRequestPropMilestonePropCreator(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewEditedPropPullRequestPropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookPullRequestReviewEditedPropPullRequestPropMilestonePropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookPullRequestReviewEditedPropPullRequestPropRequestedReviewersItemsOneof0(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewEditedPropPullRequestPropRequestedReviewersItemsOneof1(
    GitHubModel
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    parent: Missing[
        Union[
            WebhookPullRequestReviewEditedPropPullRequestPropRequestedReviewersItemsOneof1PropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestReviewEditedPropPullRequestPropRequestedReviewersItemsOneof1PropParent(
    GitHubModel
):
    """WebhookPullRequestReviewEditedPropPullRequestPropRequestedReviewersItemsOneof1Pr
    opParent
    """

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestReviewEditedPropPullRequestPropRequestedTeamsItems(GitHubModel):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Description of the team"
    )
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field(description="Unique identifier of the team")
    members_url: Missing[str] = Field(default=UNSET)
    name: str = Field(description="Name of the team")
    node_id: Missing[str] = Field(default=UNSET)
    parent: Missing[
        Union[
            WebhookPullRequestReviewEditedPropPullRequestPropRequestedTeamsItemsPropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: Missing[str] = Field(
        default=UNSET,
        description="Permission that the team will have for its repositories",
    )
    privacy: Missing[Literal["open", "closed", "secret"]] = Field(default=UNSET)
    repositories_url: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET, description="URL for the team")


class WebhookPullRequestReviewEditedPropPullRequestPropRequestedTeamsItemsPropParent(
    GitHubModel
):
    """WebhookPullRequestReviewEditedPropPullRequestPropRequestedTeamsItemsPropParent"""

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestReviewEditedPropPullRequestPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewEditedPropReview(GitHubModel):
    """WebhookPullRequestReviewEditedPropReview

    The review that was affected.
    """

    links: WebhookPullRequestReviewEditedPropReviewPropLinks = Field(alias="_links")
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: Union[str, None] = Field(description="The text of the review.")
    commit_id: str = Field(description="A commit SHA for the review.")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the review")
    node_id: str = Field()
    pull_request_url: str = Field()
    state: str = Field()
    submitted_at: Union[datetime, None] = Field()
    user: Union[WebhookPullRequestReviewEditedPropReviewPropUser, None] = Field(
        title="User"
    )


class WebhookPullRequestReviewEditedPropReviewPropLinks(GitHubModel):
    """WebhookPullRequestReviewEditedPropReviewPropLinks"""

    html: WebhookPullRequestReviewEditedPropReviewPropLinksPropHtml = Field(
        title="Link"
    )
    pull_request: WebhookPullRequestReviewEditedPropReviewPropLinksPropPullRequest = (
        Field(title="Link")
    )


class WebhookPullRequestReviewEditedPropReviewPropLinksPropHtml(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewEditedPropReviewPropLinksPropPullRequest(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewEditedPropReviewPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestRemovedOneof0(GitHubModel):
    """WebhookPullRequestReviewRequestRemovedOneof0"""

    action: Literal["review_request_removed"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    number: int = Field(description="The pull request number.")
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    pull_request: WebhookPullRequestReviewRequestRemovedOneof0PropPullRequest = Field(
        title="Pull Request"
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    requested_reviewer: Union[
        WebhookPullRequestReviewRequestRemovedOneof0PropRequestedReviewer, None
    ] = Field(title="User")
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequest(GitHubModel):
    """Pull Request"""

    links: WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinks = Field(
        alias="_links"
    )
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    additions: Missing[int] = Field(default=UNSET)
    assignee: Union[
        WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropAssignee, None
    ] = Field(title="User")
    assignees: List[
        Union[
            WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropAssigneesItems,
            None,
        ]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    auto_merge: Union[
        WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropAutoMerge, None
    ] = Field(
        title="PullRequestAutoMerge",
        description="The status of auto merging a pull request.",
    )
    base: WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBase = Field()
    body: Union[str, None] = Field()
    changed_files: Missing[int] = Field(default=UNSET)
    closed_at: Union[datetime, None] = Field()
    comments: Missing[int] = Field(default=UNSET)
    comments_url: str = Field()
    commits: Missing[int] = Field(default=UNSET)
    commits_url: str = Field()
    created_at: datetime = Field()
    deletions: Missing[int] = Field(default=UNSET)
    diff_url: str = Field()
    draft: bool = Field(
        description="Indicates whether or not the pull request is a draft."
    )
    head: WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHead = Field()
    html_url: str = Field()
    id: int = Field()
    issue_url: str = Field()
    labels: List[
        WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLabelsItems
    ] = Field()
    locked: bool = Field()
    maintainer_can_modify: Missing[bool] = Field(
        default=UNSET,
        description="Indicates whether maintainers can modify the pull request.",
    )
    merge_commit_sha: Union[str, None] = Field()
    mergeable: Missing[Union[bool, None]] = Field(default=UNSET)
    mergeable_state: Missing[str] = Field(default=UNSET)
    merged: Missing[Union[bool, None]] = Field(default=UNSET)
    merged_at: Union[datetime, None] = Field()
    merged_by: Missing[
        Union[
            WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropMergedBy,
            None,
        ]
    ] = Field(default=UNSET, title="User")
    milestone: Union[
        WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropMilestone, None
    ] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field(
        description="Number uniquely identifying the pull request within its repository."
    )
    patch_url: str = Field()
    rebaseable: Missing[Union[bool, None]] = Field(default=UNSET)
    requested_reviewers: List[
        Union[
            WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropRequestedReviewersItemsOneof0,
            None,
            WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropRequestedReviewersItemsOneof1,
        ]
    ] = Field()
    requested_teams: List[
        WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropRequestedTeamsItems
    ] = Field()
    review_comment_url: str = Field()
    review_comments: Missing[int] = Field(default=UNSET)
    review_comments_url: str = Field()
    state: Literal["open", "closed"] = Field(
        description="State of this Pull Request. Either `open` or `closed`."
    )
    statuses_url: str = Field()
    title: str = Field(description="The title of the pull request.")
    updated_at: datetime = Field()
    url: str = Field()
    user: Union[
        WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropUser, None
    ] = Field(title="User")


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinks(GitHubModel):
    """WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinks"""

    comments: WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropComments = Field(
        title="Link"
    )
    commits: WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropCommits = Field(
        title="Link"
    )
    html: WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropHtml = Field(
        title="Link"
    )
    issue: WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropIssue = Field(
        title="Link"
    )
    review_comment: WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropReviewComment = Field(
        title="Link"
    )
    review_comments: WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropReviewComments = Field(
        title="Link"
    )
    self_: WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropSelf = Field(
        alias="self", title="Link"
    )
    statuses: WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropStatuses = Field(
        title="Link"
    )


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropComments(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropCommits(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropHtml(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropIssue(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropReviewComment(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropReviewComments(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropSelf(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropStatuses(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropAssignee(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropAssigneesItems(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropAutoMergePropEnabledBy(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropAutoMerge(
    GitHubModel
):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None] = Field(
        description="Commit message for the merge commit."
    )
    commit_title: Union[str, None] = Field(
        description="Title for the merge commit message."
    )
    enabled_by: Union[
        WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropAutoMergePropEnabledBy,
        None,
    ] = Field(title="User")
    merge_method: Literal["merge", "squash", "rebase"] = Field(
        description="The merge method to use."
    )


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBase(GitHubModel):
    """WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBase"""

    label: str = Field()
    ref: str = Field()
    repo: WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBasePropRepo = Field(
        title="Repository", description="A git repository"
    )
    sha: str = Field()
    user: Union[
        WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBasePropUser,
        None,
    ] = Field(title="User")


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBasePropRepo(
    GitHubModel
):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBasePropRepoPropLicense,
        None,
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBasePropRepoPropOwner,
        None,
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBasePropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET, description="The default value for a squash merge commit title."
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBasePropRepoPropLicense(
    GitHubModel
):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBasePropRepoPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBasePropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBasePropRepoPropP
    ermissions
    """

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBasePropUser(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHead(GitHubModel):
    """WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHead"""

    label: str = Field()
    ref: str = Field()
    repo: WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHeadPropRepo = Field(
        title="Repository", description="A git repository"
    )
    sha: str = Field()
    user: Union[
        WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHeadPropUser,
        None,
    ] = Field(title="User")


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHeadPropRepo(
    GitHubModel
):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHeadPropRepoPropLicense,
        None,
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHeadPropRepoPropOwner,
        None,
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHeadPropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHeadPropRepoPropLicense(
    GitHubModel
):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHeadPropRepoPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHeadPropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHeadPropRepoPropP
    ermissions
    """

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHeadPropUser(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLabelsItems(
    GitHubModel
):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropMergedBy(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropMilestonePropCreator(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropMilestone(
    GitHubModel
):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropMilestonePropCreator,
        None,
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropRequestedReviewersItemsOneof0(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropRequestedReviewersItemsOneof1(
    GitHubModel
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    parent: Missing[
        Union[
            WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropRequestedReviewersItemsOneof1PropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropRequestedReviewersItemsOneof1PropParent(
    GitHubModel
):
    """WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropRequestedReviewer
    sItemsOneof1PropParent
    """

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropRequestedTeamsItems(
    GitHubModel
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    parent: Missing[
        Union[
            WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropRequestedTeamsItemsPropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropRequestedTeamsItemsPropParent(
    GitHubModel
):
    """WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropRequestedTeamsIte
    msPropParent
    """

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestRemovedOneof0PropRequestedReviewer(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestRemovedOneof1(GitHubModel):
    """WebhookPullRequestReviewRequestRemovedOneof1"""

    action: Literal["review_request_removed"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    number: int = Field(description="The pull request number.")
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    pull_request: WebhookPullRequestReviewRequestRemovedOneof1PropPullRequest = Field(
        title="Pull Request"
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    requested_team: WebhookPullRequestReviewRequestRemovedOneof1PropRequestedTeam = Field(
        title="Team",
        description="Groups of organization members that gives permissions on specified repositories.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequest(GitHubModel):
    """Pull Request"""

    links: WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinks = Field(
        alias="_links"
    )
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    additions: Missing[int] = Field(default=UNSET)
    assignee: Union[
        WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropAssignee, None
    ] = Field(title="User")
    assignees: List[
        Union[
            WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropAssigneesItems,
            None,
        ]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    auto_merge: Union[
        WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropAutoMerge, None
    ] = Field(
        title="PullRequestAutoMerge",
        description="The status of auto merging a pull request.",
    )
    base: WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBase = Field()
    body: Union[str, None] = Field()
    changed_files: Missing[int] = Field(default=UNSET)
    closed_at: Union[datetime, None] = Field()
    comments: Missing[int] = Field(default=UNSET)
    comments_url: str = Field()
    commits: Missing[int] = Field(default=UNSET)
    commits_url: str = Field()
    created_at: datetime = Field()
    deletions: Missing[int] = Field(default=UNSET)
    diff_url: str = Field()
    draft: bool = Field(
        description="Indicates whether or not the pull request is a draft."
    )
    head: WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHead = Field()
    html_url: str = Field()
    id: int = Field()
    issue_url: str = Field()
    labels: List[
        WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLabelsItems
    ] = Field()
    locked: bool = Field()
    maintainer_can_modify: Missing[bool] = Field(
        default=UNSET,
        description="Indicates whether maintainers can modify the pull request.",
    )
    merge_commit_sha: Union[str, None] = Field()
    mergeable: Missing[Union[bool, None]] = Field(default=UNSET)
    mergeable_state: Missing[str] = Field(default=UNSET)
    merged: Missing[Union[bool, None]] = Field(default=UNSET)
    merged_at: Union[datetime, None] = Field()
    merged_by: Missing[
        Union[
            WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropMergedBy,
            None,
        ]
    ] = Field(default=UNSET, title="User")
    milestone: Union[
        WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropMilestone, None
    ] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field(
        description="Number uniquely identifying the pull request within its repository."
    )
    patch_url: str = Field()
    rebaseable: Missing[Union[bool, None]] = Field(default=UNSET)
    requested_reviewers: List[
        Union[
            WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropRequestedReviewersItemsOneof0,
            None,
            WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropRequestedReviewersItemsOneof1,
        ]
    ] = Field()
    requested_teams: List[
        WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropRequestedTeamsItems
    ] = Field()
    review_comment_url: str = Field()
    review_comments: Missing[int] = Field(default=UNSET)
    review_comments_url: str = Field()
    state: Literal["open", "closed"] = Field(
        description="State of this Pull Request. Either `open` or `closed`."
    )
    statuses_url: str = Field()
    title: str = Field(description="The title of the pull request.")
    updated_at: datetime = Field()
    url: str = Field()
    user: Union[
        WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropUser, None
    ] = Field(title="User")


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinks(GitHubModel):
    """WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinks"""

    comments: WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropComments = Field(
        title="Link"
    )
    commits: WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropCommits = Field(
        title="Link"
    )
    html: WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropHtml = Field(
        title="Link"
    )
    issue: WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropIssue = Field(
        title="Link"
    )
    review_comment: WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropReviewComment = Field(
        title="Link"
    )
    review_comments: WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropReviewComments = Field(
        title="Link"
    )
    self_: WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropSelf = Field(
        alias="self", title="Link"
    )
    statuses: WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropStatuses = Field(
        title="Link"
    )


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropComments(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropCommits(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropHtml(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropIssue(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropReviewComment(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropReviewComments(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropSelf(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropStatuses(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropAssignee(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropAssigneesItems(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropAutoMergePropEnabledBy(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropAutoMerge(
    GitHubModel
):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None] = Field(
        description="Commit message for the merge commit."
    )
    commit_title: Union[str, None] = Field(
        description="Title for the merge commit message."
    )
    enabled_by: Union[
        WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropAutoMergePropEnabledBy,
        None,
    ] = Field(title="User")
    merge_method: Literal["merge", "squash", "rebase"] = Field(
        description="The merge method to use."
    )


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBase(GitHubModel):
    """WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBase"""

    label: str = Field()
    ref: str = Field()
    repo: WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBasePropRepo = Field(
        title="Repository", description="A git repository"
    )
    sha: str = Field()
    user: Union[
        WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBasePropUser,
        None,
    ] = Field(title="User")


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBasePropRepo(
    GitHubModel
):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBasePropRepoPropLicense,
        None,
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBasePropRepoPropOwner,
        None,
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBasePropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBasePropRepoPropLicense(
    GitHubModel
):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBasePropRepoPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBasePropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBasePropRepoPropP
    ermissions
    """

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBasePropUser(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHead(GitHubModel):
    """WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHead"""

    label: str = Field()
    ref: str = Field()
    repo: WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHeadPropRepo = Field(
        title="Repository", description="A git repository"
    )
    sha: str = Field()
    user: Union[
        WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHeadPropUser,
        None,
    ] = Field(title="User")


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHeadPropRepo(
    GitHubModel
):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHeadPropRepoPropLicense,
        None,
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHeadPropRepoPropOwner,
        None,
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHeadPropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHeadPropRepoPropLicense(
    GitHubModel
):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHeadPropRepoPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHeadPropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHeadPropRepoPropP
    ermissions
    """

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHeadPropUser(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLabelsItems(
    GitHubModel
):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropMergedBy(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropMilestonePropCreator(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropMilestone(
    GitHubModel
):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropMilestonePropCreator,
        None,
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropRequestedReviewersItemsOneof0(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropRequestedReviewersItemsOneof1(
    GitHubModel
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    parent: Missing[
        Union[
            WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropRequestedReviewersItemsOneof1PropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropRequestedReviewersItemsOneof1PropParent(
    GitHubModel
):
    """WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropRequestedReviewer
    sItemsOneof1PropParent
    """

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropRequestedTeamsItems(
    GitHubModel
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    parent: Missing[
        Union[
            WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropRequestedTeamsItemsPropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropRequestedTeamsItemsPropParent(
    GitHubModel
):
    """WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropRequestedTeamsIte
    msPropParent
    """

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestRemovedOneof1PropRequestedTeam(GitHubModel):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    parent: Missing[
        Union[
            WebhookPullRequestReviewRequestRemovedOneof1PropRequestedTeamPropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestReviewRequestRemovedOneof1PropRequestedTeamPropParent(
    GitHubModel
):
    """WebhookPullRequestReviewRequestRemovedOneof1PropRequestedTeamPropParent"""

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestReviewRequestedOneof0(GitHubModel):
    """WebhookPullRequestReviewRequestedOneof0"""

    action: Literal["review_requested"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    number: int = Field(description="The pull request number.")
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    pull_request: WebhookPullRequestReviewRequestedOneof0PropPullRequest = Field(
        title="Pull Request"
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    requested_reviewer: Union[
        WebhookPullRequestReviewRequestedOneof0PropRequestedReviewer, None
    ] = Field(title="User")
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookPullRequestReviewRequestedOneof0PropPullRequest(GitHubModel):
    """Pull Request"""

    links: WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinks = Field(
        alias="_links"
    )
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    additions: Missing[int] = Field(default=UNSET)
    assignee: Union[
        WebhookPullRequestReviewRequestedOneof0PropPullRequestPropAssignee, None
    ] = Field(title="User")
    assignees: List[
        Union[
            WebhookPullRequestReviewRequestedOneof0PropPullRequestPropAssigneesItems,
            None,
        ]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    auto_merge: Union[
        WebhookPullRequestReviewRequestedOneof0PropPullRequestPropAutoMerge, None
    ] = Field(
        title="PullRequestAutoMerge",
        description="The status of auto merging a pull request.",
    )
    base: WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBase = Field()
    body: Union[str, None] = Field()
    changed_files: Missing[int] = Field(default=UNSET)
    closed_at: Union[datetime, None] = Field()
    comments: Missing[int] = Field(default=UNSET)
    comments_url: str = Field()
    commits: Missing[int] = Field(default=UNSET)
    commits_url: str = Field()
    created_at: datetime = Field()
    deletions: Missing[int] = Field(default=UNSET)
    diff_url: str = Field()
    draft: bool = Field(
        description="Indicates whether or not the pull request is a draft."
    )
    head: WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHead = Field()
    html_url: str = Field()
    id: int = Field()
    issue_url: str = Field()
    labels: List[
        WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLabelsItems
    ] = Field()
    locked: bool = Field()
    maintainer_can_modify: Missing[bool] = Field(
        default=UNSET,
        description="Indicates whether maintainers can modify the pull request.",
    )
    merge_commit_sha: Union[str, None] = Field()
    mergeable: Missing[Union[bool, None]] = Field(default=UNSET)
    mergeable_state: Missing[str] = Field(default=UNSET)
    merged: Missing[Union[bool, None]] = Field(default=UNSET)
    merged_at: Union[datetime, None] = Field()
    merged_by: Missing[
        Union[WebhookPullRequestReviewRequestedOneof0PropPullRequestPropMergedBy, None]
    ] = Field(default=UNSET, title="User")
    milestone: Union[
        WebhookPullRequestReviewRequestedOneof0PropPullRequestPropMilestone, None
    ] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field(
        description="Number uniquely identifying the pull request within its repository."
    )
    patch_url: str = Field()
    rebaseable: Missing[Union[bool, None]] = Field(default=UNSET)
    requested_reviewers: List[
        Union[
            WebhookPullRequestReviewRequestedOneof0PropPullRequestPropRequestedReviewersItemsOneof0,
            None,
            WebhookPullRequestReviewRequestedOneof0PropPullRequestPropRequestedReviewersItemsOneof1,
        ]
    ] = Field()
    requested_teams: List[
        WebhookPullRequestReviewRequestedOneof0PropPullRequestPropRequestedTeamsItems
    ] = Field()
    review_comment_url: str = Field()
    review_comments: Missing[int] = Field(default=UNSET)
    review_comments_url: str = Field()
    state: Literal["open", "closed"] = Field(
        description="State of this Pull Request. Either `open` or `closed`."
    )
    statuses_url: str = Field()
    title: str = Field(description="The title of the pull request.")
    updated_at: datetime = Field()
    url: str = Field()
    user: Union[
        WebhookPullRequestReviewRequestedOneof0PropPullRequestPropUser, None
    ] = Field(title="User")


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinks(GitHubModel):
    """WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinks"""

    comments: WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropComments = Field(
        title="Link"
    )
    commits: WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropCommits = Field(
        title="Link"
    )
    html: WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropHtml = (
        Field(title="Link")
    )
    issue: WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropIssue = (
        Field(title="Link")
    )
    review_comment: WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropReviewComment = Field(
        title="Link"
    )
    review_comments: WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropReviewComments = Field(
        title="Link"
    )
    self_: WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropSelf = (
        Field(alias="self", title="Link")
    )
    statuses: WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropStatuses = Field(
        title="Link"
    )


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropComments(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropCommits(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropHtml(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropIssue(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropReviewComment(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropReviewComments(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropSelf(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropStatuses(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropAssigneesItems(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropAutoMergePropEnabledBy(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropAutoMerge(GitHubModel):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None] = Field(
        description="Commit message for the merge commit."
    )
    commit_title: Union[str, None] = Field(
        description="Title for the merge commit message."
    )
    enabled_by: Union[
        WebhookPullRequestReviewRequestedOneof0PropPullRequestPropAutoMergePropEnabledBy,
        None,
    ] = Field(title="User")
    merge_method: Literal["merge", "squash", "rebase"] = Field(
        description="The merge method to use."
    )


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBase(GitHubModel):
    """WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBase"""

    label: str = Field()
    ref: str = Field()
    repo: WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBasePropRepo = (
        Field(title="Repository", description="A git repository")
    )
    sha: str = Field()
    user: Union[
        WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBasePropUser, None
    ] = Field(title="User")


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBasePropRepo(
    GitHubModel
):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBasePropRepoPropLicense,
        None,
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBasePropRepoPropOwner,
        None,
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBasePropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBasePropRepoPropLicense(
    GitHubModel
):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBasePropRepoPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBasePropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBasePropRepoPropPermis
    sions
    """

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBasePropUser(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHead(GitHubModel):
    """WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHead"""

    label: str = Field()
    ref: str = Field()
    repo: WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHeadPropRepo = (
        Field(title="Repository", description="A git repository")
    )
    sha: str = Field()
    user: Union[
        WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHeadPropUser, None
    ] = Field(title="User")


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHeadPropRepo(
    GitHubModel
):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHeadPropRepoPropLicense,
        None,
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHeadPropRepoPropOwner,
        None,
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHeadPropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHeadPropRepoPropLicense(
    GitHubModel
):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHeadPropRepoPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHeadPropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHeadPropRepoPropPermis
    sions
    """

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHeadPropUser(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLabelsItems(
    GitHubModel
):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropMergedBy(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropMilestonePropCreator(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookPullRequestReviewRequestedOneof0PropPullRequestPropMilestonePropCreator,
        None,
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropRequestedReviewersItemsOneof0(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropRequestedReviewersItemsOneof1(
    GitHubModel
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    parent: Missing[
        Union[
            WebhookPullRequestReviewRequestedOneof0PropPullRequestPropRequestedReviewersItemsOneof1PropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropRequestedReviewersItemsOneof1PropParent(
    GitHubModel
):
    """WebhookPullRequestReviewRequestedOneof0PropPullRequestPropRequestedReviewersItem
    sOneof1PropParent
    """

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropRequestedTeamsItems(
    GitHubModel
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Description of the team"
    )
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field(description="Unique identifier of the team")
    members_url: Missing[str] = Field(default=UNSET)
    name: str = Field(description="Name of the team")
    node_id: Missing[str] = Field(default=UNSET)
    parent: Missing[
        Union[
            WebhookPullRequestReviewRequestedOneof0PropPullRequestPropRequestedTeamsItemsPropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: Missing[str] = Field(
        default=UNSET,
        description="Permission that the team will have for its repositories",
    )
    privacy: Missing[Literal["open", "closed", "secret"]] = Field(default=UNSET)
    repositories_url: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET, description="URL for the team")


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropRequestedTeamsItemsPropParent(
    GitHubModel
):
    """WebhookPullRequestReviewRequestedOneof0PropPullRequestPropRequestedTeamsItemsPro
    pParent
    """

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestedOneof0PropRequestedReviewer(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestedOneof1(GitHubModel):
    """WebhookPullRequestReviewRequestedOneof1"""

    action: Literal["review_requested"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    number: int = Field(description="The pull request number.")
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    pull_request: WebhookPullRequestReviewRequestedOneof1PropPullRequest = Field(
        title="Pull Request"
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    requested_team: WebhookPullRequestReviewRequestedOneof1PropRequestedTeam = Field(
        title="Team",
        description="Groups of organization members that gives permissions on specified repositories.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookPullRequestReviewRequestedOneof1PropPullRequest(GitHubModel):
    """Pull Request"""

    links: WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinks = Field(
        alias="_links"
    )
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    additions: Missing[int] = Field(default=UNSET)
    assignee: Union[
        WebhookPullRequestReviewRequestedOneof1PropPullRequestPropAssignee, None
    ] = Field(title="User")
    assignees: List[
        Union[
            WebhookPullRequestReviewRequestedOneof1PropPullRequestPropAssigneesItems,
            None,
        ]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    auto_merge: Union[
        WebhookPullRequestReviewRequestedOneof1PropPullRequestPropAutoMerge, None
    ] = Field(
        title="PullRequestAutoMerge",
        description="The status of auto merging a pull request.",
    )
    base: WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBase = Field()
    body: Union[str, None] = Field()
    changed_files: Missing[int] = Field(default=UNSET)
    closed_at: Union[datetime, None] = Field()
    comments: Missing[int] = Field(default=UNSET)
    comments_url: str = Field()
    commits: Missing[int] = Field(default=UNSET)
    commits_url: str = Field()
    created_at: datetime = Field()
    deletions: Missing[int] = Field(default=UNSET)
    diff_url: str = Field()
    draft: bool = Field(
        description="Indicates whether or not the pull request is a draft."
    )
    head: WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHead = Field()
    html_url: str = Field()
    id: int = Field()
    issue_url: str = Field()
    labels: List[
        WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLabelsItems
    ] = Field()
    locked: bool = Field()
    maintainer_can_modify: Missing[bool] = Field(
        default=UNSET,
        description="Indicates whether maintainers can modify the pull request.",
    )
    merge_commit_sha: Union[str, None] = Field()
    mergeable: Missing[Union[bool, None]] = Field(default=UNSET)
    mergeable_state: Missing[str] = Field(default=UNSET)
    merged: Missing[Union[bool, None]] = Field(default=UNSET)
    merged_at: Union[datetime, None] = Field()
    merged_by: Missing[
        Union[WebhookPullRequestReviewRequestedOneof1PropPullRequestPropMergedBy, None]
    ] = Field(default=UNSET, title="User")
    milestone: Union[
        WebhookPullRequestReviewRequestedOneof1PropPullRequestPropMilestone, None
    ] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field(
        description="Number uniquely identifying the pull request within its repository."
    )
    patch_url: str = Field()
    rebaseable: Missing[Union[bool, None]] = Field(default=UNSET)
    requested_reviewers: List[
        Union[
            WebhookPullRequestReviewRequestedOneof1PropPullRequestPropRequestedReviewersItemsOneof0,
            None,
            WebhookPullRequestReviewRequestedOneof1PropPullRequestPropRequestedReviewersItemsOneof1,
        ]
    ] = Field()
    requested_teams: List[
        WebhookPullRequestReviewRequestedOneof1PropPullRequestPropRequestedTeamsItems
    ] = Field()
    review_comment_url: str = Field()
    review_comments: Missing[int] = Field(default=UNSET)
    review_comments_url: str = Field()
    state: Literal["open", "closed"] = Field(
        description="State of this Pull Request. Either `open` or `closed`."
    )
    statuses_url: str = Field()
    title: str = Field(description="The title of the pull request.")
    updated_at: datetime = Field()
    url: str = Field()
    user: Union[
        WebhookPullRequestReviewRequestedOneof1PropPullRequestPropUser, None
    ] = Field(title="User")


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinks(GitHubModel):
    """WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinks"""

    comments: WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropComments = Field(
        title="Link"
    )
    commits: WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropCommits = Field(
        title="Link"
    )
    html: WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropHtml = (
        Field(title="Link")
    )
    issue: WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropIssue = (
        Field(title="Link")
    )
    review_comment: WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropReviewComment = Field(
        title="Link"
    )
    review_comments: WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropReviewComments = Field(
        title="Link"
    )
    self_: WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropSelf = (
        Field(alias="self", title="Link")
    )
    statuses: WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropStatuses = Field(
        title="Link"
    )


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropComments(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropCommits(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropHtml(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropIssue(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropReviewComment(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropReviewComments(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropSelf(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropStatuses(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropAssigneesItems(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropAutoMergePropEnabledBy(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropAutoMerge(GitHubModel):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None] = Field(
        description="Commit message for the merge commit."
    )
    commit_title: Union[str, None] = Field(
        description="Title for the merge commit message."
    )
    enabled_by: Union[
        WebhookPullRequestReviewRequestedOneof1PropPullRequestPropAutoMergePropEnabledBy,
        None,
    ] = Field(title="User")
    merge_method: Literal["merge", "squash", "rebase"] = Field(
        description="The merge method to use."
    )


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBase(GitHubModel):
    """WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBase"""

    label: str = Field()
    ref: str = Field()
    repo: WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBasePropRepo = (
        Field(title="Repository", description="A git repository")
    )
    sha: str = Field()
    user: Union[
        WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBasePropUser, None
    ] = Field(title="User")


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBasePropRepo(
    GitHubModel
):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBasePropRepoPropLicense,
        None,
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBasePropRepoPropOwner,
        None,
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBasePropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBasePropRepoPropLicense(
    GitHubModel
):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBasePropRepoPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBasePropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBasePropRepoPropPermis
    sions
    """

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBasePropUser(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHead(GitHubModel):
    """WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHead"""

    label: str = Field()
    ref: str = Field()
    repo: WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHeadPropRepo = (
        Field(title="Repository", description="A git repository")
    )
    sha: str = Field()
    user: Union[
        WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHeadPropUser, None
    ] = Field(title="User")


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHeadPropRepo(
    GitHubModel
):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHeadPropRepoPropLicense,
        None,
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHeadPropRepoPropOwner,
        None,
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHeadPropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHeadPropRepoPropLicense(
    GitHubModel
):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHeadPropRepoPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHeadPropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHeadPropRepoPropPermis
    sions
    """

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHeadPropUser(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLabelsItems(
    GitHubModel
):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropMergedBy(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropMilestonePropCreator(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookPullRequestReviewRequestedOneof1PropPullRequestPropMilestonePropCreator,
        None,
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropRequestedReviewersItemsOneof0(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropRequestedReviewersItemsOneof1(
    GitHubModel
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Description of the team"
    )
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field(description="Unique identifier of the team")
    members_url: Missing[str] = Field(default=UNSET)
    name: str = Field(description="Name of the team")
    node_id: Missing[str] = Field(default=UNSET)
    parent: Missing[
        Union[
            WebhookPullRequestReviewRequestedOneof1PropPullRequestPropRequestedReviewersItemsOneof1PropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: Missing[str] = Field(
        default=UNSET,
        description="Permission that the team will have for its repositories",
    )
    privacy: Missing[Literal["open", "closed", "secret"]] = Field(default=UNSET)
    repositories_url: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET, description="URL for the team")


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropRequestedReviewersItemsOneof1PropParent(
    GitHubModel
):
    """WebhookPullRequestReviewRequestedOneof1PropPullRequestPropRequestedReviewersItem
    sOneof1PropParent
    """

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropRequestedTeamsItems(
    GitHubModel
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Description of the team"
    )
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field(description="Unique identifier of the team")
    members_url: Missing[str] = Field(default=UNSET)
    name: str = Field(description="Name of the team")
    node_id: Missing[str] = Field(default=UNSET)
    parent: Missing[
        Union[
            WebhookPullRequestReviewRequestedOneof1PropPullRequestPropRequestedTeamsItemsPropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: Missing[str] = Field(
        default=UNSET,
        description="Permission that the team will have for its repositories",
    )
    privacy: Missing[Literal["open", "closed", "secret"]] = Field(default=UNSET)
    repositories_url: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET, description="URL for the team")


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropRequestedTeamsItemsPropParent(
    GitHubModel
):
    """WebhookPullRequestReviewRequestedOneof1PropPullRequestPropRequestedTeamsItemsPro
    pParent
    """

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewRequestedOneof1PropRequestedTeam(GitHubModel):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Description of the team"
    )
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field(description="Unique identifier of the team")
    members_url: Missing[str] = Field(default=UNSET)
    name: str = Field(description="Name of the team")
    node_id: Missing[str] = Field(default=UNSET)
    parent: Missing[
        Union[WebhookPullRequestReviewRequestedOneof1PropRequestedTeamPropParent, None]
    ] = Field(default=UNSET)
    permission: Missing[str] = Field(
        default=UNSET,
        description="Permission that the team will have for its repositories",
    )
    privacy: Missing[Literal["open", "closed", "secret"]] = Field(default=UNSET)
    repositories_url: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET, description="URL for the team")


class WebhookPullRequestReviewRequestedOneof1PropRequestedTeamPropParent(GitHubModel):
    """WebhookPullRequestReviewRequestedOneof1PropRequestedTeamPropParent"""

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestReviewSubmitted(GitHubModel):
    """pull_request_review submitted event"""

    action: Literal["submitted"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    pull_request: WebhookPullRequestReviewSubmittedPropPullRequest = Field(
        title="Simple Pull Request"
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    review: WebhookPullRequestReviewSubmittedPropReview = Field(
        description="The review that was affected."
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookPullRequestReviewSubmittedPropPullRequest(GitHubModel):
    """Simple Pull Request"""

    links: WebhookPullRequestReviewSubmittedPropPullRequestPropLinks = Field(
        alias="_links"
    )
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    assignee: Union[
        WebhookPullRequestReviewSubmittedPropPullRequestPropAssignee, None
    ] = Field(title="User")
    assignees: List[
        Union[WebhookPullRequestReviewSubmittedPropPullRequestPropAssigneesItems, None]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    auto_merge: Union[
        WebhookPullRequestReviewSubmittedPropPullRequestPropAutoMerge, None
    ] = Field(
        title="PullRequestAutoMerge",
        description="The status of auto merging a pull request.",
    )
    base: WebhookPullRequestReviewSubmittedPropPullRequestPropBase = Field()
    body: Union[str, None] = Field()
    closed_at: Union[str, None] = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    created_at: str = Field()
    diff_url: str = Field()
    draft: bool = Field()
    head: WebhookPullRequestReviewSubmittedPropPullRequestPropHead = Field()
    html_url: str = Field()
    id: int = Field()
    issue_url: str = Field()
    labels: List[
        WebhookPullRequestReviewSubmittedPropPullRequestPropLabelsItems
    ] = Field()
    locked: bool = Field()
    merge_commit_sha: Union[str, None] = Field()
    merged_at: Union[str, None] = Field()
    milestone: Union[
        WebhookPullRequestReviewSubmittedPropPullRequestPropMilestone, None
    ] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field()
    patch_url: str = Field()
    requested_reviewers: List[
        Union[
            WebhookPullRequestReviewSubmittedPropPullRequestPropRequestedReviewersItemsOneof0,
            None,
            WebhookPullRequestReviewSubmittedPropPullRequestPropRequestedReviewersItemsOneof1,
        ]
    ] = Field()
    requested_teams: List[
        WebhookPullRequestReviewSubmittedPropPullRequestPropRequestedTeamsItems
    ] = Field()
    review_comment_url: str = Field()
    review_comments_url: str = Field()
    state: Literal["open", "closed"] = Field()
    statuses_url: str = Field()
    title: str = Field()
    updated_at: str = Field()
    url: str = Field()
    user: Union[WebhookPullRequestReviewSubmittedPropPullRequestPropUser, None] = Field(
        title="User"
    )


class WebhookPullRequestReviewSubmittedPropPullRequestPropLinks(GitHubModel):
    """WebhookPullRequestReviewSubmittedPropPullRequestPropLinks"""

    comments: WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropComments = (
        Field(title="Link")
    )
    commits: WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropCommits = (
        Field(title="Link")
    )
    html: WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropHtml = Field(
        title="Link"
    )
    issue: WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropIssue = Field(
        title="Link"
    )
    review_comment: WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropReviewComment = Field(
        title="Link"
    )
    review_comments: WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropReviewComments = Field(
        title="Link"
    )
    self_: WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropSelf = Field(
        alias="self", title="Link"
    )
    statuses: WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropStatuses = (
        Field(title="Link")
    )


class WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropComments(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropCommits(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropHtml(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropIssue(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropReviewComment(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropReviewComments(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropSelf(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropStatuses(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewSubmittedPropPullRequestPropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewSubmittedPropPullRequestPropAssigneesItems(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewSubmittedPropPullRequestPropAutoMergePropEnabledBy(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewSubmittedPropPullRequestPropAutoMerge(GitHubModel):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None] = Field(
        description="Commit message for the merge commit."
    )
    commit_title: Union[str, None] = Field(
        description="Title for the merge commit message."
    )
    enabled_by: Union[
        WebhookPullRequestReviewSubmittedPropPullRequestPropAutoMergePropEnabledBy, None
    ] = Field(title="User")
    merge_method: Literal["merge", "squash", "rebase"] = Field(
        description="The merge method to use."
    )


class WebhookPullRequestReviewSubmittedPropPullRequestPropBase(GitHubModel):
    """WebhookPullRequestReviewSubmittedPropPullRequestPropBase"""

    label: str = Field()
    ref: str = Field()
    repo: WebhookPullRequestReviewSubmittedPropPullRequestPropBasePropRepo = Field(
        title="Repository", description="A git repository"
    )
    sha: str = Field()
    user: Union[
        WebhookPullRequestReviewSubmittedPropPullRequestPropBasePropUser, None
    ] = Field(title="User")


class WebhookPullRequestReviewSubmittedPropPullRequestPropBasePropRepo(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestReviewSubmittedPropPullRequestPropBasePropRepoPropLicense,
        None,
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestReviewSubmittedPropPullRequestPropBasePropRepoPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestReviewSubmittedPropPullRequestPropBasePropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestReviewSubmittedPropPullRequestPropBasePropRepoPropLicense(
    GitHubModel
):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestReviewSubmittedPropPullRequestPropBasePropRepoPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewSubmittedPropPullRequestPropBasePropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestReviewSubmittedPropPullRequestPropBasePropRepoPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestReviewSubmittedPropPullRequestPropBasePropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewSubmittedPropPullRequestPropHead(GitHubModel):
    """WebhookPullRequestReviewSubmittedPropPullRequestPropHead"""

    label: Union[str, None] = Field()
    ref: str = Field()
    repo: Union[
        WebhookPullRequestReviewSubmittedPropPullRequestPropHeadPropRepo, None
    ] = Field(title="Repository", description="A git repository")
    sha: str = Field()
    user: Union[
        WebhookPullRequestReviewSubmittedPropPullRequestPropHeadPropUser, None
    ] = Field(title="User")


class WebhookPullRequestReviewSubmittedPropPullRequestPropHeadPropRepoPropLicense(
    GitHubModel
):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestReviewSubmittedPropPullRequestPropHeadPropRepoPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewSubmittedPropPullRequestPropHeadPropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestReviewSubmittedPropPullRequestPropHeadPropRepoPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestReviewSubmittedPropPullRequestPropHeadPropRepo(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestReviewSubmittedPropPullRequestPropHeadPropRepoPropLicense,
        None,
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestReviewSubmittedPropPullRequestPropHeadPropRepoPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestReviewSubmittedPropPullRequestPropHeadPropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestReviewSubmittedPropPullRequestPropHeadPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewSubmittedPropPullRequestPropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookPullRequestReviewSubmittedPropPullRequestPropMilestonePropCreator(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewSubmittedPropPullRequestPropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookPullRequestReviewSubmittedPropPullRequestPropMilestonePropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookPullRequestReviewSubmittedPropPullRequestPropRequestedReviewersItemsOneof0(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewSubmittedPropPullRequestPropRequestedReviewersItemsOneof1(
    GitHubModel
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    parent: Missing[
        Union[
            WebhookPullRequestReviewSubmittedPropPullRequestPropRequestedReviewersItemsOneof1PropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestReviewSubmittedPropPullRequestPropRequestedReviewersItemsOneof1PropParent(
    GitHubModel
):
    """WebhookPullRequestReviewSubmittedPropPullRequestPropRequestedReviewersItemsOneof
    1PropParent
    """

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestReviewSubmittedPropPullRequestPropRequestedTeamsItems(
    GitHubModel
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Description of the team"
    )
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field(description="Unique identifier of the team")
    members_url: Missing[str] = Field(default=UNSET)
    name: str = Field(description="Name of the team")
    node_id: Missing[str] = Field(default=UNSET)
    parent: Missing[
        Union[
            WebhookPullRequestReviewSubmittedPropPullRequestPropRequestedTeamsItemsPropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: Missing[str] = Field(
        default=UNSET,
        description="Permission that the team will have for its repositories",
    )
    privacy: Missing[Literal["open", "closed", "secret"]] = Field(default=UNSET)
    repositories_url: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET, description="URL for the team")


class WebhookPullRequestReviewSubmittedPropPullRequestPropRequestedTeamsItemsPropParent(
    GitHubModel
):
    """WebhookPullRequestReviewSubmittedPropPullRequestPropRequestedTeamsItemsPropParen
    t
    """

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestReviewSubmittedPropPullRequestPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewSubmittedPropReview(GitHubModel):
    """WebhookPullRequestReviewSubmittedPropReview

    The review that was affected.
    """

    links: WebhookPullRequestReviewSubmittedPropReviewPropLinks = Field(alias="_links")
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: Union[str, None] = Field(description="The text of the review.")
    commit_id: str = Field(description="A commit SHA for the review.")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the review")
    node_id: str = Field()
    pull_request_url: str = Field()
    state: str = Field()
    submitted_at: Union[datetime, None] = Field()
    user: Union[WebhookPullRequestReviewSubmittedPropReviewPropUser, None] = Field(
        title="User"
    )


class WebhookPullRequestReviewSubmittedPropReviewPropLinks(GitHubModel):
    """WebhookPullRequestReviewSubmittedPropReviewPropLinks"""

    html: WebhookPullRequestReviewSubmittedPropReviewPropLinksPropHtml = Field(
        title="Link"
    )
    pull_request: WebhookPullRequestReviewSubmittedPropReviewPropLinksPropPullRequest = Field(
        title="Link"
    )


class WebhookPullRequestReviewSubmittedPropReviewPropLinksPropHtml(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewSubmittedPropReviewPropLinksPropPullRequest(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewSubmittedPropReviewPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewThreadResolved(GitHubModel):
    """pull_request_review_thread resolved event"""

    action: Literal["resolved"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    pull_request: WebhookPullRequestReviewThreadResolvedPropPullRequest = Field(
        title="Simple Pull Request"
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: Missing[SimpleUserWebhooks] = Field(
        default=UNSET,
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )
    thread: WebhookPullRequestReviewThreadResolvedPropThread = Field()


class WebhookPullRequestReviewThreadResolvedPropPullRequest(GitHubModel):
    """Simple Pull Request"""

    links: WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinks = Field(
        alias="_links"
    )
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    assignee: Union[
        WebhookPullRequestReviewThreadResolvedPropPullRequestPropAssignee, None
    ] = Field(title="User")
    assignees: List[
        Union[
            WebhookPullRequestReviewThreadResolvedPropPullRequestPropAssigneesItems,
            None,
        ]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    auto_merge: Union[
        WebhookPullRequestReviewThreadResolvedPropPullRequestPropAutoMerge, None
    ] = Field(
        title="PullRequestAutoMerge",
        description="The status of auto merging a pull request.",
    )
    base: WebhookPullRequestReviewThreadResolvedPropPullRequestPropBase = Field()
    body: Union[str, None] = Field()
    closed_at: Union[str, None] = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    created_at: str = Field()
    diff_url: str = Field()
    draft: bool = Field()
    head: WebhookPullRequestReviewThreadResolvedPropPullRequestPropHead = Field()
    html_url: str = Field()
    id: int = Field()
    issue_url: str = Field()
    labels: List[
        WebhookPullRequestReviewThreadResolvedPropPullRequestPropLabelsItems
    ] = Field()
    locked: bool = Field()
    merge_commit_sha: Union[str, None] = Field()
    merged_at: Union[str, None] = Field()
    milestone: Union[
        WebhookPullRequestReviewThreadResolvedPropPullRequestPropMilestone, None
    ] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field()
    patch_url: str = Field()
    requested_reviewers: List[
        Union[
            WebhookPullRequestReviewThreadResolvedPropPullRequestPropRequestedReviewersItemsOneof0,
            None,
            WebhookPullRequestReviewThreadResolvedPropPullRequestPropRequestedReviewersItemsOneof1,
        ]
    ] = Field()
    requested_teams: List[
        WebhookPullRequestReviewThreadResolvedPropPullRequestPropRequestedTeamsItems
    ] = Field()
    review_comment_url: str = Field()
    review_comments_url: str = Field()
    state: Literal["open", "closed"] = Field()
    statuses_url: str = Field()
    title: str = Field()
    updated_at: str = Field()
    url: str = Field()
    user: Union[
        WebhookPullRequestReviewThreadResolvedPropPullRequestPropUser, None
    ] = Field(title="User")


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinks(GitHubModel):
    """WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinks"""

    comments: WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropComments = Field(
        title="Link"
    )
    commits: WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropCommits = Field(
        title="Link"
    )
    html: WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropHtml = (
        Field(title="Link")
    )
    issue: WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropIssue = (
        Field(title="Link")
    )
    review_comment: WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropReviewComment = Field(
        title="Link"
    )
    review_comments: WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropReviewComments = Field(
        title="Link"
    )
    self_: WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropSelf = (
        Field(alias="self", title="Link")
    )
    statuses: WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropStatuses = Field(
        title="Link"
    )


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropComments(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropCommits(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropHtml(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropIssue(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropReviewComment(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropReviewComments(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropSelf(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropStatuses(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropAssigneesItems(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropAutoMergePropEnabledBy(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropAutoMerge(GitHubModel):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None] = Field(
        description="Commit message for the merge commit."
    )
    commit_title: Union[str, None] = Field(
        description="Title for the merge commit message."
    )
    enabled_by: Union[
        WebhookPullRequestReviewThreadResolvedPropPullRequestPropAutoMergePropEnabledBy,
        None,
    ] = Field(title="User")
    merge_method: Literal["merge", "squash", "rebase"] = Field(
        description="The merge method to use."
    )


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropBase(GitHubModel):
    """WebhookPullRequestReviewThreadResolvedPropPullRequestPropBase"""

    label: str = Field()
    ref: str = Field()
    repo: WebhookPullRequestReviewThreadResolvedPropPullRequestPropBasePropRepo = Field(
        title="Repository", description="A git repository"
    )
    sha: str = Field()
    user: Union[
        WebhookPullRequestReviewThreadResolvedPropPullRequestPropBasePropUser, None
    ] = Field(title="User")


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropBasePropRepo(
    GitHubModel
):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestReviewThreadResolvedPropPullRequestPropBasePropRepoPropLicense,
        None,
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestReviewThreadResolvedPropPullRequestPropBasePropRepoPropOwner,
        None,
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestReviewThreadResolvedPropPullRequestPropBasePropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropBasePropRepoPropLicense(
    GitHubModel
):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropBasePropRepoPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropBasePropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestReviewThreadResolvedPropPullRequestPropBasePropRepoPropPermiss
    ions
    """

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropBasePropUser(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropHead(GitHubModel):
    """WebhookPullRequestReviewThreadResolvedPropPullRequestPropHead"""

    label: Union[str, None] = Field()
    ref: str = Field()
    repo: Union[
        WebhookPullRequestReviewThreadResolvedPropPullRequestPropHeadPropRepo, None
    ] = Field(title="Repository", description="A git repository")
    sha: str = Field()
    user: Union[
        WebhookPullRequestReviewThreadResolvedPropPullRequestPropHeadPropUser, None
    ] = Field(title="User")


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropHeadPropRepoPropLicense(
    GitHubModel
):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropHeadPropRepoPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropHeadPropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestReviewThreadResolvedPropPullRequestPropHeadPropRepoPropPermiss
    ions
    """

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropHeadPropRepo(
    GitHubModel
):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestReviewThreadResolvedPropPullRequestPropHeadPropRepoPropLicense,
        None,
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestReviewThreadResolvedPropPullRequestPropHeadPropRepoPropOwner,
        None,
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestReviewThreadResolvedPropPullRequestPropHeadPropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropHeadPropUser(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropMilestonePropCreator(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookPullRequestReviewThreadResolvedPropPullRequestPropMilestonePropCreator,
        None,
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropRequestedReviewersItemsOneof0(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropRequestedReviewersItemsOneof1(
    GitHubModel
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    parent: Missing[
        Union[
            WebhookPullRequestReviewThreadResolvedPropPullRequestPropRequestedReviewersItemsOneof1PropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropRequestedReviewersItemsOneof1PropParent(
    GitHubModel
):
    """WebhookPullRequestReviewThreadResolvedPropPullRequestPropRequestedReviewersItems
    Oneof1PropParent
    """

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropRequestedTeamsItems(
    GitHubModel
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Description of the team"
    )
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field(description="Unique identifier of the team")
    members_url: Missing[str] = Field(default=UNSET)
    name: str = Field(description="Name of the team")
    node_id: Missing[str] = Field(default=UNSET)
    parent: Missing[
        Union[
            WebhookPullRequestReviewThreadResolvedPropPullRequestPropRequestedTeamsItemsPropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: Missing[str] = Field(
        default=UNSET,
        description="Permission that the team will have for its repositories",
    )
    privacy: Missing[Literal["open", "closed", "secret"]] = Field(default=UNSET)
    repositories_url: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET, description="URL for the team")


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropRequestedTeamsItemsPropParent(
    GitHubModel
):
    """WebhookPullRequestReviewThreadResolvedPropPullRequestPropRequestedTeamsItemsProp
    Parent
    """

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewThreadResolvedPropThread(GitHubModel):
    """WebhookPullRequestReviewThreadResolvedPropThread"""

    comments: List[
        WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItems
    ] = Field()
    node_id: str = Field()


class WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItems(GitHubModel):
    """Pull Request Review Comment

    The [comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-
    for-a-pull-request) itself.
    """

    links: WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropLinks = Field(
        alias="_links"
    )
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: str = Field(description="The text of the comment.")
    commit_id: str = Field(
        description="The SHA of the commit to which the comment applies."
    )
    created_at: datetime = Field()
    diff_hunk: str = Field(
        description="The diff of the line that the comment refers to."
    )
    html_url: str = Field(description="HTML URL for the pull request review comment.")
    id: int = Field(description="The ID of the pull request review comment.")
    in_reply_to_id: Missing[int] = Field(
        default=UNSET, description="The comment ID to reply to."
    )
    line: Union[int, None] = Field(
        description="The line of the blob to which the comment applies. The last line of the range for a multi-line comment"
    )
    node_id: str = Field(description="The node ID of the pull request review comment.")
    original_commit_id: str = Field(
        description="The SHA of the original commit to which the comment applies."
    )
    original_line: Union[int, None] = Field(
        description="The line of the blob to which the comment applies. The last line of the range for a multi-line comment"
    )
    original_position: int = Field(
        description="The index of the original line in the diff to which the comment applies."
    )
    original_start_line: Union[int, None] = Field(
        description="The first line of the range for a multi-line comment."
    )
    path: str = Field(
        description="The relative path of the file to which the comment applies."
    )
    position: Union[int, None] = Field(
        description="The line index in the diff to which the comment applies."
    )
    pull_request_review_id: Union[int, None] = Field(
        description="The ID of the pull request review to which the comment belongs."
    )
    pull_request_url: str = Field(
        description="URL for the pull request that the review comment belongs to."
    )
    reactions: WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropReactions = Field(
        title="Reactions"
    )
    side: Literal["LEFT", "RIGHT"] = Field(
        description="The side of the first line of the range for a multi-line comment."
    )
    start_line: Union[int, None] = Field(
        description="The first line of the range for a multi-line comment."
    )
    start_side: Union[None, Literal["LEFT", "RIGHT"]] = Field(
        default="RIGHT",
        description="The side of the first line of the range for a multi-line comment.",
    )
    subject_type: Missing[Literal["line", "file"]] = Field(
        default=UNSET,
        description="The level at which the comment is targeted, can be a diff line or a file.",
    )
    updated_at: datetime = Field()
    url: str = Field(description="URL for the pull request review comment")
    user: Union[
        WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropUser, None
    ] = Field(title="User")


class WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropLinks(
    GitHubModel
):
    """WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropLinks"""

    html: WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropLinksPropHtml = Field(
        title="Link"
    )
    pull_request: WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropLinksPropPullRequest = Field(
        title="Link"
    )
    self_: WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropLinksPropSelf = Field(
        alias="self", title="Link"
    )


class WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropLinksPropHtml(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropLinksPropPullRequest(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropLinksPropSelf(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropReactions(
    GitHubModel
):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropUser(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewThreadUnresolved(GitHubModel):
    """pull_request_review_thread unresolved event"""

    action: Literal["unresolved"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    pull_request: WebhookPullRequestReviewThreadUnresolvedPropPullRequest = Field(
        title="Simple Pull Request"
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: Missing[SimpleUserWebhooks] = Field(
        default=UNSET,
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )
    thread: WebhookPullRequestReviewThreadUnresolvedPropThread = Field()


class WebhookPullRequestReviewThreadUnresolvedPropPullRequest(GitHubModel):
    """Simple Pull Request"""

    links: WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinks = Field(
        alias="_links"
    )
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    assignee: Union[
        WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropAssignee, None
    ] = Field(title="User")
    assignees: List[
        Union[
            WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropAssigneesItems,
            None,
        ]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    auto_merge: Union[
        WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropAutoMerge, None
    ] = Field(
        title="PullRequestAutoMerge",
        description="The status of auto merging a pull request.",
    )
    base: WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBase = Field()
    body: Union[str, None] = Field()
    closed_at: Union[str, None] = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    created_at: str = Field()
    diff_url: str = Field()
    draft: bool = Field()
    head: WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHead = Field()
    html_url: str = Field()
    id: int = Field()
    issue_url: str = Field()
    labels: List[
        WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLabelsItems
    ] = Field()
    locked: bool = Field()
    merge_commit_sha: Union[str, None] = Field()
    merged_at: Union[str, None] = Field()
    milestone: Union[
        WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropMilestone, None
    ] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field()
    patch_url: str = Field()
    requested_reviewers: List[
        Union[
            WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropRequestedReviewersItemsOneof0,
            None,
            WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropRequestedReviewersItemsOneof1,
        ]
    ] = Field()
    requested_teams: List[
        WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropRequestedTeamsItems
    ] = Field()
    review_comment_url: str = Field()
    review_comments_url: str = Field()
    state: Literal["open", "closed"] = Field()
    statuses_url: str = Field()
    title: str = Field()
    updated_at: str = Field()
    url: str = Field()
    user: Union[
        WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropUser, None
    ] = Field(title="User")


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinks(GitHubModel):
    """WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinks"""

    comments: WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropComments = Field(
        title="Link"
    )
    commits: WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropCommits = Field(
        title="Link"
    )
    html: WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropHtml = (
        Field(title="Link")
    )
    issue: WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropIssue = (
        Field(title="Link")
    )
    review_comment: WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropReviewComment = Field(
        title="Link"
    )
    review_comments: WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropReviewComments = Field(
        title="Link"
    )
    self_: WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropSelf = (
        Field(alias="self", title="Link")
    )
    statuses: WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropStatuses = Field(
        title="Link"
    )


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropComments(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropCommits(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropHtml(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropIssue(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropReviewComment(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropReviewComments(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropSelf(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropStatuses(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropAssigneesItems(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropAutoMergePropEnabledBy(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropAutoMerge(GitHubModel):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None] = Field(
        description="Commit message for the merge commit."
    )
    commit_title: str = Field(description="Title for the merge commit message.")
    enabled_by: Union[
        WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropAutoMergePropEnabledBy,
        None,
    ] = Field(title="User")
    merge_method: Literal["merge", "squash", "rebase"] = Field(
        description="The merge method to use."
    )


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBase(GitHubModel):
    """WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBase"""

    label: str = Field()
    ref: str = Field()
    repo: WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBasePropRepo = (
        Field(title="Repository", description="A git repository")
    )
    sha: str = Field()
    user: Union[
        WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBasePropUser, None
    ] = Field(title="User")


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBasePropRepo(
    GitHubModel
):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBasePropRepoPropLicense,
        None,
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBasePropRepoPropOwner,
        None,
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBasePropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBasePropRepoPropLicense(
    GitHubModel
):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBasePropRepoPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBasePropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBasePropRepoPropPermi
    ssions
    """

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBasePropUser(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHead(GitHubModel):
    """WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHead"""

    label: str = Field()
    ref: str = Field()
    repo: WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHeadPropRepo = (
        Field(title="Repository", description="A git repository")
    )
    sha: str = Field()
    user: Union[
        WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHeadPropUser, None
    ] = Field(title="User")


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHeadPropRepo(
    GitHubModel
):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHeadPropRepoPropLicense,
        None,
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHeadPropRepoPropOwner,
        None,
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHeadPropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHeadPropRepoPropLicense(
    GitHubModel
):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHeadPropRepoPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHeadPropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHeadPropRepoPropPermi
    ssions
    """

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHeadPropUser(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLabelsItems(
    GitHubModel
):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropMilestonePropCreator(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropMilestonePropCreator,
        None,
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropRequestedReviewersItemsOneof0(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropRequestedReviewersItemsOneof1(
    GitHubModel
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Description of the team"
    )
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field(description="Unique identifier of the team")
    members_url: Missing[str] = Field(default=UNSET)
    name: str = Field(description="Name of the team")
    node_id: Missing[str] = Field(default=UNSET)
    parent: Missing[
        Union[
            WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropRequestedReviewersItemsOneof1PropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: Missing[str] = Field(
        default=UNSET,
        description="Permission that the team will have for its repositories",
    )
    privacy: Missing[Literal["open", "closed", "secret"]] = Field(default=UNSET)
    repositories_url: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET, description="URL for the team")


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropRequestedReviewersItemsOneof1PropParent(
    GitHubModel
):
    """WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropRequestedReviewersIte
    msOneof1PropParent
    """

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropRequestedTeamsItems(
    GitHubModel
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Description of the team"
    )
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field(description="Unique identifier of the team")
    members_url: Missing[str] = Field(default=UNSET)
    name: str = Field(description="Name of the team")
    node_id: Missing[str] = Field(default=UNSET)
    parent: Missing[
        Union[
            WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropRequestedTeamsItemsPropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: Missing[str] = Field(
        default=UNSET,
        description="Permission that the team will have for its repositories",
    )
    privacy: Missing[Literal["open", "closed", "secret"]] = Field(default=UNSET)
    repositories_url: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET, description="URL for the team")


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropRequestedTeamsItemsPropParent(
    GitHubModel
):
    """WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropRequestedTeamsItemsPr
    opParent
    """

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestReviewThreadUnresolvedPropThread(GitHubModel):
    """WebhookPullRequestReviewThreadUnresolvedPropThread"""

    comments: List[
        WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItems
    ] = Field()
    node_id: str = Field()


class WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItems(GitHubModel):
    """Pull Request Review Comment

    The [comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-
    for-a-pull-request) itself.
    """

    links: WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropLinks = Field(
        alias="_links"
    )
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    body: str = Field(description="The text of the comment.")
    commit_id: str = Field(
        description="The SHA of the commit to which the comment applies."
    )
    created_at: datetime = Field()
    diff_hunk: str = Field(
        description="The diff of the line that the comment refers to."
    )
    html_url: str = Field(description="HTML URL for the pull request review comment.")
    id: int = Field(description="The ID of the pull request review comment.")
    in_reply_to_id: Missing[int] = Field(
        default=UNSET, description="The comment ID to reply to."
    )
    line: Union[int, None] = Field(
        description="The line of the blob to which the comment applies. The last line of the range for a multi-line comment"
    )
    node_id: str = Field(description="The node ID of the pull request review comment.")
    original_commit_id: str = Field(
        description="The SHA of the original commit to which the comment applies."
    )
    original_line: int = Field(
        description="The line of the blob to which the comment applies. The last line of the range for a multi-line comment"
    )
    original_position: int = Field(
        description="The index of the original line in the diff to which the comment applies."
    )
    original_start_line: Union[int, None] = Field(
        description="The first line of the range for a multi-line comment."
    )
    path: str = Field(
        description="The relative path of the file to which the comment applies."
    )
    position: Union[int, None] = Field(
        description="The line index in the diff to which the comment applies."
    )
    pull_request_review_id: Union[int, None] = Field(
        description="The ID of the pull request review to which the comment belongs."
    )
    pull_request_url: str = Field(
        description="URL for the pull request that the review comment belongs to."
    )
    reactions: WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropReactions = Field(
        title="Reactions"
    )
    side: Literal["LEFT", "RIGHT"] = Field(
        description="The side of the first line of the range for a multi-line comment."
    )
    start_line: Union[int, None] = Field(
        description="The first line of the range for a multi-line comment."
    )
    start_side: Union[None, Literal["LEFT", "RIGHT"]] = Field(
        default="RIGHT",
        description="The side of the first line of the range for a multi-line comment.",
    )
    subject_type: Missing[Literal["line", "file"]] = Field(
        default=UNSET,
        description="The level at which the comment is targeted, can be a diff line or a file.",
    )
    updated_at: datetime = Field()
    url: str = Field(description="URL for the pull request review comment")
    user: Union[
        WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropUser,
        None,
    ] = Field(title="User")


class WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropLinks(
    GitHubModel
):
    """WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropLinks"""

    html: WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropLinksPropHtml = Field(
        title="Link"
    )
    pull_request: WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropLinksPropPullRequest = Field(
        title="Link"
    )
    self_: WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropLinksPropSelf = Field(
        alias="self", title="Link"
    )


class WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropLinksPropHtml(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropLinksPropPullRequest(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropLinksPropSelf(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropReactions(
    GitHubModel
):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropUser(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestSynchronize(GitHubModel):
    """pull_request synchronize event"""

    action: Literal["synchronize"] = Field()
    after: str = Field()
    before: str = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    number: int = Field(description="The pull request number.")
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    pull_request: WebhookPullRequestSynchronizePropPullRequest = Field(
        title="Pull Request"
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookPullRequestSynchronizePropPullRequest(GitHubModel):
    """Pull Request"""

    links: WebhookPullRequestSynchronizePropPullRequestPropLinks = Field(alias="_links")
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    additions: Missing[int] = Field(default=UNSET)
    assignee: Union[
        WebhookPullRequestSynchronizePropPullRequestPropAssignee, None
    ] = Field(title="User")
    assignees: List[
        Union[WebhookPullRequestSynchronizePropPullRequestPropAssigneesItems, None]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    auto_merge: Union[
        WebhookPullRequestSynchronizePropPullRequestPropAutoMerge, None
    ] = Field(
        title="PullRequestAutoMerge",
        description="The status of auto merging a pull request.",
    )
    base: WebhookPullRequestSynchronizePropPullRequestPropBase = Field()
    body: Union[str, None] = Field()
    changed_files: Missing[int] = Field(default=UNSET)
    closed_at: Union[datetime, None] = Field()
    comments: Missing[int] = Field(default=UNSET)
    comments_url: str = Field()
    commits: Missing[int] = Field(default=UNSET)
    commits_url: str = Field()
    created_at: datetime = Field()
    deletions: Missing[int] = Field(default=UNSET)
    diff_url: str = Field()
    draft: bool = Field(
        description="Indicates whether or not the pull request is a draft."
    )
    head: WebhookPullRequestSynchronizePropPullRequestPropHead = Field()
    html_url: str = Field()
    id: int = Field()
    issue_url: str = Field()
    labels: List[WebhookPullRequestSynchronizePropPullRequestPropLabelsItems] = Field()
    locked: bool = Field()
    maintainer_can_modify: Missing[bool] = Field(
        default=UNSET,
        description="Indicates whether maintainers can modify the pull request.",
    )
    merge_commit_sha: Union[str, None] = Field()
    mergeable: Missing[Union[bool, None]] = Field(default=UNSET)
    mergeable_state: Missing[str] = Field(default=UNSET)
    merged: Missing[Union[bool, None]] = Field(default=UNSET)
    merged_at: Union[datetime, None] = Field()
    merged_by: Missing[
        Union[WebhookPullRequestSynchronizePropPullRequestPropMergedBy, None]
    ] = Field(default=UNSET, title="User")
    milestone: Union[
        WebhookPullRequestSynchronizePropPullRequestPropMilestone, None
    ] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field(
        description="Number uniquely identifying the pull request within its repository."
    )
    patch_url: str = Field()
    rebaseable: Missing[Union[bool, None]] = Field(default=UNSET)
    requested_reviewers: List[
        Union[
            WebhookPullRequestSynchronizePropPullRequestPropRequestedReviewersItemsOneof0,
            None,
            WebhookPullRequestSynchronizePropPullRequestPropRequestedReviewersItemsOneof1,
        ]
    ] = Field()
    requested_teams: List[
        WebhookPullRequestSynchronizePropPullRequestPropRequestedTeamsItems
    ] = Field()
    review_comment_url: str = Field()
    review_comments: Missing[int] = Field(default=UNSET)
    review_comments_url: str = Field()
    state: Literal["open", "closed"] = Field(
        description="State of this Pull Request. Either `open` or `closed`."
    )
    statuses_url: str = Field()
    title: str = Field(description="The title of the pull request.")
    updated_at: datetime = Field()
    url: str = Field()
    user: Union[WebhookPullRequestSynchronizePropPullRequestPropUser, None] = Field(
        title="User"
    )


class WebhookPullRequestSynchronizePropPullRequestPropLinks(GitHubModel):
    """WebhookPullRequestSynchronizePropPullRequestPropLinks"""

    comments: WebhookPullRequestSynchronizePropPullRequestPropLinksPropComments = Field(
        title="Link"
    )
    commits: WebhookPullRequestSynchronizePropPullRequestPropLinksPropCommits = Field(
        title="Link"
    )
    html: WebhookPullRequestSynchronizePropPullRequestPropLinksPropHtml = Field(
        title="Link"
    )
    issue: WebhookPullRequestSynchronizePropPullRequestPropLinksPropIssue = Field(
        title="Link"
    )
    review_comment: WebhookPullRequestSynchronizePropPullRequestPropLinksPropReviewComment = Field(
        title="Link"
    )
    review_comments: WebhookPullRequestSynchronizePropPullRequestPropLinksPropReviewComments = Field(
        title="Link"
    )
    self_: WebhookPullRequestSynchronizePropPullRequestPropLinksPropSelf = Field(
        alias="self", title="Link"
    )
    statuses: WebhookPullRequestSynchronizePropPullRequestPropLinksPropStatuses = Field(
        title="Link"
    )


class WebhookPullRequestSynchronizePropPullRequestPropLinksPropComments(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestSynchronizePropPullRequestPropLinksPropCommits(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestSynchronizePropPullRequestPropLinksPropHtml(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestSynchronizePropPullRequestPropLinksPropIssue(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestSynchronizePropPullRequestPropLinksPropReviewComment(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestSynchronizePropPullRequestPropLinksPropReviewComments(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestSynchronizePropPullRequestPropLinksPropSelf(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestSynchronizePropPullRequestPropLinksPropStatuses(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestSynchronizePropPullRequestPropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestSynchronizePropPullRequestPropAssigneesItems(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestSynchronizePropPullRequestPropAutoMergePropEnabledBy(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestSynchronizePropPullRequestPropAutoMerge(GitHubModel):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None] = Field(
        description="Commit message for the merge commit."
    )
    commit_title: Union[str, None] = Field(
        description="Title for the merge commit message."
    )
    enabled_by: Union[
        WebhookPullRequestSynchronizePropPullRequestPropAutoMergePropEnabledBy, None
    ] = Field(title="User")
    merge_method: Literal["merge", "squash", "rebase"] = Field(
        description="The merge method to use."
    )


class WebhookPullRequestSynchronizePropPullRequestPropBase(GitHubModel):
    """WebhookPullRequestSynchronizePropPullRequestPropBase"""

    label: str = Field()
    ref: str = Field()
    repo: WebhookPullRequestSynchronizePropPullRequestPropBasePropRepo = Field(
        title="Repository", description="A git repository"
    )
    sha: str = Field()
    user: Union[
        WebhookPullRequestSynchronizePropPullRequestPropBasePropUser, None
    ] = Field(title="User")


class WebhookPullRequestSynchronizePropPullRequestPropBasePropRepo(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestSynchronizePropPullRequestPropBasePropRepoPropLicense, None
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestSynchronizePropPullRequestPropBasePropRepoPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestSynchronizePropPullRequestPropBasePropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestSynchronizePropPullRequestPropBasePropRepoPropLicense(
    GitHubModel
):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestSynchronizePropPullRequestPropBasePropRepoPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestSynchronizePropPullRequestPropBasePropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestSynchronizePropPullRequestPropBasePropRepoPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestSynchronizePropPullRequestPropBasePropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestSynchronizePropPullRequestPropHead(GitHubModel):
    """WebhookPullRequestSynchronizePropPullRequestPropHead"""

    label: str = Field()
    ref: str = Field()
    repo: WebhookPullRequestSynchronizePropPullRequestPropHeadPropRepo = Field(
        title="Repository", description="A git repository"
    )
    sha: str = Field()
    user: Union[
        WebhookPullRequestSynchronizePropPullRequestPropHeadPropUser, None
    ] = Field(title="User")


class WebhookPullRequestSynchronizePropPullRequestPropHeadPropRepo(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestSynchronizePropPullRequestPropHeadPropRepoPropLicense, None
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET, description="The default value for a merge commit message."
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET, description="The default value for a merge commit message title."
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestSynchronizePropPullRequestPropHeadPropRepoPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestSynchronizePropPullRequestPropHeadPropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestSynchronizePropPullRequestPropHeadPropRepoPropLicense(
    GitHubModel
):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestSynchronizePropPullRequestPropHeadPropRepoPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestSynchronizePropPullRequestPropHeadPropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestSynchronizePropPullRequestPropHeadPropRepoPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestSynchronizePropPullRequestPropHeadPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestSynchronizePropPullRequestPropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookPullRequestSynchronizePropPullRequestPropMergedBy(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestSynchronizePropPullRequestPropMilestonePropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestSynchronizePropPullRequestPropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookPullRequestSynchronizePropPullRequestPropMilestonePropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookPullRequestSynchronizePropPullRequestPropRequestedReviewersItemsOneof0(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestSynchronizePropPullRequestPropRequestedReviewersItemsOneof1(
    GitHubModel
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    parent: Missing[
        Union[
            WebhookPullRequestSynchronizePropPullRequestPropRequestedReviewersItemsOneof1PropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestSynchronizePropPullRequestPropRequestedReviewersItemsOneof1PropParent(
    GitHubModel
):
    """WebhookPullRequestSynchronizePropPullRequestPropRequestedReviewersItemsOneof1Pro
    pParent
    """

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestSynchronizePropPullRequestPropRequestedTeamsItems(GitHubModel):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Description of the team"
    )
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field(description="Unique identifier of the team")
    members_url: Missing[str] = Field(default=UNSET)
    name: str = Field(description="Name of the team")
    node_id: Missing[str] = Field(default=UNSET)
    parent: Missing[
        Union[
            WebhookPullRequestSynchronizePropPullRequestPropRequestedTeamsItemsPropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: Missing[str] = Field(
        default=UNSET,
        description="Permission that the team will have for its repositories",
    )
    privacy: Missing[Literal["open", "closed", "secret"]] = Field(default=UNSET)
    repositories_url: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET, description="URL for the team")


class WebhookPullRequestSynchronizePropPullRequestPropRequestedTeamsItemsPropParent(
    GitHubModel
):
    """WebhookPullRequestSynchronizePropPullRequestPropRequestedTeamsItemsPropParent"""

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestSynchronizePropPullRequestPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestUnassigned(GitHubModel):
    """pull_request unassigned event"""

    action: Literal["unassigned"] = Field()
    assignee: Missing[Union[WebhookPullRequestUnassignedPropAssignee, None]] = Field(
        default=UNSET, title="User"
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    number: int = Field(description="The pull request number.")
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    pull_request: WebhookPullRequestUnassignedPropPullRequest = Field(
        title="Pull Request"
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: Missing[SimpleUserWebhooks] = Field(
        default=UNSET,
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookPullRequestUnassignedPropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestUnassignedPropPullRequest(GitHubModel):
    """Pull Request"""

    links: WebhookPullRequestUnassignedPropPullRequestPropLinks = Field(alias="_links")
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    additions: Missing[int] = Field(default=UNSET)
    assignee: Union[
        WebhookPullRequestUnassignedPropPullRequestPropAssignee, None
    ] = Field(title="User")
    assignees: List[
        Union[WebhookPullRequestUnassignedPropPullRequestPropAssigneesItems, None]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    auto_merge: Union[
        WebhookPullRequestUnassignedPropPullRequestPropAutoMerge, None
    ] = Field(
        title="PullRequestAutoMerge",
        description="The status of auto merging a pull request.",
    )
    base: WebhookPullRequestUnassignedPropPullRequestPropBase = Field()
    body: Union[str, None] = Field()
    changed_files: Missing[int] = Field(default=UNSET)
    closed_at: Union[datetime, None] = Field()
    comments: Missing[int] = Field(default=UNSET)
    comments_url: str = Field()
    commits: Missing[int] = Field(default=UNSET)
    commits_url: str = Field()
    created_at: datetime = Field()
    deletions: Missing[int] = Field(default=UNSET)
    diff_url: str = Field()
    draft: bool = Field(
        description="Indicates whether or not the pull request is a draft."
    )
    head: WebhookPullRequestUnassignedPropPullRequestPropHead = Field()
    html_url: str = Field()
    id: int = Field()
    issue_url: str = Field()
    labels: List[WebhookPullRequestUnassignedPropPullRequestPropLabelsItems] = Field()
    locked: bool = Field()
    maintainer_can_modify: Missing[bool] = Field(
        default=UNSET,
        description="Indicates whether maintainers can modify the pull request.",
    )
    merge_commit_sha: Union[str, None] = Field()
    mergeable: Missing[Union[bool, None]] = Field(default=UNSET)
    mergeable_state: Missing[str] = Field(default=UNSET)
    merged: Missing[Union[bool, None]] = Field(default=UNSET)
    merged_at: Union[datetime, None] = Field()
    merged_by: Missing[
        Union[WebhookPullRequestUnassignedPropPullRequestPropMergedBy, None]
    ] = Field(default=UNSET, title="User")
    milestone: Union[
        WebhookPullRequestUnassignedPropPullRequestPropMilestone, None
    ] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field(
        description="Number uniquely identifying the pull request within its repository."
    )
    patch_url: str = Field()
    rebaseable: Missing[Union[bool, None]] = Field(default=UNSET)
    requested_reviewers: List[
        Union[
            WebhookPullRequestUnassignedPropPullRequestPropRequestedReviewersItemsOneof0,
            None,
            WebhookPullRequestUnassignedPropPullRequestPropRequestedReviewersItemsOneof1,
        ]
    ] = Field()
    requested_teams: List[
        WebhookPullRequestUnassignedPropPullRequestPropRequestedTeamsItems
    ] = Field()
    review_comment_url: str = Field()
    review_comments: Missing[int] = Field(default=UNSET)
    review_comments_url: str = Field()
    state: Literal["open", "closed"] = Field(
        description="State of this Pull Request. Either `open` or `closed`."
    )
    statuses_url: str = Field()
    title: str = Field(description="The title of the pull request.")
    updated_at: datetime = Field()
    url: str = Field()
    user: Union[WebhookPullRequestUnassignedPropPullRequestPropUser, None] = Field(
        title="User"
    )


class WebhookPullRequestUnassignedPropPullRequestPropLinks(GitHubModel):
    """WebhookPullRequestUnassignedPropPullRequestPropLinks"""

    comments: WebhookPullRequestUnassignedPropPullRequestPropLinksPropComments = Field(
        title="Link"
    )
    commits: WebhookPullRequestUnassignedPropPullRequestPropLinksPropCommits = Field(
        title="Link"
    )
    html: WebhookPullRequestUnassignedPropPullRequestPropLinksPropHtml = Field(
        title="Link"
    )
    issue: WebhookPullRequestUnassignedPropPullRequestPropLinksPropIssue = Field(
        title="Link"
    )
    review_comment: WebhookPullRequestUnassignedPropPullRequestPropLinksPropReviewComment = Field(
        title="Link"
    )
    review_comments: WebhookPullRequestUnassignedPropPullRequestPropLinksPropReviewComments = Field(
        title="Link"
    )
    self_: WebhookPullRequestUnassignedPropPullRequestPropLinksPropSelf = Field(
        alias="self", title="Link"
    )
    statuses: WebhookPullRequestUnassignedPropPullRequestPropLinksPropStatuses = Field(
        title="Link"
    )


class WebhookPullRequestUnassignedPropPullRequestPropLinksPropComments(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestUnassignedPropPullRequestPropLinksPropCommits(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestUnassignedPropPullRequestPropLinksPropHtml(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestUnassignedPropPullRequestPropLinksPropIssue(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestUnassignedPropPullRequestPropLinksPropReviewComment(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestUnassignedPropPullRequestPropLinksPropReviewComments(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestUnassignedPropPullRequestPropLinksPropSelf(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestUnassignedPropPullRequestPropLinksPropStatuses(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestUnassignedPropPullRequestPropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestUnassignedPropPullRequestPropAssigneesItems(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestUnassignedPropPullRequestPropAutoMergePropEnabledBy(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestUnassignedPropPullRequestPropAutoMerge(GitHubModel):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None] = Field(
        description="Commit message for the merge commit."
    )
    commit_title: Union[str, None] = Field(
        description="Title for the merge commit message."
    )
    enabled_by: Union[
        WebhookPullRequestUnassignedPropPullRequestPropAutoMergePropEnabledBy, None
    ] = Field(title="User")
    merge_method: Literal["merge", "squash", "rebase"] = Field(
        description="The merge method to use."
    )


class WebhookPullRequestUnassignedPropPullRequestPropBase(GitHubModel):
    """WebhookPullRequestUnassignedPropPullRequestPropBase"""

    label: Union[str, None] = Field()
    ref: str = Field()
    repo: WebhookPullRequestUnassignedPropPullRequestPropBasePropRepo = Field(
        title="Repository", description="A git repository"
    )
    sha: str = Field()
    user: Union[
        WebhookPullRequestUnassignedPropPullRequestPropBasePropUser, None
    ] = Field(title="User")


class WebhookPullRequestUnassignedPropPullRequestPropBasePropRepo(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestUnassignedPropPullRequestPropBasePropRepoPropLicense, None
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestUnassignedPropPullRequestPropBasePropRepoPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestUnassignedPropPullRequestPropBasePropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestUnassignedPropPullRequestPropBasePropRepoPropLicense(
    GitHubModel
):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestUnassignedPropPullRequestPropBasePropRepoPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestUnassignedPropPullRequestPropBasePropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestUnassignedPropPullRequestPropBasePropRepoPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestUnassignedPropPullRequestPropBasePropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestUnassignedPropPullRequestPropHead(GitHubModel):
    """WebhookPullRequestUnassignedPropPullRequestPropHead"""

    label: Union[str, None] = Field()
    ref: str = Field()
    repo: Union[
        WebhookPullRequestUnassignedPropPullRequestPropHeadPropRepo, None
    ] = Field(title="Repository", description="A git repository")
    sha: str = Field()
    user: Union[
        WebhookPullRequestUnassignedPropPullRequestPropHeadPropUser, None
    ] = Field(title="User")


class WebhookPullRequestUnassignedPropPullRequestPropHeadPropRepoPropLicense(
    GitHubModel
):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestUnassignedPropPullRequestPropHeadPropRepoPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestUnassignedPropPullRequestPropHeadPropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestUnassignedPropPullRequestPropHeadPropRepoPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestUnassignedPropPullRequestPropHeadPropRepo(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestUnassignedPropPullRequestPropHeadPropRepoPropLicense, None
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestUnassignedPropPullRequestPropHeadPropRepoPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestUnassignedPropPullRequestPropHeadPropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestUnassignedPropPullRequestPropHeadPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestUnassignedPropPullRequestPropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookPullRequestUnassignedPropPullRequestPropMergedBy(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestUnassignedPropPullRequestPropMilestonePropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestUnassignedPropPullRequestPropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookPullRequestUnassignedPropPullRequestPropMilestonePropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookPullRequestUnassignedPropPullRequestPropRequestedReviewersItemsOneof0(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestUnassignedPropPullRequestPropRequestedReviewersItemsOneof1(
    GitHubModel
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    parent: Missing[
        Union[
            WebhookPullRequestUnassignedPropPullRequestPropRequestedReviewersItemsOneof1PropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestUnassignedPropPullRequestPropRequestedReviewersItemsOneof1PropParent(
    GitHubModel
):
    """WebhookPullRequestUnassignedPropPullRequestPropRequestedReviewersItemsOneof1Prop
    Parent
    """

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestUnassignedPropPullRequestPropRequestedTeamsItems(GitHubModel):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Description of the team"
    )
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field(description="Unique identifier of the team")
    members_url: Missing[str] = Field(default=UNSET)
    name: str = Field(description="Name of the team")
    node_id: Missing[str] = Field(default=UNSET)
    parent: Missing[
        Union[
            WebhookPullRequestUnassignedPropPullRequestPropRequestedTeamsItemsPropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: Missing[str] = Field(
        default=UNSET,
        description="Permission that the team will have for its repositories",
    )
    privacy: Missing[Literal["open", "closed", "secret"]] = Field(default=UNSET)
    repositories_url: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET, description="URL for the team")


class WebhookPullRequestUnassignedPropPullRequestPropRequestedTeamsItemsPropParent(
    GitHubModel
):
    """WebhookPullRequestUnassignedPropPullRequestPropRequestedTeamsItemsPropParent"""

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestUnassignedPropPullRequestPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestUnlabeled(GitHubModel):
    """pull_request unlabeled event"""

    action: Literal["unlabeled"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    label: Missing[WebhookPullRequestUnlabeledPropLabel] = Field(
        default=UNSET, title="Label"
    )
    number: int = Field(description="The pull request number.")
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    pull_request: WebhookPullRequestUnlabeledPropPullRequest = Field(
        title="Pull Request"
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookPullRequestUnlabeledPropLabel(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookPullRequestUnlabeledPropPullRequest(GitHubModel):
    """Pull Request"""

    links: WebhookPullRequestUnlabeledPropPullRequestPropLinks = Field(alias="_links")
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    additions: Missing[int] = Field(default=UNSET)
    assignee: Union[
        WebhookPullRequestUnlabeledPropPullRequestPropAssignee, None
    ] = Field(title="User")
    assignees: List[
        Union[WebhookPullRequestUnlabeledPropPullRequestPropAssigneesItems, None]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    auto_merge: Union[
        WebhookPullRequestUnlabeledPropPullRequestPropAutoMerge, None
    ] = Field(
        title="PullRequestAutoMerge",
        description="The status of auto merging a pull request.",
    )
    base: WebhookPullRequestUnlabeledPropPullRequestPropBase = Field()
    body: Union[str, None] = Field()
    changed_files: Missing[int] = Field(default=UNSET)
    closed_at: Union[datetime, None] = Field()
    comments: Missing[int] = Field(default=UNSET)
    comments_url: str = Field()
    commits: Missing[int] = Field(default=UNSET)
    commits_url: str = Field()
    created_at: datetime = Field()
    deletions: Missing[int] = Field(default=UNSET)
    diff_url: str = Field()
    draft: bool = Field(
        description="Indicates whether or not the pull request is a draft."
    )
    head: WebhookPullRequestUnlabeledPropPullRequestPropHead = Field()
    html_url: str = Field()
    id: int = Field()
    issue_url: str = Field()
    labels: List[WebhookPullRequestUnlabeledPropPullRequestPropLabelsItems] = Field()
    locked: bool = Field()
    maintainer_can_modify: Missing[bool] = Field(
        default=UNSET,
        description="Indicates whether maintainers can modify the pull request.",
    )
    merge_commit_sha: Union[str, None] = Field()
    mergeable: Missing[Union[bool, None]] = Field(default=UNSET)
    mergeable_state: Missing[str] = Field(default=UNSET)
    merged: Missing[Union[bool, None]] = Field(default=UNSET)
    merged_at: Union[datetime, None] = Field()
    merged_by: Missing[
        Union[WebhookPullRequestUnlabeledPropPullRequestPropMergedBy, None]
    ] = Field(default=UNSET, title="User")
    milestone: Union[
        WebhookPullRequestUnlabeledPropPullRequestPropMilestone, None
    ] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field(
        description="Number uniquely identifying the pull request within its repository."
    )
    patch_url: str = Field()
    rebaseable: Missing[Union[bool, None]] = Field(default=UNSET)
    requested_reviewers: List[
        Union[
            WebhookPullRequestUnlabeledPropPullRequestPropRequestedReviewersItemsOneof0,
            None,
            WebhookPullRequestUnlabeledPropPullRequestPropRequestedReviewersItemsOneof1,
        ]
    ] = Field()
    requested_teams: List[
        WebhookPullRequestUnlabeledPropPullRequestPropRequestedTeamsItems
    ] = Field()
    review_comment_url: str = Field()
    review_comments: Missing[int] = Field(default=UNSET)
    review_comments_url: str = Field()
    state: Literal["open", "closed"] = Field(
        description="State of this Pull Request. Either `open` or `closed`."
    )
    statuses_url: str = Field()
    title: str = Field(description="The title of the pull request.")
    updated_at: datetime = Field()
    url: str = Field()
    user: Union[WebhookPullRequestUnlabeledPropPullRequestPropUser, None] = Field(
        title="User"
    )


class WebhookPullRequestUnlabeledPropPullRequestPropLinks(GitHubModel):
    """WebhookPullRequestUnlabeledPropPullRequestPropLinks"""

    comments: WebhookPullRequestUnlabeledPropPullRequestPropLinksPropComments = Field(
        title="Link"
    )
    commits: WebhookPullRequestUnlabeledPropPullRequestPropLinksPropCommits = Field(
        title="Link"
    )
    html: WebhookPullRequestUnlabeledPropPullRequestPropLinksPropHtml = Field(
        title="Link"
    )
    issue: WebhookPullRequestUnlabeledPropPullRequestPropLinksPropIssue = Field(
        title="Link"
    )
    review_comment: WebhookPullRequestUnlabeledPropPullRequestPropLinksPropReviewComment = Field(
        title="Link"
    )
    review_comments: WebhookPullRequestUnlabeledPropPullRequestPropLinksPropReviewComments = Field(
        title="Link"
    )
    self_: WebhookPullRequestUnlabeledPropPullRequestPropLinksPropSelf = Field(
        alias="self", title="Link"
    )
    statuses: WebhookPullRequestUnlabeledPropPullRequestPropLinksPropStatuses = Field(
        title="Link"
    )


class WebhookPullRequestUnlabeledPropPullRequestPropLinksPropComments(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestUnlabeledPropPullRequestPropLinksPropCommits(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestUnlabeledPropPullRequestPropLinksPropHtml(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestUnlabeledPropPullRequestPropLinksPropIssue(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestUnlabeledPropPullRequestPropLinksPropReviewComment(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestUnlabeledPropPullRequestPropLinksPropReviewComments(
    GitHubModel
):
    """Link"""

    href: str = Field()


class WebhookPullRequestUnlabeledPropPullRequestPropLinksPropSelf(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestUnlabeledPropPullRequestPropLinksPropStatuses(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestUnlabeledPropPullRequestPropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestUnlabeledPropPullRequestPropAssigneesItems(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestUnlabeledPropPullRequestPropAutoMergePropEnabledBy(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestUnlabeledPropPullRequestPropAutoMerge(GitHubModel):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None] = Field(
        description="Commit message for the merge commit."
    )
    commit_title: Union[str, None] = Field(
        description="Title for the merge commit message."
    )
    enabled_by: Union[
        WebhookPullRequestUnlabeledPropPullRequestPropAutoMergePropEnabledBy, None
    ] = Field(title="User")
    merge_method: Literal["merge", "squash", "rebase"] = Field(
        description="The merge method to use."
    )


class WebhookPullRequestUnlabeledPropPullRequestPropBase(GitHubModel):
    """WebhookPullRequestUnlabeledPropPullRequestPropBase"""

    label: str = Field()
    ref: str = Field()
    repo: WebhookPullRequestUnlabeledPropPullRequestPropBasePropRepo = Field(
        title="Repository", description="A git repository"
    )
    sha: str = Field()
    user: Union[
        WebhookPullRequestUnlabeledPropPullRequestPropBasePropUser, None
    ] = Field(title="User")


class WebhookPullRequestUnlabeledPropPullRequestPropBasePropRepo(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestUnlabeledPropPullRequestPropBasePropRepoPropLicense, None
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestUnlabeledPropPullRequestPropBasePropRepoPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestUnlabeledPropPullRequestPropBasePropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestUnlabeledPropPullRequestPropBasePropRepoPropLicense(
    GitHubModel
):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestUnlabeledPropPullRequestPropBasePropRepoPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestUnlabeledPropPullRequestPropBasePropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestUnlabeledPropPullRequestPropBasePropRepoPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestUnlabeledPropPullRequestPropBasePropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestUnlabeledPropPullRequestPropHead(GitHubModel):
    """WebhookPullRequestUnlabeledPropPullRequestPropHead"""

    label: Union[str, None] = Field()
    ref: str = Field()
    repo: Union[
        WebhookPullRequestUnlabeledPropPullRequestPropHeadPropRepo, None
    ] = Field(title="Repository", description="A git repository")
    sha: str = Field()
    user: Union[
        WebhookPullRequestUnlabeledPropPullRequestPropHeadPropUser, None
    ] = Field(title="User")


class WebhookPullRequestUnlabeledPropPullRequestPropHeadPropRepoPropLicense(
    GitHubModel
):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestUnlabeledPropPullRequestPropHeadPropRepoPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestUnlabeledPropPullRequestPropHeadPropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestUnlabeledPropPullRequestPropHeadPropRepoPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestUnlabeledPropPullRequestPropHeadPropRepo(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestUnlabeledPropPullRequestPropHeadPropRepoPropLicense, None
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET, description="The default value for a merge commit message."
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET, description="The default value for a merge commit message title."
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestUnlabeledPropPullRequestPropHeadPropRepoPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestUnlabeledPropPullRequestPropHeadPropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestUnlabeledPropPullRequestPropHeadPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestUnlabeledPropPullRequestPropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookPullRequestUnlabeledPropPullRequestPropMergedBy(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestUnlabeledPropPullRequestPropMilestonePropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestUnlabeledPropPullRequestPropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookPullRequestUnlabeledPropPullRequestPropMilestonePropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookPullRequestUnlabeledPropPullRequestPropRequestedReviewersItemsOneof0(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestUnlabeledPropPullRequestPropRequestedReviewersItemsOneof1(
    GitHubModel
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    parent: Missing[
        Union[
            WebhookPullRequestUnlabeledPropPullRequestPropRequestedReviewersItemsOneof1PropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestUnlabeledPropPullRequestPropRequestedReviewersItemsOneof1PropParent(
    GitHubModel
):
    """WebhookPullRequestUnlabeledPropPullRequestPropRequestedReviewersItemsOneof1PropP
    arent
    """

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestUnlabeledPropPullRequestPropRequestedTeamsItems(GitHubModel):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Description of the team"
    )
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field(description="Unique identifier of the team")
    members_url: Missing[str] = Field(default=UNSET)
    name: str = Field(description="Name of the team")
    node_id: Missing[str] = Field(default=UNSET)
    parent: Missing[
        Union[
            WebhookPullRequestUnlabeledPropPullRequestPropRequestedTeamsItemsPropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: Missing[str] = Field(
        default=UNSET,
        description="Permission that the team will have for its repositories",
    )
    privacy: Missing[Literal["open", "closed", "secret"]] = Field(default=UNSET)
    repositories_url: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET, description="URL for the team")


class WebhookPullRequestUnlabeledPropPullRequestPropRequestedTeamsItemsPropParent(
    GitHubModel
):
    """WebhookPullRequestUnlabeledPropPullRequestPropRequestedTeamsItemsPropParent"""

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestUnlabeledPropPullRequestPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization", "Mannequin"]] = Field(
        default=UNSET
    )
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestUnlocked(GitHubModel):
    """pull_request unlocked event"""

    action: Literal["unlocked"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    number: int = Field(description="The pull request number.")
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    pull_request: WebhookPullRequestUnlockedPropPullRequest = Field(
        title="Pull Request"
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookPullRequestUnlockedPropPullRequest(GitHubModel):
    """Pull Request"""

    links: WebhookPullRequestUnlockedPropPullRequestPropLinks = Field(alias="_links")
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ] = Field()
    additions: Missing[int] = Field(default=UNSET)
    assignee: Union[
        WebhookPullRequestUnlockedPropPullRequestPropAssignee, None
    ] = Field(title="User")
    assignees: List[
        Union[WebhookPullRequestUnlockedPropPullRequestPropAssigneesItems, None]
    ] = Field()
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ] = Field(
        title="AuthorAssociation",
        description="How the author is associated with the repository.",
    )
    auto_merge: Union[
        WebhookPullRequestUnlockedPropPullRequestPropAutoMerge, None
    ] = Field(
        title="PullRequestAutoMerge",
        description="The status of auto merging a pull request.",
    )
    base: WebhookPullRequestUnlockedPropPullRequestPropBase = Field()
    body: Union[str, None] = Field()
    changed_files: Missing[int] = Field(default=UNSET)
    closed_at: Union[datetime, None] = Field()
    comments: Missing[int] = Field(default=UNSET)
    comments_url: str = Field()
    commits: Missing[int] = Field(default=UNSET)
    commits_url: str = Field()
    created_at: datetime = Field()
    deletions: Missing[int] = Field(default=UNSET)
    diff_url: str = Field()
    draft: bool = Field(
        description="Indicates whether or not the pull request is a draft."
    )
    head: WebhookPullRequestUnlockedPropPullRequestPropHead = Field()
    html_url: str = Field()
    id: int = Field()
    issue_url: str = Field()
    labels: List[WebhookPullRequestUnlockedPropPullRequestPropLabelsItems] = Field()
    locked: bool = Field()
    maintainer_can_modify: Missing[bool] = Field(
        default=UNSET,
        description="Indicates whether maintainers can modify the pull request.",
    )
    merge_commit_sha: Union[str, None] = Field()
    mergeable: Missing[Union[bool, None]] = Field(default=UNSET)
    mergeable_state: Missing[str] = Field(default=UNSET)
    merged: Missing[Union[bool, None]] = Field(default=UNSET)
    merged_at: Union[datetime, None] = Field()
    merged_by: Missing[
        Union[WebhookPullRequestUnlockedPropPullRequestPropMergedBy, None]
    ] = Field(default=UNSET, title="User")
    milestone: Union[
        WebhookPullRequestUnlockedPropPullRequestPropMilestone, None
    ] = Field(
        title="Milestone",
        description="A collection of related issues and pull requests.",
    )
    node_id: str = Field()
    number: int = Field(
        description="Number uniquely identifying the pull request within its repository."
    )
    patch_url: str = Field()
    rebaseable: Missing[Union[bool, None]] = Field(default=UNSET)
    requested_reviewers: List[
        Union[
            WebhookPullRequestUnlockedPropPullRequestPropRequestedReviewersItemsOneof0,
            None,
            WebhookPullRequestUnlockedPropPullRequestPropRequestedReviewersItemsOneof1,
        ]
    ] = Field()
    requested_teams: List[
        WebhookPullRequestUnlockedPropPullRequestPropRequestedTeamsItems
    ] = Field()
    review_comment_url: str = Field()
    review_comments: Missing[int] = Field(default=UNSET)
    review_comments_url: str = Field()
    state: Literal["open", "closed"] = Field(
        description="State of this Pull Request. Either `open` or `closed`."
    )
    statuses_url: str = Field()
    title: str = Field(description="The title of the pull request.")
    updated_at: datetime = Field()
    url: str = Field()
    user: Union[WebhookPullRequestUnlockedPropPullRequestPropUser, None] = Field(
        title="User"
    )


class WebhookPullRequestUnlockedPropPullRequestPropLinks(GitHubModel):
    """WebhookPullRequestUnlockedPropPullRequestPropLinks"""

    comments: WebhookPullRequestUnlockedPropPullRequestPropLinksPropComments = Field(
        title="Link"
    )
    commits: WebhookPullRequestUnlockedPropPullRequestPropLinksPropCommits = Field(
        title="Link"
    )
    html: WebhookPullRequestUnlockedPropPullRequestPropLinksPropHtml = Field(
        title="Link"
    )
    issue: WebhookPullRequestUnlockedPropPullRequestPropLinksPropIssue = Field(
        title="Link"
    )
    review_comment: WebhookPullRequestUnlockedPropPullRequestPropLinksPropReviewComment = Field(
        title="Link"
    )
    review_comments: WebhookPullRequestUnlockedPropPullRequestPropLinksPropReviewComments = Field(
        title="Link"
    )
    self_: WebhookPullRequestUnlockedPropPullRequestPropLinksPropSelf = Field(
        alias="self", title="Link"
    )
    statuses: WebhookPullRequestUnlockedPropPullRequestPropLinksPropStatuses = Field(
        title="Link"
    )


class WebhookPullRequestUnlockedPropPullRequestPropLinksPropComments(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestUnlockedPropPullRequestPropLinksPropCommits(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestUnlockedPropPullRequestPropLinksPropHtml(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestUnlockedPropPullRequestPropLinksPropIssue(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestUnlockedPropPullRequestPropLinksPropReviewComment(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestUnlockedPropPullRequestPropLinksPropReviewComments(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestUnlockedPropPullRequestPropLinksPropSelf(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestUnlockedPropPullRequestPropLinksPropStatuses(GitHubModel):
    """Link"""

    href: str = Field()


class WebhookPullRequestUnlockedPropPullRequestPropAssignee(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestUnlockedPropPullRequestPropAssigneesItems(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestUnlockedPropPullRequestPropAutoMergePropEnabledBy(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestUnlockedPropPullRequestPropAutoMerge(GitHubModel):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None] = Field(
        description="Commit message for the merge commit."
    )
    commit_title: str = Field(description="Title for the merge commit message.")
    enabled_by: Union[
        WebhookPullRequestUnlockedPropPullRequestPropAutoMergePropEnabledBy, None
    ] = Field(title="User")
    merge_method: Literal["merge", "squash", "rebase"] = Field(
        description="The merge method to use."
    )


class WebhookPullRequestUnlockedPropPullRequestPropBase(GitHubModel):
    """WebhookPullRequestUnlockedPropPullRequestPropBase"""

    label: str = Field()
    ref: str = Field()
    repo: WebhookPullRequestUnlockedPropPullRequestPropBasePropRepo = Field(
        title="Repository", description="A git repository"
    )
    sha: str = Field()
    user: Union[
        WebhookPullRequestUnlockedPropPullRequestPropBasePropUser, None
    ] = Field(title="User")


class WebhookPullRequestUnlockedPropPullRequestPropBasePropRepo(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestUnlockedPropPullRequestPropBasePropRepoPropLicense, None
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestUnlockedPropPullRequestPropBasePropRepoPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestUnlockedPropPullRequestPropBasePropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestUnlockedPropPullRequestPropBasePropRepoPropLicense(GitHubModel):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestUnlockedPropPullRequestPropBasePropRepoPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestUnlockedPropPullRequestPropBasePropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestUnlockedPropPullRequestPropBasePropRepoPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestUnlockedPropPullRequestPropBasePropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestUnlockedPropPullRequestPropHead(GitHubModel):
    """WebhookPullRequestUnlockedPropPullRequestPropHead"""

    label: str = Field()
    ref: str = Field()
    repo: Union[
        WebhookPullRequestUnlockedPropPullRequestPropHeadPropRepo, None
    ] = Field(title="Repository", description="A git repository")
    sha: str = Field()
    user: Union[
        WebhookPullRequestUnlockedPropPullRequestPropHeadPropUser, None
    ] = Field(title="User")


class WebhookPullRequestUnlockedPropPullRequestPropHeadPropRepoPropLicense(GitHubModel):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPullRequestUnlockedPropPullRequestPropHeadPropRepoPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestUnlockedPropPullRequestPropHeadPropRepoPropPermissions(
    GitHubModel
):
    """WebhookPullRequestUnlockedPropPullRequestPropHeadPropRepoPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookPullRequestUnlockedPropPullRequestPropHeadPropRepo(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookPullRequestUnlockedPropPullRequestPropHeadPropRepoPropLicense, None
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[
        WebhookPullRequestUnlockedPropPullRequestPropHeadPropRepoPropOwner, None
    ] = Field(title="User")
    permissions: Missing[
        WebhookPullRequestUnlockedPropPullRequestPropHeadPropRepoPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPullRequestUnlockedPropPullRequestPropHeadPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestUnlockedPropPullRequestPropLabelsItems(GitHubModel):
    """Label"""

    color: str = Field(
        description="6-character hex code, without the leading #, identifying the color"
    )
    default: bool = Field()
    description: Union[str, None] = Field()
    id: int = Field()
    name: str = Field(description="The name of the label.")
    node_id: str = Field()
    url: str = Field(description="URL for the label")


class WebhookPullRequestUnlockedPropPullRequestPropMergedBy(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestUnlockedPropPullRequestPropMilestonePropCreator(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestUnlockedPropPullRequestPropMilestone(GitHubModel):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None] = Field()
    closed_issues: int = Field()
    created_at: datetime = Field()
    creator: Union[
        WebhookPullRequestUnlockedPropPullRequestPropMilestonePropCreator, None
    ] = Field(title="User")
    description: Union[str, None] = Field()
    due_on: Union[datetime, None] = Field()
    html_url: str = Field()
    id: int = Field()
    labels_url: str = Field()
    node_id: str = Field()
    number: int = Field(description="The number of the milestone.")
    open_issues: int = Field()
    state: Literal["open", "closed"] = Field(description="The state of the milestone.")
    title: str = Field(description="The title of the milestone.")
    updated_at: datetime = Field()
    url: str = Field()


class WebhookPullRequestUnlockedPropPullRequestPropRequestedReviewersItemsOneof0(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPullRequestUnlockedPropPullRequestPropRequestedReviewersItemsOneof1(
    GitHubModel
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Description of the team"
    )
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field(description="Unique identifier of the team")
    members_url: Missing[str] = Field(default=UNSET)
    name: str = Field(description="Name of the team")
    node_id: Missing[str] = Field(default=UNSET)
    parent: Missing[
        Union[
            WebhookPullRequestUnlockedPropPullRequestPropRequestedReviewersItemsOneof1PropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: Missing[str] = Field(
        default=UNSET,
        description="Permission that the team will have for its repositories",
    )
    privacy: Missing[Literal["open", "closed", "secret"]] = Field(default=UNSET)
    repositories_url: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET, description="URL for the team")


class WebhookPullRequestUnlockedPropPullRequestPropRequestedReviewersItemsOneof1PropParent(
    GitHubModel
):
    """WebhookPullRequestUnlockedPropPullRequestPropRequestedReviewersItemsOneof1PropPa
    rent
    """

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestUnlockedPropPullRequestPropRequestedTeamsItems(GitHubModel):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Description of the team"
    )
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field(description="Unique identifier of the team")
    members_url: Missing[str] = Field(default=UNSET)
    name: str = Field(description="Name of the team")
    node_id: Missing[str] = Field(default=UNSET)
    parent: Missing[
        Union[
            WebhookPullRequestUnlockedPropPullRequestPropRequestedTeamsItemsPropParent,
            None,
        ]
    ] = Field(default=UNSET)
    permission: Missing[str] = Field(
        default=UNSET,
        description="Permission that the team will have for its repositories",
    )
    privacy: Missing[Literal["open", "closed", "secret"]] = Field(default=UNSET)
    repositories_url: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET, description="URL for the team")


class WebhookPullRequestUnlockedPropPullRequestPropRequestedTeamsItemsPropParent(
    GitHubModel
):
    """WebhookPullRequestUnlockedPropPullRequestPropRequestedTeamsItemsPropParent"""

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookPullRequestUnlockedPropPullRequestPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPush(GitHubModel):
    """push event"""

    after: str = Field(
        description="The SHA of the most recent commit on `ref` after the push."
    )
    base_ref: Union[str, None] = Field()
    before: str = Field(
        description="The SHA of the most recent commit on `ref` before the push."
    )
    commits: List[WebhookPushPropCommitsItems] = Field(
        description="An array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the `compare` between the `before` commit and the `after` commit.) The array includes a maximum of 20 commits. If necessary, you can use the [Commits API](https://docs.github.com/rest/commits) to fetch additional commits. This limit is applied to timeline events only and isn't applied to webhook deliveries."
    )
    compare: str = Field(
        description="URL that shows the changes in this `ref` update, from the `before` commit to the `after` commit. For a newly created `ref` that is directly based on the default branch, this is the comparison between the head of the default branch and the `after` commit. Otherwise, this shows all commits until the `after` commit."
    )
    created: bool = Field(description="Whether this push created the `ref`.")
    deleted: bool = Field(description="Whether this push deleted the `ref`.")
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    forced: bool = Field(description="Whether this push was a force push of the `ref`.")
    head_commit: Union[WebhookPushPropHeadCommit, None] = Field(title="Commit")
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    pusher: WebhookPushPropPusher = Field(
        title="Committer",
        description="Metaproperties for Git author/committer information.",
    )
    ref: str = Field(
        description="The full git ref that was pushed. Example: `refs/heads/main` or `refs/tags/v3.14.1`."
    )
    repository: WebhookPushPropRepository = Field(
        title="Repository", description="A git repository"
    )
    sender: Missing[SimpleUserWebhooks] = Field(
        default=UNSET,
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookPushPropCommitsItems(GitHubModel):
    """Commit"""

    added: Missing[List[str]] = Field(
        default=UNSET, description="An array of files added in the commit."
    )
    author: WebhookPushPropCommitsItemsPropAuthor = Field(
        title="Committer",
        description="Metaproperties for Git author/committer information.",
    )
    committer: WebhookPushPropCommitsItemsPropCommitter = Field(
        title="Committer",
        description="Metaproperties for Git author/committer information.",
    )
    distinct: bool = Field(
        description="Whether this commit is distinct from any that have been pushed before."
    )
    id: str = Field()
    message: str = Field(description="The commit message.")
    modified: Missing[List[str]] = Field(
        default=UNSET, description="An array of files modified by the commit."
    )
    removed: Missing[List[str]] = Field(
        default=UNSET, description="An array of files removed in the commit."
    )
    timestamp: datetime = Field(description="The ISO 8601 timestamp of the commit.")
    tree_id: str = Field()
    url: str = Field(description="URL that points to the commit API resource.")


class WebhookPushPropCommitsItemsPropAuthor(GitHubModel):
    """Committer

    Metaproperties for Git author/committer information.
    """

    date: Missing[datetime] = Field(default=UNSET)
    email: Union[str, None] = Field()
    name: str = Field(description="The git author's name.")
    username: Missing[str] = Field(default=UNSET)


class WebhookPushPropCommitsItemsPropCommitter(GitHubModel):
    """Committer

    Metaproperties for Git author/committer information.
    """

    date: Missing[datetime] = Field(default=UNSET)
    email: Union[str, None] = Field()
    name: str = Field(description="The git author's name.")
    username: Missing[str] = Field(default=UNSET)


class WebhookPushPropHeadCommitPropAuthor(GitHubModel):
    """Committer

    Metaproperties for Git author/committer information.
    """

    date: Missing[datetime] = Field(default=UNSET)
    email: Union[str, None] = Field()
    name: str = Field(description="The git author's name.")
    username: Missing[str] = Field(default=UNSET)


class WebhookPushPropHeadCommitPropCommitter(GitHubModel):
    """Committer

    Metaproperties for Git author/committer information.
    """

    date: Missing[datetime] = Field(default=UNSET)
    email: Union[str, None] = Field()
    name: str = Field(description="The git author's name.")
    username: Missing[str] = Field(default=UNSET)


class WebhookPushPropHeadCommit(GitHubModel):
    """Commit"""

    added: Missing[List[str]] = Field(
        default=UNSET, description="An array of files added in the commit."
    )
    author: WebhookPushPropHeadCommitPropAuthor = Field(
        title="Committer",
        description="Metaproperties for Git author/committer information.",
    )
    committer: WebhookPushPropHeadCommitPropCommitter = Field(
        title="Committer",
        description="Metaproperties for Git author/committer information.",
    )
    distinct: bool = Field(
        description="Whether this commit is distinct from any that have been pushed before."
    )
    id: str = Field()
    message: str = Field(description="The commit message.")
    modified: Missing[List[str]] = Field(
        default=UNSET, description="An array of files modified by the commit."
    )
    removed: Missing[List[str]] = Field(
        default=UNSET, description="An array of files removed in the commit."
    )
    timestamp: datetime = Field(description="The ISO 8601 timestamp of the commit.")
    tree_id: str = Field()
    url: str = Field(description="URL that points to the commit API resource.")


class WebhookPushPropPusher(GitHubModel):
    """Committer

    Metaproperties for Git author/committer information.
    """

    date: Missing[datetime] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    name: str = Field(description="The git author's name.")
    username: Missing[str] = Field(default=UNSET)


class WebhookPushPropRepository(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    custom_properties: Missing[WebhookPushPropRepositoryPropCustomProperties] = Field(
        default=UNSET,
        description="The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.",
    )
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    has_discussions: bool = Field(
        default=False, description="Whether discussions are enabled."
    )
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[WebhookPushPropRepositoryPropLicense, None] = Field(
        alias="license", title="License"
    )
    master_branch: Missing[str] = Field(default=UNSET)
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[WebhookPushPropRepositoryPropOwner, None] = Field(title="User")
    permissions: Missing[WebhookPushPropRepositoryPropPermissions] = Field(
        default=UNSET
    )
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether to require contributors to sign off on web-based commits",
    )


class WebhookPushPropRepositoryPropCustomProperties(ExtraGitHubModel):
    """WebhookPushPropRepositoryPropCustomProperties

    The custom properties that were defined for the repository. The keys are the
    custom property names, and the values are the corresponding custom property
    values.
    """


class WebhookPushPropRepositoryPropLicense(GitHubModel):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookPushPropRepositoryPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookPushPropRepositoryPropPermissions(GitHubModel):
    """WebhookPushPropRepositoryPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookRegistryPackagePublished(GitHubModel):
    """WebhookRegistryPackagePublished"""

    action: Literal["published"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    registry_package: WebhookRegistryPackagePublishedPropRegistryPackage = Field()
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookRegistryPackagePublishedPropRegistryPackage(GitHubModel):
    """WebhookRegistryPackagePublishedPropRegistryPackage"""

    created_at: Union[str, None] = Field()
    description: Union[str, None] = Field()
    ecosystem: str = Field()
    html_url: str = Field()
    id: int = Field()
    name: str = Field()
    namespace: str = Field()
    owner: WebhookRegistryPackagePublishedPropRegistryPackagePropOwner = Field()
    package_type: str = Field()
    package_version: Union[
        WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersion, None
    ] = Field()
    registry: Union[
        WebhookRegistryPackagePublishedPropRegistryPackagePropRegistry, None
    ] = Field()
    updated_at: Union[str, None] = Field()


class WebhookRegistryPackagePublishedPropRegistryPackagePropOwner(GitHubModel):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropOwner"""

    avatar_url: str = Field()
    events_url: str = Field()
    followers_url: str = Field()
    following_url: str = Field()
    gists_url: str = Field()
    gravatar_id: str = Field()
    html_url: str = Field()
    id: int = Field()
    login: str = Field()
    node_id: str = Field()
    organizations_url: str = Field()
    received_events_url: str = Field()
    repos_url: str = Field()
    site_admin: bool = Field()
    starred_url: str = Field()
    subscriptions_url: str = Field()
    type: str = Field()
    url: str = Field()


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropAuthor(
    GitHubModel
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropAuthor"""

    avatar_url: str = Field()
    events_url: str = Field()
    followers_url: str = Field()
    following_url: str = Field()
    gists_url: str = Field()
    gravatar_id: str = Field()
    html_url: str = Field()
    id: int = Field()
    login: str = Field()
    node_id: str = Field()
    organizations_url: str = Field()
    received_events_url: str = Field()
    repos_url: str = Field()
    site_admin: bool = Field()
    starred_url: str = Field()
    subscriptions_url: str = Field()
    type: str = Field()
    url: str = Field()


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropBodyOneof1(
    GitHubModel
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropBodyOneo
    f1
    """


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropContainerMetadata(
    GitHubModel
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropContaine
    rMetadata
    """

    labels: Missing[
        Union[
            WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropContainerMetadataPropLabels,
            None,
        ]
    ] = Field(default=UNSET)
    manifest: Missing[
        Union[
            WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropContainerMetadataPropManifest,
            None,
        ]
    ] = Field(default=UNSET)
    tag: Missing[
        WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropContainerMetadataPropTag
    ] = Field(default=UNSET)


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropContainerMetadataPropLabels(
    GitHubModel
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropContaine
    rMetadataPropLabels
    """


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropContainerMetadataPropManifest(
    GitHubModel
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropContaine
    rMetadataPropManifest
    """


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropContainerMetadataPropTag(
    GitHubModel
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropContaine
    rMetadataPropTag
    """

    digest: Missing[str] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropDockerMetadataItems(
    GitHubModel
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropDockerMe
    tadataItems
    """

    tags: Missing[List[str]] = Field(default=UNSET)


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropMetadataItems(
    ExtraGitHubModel
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropMetadata
    Items
    """


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropAuthorOneof1(
    GitHubModel
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetad
    ataPropAuthorOneof1
    """


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropBugsOneof1(
    GitHubModel
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetad
    ataPropBugsOneof1
    """


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropDependencies(
    GitHubModel
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetad
    ataPropDependencies
    """


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropDevDependencies(
    GitHubModel
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetad
    ataPropDevDependencies
    """


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropPeerDependencies(
    GitHubModel
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetad
    ataPropPeerDependencies
    """


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropOptionalDependencies(
    GitHubModel
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetad
    ataPropOptionalDependencies
    """


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropDistOneof1(
    GitHubModel
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetad
    ataPropDistOneof1
    """


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropRepositoryOneof1(
    GitHubModel
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetad
    ataPropRepositoryOneof1
    """


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropScripts(
    GitHubModel
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetad
    ataPropScripts
    """


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropEngines(
    GitHubModel
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetad
    ataPropEngines
    """


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropBin(
    GitHubModel
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetad
    ataPropBin
    """


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropMan(
    GitHubModel
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetad
    ataPropMan
    """


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropDirectoriesOneof1(
    GitHubModel
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetad
    ataPropDirectoriesOneof1
    """


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadata(
    GitHubModel
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetad
    ata
    """

    name: Missing[str] = Field(default=UNSET)
    version: Missing[str] = Field(default=UNSET)
    npm_user: Missing[str] = Field(default=UNSET)
    author: Missing[
        Union[
            str,
            WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropAuthorOneof1,
            None,
        ]
    ] = Field(default=UNSET)
    bugs: Missing[
        Union[
            str,
            WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropBugsOneof1,
            None,
        ]
    ] = Field(default=UNSET)
    dependencies: Missing[
        WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropDependencies
    ] = Field(default=UNSET)
    dev_dependencies: Missing[
        WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropDevDependencies
    ] = Field(default=UNSET)
    peer_dependencies: Missing[
        WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropPeerDependencies
    ] = Field(default=UNSET)
    optional_dependencies: Missing[
        WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropOptionalDependencies
    ] = Field(default=UNSET)
    description: Missing[str] = Field(default=UNSET)
    dist: Missing[
        Union[
            str,
            WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropDistOneof1,
            None,
        ]
    ] = Field(default=UNSET)
    git_head: Missing[str] = Field(default=UNSET)
    homepage: Missing[str] = Field(default=UNSET)
    license_: Missing[str] = Field(default=UNSET, alias="license")
    main: Missing[str] = Field(default=UNSET)
    repository: Missing[
        Union[
            str,
            WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropRepositoryOneof1,
            None,
        ]
    ] = Field(default=UNSET)
    scripts: Missing[
        WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropScripts
    ] = Field(default=UNSET)
    id: Missing[str] = Field(default=UNSET)
    node_version: Missing[str] = Field(default=UNSET)
    npm_version: Missing[str] = Field(default=UNSET)
    has_shrinkwrap: Missing[bool] = Field(default=UNSET)
    maintainers: Missing[List[str]] = Field(default=UNSET)
    contributors: Missing[List[str]] = Field(default=UNSET)
    engines: Missing[
        WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropEngines
    ] = Field(default=UNSET)
    keywords: Missing[List[str]] = Field(default=UNSET)
    files: Missing[List[str]] = Field(default=UNSET)
    bin_: Missing[
        WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropBin
    ] = Field(default=UNSET, alias="bin")
    man: Missing[
        WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropMan
    ] = Field(default=UNSET)
    directories: Missing[
        Union[
            str,
            WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropDirectoriesOneof1,
            None,
        ]
    ] = Field(default=UNSET)
    os: Missing[List[str]] = Field(default=UNSET)
    cpu: Missing[List[str]] = Field(default=UNSET)
    readme: Missing[str] = Field(default=UNSET)
    installation_command: Missing[str] = Field(default=UNSET)
    release_id: Missing[int] = Field(default=UNSET)
    commit_oid: Missing[str] = Field(default=UNSET)
    published_via_actions: Missing[bool] = Field(default=UNSET)
    deleted_by_id: Missing[int] = Field(default=UNSET)


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNugetMetadataItems(
    GitHubModel
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNugetMet
    adataItems
    """

    id: Missing[
        Union[
            str,
            WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNugetMetadataItemsPropIdOneof1,
            int,
            None,
        ]
    ] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    value: Missing[
        Union[
            bool,
            str,
            int,
            WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNugetMetadataItemsPropValueOneof3,
        ]
    ] = Field(default=UNSET)


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNugetMetadataItemsPropIdOneof1(
    GitHubModel
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNugetMet
    adataItemsPropIdOneof1
    """


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNugetMetadataItemsPropValueOneof3(
    GitHubModel
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNugetMet
    adataItemsPropValueOneof3
    """

    url: Missing[str] = Field(default=UNSET)
    branch: Missing[str] = Field(default=UNSET)
    commit: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropPackageFilesItems(
    GitHubModel
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropPackageF
    ilesItems
    """

    content_type: str = Field()
    created_at: str = Field()
    download_url: str = Field()
    id: int = Field()
    md5: Union[str, None] = Field()
    name: str = Field()
    sha1: Union[str, None] = Field()
    sha256: Union[str, None] = Field()
    size: int = Field()
    state: Union[str, None] = Field()
    updated_at: str = Field()


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropRelease(
    GitHubModel
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropRelease"""

    author: Missing[
        WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropReleasePropAuthor
    ] = Field(default=UNSET)
    created_at: Missing[str] = Field(default=UNSET)
    draft: Missing[bool] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    name: Missing[Union[str, None]] = Field(default=UNSET)
    prerelease: Missing[bool] = Field(default=UNSET)
    published_at: Missing[str] = Field(default=UNSET)
    tag_name: Missing[str] = Field(default=UNSET)
    target_commitish: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropReleasePropAuthor(
    GitHubModel
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropReleaseP
    ropAuthor
    """

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersion(GitHubModel):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersion"""

    author: Missing[
        WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropAuthor
    ] = Field(default=UNSET)
    body: Missing[
        Union[
            str,
            WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropBodyOneof1,
        ]
    ] = Field(default=UNSET)
    body_html: Missing[str] = Field(default=UNSET)
    container_metadata: Missing[
        WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropContainerMetadata
    ] = Field(default=UNSET)
    created_at: Missing[str] = Field(default=UNSET)
    description: str = Field()
    docker_metadata: Missing[
        List[
            WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropDockerMetadataItems
        ]
    ] = Field(default=UNSET)
    draft: Missing[bool] = Field(default=UNSET)
    html_url: str = Field()
    id: int = Field()
    installation_command: str = Field()
    manifest: Missing[str] = Field(default=UNSET)
    metadata: List[
        WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropMetadataItems
    ] = Field()
    name: str = Field()
    npm_metadata: Missing[
        Union[
            WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadata,
            None,
        ]
    ] = Field(default=UNSET)
    nuget_metadata: Missing[
        Union[
            List[
                WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNugetMetadataItems
            ],
            None,
        ]
    ] = Field(default=UNSET)
    package_files: List[
        WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropPackageFilesItems
    ] = Field()
    package_url: str = Field()
    prerelease: Missing[bool] = Field(default=UNSET)
    release: Missing[
        WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropRelease
    ] = Field(default=UNSET)
    rubygems_metadata: Missing[List[WebhookRubygemsMetadata]] = Field(default=UNSET)
    summary: str = Field()
    tag_name: Missing[str] = Field(default=UNSET)
    target_commitish: Missing[str] = Field(default=UNSET)
    target_oid: Missing[str] = Field(default=UNSET)
    updated_at: Missing[str] = Field(default=UNSET)
    version: str = Field()


class WebhookRegistryPackagePublishedPropRegistryPackagePropRegistry(GitHubModel):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropRegistry"""

    about_url: Missing[str] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)
    vendor: Missing[str] = Field(default=UNSET)


class WebhookRegistryPackageUpdated(GitHubModel):
    """WebhookRegistryPackageUpdated"""

    action: Literal["updated"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    registry_package: WebhookRegistryPackageUpdatedPropRegistryPackage = Field()
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookRegistryPackageUpdatedPropRegistryPackage(GitHubModel):
    """WebhookRegistryPackageUpdatedPropRegistryPackage"""

    created_at: str = Field()
    description: None = Field()
    ecosystem: str = Field()
    html_url: str = Field()
    id: int = Field()
    name: str = Field()
    namespace: str = Field()
    owner: WebhookRegistryPackageUpdatedPropRegistryPackagePropOwner = Field()
    package_type: str = Field()
    package_version: WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersion = (
        Field()
    )
    registry: Union[
        WebhookRegistryPackageUpdatedPropRegistryPackagePropRegistry, None
    ] = Field()
    updated_at: str = Field()


class WebhookRegistryPackageUpdatedPropRegistryPackagePropOwner(GitHubModel):
    """WebhookRegistryPackageUpdatedPropRegistryPackagePropOwner"""

    avatar_url: str = Field()
    events_url: str = Field()
    followers_url: str = Field()
    following_url: str = Field()
    gists_url: str = Field()
    gravatar_id: str = Field()
    html_url: str = Field()
    id: int = Field()
    login: str = Field()
    node_id: str = Field()
    organizations_url: str = Field()
    received_events_url: str = Field()
    repos_url: str = Field()
    site_admin: bool = Field()
    starred_url: str = Field()
    subscriptions_url: str = Field()
    type: str = Field()
    url: str = Field()


class WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersion(GitHubModel):
    """WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersion"""

    author: WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropAuthor = (
        Field()
    )
    body: str = Field()
    body_html: str = Field()
    created_at: str = Field()
    description: str = Field()
    docker_metadata: Missing[
        List[
            Union[
                WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropDockerMetadataItems,
                None,
            ]
        ]
    ] = Field(default=UNSET)
    draft: Missing[bool] = Field(default=UNSET)
    html_url: str = Field()
    id: int = Field()
    installation_command: str = Field()
    manifest: Missing[str] = Field(default=UNSET)
    metadata: List[
        WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropMetadataItems
    ] = Field()
    name: str = Field()
    package_files: List[
        WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropPackageFilesItems
    ] = Field()
    package_url: str = Field()
    prerelease: Missing[bool] = Field(default=UNSET)
    release: Missing[
        WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropRelease
    ] = Field(default=UNSET)
    rubygems_metadata: Missing[List[WebhookRubygemsMetadata]] = Field(default=UNSET)
    summary: str = Field()
    tag_name: Missing[str] = Field(default=UNSET)
    target_commitish: str = Field()
    target_oid: str = Field()
    updated_at: str = Field()
    version: str = Field()


class WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropAuthor(
    GitHubModel
):
    """WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropAuthor"""

    avatar_url: str = Field()
    events_url: str = Field()
    followers_url: str = Field()
    following_url: str = Field()
    gists_url: str = Field()
    gravatar_id: str = Field()
    html_url: str = Field()
    id: int = Field()
    login: str = Field()
    node_id: str = Field()
    organizations_url: str = Field()
    received_events_url: str = Field()
    repos_url: str = Field()
    site_admin: bool = Field()
    starred_url: str = Field()
    subscriptions_url: str = Field()
    type: str = Field()
    url: str = Field()


class WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropDockerMetadataItems(
    GitHubModel
):
    """WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropDockerMeta
    dataItems
    """

    tags: Missing[List[str]] = Field(default=UNSET)


class WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropMetadataItems(
    ExtraGitHubModel
):
    """WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropMetadataIt
    ems
    """


class WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropPackageFilesItems(
    GitHubModel
):
    """WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropPackageFil
    esItems
    """

    content_type: Missing[str] = Field(default=UNSET)
    created_at: Missing[str] = Field(default=UNSET)
    download_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    md5: Missing[Union[str, None]] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    sha1: Missing[Union[str, None]] = Field(default=UNSET)
    sha256: Missing[str] = Field(default=UNSET)
    size: Missing[int] = Field(default=UNSET)
    state: Missing[str] = Field(default=UNSET)
    updated_at: Missing[str] = Field(default=UNSET)


class WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropRelease(
    GitHubModel
):
    """WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropRelease"""

    author: WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropReleasePropAuthor = (
        Field()
    )
    created_at: str = Field()
    draft: bool = Field()
    html_url: str = Field()
    id: int = Field()
    name: str = Field()
    prerelease: bool = Field()
    published_at: str = Field()
    tag_name: str = Field()
    target_commitish: str = Field()
    url: str = Field()


class WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropReleasePropAuthor(
    GitHubModel
):
    """WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropReleasePro
    pAuthor
    """

    avatar_url: str = Field()
    events_url: str = Field()
    followers_url: str = Field()
    following_url: str = Field()
    gists_url: str = Field()
    gravatar_id: str = Field()
    html_url: str = Field()
    id: int = Field()
    login: str = Field()
    node_id: str = Field()
    organizations_url: str = Field()
    received_events_url: str = Field()
    repos_url: str = Field()
    site_admin: bool = Field()
    starred_url: str = Field()
    subscriptions_url: str = Field()
    type: str = Field()
    url: str = Field()


class WebhookRegistryPackageUpdatedPropRegistryPackagePropRegistry(GitHubModel):
    """WebhookRegistryPackageUpdatedPropRegistryPackagePropRegistry"""


class WebhookReleaseCreated(GitHubModel):
    """release created event"""

    action: Literal["created"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    release: WebhookReleaseCreatedPropRelease = Field(
        title="Release",
        description="The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookReleaseCreatedPropRelease(GitHubModel):
    """Release

    The [release](https://docs.github.com/rest/releases/releases/#get-a-release)
    object.
    """

    assets: List[WebhookReleaseCreatedPropReleasePropAssetsItems] = Field()
    assets_url: str = Field()
    author: Union[WebhookReleaseCreatedPropReleasePropAuthor, None] = Field(
        title="User"
    )
    body: Union[str, None] = Field()
    created_at: Union[datetime, None] = Field()
    discussion_url: Missing[str] = Field(default=UNSET)
    draft: bool = Field(description="Whether the release is a draft or published")
    html_url: str = Field()
    id: int = Field()
    name: Union[str, None] = Field()
    node_id: str = Field()
    prerelease: bool = Field(
        description="Whether the release is identified as a prerelease or a full release."
    )
    published_at: Union[datetime, None] = Field()
    reactions: Missing[WebhookReleaseCreatedPropReleasePropReactions] = Field(
        default=UNSET, title="Reactions"
    )
    tag_name: str = Field(description="The name of the tag.")
    tarball_url: Union[str, None] = Field()
    target_commitish: str = Field(
        description="Specifies the commitish value that determines where the Git tag is created from."
    )
    upload_url: str = Field()
    url: str = Field()
    zipball_url: Union[str, None] = Field()


class WebhookReleaseCreatedPropReleasePropAssetsItems(GitHubModel):
    """Release Asset

    Data related to a release.
    """

    browser_download_url: str = Field()
    content_type: str = Field()
    created_at: datetime = Field()
    download_count: int = Field()
    id: int = Field()
    label: Union[str, None] = Field()
    name: str = Field(description="The file name of the asset.")
    node_id: str = Field()
    size: int = Field()
    state: Literal["uploaded"] = Field(description="State of the release asset.")
    updated_at: datetime = Field()
    uploader: Missing[
        Union[WebhookReleaseCreatedPropReleasePropAssetsItemsPropUploader, None]
    ] = Field(default=UNSET, title="User")
    url: str = Field()


class WebhookReleaseCreatedPropReleasePropAssetsItemsPropUploader(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookReleaseCreatedPropReleasePropAuthor(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookReleaseCreatedPropReleasePropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookReleaseDeleted(GitHubModel):
    """release deleted event"""

    action: Literal["deleted"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    release: WebhookReleaseDeletedPropRelease = Field(
        title="Release",
        description="The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookReleaseDeletedPropRelease(GitHubModel):
    """Release

    The [release](https://docs.github.com/rest/releases/releases/#get-a-release)
    object.
    """

    assets: List[WebhookReleaseDeletedPropReleasePropAssetsItems] = Field()
    assets_url: str = Field()
    author: Union[WebhookReleaseDeletedPropReleasePropAuthor, None] = Field(
        title="User"
    )
    body: Union[str, None] = Field()
    created_at: Union[datetime, None] = Field()
    discussion_url: Missing[str] = Field(default=UNSET)
    draft: bool = Field(description="Whether the release is a draft or published")
    html_url: str = Field()
    id: int = Field()
    name: Union[str, None] = Field()
    node_id: str = Field()
    prerelease: bool = Field(
        description="Whether the release is identified as a prerelease or a full release."
    )
    published_at: Union[datetime, None] = Field()
    reactions: Missing[WebhookReleaseDeletedPropReleasePropReactions] = Field(
        default=UNSET, title="Reactions"
    )
    tag_name: str = Field(description="The name of the tag.")
    tarball_url: Union[str, None] = Field()
    target_commitish: str = Field(
        description="Specifies the commitish value that determines where the Git tag is created from."
    )
    upload_url: str = Field()
    url: str = Field()
    zipball_url: Union[str, None] = Field()


class WebhookReleaseDeletedPropReleasePropAssetsItems(GitHubModel):
    """Release Asset

    Data related to a release.
    """

    browser_download_url: str = Field()
    content_type: str = Field()
    created_at: datetime = Field()
    download_count: int = Field()
    id: int = Field()
    label: Union[str, None] = Field()
    name: str = Field(description="The file name of the asset.")
    node_id: str = Field()
    size: int = Field()
    state: Literal["uploaded"] = Field(description="State of the release asset.")
    updated_at: datetime = Field()
    uploader: Missing[
        Union[WebhookReleaseDeletedPropReleasePropAssetsItemsPropUploader, None]
    ] = Field(default=UNSET, title="User")
    url: str = Field()


class WebhookReleaseDeletedPropReleasePropAssetsItemsPropUploader(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookReleaseDeletedPropReleasePropAuthor(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookReleaseDeletedPropReleasePropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookReleaseEdited(GitHubModel):
    """release edited event"""

    action: Literal["edited"] = Field()
    changes: WebhookReleaseEditedPropChanges = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    release: WebhookReleaseEditedPropRelease = Field(
        title="Release",
        description="The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: Missing[SimpleUserWebhooks] = Field(
        default=UNSET,
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookReleaseEditedPropChanges(GitHubModel):
    """WebhookReleaseEditedPropChanges"""

    body: Missing[WebhookReleaseEditedPropChangesPropBody] = Field(default=UNSET)
    name: Missing[WebhookReleaseEditedPropChangesPropName] = Field(default=UNSET)
    make_latest: Missing[WebhookReleaseEditedPropChangesPropMakeLatest] = Field(
        default=UNSET
    )


class WebhookReleaseEditedPropChangesPropBody(GitHubModel):
    """WebhookReleaseEditedPropChangesPropBody"""

    from_: str = Field(
        alias="from",
        description="The previous version of the body if the action was `edited`.",
    )


class WebhookReleaseEditedPropChangesPropName(GitHubModel):
    """WebhookReleaseEditedPropChangesPropName"""

    from_: str = Field(
        alias="from",
        description="The previous version of the name if the action was `edited`.",
    )


class WebhookReleaseEditedPropChangesPropMakeLatest(GitHubModel):
    """WebhookReleaseEditedPropChangesPropMakeLatest"""

    to: bool = Field(
        description="Whether this release was explicitly `edited` to be the latest."
    )


class WebhookReleaseEditedPropRelease(GitHubModel):
    """Release

    The [release](https://docs.github.com/rest/releases/releases/#get-a-release)
    object.
    """

    assets: List[WebhookReleaseEditedPropReleasePropAssetsItems] = Field()
    assets_url: str = Field()
    author: Union[WebhookReleaseEditedPropReleasePropAuthor, None] = Field(title="User")
    body: Union[str, None] = Field()
    created_at: Union[datetime, None] = Field()
    discussion_url: Missing[str] = Field(default=UNSET)
    draft: bool = Field(description="Whether the release is a draft or published")
    html_url: str = Field()
    id: int = Field()
    name: Union[str, None] = Field()
    node_id: str = Field()
    prerelease: bool = Field(
        description="Whether the release is identified as a prerelease or a full release."
    )
    published_at: Union[datetime, None] = Field()
    reactions: Missing[WebhookReleaseEditedPropReleasePropReactions] = Field(
        default=UNSET, title="Reactions"
    )
    tag_name: str = Field(description="The name of the tag.")
    tarball_url: Union[str, None] = Field()
    target_commitish: str = Field(
        description="Specifies the commitish value that determines where the Git tag is created from."
    )
    upload_url: str = Field()
    url: str = Field()
    zipball_url: Union[str, None] = Field()


class WebhookReleaseEditedPropReleasePropAssetsItems(GitHubModel):
    """Release Asset

    Data related to a release.
    """

    browser_download_url: str = Field()
    content_type: str = Field()
    created_at: datetime = Field()
    download_count: int = Field()
    id: int = Field()
    label: Union[str, None] = Field()
    name: str = Field(description="The file name of the asset.")
    node_id: str = Field()
    size: int = Field()
    state: Literal["uploaded"] = Field(description="State of the release asset.")
    updated_at: datetime = Field()
    uploader: Missing[
        Union[WebhookReleaseEditedPropReleasePropAssetsItemsPropUploader, None]
    ] = Field(default=UNSET, title="User")
    url: str = Field()


class WebhookReleaseEditedPropReleasePropAssetsItemsPropUploader(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookReleaseEditedPropReleasePropAuthor(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookReleaseEditedPropReleasePropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookReleasePrereleased(GitHubModel):
    """release prereleased event"""

    action: Literal["prereleased"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    release: WebhookReleasePrereleasedPropRelease = Field()
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: Missing[SimpleUserWebhooks] = Field(
        default=UNSET,
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookReleasePrereleasedPropRelease(GitHubModel):
    """WebhookReleasePrereleasedPropRelease"""

    assets: List[WebhookReleasePrereleasedPropReleaseMergedAssets] = Field()
    assets_url: str = Field()
    author: WebhookReleasePrereleasedPropReleaseMergedAuthor = Field()
    body: Union[Union[str, None], None] = Field()
    created_at: datetime = Field()
    discussion_url: Missing[str] = Field(default=UNSET)
    draft: bool = Field(description="Whether the release is a draft or published")
    html_url: str = Field()
    id: int = Field()
    name: Union[Union[str, None], None] = Field()
    node_id: str = Field()
    prerelease: Literal[True] = Field(
        description="Whether the release is identified as a prerelease or a full release."
    )
    published_at: Union[datetime, None] = Field()
    reactions: Missing[WebhookReleasePrereleasedPropReleaseAllof0PropReactions] = Field(
        default=UNSET, title="Reactions"
    )
    tag_name: str = Field(description="The name of the tag.")
    tarball_url: Union[Union[str, None], None] = Field()
    target_commitish: str = Field(
        description="Specifies the commitish value that determines where the Git tag is created from."
    )
    upload_url: str = Field()
    url: str = Field()
    zipball_url: Union[Union[str, None], None] = Field()


class WebhookReleasePrereleasedPropReleaseAllof0(GitHubModel):
    """Release

    The [release](https://docs.github.com/rest/releases/releases/#get-a-release)
    object.
    """

    assets: List[WebhookReleasePrereleasedPropReleaseAllof0PropAssetsItems] = Field()
    assets_url: str = Field()
    author: Union[WebhookReleasePrereleasedPropReleaseAllof0PropAuthor, None] = Field(
        title="User"
    )
    body: Union[str, None] = Field()
    created_at: Union[datetime, None] = Field()
    discussion_url: Missing[str] = Field(default=UNSET)
    draft: bool = Field(description="Whether the release is a draft or published")
    html_url: str = Field()
    id: int = Field()
    name: Union[str, None] = Field()
    node_id: str = Field()
    prerelease: bool = Field(
        description="Whether the release is identified as a prerelease or a full release."
    )
    published_at: Union[datetime, None] = Field()
    reactions: Missing[WebhookReleasePrereleasedPropReleaseAllof0PropReactions] = Field(
        default=UNSET, title="Reactions"
    )
    tag_name: str = Field(description="The name of the tag.")
    tarball_url: Union[str, None] = Field()
    target_commitish: str = Field(
        description="Specifies the commitish value that determines where the Git tag is created from."
    )
    upload_url: str = Field()
    url: str = Field()
    zipball_url: Union[str, None] = Field()


class WebhookReleasePrereleasedPropReleaseAllof0PropAssetsItems(GitHubModel):
    """Release Asset

    Data related to a release.
    """

    browser_download_url: str = Field()
    content_type: str = Field()
    created_at: datetime = Field()
    download_count: int = Field()
    id: int = Field()
    label: Union[str, None] = Field()
    name: str = Field(description="The file name of the asset.")
    node_id: str = Field()
    size: int = Field()
    state: Literal["uploaded"] = Field(description="State of the release asset.")
    updated_at: datetime = Field()
    uploader: Missing[
        Union[
            WebhookReleasePrereleasedPropReleaseAllof0PropAssetsItemsPropUploader, None
        ]
    ] = Field(default=UNSET, title="User")
    url: str = Field()


class WebhookReleasePrereleasedPropReleaseAllof0PropAssetsItemsPropUploader(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookReleasePrereleasedPropReleaseAllof0PropAuthor(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookReleasePrereleasedPropReleaseAllof0PropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookReleasePrereleasedPropReleaseAllof1(GitHubModel):
    """WebhookReleasePrereleasedPropReleaseAllof1"""

    assets: Missing[
        List[Union[WebhookReleasePrereleasedPropReleaseAllof1PropAssetsItems, None]]
    ] = Field(default=UNSET)
    assets_url: Missing[str] = Field(default=UNSET)
    author: Missing[WebhookReleasePrereleasedPropReleaseAllof1PropAuthor] = Field(
        default=UNSET
    )
    body: Missing[Union[str, None]] = Field(default=UNSET)
    created_at: Missing[str] = Field(default=UNSET)
    draft: Missing[bool] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    name: Missing[Union[str, None]] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    prerelease: Literal[True] = Field(
        description="Whether the release is identified as a prerelease or a full release."
    )
    published_at: Missing[Union[str, None]] = Field(default=UNSET)
    tag_name: Missing[str] = Field(default=UNSET)
    tarball_url: Missing[Union[str, None]] = Field(default=UNSET)
    target_commitish: Missing[str] = Field(default=UNSET)
    upload_url: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)
    zipball_url: Missing[Union[str, None]] = Field(default=UNSET)


class WebhookReleasePrereleasedPropReleaseAllof1PropAssetsItems(GitHubModel):
    """WebhookReleasePrereleasedPropReleaseAllof1PropAssetsItems"""


class WebhookReleasePrereleasedPropReleaseAllof1PropAuthor(GitHubModel):
    """WebhookReleasePrereleasedPropReleaseAllof1PropAuthor"""

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookReleasePrereleasedPropReleaseMergedAssets(GitHubModel):
    """WebhookReleasePrereleasedPropReleaseMergedAssets"""

    browser_download_url: str = Field()
    content_type: str = Field()
    created_at: datetime = Field()
    download_count: int = Field()
    id: int = Field()
    label: Union[str, None] = Field()
    name: str = Field(description="The file name of the asset.")
    node_id: str = Field()
    size: int = Field()
    state: Literal["uploaded"] = Field(description="State of the release asset.")
    updated_at: datetime = Field()
    uploader: Missing[
        Union[
            WebhookReleasePrereleasedPropReleaseAllof0PropAssetsItemsPropUploader, None
        ]
    ] = Field(default=UNSET, title="User")
    url: str = Field()


class WebhookReleasePrereleasedPropReleaseMergedAuthor(GitHubModel):
    """WebhookReleasePrereleasedPropReleaseMergedAuthor"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookReleasePublished(GitHubModel):
    """release published event"""

    action: Literal["published"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    release: WebhookReleasePublishedPropRelease = Field()
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: Missing[SimpleUserWebhooks] = Field(
        default=UNSET,
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookReleasePublishedPropRelease(GitHubModel):
    """WebhookReleasePublishedPropRelease"""

    assets: List[WebhookReleasePublishedPropReleaseMergedAssets] = Field()
    assets_url: str = Field()
    author: WebhookReleasePublishedPropReleaseMergedAuthor = Field()
    body: Union[Union[str, None], None] = Field()
    created_at: datetime = Field()
    discussion_url: Missing[str] = Field(default=UNSET)
    draft: bool = Field(description="Whether the release is a draft or published")
    html_url: str = Field()
    id: int = Field()
    name: Union[Union[str, None], None] = Field()
    node_id: str = Field()
    prerelease: bool = Field(
        description="Whether the release is identified as a prerelease or a full release."
    )
    published_at: Union[Union[datetime, None], None] = Field()
    reactions: Missing[WebhookReleasePublishedPropReleaseAllof0PropReactions] = Field(
        default=UNSET, title="Reactions"
    )
    tag_name: str = Field(description="The name of the tag.")
    tarball_url: Union[Union[str, None], None] = Field()
    target_commitish: str = Field(
        description="Specifies the commitish value that determines where the Git tag is created from."
    )
    upload_url: str = Field()
    url: str = Field()
    zipball_url: Union[Union[str, None], None] = Field()


class WebhookReleasePublishedPropReleaseAllof0(GitHubModel):
    """Release

    The [release](https://docs.github.com/rest/releases/releases/#get-a-release)
    object.
    """

    assets: List[WebhookReleasePublishedPropReleaseAllof0PropAssetsItems] = Field()
    assets_url: str = Field()
    author: Union[WebhookReleasePublishedPropReleaseAllof0PropAuthor, None] = Field(
        title="User"
    )
    body: Union[str, None] = Field()
    created_at: Union[datetime, None] = Field()
    discussion_url: Missing[str] = Field(default=UNSET)
    draft: bool = Field(description="Whether the release is a draft or published")
    html_url: str = Field()
    id: int = Field()
    name: Union[str, None] = Field()
    node_id: str = Field()
    prerelease: bool = Field(
        description="Whether the release is identified as a prerelease or a full release."
    )
    published_at: Union[datetime, None] = Field()
    reactions: Missing[WebhookReleasePublishedPropReleaseAllof0PropReactions] = Field(
        default=UNSET, title="Reactions"
    )
    tag_name: str = Field(description="The name of the tag.")
    tarball_url: Union[str, None] = Field()
    target_commitish: str = Field(
        description="Specifies the commitish value that determines where the Git tag is created from."
    )
    upload_url: str = Field()
    url: str = Field()
    zipball_url: Union[str, None] = Field()


class WebhookReleasePublishedPropReleaseAllof0PropAssetsItems(GitHubModel):
    """Release Asset

    Data related to a release.
    """

    browser_download_url: str = Field()
    content_type: str = Field()
    created_at: datetime = Field()
    download_count: int = Field()
    id: int = Field()
    label: Union[str, None] = Field()
    name: str = Field(description="The file name of the asset.")
    node_id: str = Field()
    size: int = Field()
    state: Literal["uploaded"] = Field(description="State of the release asset.")
    updated_at: datetime = Field()
    uploader: Missing[
        Union[WebhookReleasePublishedPropReleaseAllof0PropAssetsItemsPropUploader, None]
    ] = Field(default=UNSET, title="User")
    url: str = Field()


class WebhookReleasePublishedPropReleaseAllof0PropAssetsItemsPropUploader(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookReleasePublishedPropReleaseAllof0PropAuthor(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookReleasePublishedPropReleaseAllof0PropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookReleasePublishedPropReleaseAllof1(GitHubModel):
    """WebhookReleasePublishedPropReleaseAllof1"""

    assets: Missing[
        List[Union[WebhookReleasePublishedPropReleaseAllof1PropAssetsItems, None]]
    ] = Field(default=UNSET)
    assets_url: Missing[str] = Field(default=UNSET)
    author: Missing[WebhookReleasePublishedPropReleaseAllof1PropAuthor] = Field(
        default=UNSET
    )
    body: Missing[Union[str, None]] = Field(default=UNSET)
    created_at: Missing[str] = Field(default=UNSET)
    draft: Missing[bool] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    name: Missing[Union[str, None]] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    prerelease: Missing[bool] = Field(default=UNSET)
    published_at: Union[datetime, None] = Field()
    tag_name: Missing[str] = Field(default=UNSET)
    tarball_url: Missing[Union[str, None]] = Field(default=UNSET)
    target_commitish: Missing[str] = Field(default=UNSET)
    upload_url: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)
    zipball_url: Missing[Union[str, None]] = Field(default=UNSET)


class WebhookReleasePublishedPropReleaseAllof1PropAssetsItems(GitHubModel):
    """WebhookReleasePublishedPropReleaseAllof1PropAssetsItems"""


class WebhookReleasePublishedPropReleaseAllof1PropAuthor(GitHubModel):
    """WebhookReleasePublishedPropReleaseAllof1PropAuthor"""

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookReleasePublishedPropReleaseMergedAssets(GitHubModel):
    """WebhookReleasePublishedPropReleaseMergedAssets"""

    browser_download_url: str = Field()
    content_type: str = Field()
    created_at: datetime = Field()
    download_count: int = Field()
    id: int = Field()
    label: Union[str, None] = Field()
    name: str = Field(description="The file name of the asset.")
    node_id: str = Field()
    size: int = Field()
    state: Literal["uploaded"] = Field(description="State of the release asset.")
    updated_at: datetime = Field()
    uploader: Missing[
        Union[WebhookReleasePublishedPropReleaseAllof0PropAssetsItemsPropUploader, None]
    ] = Field(default=UNSET, title="User")
    url: str = Field()


class WebhookReleasePublishedPropReleaseMergedAuthor(GitHubModel):
    """WebhookReleasePublishedPropReleaseMergedAuthor"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookReleaseReleased(GitHubModel):
    """release released event"""

    action: Literal["released"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    release: WebhookReleaseReleasedPropRelease = Field(
        title="Release",
        description="The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: Missing[SimpleUserWebhooks] = Field(
        default=UNSET,
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookReleaseReleasedPropRelease(GitHubModel):
    """Release

    The [release](https://docs.github.com/rest/releases/releases/#get-a-release)
    object.
    """

    assets: List[WebhookReleaseReleasedPropReleasePropAssetsItems] = Field()
    assets_url: str = Field()
    author: Union[WebhookReleaseReleasedPropReleasePropAuthor, None] = Field(
        title="User"
    )
    body: Union[str, None] = Field()
    created_at: Union[datetime, None] = Field()
    discussion_url: Missing[str] = Field(default=UNSET)
    draft: bool = Field(description="Whether the release is a draft or published")
    html_url: str = Field()
    id: int = Field()
    name: Union[str, None] = Field()
    node_id: str = Field()
    prerelease: bool = Field(
        description="Whether the release is identified as a prerelease or a full release."
    )
    published_at: Union[datetime, None] = Field()
    reactions: Missing[WebhookReleaseReleasedPropReleasePropReactions] = Field(
        default=UNSET, title="Reactions"
    )
    tag_name: str = Field(description="The name of the tag.")
    tarball_url: Union[str, None] = Field()
    target_commitish: str = Field(
        description="Specifies the commitish value that determines where the Git tag is created from."
    )
    upload_url: str = Field()
    url: str = Field()
    zipball_url: Union[str, None] = Field()


class WebhookReleaseReleasedPropReleasePropAssetsItems(GitHubModel):
    """Release Asset

    Data related to a release.
    """

    browser_download_url: str = Field()
    content_type: str = Field()
    created_at: datetime = Field()
    download_count: int = Field()
    id: int = Field()
    label: Union[str, None] = Field()
    name: str = Field(description="The file name of the asset.")
    node_id: str = Field()
    size: int = Field()
    state: Literal["uploaded"] = Field(description="State of the release asset.")
    updated_at: datetime = Field()
    uploader: Missing[
        Union[WebhookReleaseReleasedPropReleasePropAssetsItemsPropUploader, None]
    ] = Field(default=UNSET, title="User")
    url: str = Field()


class WebhookReleaseReleasedPropReleasePropAssetsItemsPropUploader(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookReleaseReleasedPropReleasePropAuthor(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookReleaseReleasedPropReleasePropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookReleaseUnpublished(GitHubModel):
    """release unpublished event"""

    action: Literal["unpublished"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    release: WebhookReleaseUnpublishedPropRelease = Field()
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: Missing[SimpleUserWebhooks] = Field(
        default=UNSET,
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookReleaseUnpublishedPropRelease(GitHubModel):
    """WebhookReleaseUnpublishedPropRelease"""

    assets: List[WebhookReleaseUnpublishedPropReleaseMergedAssets] = Field()
    assets_url: str = Field()
    author: WebhookReleaseUnpublishedPropReleaseMergedAuthor = Field()
    body: Union[Union[str, None], None] = Field()
    created_at: datetime = Field()
    discussion_url: Missing[str] = Field(default=UNSET)
    draft: bool = Field(description="Whether the release is a draft or published")
    html_url: str = Field()
    id: int = Field()
    name: Union[Union[str, None], None] = Field()
    node_id: str = Field()
    prerelease: bool = Field(
        description="Whether the release is identified as a prerelease or a full release."
    )
    published_at: Union[datetime, None] = Field()
    reactions: Missing[WebhookReleaseUnpublishedPropReleaseAllof0PropReactions] = Field(
        default=UNSET, title="Reactions"
    )
    tag_name: str = Field(description="The name of the tag.")
    tarball_url: Union[Union[str, None], None] = Field()
    target_commitish: str = Field(
        description="Specifies the commitish value that determines where the Git tag is created from."
    )
    upload_url: str = Field()
    url: str = Field()
    zipball_url: Union[Union[str, None], None] = Field()


class WebhookReleaseUnpublishedPropReleaseAllof0(GitHubModel):
    """Release

    The [release](https://docs.github.com/rest/releases/releases/#get-a-release)
    object.
    """

    assets: List[WebhookReleaseUnpublishedPropReleaseAllof0PropAssetsItems] = Field()
    assets_url: str = Field()
    author: Union[WebhookReleaseUnpublishedPropReleaseAllof0PropAuthor, None] = Field(
        title="User"
    )
    body: Union[str, None] = Field()
    created_at: Union[datetime, None] = Field()
    discussion_url: Missing[str] = Field(default=UNSET)
    draft: bool = Field(description="Whether the release is a draft or published")
    html_url: str = Field()
    id: int = Field()
    name: Union[str, None] = Field()
    node_id: str = Field()
    prerelease: bool = Field(
        description="Whether the release is identified as a prerelease or a full release."
    )
    published_at: Union[datetime, None] = Field()
    reactions: Missing[WebhookReleaseUnpublishedPropReleaseAllof0PropReactions] = Field(
        default=UNSET, title="Reactions"
    )
    tag_name: str = Field(description="The name of the tag.")
    tarball_url: Union[str, None] = Field()
    target_commitish: str = Field(
        description="Specifies the commitish value that determines where the Git tag is created from."
    )
    upload_url: str = Field()
    url: str = Field()
    zipball_url: Union[str, None] = Field()


class WebhookReleaseUnpublishedPropReleaseAllof0PropAssetsItems(GitHubModel):
    """Release Asset

    Data related to a release.
    """

    browser_download_url: str = Field()
    content_type: str = Field()
    created_at: datetime = Field()
    download_count: int = Field()
    id: int = Field()
    label: Union[str, None] = Field()
    name: str = Field(description="The file name of the asset.")
    node_id: str = Field()
    size: int = Field()
    state: Literal["uploaded"] = Field(description="State of the release asset.")
    updated_at: datetime = Field()
    uploader: Missing[
        Union[
            WebhookReleaseUnpublishedPropReleaseAllof0PropAssetsItemsPropUploader, None
        ]
    ] = Field(default=UNSET, title="User")
    url: str = Field()


class WebhookReleaseUnpublishedPropReleaseAllof0PropAssetsItemsPropUploader(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookReleaseUnpublishedPropReleaseAllof0PropAuthor(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookReleaseUnpublishedPropReleaseAllof0PropReactions(GitHubModel):
    """Reactions"""

    plus_one: int = Field(alias="+1")
    minus_one: int = Field(alias="-1")
    confused: int = Field()
    eyes: int = Field()
    heart: int = Field()
    hooray: int = Field()
    laugh: int = Field()
    rocket: int = Field()
    total_count: int = Field()
    url: str = Field()


class WebhookReleaseUnpublishedPropReleaseAllof1(GitHubModel):
    """WebhookReleaseUnpublishedPropReleaseAllof1"""

    assets: Missing[
        List[Union[WebhookReleaseUnpublishedPropReleaseAllof1PropAssetsItems, None]]
    ] = Field(default=UNSET)
    assets_url: Missing[str] = Field(default=UNSET)
    author: Missing[WebhookReleaseUnpublishedPropReleaseAllof1PropAuthor] = Field(
        default=UNSET
    )
    body: Missing[Union[str, None]] = Field(default=UNSET)
    created_at: Missing[str] = Field(default=UNSET)
    draft: Missing[bool] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    name: Missing[Union[str, None]] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    prerelease: Missing[bool] = Field(default=UNSET)
    published_at: Union[str, None] = Field()
    tag_name: Missing[str] = Field(default=UNSET)
    tarball_url: Missing[Union[str, None]] = Field(default=UNSET)
    target_commitish: Missing[str] = Field(default=UNSET)
    upload_url: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)
    zipball_url: Missing[Union[str, None]] = Field(default=UNSET)


class WebhookReleaseUnpublishedPropReleaseAllof1PropAssetsItems(GitHubModel):
    """WebhookReleaseUnpublishedPropReleaseAllof1PropAssetsItems"""


class WebhookReleaseUnpublishedPropReleaseAllof1PropAuthor(GitHubModel):
    """WebhookReleaseUnpublishedPropReleaseAllof1PropAuthor"""

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookReleaseUnpublishedPropReleaseMergedAssets(GitHubModel):
    """WebhookReleaseUnpublishedPropReleaseMergedAssets"""

    browser_download_url: str = Field()
    content_type: str = Field()
    created_at: datetime = Field()
    download_count: int = Field()
    id: int = Field()
    label: Union[str, None] = Field()
    name: str = Field(description="The file name of the asset.")
    node_id: str = Field()
    size: int = Field()
    state: Literal["uploaded"] = Field(description="State of the release asset.")
    updated_at: datetime = Field()
    uploader: Missing[
        Union[
            WebhookReleaseUnpublishedPropReleaseAllof0PropAssetsItemsPropUploader, None
        ]
    ] = Field(default=UNSET, title="User")
    url: str = Field()


class WebhookReleaseUnpublishedPropReleaseMergedAuthor(GitHubModel):
    """WebhookReleaseUnpublishedPropReleaseMergedAuthor"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookRepositoryAdvisoryPublished(GitHubModel):
    """Repository advisory published event"""

    action: Literal["published"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    repository_advisory: RepositoryAdvisory = Field(
        description="A repository security advisory."
    )
    sender: Missing[SimpleUserWebhooks] = Field(
        default=UNSET,
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookRepositoryAdvisoryReported(GitHubModel):
    """Repository advisory reported event"""

    action: Literal["reported"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    repository_advisory: RepositoryAdvisory = Field(
        description="A repository security advisory."
    )
    sender: Missing[SimpleUserWebhooks] = Field(
        default=UNSET,
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookRepositoryArchived(GitHubModel):
    """repository archived event"""

    action: Literal["archived"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookRepositoryCreated(GitHubModel):
    """repository created event"""

    action: Literal["created"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookRepositoryDeleted(GitHubModel):
    """repository deleted event"""

    action: Literal["deleted"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookRepositoryDispatchSample(GitHubModel):
    """repository_dispatch event"""

    action: Literal["sample.collected"] = Field()
    branch: str = Field()
    client_payload: Union[
        WebhookRepositoryDispatchSamplePropClientPayload, None
    ] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: SimpleInstallation = Field(
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookRepositoryDispatchSamplePropClientPayload(ExtraGitHubModel):
    """WebhookRepositoryDispatchSamplePropClientPayload"""


class WebhookRepositoryEdited(GitHubModel):
    """repository edited event"""

    action: Literal["edited"] = Field()
    changes: WebhookRepositoryEditedPropChanges = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookRepositoryEditedPropChanges(GitHubModel):
    """WebhookRepositoryEditedPropChanges"""

    default_branch: Missing[
        WebhookRepositoryEditedPropChangesPropDefaultBranch
    ] = Field(default=UNSET)
    description: Missing[WebhookRepositoryEditedPropChangesPropDescription] = Field(
        default=UNSET
    )
    homepage: Missing[WebhookRepositoryEditedPropChangesPropHomepage] = Field(
        default=UNSET
    )
    topics: Missing[WebhookRepositoryEditedPropChangesPropTopics] = Field(default=UNSET)


class WebhookRepositoryEditedPropChangesPropDefaultBranch(GitHubModel):
    """WebhookRepositoryEditedPropChangesPropDefaultBranch"""

    from_: str = Field(alias="from")


class WebhookRepositoryEditedPropChangesPropDescription(GitHubModel):
    """WebhookRepositoryEditedPropChangesPropDescription"""

    from_: Union[str, None] = Field(alias="from")


class WebhookRepositoryEditedPropChangesPropHomepage(GitHubModel):
    """WebhookRepositoryEditedPropChangesPropHomepage"""

    from_: Union[str, None] = Field(alias="from")


class WebhookRepositoryEditedPropChangesPropTopics(GitHubModel):
    """WebhookRepositoryEditedPropChangesPropTopics"""

    from_: Missing[Union[List[str], None]] = Field(default=UNSET, alias="from")


class WebhookRepositoryImport(GitHubModel):
    """repository_import event"""

    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )
    status: Literal["success", "cancelled", "failure"] = Field()


class WebhookRepositoryPrivatized(GitHubModel):
    """repository privatized event"""

    action: Literal["privatized"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookRepositoryPublicized(GitHubModel):
    """repository publicized event"""

    action: Literal["publicized"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookRepositoryRenamed(GitHubModel):
    """repository renamed event"""

    action: Literal["renamed"] = Field()
    changes: WebhookRepositoryRenamedPropChanges = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookRepositoryRenamedPropChanges(GitHubModel):
    """WebhookRepositoryRenamedPropChanges"""

    repository: WebhookRepositoryRenamedPropChangesPropRepository = Field()


class WebhookRepositoryRenamedPropChangesPropRepository(GitHubModel):
    """WebhookRepositoryRenamedPropChangesPropRepository"""

    name: WebhookRepositoryRenamedPropChangesPropRepositoryPropName = Field()


class WebhookRepositoryRenamedPropChangesPropRepositoryPropName(GitHubModel):
    """WebhookRepositoryRenamedPropChangesPropRepositoryPropName"""

    from_: str = Field(alias="from")


class WebhookRepositoryRulesetCreated(GitHubModel):
    """repository ruleset created event"""

    action: Literal["created"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    repository_ruleset: RepositoryRuleset = Field(
        title="Repository ruleset",
        description="A set of rules to apply when specified conditions are met.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookRepositoryRulesetDeleted(GitHubModel):
    """repository ruleset deleted event"""

    action: Literal["deleted"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    repository_ruleset: RepositoryRuleset = Field(
        title="Repository ruleset",
        description="A set of rules to apply when specified conditions are met.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookRepositoryRulesetEdited(GitHubModel):
    """repository ruleset edited event"""

    action: Literal["edited"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    repository_ruleset: RepositoryRuleset = Field(
        title="Repository ruleset",
        description="A set of rules to apply when specified conditions are met.",
    )
    changes: Missing[WebhookRepositoryRulesetEditedPropChanges] = Field(default=UNSET)
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookRepositoryRulesetEditedPropChanges(GitHubModel):
    """WebhookRepositoryRulesetEditedPropChanges"""

    name: Missing[WebhookRepositoryRulesetEditedPropChangesPropName] = Field(
        default=UNSET
    )
    enforcement: Missing[
        WebhookRepositoryRulesetEditedPropChangesPropEnforcement
    ] = Field(default=UNSET)
    conditions: Missing[
        WebhookRepositoryRulesetEditedPropChangesPropConditions
    ] = Field(default=UNSET)
    rules: Missing[WebhookRepositoryRulesetEditedPropChangesPropRules] = Field(
        default=UNSET
    )


class WebhookRepositoryRulesetEditedPropChangesPropName(GitHubModel):
    """WebhookRepositoryRulesetEditedPropChangesPropName"""

    from_: Missing[str] = Field(default=UNSET, alias="from")


class WebhookRepositoryRulesetEditedPropChangesPropEnforcement(GitHubModel):
    """WebhookRepositoryRulesetEditedPropChangesPropEnforcement"""

    from_: Missing[str] = Field(default=UNSET, alias="from")


class WebhookRepositoryRulesetEditedPropChangesPropConditions(GitHubModel):
    """WebhookRepositoryRulesetEditedPropChangesPropConditions"""

    added: Missing[List[RepositoryRulesetConditions]] = Field(default=UNSET)
    deleted: Missing[List[RepositoryRulesetConditions]] = Field(default=UNSET)
    updated: Missing[
        List[WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItems]
    ] = Field(default=UNSET)


class WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItems(
    GitHubModel
):
    """WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItems"""

    condition: Missing[RepositoryRulesetConditions] = Field(
        default=UNSET,
        title="Repository ruleset conditions for ref names",
        description="Parameters for a repository ruleset ref name condition",
    )
    changes: Missing[
        WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChanges
    ] = Field(default=UNSET)


class WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChanges(
    GitHubModel
):
    """WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChang
    es
    """

    condition_type: Missing[
        WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChangesPropConditionType
    ] = Field(default=UNSET)
    target: Missing[
        WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChangesPropTarget
    ] = Field(default=UNSET)
    include: Missing[
        WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChangesPropInclude
    ] = Field(default=UNSET)
    exclude: Missing[
        WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChangesPropExclude
    ] = Field(default=UNSET)


class WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChangesPropConditionType(
    GitHubModel
):
    """WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChang
    esPropConditionType
    """

    from_: Missing[str] = Field(default=UNSET, alias="from")


class WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChangesPropTarget(
    GitHubModel
):
    """WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChang
    esPropTarget
    """

    from_: Missing[str] = Field(default=UNSET, alias="from")


class WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChangesPropInclude(
    GitHubModel
):
    """WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChang
    esPropInclude
    """

    from_: Missing[List[str]] = Field(default=UNSET, alias="from")


class WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChangesPropExclude(
    GitHubModel
):
    """WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChang
    esPropExclude
    """

    from_: Missing[List[str]] = Field(default=UNSET, alias="from")


class WebhookRepositoryRulesetEditedPropChangesPropRules(GitHubModel):
    """WebhookRepositoryRulesetEditedPropChangesPropRules"""

    added: Missing[
        List[
            Union[
                RepositoryRuleCreation,
                RepositoryRuleUpdate,
                RepositoryRuleDeletion,
                RepositoryRuleRequiredLinearHistory,
                RepositoryRuleRequiredDeployments,
                RepositoryRuleRequiredSignatures,
                RepositoryRulePullRequest,
                RepositoryRuleRequiredStatusChecks,
                RepositoryRuleNonFastForward,
                RepositoryRuleCommitMessagePattern,
                RepositoryRuleCommitAuthorEmailPattern,
                RepositoryRuleCommitterEmailPattern,
                RepositoryRuleBranchNamePattern,
                RepositoryRuleTagNamePattern,
                RepositoryRuleWorkflows,
            ]
        ]
    ] = Field(default=UNSET)
    deleted: Missing[
        List[
            Union[
                RepositoryRuleCreation,
                RepositoryRuleUpdate,
                RepositoryRuleDeletion,
                RepositoryRuleRequiredLinearHistory,
                RepositoryRuleRequiredDeployments,
                RepositoryRuleRequiredSignatures,
                RepositoryRulePullRequest,
                RepositoryRuleRequiredStatusChecks,
                RepositoryRuleNonFastForward,
                RepositoryRuleCommitMessagePattern,
                RepositoryRuleCommitAuthorEmailPattern,
                RepositoryRuleCommitterEmailPattern,
                RepositoryRuleBranchNamePattern,
                RepositoryRuleTagNamePattern,
                RepositoryRuleWorkflows,
            ]
        ]
    ] = Field(default=UNSET)
    updated: Missing[
        List[WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItems]
    ] = Field(default=UNSET)


class WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItems(GitHubModel):
    """WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItems"""

    rule: Missing[
        Union[
            RepositoryRuleCreation,
            RepositoryRuleUpdate,
            RepositoryRuleDeletion,
            RepositoryRuleRequiredLinearHistory,
            RepositoryRuleRequiredDeployments,
            RepositoryRuleRequiredSignatures,
            RepositoryRulePullRequest,
            RepositoryRuleRequiredStatusChecks,
            RepositoryRuleNonFastForward,
            RepositoryRuleCommitMessagePattern,
            RepositoryRuleCommitAuthorEmailPattern,
            RepositoryRuleCommitterEmailPattern,
            RepositoryRuleBranchNamePattern,
            RepositoryRuleTagNamePattern,
            RepositoryRuleWorkflows,
        ]
    ] = Field(default=UNSET, title="Repository Rule", description="A repository rule.")
    changes: Missing[
        WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItemsPropChanges
    ] = Field(default=UNSET)


class WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItemsPropChanges(
    GitHubModel
):
    """WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItemsPropChanges"""

    configuration: Missing[
        WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItemsPropChangesPropConfiguration
    ] = Field(default=UNSET)
    rule_type: Missing[
        WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItemsPropChangesPropRuleType
    ] = Field(default=UNSET)
    pattern: Missing[
        WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItemsPropChangesPropPattern
    ] = Field(default=UNSET)


class WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItemsPropChangesPropConfiguration(
    GitHubModel
):
    """WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItemsPropChangesPro
    pConfiguration
    """

    from_: Missing[str] = Field(default=UNSET, alias="from")


class WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItemsPropChangesPropRuleType(
    GitHubModel
):
    """WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItemsPropChangesPro
    pRuleType
    """

    from_: Missing[str] = Field(default=UNSET, alias="from")


class WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItemsPropChangesPropPattern(
    GitHubModel
):
    """WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItemsPropChangesPro
    pPattern
    """

    from_: Missing[str] = Field(default=UNSET, alias="from")


class WebhookRepositoryTransferred(GitHubModel):
    """repository transferred event"""

    action: Literal["transferred"] = Field()
    changes: WebhookRepositoryTransferredPropChanges = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookRepositoryTransferredPropChanges(GitHubModel):
    """WebhookRepositoryTransferredPropChanges"""

    owner: WebhookRepositoryTransferredPropChangesPropOwner = Field()


class WebhookRepositoryTransferredPropChangesPropOwner(GitHubModel):
    """WebhookRepositoryTransferredPropChangesPropOwner"""

    from_: WebhookRepositoryTransferredPropChangesPropOwnerPropFrom = Field(
        alias="from"
    )


class WebhookRepositoryTransferredPropChangesPropOwnerPropFrom(GitHubModel):
    """WebhookRepositoryTransferredPropChangesPropOwnerPropFrom"""

    organization: Missing[
        WebhookRepositoryTransferredPropChangesPropOwnerPropFromPropOrganization
    ] = Field(default=UNSET, title="Organization")
    user: Missing[
        Union[WebhookRepositoryTransferredPropChangesPropOwnerPropFromPropUser, None]
    ] = Field(default=UNSET, title="User")


class WebhookRepositoryTransferredPropChangesPropOwnerPropFromPropOrganization(
    GitHubModel
):
    """Organization"""

    avatar_url: str = Field()
    description: Union[str, None] = Field()
    events_url: str = Field()
    hooks_url: str = Field()
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    issues_url: str = Field()
    login: str = Field()
    members_url: str = Field()
    node_id: str = Field()
    public_members_url: str = Field()
    repos_url: str = Field()
    url: str = Field()


class WebhookRepositoryTransferredPropChangesPropOwnerPropFromPropUser(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookRepositoryUnarchived(GitHubModel):
    """repository unarchived event"""

    action: Literal["unarchived"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookRepositoryVulnerabilityAlertCreate(GitHubModel):
    """repository_vulnerability_alert create event"""

    action: Literal["create"] = Field()
    alert: WebhookRepositoryVulnerabilityAlertCreatePropAlert = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookRepositoryVulnerabilityAlertCreatePropAlert(GitHubModel):
    """WebhookRepositoryVulnerabilityAlertCreatePropAlert"""

    affected_package_name: str = Field()
    affected_range: str = Field()
    created_at: str = Field()
    dismiss_reason: Missing[str] = Field(default=UNSET)
    dismissed_at: Missing[str] = Field(default=UNSET)
    dismisser: Missing[
        Union[
            WebhookRepositoryVulnerabilityAlertCreatePropAlertAllof0PropDismisser, None
        ]
    ] = Field(default=UNSET, title="User")
    external_identifier: str = Field()
    external_reference: Union[Union[str, None], None] = Field()
    fix_reason: Missing[str] = Field(default=UNSET)
    fixed_at: Missing[datetime] = Field(default=UNSET)
    fixed_in: Missing[str] = Field(default=UNSET)
    ghsa_id: str = Field()
    id: int = Field()
    node_id: str = Field()
    number: int = Field()
    severity: str = Field()
    state: Literal["open"] = Field()


class WebhookRepositoryVulnerabilityAlertCreatePropAlertAllof0(GitHubModel):
    """Repository Vulnerability Alert Alert

    The security alert of the vulnerable dependency.
    """

    affected_package_name: str = Field()
    affected_range: str = Field()
    created_at: str = Field()
    dismiss_reason: Missing[str] = Field(default=UNSET)
    dismissed_at: Missing[str] = Field(default=UNSET)
    dismisser: Missing[
        Union[
            WebhookRepositoryVulnerabilityAlertCreatePropAlertAllof0PropDismisser, None
        ]
    ] = Field(default=UNSET, title="User")
    external_identifier: str = Field()
    external_reference: Union[str, None] = Field()
    fix_reason: Missing[str] = Field(default=UNSET)
    fixed_at: Missing[datetime] = Field(default=UNSET)
    fixed_in: Missing[str] = Field(default=UNSET)
    ghsa_id: str = Field()
    id: int = Field()
    node_id: str = Field()
    number: int = Field()
    severity: str = Field()
    state: Literal["open", "dismissed", "fixed"] = Field()


class WebhookRepositoryVulnerabilityAlertCreatePropAlertAllof0PropDismisser(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookRepositoryVulnerabilityAlertCreatePropAlertAllof1(GitHubModel):
    """WebhookRepositoryVulnerabilityAlertCreatePropAlertAllof1"""

    affected_package_name: Missing[str] = Field(default=UNSET)
    affected_range: Missing[str] = Field(default=UNSET)
    created_at: Missing[str] = Field(default=UNSET)
    external_identifier: Missing[str] = Field(default=UNSET)
    external_reference: Missing[Union[str, None]] = Field(default=UNSET)
    fixed_in: Missing[str] = Field(default=UNSET)
    ghsa_id: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    number: Missing[int] = Field(default=UNSET)
    severity: Missing[str] = Field(default=UNSET)
    state: Literal["open"] = Field()


class WebhookRepositoryVulnerabilityAlertDismiss(GitHubModel):
    """repository_vulnerability_alert dismiss event"""

    action: Literal["dismiss"] = Field()
    alert: WebhookRepositoryVulnerabilityAlertDismissPropAlert = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookRepositoryVulnerabilityAlertDismissPropAlert(GitHubModel):
    """WebhookRepositoryVulnerabilityAlertDismissPropAlert"""

    affected_package_name: str = Field()
    affected_range: str = Field()
    created_at: str = Field()
    dismiss_comment: Missing[Union[Union[str, None], None]] = Field(default=UNSET)
    dismiss_reason: str = Field()
    dismissed_at: str = Field()
    dismisser: Union[
        Union[
            WebhookRepositoryVulnerabilityAlertDismissPropAlertAllof0PropDismisser, None
        ],
        None,
    ] = Field(title="User")
    external_identifier: str = Field()
    external_reference: Union[Union[str, None], None] = Field()
    fix_reason: Missing[str] = Field(default=UNSET)
    fixed_at: Missing[datetime] = Field(default=UNSET)
    fixed_in: Missing[str] = Field(default=UNSET)
    ghsa_id: str = Field()
    id: int = Field()
    node_id: str = Field()
    number: int = Field()
    severity: str = Field()
    state: Literal["dismissed"] = Field()


class WebhookRepositoryVulnerabilityAlertDismissPropAlertAllof0(GitHubModel):
    """Repository Vulnerability Alert Alert

    The security alert of the vulnerable dependency.
    """

    affected_package_name: str = Field()
    affected_range: str = Field()
    created_at: str = Field()
    dismiss_comment: Missing[Union[str, None]] = Field(default=UNSET)
    dismiss_reason: Missing[str] = Field(default=UNSET)
    dismissed_at: Missing[str] = Field(default=UNSET)
    dismisser: Missing[
        Union[
            WebhookRepositoryVulnerabilityAlertDismissPropAlertAllof0PropDismisser, None
        ]
    ] = Field(default=UNSET, title="User")
    external_identifier: str = Field()
    external_reference: Union[str, None] = Field()
    fix_reason: Missing[str] = Field(default=UNSET)
    fixed_at: Missing[datetime] = Field(default=UNSET)
    fixed_in: Missing[str] = Field(default=UNSET)
    ghsa_id: str = Field()
    id: int = Field()
    node_id: str = Field()
    number: int = Field()
    severity: str = Field()
    state: Literal["open", "dismissed", "fixed"] = Field()


class WebhookRepositoryVulnerabilityAlertDismissPropAlertAllof0PropDismisser(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookRepositoryVulnerabilityAlertDismissPropAlertAllof1(GitHubModel):
    """WebhookRepositoryVulnerabilityAlertDismissPropAlertAllof1"""

    affected_package_name: Missing[str] = Field(default=UNSET)
    affected_range: Missing[str] = Field(default=UNSET)
    created_at: Missing[str] = Field(default=UNSET)
    dismiss_comment: Missing[Union[str, None]] = Field(default=UNSET)
    dismiss_reason: str = Field()
    dismissed_at: str = Field()
    dismisser: Union[
        WebhookRepositoryVulnerabilityAlertDismissPropAlertAllof1PropDismisser, None
    ] = Field(title="User")
    external_identifier: Missing[str] = Field(default=UNSET)
    external_reference: Missing[Union[str, None]] = Field(default=UNSET)
    fixed_in: Missing[str] = Field(default=UNSET)
    ghsa_id: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    number: Missing[int] = Field(default=UNSET)
    severity: Missing[str] = Field(default=UNSET)
    state: Literal["dismissed"] = Field()


class WebhookRepositoryVulnerabilityAlertDismissPropAlertAllof1PropDismisser(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookRepositoryVulnerabilityAlertReopen(GitHubModel):
    """repository_vulnerability_alert reopen event"""

    action: Literal["reopen"] = Field()
    alert: WebhookRepositoryVulnerabilityAlertReopenPropAlert = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookRepositoryVulnerabilityAlertReopenPropAlert(GitHubModel):
    """WebhookRepositoryVulnerabilityAlertReopenPropAlert"""

    affected_package_name: str = Field()
    affected_range: str = Field()
    created_at: str = Field()
    dismiss_reason: Missing[str] = Field(default=UNSET)
    dismissed_at: Missing[str] = Field(default=UNSET)
    dismisser: Missing[
        Union[
            WebhookRepositoryVulnerabilityAlertReopenPropAlertAllof0PropDismisser, None
        ]
    ] = Field(default=UNSET, title="User")
    external_identifier: str = Field()
    external_reference: Union[Union[str, None], None] = Field()
    fix_reason: Missing[str] = Field(default=UNSET)
    fixed_at: Missing[datetime] = Field(default=UNSET)
    fixed_in: Missing[str] = Field(default=UNSET)
    ghsa_id: str = Field()
    id: int = Field()
    node_id: str = Field()
    number: int = Field()
    severity: str = Field()
    state: Literal["open"] = Field()


class WebhookRepositoryVulnerabilityAlertReopenPropAlertAllof0(GitHubModel):
    """Repository Vulnerability Alert Alert

    The security alert of the vulnerable dependency.
    """

    affected_package_name: str = Field()
    affected_range: str = Field()
    created_at: str = Field()
    dismiss_reason: Missing[str] = Field(default=UNSET)
    dismissed_at: Missing[str] = Field(default=UNSET)
    dismisser: Missing[
        Union[
            WebhookRepositoryVulnerabilityAlertReopenPropAlertAllof0PropDismisser, None
        ]
    ] = Field(default=UNSET, title="User")
    external_identifier: str = Field()
    external_reference: Union[str, None] = Field()
    fix_reason: Missing[str] = Field(default=UNSET)
    fixed_at: Missing[datetime] = Field(default=UNSET)
    fixed_in: Missing[str] = Field(default=UNSET)
    ghsa_id: str = Field()
    id: int = Field()
    node_id: str = Field()
    number: int = Field()
    severity: str = Field()
    state: Literal["open", "dismissed", "fixed"] = Field()


class WebhookRepositoryVulnerabilityAlertReopenPropAlertAllof0PropDismisser(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookRepositoryVulnerabilityAlertReopenPropAlertAllof1(GitHubModel):
    """WebhookRepositoryVulnerabilityAlertReopenPropAlertAllof1"""

    affected_package_name: Missing[str] = Field(default=UNSET)
    affected_range: Missing[str] = Field(default=UNSET)
    created_at: Missing[str] = Field(default=UNSET)
    external_identifier: Missing[str] = Field(default=UNSET)
    external_reference: Missing[Union[str, None]] = Field(default=UNSET)
    fixed_in: Missing[str] = Field(default=UNSET)
    ghsa_id: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    number: Missing[int] = Field(default=UNSET)
    severity: Missing[str] = Field(default=UNSET)
    state: Literal["open"] = Field()


class WebhookRepositoryVulnerabilityAlertResolve(GitHubModel):
    """repository_vulnerability_alert resolve event"""

    action: Literal["resolve"] = Field()
    alert: WebhookRepositoryVulnerabilityAlertResolvePropAlert = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookRepositoryVulnerabilityAlertResolvePropAlert(GitHubModel):
    """WebhookRepositoryVulnerabilityAlertResolvePropAlert"""

    affected_package_name: str = Field()
    affected_range: str = Field()
    created_at: str = Field()
    dismiss_reason: Missing[str] = Field(default=UNSET)
    dismissed_at: Missing[str] = Field(default=UNSET)
    dismisser: Missing[
        Union[
            WebhookRepositoryVulnerabilityAlertResolvePropAlertAllof0PropDismisser, None
        ]
    ] = Field(default=UNSET, title="User")
    external_identifier: str = Field()
    external_reference: Union[Union[str, None], None] = Field()
    fix_reason: Missing[str] = Field(default=UNSET)
    fixed_at: Missing[datetime] = Field(default=UNSET)
    fixed_in: Missing[str] = Field(default=UNSET)
    ghsa_id: str = Field()
    id: int = Field()
    node_id: str = Field()
    number: int = Field()
    severity: str = Field()
    state: Literal["fixed", "open"] = Field()


class WebhookRepositoryVulnerabilityAlertResolvePropAlertAllof0(GitHubModel):
    """Repository Vulnerability Alert Alert

    The security alert of the vulnerable dependency.
    """

    affected_package_name: str = Field()
    affected_range: str = Field()
    created_at: str = Field()
    dismiss_reason: Missing[str] = Field(default=UNSET)
    dismissed_at: Missing[str] = Field(default=UNSET)
    dismisser: Missing[
        Union[
            WebhookRepositoryVulnerabilityAlertResolvePropAlertAllof0PropDismisser, None
        ]
    ] = Field(default=UNSET, title="User")
    external_identifier: str = Field()
    external_reference: Union[str, None] = Field()
    fix_reason: Missing[str] = Field(default=UNSET)
    fixed_at: Missing[datetime] = Field(default=UNSET)
    fixed_in: Missing[str] = Field(default=UNSET)
    ghsa_id: str = Field()
    id: int = Field()
    node_id: str = Field()
    number: int = Field()
    severity: str = Field()
    state: Literal["open", "dismissed", "fixed"] = Field()


class WebhookRepositoryVulnerabilityAlertResolvePropAlertAllof0PropDismisser(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookRepositoryVulnerabilityAlertResolvePropAlertAllof1(GitHubModel):
    """WebhookRepositoryVulnerabilityAlertResolvePropAlertAllof1"""

    affected_package_name: Missing[str] = Field(default=UNSET)
    affected_range: Missing[str] = Field(default=UNSET)
    created_at: Missing[str] = Field(default=UNSET)
    external_identifier: Missing[str] = Field(default=UNSET)
    external_reference: Missing[Union[str, None]] = Field(default=UNSET)
    fix_reason: Missing[str] = Field(default=UNSET)
    fixed_at: Missing[datetime] = Field(default=UNSET)
    fixed_in: Missing[str] = Field(default=UNSET)
    ghsa_id: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    number: Missing[int] = Field(default=UNSET)
    severity: Missing[str] = Field(default=UNSET)
    state: Literal["fixed", "open"] = Field()


class WebhookSecretScanningAlertCreated(GitHubModel):
    """secret_scanning_alert created event"""

    action: Literal["created"] = Field()
    alert: SecretScanningAlertWebhook = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: Missing[SimpleUserWebhooks] = Field(
        default=UNSET,
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookSecretScanningAlertLocationCreated(GitHubModel):
    """Secret Scanning Alert Location Created Event"""

    action: Missing[Literal["created"]] = Field(default=UNSET)
    alert: SecretScanningAlertWebhook = Field()
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    location: SecretScanningLocation = Field()
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookSecretScanningAlertLocationCreatedFormEncoded(GitHubModel):
    """Secret Scanning Alert Location Created Event"""

    payload: str = Field(
        description="A URL-encoded string of the secret_scanning_alert_location.created JSON payload. The decoded payload is a JSON object."
    )


class WebhookSecretScanningAlertReopened(GitHubModel):
    """secret_scanning_alert reopened event"""

    action: Literal["reopened"] = Field()
    alert: SecretScanningAlertWebhook = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: Missing[SimpleUserWebhooks] = Field(
        default=UNSET,
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookSecretScanningAlertResolved(GitHubModel):
    """secret_scanning_alert resolved event"""

    action: Literal["resolved"] = Field()
    alert: SecretScanningAlertWebhook = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: Missing[SimpleUserWebhooks] = Field(
        default=UNSET,
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookSecretScanningAlertRevoked(GitHubModel):
    """secret_scanning_alert revoked event"""

    action: Literal["revoked"] = Field()
    alert: SecretScanningAlertWebhook = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: Missing[SimpleUserWebhooks] = Field(
        default=UNSET,
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookSecurityAdvisoryPublished(GitHubModel):
    """security_advisory published event"""

    action: Literal["published"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    security_advisory: WebhookSecurityAdvisoryPublishedPropSecurityAdvisory = Field(
        description="The details of the security advisory, including summary, description, and severity."
    )
    sender: Missing[SimpleUserWebhooks] = Field(
        default=UNSET,
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookSecurityAdvisoryPublishedPropSecurityAdvisory(GitHubModel):
    """WebhookSecurityAdvisoryPublishedPropSecurityAdvisory

    The details of the security advisory, including summary, description, and
    severity.
    """

    cvss: WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropCvss = Field()
    cwes: List[
        WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropCwesItems
    ] = Field()
    description: str = Field()
    ghsa_id: str = Field()
    identifiers: List[
        WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropIdentifiersItems
    ] = Field()
    published_at: str = Field()
    references: List[
        WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropReferencesItems
    ] = Field()
    severity: str = Field()
    summary: str = Field()
    updated_at: str = Field()
    vulnerabilities: List[
        WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropVulnerabilitiesItems
    ] = Field()
    withdrawn_at: Union[str, None] = Field()


class WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropCvss(GitHubModel):
    """WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropCvss"""

    score: float = Field()
    vector_string: Union[str, None] = Field()


class WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropCwesItems(GitHubModel):
    """WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropCwesItems"""

    cwe_id: str = Field()
    name: str = Field()


class WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropIdentifiersItems(
    GitHubModel
):
    """WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropIdentifiersItems"""

    type: str = Field()
    value: str = Field()


class WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropReferencesItems(
    GitHubModel
):
    """WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropReferencesItems"""

    url: str = Field()


class WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropVulnerabilitiesItems(
    GitHubModel
):
    """WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropVulnerabilitiesItems"""

    first_patched_version: Union[
        WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropVulnerabilitiesItemsPropFirstPatchedVersion,
        None,
    ] = Field()
    package: WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropVulnerabilitiesItemsPropPackage = (
        Field()
    )
    severity: str = Field()
    vulnerable_version_range: str = Field()


class WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropVulnerabilitiesItemsPropFirstPatchedVersion(
    GitHubModel
):
    """WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropVulnerabilitiesItemsProp
    FirstPatchedVersion
    """

    identifier: str = Field()


class WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropVulnerabilitiesItemsPropPackage(
    GitHubModel
):
    """WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropVulnerabilitiesItemsProp
    Package
    """

    ecosystem: str = Field()
    name: str = Field()


class WebhookSecurityAdvisoryUpdated(GitHubModel):
    """security_advisory updated event"""

    action: Literal["updated"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    security_advisory: WebhookSecurityAdvisoryUpdatedPropSecurityAdvisory = Field(
        description="The details of the security advisory, including summary, description, and severity."
    )
    sender: Missing[SimpleUserWebhooks] = Field(
        default=UNSET,
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookSecurityAdvisoryUpdatedPropSecurityAdvisory(GitHubModel):
    """WebhookSecurityAdvisoryUpdatedPropSecurityAdvisory

    The details of the security advisory, including summary, description, and
    severity.
    """

    cvss: WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropCvss = Field()
    cwes: List[
        WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropCwesItems
    ] = Field()
    description: str = Field()
    ghsa_id: str = Field()
    identifiers: List[
        WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropIdentifiersItems
    ] = Field()
    published_at: str = Field()
    references: List[
        WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropReferencesItems
    ] = Field()
    severity: str = Field()
    summary: str = Field()
    updated_at: str = Field()
    vulnerabilities: List[
        WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropVulnerabilitiesItems
    ] = Field()
    withdrawn_at: Union[str, None] = Field()


class WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropCvss(GitHubModel):
    """WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropCvss"""

    score: float = Field()
    vector_string: Union[str, None] = Field()


class WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropCwesItems(GitHubModel):
    """WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropCwesItems"""

    cwe_id: str = Field()
    name: str = Field()


class WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropIdentifiersItems(
    GitHubModel
):
    """WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropIdentifiersItems"""

    type: str = Field()
    value: str = Field()


class WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropReferencesItems(
    GitHubModel
):
    """WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropReferencesItems"""

    url: str = Field()


class WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropVulnerabilitiesItems(
    GitHubModel
):
    """WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropVulnerabilitiesItems"""

    first_patched_version: Union[
        WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropVulnerabilitiesItemsPropFirstPatchedVersion,
        None,
    ] = Field()
    package: WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropVulnerabilitiesItemsPropPackage = (
        Field()
    )
    severity: str = Field()
    vulnerable_version_range: str = Field()


class WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropVulnerabilitiesItemsPropFirstPatchedVersion(
    GitHubModel
):
    """WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropVulnerabilitiesItemsPropFi
    rstPatchedVersion
    """

    identifier: str = Field()


class WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropVulnerabilitiesItemsPropPackage(
    GitHubModel
):
    """WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropVulnerabilitiesItemsPropPa
    ckage
    """

    ecosystem: str = Field()
    name: str = Field()


class WebhookSecurityAdvisoryWithdrawn(GitHubModel):
    """security_advisory withdrawn event"""

    action: Literal["withdrawn"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    security_advisory: WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisory = Field(
        description="The details of the security advisory, including summary, description, and severity."
    )
    sender: Missing[SimpleUserWebhooks] = Field(
        default=UNSET,
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisory(GitHubModel):
    """WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisory

    The details of the security advisory, including summary, description, and
    severity.
    """

    cvss: WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropCvss = Field()
    cwes: List[
        WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropCwesItems
    ] = Field()
    description: str = Field()
    ghsa_id: str = Field()
    identifiers: List[
        WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropIdentifiersItems
    ] = Field()
    published_at: str = Field()
    references: List[
        WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropReferencesItems
    ] = Field()
    severity: str = Field()
    summary: str = Field()
    updated_at: str = Field()
    vulnerabilities: List[
        WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropVulnerabilitiesItems
    ] = Field()
    withdrawn_at: str = Field()


class WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropCvss(GitHubModel):
    """WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropCvss"""

    score: float = Field()
    vector_string: Union[str, None] = Field()


class WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropCwesItems(GitHubModel):
    """WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropCwesItems"""

    cwe_id: str = Field()
    name: str = Field()


class WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropIdentifiersItems(
    GitHubModel
):
    """WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropIdentifiersItems"""

    type: str = Field()
    value: str = Field()


class WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropReferencesItems(
    GitHubModel
):
    """WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropReferencesItems"""

    url: str = Field()


class WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropVulnerabilitiesItems(
    GitHubModel
):
    """WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropVulnerabilitiesItems"""

    first_patched_version: Union[
        WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropVulnerabilitiesItemsPropFirstPatchedVersion,
        None,
    ] = Field()
    package: WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropVulnerabilitiesItemsPropPackage = (
        Field()
    )
    severity: str = Field()
    vulnerable_version_range: str = Field()


class WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropVulnerabilitiesItemsPropFirstPatchedVersion(
    GitHubModel
):
    """WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropVulnerabilitiesItemsProp
    FirstPatchedVersion
    """

    identifier: str = Field()


class WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropVulnerabilitiesItemsPropPackage(
    GitHubModel
):
    """WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropVulnerabilitiesItemsProp
    Package
    """

    ecosystem: str = Field()
    name: str = Field()


class WebhookSecurityAndAnalysis(GitHubModel):
    """security_and_analysis event"""

    changes: WebhookSecurityAndAnalysisPropChanges = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: FullRepository = Field(
        title="Full Repository", description="Full Repository"
    )
    sender: Missing[SimpleUserWebhooks] = Field(
        default=UNSET,
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookSecurityAndAnalysisPropChanges(GitHubModel):
    """WebhookSecurityAndAnalysisPropChanges"""

    from_: Missing[WebhookSecurityAndAnalysisPropChangesPropFrom] = Field(
        default=UNSET, alias="from"
    )


class WebhookSecurityAndAnalysisPropChangesPropFrom(GitHubModel):
    """WebhookSecurityAndAnalysisPropChangesPropFrom"""

    security_and_analysis: Missing[Union[SecurityAndAnalysis, None]] = Field(
        default=UNSET
    )


class WebhookSponsorshipCancelled(GitHubModel):
    """sponsorship cancelled event"""

    action: Literal["cancelled"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )
    sponsorship: WebhookSponsorshipCancelledPropSponsorship = Field()


class WebhookSponsorshipCancelledPropSponsorship(GitHubModel):
    """WebhookSponsorshipCancelledPropSponsorship"""

    created_at: str = Field()
    maintainer: Missing[
        WebhookSponsorshipCancelledPropSponsorshipPropMaintainer
    ] = Field(default=UNSET)
    node_id: str = Field()
    privacy_level: str = Field()
    sponsor: Union[WebhookSponsorshipCancelledPropSponsorshipPropSponsor, None] = Field(
        title="User"
    )
    sponsorable: Union[
        WebhookSponsorshipCancelledPropSponsorshipPropSponsorable, None
    ] = Field(title="User")
    tier: WebhookSponsorshipCancelledPropSponsorshipPropTier = Field(
        title="Sponsorship Tier",
        description="The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.",
    )


class WebhookSponsorshipCancelledPropSponsorshipPropMaintainer(GitHubModel):
    """WebhookSponsorshipCancelledPropSponsorshipPropMaintainer"""

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookSponsorshipCancelledPropSponsorshipPropSponsor(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookSponsorshipCancelledPropSponsorshipPropSponsorable(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookSponsorshipCancelledPropSponsorshipPropTier(GitHubModel):
    """Sponsorship Tier

    The `tier_changed` and `pending_tier_change` will include the original tier
    before the change or pending change. For more information, see the pending tier
    change payload.
    """

    created_at: str = Field()
    description: str = Field()
    is_custom_ammount: Missing[bool] = Field(default=UNSET)
    is_custom_amount: Missing[bool] = Field(default=UNSET)
    is_one_time: bool = Field()
    monthly_price_in_cents: int = Field()
    monthly_price_in_dollars: int = Field()
    name: str = Field()
    node_id: str = Field()


class WebhookSponsorshipCreated(GitHubModel):
    """sponsorship created event"""

    action: Literal["created"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )
    sponsorship: WebhookSponsorshipCreatedPropSponsorship = Field()


class WebhookSponsorshipCreatedPropSponsorship(GitHubModel):
    """WebhookSponsorshipCreatedPropSponsorship"""

    created_at: str = Field()
    maintainer: Missing[WebhookSponsorshipCreatedPropSponsorshipPropMaintainer] = Field(
        default=UNSET
    )
    node_id: str = Field()
    privacy_level: str = Field()
    sponsor: Union[WebhookSponsorshipCreatedPropSponsorshipPropSponsor, None] = Field(
        title="User"
    )
    sponsorable: Union[
        WebhookSponsorshipCreatedPropSponsorshipPropSponsorable, None
    ] = Field(title="User")
    tier: WebhookSponsorshipCreatedPropSponsorshipPropTier = Field(
        title="Sponsorship Tier",
        description="The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.",
    )


class WebhookSponsorshipCreatedPropSponsorshipPropMaintainer(GitHubModel):
    """WebhookSponsorshipCreatedPropSponsorshipPropMaintainer"""

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookSponsorshipCreatedPropSponsorshipPropSponsor(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookSponsorshipCreatedPropSponsorshipPropSponsorable(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookSponsorshipCreatedPropSponsorshipPropTier(GitHubModel):
    """Sponsorship Tier

    The `tier_changed` and `pending_tier_change` will include the original tier
    before the change or pending change. For more information, see the pending tier
    change payload.
    """

    created_at: str = Field()
    description: str = Field()
    is_custom_ammount: Missing[bool] = Field(default=UNSET)
    is_custom_amount: Missing[bool] = Field(default=UNSET)
    is_one_time: bool = Field()
    monthly_price_in_cents: int = Field()
    monthly_price_in_dollars: int = Field()
    name: str = Field()
    node_id: str = Field()


class WebhookSponsorshipEdited(GitHubModel):
    """sponsorship edited event"""

    action: Literal["edited"] = Field()
    changes: WebhookSponsorshipEditedPropChanges = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )
    sponsorship: WebhookSponsorshipEditedPropSponsorship = Field()


class WebhookSponsorshipEditedPropChanges(GitHubModel):
    """WebhookSponsorshipEditedPropChanges"""

    privacy_level: Missing[WebhookSponsorshipEditedPropChangesPropPrivacyLevel] = Field(
        default=UNSET
    )


class WebhookSponsorshipEditedPropChangesPropPrivacyLevel(GitHubModel):
    """WebhookSponsorshipEditedPropChangesPropPrivacyLevel"""

    from_: str = Field(
        alias="from",
        description="The `edited` event types include the details about the change when someone edits a sponsorship to change the privacy.",
    )


class WebhookSponsorshipEditedPropSponsorship(GitHubModel):
    """WebhookSponsorshipEditedPropSponsorship"""

    created_at: str = Field()
    maintainer: Missing[WebhookSponsorshipEditedPropSponsorshipPropMaintainer] = Field(
        default=UNSET
    )
    node_id: str = Field()
    privacy_level: str = Field()
    sponsor: Union[WebhookSponsorshipEditedPropSponsorshipPropSponsor, None] = Field(
        title="User"
    )
    sponsorable: Union[
        WebhookSponsorshipEditedPropSponsorshipPropSponsorable, None
    ] = Field(title="User")
    tier: WebhookSponsorshipEditedPropSponsorshipPropTier = Field(
        title="Sponsorship Tier",
        description="The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.",
    )


class WebhookSponsorshipEditedPropSponsorshipPropMaintainer(GitHubModel):
    """WebhookSponsorshipEditedPropSponsorshipPropMaintainer"""

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookSponsorshipEditedPropSponsorshipPropSponsor(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookSponsorshipEditedPropSponsorshipPropSponsorable(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookSponsorshipEditedPropSponsorshipPropTier(GitHubModel):
    """Sponsorship Tier

    The `tier_changed` and `pending_tier_change` will include the original tier
    before the change or pending change. For more information, see the pending tier
    change payload.
    """

    created_at: str = Field()
    description: str = Field()
    is_custom_ammount: Missing[bool] = Field(default=UNSET)
    is_custom_amount: Missing[bool] = Field(default=UNSET)
    is_one_time: bool = Field()
    monthly_price_in_cents: int = Field()
    monthly_price_in_dollars: int = Field()
    name: str = Field()
    node_id: str = Field()


class WebhookSponsorshipPendingCancellation(GitHubModel):
    """sponsorship pending_cancellation event"""

    action: Literal["pending_cancellation"] = Field()
    effective_date: Missing[str] = Field(
        default=UNSET,
        description="The `pending_cancellation` and `pending_tier_change` event types will include the date the cancellation or tier change will take effect.",
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )
    sponsorship: WebhookSponsorshipPendingCancellationPropSponsorship = Field()


class WebhookSponsorshipPendingCancellationPropSponsorship(GitHubModel):
    """WebhookSponsorshipPendingCancellationPropSponsorship"""

    created_at: str = Field()
    maintainer: Missing[
        WebhookSponsorshipPendingCancellationPropSponsorshipPropMaintainer
    ] = Field(default=UNSET)
    node_id: str = Field()
    privacy_level: str = Field()
    sponsor: Union[
        WebhookSponsorshipPendingCancellationPropSponsorshipPropSponsor, None
    ] = Field(title="User")
    sponsorable: Union[
        WebhookSponsorshipPendingCancellationPropSponsorshipPropSponsorable, None
    ] = Field(title="User")
    tier: WebhookSponsorshipPendingCancellationPropSponsorshipPropTier = Field(
        title="Sponsorship Tier",
        description="The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.",
    )


class WebhookSponsorshipPendingCancellationPropSponsorshipPropMaintainer(GitHubModel):
    """WebhookSponsorshipPendingCancellationPropSponsorshipPropMaintainer"""

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookSponsorshipPendingCancellationPropSponsorshipPropSponsor(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookSponsorshipPendingCancellationPropSponsorshipPropSponsorable(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookSponsorshipPendingCancellationPropSponsorshipPropTier(GitHubModel):
    """Sponsorship Tier

    The `tier_changed` and `pending_tier_change` will include the original tier
    before the change or pending change. For more information, see the pending tier
    change payload.
    """

    created_at: str = Field()
    description: str = Field()
    is_custom_ammount: Missing[bool] = Field(default=UNSET)
    is_custom_amount: Missing[bool] = Field(default=UNSET)
    is_one_time: bool = Field()
    monthly_price_in_cents: int = Field()
    monthly_price_in_dollars: int = Field()
    name: str = Field()
    node_id: str = Field()


class WebhookSponsorshipPendingTierChange(GitHubModel):
    """sponsorship pending_tier_change event"""

    action: Literal["pending_tier_change"] = Field()
    changes: WebhookSponsorshipPendingTierChangePropChanges = Field()
    effective_date: Missing[str] = Field(
        default=UNSET,
        description="The `pending_cancellation` and `pending_tier_change` event types will include the date the cancellation or tier change will take effect.",
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )
    sponsorship: WebhookSponsorshipPendingTierChangePropSponsorship = Field()


class WebhookSponsorshipPendingTierChangePropChanges(GitHubModel):
    """WebhookSponsorshipPendingTierChangePropChanges"""

    tier: WebhookSponsorshipPendingTierChangePropChangesPropTier = Field()


class WebhookSponsorshipPendingTierChangePropChangesPropTier(GitHubModel):
    """WebhookSponsorshipPendingTierChangePropChangesPropTier"""

    from_: WebhookSponsorshipPendingTierChangePropChangesPropTierPropFrom = Field(
        alias="from",
        title="Sponsorship Tier",
        description="The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.",
    )


class WebhookSponsorshipPendingTierChangePropChangesPropTierPropFrom(GitHubModel):
    """Sponsorship Tier

    The `tier_changed` and `pending_tier_change` will include the original tier
    before the change or pending change. For more information, see the pending tier
    change payload.
    """

    created_at: str = Field()
    description: str = Field()
    is_custom_ammount: Missing[bool] = Field(default=UNSET)
    is_custom_amount: Missing[bool] = Field(default=UNSET)
    is_one_time: bool = Field()
    monthly_price_in_cents: int = Field()
    monthly_price_in_dollars: int = Field()
    name: str = Field()
    node_id: str = Field()


class WebhookSponsorshipPendingTierChangePropSponsorship(GitHubModel):
    """WebhookSponsorshipPendingTierChangePropSponsorship"""

    created_at: str = Field()
    maintainer: Missing[
        WebhookSponsorshipPendingTierChangePropSponsorshipPropMaintainer
    ] = Field(default=UNSET)
    node_id: str = Field()
    privacy_level: str = Field()
    sponsor: Union[
        WebhookSponsorshipPendingTierChangePropSponsorshipPropSponsor, None
    ] = Field(title="User")
    sponsorable: Union[
        WebhookSponsorshipPendingTierChangePropSponsorshipPropSponsorable, None
    ] = Field(title="User")
    tier: WebhookSponsorshipPendingTierChangePropSponsorshipPropTier = Field(
        title="Sponsorship Tier",
        description="The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.",
    )


class WebhookSponsorshipPendingTierChangePropSponsorshipPropMaintainer(GitHubModel):
    """WebhookSponsorshipPendingTierChangePropSponsorshipPropMaintainer"""

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookSponsorshipPendingTierChangePropSponsorshipPropSponsor(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookSponsorshipPendingTierChangePropSponsorshipPropSponsorable(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookSponsorshipPendingTierChangePropSponsorshipPropTier(GitHubModel):
    """Sponsorship Tier

    The `tier_changed` and `pending_tier_change` will include the original tier
    before the change or pending change. For more information, see the pending tier
    change payload.
    """

    created_at: str = Field()
    description: str = Field()
    is_custom_ammount: Missing[bool] = Field(default=UNSET)
    is_custom_amount: Missing[bool] = Field(default=UNSET)
    is_one_time: bool = Field()
    monthly_price_in_cents: int = Field()
    monthly_price_in_dollars: int = Field()
    name: str = Field()
    node_id: str = Field()


class WebhookSponsorshipTierChanged(GitHubModel):
    """sponsorship tier_changed event"""

    action: Literal["tier_changed"] = Field()
    changes: WebhookSponsorshipTierChangedPropChanges = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: Missing[RepositoryWebhooks] = Field(
        default=UNSET,
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )
    sponsorship: WebhookSponsorshipTierChangedPropSponsorship = Field()


class WebhookSponsorshipTierChangedPropChanges(GitHubModel):
    """WebhookSponsorshipTierChangedPropChanges"""

    tier: WebhookSponsorshipTierChangedPropChangesPropTier = Field()


class WebhookSponsorshipTierChangedPropChangesPropTier(GitHubModel):
    """WebhookSponsorshipTierChangedPropChangesPropTier"""

    from_: WebhookSponsorshipTierChangedPropChangesPropTierPropFrom = Field(
        alias="from",
        title="Sponsorship Tier",
        description="The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.",
    )


class WebhookSponsorshipTierChangedPropChangesPropTierPropFrom(GitHubModel):
    """Sponsorship Tier

    The `tier_changed` and `pending_tier_change` will include the original tier
    before the change or pending change. For more information, see the pending tier
    change payload.
    """

    created_at: str = Field()
    description: str = Field()
    is_custom_ammount: Missing[bool] = Field(default=UNSET)
    is_custom_amount: Missing[bool] = Field(default=UNSET)
    is_one_time: bool = Field()
    monthly_price_in_cents: int = Field()
    monthly_price_in_dollars: int = Field()
    name: str = Field()
    node_id: str = Field()


class WebhookSponsorshipTierChangedPropSponsorship(GitHubModel):
    """WebhookSponsorshipTierChangedPropSponsorship"""

    created_at: str = Field()
    maintainer: Missing[
        WebhookSponsorshipTierChangedPropSponsorshipPropMaintainer
    ] = Field(default=UNSET)
    node_id: str = Field()
    privacy_level: str = Field()
    sponsor: Union[
        WebhookSponsorshipTierChangedPropSponsorshipPropSponsor, None
    ] = Field(title="User")
    sponsorable: Union[
        WebhookSponsorshipTierChangedPropSponsorshipPropSponsorable, None
    ] = Field(title="User")
    tier: WebhookSponsorshipTierChangedPropSponsorshipPropTier = Field(
        title="Sponsorship Tier",
        description="The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.",
    )


class WebhookSponsorshipTierChangedPropSponsorshipPropMaintainer(GitHubModel):
    """WebhookSponsorshipTierChangedPropSponsorshipPropMaintainer"""

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookSponsorshipTierChangedPropSponsorshipPropSponsor(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookSponsorshipTierChangedPropSponsorshipPropSponsorable(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookSponsorshipTierChangedPropSponsorshipPropTier(GitHubModel):
    """Sponsorship Tier

    The `tier_changed` and `pending_tier_change` will include the original tier
    before the change or pending change. For more information, see the pending tier
    change payload.
    """

    created_at: str = Field()
    description: str = Field()
    is_custom_ammount: Missing[bool] = Field(default=UNSET)
    is_custom_amount: Missing[bool] = Field(default=UNSET)
    is_one_time: bool = Field()
    monthly_price_in_cents: int = Field()
    monthly_price_in_dollars: int = Field()
    name: str = Field()
    node_id: str = Field()


class WebhookStarCreated(GitHubModel):
    """star created event"""

    action: Literal["created"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )
    starred_at: Union[str, None] = Field(
        description="The time the star was created. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. Will be `null` for the `deleted` action."
    )


class WebhookStarDeleted(GitHubModel):
    """star deleted event"""

    action: Literal["deleted"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )
    starred_at: None = Field(
        description="The time the star was created. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. Will be `null` for the `deleted` action."
    )


class WebhookStatus(GitHubModel):
    """status event"""

    avatar_url: Missing[Union[str, None]] = Field(default=UNSET)
    branches: List[WebhookStatusPropBranchesItems] = Field(
        description="An array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches."
    )
    commit: WebhookStatusPropCommit = Field()
    context: str = Field()
    created_at: str = Field()
    description: Union[str, None] = Field(
        description="The optional human-readable description added to the status."
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    id: int = Field(description="The unique identifier of the status.")
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    name: str = Field()
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )
    sha: str = Field(description="The Commit SHA.")
    state: Literal["pending", "success", "failure", "error"] = Field(
        description="The new state. Can be `pending`, `success`, `failure`, or `error`."
    )
    target_url: Union[str, None] = Field(
        description="The optional link added to the status."
    )
    updated_at: str = Field()


class WebhookStatusPropBranchesItems(GitHubModel):
    """WebhookStatusPropBranchesItems"""

    commit: WebhookStatusPropBranchesItemsPropCommit = Field()
    name: str = Field()
    protected: bool = Field()


class WebhookStatusPropBranchesItemsPropCommit(GitHubModel):
    """WebhookStatusPropBranchesItemsPropCommit"""

    sha: Union[str, None] = Field()
    url: Union[str, None] = Field()


class WebhookStatusPropCommit(GitHubModel):
    """WebhookStatusPropCommit"""

    author: Union[WebhookStatusPropCommitPropAuthor, None] = Field(title="User")
    comments_url: str = Field()
    commit: WebhookStatusPropCommitPropCommit = Field()
    committer: Union[WebhookStatusPropCommitPropCommitter, None] = Field(title="User")
    html_url: str = Field()
    node_id: str = Field()
    parents: List[WebhookStatusPropCommitPropParentsItems] = Field()
    sha: str = Field()
    url: str = Field()


class WebhookStatusPropCommitPropAuthor(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookStatusPropCommitPropCommit(GitHubModel):
    """WebhookStatusPropCommitPropCommit"""

    author: WebhookStatusPropCommitPropCommitPropAuthor = Field()
    comment_count: int = Field()
    committer: WebhookStatusPropCommitPropCommitPropCommitter = Field()
    message: str = Field()
    tree: WebhookStatusPropCommitPropCommitPropTree = Field()
    url: str = Field()
    verification: WebhookStatusPropCommitPropCommitPropVerification = Field()


class WebhookStatusPropCommitPropCommitPropAuthor(GitHubModel):
    """WebhookStatusPropCommitPropCommitPropAuthor"""

    date: datetime = Field()
    email: str = Field()
    name: str = Field(description="The git author's name.")
    username: Missing[str] = Field(default=UNSET)


class WebhookStatusPropCommitPropCommitPropAuthorAllof0(GitHubModel):
    """Committer

    Metaproperties for Git author/committer information.
    """

    date: Missing[datetime] = Field(default=UNSET)
    email: Union[str, None] = Field()
    name: str = Field(description="The git author's name.")
    username: Missing[str] = Field(default=UNSET)


class WebhookStatusPropCommitPropCommitPropAuthorAllof1(GitHubModel):
    """WebhookStatusPropCommitPropCommitPropAuthorAllof1"""

    date: str = Field()
    email: Missing[str] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)


class WebhookStatusPropCommitPropCommitPropCommitter(GitHubModel):
    """WebhookStatusPropCommitPropCommitPropCommitter"""

    date: datetime = Field()
    email: str = Field()
    name: str = Field(description="The git author's name.")
    username: Missing[str] = Field(default=UNSET)


class WebhookStatusPropCommitPropCommitPropCommitterAllof0(GitHubModel):
    """Committer

    Metaproperties for Git author/committer information.
    """

    date: Missing[datetime] = Field(default=UNSET)
    email: Union[str, None] = Field()
    name: str = Field(description="The git author's name.")
    username: Missing[str] = Field(default=UNSET)


class WebhookStatusPropCommitPropCommitPropCommitterAllof1(GitHubModel):
    """WebhookStatusPropCommitPropCommitPropCommitterAllof1"""

    date: str = Field()
    email: Missing[str] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)


class WebhookStatusPropCommitPropCommitPropTree(GitHubModel):
    """WebhookStatusPropCommitPropCommitPropTree"""

    sha: str = Field()
    url: str = Field()


class WebhookStatusPropCommitPropCommitPropVerification(GitHubModel):
    """WebhookStatusPropCommitPropCommitPropVerification"""

    payload: Union[str, None] = Field()
    reason: Literal[
        "expired_key",
        "not_signing_key",
        "gpgverify_error",
        "gpgverify_unavailable",
        "unsigned",
        "unknown_signature_type",
        "no_user",
        "unverified_email",
        "bad_email",
        "unknown_key",
        "malformed_signature",
        "invalid",
        "valid",
        "bad_cert",
        "ocsp_pending",
    ] = Field()
    signature: Union[str, None] = Field()
    verified: bool = Field()


class WebhookStatusPropCommitPropCommitter(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookStatusPropCommitPropParentsItems(GitHubModel):
    """WebhookStatusPropCommitPropParentsItems"""

    html_url: str = Field()
    sha: str = Field()
    url: str = Field()


class WebhookTeamAdd(GitHubModel):
    """team_add event"""

    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )
    team: WebhookTeamAddPropTeam = Field(
        title="Team",
        description="Groups of organization members that gives permissions on specified repositories.",
    )


class WebhookTeamAddPropTeam(GitHubModel):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Description of the team"
    )
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field(description="Unique identifier of the team")
    members_url: Missing[str] = Field(default=UNSET)
    name: str = Field(description="Name of the team")
    node_id: Missing[str] = Field(default=UNSET)
    parent: Missing[Union[WebhookTeamAddPropTeamPropParent, None]] = Field(
        default=UNSET
    )
    permission: Missing[str] = Field(
        default=UNSET,
        description="Permission that the team will have for its repositories",
    )
    privacy: Missing[Literal["open", "closed", "secret"]] = Field(default=UNSET)
    notification_setting: Missing[
        Literal["notifications_enabled", "notifications_disabled"]
    ] = Field(
        default=UNSET,
        description="Whether team members will receive notifications when their team is @mentioned",
    )
    repositories_url: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET, description="URL for the team")


class WebhookTeamAddPropTeamPropParent(GitHubModel):
    """WebhookTeamAddPropTeamPropParent"""

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    notification_setting: Literal[
        "notifications_enabled", "notifications_disabled"
    ] = Field(
        description="Whether team members will receive notifications when their team is @mentioned"
    )
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookTeamAddedToRepository(GitHubModel):
    """team added_to_repository event"""

    action: Literal["added_to_repository"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: OrganizationSimpleWebhooks = Field(
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: Missing[WebhookTeamAddedToRepositoryPropRepository] = Field(
        default=UNSET, title="Repository", description="A git repository"
    )
    sender: Missing[SimpleUserWebhooks] = Field(
        default=UNSET,
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )
    team: WebhookTeamAddedToRepositoryPropTeam = Field(
        title="Team",
        description="Groups of organization members that gives permissions on specified repositories.",
    )


class WebhookTeamAddedToRepositoryPropRepository(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    custom_properties: Missing[
        WebhookTeamAddedToRepositoryPropRepositoryPropCustomProperties
    ] = Field(
        default=UNSET,
        description="The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.",
    )
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookTeamAddedToRepositoryPropRepositoryPropLicense, None
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[WebhookTeamAddedToRepositoryPropRepositoryPropOwner, None] = Field(
        title="User"
    )
    permissions: Missing[
        WebhookTeamAddedToRepositoryPropRepositoryPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()


class WebhookTeamAddedToRepositoryPropRepositoryPropCustomProperties(ExtraGitHubModel):
    """WebhookTeamAddedToRepositoryPropRepositoryPropCustomProperties

    The custom properties that were defined for the repository. The keys are the
    custom property names, and the values are the corresponding custom property
    values.
    """


class WebhookTeamAddedToRepositoryPropRepositoryPropLicense(GitHubModel):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookTeamAddedToRepositoryPropRepositoryPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookTeamAddedToRepositoryPropRepositoryPropPermissions(GitHubModel):
    """WebhookTeamAddedToRepositoryPropRepositoryPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookTeamAddedToRepositoryPropTeam(GitHubModel):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Description of the team"
    )
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field(description="Unique identifier of the team")
    members_url: Missing[str] = Field(default=UNSET)
    name: str = Field(description="Name of the team")
    node_id: Missing[str] = Field(default=UNSET)
    parent: Missing[
        Union[WebhookTeamAddedToRepositoryPropTeamPropParent, None]
    ] = Field(default=UNSET)
    permission: Missing[str] = Field(
        default=UNSET,
        description="Permission that the team will have for its repositories",
    )
    privacy: Missing[Literal["open", "closed", "secret"]] = Field(default=UNSET)
    notification_setting: Missing[
        Literal["notifications_enabled", "notifications_disabled"]
    ] = Field(
        default=UNSET,
        description="Whether team members will receive notifications when their team is @mentioned",
    )
    repositories_url: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET, description="URL for the team")


class WebhookTeamAddedToRepositoryPropTeamPropParent(GitHubModel):
    """WebhookTeamAddedToRepositoryPropTeamPropParent"""

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    notification_setting: Literal[
        "notifications_enabled", "notifications_disabled"
    ] = Field(
        description="Whether team members will receive notifications when their team is @mentioned"
    )
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookTeamCreated(GitHubModel):
    """team created event"""

    action: Literal["created"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: OrganizationSimpleWebhooks = Field(
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: Missing[WebhookTeamCreatedPropRepository] = Field(
        default=UNSET, title="Repository", description="A git repository"
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )
    team: WebhookTeamCreatedPropTeam = Field(
        title="Team",
        description="Groups of organization members that gives permissions on specified repositories.",
    )


class WebhookTeamCreatedPropRepository(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    custom_properties: Missing[
        WebhookTeamCreatedPropRepositoryPropCustomProperties
    ] = Field(
        default=UNSET,
        description="The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.",
    )
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[WebhookTeamCreatedPropRepositoryPropLicense, None] = Field(
        alias="license", title="License"
    )
    master_branch: Missing[str] = Field(default=UNSET)
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[WebhookTeamCreatedPropRepositoryPropOwner, None] = Field(title="User")
    permissions: Missing[WebhookTeamCreatedPropRepositoryPropPermissions] = Field(
        default=UNSET
    )
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()


class WebhookTeamCreatedPropRepositoryPropCustomProperties(ExtraGitHubModel):
    """WebhookTeamCreatedPropRepositoryPropCustomProperties

    The custom properties that were defined for the repository. The keys are the
    custom property names, and the values are the corresponding custom property
    values.
    """


class WebhookTeamCreatedPropRepositoryPropLicense(GitHubModel):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookTeamCreatedPropRepositoryPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookTeamCreatedPropRepositoryPropPermissions(GitHubModel):
    """WebhookTeamCreatedPropRepositoryPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookTeamCreatedPropTeam(GitHubModel):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Description of the team"
    )
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field(description="Unique identifier of the team")
    members_url: Missing[str] = Field(default=UNSET)
    name: str = Field(description="Name of the team")
    node_id: Missing[str] = Field(default=UNSET)
    parent: Missing[Union[WebhookTeamCreatedPropTeamPropParent, None]] = Field(
        default=UNSET
    )
    permission: Missing[str] = Field(
        default=UNSET,
        description="Permission that the team will have for its repositories",
    )
    privacy: Missing[Literal["open", "closed", "secret"]] = Field(default=UNSET)
    notification_setting: Missing[
        Literal["notifications_enabled", "notifications_disabled"]
    ] = Field(
        default=UNSET,
        description="Whether team members will receive notifications when their team is @mentioned",
    )
    repositories_url: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET, description="URL for the team")


class WebhookTeamCreatedPropTeamPropParent(GitHubModel):
    """WebhookTeamCreatedPropTeamPropParent"""

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    notification_setting: Literal[
        "notifications_enabled", "notifications_disabled"
    ] = Field(
        description="Whether team members will receive notifications when their team is @mentioned"
    )
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookTeamDeleted(GitHubModel):
    """team deleted event"""

    action: Literal["deleted"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: OrganizationSimpleWebhooks = Field(
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: Missing[WebhookTeamDeletedPropRepository] = Field(
        default=UNSET, title="Repository", description="A git repository"
    )
    sender: Missing[SimpleUserWebhooks] = Field(
        default=UNSET,
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )
    team: WebhookTeamDeletedPropTeam = Field(
        title="Team",
        description="Groups of organization members that gives permissions on specified repositories.",
    )


class WebhookTeamDeletedPropRepository(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    custom_properties: Missing[
        WebhookTeamDeletedPropRepositoryPropCustomProperties
    ] = Field(
        default=UNSET,
        description="The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.",
    )
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[WebhookTeamDeletedPropRepositoryPropLicense, None] = Field(
        alias="license", title="License"
    )
    master_branch: Missing[str] = Field(default=UNSET)
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[WebhookTeamDeletedPropRepositoryPropOwner, None] = Field(title="User")
    permissions: Missing[WebhookTeamDeletedPropRepositoryPropPermissions] = Field(
        default=UNSET
    )
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()


class WebhookTeamDeletedPropRepositoryPropCustomProperties(ExtraGitHubModel):
    """WebhookTeamDeletedPropRepositoryPropCustomProperties

    The custom properties that were defined for the repository. The keys are the
    custom property names, and the values are the corresponding custom property
    values.
    """


class WebhookTeamDeletedPropRepositoryPropLicense(GitHubModel):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookTeamDeletedPropRepositoryPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookTeamDeletedPropRepositoryPropPermissions(GitHubModel):
    """WebhookTeamDeletedPropRepositoryPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookTeamDeletedPropTeam(GitHubModel):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Description of the team"
    )
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field(description="Unique identifier of the team")
    members_url: Missing[str] = Field(default=UNSET)
    name: str = Field(description="Name of the team")
    node_id: Missing[str] = Field(default=UNSET)
    parent: Missing[Union[WebhookTeamDeletedPropTeamPropParent, None]] = Field(
        default=UNSET
    )
    permission: Missing[str] = Field(
        default=UNSET,
        description="Permission that the team will have for its repositories",
    )
    privacy: Missing[Literal["open", "closed", "secret"]] = Field(default=UNSET)
    notification_setting: Missing[
        Literal["notifications_enabled", "notifications_disabled"]
    ] = Field(
        default=UNSET,
        description="Whether team members will receive notifications when their team is @mentioned",
    )
    repositories_url: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET, description="URL for the team")


class WebhookTeamDeletedPropTeamPropParent(GitHubModel):
    """WebhookTeamDeletedPropTeamPropParent"""

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    notification_setting: Literal[
        "notifications_enabled", "notifications_disabled"
    ] = Field(
        description="Whether team members will receive notifications when their team is @mentioned"
    )
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookTeamEdited(GitHubModel):
    """team edited event"""

    action: Literal["edited"] = Field()
    changes: WebhookTeamEditedPropChanges = Field(
        description="The changes to the team if the action was `edited`."
    )
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: OrganizationSimpleWebhooks = Field(
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: Missing[WebhookTeamEditedPropRepository] = Field(
        default=UNSET, title="Repository", description="A git repository"
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )
    team: WebhookTeamEditedPropTeam = Field(
        title="Team",
        description="Groups of organization members that gives permissions on specified repositories.",
    )


class WebhookTeamEditedPropChanges(GitHubModel):
    """WebhookTeamEditedPropChanges

    The changes to the team if the action was `edited`.
    """

    description: Missing[WebhookTeamEditedPropChangesPropDescription] = Field(
        default=UNSET
    )
    name: Missing[WebhookTeamEditedPropChangesPropName] = Field(default=UNSET)
    privacy: Missing[WebhookTeamEditedPropChangesPropPrivacy] = Field(default=UNSET)
    notification_setting: Missing[
        WebhookTeamEditedPropChangesPropNotificationSetting
    ] = Field(default=UNSET)
    repository: Missing[WebhookTeamEditedPropChangesPropRepository] = Field(
        default=UNSET
    )


class WebhookTeamEditedPropChangesPropDescription(GitHubModel):
    """WebhookTeamEditedPropChangesPropDescription"""

    from_: str = Field(
        alias="from",
        description="The previous version of the description if the action was `edited`.",
    )


class WebhookTeamEditedPropChangesPropName(GitHubModel):
    """WebhookTeamEditedPropChangesPropName"""

    from_: str = Field(
        alias="from",
        description="The previous version of the name if the action was `edited`.",
    )


class WebhookTeamEditedPropChangesPropPrivacy(GitHubModel):
    """WebhookTeamEditedPropChangesPropPrivacy"""

    from_: str = Field(
        alias="from",
        description="The previous version of the team's privacy if the action was `edited`.",
    )


class WebhookTeamEditedPropChangesPropNotificationSetting(GitHubModel):
    """WebhookTeamEditedPropChangesPropNotificationSetting"""

    from_: str = Field(
        alias="from",
        description="The previous version of the team's notification setting if the action was `edited`.",
    )


class WebhookTeamEditedPropChangesPropRepository(GitHubModel):
    """WebhookTeamEditedPropChangesPropRepository"""

    permissions: WebhookTeamEditedPropChangesPropRepositoryPropPermissions = Field()


class WebhookTeamEditedPropChangesPropRepositoryPropPermissions(GitHubModel):
    """WebhookTeamEditedPropChangesPropRepositoryPropPermissions"""

    from_: WebhookTeamEditedPropChangesPropRepositoryPropPermissionsPropFrom = Field(
        alias="from"
    )


class WebhookTeamEditedPropChangesPropRepositoryPropPermissionsPropFrom(GitHubModel):
    """WebhookTeamEditedPropChangesPropRepositoryPropPermissionsPropFrom"""

    admin: Missing[bool] = Field(
        default=UNSET,
        description="The previous version of the team member's `admin` permission on a repository, if the action was `edited`.",
    )
    pull: Missing[bool] = Field(
        default=UNSET,
        description="The previous version of the team member's `pull` permission on a repository, if the action was `edited`.",
    )
    push: Missing[bool] = Field(
        default=UNSET,
        description="The previous version of the team member's `push` permission on a repository, if the action was `edited`.",
    )


class WebhookTeamEditedPropRepository(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    custom_properties: Missing[
        WebhookTeamEditedPropRepositoryPropCustomProperties
    ] = Field(
        default=UNSET,
        description="The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.",
    )
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[WebhookTeamEditedPropRepositoryPropLicense, None] = Field(
        alias="license", title="License"
    )
    master_branch: Missing[str] = Field(default=UNSET)
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[WebhookTeamEditedPropRepositoryPropOwner, None] = Field(title="User")
    permissions: Missing[WebhookTeamEditedPropRepositoryPropPermissions] = Field(
        default=UNSET
    )
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()


class WebhookTeamEditedPropRepositoryPropCustomProperties(ExtraGitHubModel):
    """WebhookTeamEditedPropRepositoryPropCustomProperties

    The custom properties that were defined for the repository. The keys are the
    custom property names, and the values are the corresponding custom property
    values.
    """


class WebhookTeamEditedPropRepositoryPropLicense(GitHubModel):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookTeamEditedPropRepositoryPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookTeamEditedPropRepositoryPropPermissions(GitHubModel):
    """WebhookTeamEditedPropRepositoryPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookTeamEditedPropTeam(GitHubModel):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Description of the team"
    )
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field(description="Unique identifier of the team")
    members_url: Missing[str] = Field(default=UNSET)
    name: str = Field(description="Name of the team")
    node_id: Missing[str] = Field(default=UNSET)
    parent: Missing[Union[WebhookTeamEditedPropTeamPropParent, None]] = Field(
        default=UNSET
    )
    permission: Missing[str] = Field(
        default=UNSET,
        description="Permission that the team will have for its repositories",
    )
    privacy: Missing[Literal["open", "closed", "secret"]] = Field(default=UNSET)
    notification_setting: Missing[
        Literal["notifications_enabled", "notifications_disabled"]
    ] = Field(
        default=UNSET,
        description="Whether team members will receive notifications when their team is @mentioned",
    )
    repositories_url: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET, description="URL for the team")


class WebhookTeamEditedPropTeamPropParent(GitHubModel):
    """WebhookTeamEditedPropTeamPropParent"""

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    notification_setting: Literal[
        "notifications_enabled", "notifications_disabled"
    ] = Field(
        description="Whether team members will receive notifications when their team is @mentioned"
    )
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookTeamRemovedFromRepository(GitHubModel):
    """team removed_from_repository event"""

    action: Literal["removed_from_repository"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: OrganizationSimpleWebhooks = Field(
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: Missing[WebhookTeamRemovedFromRepositoryPropRepository] = Field(
        default=UNSET, title="Repository", description="A git repository"
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )
    team: WebhookTeamRemovedFromRepositoryPropTeam = Field(
        title="Team",
        description="Groups of organization members that gives permissions on specified repositories.",
    )


class WebhookTeamRemovedFromRepositoryPropRepository(GitHubModel):
    """Repository

    A git repository
    """

    allow_auto_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow auto-merge for pull requests."
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET, description="Whether to allow private forks"
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_update_branch: Missing[bool] = Field(default=UNSET)
    archive_url: str = Field()
    archived: bool = Field(
        default=False, description="Whether the repository is archived."
    )
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    clone_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    created_at: Union[int, datetime] = Field()
    custom_properties: Missing[
        WebhookTeamRemovedFromRepositoryPropRepositoryPropCustomProperties
    ] = Field(
        default=UNSET,
        description="The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.",
    )
    default_branch: str = Field(description="The default branch of the repository.")
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    disabled: Missing[bool] = Field(
        default=UNSET, description="Returns whether or not this repository is disabled."
    )
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks: int = Field()
    forks_count: int = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    git_url: str = Field()
    has_downloads: bool = Field(
        default=True, description="Whether downloads are enabled."
    )
    has_issues: bool = Field(default=True, description="Whether issues are enabled.")
    has_pages: bool = Field()
    has_projects: bool = Field(
        default=True, description="Whether projects are enabled."
    )
    has_wiki: bool = Field(default=True, description="Whether the wiki is enabled.")
    homepage: Union[str, None] = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    is_template: Missing[bool] = Field(default=UNSET)
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    language: Union[str, None] = Field()
    languages_url: str = Field()
    license_: Union[
        WebhookTeamRemovedFromRepositoryPropRepositoryPropLicense, None
    ] = Field(alias="license", title="License")
    master_branch: Missing[str] = Field(default=UNSET)
    merges_url: str = Field()
    milestones_url: str = Field()
    mirror_url: Union[str, None] = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    open_issues: int = Field()
    open_issues_count: int = Field()
    organization: Missing[str] = Field(default=UNSET)
    owner: Union[WebhookTeamRemovedFromRepositoryPropRepositoryPropOwner, None] = Field(
        title="User"
    )
    permissions: Missing[
        WebhookTeamRemovedFromRepositoryPropRepositoryPropPermissions
    ] = Field(default=UNSET)
    private: bool = Field(description="Whether the repository is private or public.")
    public: Missing[bool] = Field(default=UNSET)
    pulls_url: str = Field()
    pushed_at: Union[int, datetime, None] = Field()
    releases_url: str = Field()
    role_name: Missing[Union[str, None]] = Field(default=UNSET)
    size: int = Field()
    ssh_url: str = Field()
    stargazers: Missing[int] = Field(default=UNSET)
    stargazers_count: int = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    svn_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    topics: List[str] = Field()
    trees_url: str = Field()
    updated_at: datetime = Field()
    url: str = Field()
    visibility: Literal["public", "private", "internal"] = Field()
    watchers: int = Field()
    watchers_count: int = Field()


class WebhookTeamRemovedFromRepositoryPropRepositoryPropCustomProperties(
    ExtraGitHubModel
):
    """WebhookTeamRemovedFromRepositoryPropRepositoryPropCustomProperties

    The custom properties that were defined for the repository. The keys are the
    custom property names, and the values are the corresponding custom property
    values.
    """


class WebhookTeamRemovedFromRepositoryPropRepositoryPropLicense(GitHubModel):
    """License"""

    key: str = Field()
    name: str = Field()
    node_id: str = Field()
    spdx_id: str = Field()
    url: Union[str, None] = Field()


class WebhookTeamRemovedFromRepositoryPropRepositoryPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookTeamRemovedFromRepositoryPropRepositoryPropPermissions(GitHubModel):
    """WebhookTeamRemovedFromRepositoryPropRepositoryPropPermissions"""

    admin: bool = Field()
    maintain: Missing[bool] = Field(default=UNSET)
    pull: bool = Field()
    push: bool = Field()
    triage: Missing[bool] = Field(default=UNSET)


class WebhookTeamRemovedFromRepositoryPropTeam(GitHubModel):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: Missing[bool] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Description of the team"
    )
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field(description="Unique identifier of the team")
    members_url: Missing[str] = Field(default=UNSET)
    name: str = Field(description="Name of the team")
    node_id: Missing[str] = Field(default=UNSET)
    parent: Missing[
        Union[WebhookTeamRemovedFromRepositoryPropTeamPropParent, None]
    ] = Field(default=UNSET)
    permission: Missing[str] = Field(
        default=UNSET,
        description="Permission that the team will have for its repositories",
    )
    privacy: Missing[Literal["open", "closed", "secret"]] = Field(default=UNSET)
    notification_setting: Missing[
        Literal["notifications_enabled", "notifications_disabled"]
    ] = Field(
        default=UNSET,
        description="Whether team members will receive notifications when their team is @mentioned",
    )
    repositories_url: Missing[str] = Field(default=UNSET)
    slug: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET, description="URL for the team")


class WebhookTeamRemovedFromRepositoryPropTeamPropParent(GitHubModel):
    """WebhookTeamRemovedFromRepositoryPropTeamPropParent"""

    description: Union[str, None] = Field(description="Description of the team")
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the team")
    members_url: str = Field()
    name: str = Field(description="Name of the team")
    node_id: str = Field()
    permission: str = Field(
        description="Permission that the team will have for its repositories"
    )
    privacy: Literal["open", "closed", "secret"] = Field()
    notification_setting: Literal[
        "notifications_enabled", "notifications_disabled"
    ] = Field(
        description="Whether team members will receive notifications when their team is @mentioned"
    )
    repositories_url: str = Field()
    slug: str = Field()
    url: str = Field(description="URL for the team")


class WebhookWatchStarted(GitHubModel):
    """watch started event"""

    action: Literal["started"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )


class WebhookWorkflowDispatch(GitHubModel):
    """workflow_dispatch event"""

    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    inputs: Union[WebhookWorkflowDispatchPropInputs, None] = Field()
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    ref: str = Field()
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )
    workflow: str = Field()


class WebhookWorkflowDispatchPropInputs(ExtraGitHubModel):
    """WebhookWorkflowDispatchPropInputs"""


class WebhookWorkflowJobCompleted(GitHubModel):
    """workflow_job completed event"""

    action: Literal["completed"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )
    workflow_job: WebhookWorkflowJobCompletedPropWorkflowJob = Field()
    deployment: Missing[Deployment] = Field(
        default=UNSET,
        title="Deployment",
        description="A request for a specific ref(branch,sha,tag) to be deployed",
    )


class WebhookWorkflowJobCompletedPropWorkflowJob(GitHubModel):
    """WebhookWorkflowJobCompletedPropWorkflowJob"""

    check_run_url: str = Field()
    completed_at: str = Field()
    conclusion: Literal[
        "success",
        "failure",
        "skipped",
        "cancelled",
        "action_required",
        "neutral",
        "timed_out",
    ] = Field()
    created_at: str = Field(description="The time that the job created.")
    head_sha: str = Field()
    html_url: str = Field()
    id: int = Field()
    labels: List[str] = Field(
        description='Custom labels for the job. Specified by the [`"runs-on"` attribute](https://docs.github.com/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on) in the workflow YAML.'
    )
    name: str = Field()
    node_id: str = Field()
    run_attempt: int = Field()
    run_id: int = Field()
    run_url: str = Field()
    runner_group_id: Union[Union[int, None], None] = Field(
        description="The ID of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`."
    )
    runner_group_name: Union[Union[str, None], None] = Field(
        description="The name of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`."
    )
    runner_id: Union[Union[int, None], None] = Field(
        description="The ID of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`."
    )
    runner_name: Union[Union[str, None], None] = Field(
        description="The name of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`."
    )
    started_at: str = Field()
    status: Literal["queued", "in_progress", "completed", "waiting"] = Field(
        description="The current status of the job. Can be `queued`, `in_progress`, `waiting`, or `completed`."
    )
    head_branch: Union[Union[str, None], None] = Field(
        description="The name of the current branch."
    )
    workflow_name: Union[Union[str, None], None] = Field(
        description="The name of the workflow."
    )
    steps: List[WebhookWorkflowJobCompletedPropWorkflowJobMergedSteps] = Field()
    url: str = Field()


class WebhookWorkflowJobCompletedPropWorkflowJobAllof0(GitHubModel):
    """Workflow Job

    The workflow job. Many `workflow_job` keys, such as `head_sha`, `conclusion`,
    and `started_at` are the same as those in a [`check_run`](#check_run) object.
    """

    check_run_url: str = Field()
    completed_at: Union[str, None] = Field()
    conclusion: Union[
        None,
        Literal[
            "success",
            "failure",
            "skipped",
            "cancelled",
            "action_required",
            "neutral",
            "timed_out",
        ],
    ] = Field()
    created_at: str = Field(description="The time that the job created.")
    head_sha: str = Field()
    html_url: str = Field()
    id: int = Field()
    labels: List[str] = Field(
        description='Custom labels for the job. Specified by the [`"runs-on"` attribute](https://docs.github.com/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on) in the workflow YAML.'
    )
    name: str = Field()
    node_id: str = Field()
    run_attempt: int = Field()
    run_id: int = Field()
    run_url: str = Field()
    runner_group_id: Union[int, None] = Field(
        description="The ID of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`."
    )
    runner_group_name: Union[str, None] = Field(
        description="The name of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`."
    )
    runner_id: Union[int, None] = Field(
        description="The ID of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`."
    )
    runner_name: Union[str, None] = Field(
        description="The name of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`."
    )
    started_at: str = Field()
    status: Literal["queued", "in_progress", "completed", "waiting"] = Field(
        description="The current status of the job. Can be `queued`, `in_progress`, `waiting`, or `completed`."
    )
    head_branch: Union[str, None] = Field(description="The name of the current branch.")
    workflow_name: Union[str, None] = Field(description="The name of the workflow.")
    steps: List[
        WebhookWorkflowJobCompletedPropWorkflowJobAllof0PropStepsItems
    ] = Field()
    url: str = Field()


class WebhookWorkflowJobCompletedPropWorkflowJobAllof0PropStepsItems(GitHubModel):
    """Workflow Step"""

    completed_at: Union[str, None] = Field()
    conclusion: Union[
        None, Literal["failure", "skipped", "success", "cancelled"]
    ] = Field()
    name: str = Field()
    number: int = Field()
    started_at: Union[str, None] = Field()
    status: Literal["in_progress", "completed", "queued"] = Field()


class WebhookWorkflowJobCompletedPropWorkflowJobAllof1(GitHubModel):
    """WebhookWorkflowJobCompletedPropWorkflowJobAllof1"""

    check_run_url: Missing[str] = Field(default=UNSET)
    completed_at: Missing[str] = Field(default=UNSET)
    conclusion: Literal[
        "success",
        "failure",
        "skipped",
        "cancelled",
        "action_required",
        "neutral",
        "timed_out",
    ] = Field()
    created_at: Missing[str] = Field(
        default=UNSET, description="The time that the job created."
    )
    head_sha: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    labels: Missing[List[Union[str, None]]] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    run_attempt: Missing[int] = Field(default=UNSET)
    run_id: Missing[int] = Field(default=UNSET)
    run_url: Missing[str] = Field(default=UNSET)
    runner_group_id: Missing[Union[int, None]] = Field(default=UNSET)
    runner_group_name: Missing[Union[str, None]] = Field(default=UNSET)
    runner_id: Missing[Union[int, None]] = Field(default=UNSET)
    runner_name: Missing[Union[str, None]] = Field(default=UNSET)
    started_at: Missing[str] = Field(default=UNSET)
    status: Missing[str] = Field(default=UNSET)
    head_branch: Missing[Union[str, None]] = Field(
        default=UNSET, description="The name of the current branch."
    )
    workflow_name: Missing[Union[str, None]] = Field(
        default=UNSET, description="The name of the workflow."
    )
    steps: Missing[
        List[
            Union[WebhookWorkflowJobCompletedPropWorkflowJobAllof1PropStepsItems, None]
        ]
    ] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookWorkflowJobCompletedPropWorkflowJobAllof1PropStepsItems(GitHubModel):
    """WebhookWorkflowJobCompletedPropWorkflowJobAllof1PropStepsItems"""


class WebhookWorkflowJobCompletedPropWorkflowJobMergedSteps(GitHubModel):
    """WebhookWorkflowJobCompletedPropWorkflowJobMergedSteps"""

    completed_at: Union[str, None] = Field()
    conclusion: Union[
        None, Literal["failure", "skipped", "success", "cancelled"]
    ] = Field()
    name: str = Field()
    number: int = Field()
    started_at: Union[str, None] = Field()
    status: Literal["in_progress", "completed", "queued"] = Field()


class WebhookWorkflowJobInProgress(GitHubModel):
    """workflow_job in_progress event"""

    action: Literal["in_progress"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )
    workflow_job: WebhookWorkflowJobInProgressPropWorkflowJob = Field()
    deployment: Missing[Deployment] = Field(
        default=UNSET,
        title="Deployment",
        description="A request for a specific ref(branch,sha,tag) to be deployed",
    )


class WebhookWorkflowJobInProgressPropWorkflowJob(GitHubModel):
    """WebhookWorkflowJobInProgressPropWorkflowJob"""

    check_run_url: str = Field()
    completed_at: Union[Union[str, None], None] = Field()
    conclusion: Union[
        Literal["success", "failure", "cancelled", "neutral"], None
    ] = Field()
    created_at: str = Field(description="The time that the job created.")
    head_sha: str = Field()
    html_url: str = Field()
    id: int = Field()
    labels: List[str] = Field(
        description='Custom labels for the job. Specified by the [`"runs-on"` attribute](https://docs.github.com/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on) in the workflow YAML.'
    )
    name: str = Field()
    node_id: str = Field()
    run_attempt: int = Field()
    run_id: int = Field()
    run_url: str = Field()
    runner_group_id: Union[Union[int, None], None] = Field(
        description="The ID of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`."
    )
    runner_group_name: Union[Union[str, None], None] = Field(
        description="The name of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`."
    )
    runner_id: Union[Union[int, None], None] = Field(
        description="The ID of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`."
    )
    runner_name: Union[Union[str, None], None] = Field(
        description="The name of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`."
    )
    started_at: str = Field()
    status: Literal["queued", "in_progress", "completed"] = Field(
        description="The current status of the job. Can be `queued`, `in_progress`, or `completed`."
    )
    head_branch: Union[Union[str, None], None] = Field(
        description="The name of the current branch."
    )
    workflow_name: Union[Union[str, None], None] = Field(
        description="The name of the workflow."
    )
    steps: List[WebhookWorkflowJobInProgressPropWorkflowJobMergedSteps] = Field()
    url: str = Field()


class WebhookWorkflowJobInProgressPropWorkflowJobAllof0(GitHubModel):
    """Workflow Job

    The workflow job. Many `workflow_job` keys, such as `head_sha`, `conclusion`,
    and `started_at` are the same as those in a [`check_run`](#check_run) object.
    """

    check_run_url: str = Field()
    completed_at: Union[str, None] = Field()
    conclusion: Union[
        None, Literal["success", "failure", "cancelled", "neutral"]
    ] = Field()
    created_at: str = Field(description="The time that the job created.")
    head_sha: str = Field()
    html_url: str = Field()
    id: int = Field()
    labels: List[str] = Field(
        description='Custom labels for the job. Specified by the [`"runs-on"` attribute](https://docs.github.com/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on) in the workflow YAML.'
    )
    name: str = Field()
    node_id: str = Field()
    run_attempt: int = Field()
    run_id: int = Field()
    run_url: str = Field()
    runner_group_id: Union[int, None] = Field(
        description="The ID of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`."
    )
    runner_group_name: Union[str, None] = Field(
        description="The name of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`."
    )
    runner_id: Union[int, None] = Field(
        description="The ID of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`."
    )
    runner_name: Union[str, None] = Field(
        description="The name of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`."
    )
    started_at: str = Field()
    status: Literal["queued", "in_progress", "completed"] = Field(
        description="The current status of the job. Can be `queued`, `in_progress`, or `completed`."
    )
    head_branch: Union[str, None] = Field(description="The name of the current branch.")
    workflow_name: Union[str, None] = Field(description="The name of the workflow.")
    steps: List[
        WebhookWorkflowJobInProgressPropWorkflowJobAllof0PropStepsItems
    ] = Field()
    url: str = Field()


class WebhookWorkflowJobInProgressPropWorkflowJobAllof0PropStepsItems(GitHubModel):
    """Workflow Step"""

    completed_at: Union[str, None] = Field()
    conclusion: Union[
        None, Literal["failure", "skipped", "success", "cancelled"]
    ] = Field()
    name: str = Field()
    number: int = Field()
    started_at: Union[str, None] = Field()
    status: Literal["in_progress", "completed", "queued", "pending"] = Field()


class WebhookWorkflowJobInProgressPropWorkflowJobAllof1(GitHubModel):
    """WebhookWorkflowJobInProgressPropWorkflowJobAllof1"""

    check_run_url: Missing[str] = Field(default=UNSET)
    completed_at: Missing[Union[str, None]] = Field(default=UNSET)
    conclusion: Missing[Union[str, None]] = Field(default=UNSET)
    created_at: Missing[str] = Field(
        default=UNSET, description="The time that the job created."
    )
    head_sha: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    labels: Missing[List[str]] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    run_attempt: Missing[int] = Field(default=UNSET)
    run_id: Missing[int] = Field(default=UNSET)
    run_url: Missing[str] = Field(default=UNSET)
    runner_group_id: Missing[Union[int, None]] = Field(default=UNSET)
    runner_group_name: Missing[Union[str, None]] = Field(default=UNSET)
    runner_id: Missing[Union[int, None]] = Field(default=UNSET)
    runner_name: Missing[Union[str, None]] = Field(default=UNSET)
    started_at: Missing[str] = Field(default=UNSET)
    status: Literal["in_progress", "completed", "queued"] = Field()
    head_branch: Missing[Union[str, None]] = Field(
        default=UNSET, description="The name of the current branch."
    )
    workflow_name: Missing[Union[str, None]] = Field(
        default=UNSET, description="The name of the workflow."
    )
    steps: List[
        WebhookWorkflowJobInProgressPropWorkflowJobAllof1PropStepsItems
    ] = Field()
    url: Missing[str] = Field(default=UNSET)


class WebhookWorkflowJobInProgressPropWorkflowJobAllof1PropStepsItems(GitHubModel):
    """Workflow Step"""

    completed_at: Union[str, None] = Field()
    conclusion: Union[str, None] = Field()
    name: str = Field()
    number: int = Field()
    started_at: Union[str, None] = Field()
    status: Literal["in_progress", "completed", "pending", "queued"] = Field()


class WebhookWorkflowJobInProgressPropWorkflowJobMergedSteps(GitHubModel):
    """WebhookWorkflowJobInProgressPropWorkflowJobMergedSteps"""

    completed_at: Union[Union[str, None], None] = Field()
    conclusion: Union[
        Literal["failure", "skipped", "success", "cancelled"], None
    ] = Field()
    name: str = Field()
    number: int = Field()
    started_at: Union[Union[str, None], None] = Field()
    status: Literal["in_progress", "completed", "queued", "pending"] = Field()


class WebhookWorkflowJobQueued(GitHubModel):
    """workflow_job queued event"""

    action: Literal["queued"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )
    workflow_job: WebhookWorkflowJobQueuedPropWorkflowJob = Field()
    deployment: Missing[Deployment] = Field(
        default=UNSET,
        title="Deployment",
        description="A request for a specific ref(branch,sha,tag) to be deployed",
    )


class WebhookWorkflowJobQueuedPropWorkflowJob(GitHubModel):
    """WebhookWorkflowJobQueuedPropWorkflowJob"""

    check_run_url: str = Field()
    completed_at: Union[str, None] = Field()
    conclusion: Union[str, None] = Field()
    created_at: str = Field(description="The time that the job created.")
    head_sha: str = Field()
    html_url: str = Field()
    id: int = Field()
    labels: List[str] = Field()
    name: str = Field()
    node_id: str = Field()
    run_attempt: int = Field()
    run_id: int = Field()
    run_url: str = Field()
    runner_group_id: Union[int, None] = Field()
    runner_group_name: Union[str, None] = Field()
    runner_id: Union[int, None] = Field()
    runner_name: Union[str, None] = Field()
    started_at: datetime = Field()
    status: Literal["queued", "in_progress", "completed", "waiting"] = Field()
    head_branch: Union[str, None] = Field(description="The name of the current branch.")
    workflow_name: Union[str, None] = Field(description="The name of the workflow.")
    steps: List[WebhookWorkflowJobQueuedPropWorkflowJobPropStepsItems] = Field()
    url: str = Field()


class WebhookWorkflowJobQueuedPropWorkflowJobPropStepsItems(GitHubModel):
    """Workflow Step"""

    completed_at: Union[str, None] = Field()
    conclusion: Union[
        None, Literal["failure", "skipped", "success", "cancelled"]
    ] = Field()
    name: str = Field()
    number: int = Field()
    started_at: Union[str, None] = Field()
    status: Literal["completed", "in_progress", "queued", "pending"] = Field()


class WebhookWorkflowJobWaiting(GitHubModel):
    """workflow_job waiting event"""

    action: Literal["waiting"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )
    workflow_job: WebhookWorkflowJobWaitingPropWorkflowJob = Field()
    deployment: Missing[Deployment] = Field(
        default=UNSET,
        title="Deployment",
        description="A request for a specific ref(branch,sha,tag) to be deployed",
    )


class WebhookWorkflowJobWaitingPropWorkflowJob(GitHubModel):
    """WebhookWorkflowJobWaitingPropWorkflowJob"""

    check_run_url: str = Field()
    completed_at: Union[str, None] = Field()
    conclusion: Union[str, None] = Field()
    created_at: str = Field(description="The time that the job created.")
    head_sha: str = Field()
    html_url: str = Field()
    id: int = Field()
    labels: List[str] = Field()
    name: str = Field()
    node_id: str = Field()
    run_attempt: int = Field()
    run_id: int = Field()
    run_url: str = Field()
    runner_group_id: Union[int, None] = Field()
    runner_group_name: Union[str, None] = Field()
    runner_id: Union[int, None] = Field()
    runner_name: Union[str, None] = Field()
    started_at: datetime = Field()
    head_branch: Union[str, None] = Field(description="The name of the current branch.")
    workflow_name: Union[str, None] = Field(description="The name of the workflow.")
    status: Literal["queued", "in_progress", "completed", "waiting"] = Field()
    steps: List[WebhookWorkflowJobWaitingPropWorkflowJobPropStepsItems] = Field()
    url: str = Field()


class WebhookWorkflowJobWaitingPropWorkflowJobPropStepsItems(GitHubModel):
    """Workflow Step"""

    completed_at: Union[str, None] = Field()
    conclusion: Union[
        None, Literal["failure", "skipped", "success", "cancelled"]
    ] = Field()
    name: str = Field()
    number: int = Field()
    started_at: Union[str, None] = Field()
    status: Literal[
        "completed", "in_progress", "queued", "pending", "waiting"
    ] = Field()


class WebhookWorkflowRunCompleted(GitHubModel):
    """workflow_run completed event"""

    action: Literal["completed"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )
    workflow: Union[WebhookWorkflowRunCompletedPropWorkflow, None] = Field(
        title="Workflow"
    )
    workflow_run: WebhookWorkflowRunCompletedPropWorkflowRun = Field()


class WebhookWorkflowRunCompletedPropWorkflow(GitHubModel):
    """Workflow"""

    badge_url: str = Field()
    created_at: datetime = Field()
    html_url: str = Field()
    id: int = Field()
    name: str = Field()
    node_id: str = Field()
    path: str = Field()
    state: str = Field()
    updated_at: datetime = Field()
    url: str = Field()


class WebhookWorkflowRunCompletedPropWorkflowRun(GitHubModel):
    """WebhookWorkflowRunCompletedPropWorkflowRun"""

    actor: WebhookWorkflowRunCompletedPropWorkflowRunMergedActor = Field()
    artifacts_url: str = Field()
    cancel_url: str = Field()
    check_suite_id: int = Field()
    check_suite_node_id: str = Field()
    check_suite_url: str = Field()
    conclusion: Literal[
        "success",
        "failure",
        "neutral",
        "cancelled",
        "timed_out",
        "action_required",
        "stale",
        "skipped",
    ] = Field()
    created_at: datetime = Field()
    event: str = Field()
    head_branch: Union[Union[str, None], None] = Field()
    head_commit: WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadCommit = Field()
    head_repository: WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadRepository = (
        Field()
    )
    head_sha: str = Field()
    html_url: str = Field()
    id: int = Field()
    jobs_url: str = Field()
    logs_url: str = Field()
    name: Union[Union[str, None], None] = Field()
    node_id: str = Field()
    path: str = Field()
    previous_attempt_url: Union[Union[str, None], None] = Field()
    pull_requests: List[
        WebhookWorkflowRunCompletedPropWorkflowRunMergedPullRequests
    ] = Field()
    referenced_workflows: Missing[
        Union[
            Union[
                List[
                    WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropReferencedWorkflowsItems
                ],
                None,
            ],
            None,
        ]
    ] = Field(default=UNSET)
    repository: WebhookWorkflowRunCompletedPropWorkflowRunMergedRepository = Field()
    rerun_url: str = Field()
    run_attempt: int = Field()
    run_number: int = Field()
    run_started_at: datetime = Field()
    status: Literal[
        "requested", "in_progress", "completed", "queued", "pending", "waiting"
    ] = Field()
    triggering_actor: Union[
        WebhookWorkflowRunCompletedPropWorkflowRunMergedTriggeringActor, None
    ] = Field()
    updated_at: datetime = Field()
    url: str = Field()
    workflow_id: int = Field()
    workflow_url: str = Field()


class WebhookWorkflowRunCompletedPropWorkflowRunAllof0(GitHubModel):
    """Workflow Run"""

    actor: Union[
        WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropActor, None
    ] = Field(title="User")
    artifacts_url: str = Field()
    cancel_url: str = Field()
    check_suite_id: int = Field()
    check_suite_node_id: str = Field()
    check_suite_url: str = Field()
    conclusion: Union[
        None,
        Literal[
            "success",
            "failure",
            "neutral",
            "cancelled",
            "timed_out",
            "action_required",
            "stale",
            "skipped",
        ],
    ] = Field()
    created_at: datetime = Field()
    event: str = Field()
    head_branch: Union[str, None] = Field()
    head_commit: WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropHeadCommit = Field(
        title="SimpleCommit"
    )
    head_repository: WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropHeadRepository = Field(
        title="Repository Lite"
    )
    head_sha: str = Field()
    html_url: str = Field()
    id: int = Field()
    jobs_url: str = Field()
    logs_url: str = Field()
    name: Union[str, None] = Field()
    node_id: str = Field()
    path: str = Field()
    previous_attempt_url: Union[str, None] = Field()
    pull_requests: List[
        WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItems
    ] = Field()
    referenced_workflows: Missing[
        Union[
            List[
                WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropReferencedWorkflowsItems
            ],
            None,
        ]
    ] = Field(default=UNSET)
    repository: WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropRepository = Field(
        title="Repository Lite"
    )
    rerun_url: str = Field()
    run_attempt: int = Field()
    run_number: int = Field()
    run_started_at: datetime = Field()
    status: Literal[
        "requested", "in_progress", "completed", "queued", "pending", "waiting"
    ] = Field()
    triggering_actor: Union[
        WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropTriggeringActor, None
    ] = Field(title="User")
    updated_at: datetime = Field()
    url: str = Field()
    workflow_id: int = Field()
    workflow_url: str = Field()


class WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropActor(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropHeadCommit(GitHubModel):
    """SimpleCommit"""

    author: WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropHeadCommitPropAuthor = (
        Field(
            title="Committer",
            description="Metaproperties for Git author/committer information.",
        )
    )
    committer: WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropHeadCommitPropCommitter = Field(
        title="Committer",
        description="Metaproperties for Git author/committer information.",
    )
    id: str = Field()
    message: str = Field()
    timestamp: str = Field()
    tree_id: str = Field()


class WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropHeadCommitPropAuthor(
    GitHubModel
):
    """Committer

    Metaproperties for Git author/committer information.
    """

    date: Missing[datetime] = Field(default=UNSET)
    email: Union[str, None] = Field()
    name: str = Field(description="The git author's name.")
    username: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropHeadCommitPropCommitter(
    GitHubModel
):
    """Committer

    Metaproperties for Git author/committer information.
    """

    date: Missing[datetime] = Field(default=UNSET)
    email: Union[str, None] = Field()
    name: str = Field(description="The git author's name.")
    username: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropHeadRepository(GitHubModel):
    """Repository Lite"""

    archive_url: str = Field()
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    languages_url: str = Field()
    merges_url: str = Field()
    milestones_url: str = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    owner: Union[
        WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropHeadRepositoryPropOwner,
        None,
    ] = Field(title="User")
    private: bool = Field(description="Whether the repository is private or public.")
    pulls_url: str = Field()
    releases_url: str = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    trees_url: str = Field()
    url: str = Field()


class WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropHeadRepositoryPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItems(
    GitHubModel
):
    """WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItems"""

    base: WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItemsPropBase = (
        Field()
    )
    head: WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItemsPropHead = (
        Field()
    )
    id: float = Field()
    number: float = Field()
    url: str = Field()


class WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItemsPropBase(
    GitHubModel
):
    """WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItemsPropBase"""

    ref: str = Field()
    repo: WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItemsPropBasePropRepo = Field(
        title="Repo Ref"
    )
    sha: str = Field()


class WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItemsPropBasePropRepo(
    GitHubModel
):
    """Repo Ref"""

    id: int = Field()
    name: str = Field()
    url: str = Field()


class WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItemsPropHead(
    GitHubModel
):
    """WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItemsPropHead"""

    ref: str = Field()
    repo: WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItemsPropHeadPropRepo = Field(
        title="Repo Ref"
    )
    sha: str = Field()


class WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItemsPropHeadPropRepo(
    GitHubModel
):
    """Repo Ref"""

    id: int = Field()
    name: str = Field()
    url: str = Field()


class WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropReferencedWorkflowsItems(
    GitHubModel
):
    """WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropReferencedWorkflowsItems"""

    path: str = Field()
    ref: Missing[str] = Field(default=UNSET)
    sha: str = Field()


class WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropRepository(GitHubModel):
    """Repository Lite"""

    archive_url: str = Field()
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    languages_url: str = Field()
    merges_url: str = Field()
    milestones_url: str = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    owner: Union[
        WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropRepositoryPropOwner, None
    ] = Field(title="User")
    private: bool = Field(description="Whether the repository is private or public.")
    pulls_url: str = Field()
    releases_url: str = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    trees_url: str = Field()
    url: str = Field()


class WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropRepositoryPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropTriggeringActor(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunCompletedPropWorkflowRunAllof1(GitHubModel):
    """WebhookWorkflowRunCompletedPropWorkflowRunAllof1"""

    actor: Missing[WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropActor] = Field(
        default=UNSET
    )
    artifacts_url: Missing[str] = Field(default=UNSET)
    cancel_url: Missing[str] = Field(default=UNSET)
    check_suite_id: Missing[int] = Field(default=UNSET)
    check_suite_node_id: Missing[str] = Field(default=UNSET)
    check_suite_url: Missing[str] = Field(default=UNSET)
    conclusion: Literal[
        "success",
        "failure",
        "neutral",
        "cancelled",
        "timed_out",
        "action_required",
        "stale",
        "skipped",
    ] = Field()
    created_at: Missing[str] = Field(default=UNSET)
    event: Missing[str] = Field(default=UNSET)
    head_branch: Missing[Union[str, None]] = Field(default=UNSET)
    head_commit: Missing[
        WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadCommit
    ] = Field(default=UNSET)
    head_repository: Missing[
        WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadRepository
    ] = Field(default=UNSET)
    head_sha: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    jobs_url: Missing[str] = Field(default=UNSET)
    logs_url: Missing[str] = Field(default=UNSET)
    name: Missing[Union[str, None]] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    path: Missing[str] = Field(default=UNSET)
    previous_attempt_url: Missing[Union[str, None]] = Field(default=UNSET)
    pull_requests: Missing[
        List[
            Union[
                WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropPullRequestsItems,
                None,
            ]
        ]
    ] = Field(default=UNSET)
    referenced_workflows: Missing[
        Union[
            List[
                WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropReferencedWorkflowsItems
            ],
            None,
        ]
    ] = Field(default=UNSET)
    repository: Missing[
        WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropRepository
    ] = Field(default=UNSET)
    rerun_url: Missing[str] = Field(default=UNSET)
    run_attempt: Missing[int] = Field(default=UNSET)
    run_number: Missing[int] = Field(default=UNSET)
    run_started_at: Missing[str] = Field(default=UNSET)
    status: Missing[str] = Field(default=UNSET)
    triggering_actor: Missing[
        Union[WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropTriggeringActor, None]
    ] = Field(default=UNSET)
    updated_at: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)
    workflow_id: Missing[int] = Field(default=UNSET)
    workflow_url: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropActor(GitHubModel):
    """WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropActor"""

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadCommit(GitHubModel):
    """WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadCommit"""

    author: Missing[
        WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadCommitPropAuthor
    ] = Field(default=UNSET)
    committer: Missing[
        WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadCommitPropCommitter
    ] = Field(default=UNSET)
    id: Missing[str] = Field(default=UNSET)
    message: Missing[str] = Field(default=UNSET)
    timestamp: Missing[str] = Field(default=UNSET)
    tree_id: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadCommitPropAuthor(
    GitHubModel
):
    """WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadCommitPropAuthor"""

    email: Missing[str] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadCommitPropCommitter(
    GitHubModel
):
    """WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadCommitPropCommitter"""

    email: Missing[str] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadRepository(GitHubModel):
    """WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadRepository"""

    archive_url: Missing[str] = Field(default=UNSET)
    assignees_url: Missing[str] = Field(default=UNSET)
    blobs_url: Missing[str] = Field(default=UNSET)
    branches_url: Missing[str] = Field(default=UNSET)
    collaborators_url: Missing[str] = Field(default=UNSET)
    comments_url: Missing[str] = Field(default=UNSET)
    commits_url: Missing[str] = Field(default=UNSET)
    compare_url: Missing[str] = Field(default=UNSET)
    contents_url: Missing[str] = Field(default=UNSET)
    contributors_url: Missing[str] = Field(default=UNSET)
    deployments_url: Missing[str] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(default=UNSET)
    downloads_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    fork: Missing[bool] = Field(default=UNSET)
    forks_url: Missing[str] = Field(default=UNSET)
    full_name: Missing[str] = Field(default=UNSET)
    git_commits_url: Missing[str] = Field(default=UNSET)
    git_refs_url: Missing[str] = Field(default=UNSET)
    git_tags_url: Missing[str] = Field(default=UNSET)
    hooks_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    issue_comment_url: Missing[str] = Field(default=UNSET)
    issue_events_url: Missing[str] = Field(default=UNSET)
    issues_url: Missing[str] = Field(default=UNSET)
    keys_url: Missing[str] = Field(default=UNSET)
    labels_url: Missing[str] = Field(default=UNSET)
    languages_url: Missing[str] = Field(default=UNSET)
    merges_url: Missing[str] = Field(default=UNSET)
    milestones_url: Missing[str] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    notifications_url: Missing[str] = Field(default=UNSET)
    owner: Missing[
        WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadRepositoryPropOwner
    ] = Field(default=UNSET)
    private: Missing[bool] = Field(default=UNSET)
    pulls_url: Missing[str] = Field(default=UNSET)
    releases_url: Missing[str] = Field(default=UNSET)
    stargazers_url: Missing[str] = Field(default=UNSET)
    statuses_url: Missing[str] = Field(default=UNSET)
    subscribers_url: Missing[str] = Field(default=UNSET)
    subscription_url: Missing[str] = Field(default=UNSET)
    tags_url: Missing[str] = Field(default=UNSET)
    teams_url: Missing[str] = Field(default=UNSET)
    trees_url: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadRepositoryPropOwner(
    GitHubModel
):
    """WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadRepositoryPropOwner"""

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropPullRequestsItems(
    GitHubModel
):
    """WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropPullRequestsItems"""


class WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropReferencedWorkflowsItems(
    GitHubModel
):
    """WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropReferencedWorkflowsItems"""

    path: str = Field()
    ref: Missing[str] = Field(default=UNSET)
    sha: str = Field()


class WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropRepository(GitHubModel):
    """WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropRepository"""

    archive_url: Missing[str] = Field(default=UNSET)
    assignees_url: Missing[str] = Field(default=UNSET)
    blobs_url: Missing[str] = Field(default=UNSET)
    branches_url: Missing[str] = Field(default=UNSET)
    collaborators_url: Missing[str] = Field(default=UNSET)
    comments_url: Missing[str] = Field(default=UNSET)
    commits_url: Missing[str] = Field(default=UNSET)
    compare_url: Missing[str] = Field(default=UNSET)
    contents_url: Missing[str] = Field(default=UNSET)
    contributors_url: Missing[str] = Field(default=UNSET)
    deployments_url: Missing[str] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(default=UNSET)
    downloads_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    fork: Missing[bool] = Field(default=UNSET)
    forks_url: Missing[str] = Field(default=UNSET)
    full_name: Missing[str] = Field(default=UNSET)
    git_commits_url: Missing[str] = Field(default=UNSET)
    git_refs_url: Missing[str] = Field(default=UNSET)
    git_tags_url: Missing[str] = Field(default=UNSET)
    hooks_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    issue_comment_url: Missing[str] = Field(default=UNSET)
    issue_events_url: Missing[str] = Field(default=UNSET)
    issues_url: Missing[str] = Field(default=UNSET)
    keys_url: Missing[str] = Field(default=UNSET)
    labels_url: Missing[str] = Field(default=UNSET)
    languages_url: Missing[str] = Field(default=UNSET)
    merges_url: Missing[str] = Field(default=UNSET)
    milestones_url: Missing[str] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    notifications_url: Missing[str] = Field(default=UNSET)
    owner: Missing[
        WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropRepositoryPropOwner
    ] = Field(default=UNSET)
    private: Missing[bool] = Field(default=UNSET)
    pulls_url: Missing[str] = Field(default=UNSET)
    releases_url: Missing[str] = Field(default=UNSET)
    stargazers_url: Missing[str] = Field(default=UNSET)
    statuses_url: Missing[str] = Field(default=UNSET)
    subscribers_url: Missing[str] = Field(default=UNSET)
    subscription_url: Missing[str] = Field(default=UNSET)
    tags_url: Missing[str] = Field(default=UNSET)
    teams_url: Missing[str] = Field(default=UNSET)
    trees_url: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropRepositoryPropOwner(
    GitHubModel
):
    """WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropRepositoryPropOwner"""

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropTriggeringActor(GitHubModel):
    """WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropTriggeringActor"""

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunCompletedPropWorkflowRunMergedActor(GitHubModel):
    """WebhookWorkflowRunCompletedPropWorkflowRunMergedActor"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadCommitPropAuthor(GitHubModel):
    """WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadCommitPropAuthor"""

    date: Missing[datetime] = Field(default=UNSET)
    email: str = Field()
    name: str = Field(description="The git author's name.")
    username: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadCommitPropCommitter(
    GitHubModel
):
    """WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadCommitPropCommitter"""

    date: Missing[datetime] = Field(default=UNSET)
    email: str = Field()
    name: str = Field(description="The git author's name.")
    username: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadCommit(GitHubModel):
    """WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadCommit"""

    author: WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadCommitPropAuthor = (
        Field()
    )
    committer: WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadCommitPropCommitter = (
        Field()
    )
    id: str = Field()
    message: str = Field()
    timestamp: str = Field()
    tree_id: str = Field()


class WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadRepositoryPropOwner(
    GitHubModel
):
    """WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadRepositoryPropOwner"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadRepository(GitHubModel):
    """WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadRepository"""

    archive_url: str = Field()
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    deployments_url: str = Field()
    description: Union[Union[str, None], None] = Field()
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    languages_url: str = Field()
    merges_url: str = Field()
    milestones_url: str = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    owner: WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadRepositoryPropOwner = (
        Field()
    )
    private: bool = Field(description="Whether the repository is private or public.")
    pulls_url: str = Field()
    releases_url: str = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    trees_url: str = Field()
    url: str = Field()


class WebhookWorkflowRunCompletedPropWorkflowRunMergedPullRequests(GitHubModel):
    """WebhookWorkflowRunCompletedPropWorkflowRunMergedPullRequests"""

    base: WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItemsPropBase = (
        Field()
    )
    head: WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItemsPropHead = (
        Field()
    )
    id: float = Field()
    number: float = Field()
    url: str = Field()


class WebhookWorkflowRunCompletedPropWorkflowRunMergedRepositoryPropOwner(GitHubModel):
    """WebhookWorkflowRunCompletedPropWorkflowRunMergedRepositoryPropOwner"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunCompletedPropWorkflowRunMergedRepository(GitHubModel):
    """WebhookWorkflowRunCompletedPropWorkflowRunMergedRepository"""

    archive_url: str = Field()
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    deployments_url: str = Field()
    description: Union[Union[str, None], None] = Field()
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    languages_url: str = Field()
    merges_url: str = Field()
    milestones_url: str = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    owner: WebhookWorkflowRunCompletedPropWorkflowRunMergedRepositoryPropOwner = Field()
    private: bool = Field(description="Whether the repository is private or public.")
    pulls_url: str = Field()
    releases_url: str = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    trees_url: str = Field()
    url: str = Field()


class WebhookWorkflowRunCompletedPropWorkflowRunMergedTriggeringActor(GitHubModel):
    """WebhookWorkflowRunCompletedPropWorkflowRunMergedTriggeringActor"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunInProgress(GitHubModel):
    """workflow_run in_progress event"""

    action: Literal["in_progress"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )
    workflow: Union[WebhookWorkflowRunInProgressPropWorkflow, None] = Field(
        title="Workflow"
    )
    workflow_run: WebhookWorkflowRunInProgressPropWorkflowRun = Field()


class WebhookWorkflowRunInProgressPropWorkflow(GitHubModel):
    """Workflow"""

    badge_url: str = Field()
    created_at: datetime = Field()
    html_url: str = Field()
    id: int = Field()
    name: str = Field()
    node_id: str = Field()
    path: str = Field()
    state: str = Field()
    updated_at: datetime = Field()
    url: str = Field()


class WebhookWorkflowRunInProgressPropWorkflowRun(GitHubModel):
    """WebhookWorkflowRunInProgressPropWorkflowRun"""

    actor: WebhookWorkflowRunInProgressPropWorkflowRunMergedActor = Field()
    artifacts_url: str = Field()
    cancel_url: str = Field()
    check_suite_id: int = Field()
    check_suite_node_id: str = Field()
    check_suite_url: str = Field()
    conclusion: Union[
        Literal[
            "success",
            "failure",
            "neutral",
            "cancelled",
            "timed_out",
            "action_required",
            "stale",
            "skipped",
        ],
        None,
    ] = Field()
    created_at: datetime = Field()
    event: str = Field()
    head_branch: Union[Union[str, None], None] = Field()
    head_commit: WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadCommit = Field()
    head_repository: WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadRepository = (
        Field()
    )
    head_sha: str = Field()
    html_url: str = Field()
    id: int = Field()
    jobs_url: str = Field()
    logs_url: str = Field()
    name: Union[Union[str, None], None] = Field()
    node_id: str = Field()
    path: str = Field()
    previous_attempt_url: Union[Union[str, None], None] = Field()
    pull_requests: List[
        WebhookWorkflowRunInProgressPropWorkflowRunMergedPullRequests
    ] = Field()
    referenced_workflows: Missing[
        Union[
            Union[
                List[
                    WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropReferencedWorkflowsItems
                ],
                None,
            ],
            None,
        ]
    ] = Field(default=UNSET)
    repository: WebhookWorkflowRunInProgressPropWorkflowRunMergedRepository = Field()
    rerun_url: str = Field()
    run_attempt: int = Field()
    run_number: int = Field()
    run_started_at: datetime = Field()
    status: Literal[
        "requested", "in_progress", "completed", "queued", "pending"
    ] = Field()
    triggering_actor: WebhookWorkflowRunInProgressPropWorkflowRunMergedTriggeringActor = (
        Field()
    )
    updated_at: datetime = Field()
    url: str = Field()
    workflow_id: int = Field()
    workflow_url: str = Field()


class WebhookWorkflowRunInProgressPropWorkflowRunAllof0(GitHubModel):
    """Workflow Run"""

    actor: Union[
        WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropActor, None
    ] = Field(title="User")
    artifacts_url: str = Field()
    cancel_url: str = Field()
    check_suite_id: int = Field()
    check_suite_node_id: str = Field()
    check_suite_url: str = Field()
    conclusion: Union[
        None,
        Literal[
            "success",
            "failure",
            "neutral",
            "cancelled",
            "timed_out",
            "action_required",
            "stale",
            "skipped",
        ],
    ] = Field()
    created_at: datetime = Field()
    event: str = Field()
    head_branch: Union[str, None] = Field()
    head_commit: WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropHeadCommit = (
        Field(title="SimpleCommit")
    )
    head_repository: WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropHeadRepository = Field(
        title="Repository Lite"
    )
    head_sha: str = Field()
    html_url: str = Field()
    id: int = Field()
    jobs_url: str = Field()
    logs_url: str = Field()
    name: Union[str, None] = Field()
    node_id: str = Field()
    path: str = Field()
    previous_attempt_url: Union[str, None] = Field()
    pull_requests: List[
        WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItems
    ] = Field()
    referenced_workflows: Missing[
        Union[
            List[
                WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropReferencedWorkflowsItems
            ],
            None,
        ]
    ] = Field(default=UNSET)
    repository: WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropRepository = Field(
        title="Repository Lite"
    )
    rerun_url: str = Field()
    run_attempt: int = Field()
    run_number: int = Field()
    run_started_at: datetime = Field()
    status: Literal[
        "requested", "in_progress", "completed", "queued", "pending"
    ] = Field()
    triggering_actor: Union[
        WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropTriggeringActor, None
    ] = Field(title="User")
    updated_at: datetime = Field()
    url: str = Field()
    workflow_id: int = Field()
    workflow_url: str = Field()


class WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropActor(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropHeadCommit(GitHubModel):
    """SimpleCommit"""

    author: WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropHeadCommitPropAuthor = Field(
        title="Committer",
        description="Metaproperties for Git author/committer information.",
    )
    committer: WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropHeadCommitPropCommitter = Field(
        title="Committer",
        description="Metaproperties for Git author/committer information.",
    )
    id: str = Field()
    message: str = Field()
    timestamp: str = Field()
    tree_id: str = Field()


class WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropHeadCommitPropAuthor(
    GitHubModel
):
    """Committer

    Metaproperties for Git author/committer information.
    """

    date: Missing[datetime] = Field(default=UNSET)
    email: Union[str, None] = Field()
    name: str = Field(description="The git author's name.")
    username: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropHeadCommitPropCommitter(
    GitHubModel
):
    """Committer

    Metaproperties for Git author/committer information.
    """

    date: Missing[datetime] = Field(default=UNSET)
    email: Union[str, None] = Field()
    name: str = Field(description="The git author's name.")
    username: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropHeadRepository(GitHubModel):
    """Repository Lite"""

    archive_url: str = Field()
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    languages_url: str = Field()
    merges_url: str = Field()
    milestones_url: str = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    owner: Union[
        WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropHeadRepositoryPropOwner,
        None,
    ] = Field(title="User")
    private: bool = Field(description="Whether the repository is private or public.")
    pulls_url: str = Field()
    releases_url: str = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    trees_url: str = Field()
    url: str = Field()


class WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropHeadRepositoryPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItems(
    GitHubModel
):
    """WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItems"""

    base: WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItemsPropBase = (
        Field()
    )
    head: WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItemsPropHead = (
        Field()
    )
    id: float = Field()
    number: float = Field()
    url: str = Field()


class WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItemsPropBase(
    GitHubModel
):
    """WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItemsPropBase"""

    ref: str = Field()
    repo: WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItemsPropBasePropRepo = Field(
        title="Repo Ref"
    )
    sha: str = Field()


class WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItemsPropBasePropRepo(
    GitHubModel
):
    """Repo Ref"""

    id: int = Field()
    name: str = Field()
    url: str = Field()


class WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItemsPropHead(
    GitHubModel
):
    """WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItemsPropHead"""

    ref: str = Field()
    repo: WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItemsPropHeadPropRepo = Field(
        title="Repo Ref"
    )
    sha: str = Field()


class WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItemsPropHeadPropRepo(
    GitHubModel
):
    """Repo Ref"""

    id: int = Field()
    name: str = Field()
    url: str = Field()


class WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropReferencedWorkflowsItems(
    GitHubModel
):
    """WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropReferencedWorkflowsItems"""

    path: str = Field()
    ref: Missing[str] = Field(default=UNSET)
    sha: str = Field()


class WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropRepository(GitHubModel):
    """Repository Lite"""

    archive_url: str = Field()
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    languages_url: str = Field()
    merges_url: str = Field()
    milestones_url: str = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    owner: Union[
        WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropRepositoryPropOwner, None
    ] = Field(title="User")
    private: bool = Field(description="Whether the repository is private or public.")
    pulls_url: str = Field()
    releases_url: str = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    trees_url: str = Field()
    url: str = Field()


class WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropRepositoryPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropTriggeringActor(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunInProgressPropWorkflowRunAllof1(GitHubModel):
    """WebhookWorkflowRunInProgressPropWorkflowRunAllof1"""

    actor: Missing[WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropActor] = Field(
        default=UNSET
    )
    artifacts_url: Missing[str] = Field(default=UNSET)
    cancel_url: Missing[str] = Field(default=UNSET)
    check_suite_id: Missing[int] = Field(default=UNSET)
    check_suite_node_id: Missing[str] = Field(default=UNSET)
    check_suite_url: Missing[str] = Field(default=UNSET)
    conclusion: Union[
        None,
        Literal[
            "success",
            "failure",
            "neutral",
            "cancelled",
            "timed_out",
            "action_required",
            "skipped",
            "stale",
        ],
    ] = Field()
    created_at: Missing[str] = Field(default=UNSET)
    event: Missing[str] = Field(default=UNSET)
    head_branch: Missing[Union[str, None]] = Field(default=UNSET)
    head_commit: Missing[
        WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadCommit
    ] = Field(default=UNSET)
    head_repository: Missing[
        WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadRepository
    ] = Field(default=UNSET)
    head_sha: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    jobs_url: Missing[str] = Field(default=UNSET)
    logs_url: Missing[str] = Field(default=UNSET)
    name: Missing[Union[str, None]] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    path: Missing[str] = Field(default=UNSET)
    previous_attempt_url: Missing[Union[str, None]] = Field(default=UNSET)
    pull_requests: Missing[
        List[
            Union[
                WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropPullRequestsItems,
                None,
            ]
        ]
    ] = Field(default=UNSET)
    referenced_workflows: Missing[
        Union[
            List[
                WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropReferencedWorkflowsItems
            ],
            None,
        ]
    ] = Field(default=UNSET)
    repository: Missing[
        WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropRepository
    ] = Field(default=UNSET)
    rerun_url: Missing[str] = Field(default=UNSET)
    run_attempt: Missing[int] = Field(default=UNSET)
    run_number: Missing[int] = Field(default=UNSET)
    run_started_at: Missing[str] = Field(default=UNSET)
    status: Missing[str] = Field(default=UNSET)
    triggering_actor: Missing[
        WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropTriggeringActor
    ] = Field(default=UNSET)
    updated_at: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)
    workflow_id: Missing[int] = Field(default=UNSET)
    workflow_url: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropActor(GitHubModel):
    """WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropActor"""

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadCommit(GitHubModel):
    """WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadCommit"""

    author: Missing[
        WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadCommitPropAuthor
    ] = Field(default=UNSET)
    committer: Missing[
        WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadCommitPropCommitter
    ] = Field(default=UNSET)
    id: Missing[str] = Field(default=UNSET)
    message: Missing[str] = Field(default=UNSET)
    timestamp: Missing[str] = Field(default=UNSET)
    tree_id: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadCommitPropAuthor(
    GitHubModel
):
    """WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadCommitPropAuthor"""

    email: Missing[str] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadCommitPropCommitter(
    GitHubModel
):
    """WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadCommitPropCommitter"""

    email: Missing[str] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadRepository(GitHubModel):
    """WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadRepository"""

    archive_url: Missing[str] = Field(default=UNSET)
    assignees_url: Missing[str] = Field(default=UNSET)
    blobs_url: Missing[str] = Field(default=UNSET)
    branches_url: Missing[str] = Field(default=UNSET)
    collaborators_url: Missing[str] = Field(default=UNSET)
    comments_url: Missing[str] = Field(default=UNSET)
    commits_url: Missing[str] = Field(default=UNSET)
    compare_url: Missing[str] = Field(default=UNSET)
    contents_url: Missing[str] = Field(default=UNSET)
    contributors_url: Missing[str] = Field(default=UNSET)
    deployments_url: Missing[str] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(default=UNSET)
    downloads_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    fork: Missing[bool] = Field(default=UNSET)
    forks_url: Missing[str] = Field(default=UNSET)
    full_name: Missing[str] = Field(default=UNSET)
    git_commits_url: Missing[str] = Field(default=UNSET)
    git_refs_url: Missing[str] = Field(default=UNSET)
    git_tags_url: Missing[str] = Field(default=UNSET)
    hooks_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    issue_comment_url: Missing[str] = Field(default=UNSET)
    issue_events_url: Missing[str] = Field(default=UNSET)
    issues_url: Missing[str] = Field(default=UNSET)
    keys_url: Missing[str] = Field(default=UNSET)
    labels_url: Missing[str] = Field(default=UNSET)
    languages_url: Missing[str] = Field(default=UNSET)
    merges_url: Missing[str] = Field(default=UNSET)
    milestones_url: Missing[str] = Field(default=UNSET)
    name: Missing[Union[str, None]] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    notifications_url: Missing[str] = Field(default=UNSET)
    owner: Missing[
        WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadRepositoryPropOwner
    ] = Field(default=UNSET)
    private: Missing[bool] = Field(default=UNSET)
    pulls_url: Missing[str] = Field(default=UNSET)
    releases_url: Missing[str] = Field(default=UNSET)
    stargazers_url: Missing[str] = Field(default=UNSET)
    statuses_url: Missing[str] = Field(default=UNSET)
    subscribers_url: Missing[str] = Field(default=UNSET)
    subscription_url: Missing[str] = Field(default=UNSET)
    tags_url: Missing[str] = Field(default=UNSET)
    teams_url: Missing[str] = Field(default=UNSET)
    trees_url: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadRepositoryPropOwner(
    GitHubModel
):
    """WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadRepositoryPropOwner"""

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropPullRequestsItems(
    GitHubModel
):
    """WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropPullRequestsItems"""


class WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropReferencedWorkflowsItems(
    GitHubModel
):
    """WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropReferencedWorkflowsItems"""

    path: str = Field()
    ref: Missing[str] = Field(default=UNSET)
    sha: str = Field()


class WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropRepository(GitHubModel):
    """WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropRepository"""

    archive_url: Missing[str] = Field(default=UNSET)
    assignees_url: Missing[str] = Field(default=UNSET)
    blobs_url: Missing[str] = Field(default=UNSET)
    branches_url: Missing[str] = Field(default=UNSET)
    collaborators_url: Missing[str] = Field(default=UNSET)
    comments_url: Missing[str] = Field(default=UNSET)
    commits_url: Missing[str] = Field(default=UNSET)
    compare_url: Missing[str] = Field(default=UNSET)
    contents_url: Missing[str] = Field(default=UNSET)
    contributors_url: Missing[str] = Field(default=UNSET)
    deployments_url: Missing[str] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(default=UNSET)
    downloads_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    fork: Missing[bool] = Field(default=UNSET)
    forks_url: Missing[str] = Field(default=UNSET)
    full_name: Missing[str] = Field(default=UNSET)
    git_commits_url: Missing[str] = Field(default=UNSET)
    git_refs_url: Missing[str] = Field(default=UNSET)
    git_tags_url: Missing[str] = Field(default=UNSET)
    hooks_url: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    issue_comment_url: Missing[str] = Field(default=UNSET)
    issue_events_url: Missing[str] = Field(default=UNSET)
    issues_url: Missing[str] = Field(default=UNSET)
    keys_url: Missing[str] = Field(default=UNSET)
    labels_url: Missing[str] = Field(default=UNSET)
    languages_url: Missing[str] = Field(default=UNSET)
    merges_url: Missing[str] = Field(default=UNSET)
    milestones_url: Missing[str] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    notifications_url: Missing[str] = Field(default=UNSET)
    owner: Missing[
        WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropRepositoryPropOwner
    ] = Field(default=UNSET)
    private: Missing[bool] = Field(default=UNSET)
    pulls_url: Missing[str] = Field(default=UNSET)
    releases_url: Missing[str] = Field(default=UNSET)
    stargazers_url: Missing[str] = Field(default=UNSET)
    statuses_url: Missing[str] = Field(default=UNSET)
    subscribers_url: Missing[str] = Field(default=UNSET)
    subscription_url: Missing[str] = Field(default=UNSET)
    tags_url: Missing[str] = Field(default=UNSET)
    teams_url: Missing[str] = Field(default=UNSET)
    trees_url: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropRepositoryPropOwner(
    GitHubModel
):
    """WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropRepositoryPropOwner"""

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropTriggeringActor(GitHubModel):
    """WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropTriggeringActor"""

    avatar_url: Missing[str] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: Missing[int] = Field(default=UNSET)
    login: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunInProgressPropWorkflowRunMergedActor(GitHubModel):
    """WebhookWorkflowRunInProgressPropWorkflowRunMergedActor"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadCommitPropAuthor(
    GitHubModel
):
    """WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadCommitPropAuthor"""

    date: Missing[datetime] = Field(default=UNSET)
    email: str = Field()
    name: str = Field(description="The git author's name.")
    username: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadCommitPropCommitter(
    GitHubModel
):
    """WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadCommitPropCommitter"""

    date: Missing[datetime] = Field(default=UNSET)
    email: str = Field()
    name: str = Field(description="The git author's name.")
    username: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadCommit(GitHubModel):
    """WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadCommit"""

    author: WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadCommitPropAuthor = (
        Field()
    )
    committer: WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadCommitPropCommitter = (
        Field()
    )
    id: str = Field()
    message: str = Field()
    timestamp: str = Field()
    tree_id: str = Field()


class WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadRepositoryPropOwner(
    GitHubModel
):
    """WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadRepositoryPropOwner"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadRepository(GitHubModel):
    """WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadRepository"""

    archive_url: str = Field()
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    deployments_url: str = Field()
    description: Union[Union[str, None], None] = Field()
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    languages_url: str = Field()
    merges_url: str = Field()
    milestones_url: str = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    owner: WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadRepositoryPropOwner = (
        Field()
    )
    private: bool = Field(description="Whether the repository is private or public.")
    pulls_url: str = Field()
    releases_url: str = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    trees_url: str = Field()
    url: str = Field()


class WebhookWorkflowRunInProgressPropWorkflowRunMergedPullRequests(GitHubModel):
    """WebhookWorkflowRunInProgressPropWorkflowRunMergedPullRequests"""

    base: WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItemsPropBase = (
        Field()
    )
    head: WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItemsPropHead = (
        Field()
    )
    id: float = Field()
    number: float = Field()
    url: str = Field()


class WebhookWorkflowRunInProgressPropWorkflowRunMergedRepositoryPropOwner(GitHubModel):
    """WebhookWorkflowRunInProgressPropWorkflowRunMergedRepositoryPropOwner"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunInProgressPropWorkflowRunMergedRepository(GitHubModel):
    """WebhookWorkflowRunInProgressPropWorkflowRunMergedRepository"""

    archive_url: str = Field()
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    deployments_url: str = Field()
    description: Union[Union[str, None], None] = Field()
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    languages_url: str = Field()
    merges_url: str = Field()
    milestones_url: str = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    owner: WebhookWorkflowRunInProgressPropWorkflowRunMergedRepositoryPropOwner = (
        Field()
    )
    private: bool = Field(description="Whether the repository is private or public.")
    pulls_url: str = Field()
    releases_url: str = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    trees_url: str = Field()
    url: str = Field()


class WebhookWorkflowRunInProgressPropWorkflowRunMergedTriggeringActor(GitHubModel):
    """WebhookWorkflowRunInProgressPropWorkflowRunMergedTriggeringActor"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunRequested(GitHubModel):
    """workflow_run requested event"""

    action: Literal["requested"] = Field()
    enterprise: Missing[EnterpriseWebhooks] = Field(
        default=UNSET,
        title="Enterprise",
        description='An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured\non an enterprise account or an organization that\'s part of an enterprise account. For more information,\nsee "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."\n',
    )
    installation: Missing[SimpleInstallation] = Field(
        default=UNSET,
        title="Simple Installation",
        description='The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."',
    )
    organization: Missing[OrganizationSimpleWebhooks] = Field(
        default=UNSET,
        title="Organization Simple",
        description="A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an\norganization, or when the event occurs from activity in a repository owned by an organization.",
    )
    repository: RepositoryWebhooks = Field(
        title="Repository",
        description="The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property\nwhen the event occurs from activity in a repository.",
    )
    sender: SimpleUserWebhooks = Field(
        title="Simple User",
        description="The GitHub user that triggered the event. This property is included in every webhook payload.",
    )
    workflow: Union[WebhookWorkflowRunRequestedPropWorkflow, None] = Field(
        title="Workflow"
    )
    workflow_run: WebhookWorkflowRunRequestedPropWorkflowRun = Field(
        title="Workflow Run"
    )


class WebhookWorkflowRunRequestedPropWorkflow(GitHubModel):
    """Workflow"""

    badge_url: str = Field()
    created_at: datetime = Field()
    html_url: str = Field()
    id: int = Field()
    name: str = Field()
    node_id: str = Field()
    path: str = Field()
    state: str = Field()
    updated_at: datetime = Field()
    url: str = Field()


class WebhookWorkflowRunRequestedPropWorkflowRun(GitHubModel):
    """Workflow Run"""

    actor: Union[WebhookWorkflowRunRequestedPropWorkflowRunPropActor, None] = Field(
        title="User"
    )
    artifacts_url: str = Field()
    cancel_url: str = Field()
    check_suite_id: int = Field()
    check_suite_node_id: str = Field()
    check_suite_url: str = Field()
    conclusion: Union[
        None,
        Literal[
            "success",
            "failure",
            "neutral",
            "cancelled",
            "timed_out",
            "action_required",
            "stale",
            "skipped",
            "startup_failure",
        ],
    ] = Field()
    created_at: datetime = Field()
    event: str = Field()
    head_branch: Union[str, None] = Field()
    head_commit: WebhookWorkflowRunRequestedPropWorkflowRunPropHeadCommit = Field(
        title="SimpleCommit"
    )
    head_repository: WebhookWorkflowRunRequestedPropWorkflowRunPropHeadRepository = (
        Field(title="Repository Lite")
    )
    head_sha: str = Field()
    html_url: str = Field()
    id: int = Field()
    jobs_url: str = Field()
    logs_url: str = Field()
    name: Union[str, None] = Field()
    node_id: str = Field()
    path: str = Field()
    previous_attempt_url: Union[str, None] = Field()
    pull_requests: List[
        WebhookWorkflowRunRequestedPropWorkflowRunPropPullRequestsItems
    ] = Field()
    referenced_workflows: Missing[
        Union[
            List[
                WebhookWorkflowRunRequestedPropWorkflowRunPropReferencedWorkflowsItems
            ],
            None,
        ]
    ] = Field(default=UNSET)
    repository: WebhookWorkflowRunRequestedPropWorkflowRunPropRepository = Field(
        title="Repository Lite"
    )
    rerun_url: str = Field()
    run_attempt: int = Field()
    run_number: int = Field()
    run_started_at: datetime = Field()
    status: Literal[
        "requested", "in_progress", "completed", "queued", "pending", "waiting"
    ] = Field()
    triggering_actor: Union[
        WebhookWorkflowRunRequestedPropWorkflowRunPropTriggeringActor, None
    ] = Field(title="User")
    updated_at: datetime = Field()
    url: str = Field()
    workflow_id: int = Field()
    workflow_url: str = Field()
    display_title: str = Field()


class WebhookWorkflowRunRequestedPropWorkflowRunPropActor(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunRequestedPropWorkflowRunPropHeadCommit(GitHubModel):
    """SimpleCommit"""

    author: WebhookWorkflowRunRequestedPropWorkflowRunPropHeadCommitPropAuthor = Field(
        title="Committer",
        description="Metaproperties for Git author/committer information.",
    )
    committer: WebhookWorkflowRunRequestedPropWorkflowRunPropHeadCommitPropCommitter = (
        Field(
            title="Committer",
            description="Metaproperties for Git author/committer information.",
        )
    )
    id: str = Field()
    message: str = Field()
    timestamp: str = Field()
    tree_id: str = Field()


class WebhookWorkflowRunRequestedPropWorkflowRunPropHeadCommitPropAuthor(GitHubModel):
    """Committer

    Metaproperties for Git author/committer information.
    """

    date: Missing[datetime] = Field(default=UNSET)
    email: Union[str, None] = Field()
    name: str = Field(description="The git author's name.")
    username: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunRequestedPropWorkflowRunPropHeadCommitPropCommitter(
    GitHubModel
):
    """Committer

    Metaproperties for Git author/committer information.
    """

    date: Missing[datetime] = Field(default=UNSET)
    email: Union[str, None] = Field()
    name: str = Field(description="The git author's name.")
    username: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunRequestedPropWorkflowRunPropHeadRepository(GitHubModel):
    """Repository Lite"""

    archive_url: str = Field()
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    languages_url: str = Field()
    merges_url: str = Field()
    milestones_url: str = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    owner: Union[
        WebhookWorkflowRunRequestedPropWorkflowRunPropHeadRepositoryPropOwner, None
    ] = Field(title="User")
    private: bool = Field(description="Whether the repository is private or public.")
    pulls_url: str = Field()
    releases_url: str = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    trees_url: str = Field()
    url: str = Field()


class WebhookWorkflowRunRequestedPropWorkflowRunPropHeadRepositoryPropOwner(
    GitHubModel
):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunRequestedPropWorkflowRunPropPullRequestsItems(GitHubModel):
    """WebhookWorkflowRunRequestedPropWorkflowRunPropPullRequestsItems"""

    base: WebhookWorkflowRunRequestedPropWorkflowRunPropPullRequestsItemsPropBase = (
        Field()
    )
    head: WebhookWorkflowRunRequestedPropWorkflowRunPropPullRequestsItemsPropHead = (
        Field()
    )
    id: float = Field()
    number: float = Field()
    url: str = Field()


class WebhookWorkflowRunRequestedPropWorkflowRunPropPullRequestsItemsPropBase(
    GitHubModel
):
    """WebhookWorkflowRunRequestedPropWorkflowRunPropPullRequestsItemsPropBase"""

    ref: str = Field()
    repo: WebhookWorkflowRunRequestedPropWorkflowRunPropPullRequestsItemsPropBasePropRepo = Field(
        title="Repo Ref"
    )
    sha: str = Field()


class WebhookWorkflowRunRequestedPropWorkflowRunPropPullRequestsItemsPropBasePropRepo(
    GitHubModel
):
    """Repo Ref"""

    id: int = Field()
    name: str = Field()
    url: str = Field()


class WebhookWorkflowRunRequestedPropWorkflowRunPropPullRequestsItemsPropHead(
    GitHubModel
):
    """WebhookWorkflowRunRequestedPropWorkflowRunPropPullRequestsItemsPropHead"""

    ref: str = Field()
    repo: WebhookWorkflowRunRequestedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepo = Field(
        title="Repo Ref"
    )
    sha: str = Field()


class WebhookWorkflowRunRequestedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepo(
    GitHubModel
):
    """Repo Ref"""

    id: int = Field()
    name: str = Field()
    url: str = Field()


class WebhookWorkflowRunRequestedPropWorkflowRunPropReferencedWorkflowsItems(
    GitHubModel
):
    """WebhookWorkflowRunRequestedPropWorkflowRunPropReferencedWorkflowsItems"""

    path: str = Field()
    ref: Missing[str] = Field(default=UNSET)
    sha: str = Field()


class WebhookWorkflowRunRequestedPropWorkflowRunPropRepository(GitHubModel):
    """Repository Lite"""

    archive_url: str = Field()
    assignees_url: str = Field()
    blobs_url: str = Field()
    branches_url: str = Field()
    collaborators_url: str = Field()
    comments_url: str = Field()
    commits_url: str = Field()
    compare_url: str = Field()
    contents_url: str = Field()
    contributors_url: str = Field()
    deployments_url: str = Field()
    description: Union[str, None] = Field()
    downloads_url: str = Field()
    events_url: str = Field()
    fork: bool = Field()
    forks_url: str = Field()
    full_name: str = Field()
    git_commits_url: str = Field()
    git_refs_url: str = Field()
    git_tags_url: str = Field()
    hooks_url: str = Field()
    html_url: str = Field()
    id: int = Field(description="Unique identifier of the repository")
    issue_comment_url: str = Field()
    issue_events_url: str = Field()
    issues_url: str = Field()
    keys_url: str = Field()
    labels_url: str = Field()
    languages_url: str = Field()
    merges_url: str = Field()
    milestones_url: str = Field()
    name: str = Field(description="The name of the repository.")
    node_id: str = Field()
    notifications_url: str = Field()
    owner: Union[
        WebhookWorkflowRunRequestedPropWorkflowRunPropRepositoryPropOwner, None
    ] = Field(title="User")
    private: bool = Field(description="Whether the repository is private or public.")
    pulls_url: str = Field()
    releases_url: str = Field()
    stargazers_url: str = Field()
    statuses_url: str = Field()
    subscribers_url: str = Field()
    subscription_url: str = Field()
    tags_url: str = Field()
    teams_url: str = Field()
    trees_url: str = Field()
    url: str = Field()


class WebhookWorkflowRunRequestedPropWorkflowRunPropRepositoryPropOwner(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class WebhookWorkflowRunRequestedPropWorkflowRunPropTriggeringActor(GitHubModel):
    """User"""

    avatar_url: Missing[str] = Field(default=UNSET)
    deleted: Missing[bool] = Field(default=UNSET)
    email: Missing[Union[str, None]] = Field(default=UNSET)
    events_url: Missing[str] = Field(default=UNSET)
    followers_url: Missing[str] = Field(default=UNSET)
    following_url: Missing[str] = Field(default=UNSET)
    gists_url: Missing[str] = Field(default=UNSET)
    gravatar_id: Missing[str] = Field(default=UNSET)
    html_url: Missing[str] = Field(default=UNSET)
    id: int = Field()
    login: str = Field()
    name: Missing[str] = Field(default=UNSET)
    node_id: Missing[str] = Field(default=UNSET)
    organizations_url: Missing[str] = Field(default=UNSET)
    received_events_url: Missing[str] = Field(default=UNSET)
    repos_url: Missing[str] = Field(default=UNSET)
    site_admin: Missing[bool] = Field(default=UNSET)
    starred_url: Missing[str] = Field(default=UNSET)
    subscriptions_url: Missing[str] = Field(default=UNSET)
    type: Missing[Literal["Bot", "User", "Organization"]] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class AppManifestsCodeConversionsPostResponse201(GitHubModel):
    """AppManifestsCodeConversionsPostResponse201"""

    id: int = Field(description="Unique identifier of the GitHub app")
    slug: Missing[str] = Field(
        default=UNSET, description="The slug name of the GitHub app"
    )
    node_id: str = Field()
    owner: Union[None, SimpleUser] = Field()
    name: str = Field(description="The name of the GitHub app")
    description: Union[str, None] = Field()
    external_url: str = Field()
    html_url: str = Field()
    created_at: datetime = Field()
    updated_at: datetime = Field()
    permissions: IntegrationPropPermissions = Field(
        description="The set of permissions for the GitHub app"
    )
    events: List[str] = Field(description="The list of events for the GitHub app")
    installations_count: Missing[int] = Field(
        default=UNSET,
        description="The number of installations associated with the GitHub app",
    )
    client_id: str = Field()
    client_secret: str = Field()
    webhook_secret: Union[Union[str, None], None] = Field()
    pem: str = Field()


class AppManifestsCodeConversionsPostResponse201Allof1(ExtraGitHubModel):
    """AppManifestsCodeConversionsPostResponse201Allof1"""

    client_id: str = Field()
    client_secret: str = Field()
    webhook_secret: Union[str, None] = Field()
    pem: str = Field()


class AppHookConfigPatchBody(GitHubModel):
    """AppHookConfigPatchBody"""

    url: Missing[str] = Field(
        default=UNSET, description="The URL to which the payloads will be delivered."
    )
    content_type: Missing[str] = Field(
        default=UNSET,
        description="The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
    )
    secret: Missing[str] = Field(
        default=UNSET,
        description="If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).",
    )
    insecure_ssl: Missing[Union[str, float]] = Field(default=UNSET)


class AppHookDeliveriesDeliveryIdAttemptsPostResponse202(GitHubModel):
    """AppHookDeliveriesDeliveryIdAttemptsPostResponse202"""


class AppInstallationsInstallationIdAccessTokensPostBody(GitHubModel):
    """AppInstallationsInstallationIdAccessTokensPostBody"""

    repositories: Missing[List[str]] = Field(
        default=UNSET,
        description="List of repository names that the token should have access to",
    )
    repository_ids: Missing[List[int]] = Field(
        default=UNSET,
        description="List of repository IDs that the token should have access to",
    )
    permissions: Missing[AppPermissions] = Field(
        default=UNSET,
        title="App Permissions",
        description="The permissions granted to the user access token.",
    )


class ApplicationsClientIdGrantDeleteBody(GitHubModel):
    """ApplicationsClientIdGrantDeleteBody"""

    access_token: str = Field(
        description="The OAuth access token used to authenticate to the GitHub API."
    )


class ApplicationsClientIdTokenPostBody(GitHubModel):
    """ApplicationsClientIdTokenPostBody"""

    access_token: str = Field(
        description="The access_token of the OAuth or GitHub application."
    )


class ApplicationsClientIdTokenDeleteBody(GitHubModel):
    """ApplicationsClientIdTokenDeleteBody"""

    access_token: str = Field(
        description="The OAuth access token used to authenticate to the GitHub API."
    )


class ApplicationsClientIdTokenPatchBody(GitHubModel):
    """ApplicationsClientIdTokenPatchBody"""

    access_token: str = Field(
        description="The access_token of the OAuth or GitHub application."
    )


class ApplicationsClientIdTokenScopedPostBody(GitHubModel):
    """ApplicationsClientIdTokenScopedPostBody"""

    access_token: str = Field(
        description="The access token used to authenticate to the GitHub API."
    )
    target: Missing[str] = Field(
        default=UNSET,
        description="The name of the user or organization to scope the user access token to. **Required** unless `target_id` is specified.",
    )
    target_id: Missing[int] = Field(
        default=UNSET,
        description="The ID of the user or organization to scope the user access token to. **Required** unless `target` is specified.",
    )
    repositories: Missing[List[str]] = Field(
        default=UNSET,
        description="The list of repository names to scope the user access token to. `repositories` may not be specified if `repository_ids` is specified.",
    )
    repository_ids: Missing[List[int]] = Field(
        default=UNSET,
        description="The list of repository IDs to scope the user access token to. `repository_ids` may not be specified if `repositories` is specified.",
    )
    permissions: Missing[AppPermissions] = Field(
        default=UNSET,
        title="App Permissions",
        description="The permissions granted to the user access token.",
    )


class EmojisGetResponse200(ExtraGitHubModel):
    """EmojisGetResponse200"""


class EnterprisesEnterpriseSecretScanningAlertsGetResponse503(GitHubModel):
    """EnterprisesEnterpriseSecretScanningAlertsGetResponse503"""

    code: Missing[str] = Field(default=UNSET)
    message: Missing[str] = Field(default=UNSET)
    documentation_url: Missing[str] = Field(default=UNSET)


class GistsPostBody(GitHubModel):
    """GistsPostBody"""

    description: Missing[str] = Field(
        default=UNSET, description="Description of the gist"
    )
    files: GistsPostBodyPropFiles = Field(
        description="Names and content for the files that make up the gist"
    )
    public: Missing[Union[bool, Literal["true", "false"]]] = Field(default=UNSET)


class GistsPostBodyPropFiles(ExtraGitHubModel):
    """GistsPostBodyPropFiles

    Names and content for the files that make up the gist

    Examples:
        {'hello.rb': {'content': 'puts "Hello, World!"'}}
    """


class GistsGistIdGetResponse403(GitHubModel):
    """GistsGistIdGetResponse403"""

    block: Missing[GistsGistIdGetResponse403PropBlock] = Field(default=UNSET)
    message: Missing[str] = Field(default=UNSET)
    documentation_url: Missing[str] = Field(default=UNSET)


class GistsGistIdGetResponse403PropBlock(GitHubModel):
    """GistsGistIdGetResponse403PropBlock"""

    reason: Missing[str] = Field(default=UNSET)
    created_at: Missing[str] = Field(default=UNSET)
    html_url: Missing[Union[str, None]] = Field(default=UNSET)


class GistsGistIdPatchBodyPropFiles(ExtraGitHubModel):
    """GistsGistIdPatchBodyPropFiles

    The gist files to be updated, renamed, or deleted. Each `key` must match the
    current filename
    (including extension) of the targeted gist file. For example: `hello.py`.

    To delete a file, set the whole file to null. For example: `hello.py : null`.
    The file will also be
    deleted if the specified object does not contain at least one of `content` or
    `filename`.

    Examples:
        {'hello.rb': {'content': 'blah', 'filename': 'goodbye.rb'}}
    """


class GistsGistIdPatchBody(GitHubModel):
    """GistsGistIdPatchBody"""

    description: Missing[str] = Field(
        default=UNSET, description="The description of the gist."
    )
    files: Missing[GistsGistIdPatchBodyPropFiles] = Field(
        default=UNSET,
        description="The gist files to be updated, renamed, or deleted. Each `key` must match the current filename\n(including extension) of the targeted gist file. For example: `hello.py`.\n\nTo delete a file, set the whole file to null. For example: `hello.py : null`. The file will also be\ndeleted if the specified object does not contain at least one of `content` or `filename`.",
    )


class GistsGistIdCommentsPostBody(GitHubModel):
    """GistsGistIdCommentsPostBody"""

    body: Annotated[str, Field(max_length=65535)] = Field(
        description="The comment text."
    )


class GistsGistIdCommentsCommentIdPatchBody(GitHubModel):
    """GistsGistIdCommentsCommentIdPatchBody"""

    body: Annotated[str, Field(max_length=65535)] = Field(
        description="The comment text."
    )


class GistsGistIdStarGetResponse404(GitHubModel):
    """GistsGistIdStarGetResponse404"""


class InstallationRepositoriesGetResponse200(GitHubModel):
    """InstallationRepositoriesGetResponse200"""

    total_count: int = Field()
    repositories: List[Repository] = Field()
    repository_selection: Missing[str] = Field(default=UNSET)


class MarkdownPostBody(GitHubModel):
    """MarkdownPostBody"""

    text: str = Field(description="The Markdown text to render in HTML.")
    mode: Missing[Literal["markdown", "gfm"]] = Field(
        default=UNSET, description="The rendering mode."
    )
    context: Missing[str] = Field(
        default=UNSET,
        description="The repository context to use when creating references in `gfm` mode.  For example, setting `context` to `octo-org/octo-repo` will change the text `#42` into an HTML link to issue 42 in the `octo-org/octo-repo` repository.",
    )


class NotificationsPutBody(GitHubModel):
    """NotificationsPutBody"""

    last_read_at: Missing[datetime] = Field(
        default=UNSET,
        description="Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.",
    )
    read: Missing[bool] = Field(
        default=UNSET, description="Whether the notification has been read."
    )


class NotificationsPutResponse202(GitHubModel):
    """NotificationsPutResponse202"""

    message: Missing[str] = Field(default=UNSET)


class NotificationsThreadsThreadIdSubscriptionPutBody(GitHubModel):
    """NotificationsThreadsThreadIdSubscriptionPutBody"""

    ignored: Missing[bool] = Field(
        default=UNSET, description="Whether to block all notifications from a thread."
    )


class OrgsOrgPatchBody(GitHubModel):
    """OrgsOrgPatchBody"""

    billing_email: Missing[str] = Field(
        default=UNSET,
        description="Billing email address. This address is not publicized.",
    )
    company: Missing[str] = Field(default=UNSET, description="The company name.")
    email: Missing[str] = Field(
        default=UNSET, description="The publicly visible email address."
    )
    twitter_username: Missing[str] = Field(
        default=UNSET, description="The Twitter username of the company."
    )
    location: Missing[str] = Field(default=UNSET, description="The location.")
    name: Missing[str] = Field(
        default=UNSET, description="The shorthand name of the company."
    )
    description: Missing[str] = Field(
        default=UNSET, description="The description of the company."
    )
    has_organization_projects: Missing[bool] = Field(
        default=UNSET,
        description="Whether an organization can use organization projects.",
    )
    has_repository_projects: Missing[bool] = Field(
        default=UNSET,
        description="Whether repositories that belong to the organization can use repository projects.",
    )
    default_repository_permission: Missing[
        Literal["read", "write", "admin", "none"]
    ] = Field(
        default=UNSET,
        description="Default permission level members have for organization repositories.",
    )
    members_can_create_repositories: Missing[bool] = Field(
        default=UNSET,
        description="Whether of non-admin organization members can create repositories. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.",
    )
    members_can_create_internal_repositories: Missing[bool] = Field(
        default=UNSET,
        description='Whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.',
    )
    members_can_create_private_repositories: Missing[bool] = Field(
        default=UNSET,
        description='Whether organization members can create private repositories, which are visible to organization members with permission. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.',
    )
    members_can_create_public_repositories: Missing[bool] = Field(
        default=UNSET,
        description='Whether organization members can create public repositories, which are visible to anyone. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.',
    )
    members_allowed_repository_creation_type: Missing[
        Literal["all", "private", "none"]
    ] = Field(
        default=UNSET,
        description="Specifies which types of repositories non-admin organization members can create. `private` is only available to repositories that are part of an organization on GitHub Enterprise Cloud. \n**Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.",
    )
    members_can_create_pages: Missing[bool] = Field(
        default=UNSET,
        description="Whether organization members can create GitHub Pages sites. Existing published sites will not be impacted.",
    )
    members_can_create_public_pages: Missing[bool] = Field(
        default=UNSET,
        description="Whether organization members can create public GitHub Pages sites. Existing published sites will not be impacted.",
    )
    members_can_create_private_pages: Missing[bool] = Field(
        default=UNSET,
        description="Whether organization members can create private GitHub Pages sites. Existing published sites will not be impacted.",
    )
    members_can_fork_private_repositories: Missing[bool] = Field(
        default=UNSET,
        description="Whether organization members can fork private organization repositories.",
    )
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Whether contributors to organization repositories are required to sign off on commits they make through GitHub's web interface.",
    )
    blog: Missing[str] = Field(default=UNSET)
    advanced_security_enabled_for_new_repositories: Missing[bool] = Field(
        default=UNSET,
        description='Whether GitHub Advanced Security is automatically enabled for new repositories.\n\nTo use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."\n\nYou can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.',
    )
    dependabot_alerts_enabled_for_new_repositories: Missing[bool] = Field(
        default=UNSET,
        description='Whether Dependabot alerts is automatically enabled for new repositories.\n\nTo use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."\n\nYou can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.',
    )
    dependabot_security_updates_enabled_for_new_repositories: Missing[bool] = Field(
        default=UNSET,
        description='Whether Dependabot security updates is automatically enabled for new repositories.\n\nTo use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."\n\nYou can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.',
    )
    dependency_graph_enabled_for_new_repositories: Missing[bool] = Field(
        default=UNSET,
        description='Whether dependency graph is automatically enabled for new repositories.\n\nTo use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."\n\nYou can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.',
    )
    secret_scanning_enabled_for_new_repositories: Missing[bool] = Field(
        default=UNSET,
        description='Whether secret scanning is automatically enabled for new repositories.\n\nTo use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."\n\nYou can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.',
    )
    secret_scanning_push_protection_enabled_for_new_repositories: Missing[bool] = Field(
        default=UNSET,
        description='Whether secret scanning push protection is automatically enabled for new repositories.\n\nTo use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."\n\nYou can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.',
    )
    secret_scanning_push_protection_custom_link_enabled: Missing[bool] = Field(
        default=UNSET,
        description="Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection.",
    )
    secret_scanning_push_protection_custom_link: Missing[str] = Field(
        default=UNSET,
        description="If `secret_scanning_push_protection_custom_link_enabled` is true, the URL that will be displayed to contributors who are blocked from pushing a secret.",
    )


class OrgsOrgActionsCacheUsageByRepositoryGetResponse200(GitHubModel):
    """OrgsOrgActionsCacheUsageByRepositoryGetResponse200"""

    total_count: int = Field()
    repository_cache_usages: List[ActionsCacheUsageByRepository] = Field()


class OrgsOrgActionsPermissionsPutBody(GitHubModel):
    """OrgsOrgActionsPermissionsPutBody"""

    enabled_repositories: Literal["all", "none", "selected"] = Field(
        description="The policy that controls the repositories in the organization that are allowed to run GitHub Actions."
    )
    allowed_actions: Missing[Literal["all", "local_only", "selected"]] = Field(
        default=UNSET,
        description="The permissions policy that controls the actions and reusable workflows that are allowed to run.",
    )


class OrgsOrgActionsPermissionsRepositoriesGetResponse200(GitHubModel):
    """OrgsOrgActionsPermissionsRepositoriesGetResponse200"""

    total_count: float = Field()
    repositories: List[Repository] = Field()


class OrgsOrgActionsPermissionsRepositoriesPutBody(GitHubModel):
    """OrgsOrgActionsPermissionsRepositoriesPutBody"""

    selected_repository_ids: List[int] = Field(
        description="List of repository IDs to enable for GitHub Actions."
    )


class OrgsOrgActionsRunnersGetResponse200(GitHubModel):
    """OrgsOrgActionsRunnersGetResponse200"""

    total_count: int = Field()
    runners: List[Runner] = Field()


class OrgsOrgActionsRunnersGenerateJitconfigPostBody(GitHubModel):
    """OrgsOrgActionsRunnersGenerateJitconfigPostBody"""

    name: str = Field(description="The name of the new runner.")
    runner_group_id: int = Field(
        description="The ID of the runner group to register the runner to."
    )
    labels: Annotated[List[str], Field(max_length=100, min_length=1)] = Field(
        description="The names of the custom labels to add to the runner. **Minimum items**: 1. **Maximum items**: 100."
    )
    work_folder: Missing[str] = Field(
        default=UNSET,
        description="The working directory to be used for job execution, relative to the runner install directory.",
    )


class OrgsOrgActionsRunnersGenerateJitconfigPostResponse201(GitHubModel):
    """OrgsOrgActionsRunnersGenerateJitconfigPostResponse201"""

    runner: Runner = Field(
        title="Self hosted runners", description="A self hosted runner"
    )
    encoded_jit_config: str = Field(
        description="The base64 encoded runner configuration."
    )


class OrgsOrgActionsRunnersRunnerIdLabelsGetResponse200(GitHubModel):
    """OrgsOrgActionsRunnersRunnerIdLabelsGetResponse200"""

    total_count: int = Field()
    labels: List[RunnerLabel] = Field()


class OrgsOrgActionsRunnersRunnerIdLabelsPutBody(GitHubModel):
    """OrgsOrgActionsRunnersRunnerIdLabelsPutBody"""

    labels: Annotated[List[str], Field(max_length=100)] = Field(
        description="The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels."
    )


class OrgsOrgActionsRunnersRunnerIdLabelsPostBody(GitHubModel):
    """OrgsOrgActionsRunnersRunnerIdLabelsPostBody"""

    labels: Annotated[List[str], Field(max_length=100, min_length=1)] = Field(
        description="The names of the custom labels to add to the runner."
    )


class OrgsOrgActionsRunnersRunnerIdLabelsDeleteResponse200(GitHubModel):
    """OrgsOrgActionsRunnersRunnerIdLabelsDeleteResponse200"""

    total_count: int = Field()
    labels: List[RunnerLabel] = Field()


class OrgsOrgActionsSecretsGetResponse200(GitHubModel):
    """OrgsOrgActionsSecretsGetResponse200"""

    total_count: int = Field()
    secrets: List[OrganizationActionsSecret] = Field()


class OrgsOrgActionsSecretsSecretNamePutBody(GitHubModel):
    """OrgsOrgActionsSecretsSecretNamePutBody"""

    encrypted_value: Missing[
        Annotated[
            str,
            Field(
                pattern="^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"
            ),
        ]
    ] = Field(
        default=UNSET,
        description="Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/actions/secrets#get-an-organization-public-key) endpoint.",
    )
    key_id: Missing[str] = Field(
        default=UNSET, description="ID of the key you used to encrypt the secret."
    )
    visibility: Literal["all", "private", "selected"] = Field(
        description="Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret."
    )
    selected_repository_ids: Missing[List[int]] = Field(
        default=UNSET,
        description="An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/actions/secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/actions/secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/actions/secrets#remove-selected-repository-from-an-organization-secret) endpoints.",
    )


class OrgsOrgActionsSecretsSecretNameRepositoriesGetResponse200(GitHubModel):
    """OrgsOrgActionsSecretsSecretNameRepositoriesGetResponse200"""

    total_count: int = Field()
    repositories: List[MinimalRepository] = Field()


class OrgsOrgActionsSecretsSecretNameRepositoriesPutBody(GitHubModel):
    """OrgsOrgActionsSecretsSecretNameRepositoriesPutBody"""

    selected_repository_ids: List[int] = Field(
        description="An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Add selected repository to an organization secret](https://docs.github.com/rest/actions/secrets#add-selected-repository-to-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/actions/secrets#remove-selected-repository-from-an-organization-secret) endpoints."
    )


class OrgsOrgActionsVariablesGetResponse200(GitHubModel):
    """OrgsOrgActionsVariablesGetResponse200"""

    total_count: int = Field()
    variables: List[OrganizationActionsVariable] = Field()


class OrgsOrgActionsVariablesPostBody(GitHubModel):
    """OrgsOrgActionsVariablesPostBody"""

    name: str = Field(description="The name of the variable.")
    value: str = Field(description="The value of the variable.")
    visibility: Literal["all", "private", "selected"] = Field(
        description="The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable."
    )
    selected_repository_ids: Missing[List[int]] = Field(
        default=UNSET,
        description="An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`.",
    )


class OrgsOrgActionsVariablesNamePatchBody(GitHubModel):
    """OrgsOrgActionsVariablesNamePatchBody"""

    name: Missing[str] = Field(default=UNSET, description="The name of the variable.")
    value: Missing[str] = Field(default=UNSET, description="The value of the variable.")
    visibility: Missing[Literal["all", "private", "selected"]] = Field(
        default=UNSET,
        description="The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable.",
    )
    selected_repository_ids: Missing[List[int]] = Field(
        default=UNSET,
        description="An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`.",
    )


class OrgsOrgActionsVariablesNameRepositoriesGetResponse200(GitHubModel):
    """OrgsOrgActionsVariablesNameRepositoriesGetResponse200"""

    total_count: int = Field()
    repositories: List[MinimalRepository] = Field()


class OrgsOrgActionsVariablesNameRepositoriesPutBody(GitHubModel):
    """OrgsOrgActionsVariablesNameRepositoriesPutBody"""

    selected_repository_ids: List[int] = Field(
        description="The IDs of the repositories that can access the organization variable."
    )


class OrgsOrgCodespacesGetResponse200(GitHubModel):
    """OrgsOrgCodespacesGetResponse200"""

    total_count: int = Field()
    codespaces: List[Codespace] = Field()


class OrgsOrgCodespacesAccessPutBody(GitHubModel):
    """OrgsOrgCodespacesAccessPutBody"""

    visibility: Literal[
        "disabled",
        "selected_members",
        "all_members",
        "all_members_and_outside_collaborators",
    ] = Field(
        description="Which users can access codespaces in the organization. `disabled` means that no users can access codespaces in the organization."
    )
    selected_usernames: Missing[Annotated[List[str], Field(max_length=100)]] = Field(
        default=UNSET,
        description="The usernames of the organization members who should have access to codespaces in the organization. Required when `visibility` is `selected_members`. The provided list of usernames will replace any existing value.",
    )


class OrgsOrgCodespacesAccessSelectedUsersPostBody(GitHubModel):
    """OrgsOrgCodespacesAccessSelectedUsersPostBody"""

    selected_usernames: Annotated[List[str], Field(max_length=100)] = Field(
        description="The usernames of the organization members whose codespaces be billed to the organization."
    )


class OrgsOrgCodespacesAccessSelectedUsersDeleteBody(GitHubModel):
    """OrgsOrgCodespacesAccessSelectedUsersDeleteBody"""

    selected_usernames: Annotated[List[str], Field(max_length=100)] = Field(
        description="The usernames of the organization members whose codespaces should not be billed to the organization."
    )


class OrgsOrgCodespacesSecretsGetResponse200(GitHubModel):
    """OrgsOrgCodespacesSecretsGetResponse200"""

    total_count: int = Field()
    secrets: List[CodespacesOrgSecret] = Field()


class OrgsOrgCodespacesSecretsSecretNamePutBody(GitHubModel):
    """OrgsOrgCodespacesSecretsSecretNamePutBody"""

    encrypted_value: Missing[
        Annotated[
            str,
            Field(
                pattern="^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"
            ),
        ]
    ] = Field(
        default=UNSET,
        description="The value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/codespaces/organization-secrets#get-an-organization-public-key) endpoint.",
    )
    key_id: Missing[str] = Field(
        default=UNSET, description="The ID of the key you used to encrypt the secret."
    )
    visibility: Literal["all", "private", "selected"] = Field(
        description="Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret."
    )
    selected_repository_ids: Missing[List[int]] = Field(
        default=UNSET,
        description="An array of repository IDs that can access the organization secret. You can only provide a list of repository IDs when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#remove-selected-repository-from-an-organization-secret) endpoints.",
    )


class OrgsOrgCodespacesSecretsSecretNameRepositoriesGetResponse200(GitHubModel):
    """OrgsOrgCodespacesSecretsSecretNameRepositoriesGetResponse200"""

    total_count: int = Field()
    repositories: List[MinimalRepository] = Field()


class OrgsOrgCodespacesSecretsSecretNameRepositoriesPutBody(GitHubModel):
    """OrgsOrgCodespacesSecretsSecretNameRepositoriesPutBody"""

    selected_repository_ids: List[int] = Field(
        description="An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#remove-selected-repository-from-an-organization-secret) endpoints."
    )


class OrgsOrgCopilotBillingSeatsGetResponse200(GitHubModel):
    """OrgsOrgCopilotBillingSeatsGetResponse200"""

    total_seats: Missing[int] = Field(
        default=UNSET,
        description="Total number of Copilot For Business seats for the organization currently being billed.",
    )
    seats: Missing[List[CopilotSeatDetails]] = Field(default=UNSET)


class OrgsOrgCopilotBillingSelectedTeamsPostBody(GitHubModel):
    """OrgsOrgCopilotBillingSelectedTeamsPostBody"""

    selected_teams: Annotated[List[str], Field(min_length=1)] = Field(
        description="List of team names within the organization to which to grant access to GitHub Copilot."
    )


class OrgsOrgCopilotBillingSelectedTeamsPostResponse201(GitHubModel):
    """OrgsOrgCopilotBillingSelectedTeamsPostResponse201

    The total number of seat assignments created.
    """

    seats_created: int = Field()


class OrgsOrgCopilotBillingSelectedTeamsDeleteBody(GitHubModel):
    """OrgsOrgCopilotBillingSelectedTeamsDeleteBody"""

    selected_teams: Annotated[List[str], Field(min_length=1)] = Field(
        description="The names of teams from which to revoke access to GitHub Copilot."
    )


class OrgsOrgCopilotBillingSelectedTeamsDeleteResponse200(GitHubModel):
    """OrgsOrgCopilotBillingSelectedTeamsDeleteResponse200

    The total number of seat assignments cancelled.
    """

    seats_cancelled: int = Field()


class OrgsOrgCopilotBillingSelectedUsersPostBody(GitHubModel):
    """OrgsOrgCopilotBillingSelectedUsersPostBody"""

    selected_usernames: Annotated[List[str], Field(min_length=1)] = Field(
        description="The usernames of the organization members to be granted access to GitHub Copilot."
    )


class OrgsOrgCopilotBillingSelectedUsersPostResponse201(GitHubModel):
    """OrgsOrgCopilotBillingSelectedUsersPostResponse201

    The total number of seat assignments created.
    """

    seats_created: int = Field()


class OrgsOrgCopilotBillingSelectedUsersDeleteBody(GitHubModel):
    """OrgsOrgCopilotBillingSelectedUsersDeleteBody"""

    selected_usernames: Annotated[List[str], Field(min_length=1)] = Field(
        description="The usernames of the organization members for which to revoke access to GitHub Copilot."
    )


class OrgsOrgCopilotBillingSelectedUsersDeleteResponse200(GitHubModel):
    """OrgsOrgCopilotBillingSelectedUsersDeleteResponse200

    The total number of seat assignments cancelled.
    """

    seats_cancelled: int = Field()


class OrgsOrgDependabotSecretsGetResponse200(GitHubModel):
    """OrgsOrgDependabotSecretsGetResponse200"""

    total_count: int = Field()
    secrets: List[OrganizationDependabotSecret] = Field()


class OrgsOrgDependabotSecretsSecretNamePutBody(GitHubModel):
    """OrgsOrgDependabotSecretsSecretNamePutBody"""

    encrypted_value: Missing[
        Annotated[
            str,
            Field(
                pattern="^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"
            ),
        ]
    ] = Field(
        default=UNSET,
        description="Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/dependabot/secrets#get-an-organization-public-key) endpoint.",
    )
    key_id: Missing[str] = Field(
        default=UNSET, description="ID of the key you used to encrypt the secret."
    )
    visibility: Literal["all", "private", "selected"] = Field(
        description="Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret."
    )
    selected_repository_ids: Missing[List[str]] = Field(
        default=UNSET,
        description="An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/dependabot/secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/dependabot/secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/dependabot/secrets#remove-selected-repository-from-an-organization-secret) endpoints.",
    )


class OrgsOrgDependabotSecretsSecretNameRepositoriesGetResponse200(GitHubModel):
    """OrgsOrgDependabotSecretsSecretNameRepositoriesGetResponse200"""

    total_count: int = Field()
    repositories: List[MinimalRepository] = Field()


class OrgsOrgDependabotSecretsSecretNameRepositoriesPutBody(GitHubModel):
    """OrgsOrgDependabotSecretsSecretNameRepositoriesPutBody"""

    selected_repository_ids: List[int] = Field(
        description="An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/dependabot/secrets#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/dependabot/secrets#remove-selected-repository-from-an-organization-secret) endpoints."
    )


class OrgsOrgHooksPostBody(GitHubModel):
    """OrgsOrgHooksPostBody"""

    name: str = Field(description='Must be passed as "web".')
    config: OrgsOrgHooksPostBodyPropConfig = Field(
        description="Key/value pairs to provide settings for this webhook."
    )
    events: Missing[List[str]] = Field(
        default=UNSET,
        description='Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. Set to `["*"]` to receive all possible events.',
    )
    active: Missing[bool] = Field(
        default=UNSET,
        description="Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
    )


class OrgsOrgHooksPostBodyPropConfig(GitHubModel):
    """OrgsOrgHooksPostBodyPropConfig

    Key/value pairs to provide settings for this webhook.
    """

    url: str = Field(description="The URL to which the payloads will be delivered.")
    content_type: Missing[str] = Field(
        default=UNSET,
        description="The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
    )
    secret: Missing[str] = Field(
        default=UNSET,
        description="If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).",
    )
    insecure_ssl: Missing[Union[str, float]] = Field(default=UNSET)
    username: Missing[str] = Field(default=UNSET)
    password: Missing[str] = Field(default=UNSET)


class OrgsOrgHooksHookIdPatchBody(GitHubModel):
    """OrgsOrgHooksHookIdPatchBody"""

    config: Missing[OrgsOrgHooksHookIdPatchBodyPropConfig] = Field(
        default=UNSET,
        description="Key/value pairs to provide settings for this webhook.",
    )
    events: Missing[List[str]] = Field(
        default=UNSET,
        description="Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.",
    )
    active: Missing[bool] = Field(
        default=UNSET,
        description="Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
    )
    name: Missing[str] = Field(default=UNSET)


class OrgsOrgHooksHookIdPatchBodyPropConfig(GitHubModel):
    """OrgsOrgHooksHookIdPatchBodyPropConfig

    Key/value pairs to provide settings for this webhook.
    """

    url: str = Field(description="The URL to which the payloads will be delivered.")
    content_type: Missing[str] = Field(
        default=UNSET,
        description="The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
    )
    secret: Missing[str] = Field(
        default=UNSET,
        description="If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).",
    )
    insecure_ssl: Missing[Union[str, float]] = Field(default=UNSET)


class OrgsOrgHooksHookIdConfigPatchBody(GitHubModel):
    """OrgsOrgHooksHookIdConfigPatchBody"""

    url: Missing[str] = Field(
        default=UNSET, description="The URL to which the payloads will be delivered."
    )
    content_type: Missing[str] = Field(
        default=UNSET,
        description="The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
    )
    secret: Missing[str] = Field(
        default=UNSET,
        description="If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).",
    )
    insecure_ssl: Missing[Union[str, float]] = Field(default=UNSET)


class OrgsOrgInstallationsGetResponse200(GitHubModel):
    """OrgsOrgInstallationsGetResponse200"""

    total_count: int = Field()
    installations: List[Installation] = Field()


class OrgsOrgInteractionLimitsGetResponse200Anyof1(GitHubModel):
    """OrgsOrgInteractionLimitsGetResponse200Anyof1"""


class OrgsOrgInvitationsPostBody(GitHubModel):
    """OrgsOrgInvitationsPostBody"""

    invitee_id: Missing[int] = Field(
        default=UNSET,
        description="**Required unless you provide `email`**. GitHub user ID for the person you are inviting.",
    )
    email: Missing[str] = Field(
        default=UNSET,
        description="**Required unless you provide `invitee_id`**. Email address of the person you are inviting, which can be an existing GitHub user.",
    )
    role: Missing[
        Literal["admin", "direct_member", "billing_manager", "reinstate"]
    ] = Field(
        default=UNSET,
        description="The role for the new member. \n * `admin` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.  \n * `direct_member` - Non-owner organization members with ability to see other members and join teams by invitation.  \n * `billing_manager` - Non-owner organization members with ability to manage the billing settings of your organization. \n * `reinstate` - The previous role assigned to the invitee before they were removed from your organization. Can be one of the roles listed above. Only works if the invitee was previously part of your organization.",
    )
    team_ids: Missing[List[int]] = Field(
        default=UNSET,
        description="Specify IDs for the teams you want to invite new members to.",
    )


class OrgsOrgMembersUsernameCodespacesGetResponse200(GitHubModel):
    """OrgsOrgMembersUsernameCodespacesGetResponse200"""

    total_count: int = Field()
    codespaces: List[Codespace] = Field()


class OrgsOrgMembershipsUsernamePutBody(GitHubModel):
    """OrgsOrgMembershipsUsernamePutBody"""

    role: Missing[Literal["admin", "member"]] = Field(
        default=UNSET,
        description="The role to give the user in the organization. Can be one of:  \n * `admin` - The user will become an owner of the organization.  \n * `member` - The user will become a non-owner member of the organization.",
    )


class OrgsOrgMigrationsPostBody(GitHubModel):
    """OrgsOrgMigrationsPostBody"""

    repositories: List[str] = Field(
        description="A list of arrays indicating which repositories should be migrated."
    )
    lock_repositories: Missing[bool] = Field(
        default=UNSET,
        description="Indicates whether repositories should be locked (to prevent manipulation) while migrating data.",
    )
    exclude_metadata: Missing[bool] = Field(
        default=UNSET,
        description="Indicates whether metadata should be excluded and only git source should be included for the migration.",
    )
    exclude_git_data: Missing[bool] = Field(
        default=UNSET,
        description="Indicates whether the repository git data should be excluded from the migration.",
    )
    exclude_attachments: Missing[bool] = Field(
        default=UNSET,
        description="Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).",
    )
    exclude_releases: Missing[bool] = Field(
        default=UNSET,
        description="Indicates whether releases should be excluded from the migration (to reduce migration archive file size).",
    )
    exclude_owner_projects: Missing[bool] = Field(
        default=UNSET,
        description="Indicates whether projects owned by the organization or users should be excluded. from the migration.",
    )
    org_metadata_only: Missing[bool] = Field(
        default=UNSET,
        description="Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).",
    )
    exclude: Missing[List[Literal["repositories"]]] = Field(
        default=UNSET,
        description="Exclude related items from being returned in the response in order to improve performance of the request.",
    )


class OrgsOrgOrganizationRolesGetResponse200(GitHubModel):
    """OrgsOrgOrganizationRolesGetResponse200"""

    total_count: Missing[int] = Field(
        default=UNSET,
        description="The total number of organization roles available to the organization.",
    )
    roles: Missing[List[OrganizationRole]] = Field(
        default=UNSET,
        description="The list of organization roles available to the organization.",
    )


class OrgsOrgOrganizationRolesPostBody(GitHubModel):
    """OrgsOrgOrganizationRolesPostBody"""

    name: str = Field(description="The name of the custom role.")
    description: Missing[str] = Field(
        default=UNSET,
        description="A short description about the intended usage of this role or what permissions it grants.",
    )
    permissions: List[str] = Field(
        description="A list of additional permissions included in this role."
    )


class OrgsOrgOrganizationRolesRoleIdPatchBody(GitHubModel):
    """OrgsOrgOrganizationRolesRoleIdPatchBody"""

    name: Missing[str] = Field(
        default=UNSET, description="The name of the custom role."
    )
    description: Missing[str] = Field(
        default=UNSET,
        description="A short description about the intended usage of this role or what permissions it grants.",
    )
    permissions: Missing[List[str]] = Field(
        default=UNSET,
        description="A list of additional permissions included in this role.",
    )


class OrgsOrgOutsideCollaboratorsUsernamePutBody(GitHubModel):
    """OrgsOrgOutsideCollaboratorsUsernamePutBody"""

    async_: Missing[bool] = Field(
        default=UNSET,
        alias="async",
        description="When set to `true`, the request will be performed asynchronously. Returns a 202 status code when the job is successfully queued.",
    )


class OrgsOrgOutsideCollaboratorsUsernamePutResponse202(GitHubModel):
    """OrgsOrgOutsideCollaboratorsUsernamePutResponse202"""


class OrgsOrgOutsideCollaboratorsUsernameDeleteResponse422(GitHubModel):
    """OrgsOrgOutsideCollaboratorsUsernameDeleteResponse422"""

    message: Missing[str] = Field(default=UNSET)
    documentation_url: Missing[str] = Field(default=UNSET)


class OrgsOrgPersonalAccessTokenRequestsPostBody(GitHubModel):
    """OrgsOrgPersonalAccessTokenRequestsPostBody"""

    pat_request_ids: Missing[
        Annotated[List[int], Field(max_length=100, min_length=1)]
    ] = Field(
        default=UNSET,
        description="Unique identifiers of the requests for access via fine-grained personal access token. Must be formed of between 1 and 100 `pat_request_id` values.",
    )
    action: Literal["approve", "deny"] = Field(
        description="Action to apply to the requests."
    )
    reason: Missing[Union[Annotated[str, Field(max_length=1024)], None]] = Field(
        default=UNSET,
        description="Reason for approving or denying the requests. Max 1024 characters.",
    )


class OrgsOrgPersonalAccessTokenRequestsPatRequestIdPostBody(GitHubModel):
    """OrgsOrgPersonalAccessTokenRequestsPatRequestIdPostBody"""

    action: Literal["approve", "deny"] = Field(
        description="Action to apply to the request."
    )
    reason: Missing[Union[Annotated[str, Field(max_length=1024)], None]] = Field(
        default=UNSET,
        description="Reason for approving or denying the request. Max 1024 characters.",
    )


class OrgsOrgPersonalAccessTokensPostBody(GitHubModel):
    """OrgsOrgPersonalAccessTokensPostBody"""

    action: Literal["revoke"] = Field(
        description="Action to apply to the fine-grained personal access token."
    )
    pat_ids: Annotated[List[int], Field(max_length=100, min_length=1)] = Field(
        description="The IDs of the fine-grained personal access tokens."
    )


class OrgsOrgPersonalAccessTokensPatIdPostBody(GitHubModel):
    """OrgsOrgPersonalAccessTokensPatIdPostBody"""

    action: Literal["revoke"] = Field(
        description="Action to apply to the fine-grained personal access token."
    )


class OrgsOrgProjectsPostBody(GitHubModel):
    """OrgsOrgProjectsPostBody"""

    name: str = Field(description="The name of the project.")
    body: Missing[str] = Field(
        default=UNSET, description="The description of the project."
    )


class OrgsOrgPropertiesSchemaPatchBody(GitHubModel):
    """OrgsOrgPropertiesSchemaPatchBody"""

    properties: Annotated[
        List[OrgCustomProperty], Field(max_length=100, min_length=1)
    ] = Field(description="The array of custom properties to create or update.")


class OrgsOrgPropertiesSchemaCustomPropertyNamePutBody(GitHubModel):
    """OrgsOrgPropertiesSchemaCustomPropertyNamePutBody"""

    value_type: Literal["string", "single_select"] = Field(
        description="The type of the value for the property"
    )
    required: Missing[bool] = Field(
        default=UNSET, description="Whether the property is required."
    )
    default_value: Missing[Union[str, None]] = Field(
        default=UNSET, description="Default value of the property"
    )
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Short description of the property"
    )
    allowed_values: Missing[Union[List[str], None]] = Field(
        default=UNSET, description="Ordered list of allowed values of the property"
    )


class OrgsOrgPropertiesValuesPatchBody(GitHubModel):
    """OrgsOrgPropertiesValuesPatchBody"""

    repository_names: Annotated[List[str], Field(max_length=30, min_length=1)] = Field(
        description="The names of repositories that the custom property values will be applied to."
    )
    properties: List[CustomPropertyValue] = Field(
        description="List of custom property names and associated values to apply to the repositories."
    )


class OrgsOrgReposPostBody(GitHubModel):
    """OrgsOrgReposPostBody"""

    name: str = Field(description="The name of the repository.")
    description: Missing[str] = Field(
        default=UNSET, description="A short description of the repository."
    )
    homepage: Missing[str] = Field(
        default=UNSET, description="A URL with more information about the repository."
    )
    private: Missing[bool] = Field(
        default=UNSET, description="Whether the repository is private."
    )
    visibility: Missing[Literal["public", "private"]] = Field(
        default=UNSET, description="The visibility of the repository."
    )
    has_issues: Missing[bool] = Field(
        default=UNSET,
        description="Either `true` to enable issues for this repository or `false` to disable them.",
    )
    has_projects: Missing[bool] = Field(
        default=UNSET,
        description="Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.",
    )
    has_wiki: Missing[bool] = Field(
        default=UNSET,
        description="Either `true` to enable the wiki for this repository or `false` to disable it.",
    )
    has_downloads: Missing[bool] = Field(
        default=UNSET, description="Whether downloads are enabled."
    )
    is_template: Missing[bool] = Field(
        default=UNSET,
        description="Either `true` to make this repo available as a template repository or `false` to prevent it.",
    )
    team_id: Missing[int] = Field(
        default=UNSET,
        description="The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.",
    )
    auto_init: Missing[bool] = Field(
        default=UNSET,
        description="Pass `true` to create an initial commit with empty README.",
    )
    gitignore_template: Missing[str] = Field(
        default=UNSET,
        description='Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, "Haskell".',
    )
    license_template: Missing[str] = Field(
        default=UNSET,
        description='Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, "mit" or "mpl-2.0".',
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET,
        description="Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.",
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET,
        description="Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.",
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET,
        description="Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.",
    )
    allow_auto_merge: Missing[bool] = Field(
        default=UNSET,
        description="Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.",
    )
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. **The authenticated user must be an organization owner to set this property to `true`.**",
    )
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    custom_properties: Missing[OrgsOrgReposPostBodyPropCustomProperties] = Field(
        default=UNSET,
        description="The custom properties for the new repository. The keys are the custom property names, and the values are the corresponding custom property values.",
    )


class OrgsOrgReposPostBodyPropCustomProperties(ExtraGitHubModel):
    """OrgsOrgReposPostBodyPropCustomProperties

    The custom properties for the new repository. The keys are the custom property
    names, and the values are the corresponding custom property values.
    """


class OrgsOrgRulesetsPostBody(GitHubModel):
    """OrgsOrgRulesetsPostBody"""

    name: str = Field(description="The name of the ruleset.")
    target: Missing[Literal["branch", "tag"]] = Field(
        default=UNSET, description="The target of the ruleset."
    )
    enforcement: Literal["disabled", "active", "evaluate"] = Field(
        description="The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise)."
    )
    bypass_actors: Missing[List[RepositoryRulesetBypassActor]] = Field(
        default=UNSET,
        description="The actors that can bypass the rules in this ruleset",
    )
    conditions: Missing[
        Union[OrgRulesetConditionsOneof0, OrgRulesetConditionsOneof1]
    ] = Field(
        default=UNSET,
        title="Organization ruleset conditions",
        description="Conditions for an organization ruleset. The conditions object should contain both `repository_name` and `ref_name` properties or both `repository_id` and `ref_name` properties.\n",
    )
    rules: Missing[
        List[
            Union[
                RepositoryRuleCreation,
                RepositoryRuleUpdate,
                RepositoryRuleDeletion,
                RepositoryRuleRequiredLinearHistory,
                RepositoryRuleRequiredDeployments,
                RepositoryRuleRequiredSignatures,
                RepositoryRulePullRequest,
                RepositoryRuleRequiredStatusChecks,
                RepositoryRuleNonFastForward,
                RepositoryRuleCommitMessagePattern,
                RepositoryRuleCommitAuthorEmailPattern,
                RepositoryRuleCommitterEmailPattern,
                RepositoryRuleBranchNamePattern,
                RepositoryRuleTagNamePattern,
                RepositoryRuleWorkflows,
            ]
        ]
    ] = Field(default=UNSET, description="An array of rules within the ruleset.")


class OrgsOrgRulesetsRulesetIdPutBody(GitHubModel):
    """OrgsOrgRulesetsRulesetIdPutBody"""

    name: Missing[str] = Field(default=UNSET, description="The name of the ruleset.")
    target: Missing[Literal["branch", "tag"]] = Field(
        default=UNSET, description="The target of the ruleset."
    )
    enforcement: Missing[Literal["disabled", "active", "evaluate"]] = Field(
        default=UNSET,
        description="The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise).",
    )
    bypass_actors: Missing[List[RepositoryRulesetBypassActor]] = Field(
        default=UNSET,
        description="The actors that can bypass the rules in this ruleset",
    )
    conditions: Missing[
        Union[OrgRulesetConditionsOneof0, OrgRulesetConditionsOneof1]
    ] = Field(
        default=UNSET,
        title="Organization ruleset conditions",
        description="Conditions for an organization ruleset. The conditions object should contain both `repository_name` and `ref_name` properties or both `repository_id` and `ref_name` properties.\n",
    )
    rules: Missing[
        List[
            Union[
                RepositoryRuleCreation,
                RepositoryRuleUpdate,
                RepositoryRuleDeletion,
                RepositoryRuleRequiredLinearHistory,
                RepositoryRuleRequiredDeployments,
                RepositoryRuleRequiredSignatures,
                RepositoryRulePullRequest,
                RepositoryRuleRequiredStatusChecks,
                RepositoryRuleNonFastForward,
                RepositoryRuleCommitMessagePattern,
                RepositoryRuleCommitAuthorEmailPattern,
                RepositoryRuleCommitterEmailPattern,
                RepositoryRuleBranchNamePattern,
                RepositoryRuleTagNamePattern,
                RepositoryRuleWorkflows,
            ]
        ]
    ] = Field(default=UNSET, description="An array of rules within the ruleset.")


class OrgsOrgTeamsPostBody(GitHubModel):
    """OrgsOrgTeamsPostBody"""

    name: str = Field(description="The name of the team.")
    description: Missing[str] = Field(
        default=UNSET, description="The description of the team."
    )
    maintainers: Missing[List[str]] = Field(
        default=UNSET,
        description="List GitHub IDs for organization members who will become team maintainers.",
    )
    repo_names: Missing[List[str]] = Field(
        default=UNSET,
        description='The full name (e.g., "organization-name/repository-name") of repositories to add the team to.',
    )
    privacy: Missing[Literal["secret", "closed"]] = Field(
        default=UNSET,
        description="The level of privacy this team should have. The options are:  \n**For a non-nested team:**  \n * `secret` - only visible to organization owners and members of this team.  \n * `closed` - visible to all members of this organization.  \nDefault: `secret`  \n**For a parent or child team:**  \n * `closed` - visible to all members of this organization.  \nDefault for child team: `closed`",
    )
    notification_setting: Missing[
        Literal["notifications_enabled", "notifications_disabled"]
    ] = Field(
        default=UNSET,
        description="The notification setting the team has chosen. The options are:  \n * `notifications_enabled` - team members receive notifications when the team is @mentioned.  \n * `notifications_disabled` - no one receives notifications.  \nDefault: `notifications_enabled`",
    )
    permission: Missing[Literal["pull", "push"]] = Field(
        default=UNSET,
        description="**Deprecated**. The permission that new repositories will be added to the team with when none is specified.",
    )
    parent_team_id: Missing[int] = Field(
        default=UNSET, description="The ID of a team to set as the parent team."
    )


class OrgsOrgTeamsTeamSlugPatchBody(GitHubModel):
    """OrgsOrgTeamsTeamSlugPatchBody"""

    name: Missing[str] = Field(default=UNSET, description="The name of the team.")
    description: Missing[str] = Field(
        default=UNSET, description="The description of the team."
    )
    privacy: Missing[Literal["secret", "closed"]] = Field(
        default=UNSET,
        description="The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:  \n**For a non-nested team:**  \n * `secret` - only visible to organization owners and members of this team.  \n * `closed` - visible to all members of this organization.  \n**For a parent or child team:**  \n * `closed` - visible to all members of this organization.",
    )
    notification_setting: Missing[
        Literal["notifications_enabled", "notifications_disabled"]
    ] = Field(
        default=UNSET,
        description="The notification setting the team has chosen. Editing teams without specifying this parameter leaves `notification_setting` intact. The options are: \n * `notifications_enabled` - team members receive notifications when the team is @mentioned.  \n * `notifications_disabled` - no one receives notifications.",
    )
    permission: Missing[Literal["pull", "push", "admin"]] = Field(
        default=UNSET,
        description="**Deprecated**. The permission that new repositories will be added to the team with when none is specified.",
    )
    parent_team_id: Missing[Union[int, None]] = Field(
        default=UNSET, description="The ID of a team to set as the parent team."
    )


class OrgsOrgTeamsTeamSlugDiscussionsPostBody(GitHubModel):
    """OrgsOrgTeamsTeamSlugDiscussionsPostBody"""

    title: str = Field(description="The discussion post's title.")
    body: str = Field(description="The discussion post's body text.")
    private: Missing[bool] = Field(
        default=UNSET,
        description="Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.",
    )


class OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberPatchBody(GitHubModel):
    """OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberPatchBody"""

    title: Missing[str] = Field(
        default=UNSET, description="The discussion post's title."
    )
    body: Missing[str] = Field(
        default=UNSET, description="The discussion post's body text."
    )


class OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsPostBody(GitHubModel):
    """OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsPostBody"""

    body: str = Field(description="The discussion comment's body text.")


class OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsCommentNumberPatchBody(
    GitHubModel
):
    """OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsCommentNumberPatchBody"""

    body: str = Field(description="The discussion comment's body text.")


class OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsCommentNumberReactionsPostBody(
    GitHubModel
):
    """OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsCommentNumberReactionsPos
    tBody
    """

    content: Literal[
        "+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"
    ] = Field(
        description="The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion comment."
    )


class OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberReactionsPostBody(GitHubModel):
    """OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberReactionsPostBody"""

    content: Literal[
        "+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"
    ] = Field(
        description="The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion."
    )


class OrgsOrgTeamsTeamSlugMembershipsUsernamePutBody(GitHubModel):
    """OrgsOrgTeamsTeamSlugMembershipsUsernamePutBody"""

    role: Missing[Literal["member", "maintainer"]] = Field(
        default=UNSET, description="The role that this user should have in the team."
    )


class OrgsOrgTeamsTeamSlugProjectsProjectIdPutBody(GitHubModel):
    """OrgsOrgTeamsTeamSlugProjectsProjectIdPutBody"""

    permission: Missing[Literal["read", "write", "admin"]] = Field(
        default=UNSET,
        description="The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see \"[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).\"",
    )


class OrgsOrgTeamsTeamSlugProjectsProjectIdPutResponse403(GitHubModel):
    """OrgsOrgTeamsTeamSlugProjectsProjectIdPutResponse403"""

    message: Missing[str] = Field(default=UNSET)
    documentation_url: Missing[str] = Field(default=UNSET)


class OrgsOrgTeamsTeamSlugReposOwnerRepoPutBody(GitHubModel):
    """OrgsOrgTeamsTeamSlugReposOwnerRepoPutBody"""

    permission: Missing[str] = Field(
        default=UNSET,
        description="The permission to grant the team on this repository. We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.",
    )


class OrgsOrgSecurityProductEnablementPostBody(GitHubModel):
    """OrgsOrgSecurityProductEnablementPostBody"""

    query_suite: Missing[Literal["default", "extended"]] = Field(
        default=UNSET,
        description="CodeQL query suite to be used. If you specify the `query_suite` parameter, the default setup will be configured with this query suite only on all repositories that didn't have default setup already configured. It will not change the query suite on repositories that already have default setup configured.\nIf you don't specify any `query_suite` in your request, the preferred query suite of the organization will be applied.",
    )


class ProjectsColumnsCardsCardIdDeleteResponse403(GitHubModel):
    """ProjectsColumnsCardsCardIdDeleteResponse403"""

    message: Missing[str] = Field(default=UNSET)
    documentation_url: Missing[str] = Field(default=UNSET)
    errors: Missing[List[str]] = Field(default=UNSET)


class ProjectsColumnsCardsCardIdPatchBody(GitHubModel):
    """ProjectsColumnsCardsCardIdPatchBody"""

    note: Missing[Union[str, None]] = Field(
        default=UNSET, description="The project card's note"
    )
    archived: Missing[bool] = Field(
        default=UNSET, description="Whether or not the card is archived"
    )


class ProjectsColumnsCardsCardIdMovesPostBody(GitHubModel):
    """ProjectsColumnsCardsCardIdMovesPostBody"""

    position: Annotated[str, Field(pattern="^(?:top|bottom|after:\\d+)$")] = Field(
        description="The position of the card in a column. Can be one of: `top`, `bottom`, or `after:<card_id>` to place after the specified card."
    )
    column_id: Missing[int] = Field(
        default=UNSET,
        description="The unique identifier of the column the card should be moved to",
    )


class ProjectsColumnsCardsCardIdMovesPostResponse201(GitHubModel):
    """ProjectsColumnsCardsCardIdMovesPostResponse201"""


class ProjectsColumnsCardsCardIdMovesPostResponse403(GitHubModel):
    """ProjectsColumnsCardsCardIdMovesPostResponse403"""

    message: Missing[str] = Field(default=UNSET)
    documentation_url: Missing[str] = Field(default=UNSET)
    errors: Missing[
        List[ProjectsColumnsCardsCardIdMovesPostResponse403PropErrorsItems]
    ] = Field(default=UNSET)


class ProjectsColumnsCardsCardIdMovesPostResponse403PropErrorsItems(GitHubModel):
    """ProjectsColumnsCardsCardIdMovesPostResponse403PropErrorsItems"""

    code: Missing[str] = Field(default=UNSET)
    message: Missing[str] = Field(default=UNSET)
    resource: Missing[str] = Field(default=UNSET)
    field: Missing[str] = Field(default=UNSET)


class ProjectsColumnsCardsCardIdMovesPostResponse503(GitHubModel):
    """ProjectsColumnsCardsCardIdMovesPostResponse503"""

    code: Missing[str] = Field(default=UNSET)
    message: Missing[str] = Field(default=UNSET)
    documentation_url: Missing[str] = Field(default=UNSET)
    errors: Missing[
        List[ProjectsColumnsCardsCardIdMovesPostResponse503PropErrorsItems]
    ] = Field(default=UNSET)


class ProjectsColumnsCardsCardIdMovesPostResponse503PropErrorsItems(GitHubModel):
    """ProjectsColumnsCardsCardIdMovesPostResponse503PropErrorsItems"""

    code: Missing[str] = Field(default=UNSET)
    message: Missing[str] = Field(default=UNSET)


class ProjectsColumnsColumnIdPatchBody(GitHubModel):
    """ProjectsColumnsColumnIdPatchBody"""

    name: str = Field(description="Name of the project column")


class ProjectsColumnsColumnIdCardsPostBodyOneof0(GitHubModel):
    """ProjectsColumnsColumnIdCardsPostBodyOneof0"""

    note: Union[str, None] = Field(description="The project card's note")


class ProjectsColumnsColumnIdCardsPostBodyOneof1(GitHubModel):
    """ProjectsColumnsColumnIdCardsPostBodyOneof1"""

    content_id: int = Field(
        description="The unique identifier of the content associated with the card"
    )
    content_type: str = Field(
        description="The piece of content associated with the card"
    )


class ProjectsColumnsColumnIdCardsPostResponse503(GitHubModel):
    """ProjectsColumnsColumnIdCardsPostResponse503"""

    code: Missing[str] = Field(default=UNSET)
    message: Missing[str] = Field(default=UNSET)
    documentation_url: Missing[str] = Field(default=UNSET)
    errors: Missing[
        List[ProjectsColumnsColumnIdCardsPostResponse503PropErrorsItems]
    ] = Field(default=UNSET)


class ProjectsColumnsColumnIdCardsPostResponse503PropErrorsItems(GitHubModel):
    """ProjectsColumnsColumnIdCardsPostResponse503PropErrorsItems"""

    code: Missing[str] = Field(default=UNSET)
    message: Missing[str] = Field(default=UNSET)


class ProjectsColumnsColumnIdMovesPostBody(GitHubModel):
    """ProjectsColumnsColumnIdMovesPostBody"""

    position: Annotated[str, Field(pattern="^(?:first|last|after:\\d+)$")] = Field(
        description="The position of the column in a project. Can be one of: `first`, `last`, or `after:<column_id>` to place after the specified column."
    )


class ProjectsColumnsColumnIdMovesPostResponse201(GitHubModel):
    """ProjectsColumnsColumnIdMovesPostResponse201"""


class ProjectsProjectIdDeleteResponse403(GitHubModel):
    """ProjectsProjectIdDeleteResponse403"""

    message: Missing[str] = Field(default=UNSET)
    documentation_url: Missing[str] = Field(default=UNSET)
    errors: Missing[List[str]] = Field(default=UNSET)


class ProjectsProjectIdPatchBody(GitHubModel):
    """ProjectsProjectIdPatchBody"""

    name: Missing[str] = Field(default=UNSET, description="Name of the project")
    body: Missing[Union[str, None]] = Field(
        default=UNSET, description="Body of the project"
    )
    state: Missing[str] = Field(
        default=UNSET, description="State of the project; either 'open' or 'closed'"
    )
    organization_permission: Missing[Literal["read", "write", "admin", "none"]] = Field(
        default=UNSET,
        description="The baseline permission that all organization members have on this project",
    )
    private: Missing[bool] = Field(
        default=UNSET,
        description="Whether or not this project can be seen by everyone.",
    )


class ProjectsProjectIdPatchResponse403(GitHubModel):
    """ProjectsProjectIdPatchResponse403"""

    message: Missing[str] = Field(default=UNSET)
    documentation_url: Missing[str] = Field(default=UNSET)
    errors: Missing[List[str]] = Field(default=UNSET)


class ProjectsProjectIdCollaboratorsUsernamePutBody(GitHubModel):
    """ProjectsProjectIdCollaboratorsUsernamePutBody"""

    permission: Missing[Literal["read", "write", "admin"]] = Field(
        default=UNSET, description="The permission to grant the collaborator."
    )


class ProjectsProjectIdColumnsPostBody(GitHubModel):
    """ProjectsProjectIdColumnsPostBody"""

    name: str = Field(description="Name of the project column")


class ReposOwnerRepoDeleteResponse403(GitHubModel):
    """ReposOwnerRepoDeleteResponse403"""

    message: Missing[str] = Field(default=UNSET)
    documentation_url: Missing[str] = Field(default=UNSET)


class ReposOwnerRepoPatchBody(GitHubModel):
    """ReposOwnerRepoPatchBody"""

    name: Missing[str] = Field(default=UNSET, description="The name of the repository.")
    description: Missing[str] = Field(
        default=UNSET, description="A short description of the repository."
    )
    homepage: Missing[str] = Field(
        default=UNSET, description="A URL with more information about the repository."
    )
    private: Missing[bool] = Field(
        default=UNSET,
        description="Either `true` to make the repository private or `false` to make it public. Default: `false`.  \n**Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.",
    )
    visibility: Missing[Literal["public", "private"]] = Field(
        default=UNSET, description="The visibility of the repository."
    )
    security_and_analysis: Missing[
        Union[ReposOwnerRepoPatchBodyPropSecurityAndAnalysis, None]
    ] = Field(
        default=UNSET,
        description='Specify which security and analysis features to enable or disable for the repository.\n\nTo use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."\n\nFor example, to enable GitHub Advanced Security, use this data in the body of the `PATCH` request:\n`{ "security_and_analysis": {"advanced_security": { "status": "enabled" } } }`.\n\nYou can check which security and analysis features are currently enabled by using a `GET /repos/{owner}/{repo}` request.',
    )
    has_issues: Missing[bool] = Field(
        default=UNSET,
        description="Either `true` to enable issues for this repository or `false` to disable them.",
    )
    has_projects: Missing[bool] = Field(
        default=UNSET,
        description="Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.",
    )
    has_wiki: Missing[bool] = Field(
        default=UNSET,
        description="Either `true` to enable the wiki for this repository or `false` to disable it.",
    )
    is_template: Missing[bool] = Field(
        default=UNSET,
        description="Either `true` to make this repo available as a template repository or `false` to prevent it.",
    )
    default_branch: Missing[str] = Field(
        default=UNSET, description="Updates the default branch for this repository."
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET,
        description="Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.",
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET,
        description="Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.",
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET,
        description="Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.",
    )
    allow_auto_merge: Missing[bool] = Field(
        default=UNSET,
        description="Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.",
    )
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.",
    )
    allow_update_branch: Missing[bool] = Field(
        default=UNSET,
        description="Either `true` to always allow a pull request head branch that is behind its base branch to be updated even if it is not required to be up to date before merging, or false otherwise.",
    )
    use_squash_pr_title_as_default: Missing[bool] = Field(
        default=UNSET,
        description="Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    archived: Missing[bool] = Field(
        default=UNSET,
        description="Whether to archive this repository. `false` will unarchive a previously archived repository.",
    )
    allow_forking: Missing[bool] = Field(
        default=UNSET,
        description="Either `true` to allow private forks, or `false` to prevent private forks.",
    )
    web_commit_signoff_required: Missing[bool] = Field(
        default=UNSET,
        description="Either `true` to require contributors to sign off on web-based commits, or `false` to not require contributors to sign off on web-based commits.",
    )


class ReposOwnerRepoPatchBodyPropSecurityAndAnalysisPropAdvancedSecurity(GitHubModel):
    """ReposOwnerRepoPatchBodyPropSecurityAndAnalysisPropAdvancedSecurity

    Use the `status` property to enable or disable GitHub Advanced Security for this
    repository. For more information, see "[About GitHub Advanced
    Security](/github/getting-started-with-github/learning-about-github/about-
    github-advanced-security)."
    """

    status: Missing[str] = Field(
        default=UNSET, description="Can be `enabled` or `disabled`."
    )


class ReposOwnerRepoPatchBodyPropSecurityAndAnalysisPropSecretScanning(GitHubModel):
    """ReposOwnerRepoPatchBodyPropSecurityAndAnalysisPropSecretScanning

    Use the `status` property to enable or disable secret scanning for this
    repository. For more information, see "[About secret scanning](/code-
    security/secret-security/about-secret-scanning)."
    """

    status: Missing[str] = Field(
        default=UNSET, description="Can be `enabled` or `disabled`."
    )


class ReposOwnerRepoPatchBodyPropSecurityAndAnalysisPropSecretScanningPushProtection(
    GitHubModel
):
    """ReposOwnerRepoPatchBodyPropSecurityAndAnalysisPropSecretScanningPushProtection

    Use the `status` property to enable or disable secret scanning push protection
    for this repository. For more information, see "[Protecting pushes with secret
    scanning](/code-security/secret-scanning/protecting-pushes-with-secret-
    scanning)."
    """

    status: Missing[str] = Field(
        default=UNSET, description="Can be `enabled` or `disabled`."
    )


class ReposOwnerRepoPatchBodyPropSecurityAndAnalysis(GitHubModel):
    """ReposOwnerRepoPatchBodyPropSecurityAndAnalysis

    Specify which security and analysis features to enable or disable for the
    repository.

    To use this parameter, you must have admin permissions for the repository or be
    an owner or security manager for the organization that owns the repository. For
    more information, see "[Managing security managers in your
    organization](https://docs.github.com/organizations/managing-peoples-access-to-
    your-organization-with-roles/managing-security-managers-in-your-organization)."

    For example, to enable GitHub Advanced Security, use this data in the body of
    the `PATCH` request:
    `{ "security_and_analysis": {"advanced_security": { "status": "enabled" } } }`.

    You can check which security and analysis features are currently enabled by
    using a `GET /repos/{owner}/{repo}` request.
    """

    advanced_security: Missing[
        ReposOwnerRepoPatchBodyPropSecurityAndAnalysisPropAdvancedSecurity
    ] = Field(
        default=UNSET,
        description='Use the `status` property to enable or disable GitHub Advanced Security for this repository. For more information, see "[About GitHub Advanced Security](/github/getting-started-with-github/learning-about-github/about-github-advanced-security)."',
    )
    secret_scanning: Missing[
        ReposOwnerRepoPatchBodyPropSecurityAndAnalysisPropSecretScanning
    ] = Field(
        default=UNSET,
        description='Use the `status` property to enable or disable secret scanning for this repository. For more information, see "[About secret scanning](/code-security/secret-security/about-secret-scanning)."',
    )
    secret_scanning_push_protection: Missing[
        ReposOwnerRepoPatchBodyPropSecurityAndAnalysisPropSecretScanningPushProtection
    ] = Field(
        default=UNSET,
        description='Use the `status` property to enable or disable secret scanning push protection for this repository. For more information, see "[Protecting pushes with secret scanning](/code-security/secret-scanning/protecting-pushes-with-secret-scanning)."',
    )


class ReposOwnerRepoActionsArtifactsGetResponse200(GitHubModel):
    """ReposOwnerRepoActionsArtifactsGetResponse200"""

    total_count: int = Field()
    artifacts: List[Artifact] = Field()


class ReposOwnerRepoActionsJobsJobIdRerunPostBody(GitHubModel):
    """ReposOwnerRepoActionsJobsJobIdRerunPostBody"""

    enable_debug_logging: Missing[bool] = Field(
        default=UNSET, description="Whether to enable debug logging for the re-run."
    )


class ReposOwnerRepoActionsOidcCustomizationSubPutBody(GitHubModel):
    """Actions OIDC subject customization for a repository

    Actions OIDC subject customization for a repository
    """

    use_default: bool = Field(
        description="Whether to use the default template or not. If `true`, the `include_claim_keys` field is ignored."
    )
    include_claim_keys: Missing[List[str]] = Field(
        default=UNSET,
        description="Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.",
    )


class ReposOwnerRepoActionsOrganizationSecretsGetResponse200(GitHubModel):
    """ReposOwnerRepoActionsOrganizationSecretsGetResponse200"""

    total_count: int = Field()
    secrets: List[ActionsSecret] = Field()


class ReposOwnerRepoActionsOrganizationVariablesGetResponse200(GitHubModel):
    """ReposOwnerRepoActionsOrganizationVariablesGetResponse200"""

    total_count: int = Field()
    variables: List[ActionsVariable] = Field()


class ReposOwnerRepoActionsPermissionsPutBody(GitHubModel):
    """ReposOwnerRepoActionsPermissionsPutBody"""

    enabled: bool = Field(
        description="Whether GitHub Actions is enabled on the repository."
    )
    allowed_actions: Missing[Literal["all", "local_only", "selected"]] = Field(
        default=UNSET,
        description="The permissions policy that controls the actions and reusable workflows that are allowed to run.",
    )


class ReposOwnerRepoActionsRunnersGetResponse200(GitHubModel):
    """ReposOwnerRepoActionsRunnersGetResponse200"""

    total_count: int = Field()
    runners: List[Runner] = Field()


class ReposOwnerRepoActionsRunnersGenerateJitconfigPostBody(GitHubModel):
    """ReposOwnerRepoActionsRunnersGenerateJitconfigPostBody"""

    name: str = Field(description="The name of the new runner.")
    runner_group_id: int = Field(
        description="The ID of the runner group to register the runner to."
    )
    labels: Annotated[List[str], Field(max_length=100, min_length=1)] = Field(
        description="The names of the custom labels to add to the runner. **Minimum items**: 1. **Maximum items**: 100."
    )
    work_folder: Missing[str] = Field(
        default=UNSET,
        description="The working directory to be used for job execution, relative to the runner install directory.",
    )


class ReposOwnerRepoActionsRunnersRunnerIdLabelsPutBody(GitHubModel):
    """ReposOwnerRepoActionsRunnersRunnerIdLabelsPutBody"""

    labels: Annotated[List[str], Field(max_length=100)] = Field(
        description="The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels."
    )


class ReposOwnerRepoActionsRunnersRunnerIdLabelsPostBody(GitHubModel):
    """ReposOwnerRepoActionsRunnersRunnerIdLabelsPostBody"""

    labels: Annotated[List[str], Field(max_length=100, min_length=1)] = Field(
        description="The names of the custom labels to add to the runner."
    )


class ReposOwnerRepoActionsRunsGetResponse200(GitHubModel):
    """ReposOwnerRepoActionsRunsGetResponse200"""

    total_count: int = Field()
    workflow_runs: List[WorkflowRun] = Field()


class ReposOwnerRepoActionsRunsRunIdArtifactsGetResponse200(GitHubModel):
    """ReposOwnerRepoActionsRunsRunIdArtifactsGetResponse200"""

    total_count: int = Field()
    artifacts: List[Artifact] = Field()


class ReposOwnerRepoActionsRunsRunIdAttemptsAttemptNumberJobsGetResponse200(
    GitHubModel
):
    """ReposOwnerRepoActionsRunsRunIdAttemptsAttemptNumberJobsGetResponse200"""

    total_count: int = Field()
    jobs: List[Job] = Field()


class ReposOwnerRepoActionsRunsRunIdJobsGetResponse200(GitHubModel):
    """ReposOwnerRepoActionsRunsRunIdJobsGetResponse200"""

    total_count: int = Field()
    jobs: List[Job] = Field()


class ReposOwnerRepoActionsRunsRunIdPendingDeploymentsPostBody(GitHubModel):
    """ReposOwnerRepoActionsRunsRunIdPendingDeploymentsPostBody"""

    environment_ids: List[int] = Field(
        description="The list of environment ids to approve or reject"
    )
    state: Literal["approved", "rejected"] = Field(
        description="Whether to approve or reject deployment to the specified environments."
    )
    comment: str = Field(description="A comment to accompany the deployment review")


class ReposOwnerRepoActionsRunsRunIdRerunPostBody(GitHubModel):
    """ReposOwnerRepoActionsRunsRunIdRerunPostBody"""

    enable_debug_logging: Missing[bool] = Field(
        default=UNSET, description="Whether to enable debug logging for the re-run."
    )


class ReposOwnerRepoActionsRunsRunIdRerunFailedJobsPostBody(GitHubModel):
    """ReposOwnerRepoActionsRunsRunIdRerunFailedJobsPostBody"""

    enable_debug_logging: Missing[bool] = Field(
        default=UNSET, description="Whether to enable debug logging for the re-run."
    )


class ReposOwnerRepoActionsSecretsGetResponse200(GitHubModel):
    """ReposOwnerRepoActionsSecretsGetResponse200"""

    total_count: int = Field()
    secrets: List[ActionsSecret] = Field()


class ReposOwnerRepoActionsSecretsSecretNamePutBody(GitHubModel):
    """ReposOwnerRepoActionsSecretsSecretNamePutBody"""

    encrypted_value: Missing[
        Annotated[
            str,
            Field(
                pattern="^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"
            ),
        ]
    ] = Field(
        default=UNSET,
        description="Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/actions/secrets#get-a-repository-public-key) endpoint.",
    )
    key_id: Missing[str] = Field(
        default=UNSET, description="ID of the key you used to encrypt the secret."
    )


class ReposOwnerRepoActionsVariablesGetResponse200(GitHubModel):
    """ReposOwnerRepoActionsVariablesGetResponse200"""

    total_count: int = Field()
    variables: List[ActionsVariable] = Field()


class ReposOwnerRepoActionsVariablesPostBody(GitHubModel):
    """ReposOwnerRepoActionsVariablesPostBody"""

    name: str = Field(description="The name of the variable.")
    value: str = Field(description="The value of the variable.")


class ReposOwnerRepoActionsVariablesNamePatchBody(GitHubModel):
    """ReposOwnerRepoActionsVariablesNamePatchBody"""

    name: Missing[str] = Field(default=UNSET, description="The name of the variable.")
    value: Missing[str] = Field(default=UNSET, description="The value of the variable.")


class ReposOwnerRepoActionsWorkflowsGetResponse200(GitHubModel):
    """ReposOwnerRepoActionsWorkflowsGetResponse200"""

    total_count: int = Field()
    workflows: List[Workflow] = Field()


class ReposOwnerRepoActionsWorkflowsWorkflowIdDispatchesPostBody(GitHubModel):
    """ReposOwnerRepoActionsWorkflowsWorkflowIdDispatchesPostBody"""

    ref: str = Field(
        description="The git reference for the workflow. The reference can be a branch or tag name."
    )
    inputs: Missing[
        ReposOwnerRepoActionsWorkflowsWorkflowIdDispatchesPostBodyPropInputs
    ] = Field(
        default=UNSET,
        description="Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted.",
    )


class ReposOwnerRepoActionsWorkflowsWorkflowIdDispatchesPostBodyPropInputs(
    ExtraGitHubModel
):
    """ReposOwnerRepoActionsWorkflowsWorkflowIdDispatchesPostBodyPropInputs

    Input keys and values configured in the workflow file. The maximum number of
    properties is 10. Any default properties configured in the workflow file will be
    used when `inputs` are omitted.
    """


class ReposOwnerRepoActionsWorkflowsWorkflowIdRunsGetResponse200(GitHubModel):
    """ReposOwnerRepoActionsWorkflowsWorkflowIdRunsGetResponse200"""

    total_count: int = Field()
    workflow_runs: List[WorkflowRun] = Field()


class ReposOwnerRepoAutolinksPostBody(GitHubModel):
    """ReposOwnerRepoAutolinksPostBody"""

    key_prefix: str = Field(
        description="This prefix appended by certain characters will generate a link any time it is found in an issue, pull request, or commit."
    )
    url_template: str = Field(
        description="The URL must contain `<num>` for the reference number. `<num>` matches different characters depending on the value of `is_alphanumeric`."
    )
    is_alphanumeric: Missing[bool] = Field(
        default=UNSET,
        description="Whether this autolink reference matches alphanumeric characters. If true, the `<num>` parameter of the `url_template` matches alphanumeric characters `A-Z` (case insensitive), `0-9`, and `-`. If false, this autolink reference only matches numeric characters.",
    )


class ReposOwnerRepoBranchesBranchProtectionPutBody(GitHubModel):
    """ReposOwnerRepoBranchesBranchProtectionPutBody"""

    required_status_checks: Union[
        ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredStatusChecks, None
    ] = Field(
        description="Require status checks to pass before merging. Set to `null` to disable."
    )
    enforce_admins: Union[bool, None] = Field(
        description="Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable."
    )
    required_pull_request_reviews: Union[
        ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredPullRequestReviews,
        None,
    ] = Field(
        description="Require at least one approving review on a pull request, before merging. Set to `null` to disable."
    )
    restrictions: Union[
        ReposOwnerRepoBranchesBranchProtectionPutBodyPropRestrictions, None
    ] = Field(
        description="Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable."
    )
    required_linear_history: Missing[bool] = Field(
        default=UNSET,
        description='Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see "[Requiring a linear commit history](https://docs.github.com/github/administering-a-repository/requiring-a-linear-commit-history)" in the GitHub Help documentation.',
    )
    allow_force_pushes: Missing[Union[bool, None]] = Field(
        default=UNSET,
        description='Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation."',
    )
    allow_deletions: Missing[bool] = Field(
        default=UNSET,
        description='Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation.',
    )
    block_creations: Missing[bool] = Field(
        default=UNSET,
        description="If set to `true`, the `restrictions` branch protection settings which limits who can push will also block pushes which create new branches, unless the push is initiated by a user, team, or app which has the ability to push. Set to `true` to restrict new branch creation. Default: `false`.",
    )
    required_conversation_resolution: Missing[bool] = Field(
        default=UNSET,
        description="Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`.",
    )
    lock_branch: Missing[bool] = Field(
        default=UNSET,
        description="Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. Default: `false`.",
    )
    allow_fork_syncing: Missing[bool] = Field(
        default=UNSET,
        description="Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. Default: `false`.",
    )


class ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredStatusChecksPropChecksItems(
    GitHubModel
):
    """ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredStatusChecksPropChecksI
    tems
    """

    context: str = Field(description="The name of the required check")
    app_id: Missing[int] = Field(
        default=UNSET,
        description="The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.",
    )


class ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredStatusChecks(
    GitHubModel
):
    """ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredStatusChecks

    Require status checks to pass before merging. Set to `null` to disable.
    """

    strict: bool = Field(
        description="Require branches to be up to date before merging."
    )
    contexts: List[str] = Field(
        description="**Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.\n"
    )
    checks: Missing[
        List[
            ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredStatusChecksPropChecksItems
        ]
    ] = Field(
        default=UNSET,
        description="The list of status checks to require in order to merge into this branch.",
    )


class ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredPullRequestReviewsPropDismissalRestrictions(
    GitHubModel
):
    """ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredPullRequestReviewsPropD
    ismissalRestrictions

    Specify which users, teams, and apps can dismiss pull request reviews. Pass an
    empty `dismissal_restrictions` object to disable. User and team
    `dismissal_restrictions` are only available for organization-owned repositories.
    Omit this parameter for personal repositories.
    """

    users: Missing[List[str]] = Field(
        default=UNSET, description="The list of user `login`s with dismissal access"
    )
    teams: Missing[List[str]] = Field(
        default=UNSET, description="The list of team `slug`s with dismissal access"
    )
    apps: Missing[List[str]] = Field(
        default=UNSET, description="The list of app `slug`s with dismissal access"
    )


class ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredPullRequestReviewsPropBypassPullRequestAllowances(
    GitHubModel
):
    """ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredPullRequestReviewsPropB
    ypassPullRequestAllowances

    Allow specific users, teams, or apps to bypass pull request requirements.
    """

    users: Missing[List[str]] = Field(
        default=UNSET,
        description="The list of user `login`s allowed to bypass pull request requirements.",
    )
    teams: Missing[List[str]] = Field(
        default=UNSET,
        description="The list of team `slug`s allowed to bypass pull request requirements.",
    )
    apps: Missing[List[str]] = Field(
        default=UNSET,
        description="The list of app `slug`s allowed to bypass pull request requirements.",
    )


class ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredPullRequestReviews(
    GitHubModel
):
    """ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredPullRequestReviews

    Require at least one approving review on a pull request, before merging. Set to
    `null` to disable.
    """

    dismissal_restrictions: Missing[
        ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredPullRequestReviewsPropDismissalRestrictions
    ] = Field(
        default=UNSET,
        description="Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.",
    )
    dismiss_stale_reviews: Missing[bool] = Field(
        default=UNSET,
        description="Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.",
    )
    require_code_owner_reviews: Missing[bool] = Field(
        default=UNSET,
        description="Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) review them.",
    )
    required_approving_review_count: Missing[int] = Field(
        default=UNSET,
        description="Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.",
    )
    require_last_push_approval: Missing[bool] = Field(
        default=UNSET,
        description="Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`.",
    )
    bypass_pull_request_allowances: Missing[
        ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredPullRequestReviewsPropBypassPullRequestAllowances
    ] = Field(
        default=UNSET,
        description="Allow specific users, teams, or apps to bypass pull request requirements.",
    )


class ReposOwnerRepoBranchesBranchProtectionPutBodyPropRestrictions(GitHubModel):
    """ReposOwnerRepoBranchesBranchProtectionPutBodyPropRestrictions

    Restrict who can push to the protected branch. User, app, and team
    `restrictions` are only available for organization-owned repositories. Set to
    `null` to disable.
    """

    users: List[str] = Field(description="The list of user `login`s with push access")
    teams: List[str] = Field(description="The list of team `slug`s with push access")
    apps: Missing[List[str]] = Field(
        default=UNSET, description="The list of app `slug`s with push access"
    )


class ReposOwnerRepoBranchesBranchProtectionRequiredPullRequestReviewsPatchBody(
    GitHubModel
):
    """ReposOwnerRepoBranchesBranchProtectionRequiredPullRequestReviewsPatchBody"""

    dismissal_restrictions: Missing[
        ReposOwnerRepoBranchesBranchProtectionRequiredPullRequestReviewsPatchBodyPropDismissalRestrictions
    ] = Field(
        default=UNSET,
        description="Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.",
    )
    dismiss_stale_reviews: Missing[bool] = Field(
        default=UNSET,
        description="Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.",
    )
    require_code_owner_reviews: Missing[bool] = Field(
        default=UNSET,
        description="Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) have reviewed.",
    )
    required_approving_review_count: Missing[int] = Field(
        default=UNSET,
        description="Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.",
    )
    require_last_push_approval: Missing[bool] = Field(
        default=UNSET,
        description="Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`",
    )
    bypass_pull_request_allowances: Missing[
        ReposOwnerRepoBranchesBranchProtectionRequiredPullRequestReviewsPatchBodyPropBypassPullRequestAllowances
    ] = Field(
        default=UNSET,
        description="Allow specific users, teams, or apps to bypass pull request requirements.",
    )


class ReposOwnerRepoBranchesBranchProtectionRequiredPullRequestReviewsPatchBodyPropDismissalRestrictions(
    GitHubModel
):
    """ReposOwnerRepoBranchesBranchProtectionRequiredPullRequestReviewsPatchBodyPropDis
    missalRestrictions

    Specify which users, teams, and apps can dismiss pull request reviews. Pass an
    empty `dismissal_restrictions` object to disable. User and team
    `dismissal_restrictions` are only available for organization-owned repositories.
    Omit this parameter for personal repositories.
    """

    users: Missing[List[str]] = Field(
        default=UNSET, description="The list of user `login`s with dismissal access"
    )
    teams: Missing[List[str]] = Field(
        default=UNSET, description="The list of team `slug`s with dismissal access"
    )
    apps: Missing[List[str]] = Field(
        default=UNSET, description="The list of app `slug`s with dismissal access"
    )


class ReposOwnerRepoBranchesBranchProtectionRequiredPullRequestReviewsPatchBodyPropBypassPullRequestAllowances(
    GitHubModel
):
    """ReposOwnerRepoBranchesBranchProtectionRequiredPullRequestReviewsPatchBodyPropByp
    assPullRequestAllowances

    Allow specific users, teams, or apps to bypass pull request requirements.
    """

    users: Missing[List[str]] = Field(
        default=UNSET,
        description="The list of user `login`s allowed to bypass pull request requirements.",
    )
    teams: Missing[List[str]] = Field(
        default=UNSET,
        description="The list of team `slug`s allowed to bypass pull request requirements.",
    )
    apps: Missing[List[str]] = Field(
        default=UNSET,
        description="The list of app `slug`s allowed to bypass pull request requirements.",
    )


class ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksPatchBody(GitHubModel):
    """ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksPatchBody"""

    strict: Missing[bool] = Field(
        default=UNSET, description="Require branches to be up to date before merging."
    )
    contexts: Missing[List[str]] = Field(
        default=UNSET,
        description="**Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.\n",
    )
    checks: Missing[
        List[
            ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksPatchBodyPropChecksItems
        ]
    ] = Field(
        default=UNSET,
        description="The list of status checks to require in order to merge into this branch.",
    )


class ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksPatchBodyPropChecksItems(
    GitHubModel
):
    """ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksPatchBodyPropChecksIte
    ms
    """

    context: str = Field(description="The name of the required check")
    app_id: Missing[int] = Field(
        default=UNSET,
        description="The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.",
    )


class ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsPutBodyOneof0(
    GitHubModel
):
    """ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsPutBodyOneof0

    Examples:
        {'contexts': ['contexts']}
    """

    contexts: List[str] = Field(description="The name of the status checks")


class ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsPostBodyOneof0(
    GitHubModel
):
    """ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsPostBodyOneof0

    Examples:
        {'contexts': ['contexts']}
    """

    contexts: List[str] = Field(description="The name of the status checks")


class ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsDeleteBodyOneof0(
    GitHubModel
):
    """ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsDeleteBodyOneo
    f0

    Examples:
        {'contexts': ['contexts']}
    """

    contexts: List[str] = Field(description="The name of the status checks")


class ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsPutBodyOneof0(GitHubModel):
    """ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsPutBodyOneof0

    Examples:
        {'apps': ['my-app']}
    """

    apps: List[str] = Field(
        description="The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items."
    )


class ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsPostBodyOneof0(GitHubModel):
    """ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsPostBodyOneof0

    Examples:
        {'apps': ['my-app']}
    """

    apps: List[str] = Field(
        description="The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items."
    )


class ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsDeleteBodyOneof0(
    GitHubModel
):
    """ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsDeleteBodyOneof0

    Examples:
        {'apps': ['my-app']}
    """

    apps: List[str] = Field(
        description="The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items."
    )


class ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsPutBodyOneof0(GitHubModel):
    """ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsPutBodyOneof0

    Examples:
        {'teams': ['justice-league']}
    """

    teams: List[str] = Field(description="The slug values for teams")


class ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsPostBodyOneof0(
    GitHubModel
):
    """ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsPostBodyOneof0

    Examples:
        {'teams': ['my-team']}
    """

    teams: List[str] = Field(description="The slug values for teams")


class ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsDeleteBodyOneof0(
    GitHubModel
):
    """ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsDeleteBodyOneof0

    Examples:
        {'teams': ['my-team']}
    """

    teams: List[str] = Field(description="The slug values for teams")


class ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersPutBodyOneof0(GitHubModel):
    """ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersPutBodyOneof0

    Examples:
        {'users': ['mona']}
    """

    users: List[str] = Field(description="The username for users")


class ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersPostBodyOneof0(
    GitHubModel
):
    """ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersPostBodyOneof0

    Examples:
        {'users': ['mona']}
    """

    users: List[str] = Field(description="The username for users")


class ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersDeleteBodyOneof0(
    GitHubModel
):
    """ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersDeleteBodyOneof0

    Examples:
        {'users': ['mona']}
    """

    users: List[str] = Field(description="The username for users")


class ReposOwnerRepoBranchesBranchRenamePostBody(GitHubModel):
    """ReposOwnerRepoBranchesBranchRenamePostBody"""

    new_name: str = Field(description="The new name of the branch.")


class ReposOwnerRepoCheckRunsPostBodyPropOutput(GitHubModel):
    """ReposOwnerRepoCheckRunsPostBodyPropOutput

    Check runs can accept a variety of data in the `output` object, including a
    `title` and `summary` and can optionally provide descriptive details about the
    run.
    """

    title: str = Field(description="The title of the check run.")
    summary: Annotated[str, Field(max_length=65535)] = Field(
        description="The summary of the check run. This parameter supports Markdown. **Maximum length**: 65535 characters."
    )
    text: Missing[Annotated[str, Field(max_length=65535)]] = Field(
        default=UNSET,
        description="The details of the check run. This parameter supports Markdown. **Maximum length**: 65535 characters.",
    )
    annotations: Missing[
        Annotated[
            List[ReposOwnerRepoCheckRunsPostBodyPropOutputPropAnnotationsItems],
            Field(max_length=50),
        ]
    ] = Field(
        default=UNSET,
        description='Adds information from your analysis to specific lines of code. Annotations are visible on GitHub in the **Checks** and **Files changed** tab of the pull request. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/rest/checks/runs#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. GitHub Actions are limited to 10 warning annotations and 10 error annotations per step. For details about how you can view annotations on GitHub, see "[About status checks](https://docs.github.com/articles/about-status-checks#checks)".',
    )
    images: Missing[
        List[ReposOwnerRepoCheckRunsPostBodyPropOutputPropImagesItems]
    ] = Field(
        default=UNSET,
        description="Adds images to the output displayed in the GitHub pull request UI.",
    )


class ReposOwnerRepoCheckRunsPostBodyPropOutputPropAnnotationsItems(GitHubModel):
    """ReposOwnerRepoCheckRunsPostBodyPropOutputPropAnnotationsItems"""

    path: str = Field(
        description="The path of the file to add an annotation to. For example, `assets/css/main.css`."
    )
    start_line: int = Field(
        description="The start line of the annotation. Line numbers start at 1."
    )
    end_line: int = Field(description="The end line of the annotation.")
    start_column: Missing[int] = Field(
        default=UNSET,
        description="The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. Column numbers start at 1.",
    )
    end_column: Missing[int] = Field(
        default=UNSET,
        description="The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.",
    )
    annotation_level: Literal["notice", "warning", "failure"] = Field(
        description="The level of the annotation."
    )
    message: str = Field(
        description="A short description of the feedback for these lines of code. The maximum size is 64 KB."
    )
    title: Missing[str] = Field(
        default=UNSET,
        description="The title that represents the annotation. The maximum size is 255 characters.",
    )
    raw_details: Missing[str] = Field(
        default=UNSET,
        description="Details about this annotation. The maximum size is 64 KB.",
    )


class ReposOwnerRepoCheckRunsPostBodyPropOutputPropImagesItems(GitHubModel):
    """ReposOwnerRepoCheckRunsPostBodyPropOutputPropImagesItems"""

    alt: str = Field(description="The alternative text for the image.")
    image_url: str = Field(description="The full URL of the image.")
    caption: Missing[str] = Field(
        default=UNSET, description="A short image description."
    )


class ReposOwnerRepoCheckRunsPostBodyPropActionsItems(GitHubModel):
    """ReposOwnerRepoCheckRunsPostBodyPropActionsItems"""

    label: Annotated[str, Field(max_length=20)] = Field(
        description="The text to be displayed on a button in the web UI. The maximum size is 20 characters."
    )
    description: Annotated[str, Field(max_length=40)] = Field(
        description="A short explanation of what this action would do. The maximum size is 40 characters."
    )
    identifier: Annotated[str, Field(max_length=20)] = Field(
        description="A reference for the action on the integrator's system. The maximum size is 20 characters."
    )


class ReposOwnerRepoCheckRunsPostBodyOneof0(ExtraGitHubModel):
    """ReposOwnerRepoCheckRunsPostBodyOneof0"""

    name: str = Field(
        description='The name of the check. For example, "code-coverage".'
    )
    head_sha: str = Field(description="The SHA of the commit.")
    details_url: Missing[str] = Field(
        default=UNSET,
        description="The URL of the integrator's site that has the full details of the check. If the integrator does not provide this, then the homepage of the GitHub app is used.",
    )
    external_id: Missing[str] = Field(
        default=UNSET, description="A reference for the run on the integrator's system."
    )
    status: Literal["completed"] = Field()
    started_at: Missing[datetime] = Field(
        default=UNSET,
        description="The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )
    conclusion: Literal[
        "action_required",
        "cancelled",
        "failure",
        "neutral",
        "success",
        "skipped",
        "stale",
        "timed_out",
    ] = Field(
        description="**Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. \n**Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this."
    )
    completed_at: Missing[datetime] = Field(
        default=UNSET,
        description="The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )
    output: Missing[ReposOwnerRepoCheckRunsPostBodyPropOutput] = Field(
        default=UNSET,
        description="Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run.",
    )
    actions: Missing[
        Annotated[
            List[ReposOwnerRepoCheckRunsPostBodyPropActionsItems], Field(max_length=3)
        ]
    ] = Field(
        default=UNSET,
        description='Displays a button on GitHub that can be clicked to alert your app to do additional tasks. For example, a code linting app can display a button that automatically fixes detected errors. The button created in this object is displayed after the check run completes. When a user clicks the button, GitHub sends the [`check_run.requested_action` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) to your app. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/rest/guides/using-the-rest-api-to-interact-with-checks#check-runs-and-requested-actions)."',
    )


class ReposOwnerRepoCheckRunsPostBodyOneof1(ExtraGitHubModel):
    """ReposOwnerRepoCheckRunsPostBodyOneof1"""

    name: str = Field(
        description='The name of the check. For example, "code-coverage".'
    )
    head_sha: str = Field(description="The SHA of the commit.")
    details_url: Missing[str] = Field(
        default=UNSET,
        description="The URL of the integrator's site that has the full details of the check. If the integrator does not provide this, then the homepage of the GitHub app is used.",
    )
    external_id: Missing[str] = Field(
        default=UNSET, description="A reference for the run on the integrator's system."
    )
    status: Missing[Literal["queued", "in_progress"]] = Field(default=UNSET)
    started_at: Missing[datetime] = Field(
        default=UNSET,
        description="The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )
    conclusion: Missing[
        Literal[
            "action_required",
            "cancelled",
            "failure",
            "neutral",
            "success",
            "skipped",
            "stale",
            "timed_out",
        ]
    ] = Field(
        default=UNSET,
        description="**Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. \n**Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.",
    )
    completed_at: Missing[datetime] = Field(
        default=UNSET,
        description="The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )
    output: Missing[ReposOwnerRepoCheckRunsPostBodyPropOutput] = Field(
        default=UNSET,
        description="Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run.",
    )
    actions: Missing[
        Annotated[
            List[ReposOwnerRepoCheckRunsPostBodyPropActionsItems], Field(max_length=3)
        ]
    ] = Field(
        default=UNSET,
        description='Displays a button on GitHub that can be clicked to alert your app to do additional tasks. For example, a code linting app can display a button that automatically fixes detected errors. The button created in this object is displayed after the check run completes. When a user clicks the button, GitHub sends the [`check_run.requested_action` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) to your app. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/rest/guides/using-the-rest-api-to-interact-with-checks#check-runs-and-requested-actions)."',
    )


class ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutput(GitHubModel):
    """ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutput

    Check runs can accept a variety of data in the `output` object, including a
    `title` and `summary` and can optionally provide descriptive details about the
    run.
    """

    title: Missing[str] = Field(default=UNSET, description="**Required**.")
    summary: Annotated[str, Field(max_length=65535)] = Field(
        description="Can contain Markdown."
    )
    text: Missing[Annotated[str, Field(max_length=65535)]] = Field(
        default=UNSET, description="Can contain Markdown."
    )
    annotations: Missing[
        Annotated[
            List[
                ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutputPropAnnotationsItems
            ],
            Field(max_length=50),
        ]
    ] = Field(
        default=UNSET,
        description="Adds information from your analysis to specific lines of code. Annotations are visible in GitHub's pull request UI. Annotations are visible in GitHub's pull request UI. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/rest/checks/runs#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. GitHub Actions are limited to 10 warning annotations and 10 error annotations per step. For details about annotations in the UI, see \"[About status checks](https://docs.github.com/articles/about-status-checks#checks)\".",
    )
    images: Missing[
        List[ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutputPropImagesItems]
    ] = Field(
        default=UNSET,
        description="Adds images to the output displayed in the GitHub pull request UI.",
    )


class ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutputPropAnnotationsItems(
    GitHubModel
):
    """ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutputPropAnnotationsItems"""

    path: str = Field(
        description="The path of the file to add an annotation to. For example, `assets/css/main.css`."
    )
    start_line: int = Field(
        description="The start line of the annotation. Line numbers start at 1."
    )
    end_line: int = Field(description="The end line of the annotation.")
    start_column: Missing[int] = Field(
        default=UNSET,
        description="The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. Column numbers start at 1.",
    )
    end_column: Missing[int] = Field(
        default=UNSET,
        description="The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.",
    )
    annotation_level: Literal["notice", "warning", "failure"] = Field(
        description="The level of the annotation."
    )
    message: str = Field(
        description="A short description of the feedback for these lines of code. The maximum size is 64 KB."
    )
    title: Missing[str] = Field(
        default=UNSET,
        description="The title that represents the annotation. The maximum size is 255 characters.",
    )
    raw_details: Missing[str] = Field(
        default=UNSET,
        description="Details about this annotation. The maximum size is 64 KB.",
    )


class ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutputPropImagesItems(GitHubModel):
    """ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutputPropImagesItems"""

    alt: str = Field(description="The alternative text for the image.")
    image_url: str = Field(description="The full URL of the image.")
    caption: Missing[str] = Field(
        default=UNSET, description="A short image description."
    )


class ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropActionsItems(GitHubModel):
    """ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropActionsItems"""

    label: Annotated[str, Field(max_length=20)] = Field(
        description="The text to be displayed on a button in the web UI. The maximum size is 20 characters."
    )
    description: Annotated[str, Field(max_length=40)] = Field(
        description="A short explanation of what this action would do. The maximum size is 40 characters."
    )
    identifier: Annotated[str, Field(max_length=20)] = Field(
        description="A reference for the action on the integrator's system. The maximum size is 20 characters."
    )


class ReposOwnerRepoCheckRunsCheckRunIdPatchBodyAnyof0(ExtraGitHubModel):
    """ReposOwnerRepoCheckRunsCheckRunIdPatchBodyAnyof0"""

    name: Missing[str] = Field(
        default=UNSET,
        description='The name of the check. For example, "code-coverage".',
    )
    details_url: Missing[str] = Field(
        default=UNSET,
        description="The URL of the integrator's site that has the full details of the check.",
    )
    external_id: Missing[str] = Field(
        default=UNSET, description="A reference for the run on the integrator's system."
    )
    started_at: Missing[datetime] = Field(
        default=UNSET,
        description="This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )
    status: Missing[Literal["completed"]] = Field(default=UNSET)
    conclusion: Literal[
        "action_required",
        "cancelled",
        "failure",
        "neutral",
        "success",
        "skipped",
        "stale",
        "timed_out",
    ] = Field(
        description="**Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. \n**Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this."
    )
    completed_at: Missing[datetime] = Field(
        default=UNSET,
        description="The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )
    output: Missing[ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutput] = Field(
        default=UNSET,
        description="Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run.",
    )
    actions: Missing[
        Annotated[
            List[ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropActionsItems],
            Field(max_length=3),
        ]
    ] = Field(
        default=UNSET,
        description='Possible further actions the integrator can perform, which a user may trigger. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/rest/guides/using-the-rest-api-to-interact-with-checks#check-runs-and-requested-actions)."',
    )


class ReposOwnerRepoCheckRunsCheckRunIdPatchBodyAnyof1(ExtraGitHubModel):
    """ReposOwnerRepoCheckRunsCheckRunIdPatchBodyAnyof1"""

    name: Missing[str] = Field(
        default=UNSET,
        description='The name of the check. For example, "code-coverage".',
    )
    details_url: Missing[str] = Field(
        default=UNSET,
        description="The URL of the integrator's site that has the full details of the check.",
    )
    external_id: Missing[str] = Field(
        default=UNSET, description="A reference for the run on the integrator's system."
    )
    started_at: Missing[datetime] = Field(
        default=UNSET,
        description="This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )
    status: Missing[Literal["queued", "in_progress"]] = Field(default=UNSET)
    conclusion: Missing[
        Literal[
            "action_required",
            "cancelled",
            "failure",
            "neutral",
            "success",
            "skipped",
            "stale",
            "timed_out",
        ]
    ] = Field(
        default=UNSET,
        description="**Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. \n**Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.",
    )
    completed_at: Missing[datetime] = Field(
        default=UNSET,
        description="The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )
    output: Missing[ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutput] = Field(
        default=UNSET,
        description="Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run.",
    )
    actions: Missing[
        Annotated[
            List[ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropActionsItems],
            Field(max_length=3),
        ]
    ] = Field(
        default=UNSET,
        description='Possible further actions the integrator can perform, which a user may trigger. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/rest/guides/using-the-rest-api-to-interact-with-checks#check-runs-and-requested-actions)."',
    )


class ReposOwnerRepoCheckSuitesPostBody(GitHubModel):
    """ReposOwnerRepoCheckSuitesPostBody"""

    head_sha: str = Field(description="The sha of the head commit.")


class ReposOwnerRepoCheckSuitesPreferencesPatchBody(GitHubModel):
    """ReposOwnerRepoCheckSuitesPreferencesPatchBody"""

    auto_trigger_checks: Missing[
        List[ReposOwnerRepoCheckSuitesPreferencesPatchBodyPropAutoTriggerChecksItems]
    ] = Field(
        default=UNSET,
        description="Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default.",
    )


class ReposOwnerRepoCheckSuitesPreferencesPatchBodyPropAutoTriggerChecksItems(
    GitHubModel
):
    """ReposOwnerRepoCheckSuitesPreferencesPatchBodyPropAutoTriggerChecksItems"""

    app_id: int = Field(description="The `id` of the GitHub App.")
    setting: bool = Field(
        default=True,
        description="Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or `false` to disable them.",
    )


class ReposOwnerRepoCheckSuitesCheckSuiteIdCheckRunsGetResponse200(GitHubModel):
    """ReposOwnerRepoCheckSuitesCheckSuiteIdCheckRunsGetResponse200"""

    total_count: int = Field()
    check_runs: List[CheckRun] = Field()


class ReposOwnerRepoCodeScanningAlertsAlertNumberPatchBody(GitHubModel):
    """ReposOwnerRepoCodeScanningAlertsAlertNumberPatchBody"""

    state: Literal["open", "dismissed"] = Field(
        description="Sets the state of the code scanning alert. You must provide `dismissed_reason` when you set the state to `dismissed`."
    )
    dismissed_reason: Missing[
        Union[None, Literal["false positive", "won't fix", "used in tests"]]
    ] = Field(
        default=UNSET,
        description="**Required when the state is dismissed.** The reason for dismissing or closing the alert.",
    )
    dismissed_comment: Missing[
        Union[Annotated[str, Field(max_length=280)], None]
    ] = Field(
        default=UNSET,
        description="The dismissal comment associated with the dismissal of the alert.",
    )


class ReposOwnerRepoCodeScanningSarifsPostBody(GitHubModel):
    """ReposOwnerRepoCodeScanningSarifsPostBody"""

    commit_sha: Annotated[
        str, Field(min_length=40, max_length=40, pattern="^[0-9a-fA-F]+$")
    ] = Field(
        description="The SHA of the commit to which the analysis you are uploading relates."
    )
    ref: Annotated[str, Field(pattern="^refs/(heads|tags|pull)/.*$")] = Field(
        description="The full Git reference, formatted as `refs/heads/<branch name>`,\n`refs/tags/<tag>`, `refs/pull/<number>/merge`, or `refs/pull/<number>/head`."
    )
    sarif: str = Field(
        description='A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/code-security/secure-coding/sarif-support-for-code-scanning)."'
    )
    checkout_uri: Missing[str] = Field(
        default=UNSET,
        description="The base directory used in the analysis, as it appears in the SARIF file.\nThis property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.",
    )
    started_at: Missing[datetime] = Field(
        default=UNSET,
        description="The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )
    tool_name: Missing[str] = Field(
        default=UNSET,
        description='The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to "API". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`.',
    )
    validate_: Missing[bool] = Field(
        default=UNSET,
        alias="validate",
        description="Whether the SARIF file will be validated according to the code scanning specifications.\nThis parameter is intended to help integrators ensure that the uploaded SARIF files are correctly rendered by code scanning.",
    )


class ReposOwnerRepoCodespacesGetResponse200(GitHubModel):
    """ReposOwnerRepoCodespacesGetResponse200"""

    total_count: int = Field()
    codespaces: List[Codespace] = Field()


class ReposOwnerRepoCodespacesPostBody(GitHubModel):
    """ReposOwnerRepoCodespacesPostBody"""

    ref: Missing[str] = Field(
        default=UNSET,
        description="Git ref (typically a branch name) for this codespace",
    )
    location: Missing[str] = Field(
        default=UNSET,
        description="The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided.",
    )
    geo: Missing[Literal["EuropeWest", "SoutheastAsia", "UsEast", "UsWest"]] = Field(
        default=UNSET,
        description="The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is being deprecated.",
    )
    client_ip: Missing[str] = Field(
        default=UNSET,
        description="IP for location auto-detection when proxying a request",
    )
    machine: Missing[str] = Field(
        default=UNSET, description="Machine type to use for this codespace"
    )
    devcontainer_path: Missing[str] = Field(
        default=UNSET,
        description="Path to devcontainer.json config to use for this codespace",
    )
    multi_repo_permissions_opt_out: Missing[bool] = Field(
        default=UNSET,
        description="Whether to authorize requested permissions from devcontainer.json",
    )
    working_directory: Missing[str] = Field(
        default=UNSET, description="Working directory for this codespace"
    )
    idle_timeout_minutes: Missing[int] = Field(
        default=UNSET,
        description="Time in minutes before codespace stops from inactivity",
    )
    display_name: Missing[str] = Field(
        default=UNSET, description="Display name for this codespace"
    )
    retention_period_minutes: Missing[int] = Field(
        default=UNSET,
        description="Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).",
    )


class ReposOwnerRepoCodespacesDevcontainersGetResponse200(GitHubModel):
    """ReposOwnerRepoCodespacesDevcontainersGetResponse200"""

    total_count: int = Field()
    devcontainers: List[
        ReposOwnerRepoCodespacesDevcontainersGetResponse200PropDevcontainersItems
    ] = Field()


class ReposOwnerRepoCodespacesDevcontainersGetResponse200PropDevcontainersItems(
    GitHubModel
):
    """ReposOwnerRepoCodespacesDevcontainersGetResponse200PropDevcontainersItems"""

    path: str = Field()
    name: Missing[str] = Field(default=UNSET)
    display_name: Missing[str] = Field(default=UNSET)


class ReposOwnerRepoCodespacesMachinesGetResponse200(GitHubModel):
    """ReposOwnerRepoCodespacesMachinesGetResponse200"""

    total_count: int = Field()
    machines: List[CodespaceMachine] = Field()


class ReposOwnerRepoCodespacesNewGetResponse200(GitHubModel):
    """ReposOwnerRepoCodespacesNewGetResponse200"""

    billable_owner: Missing[SimpleUser] = Field(
        default=UNSET, title="Simple User", description="A GitHub user."
    )
    defaults: Missing[ReposOwnerRepoCodespacesNewGetResponse200PropDefaults] = Field(
        default=UNSET
    )


class ReposOwnerRepoCodespacesNewGetResponse200PropDefaults(GitHubModel):
    """ReposOwnerRepoCodespacesNewGetResponse200PropDefaults"""

    location: str = Field()
    devcontainer_path: Union[str, None] = Field()


class ReposOwnerRepoCodespacesSecretsGetResponse200(GitHubModel):
    """ReposOwnerRepoCodespacesSecretsGetResponse200"""

    total_count: int = Field()
    secrets: List[RepoCodespacesSecret] = Field()


class ReposOwnerRepoCodespacesSecretsSecretNamePutBody(GitHubModel):
    """ReposOwnerRepoCodespacesSecretsSecretNamePutBody"""

    encrypted_value: Missing[
        Annotated[
            str,
            Field(
                pattern="^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"
            ),
        ]
    ] = Field(
        default=UNSET,
        description="Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/codespaces/repository-secrets#get-a-repository-public-key) endpoint.",
    )
    key_id: Missing[str] = Field(
        default=UNSET, description="ID of the key you used to encrypt the secret."
    )


class ReposOwnerRepoCollaboratorsUsernamePutBody(GitHubModel):
    """ReposOwnerRepoCollaboratorsUsernamePutBody"""

    permission: Missing[str] = Field(
        default=UNSET,
        description="The permission to grant the collaborator. **Only valid on organization-owned repositories.** We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any.",
    )


class ReposOwnerRepoCommentsCommentIdPatchBody(GitHubModel):
    """ReposOwnerRepoCommentsCommentIdPatchBody"""

    body: str = Field(description="The contents of the comment")


class ReposOwnerRepoCommentsCommentIdReactionsPostBody(GitHubModel):
    """ReposOwnerRepoCommentsCommentIdReactionsPostBody"""

    content: Literal[
        "+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"
    ] = Field(
        description="The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the commit comment."
    )


class ReposOwnerRepoCommitsCommitShaCommentsPostBody(GitHubModel):
    """ReposOwnerRepoCommitsCommitShaCommentsPostBody"""

    body: str = Field(description="The contents of the comment.")
    path: Missing[str] = Field(
        default=UNSET, description="Relative path of the file to comment on."
    )
    position: Missing[int] = Field(
        default=UNSET, description="Line index in the diff to comment on."
    )
    line: Missing[int] = Field(
        default=UNSET,
        description="**Deprecated**. Use **position** parameter instead. Line number in the file to comment on.",
    )


class ReposOwnerRepoCommitsRefCheckRunsGetResponse200(GitHubModel):
    """ReposOwnerRepoCommitsRefCheckRunsGetResponse200"""

    total_count: int = Field()
    check_runs: List[CheckRun] = Field()


class ReposOwnerRepoCommitsRefCheckSuitesGetResponse200(GitHubModel):
    """ReposOwnerRepoCommitsRefCheckSuitesGetResponse200"""

    total_count: int = Field()
    check_suites: List[CheckSuite] = Field()


class ReposOwnerRepoContentsPathPutBody(GitHubModel):
    """ReposOwnerRepoContentsPathPutBody"""

    message: str = Field(description="The commit message.")
    content: str = Field(description="The new file content, using Base64 encoding.")
    sha: Missing[str] = Field(
        default=UNSET,
        description="**Required if you are updating a file**. The blob SHA of the file being replaced.",
    )
    branch: Missing[str] = Field(
        default=UNSET,
        description="The branch name. Default: the repository’s default branch.",
    )
    committer: Missing[ReposOwnerRepoContentsPathPutBodyPropCommitter] = Field(
        default=UNSET,
        description="The person that committed the file. Default: the authenticated user.",
    )
    author: Missing[ReposOwnerRepoContentsPathPutBodyPropAuthor] = Field(
        default=UNSET,
        description="The author of the file. Default: The `committer` or the authenticated user if you omit `committer`.",
    )


class ReposOwnerRepoContentsPathPutBodyPropCommitter(GitHubModel):
    """ReposOwnerRepoContentsPathPutBodyPropCommitter

    The person that committed the file. Default: the authenticated user.
    """

    name: str = Field(
        description="The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted."
    )
    email: str = Field(
        description="The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted."
    )
    date: Missing[str] = Field(default=UNSET)


class ReposOwnerRepoContentsPathPutBodyPropAuthor(GitHubModel):
    """ReposOwnerRepoContentsPathPutBodyPropAuthor

    The author of the file. Default: The `committer` or the authenticated user if
    you omit `committer`.
    """

    name: str = Field(
        description="The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted."
    )
    email: str = Field(
        description="The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted."
    )
    date: Missing[str] = Field(default=UNSET)


class ReposOwnerRepoContentsPathDeleteBody(GitHubModel):
    """ReposOwnerRepoContentsPathDeleteBody"""

    message: str = Field(description="The commit message.")
    sha: str = Field(description="The blob SHA of the file being deleted.")
    branch: Missing[str] = Field(
        default=UNSET,
        description="The branch name. Default: the repository’s default branch",
    )
    committer: Missing[ReposOwnerRepoContentsPathDeleteBodyPropCommitter] = Field(
        default=UNSET, description="object containing information about the committer."
    )
    author: Missing[ReposOwnerRepoContentsPathDeleteBodyPropAuthor] = Field(
        default=UNSET, description="object containing information about the author."
    )


class ReposOwnerRepoContentsPathDeleteBodyPropCommitter(GitHubModel):
    """ReposOwnerRepoContentsPathDeleteBodyPropCommitter

    object containing information about the committer.
    """

    name: Missing[str] = Field(
        default=UNSET, description="The name of the author (or committer) of the commit"
    )
    email: Missing[str] = Field(
        default=UNSET,
        description="The email of the author (or committer) of the commit",
    )


class ReposOwnerRepoContentsPathDeleteBodyPropAuthor(GitHubModel):
    """ReposOwnerRepoContentsPathDeleteBodyPropAuthor

    object containing information about the author.
    """

    name: Missing[str] = Field(
        default=UNSET, description="The name of the author (or committer) of the commit"
    )
    email: Missing[str] = Field(
        default=UNSET,
        description="The email of the author (or committer) of the commit",
    )


class ReposOwnerRepoDependabotAlertsAlertNumberPatchBody(GitHubModel):
    """ReposOwnerRepoDependabotAlertsAlertNumberPatchBody"""

    state: Literal["dismissed", "open"] = Field(
        description="The state of the Dependabot alert.\nA `dismissed_reason` must be provided when setting the state to `dismissed`."
    )
    dismissed_reason: Missing[
        Literal[
            "fix_started", "inaccurate", "no_bandwidth", "not_used", "tolerable_risk"
        ]
    ] = Field(
        default=UNSET,
        description="**Required when `state` is `dismissed`.** A reason for dismissing the alert.",
    )
    dismissed_comment: Missing[Annotated[str, Field(max_length=280)]] = Field(
        default=UNSET,
        description="An optional comment associated with dismissing the alert.",
    )


class ReposOwnerRepoDependabotSecretsGetResponse200(GitHubModel):
    """ReposOwnerRepoDependabotSecretsGetResponse200"""

    total_count: int = Field()
    secrets: List[DependabotSecret] = Field()


class ReposOwnerRepoDependabotSecretsSecretNamePutBody(GitHubModel):
    """ReposOwnerRepoDependabotSecretsSecretNamePutBody"""

    encrypted_value: Missing[
        Annotated[
            str,
            Field(
                pattern="^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"
            ),
        ]
    ] = Field(
        default=UNSET,
        description="Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/dependabot/secrets#get-a-repository-public-key) endpoint.",
    )
    key_id: Missing[str] = Field(
        default=UNSET, description="ID of the key you used to encrypt the secret."
    )


class ReposOwnerRepoDependencyGraphSnapshotsPostResponse201(GitHubModel):
    """ReposOwnerRepoDependencyGraphSnapshotsPostResponse201"""

    id: int = Field(description="ID of the created snapshot.")
    created_at: str = Field(description="The time at which the snapshot was created.")
    result: str = Field(
        description='Either "SUCCESS", "ACCEPTED", or "INVALID". "SUCCESS" indicates that the snapshot was successfully created and the repository\'s dependencies were updated. "ACCEPTED" indicates that the snapshot was successfully created, but the repository\'s dependencies were not updated. "INVALID" indicates that the snapshot was malformed.'
    )
    message: str = Field(
        description="A message providing further details about the result, such as why the dependencies were not updated."
    )


class ReposOwnerRepoDeploymentsPostBody(GitHubModel):
    """ReposOwnerRepoDeploymentsPostBody"""

    ref: str = Field(
        description="The ref to deploy. This can be a branch, tag, or SHA."
    )
    task: Missing[str] = Field(
        default=UNSET,
        description="Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).",
    )
    auto_merge: Missing[bool] = Field(
        default=UNSET,
        description="Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.",
    )
    required_contexts: Missing[List[str]] = Field(
        default=UNSET,
        description="The [status](https://docs.github.com/rest/commits/statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts.",
    )
    payload: Missing[
        Union[ReposOwnerRepoDeploymentsPostBodyPropPayloadOneof0, str]
    ] = Field(default=UNSET)
    environment: Missing[str] = Field(
        default=UNSET,
        description="Name for the target deployment environment (e.g., `production`, `staging`, `qa`).",
    )
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="Short description of the deployment."
    )
    transient_environment: Missing[bool] = Field(
        default=UNSET,
        description="Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`",
    )
    production_environment: Missing[bool] = Field(
        default=UNSET,
        description="Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise.",
    )


class ReposOwnerRepoDeploymentsPostBodyPropPayloadOneof0(ExtraGitHubModel):
    """ReposOwnerRepoDeploymentsPostBodyPropPayloadOneof0"""


class ReposOwnerRepoDeploymentsPostResponse202(GitHubModel):
    """ReposOwnerRepoDeploymentsPostResponse202"""

    message: Missing[str] = Field(default=UNSET)


class ReposOwnerRepoDeploymentsDeploymentIdStatusesPostBody(GitHubModel):
    """ReposOwnerRepoDeploymentsDeploymentIdStatusesPostBody"""

    state: Literal[
        "error", "failure", "inactive", "in_progress", "queued", "pending", "success"
    ] = Field(
        description="The state of the status. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub."
    )
    target_url: Missing[str] = Field(
        default=UNSET,
        description="The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It's recommended to use the `log_url` parameter, which replaces `target_url`.",
    )
    log_url: Missing[str] = Field(
        default=UNSET,
        description='The full URL of the deployment\'s output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `""`',
    )
    description: Missing[str] = Field(
        default=UNSET,
        description="A short description of the status. The maximum description length is 140 characters.",
    )
    environment: Missing[str] = Field(
        default=UNSET,
        description="Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`. If not defined, the environment of the previous status on the deployment will be used, if it exists. Otherwise, the environment of the deployment will be used.",
    )
    environment_url: Missing[str] = Field(
        default=UNSET,
        description='Sets the URL for accessing your environment. Default: `""`',
    )
    auto_inactive: Missing[bool] = Field(
        default=UNSET,
        description="Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true`",
    )


class ReposOwnerRepoDispatchesPostBody(GitHubModel):
    """ReposOwnerRepoDispatchesPostBody"""

    event_type: Annotated[str, Field(min_length=1, max_length=100)] = Field(
        description="A custom webhook event name. Must be 100 characters or fewer."
    )
    client_payload: Missing[ReposOwnerRepoDispatchesPostBodyPropClientPayload] = Field(
        default=UNSET,
        description="JSON payload with extra information about the webhook event that your action or workflow may use. The maximum number of top-level properties is 10.",
    )


class ReposOwnerRepoDispatchesPostBodyPropClientPayload(ExtraGitHubModel):
    """ReposOwnerRepoDispatchesPostBodyPropClientPayload

    JSON payload with extra information about the webhook event that your action or
    workflow may use. The maximum number of top-level properties is 10.
    """


class ReposOwnerRepoEnvironmentsGetResponse200(GitHubModel):
    """ReposOwnerRepoEnvironmentsGetResponse200"""

    total_count: Missing[int] = Field(
        default=UNSET, description="The number of environments in this repository"
    )
    environments: Missing[List[Environment]] = Field(default=UNSET)


class ReposOwnerRepoEnvironmentsEnvironmentNamePutBodyPropReviewersItems(GitHubModel):
    """ReposOwnerRepoEnvironmentsEnvironmentNamePutBodyPropReviewersItems"""

    type: Missing[Literal["User", "Team"]] = Field(
        default=UNSET, description="The type of reviewer."
    )
    id: Missing[int] = Field(
        default=UNSET,
        description="The id of the user or team who can review the deployment",
    )


class ReposOwnerRepoEnvironmentsEnvironmentNamePutBody(GitHubModel):
    """ReposOwnerRepoEnvironmentsEnvironmentNamePutBody"""

    wait_timer: Missing[int] = Field(
        default=UNSET,
        description="The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days).",
    )
    prevent_self_review: Missing[bool] = Field(
        default=UNSET,
        description="Whether or not a user who created the job is prevented from approving their own job.",
    )
    reviewers: Missing[
        Union[
            List[ReposOwnerRepoEnvironmentsEnvironmentNamePutBodyPropReviewersItems],
            None,
        ]
    ] = Field(
        default=UNSET,
        description="The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.",
    )
    deployment_branch_policy: Missing[
        Union[DeploymentBranchPolicySettings, None]
    ] = Field(
        default=UNSET,
        description="The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`.",
    )


class ReposOwnerRepoEnvironmentsEnvironmentNameDeploymentBranchPoliciesGetResponse200(
    GitHubModel
):
    """ReposOwnerRepoEnvironmentsEnvironmentNameDeploymentBranchPoliciesGetResponse200"""

    total_count: int = Field(
        description="The number of deployment branch policies for the environment."
    )
    branch_policies: List[DeploymentBranchPolicy] = Field()


class ReposOwnerRepoEnvironmentsEnvironmentNameDeploymentProtectionRulesGetResponse200(
    GitHubModel
):
    """ReposOwnerRepoEnvironmentsEnvironmentNameDeploymentProtectionRulesGetResponse200

    Examples:
        {'$ref': '#/components/examples/deployment-protection-rules'}
    """

    total_count: Missing[int] = Field(
        default=UNSET,
        description="The number of enabled custom deployment protection rules for this environment",
    )
    custom_deployment_protection_rules: Missing[List[DeploymentProtectionRule]] = Field(
        default=UNSET
    )


class ReposOwnerRepoEnvironmentsEnvironmentNameDeploymentProtectionRulesPostBody(
    GitHubModel
):
    """ReposOwnerRepoEnvironmentsEnvironmentNameDeploymentProtectionRulesPostBody"""

    integration_id: Missing[int] = Field(
        default=UNSET,
        description="The ID of the custom app that will be enabled on the environment.",
    )


class ReposOwnerRepoEnvironmentsEnvironmentNameDeploymentProtectionRulesAppsGetResponse200(
    GitHubModel
):
    """ReposOwnerRepoEnvironmentsEnvironmentNameDeploymentProtectionRulesAppsGetRespons
    e200
    """

    total_count: Missing[int] = Field(
        default=UNSET,
        description="The total number of custom deployment protection rule integrations available for this environment.",
    )
    available_custom_deployment_protection_rule_integrations: Missing[
        List[CustomDeploymentRuleApp]
    ] = Field(default=UNSET)


class ReposOwnerRepoForksPostBody(GitHubModel):
    """ReposOwnerRepoForksPostBody"""

    organization: Missing[str] = Field(
        default=UNSET,
        description="Optional parameter to specify the organization name if forking into an organization.",
    )
    name: Missing[str] = Field(
        default=UNSET,
        description="When forking from an existing repository, a new name for the fork.",
    )
    default_branch_only: Missing[bool] = Field(
        default=UNSET,
        description="When forking from an existing repository, fork with only the default branch.",
    )


class ReposOwnerRepoGitBlobsPostBody(GitHubModel):
    """ReposOwnerRepoGitBlobsPostBody"""

    content: str = Field(description="The new blob's content.")
    encoding: Missing[str] = Field(
        default=UNSET,
        description='The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported.',
    )


class ReposOwnerRepoGitCommitsPostBody(GitHubModel):
    """ReposOwnerRepoGitCommitsPostBody"""

    message: str = Field(description="The commit message")
    tree: str = Field(description="The SHA of the tree object this commit points to")
    parents: Missing[List[str]] = Field(
        default=UNSET,
        description="The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.",
    )
    author: Missing[ReposOwnerRepoGitCommitsPostBodyPropAuthor] = Field(
        default=UNSET,
        description="Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details.",
    )
    committer: Missing[ReposOwnerRepoGitCommitsPostBodyPropCommitter] = Field(
        default=UNSET,
        description="Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details.",
    )
    signature: Missing[str] = Field(
        default=UNSET,
        description="The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.",
    )


class ReposOwnerRepoGitCommitsPostBodyPropAuthor(GitHubModel):
    """ReposOwnerRepoGitCommitsPostBodyPropAuthor

    Information about the author of the commit. By default, the `author` will be the
    authenticated user and the current date. See the `author` and `committer` object
    below for details.
    """

    name: str = Field(description="The name of the author (or committer) of the commit")
    email: str = Field(
        description="The email of the author (or committer) of the commit"
    )
    date: Missing[datetime] = Field(
        default=UNSET,
        description="Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )


class ReposOwnerRepoGitCommitsPostBodyPropCommitter(GitHubModel):
    """ReposOwnerRepoGitCommitsPostBodyPropCommitter

    Information about the person who is making the commit. By default, `committer`
    will use the information set in `author`. See the `author` and `committer`
    object below for details.
    """

    name: Missing[str] = Field(
        default=UNSET, description="The name of the author (or committer) of the commit"
    )
    email: Missing[str] = Field(
        default=UNSET,
        description="The email of the author (or committer) of the commit",
    )
    date: Missing[datetime] = Field(
        default=UNSET,
        description="Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )


class ReposOwnerRepoGitRefsPostBody(GitHubModel):
    """ReposOwnerRepoGitRefsPostBody"""

    ref: str = Field(
        description="The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected."
    )
    sha: str = Field(description="The SHA1 value for this reference.")


class ReposOwnerRepoGitRefsRefPatchBody(GitHubModel):
    """ReposOwnerRepoGitRefsRefPatchBody"""

    sha: str = Field(description="The SHA1 value to set this reference to")
    force: Missing[bool] = Field(
        default=UNSET,
        description="Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work.",
    )


class ReposOwnerRepoGitTagsPostBody(GitHubModel):
    """ReposOwnerRepoGitTagsPostBody"""

    tag: str = Field(
        description='The tag\'s name. This is typically a version (e.g., "v0.0.1").'
    )
    message: str = Field(description="The tag message.")
    object_: str = Field(
        alias="object", description="The SHA of the git object this is tagging."
    )
    type: Literal["commit", "tree", "blob"] = Field(
        description="The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`."
    )
    tagger: Missing[ReposOwnerRepoGitTagsPostBodyPropTagger] = Field(
        default=UNSET,
        description="An object with information about the individual creating the tag.",
    )


class ReposOwnerRepoGitTagsPostBodyPropTagger(GitHubModel):
    """ReposOwnerRepoGitTagsPostBodyPropTagger

    An object with information about the individual creating the tag.
    """

    name: str = Field(description="The name of the author of the tag")
    email: str = Field(description="The email of the author of the tag")
    date: Missing[datetime] = Field(
        default=UNSET,
        description="When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )


class ReposOwnerRepoGitTreesPostBody(GitHubModel):
    """ReposOwnerRepoGitTreesPostBody"""

    tree: List[ReposOwnerRepoGitTreesPostBodyPropTreeItems] = Field(
        description="Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure."
    )
    base_tree: Missing[str] = Field(
        default=UNSET,
        description="The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.\nIf not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit.\n",
    )


class ReposOwnerRepoGitTreesPostBodyPropTreeItems(GitHubModel):
    """ReposOwnerRepoGitTreesPostBodyPropTreeItems"""

    path: Missing[str] = Field(
        default=UNSET, description="The file referenced in the tree."
    )
    mode: Missing[Literal["100644", "100755", "040000", "160000", "120000"]] = Field(
        default=UNSET,
        description="The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink.",
    )
    type: Missing[Literal["blob", "tree", "commit"]] = Field(
        default=UNSET, description="Either `blob`, `tree`, or `commit`."
    )
    sha: Missing[Union[str, None]] = Field(
        default=UNSET,
        description="The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null` then the file will be deleted.  \n  \n**Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.",
    )
    content: Missing[str] = Field(
        default=UNSET,
        description="The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.  \n  \n**Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.",
    )


class ReposOwnerRepoHooksPostBodyPropConfig(GitHubModel):
    """ReposOwnerRepoHooksPostBodyPropConfig

    Key/value pairs to provide settings for this webhook.
    """

    url: Missing[str] = Field(
        default=UNSET, description="The URL to which the payloads will be delivered."
    )
    content_type: Missing[str] = Field(
        default=UNSET,
        description="The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
    )
    secret: Missing[str] = Field(
        default=UNSET,
        description="If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).",
    )
    insecure_ssl: Missing[Union[str, float]] = Field(default=UNSET)
    token: Missing[str] = Field(default=UNSET)
    digest: Missing[str] = Field(default=UNSET)


class ReposOwnerRepoHooksPostBody(GitHubModel):
    """ReposOwnerRepoHooksPostBody"""

    name: Missing[str] = Field(
        default=UNSET,
        description="Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`.",
    )
    config: Missing[ReposOwnerRepoHooksPostBodyPropConfig] = Field(
        default=UNSET,
        description="Key/value pairs to provide settings for this webhook.",
    )
    events: Missing[List[str]] = Field(
        default=UNSET,
        description="Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.",
    )
    active: Missing[bool] = Field(
        default=UNSET,
        description="Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
    )


class ReposOwnerRepoHooksHookIdPatchBody(GitHubModel):
    """ReposOwnerRepoHooksHookIdPatchBody"""

    config: Missing[ReposOwnerRepoHooksHookIdPatchBodyPropConfig] = Field(
        default=UNSET,
        description="Key/value pairs to provide settings for this webhook.",
    )
    events: Missing[List[str]] = Field(
        default=UNSET,
        description="Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.",
    )
    add_events: Missing[List[str]] = Field(
        default=UNSET,
        description="Determines a list of events to be added to the list of events that the Hook triggers for.",
    )
    remove_events: Missing[List[str]] = Field(
        default=UNSET,
        description="Determines a list of events to be removed from the list of events that the Hook triggers for.",
    )
    active: Missing[bool] = Field(
        default=UNSET,
        description="Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
    )


class ReposOwnerRepoHooksHookIdPatchBodyPropConfig(GitHubModel):
    """ReposOwnerRepoHooksHookIdPatchBodyPropConfig

    Key/value pairs to provide settings for this webhook.
    """

    url: str = Field(description="The URL to which the payloads will be delivered.")
    content_type: Missing[str] = Field(
        default=UNSET,
        description="The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
    )
    secret: Missing[str] = Field(
        default=UNSET,
        description="If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).",
    )
    insecure_ssl: Missing[Union[str, float]] = Field(default=UNSET)
    address: Missing[str] = Field(default=UNSET)
    room: Missing[str] = Field(default=UNSET)


class ReposOwnerRepoHooksHookIdConfigPatchBody(GitHubModel):
    """ReposOwnerRepoHooksHookIdConfigPatchBody"""

    url: Missing[str] = Field(
        default=UNSET, description="The URL to which the payloads will be delivered."
    )
    content_type: Missing[str] = Field(
        default=UNSET,
        description="The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
    )
    secret: Missing[str] = Field(
        default=UNSET,
        description="If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).",
    )
    insecure_ssl: Missing[Union[str, float]] = Field(default=UNSET)


class ReposOwnerRepoImportPutBody(GitHubModel):
    """ReposOwnerRepoImportPutBody"""

    vcs_url: str = Field(description="The URL of the originating repository.")
    vcs: Missing[Literal["subversion", "git", "mercurial", "tfvc"]] = Field(
        default=UNSET,
        description="The originating VCS type. Without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response.",
    )
    vcs_username: Missing[str] = Field(
        default=UNSET,
        description="If authentication is required, the username to provide to `vcs_url`.",
    )
    vcs_password: Missing[str] = Field(
        default=UNSET,
        description="If authentication is required, the password to provide to `vcs_url`.",
    )
    tfvc_project: Missing[str] = Field(
        default=UNSET,
        description="For a tfvc import, the name of the project that is being imported.",
    )


class ReposOwnerRepoImportPatchBody(GitHubModel):
    """ReposOwnerRepoImportPatchBody"""

    vcs_username: Missing[str] = Field(
        default=UNSET,
        description="The username to provide to the originating repository.",
    )
    vcs_password: Missing[str] = Field(
        default=UNSET,
        description="The password to provide to the originating repository.",
    )
    vcs: Missing[Literal["subversion", "tfvc", "git", "mercurial"]] = Field(
        default=UNSET,
        description="The type of version control system you are migrating from.",
    )
    tfvc_project: Missing[str] = Field(
        default=UNSET,
        description="For a tfvc import, the name of the project that is being imported.",
    )


class ReposOwnerRepoImportAuthorsAuthorIdPatchBody(GitHubModel):
    """ReposOwnerRepoImportAuthorsAuthorIdPatchBody"""

    email: Missing[str] = Field(default=UNSET, description="The new Git author email.")
    name: Missing[str] = Field(default=UNSET, description="The new Git author name.")


class ReposOwnerRepoImportLfsPatchBody(GitHubModel):
    """ReposOwnerRepoImportLfsPatchBody"""

    use_lfs: Literal["opt_in", "opt_out"] = Field(
        description="Whether to store large files during the import. `opt_in` means large files will be stored using Git LFS. `opt_out` means large files will be removed during the import."
    )


class ReposOwnerRepoInteractionLimitsGetResponse200Anyof1(GitHubModel):
    """ReposOwnerRepoInteractionLimitsGetResponse200Anyof1"""


class ReposOwnerRepoInvitationsInvitationIdPatchBody(GitHubModel):
    """ReposOwnerRepoInvitationsInvitationIdPatchBody"""

    permissions: Missing[
        Literal["read", "write", "maintain", "triage", "admin"]
    ] = Field(
        default=UNSET,
        description="The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.",
    )


class ReposOwnerRepoIssuesPostBody(GitHubModel):
    """ReposOwnerRepoIssuesPostBody"""

    title: Union[str, int] = Field(description="The title of the issue.")
    body: Missing[str] = Field(default=UNSET, description="The contents of the issue.")
    assignee: Missing[Union[str, None]] = Field(
        default=UNSET,
        description="Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_",
    )
    milestone: Missing[Union[str, int, None]] = Field(default=UNSET)
    labels: Missing[
        List[Union[str, ReposOwnerRepoIssuesPostBodyPropLabelsItemsOneof1]]
    ] = Field(
        default=UNSET,
        description="Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._",
    )
    assignees: Missing[List[str]] = Field(
        default=UNSET,
        description="Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._",
    )


class ReposOwnerRepoIssuesPostBodyPropLabelsItemsOneof1(GitHubModel):
    """ReposOwnerRepoIssuesPostBodyPropLabelsItemsOneof1"""

    id: Missing[int] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(default=UNSET)
    color: Missing[Union[str, None]] = Field(default=UNSET)


class ReposOwnerRepoIssuesCommentsCommentIdPatchBody(GitHubModel):
    """ReposOwnerRepoIssuesCommentsCommentIdPatchBody"""

    body: str = Field(description="The contents of the comment.")


class ReposOwnerRepoIssuesCommentsCommentIdReactionsPostBody(GitHubModel):
    """ReposOwnerRepoIssuesCommentsCommentIdReactionsPostBody"""

    content: Literal[
        "+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"
    ] = Field(
        description="The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the issue comment."
    )


class ReposOwnerRepoIssuesIssueNumberPatchBody(GitHubModel):
    """ReposOwnerRepoIssuesIssueNumberPatchBody"""

    title: Missing[Union[str, int, None]] = Field(
        default=UNSET, description="The title of the issue."
    )
    body: Missing[Union[str, None]] = Field(
        default=UNSET, description="The contents of the issue."
    )
    assignee: Missing[Union[str, None]] = Field(
        default=UNSET,
        description="Username to assign to this issue. **This field is deprecated.**",
    )
    state: Missing[Literal["open", "closed"]] = Field(
        default=UNSET, description="The open or closed state of the issue."
    )
    state_reason: Missing[
        Union[None, Literal["completed", "not_planned", "reopened"]]
    ] = Field(
        default=UNSET,
        description="The reason for the state change. Ignored unless `state` is changed.",
    )
    milestone: Missing[Union[str, int, None]] = Field(default=UNSET)
    labels: Missing[
        List[Union[str, ReposOwnerRepoIssuesIssueNumberPatchBodyPropLabelsItemsOneof1]]
    ] = Field(
        default=UNSET,
        description="Labels to associate with this issue. Pass one or more labels to _replace_ the set of labels on this issue. Send an empty array (`[]`) to clear all labels from the issue. Only users with push access can set labels for issues. Without push access to the repository, label changes are silently dropped.",
    )
    assignees: Missing[List[str]] = Field(
        default=UNSET,
        description="Usernames to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this issue. Send an empty array (`[]`) to clear all assignees from the issue. Only users with push access can set assignees for new issues. Without push access to the repository, assignee changes are silently dropped.",
    )


class ReposOwnerRepoIssuesIssueNumberPatchBodyPropLabelsItemsOneof1(GitHubModel):
    """ReposOwnerRepoIssuesIssueNumberPatchBodyPropLabelsItemsOneof1"""

    id: Missing[int] = Field(default=UNSET)
    name: Missing[str] = Field(default=UNSET)
    description: Missing[Union[str, None]] = Field(default=UNSET)
    color: Missing[Union[str, None]] = Field(default=UNSET)


class ReposOwnerRepoIssuesIssueNumberAssigneesPostBody(GitHubModel):
    """ReposOwnerRepoIssuesIssueNumberAssigneesPostBody"""

    assignees: Missing[List[str]] = Field(
        default=UNSET,
        description="Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._",
    )


class ReposOwnerRepoIssuesIssueNumberAssigneesDeleteBody(GitHubModel):
    """ReposOwnerRepoIssuesIssueNumberAssigneesDeleteBody"""

    assignees: Missing[List[str]] = Field(
        default=UNSET,
        description="Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._",
    )


class ReposOwnerRepoIssuesIssueNumberCommentsPostBody(GitHubModel):
    """ReposOwnerRepoIssuesIssueNumberCommentsPostBody"""

    body: str = Field(description="The contents of the comment.")


class ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof0(GitHubModel):
    """ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof0"""

    labels: Missing[Annotated[List[str], Field(min_length=1)]] = Field(
        default=UNSET,
        description='The names of the labels to set for the issue. The labels you set replace any existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also add labels to the existing labels for an issue. For more information, see "[Add labels to an issue](https://docs.github.com/rest/issues/labels#add-labels-to-an-issue)."',
    )


class ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof2(GitHubModel):
    """ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof2"""

    labels: Missing[
        Annotated[
            List[ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof2PropLabelsItems],
            Field(min_length=1),
        ]
    ] = Field(default=UNSET)


class ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof2PropLabelsItems(GitHubModel):
    """ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof2PropLabelsItems"""

    name: str = Field()


class ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof3Items(GitHubModel):
    """ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof3Items"""

    name: str = Field()


class ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof0(GitHubModel):
    """ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof0"""

    labels: Missing[Annotated[List[str], Field(min_length=1)]] = Field(
        default=UNSET,
        description='The names of the labels to add to the issue\'s existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also replace all of the labels for an issue. For more information, see "[Set labels for an issue](https://docs.github.com/rest/issues/labels#set-labels-for-an-issue)."',
    )


class ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof2(GitHubModel):
    """ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof2"""

    labels: Missing[
        Annotated[
            List[ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof2PropLabelsItems],
            Field(min_length=1),
        ]
    ] = Field(default=UNSET)


class ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof2PropLabelsItems(GitHubModel):
    """ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof2PropLabelsItems"""

    name: str = Field()


class ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof3Items(GitHubModel):
    """ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof3Items"""

    name: str = Field()


class ReposOwnerRepoIssuesIssueNumberLockPutBody(GitHubModel):
    """ReposOwnerRepoIssuesIssueNumberLockPutBody"""

    lock_reason: Missing[
        Literal["off-topic", "too heated", "resolved", "spam"]
    ] = Field(
        default=UNSET,
        description="The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:  \n * `off-topic`  \n * `too heated`  \n * `resolved`  \n * `spam`",
    )


class ReposOwnerRepoIssuesIssueNumberReactionsPostBody(GitHubModel):
    """ReposOwnerRepoIssuesIssueNumberReactionsPostBody"""

    content: Literal[
        "+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"
    ] = Field(
        description="The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the issue."
    )


class ReposOwnerRepoKeysPostBody(GitHubModel):
    """ReposOwnerRepoKeysPostBody"""

    title: Missing[str] = Field(default=UNSET, description="A name for the key.")
    key: str = Field(description="The contents of the key.")
    read_only: Missing[bool] = Field(
        default=UNSET,
        description='If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.  \n  \nDeploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see "[Repository permission levels for an organization](https://docs.github.com/articles/repository-permission-levels-for-an-organization/)" and "[Permission levels for a user account repository](https://docs.github.com/articles/permission-levels-for-a-user-account-repository/)."',
    )


class ReposOwnerRepoLabelsPostBody(GitHubModel):
    """ReposOwnerRepoLabelsPostBody"""

    name: str = Field(
        description='The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."'
    )
    color: Missing[str] = Field(
        default=UNSET,
        description="The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.",
    )
    description: Missing[str] = Field(
        default=UNSET,
        description="A short description of the label. Must be 100 characters or fewer.",
    )


class ReposOwnerRepoLabelsNamePatchBody(GitHubModel):
    """ReposOwnerRepoLabelsNamePatchBody"""

    new_name: Missing[str] = Field(
        default=UNSET,
        description='The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."',
    )
    color: Missing[str] = Field(
        default=UNSET,
        description="The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.",
    )
    description: Missing[str] = Field(
        default=UNSET,
        description="A short description of the label. Must be 100 characters or fewer.",
    )


class ReposOwnerRepoMergeUpstreamPostBody(GitHubModel):
    """ReposOwnerRepoMergeUpstreamPostBody"""

    branch: str = Field(
        description="The name of the branch which should be updated to match upstream."
    )


class ReposOwnerRepoMergesPostBody(GitHubModel):
    """ReposOwnerRepoMergesPostBody"""

    base: str = Field(
        description="The name of the base branch that the head will be merged into."
    )
    head: str = Field(
        description="The head to merge. This can be a branch name or a commit SHA1."
    )
    commit_message: Missing[str] = Field(
        default=UNSET,
        description="Commit message to use for the merge commit. If omitted, a default message will be used.",
    )


class ReposOwnerRepoMilestonesPostBody(GitHubModel):
    """ReposOwnerRepoMilestonesPostBody"""

    title: str = Field(description="The title of the milestone.")
    state: Missing[Literal["open", "closed"]] = Field(
        default=UNSET,
        description="The state of the milestone. Either `open` or `closed`.",
    )
    description: Missing[str] = Field(
        default=UNSET, description="A description of the milestone."
    )
    due_on: Missing[datetime] = Field(
        default=UNSET,
        description="The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )


class ReposOwnerRepoMilestonesMilestoneNumberPatchBody(GitHubModel):
    """ReposOwnerRepoMilestonesMilestoneNumberPatchBody"""

    title: Missing[str] = Field(
        default=UNSET, description="The title of the milestone."
    )
    state: Missing[Literal["open", "closed"]] = Field(
        default=UNSET,
        description="The state of the milestone. Either `open` or `closed`.",
    )
    description: Missing[str] = Field(
        default=UNSET, description="A description of the milestone."
    )
    due_on: Missing[datetime] = Field(
        default=UNSET,
        description="The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )


class ReposOwnerRepoNotificationsPutBody(GitHubModel):
    """ReposOwnerRepoNotificationsPutBody"""

    last_read_at: Missing[datetime] = Field(
        default=UNSET,
        description="Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.",
    )


class ReposOwnerRepoNotificationsPutResponse202(GitHubModel):
    """ReposOwnerRepoNotificationsPutResponse202"""

    message: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class ReposOwnerRepoPagesPutBodyPropSourceAnyof1(GitHubModel):
    """ReposOwnerRepoPagesPutBodyPropSourceAnyof1

    Update the source for the repository. Must include the branch name and path.
    """

    branch: str = Field(
        description="The repository branch used to publish your site's source files."
    )
    path: Literal["/", "/docs"] = Field(
        description="The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`."
    )


class ReposOwnerRepoPagesPutBodyAnyof0(GitHubModel):
    """ReposOwnerRepoPagesPutBodyAnyof0"""

    cname: Missing[Union[str, None]] = Field(
        default=UNSET,
        description='Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://docs.github.com/articles/using-a-custom-domain-with-github-pages/)."',
    )
    https_enforced: Missing[bool] = Field(
        default=UNSET,
        description="Specify whether HTTPS should be enforced for the repository.",
    )
    build_type: Literal["legacy", "workflow"] = Field(
        description="The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch."
    )
    source: Missing[
        Union[
            Literal["gh-pages", "master", "master /docs"],
            ReposOwnerRepoPagesPutBodyPropSourceAnyof1,
        ]
    ] = Field(default=UNSET)


class ReposOwnerRepoPagesPutBodyAnyof1(GitHubModel):
    """ReposOwnerRepoPagesPutBodyAnyof1"""

    cname: Missing[Union[str, None]] = Field(
        default=UNSET,
        description='Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://docs.github.com/articles/using-a-custom-domain-with-github-pages/)."',
    )
    https_enforced: Missing[bool] = Field(
        default=UNSET,
        description="Specify whether HTTPS should be enforced for the repository.",
    )
    build_type: Missing[Literal["legacy", "workflow"]] = Field(
        default=UNSET,
        description="The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch.",
    )
    source: Union[
        Literal["gh-pages", "master", "master /docs"],
        ReposOwnerRepoPagesPutBodyPropSourceAnyof1,
    ] = Field()


class ReposOwnerRepoPagesPutBodyAnyof2(GitHubModel):
    """ReposOwnerRepoPagesPutBodyAnyof2"""

    cname: Union[str, None] = Field(
        description='Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://docs.github.com/articles/using-a-custom-domain-with-github-pages/)."'
    )
    https_enforced: Missing[bool] = Field(
        default=UNSET,
        description="Specify whether HTTPS should be enforced for the repository.",
    )
    build_type: Missing[Literal["legacy", "workflow"]] = Field(
        default=UNSET,
        description="The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch.",
    )
    source: Missing[
        Union[
            Literal["gh-pages", "master", "master /docs"],
            ReposOwnerRepoPagesPutBodyPropSourceAnyof1,
        ]
    ] = Field(default=UNSET)


class ReposOwnerRepoPagesPutBodyAnyof3(GitHubModel):
    """ReposOwnerRepoPagesPutBodyAnyof3"""

    cname: Missing[Union[str, None]] = Field(
        default=UNSET,
        description='Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://docs.github.com/articles/using-a-custom-domain-with-github-pages/)."',
    )
    https_enforced: Missing[bool] = Field(
        default=UNSET,
        description="Specify whether HTTPS should be enforced for the repository.",
    )
    build_type: Missing[Literal["legacy", "workflow"]] = Field(
        default=UNSET,
        description="The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch.",
    )
    source: Missing[
        Union[
            Literal["gh-pages", "master", "master /docs"],
            ReposOwnerRepoPagesPutBodyPropSourceAnyof1,
        ]
    ] = Field(default=UNSET)


class ReposOwnerRepoPagesPutBodyAnyof4(GitHubModel):
    """ReposOwnerRepoPagesPutBodyAnyof4"""

    cname: Missing[Union[str, None]] = Field(
        default=UNSET,
        description='Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://docs.github.com/articles/using-a-custom-domain-with-github-pages/)."',
    )
    https_enforced: bool = Field(
        description="Specify whether HTTPS should be enforced for the repository."
    )
    build_type: Missing[Literal["legacy", "workflow"]] = Field(
        default=UNSET,
        description="The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch.",
    )
    source: Missing[
        Union[
            Literal["gh-pages", "master", "master /docs"],
            ReposOwnerRepoPagesPutBodyPropSourceAnyof1,
        ]
    ] = Field(default=UNSET)


class ReposOwnerRepoPagesPostBodyPropSource(GitHubModel):
    """ReposOwnerRepoPagesPostBodyPropSource

    The source branch and directory used to publish your Pages site.
    """

    branch: str = Field(
        description="The repository branch used to publish your site's source files."
    )
    path: Missing[Literal["/", "/docs"]] = Field(
        default=UNSET,
        description="The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/`",
    )


class ReposOwnerRepoPagesPostBodyAnyof0(GitHubModel):
    """ReposOwnerRepoPagesPostBodyAnyof0"""

    build_type: Missing[Literal["legacy", "workflow"]] = Field(
        default=UNSET,
        description='The process in which the Page will be built. Possible values are `"legacy"` and `"workflow"`.',
    )
    source: ReposOwnerRepoPagesPostBodyPropSource = Field(
        description="The source branch and directory used to publish your Pages site."
    )


class ReposOwnerRepoPagesPostBodyAnyof1(GitHubModel):
    """ReposOwnerRepoPagesPostBodyAnyof1"""

    build_type: Literal["legacy", "workflow"] = Field(
        description='The process in which the Page will be built. Possible values are `"legacy"` and `"workflow"`.'
    )
    source: Missing[ReposOwnerRepoPagesPostBodyPropSource] = Field(
        default=UNSET,
        description="The source branch and directory used to publish your Pages site.",
    )


class ReposOwnerRepoPagesDeploymentPostBody(GitHubModel):
    """ReposOwnerRepoPagesDeploymentPostBody

    The object used to create GitHub Pages deployment
    """

    artifact_url: str = Field(
        description="The URL of an artifact that contains the .zip or .tar of static assets to deploy. The artifact belongs to the repository."
    )
    environment: Missing[str] = Field(
        default=UNSET,
        description="The target environment for this GitHub Pages deployment.",
    )
    pages_build_version: str = Field(
        default="GITHUB_SHA",
        description="A unique string that represents the version of the build for this deployment.",
    )
    oidc_token: str = Field(
        description="The OIDC token issued by GitHub Actions certifying the origin of the deployment."
    )


class ReposOwnerRepoProjectsPostBody(GitHubModel):
    """ReposOwnerRepoProjectsPostBody"""

    name: str = Field(description="The name of the project.")
    body: Missing[str] = Field(
        default=UNSET, description="The description of the project."
    )


class ReposOwnerRepoPullsPostBody(GitHubModel):
    """ReposOwnerRepoPullsPostBody"""

    title: Missing[str] = Field(
        default=UNSET,
        description="The title of the new pull request. Required unless `issue` is specified.",
    )
    head: str = Field(
        description="The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`."
    )
    head_repo: Missing[str] = Field(
        default=UNSET,
        description="The name of the repository where the changes in the pull request were made. This field is required for cross-repository pull requests if both repositories are owned by the same organization.",
    )
    base: str = Field(
        description="The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository."
    )
    body: Missing[str] = Field(
        default=UNSET, description="The contents of the pull request."
    )
    maintainer_can_modify: Missing[bool] = Field(
        default=UNSET,
        description="Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.",
    )
    draft: Missing[bool] = Field(
        default=UNSET,
        description='Indicates whether the pull request is a draft. See "[Draft Pull Requests](https://docs.github.com/articles/about-pull-requests#draft-pull-requests)" in the GitHub Help documentation to learn more.',
    )
    issue: Missing[int] = Field(
        default=UNSET,
        description="An issue in the repository to convert to a pull request. The issue title, body, and comments will become the title, body, and comments on the new pull request. Required unless `title` is specified.",
    )


class ReposOwnerRepoPullsCommentsCommentIdPatchBody(GitHubModel):
    """ReposOwnerRepoPullsCommentsCommentIdPatchBody"""

    body: str = Field(description="The text of the reply to the review comment.")


class ReposOwnerRepoPullsCommentsCommentIdReactionsPostBody(GitHubModel):
    """ReposOwnerRepoPullsCommentsCommentIdReactionsPostBody"""

    content: Literal[
        "+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"
    ] = Field(
        description="The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the pull request review comment."
    )


class ReposOwnerRepoPullsPullNumberPatchBody(GitHubModel):
    """ReposOwnerRepoPullsPullNumberPatchBody"""

    title: Missing[str] = Field(
        default=UNSET, description="The title of the pull request."
    )
    body: Missing[str] = Field(
        default=UNSET, description="The contents of the pull request."
    )
    state: Missing[Literal["open", "closed"]] = Field(
        default=UNSET,
        description="State of this Pull Request. Either `open` or `closed`.",
    )
    base: Missing[str] = Field(
        default=UNSET,
        description="The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.",
    )
    maintainer_can_modify: Missing[bool] = Field(
        default=UNSET,
        description="Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.",
    )


class ReposOwnerRepoPullsPullNumberCodespacesPostBody(GitHubModel):
    """ReposOwnerRepoPullsPullNumberCodespacesPostBody"""

    location: Missing[str] = Field(
        default=UNSET,
        description="The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided.",
    )
    geo: Missing[Literal["EuropeWest", "SoutheastAsia", "UsEast", "UsWest"]] = Field(
        default=UNSET,
        description="The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is being deprecated.",
    )
    client_ip: Missing[str] = Field(
        default=UNSET,
        description="IP for location auto-detection when proxying a request",
    )
    machine: Missing[str] = Field(
        default=UNSET, description="Machine type to use for this codespace"
    )
    devcontainer_path: Missing[str] = Field(
        default=UNSET,
        description="Path to devcontainer.json config to use for this codespace",
    )
    multi_repo_permissions_opt_out: Missing[bool] = Field(
        default=UNSET,
        description="Whether to authorize requested permissions from devcontainer.json",
    )
    working_directory: Missing[str] = Field(
        default=UNSET, description="Working directory for this codespace"
    )
    idle_timeout_minutes: Missing[int] = Field(
        default=UNSET,
        description="Time in minutes before codespace stops from inactivity",
    )
    display_name: Missing[str] = Field(
        default=UNSET, description="Display name for this codespace"
    )
    retention_period_minutes: Missing[int] = Field(
        default=UNSET,
        description="Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).",
    )


class ReposOwnerRepoPullsPullNumberCommentsPostBody(GitHubModel):
    """ReposOwnerRepoPullsPullNumberCommentsPostBody"""

    body: str = Field(description="The text of the review comment.")
    commit_id: str = Field(
        description="The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`."
    )
    path: str = Field(
        description="The relative path to the file that necessitates a comment."
    )
    position: Missing[int] = Field(
        default=UNSET,
        description="**This parameter is deprecated. Use `line` instead**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above.",
    )
    side: Missing[Literal["LEFT", "RIGHT"]] = Field(
        default=UNSET,
        description='In a split diff view, the side of the diff that the pull request\'s changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see "[Diff view options](https://docs.github.com/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub Help documentation.',
    )
    line: Missing[int] = Field(
        default=UNSET,
        description="**Required unless using `subject_type:file`**. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to.",
    )
    start_line: Missing[int] = Field(
        default=UNSET,
        description='**Required when using multi-line comments unless using `in_reply_to`**. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation.',
    )
    start_side: Missing[Literal["LEFT", "RIGHT", "side"]] = Field(
        default=UNSET,
        description='**Required when using multi-line comments unless using `in_reply_to`**. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. See `side` in this table for additional context.',
    )
    in_reply_to: Missing[int] = Field(
        default=UNSET,
        description='The ID of the review comment to reply to. To find the ID of a review comment with ["List review comments on a pull request"](#list-review-comments-on-a-pull-request). When specified, all parameters other than `body` in the request body are ignored.',
    )
    subject_type: Missing[Literal["line", "file"]] = Field(
        default=UNSET, description="The level at which the comment is targeted."
    )


class ReposOwnerRepoPullsPullNumberCommentsCommentIdRepliesPostBody(GitHubModel):
    """ReposOwnerRepoPullsPullNumberCommentsCommentIdRepliesPostBody"""

    body: str = Field(description="The text of the review comment.")


class ReposOwnerRepoPullsPullNumberMergePutBody(GitHubModel):
    """ReposOwnerRepoPullsPullNumberMergePutBody"""

    commit_title: Missing[str] = Field(
        default=UNSET, description="Title for the automatic commit message."
    )
    commit_message: Missing[str] = Field(
        default=UNSET, description="Extra detail to append to automatic commit message."
    )
    sha: Missing[str] = Field(
        default=UNSET,
        description="SHA that pull request head must match to allow merge.",
    )
    merge_method: Missing[Literal["merge", "squash", "rebase"]] = Field(
        default=UNSET, description="The merge method to use."
    )


class ReposOwnerRepoPullsPullNumberMergePutResponse405(GitHubModel):
    """ReposOwnerRepoPullsPullNumberMergePutResponse405"""

    message: Missing[str] = Field(default=UNSET)
    documentation_url: Missing[str] = Field(default=UNSET)


class ReposOwnerRepoPullsPullNumberMergePutResponse409(GitHubModel):
    """ReposOwnerRepoPullsPullNumberMergePutResponse409"""

    message: Missing[str] = Field(default=UNSET)
    documentation_url: Missing[str] = Field(default=UNSET)


class ReposOwnerRepoPullsPullNumberRequestedReviewersPostBodyAnyof0(GitHubModel):
    """ReposOwnerRepoPullsPullNumberRequestedReviewersPostBodyAnyof0"""

    reviewers: List[str] = Field(
        description="An array of user `login`s that will be requested."
    )
    team_reviewers: Missing[List[str]] = Field(
        default=UNSET, description="An array of team `slug`s that will be requested."
    )


class ReposOwnerRepoPullsPullNumberRequestedReviewersPostBodyAnyof1(GitHubModel):
    """ReposOwnerRepoPullsPullNumberRequestedReviewersPostBodyAnyof1"""

    reviewers: Missing[List[str]] = Field(
        default=UNSET, description="An array of user `login`s that will be requested."
    )
    team_reviewers: List[str] = Field(
        description="An array of team `slug`s that will be requested."
    )


class ReposOwnerRepoPullsPullNumberRequestedReviewersDeleteBody(GitHubModel):
    """ReposOwnerRepoPullsPullNumberRequestedReviewersDeleteBody"""

    reviewers: List[str] = Field(
        description="An array of user `login`s that will be removed."
    )
    team_reviewers: Missing[List[str]] = Field(
        default=UNSET, description="An array of team `slug`s that will be removed."
    )


class ReposOwnerRepoPullsPullNumberReviewsPostBody(GitHubModel):
    """ReposOwnerRepoPullsPullNumberReviewsPostBody"""

    commit_id: Missing[str] = Field(
        default=UNSET,
        description="The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value.",
    )
    body: Missing[str] = Field(
        default=UNSET,
        description="**Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review.",
    )
    event: Missing[Literal["APPROVE", "REQUEST_CHANGES", "COMMENT"]] = Field(
        default=UNSET,
        description="The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/rest/pulls/reviews#submit-a-review-for-a-pull-request) when you are ready.",
    )
    comments: Missing[
        List[ReposOwnerRepoPullsPullNumberReviewsPostBodyPropCommentsItems]
    ] = Field(
        default=UNSET,
        description="Use the following table to specify the location, destination, and contents of the draft review comment.",
    )


class ReposOwnerRepoPullsPullNumberReviewsPostBodyPropCommentsItems(GitHubModel):
    """ReposOwnerRepoPullsPullNumberReviewsPostBodyPropCommentsItems"""

    path: str = Field(
        description="The relative path to the file that necessitates a review comment."
    )
    position: Missing[int] = Field(
        default=UNSET,
        description="The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note below.",
    )
    body: str = Field(description="Text of the review comment.")
    line: Missing[int] = Field(default=UNSET)
    side: Missing[str] = Field(default=UNSET)
    start_line: Missing[int] = Field(default=UNSET)
    start_side: Missing[str] = Field(default=UNSET)


class ReposOwnerRepoPullsPullNumberReviewsReviewIdPutBody(GitHubModel):
    """ReposOwnerRepoPullsPullNumberReviewsReviewIdPutBody"""

    body: str = Field(description="The body text of the pull request review.")


class ReposOwnerRepoPullsPullNumberReviewsReviewIdDismissalsPutBody(GitHubModel):
    """ReposOwnerRepoPullsPullNumberReviewsReviewIdDismissalsPutBody"""

    message: str = Field(
        description="The message for the pull request review dismissal"
    )
    event: Missing[Literal["DISMISS"]] = Field(default=UNSET)


class ReposOwnerRepoPullsPullNumberReviewsReviewIdEventsPostBody(GitHubModel):
    """ReposOwnerRepoPullsPullNumberReviewsReviewIdEventsPostBody"""

    body: Missing[str] = Field(
        default=UNSET, description="The body text of the pull request review"
    )
    event: Literal["APPROVE", "REQUEST_CHANGES", "COMMENT"] = Field(
        description="The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action."
    )


class ReposOwnerRepoPullsPullNumberUpdateBranchPutBody(GitHubModel):
    """ReposOwnerRepoPullsPullNumberUpdateBranchPutBody"""

    expected_head_sha: Missing[str] = Field(
        default=UNSET,
        description="The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the \"[List commits](https://docs.github.com/rest/commits/commits#list-commits)\" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref.",
    )


class ReposOwnerRepoPullsPullNumberUpdateBranchPutResponse202(GitHubModel):
    """ReposOwnerRepoPullsPullNumberUpdateBranchPutResponse202"""

    message: Missing[str] = Field(default=UNSET)
    url: Missing[str] = Field(default=UNSET)


class ReposOwnerRepoReleasesPostBody(GitHubModel):
    """ReposOwnerRepoReleasesPostBody"""

    tag_name: str = Field(description="The name of the tag.")
    target_commitish: Missing[str] = Field(
        default=UNSET,
        description="Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch.",
    )
    name: Missing[str] = Field(default=UNSET, description="The name of the release.")
    body: Missing[str] = Field(
        default=UNSET, description="Text describing the contents of the tag."
    )
    draft: Missing[bool] = Field(
        default=UNSET,
        description="`true` to create a draft (unpublished) release, `false` to create a published one.",
    )
    prerelease: Missing[bool] = Field(
        default=UNSET,
        description="`true` to identify the release as a prerelease. `false` to identify the release as a full release.",
    )
    discussion_category_name: Missing[str] = Field(
        default=UNSET,
        description='If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."',
    )
    generate_release_notes: Missing[bool] = Field(
        default=UNSET,
        description="Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes.",
    )
    make_latest: Missing[Literal["true", "false", "legacy"]] = Field(
        default=UNSET,
        description="Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.",
    )


class ReposOwnerRepoReleasesAssetsAssetIdPatchBody(GitHubModel):
    """ReposOwnerRepoReleasesAssetsAssetIdPatchBody"""

    name: Missing[str] = Field(default=UNSET, description="The file name of the asset.")
    label: Missing[str] = Field(
        default=UNSET,
        description="An alternate short description of the asset. Used in place of the filename.",
    )
    state: Missing[str] = Field(default=UNSET)


class ReposOwnerRepoReleasesGenerateNotesPostBody(GitHubModel):
    """ReposOwnerRepoReleasesGenerateNotesPostBody"""

    tag_name: str = Field(
        description="The tag name for the release. This can be an existing tag or a new one."
    )
    target_commitish: Missing[str] = Field(
        default=UNSET,
        description="Specifies the commitish value that will be the target for the release's tag. Required if the supplied tag_name does not reference an existing tag. Ignored if the tag_name already exists.",
    )
    previous_tag_name: Missing[str] = Field(
        default=UNSET,
        description="The name of the previous tag to use as the starting point for the release notes. Use to manually specify the range for the set of changes considered as part this release.",
    )
    configuration_file_path: Missing[str] = Field(
        default=UNSET,
        description="Specifies a path to a file in the repository containing configuration settings used for generating the release notes. If unspecified, the configuration file located in the repository at '.github/release.yml' or '.github/release.yaml' will be used. If that is not present, the default configuration will be used.",
    )


class ReposOwnerRepoReleasesReleaseIdPatchBody(GitHubModel):
    """ReposOwnerRepoReleasesReleaseIdPatchBody"""

    tag_name: Missing[str] = Field(default=UNSET, description="The name of the tag.")
    target_commitish: Missing[str] = Field(
        default=UNSET,
        description="Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch.",
    )
    name: Missing[str] = Field(default=UNSET, description="The name of the release.")
    body: Missing[str] = Field(
        default=UNSET, description="Text describing the contents of the tag."
    )
    draft: Missing[bool] = Field(
        default=UNSET,
        description="`true` makes the release a draft, and `false` publishes the release.",
    )
    prerelease: Missing[bool] = Field(
        default=UNSET,
        description="`true` to identify the release as a prerelease, `false` to identify the release as a full release.",
    )
    make_latest: Missing[Literal["true", "false", "legacy"]] = Field(
        default=UNSET,
        description="Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.",
    )
    discussion_category_name: Missing[str] = Field(
        default=UNSET,
        description='If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. If there is already a discussion linked to the release, this parameter is ignored. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."',
    )


class ReposOwnerRepoReleasesReleaseIdReactionsPostBody(GitHubModel):
    """ReposOwnerRepoReleasesReleaseIdReactionsPostBody"""

    content: Literal["+1", "laugh", "heart", "hooray", "rocket", "eyes"] = Field(
        description="The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the release."
    )


class ReposOwnerRepoRulesetsPostBody(GitHubModel):
    """ReposOwnerRepoRulesetsPostBody"""

    name: str = Field(description="The name of the ruleset.")
    target: Missing[Literal["branch", "tag"]] = Field(
        default=UNSET, description="The target of the ruleset."
    )
    enforcement: Literal["disabled", "active", "evaluate"] = Field(
        description="The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise)."
    )
    bypass_actors: Missing[List[RepositoryRulesetBypassActor]] = Field(
        default=UNSET,
        description="The actors that can bypass the rules in this ruleset",
    )
    conditions: Missing[RepositoryRulesetConditions] = Field(
        default=UNSET,
        title="Repository ruleset conditions for ref names",
        description="Parameters for a repository ruleset ref name condition",
    )
    rules: Missing[
        List[
            Union[
                RepositoryRuleCreation,
                RepositoryRuleUpdate,
                RepositoryRuleDeletion,
                RepositoryRuleRequiredLinearHistory,
                RepositoryRuleRequiredDeployments,
                RepositoryRuleRequiredSignatures,
                RepositoryRulePullRequest,
                RepositoryRuleRequiredStatusChecks,
                RepositoryRuleNonFastForward,
                RepositoryRuleCommitMessagePattern,
                RepositoryRuleCommitAuthorEmailPattern,
                RepositoryRuleCommitterEmailPattern,
                RepositoryRuleBranchNamePattern,
                RepositoryRuleTagNamePattern,
                RepositoryRuleWorkflows,
            ]
        ]
    ] = Field(default=UNSET, description="An array of rules within the ruleset.")


class ReposOwnerRepoRulesetsRulesetIdPutBody(GitHubModel):
    """ReposOwnerRepoRulesetsRulesetIdPutBody"""

    name: Missing[str] = Field(default=UNSET, description="The name of the ruleset.")
    target: Missing[Literal["branch", "tag"]] = Field(
        default=UNSET, description="The target of the ruleset."
    )
    enforcement: Missing[Literal["disabled", "active", "evaluate"]] = Field(
        default=UNSET,
        description="The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise).",
    )
    bypass_actors: Missing[List[RepositoryRulesetBypassActor]] = Field(
        default=UNSET,
        description="The actors that can bypass the rules in this ruleset",
    )
    conditions: Missing[RepositoryRulesetConditions] = Field(
        default=UNSET,
        title="Repository ruleset conditions for ref names",
        description="Parameters for a repository ruleset ref name condition",
    )
    rules: Missing[
        List[
            Union[
                RepositoryRuleCreation,
                RepositoryRuleUpdate,
                RepositoryRuleDeletion,
                RepositoryRuleRequiredLinearHistory,
                RepositoryRuleRequiredDeployments,
                RepositoryRuleRequiredSignatures,
                RepositoryRulePullRequest,
                RepositoryRuleRequiredStatusChecks,
                RepositoryRuleNonFastForward,
                RepositoryRuleCommitMessagePattern,
                RepositoryRuleCommitAuthorEmailPattern,
                RepositoryRuleCommitterEmailPattern,
                RepositoryRuleBranchNamePattern,
                RepositoryRuleTagNamePattern,
                RepositoryRuleWorkflows,
            ]
        ]
    ] = Field(default=UNSET, description="An array of rules within the ruleset.")


class ReposOwnerRepoSecretScanningAlertsAlertNumberPatchBody(GitHubModel):
    """ReposOwnerRepoSecretScanningAlertsAlertNumberPatchBody"""

    state: Literal["open", "resolved"] = Field(
        description="Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`."
    )
    resolution: Missing[
        Union[None, Literal["false_positive", "wont_fix", "revoked", "used_in_tests"]]
    ] = Field(
        default=UNSET,
        description="**Required when the `state` is `resolved`.** The reason for resolving the alert.",
    )
    resolution_comment: Missing[Union[str, None]] = Field(
        default=UNSET,
        description="An optional comment when closing an alert. Cannot be updated or deleted. Must be `null` when changing `state` to `open`.",
    )


class ReposOwnerRepoStatusesShaPostBody(GitHubModel):
    """ReposOwnerRepoStatusesShaPostBody"""

    state: Literal["error", "failure", "pending", "success"] = Field(
        description="The state of the status."
    )
    target_url: Missing[Union[str, None]] = Field(
        default=UNSET,
        description="The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.  \nFor example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:  \n`http://ci.example.com/user/repo/build/sha`",
    )
    description: Missing[Union[str, None]] = Field(
        default=UNSET, description="A short description of the status."
    )
    context: Missing[str] = Field(
        default=UNSET,
        description="A string label to differentiate this status from the status of other systems. This field is case-insensitive.",
    )


class ReposOwnerRepoSubscriptionPutBody(GitHubModel):
    """ReposOwnerRepoSubscriptionPutBody"""

    subscribed: Missing[bool] = Field(
        default=UNSET,
        description="Determines if notifications should be received from this repository.",
    )
    ignored: Missing[bool] = Field(
        default=UNSET,
        description="Determines if all notifications should be blocked from this repository.",
    )


class ReposOwnerRepoTagsProtectionPostBody(GitHubModel):
    """ReposOwnerRepoTagsProtectionPostBody"""

    pattern: str = Field(
        description="An optional glob pattern to match against when enforcing tag protection."
    )


class ReposOwnerRepoTopicsPutBody(GitHubModel):
    """ReposOwnerRepoTopicsPutBody"""

    names: List[str] = Field(
        description="An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` cannot contain uppercase letters."
    )


class ReposOwnerRepoTransferPostBody(GitHubModel):
    """ReposOwnerRepoTransferPostBody"""

    new_owner: str = Field(
        description="The username or organization name the repository will be transferred to."
    )
    new_name: Missing[str] = Field(
        default=UNSET, description="The new name to be given to the repository."
    )
    team_ids: Missing[List[int]] = Field(
        default=UNSET,
        description="ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.",
    )


class ReposTemplateOwnerTemplateRepoGeneratePostBody(GitHubModel):
    """ReposTemplateOwnerTemplateRepoGeneratePostBody"""

    owner: Missing[str] = Field(
        default=UNSET,
        description="The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization.",
    )
    name: str = Field(description="The name of the new repository.")
    description: Missing[str] = Field(
        default=UNSET, description="A short description of the new repository."
    )
    include_all_branches: Missing[bool] = Field(
        default=UNSET,
        description="Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`.",
    )
    private: Missing[bool] = Field(
        default=UNSET,
        description="Either `true` to create a new private repository or `false` to create a new public one.",
    )


class RepositoriesRepositoryIdEnvironmentsEnvironmentNameSecretsGetResponse200(
    GitHubModel
):
    """RepositoriesRepositoryIdEnvironmentsEnvironmentNameSecretsGetResponse200"""

    total_count: int = Field()
    secrets: List[ActionsSecret] = Field()


class RepositoriesRepositoryIdEnvironmentsEnvironmentNameSecretsSecretNamePutBody(
    GitHubModel
):
    """RepositoriesRepositoryIdEnvironmentsEnvironmentNameSecretsSecretNamePutBody"""

    encrypted_value: Annotated[
        str,
        Field(
            pattern="^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"
        ),
    ] = Field(
        description="Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an environment public key](https://docs.github.com/rest/actions/secrets#get-an-environment-public-key) endpoint."
    )
    key_id: str = Field(description="ID of the key you used to encrypt the secret.")


class RepositoriesRepositoryIdEnvironmentsEnvironmentNameVariablesGetResponse200(
    GitHubModel
):
    """RepositoriesRepositoryIdEnvironmentsEnvironmentNameVariablesGetResponse200"""

    total_count: int = Field()
    variables: List[ActionsVariable] = Field()


class RepositoriesRepositoryIdEnvironmentsEnvironmentNameVariablesPostBody(GitHubModel):
    """RepositoriesRepositoryIdEnvironmentsEnvironmentNameVariablesPostBody"""

    name: str = Field(description="The name of the variable.")
    value: str = Field(description="The value of the variable.")


class RepositoriesRepositoryIdEnvironmentsEnvironmentNameVariablesNamePatchBody(
    GitHubModel
):
    """RepositoriesRepositoryIdEnvironmentsEnvironmentNameVariablesNamePatchBody"""

    name: Missing[str] = Field(default=UNSET, description="The name of the variable.")
    value: Missing[str] = Field(default=UNSET, description="The value of the variable.")


class SearchCodeGetResponse200(GitHubModel):
    """SearchCodeGetResponse200"""

    total_count: int = Field()
    incomplete_results: bool = Field()
    items: List[CodeSearchResultItem] = Field()


class SearchCommitsGetResponse200(GitHubModel):
    """SearchCommitsGetResponse200"""

    total_count: int = Field()
    incomplete_results: bool = Field()
    items: List[CommitSearchResultItem] = Field()


class SearchIssuesGetResponse200(GitHubModel):
    """SearchIssuesGetResponse200"""

    total_count: int = Field()
    incomplete_results: bool = Field()
    items: List[IssueSearchResultItem] = Field()


class SearchLabelsGetResponse200(GitHubModel):
    """SearchLabelsGetResponse200"""

    total_count: int = Field()
    incomplete_results: bool = Field()
    items: List[LabelSearchResultItem] = Field()


class SearchRepositoriesGetResponse200(GitHubModel):
    """SearchRepositoriesGetResponse200"""

    total_count: int = Field()
    incomplete_results: bool = Field()
    items: List[RepoSearchResultItem] = Field()


class SearchTopicsGetResponse200(GitHubModel):
    """SearchTopicsGetResponse200"""

    total_count: int = Field()
    incomplete_results: bool = Field()
    items: List[TopicSearchResultItem] = Field()


class SearchUsersGetResponse200(GitHubModel):
    """SearchUsersGetResponse200"""

    total_count: int = Field()
    incomplete_results: bool = Field()
    items: List[UserSearchResultItem] = Field()


class TeamsTeamIdPatchBody(GitHubModel):
    """TeamsTeamIdPatchBody"""

    name: str = Field(description="The name of the team.")
    description: Missing[str] = Field(
        default=UNSET, description="The description of the team."
    )
    privacy: Missing[Literal["secret", "closed"]] = Field(
        default=UNSET,
        description="The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:  \n**For a non-nested team:**  \n * `secret` - only visible to organization owners and members of this team.  \n * `closed` - visible to all members of this organization.  \n**For a parent or child team:**  \n * `closed` - visible to all members of this organization.",
    )
    notification_setting: Missing[
        Literal["notifications_enabled", "notifications_disabled"]
    ] = Field(
        default=UNSET,
        description="The notification setting the team has chosen. Editing teams without specifying this parameter leaves `notification_setting` intact. The options are: \n * `notifications_enabled` - team members receive notifications when the team is @mentioned.  \n * `notifications_disabled` - no one receives notifications.",
    )
    permission: Missing[Literal["pull", "push", "admin"]] = Field(
        default=UNSET,
        description="**Deprecated**. The permission that new repositories will be added to the team with when none is specified.",
    )
    parent_team_id: Missing[Union[int, None]] = Field(
        default=UNSET, description="The ID of a team to set as the parent team."
    )


class TeamsTeamIdDiscussionsPostBody(GitHubModel):
    """TeamsTeamIdDiscussionsPostBody"""

    title: str = Field(description="The discussion post's title.")
    body: str = Field(description="The discussion post's body text.")
    private: Missing[bool] = Field(
        default=UNSET,
        description="Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.",
    )


class TeamsTeamIdDiscussionsDiscussionNumberPatchBody(GitHubModel):
    """TeamsTeamIdDiscussionsDiscussionNumberPatchBody"""

    title: Missing[str] = Field(
        default=UNSET, description="The discussion post's title."
    )
    body: Missing[str] = Field(
        default=UNSET, description="The discussion post's body text."
    )


class TeamsTeamIdDiscussionsDiscussionNumberCommentsPostBody(GitHubModel):
    """TeamsTeamIdDiscussionsDiscussionNumberCommentsPostBody"""

    body: str = Field(description="The discussion comment's body text.")


class TeamsTeamIdDiscussionsDiscussionNumberCommentsCommentNumberPatchBody(GitHubModel):
    """TeamsTeamIdDiscussionsDiscussionNumberCommentsCommentNumberPatchBody"""

    body: str = Field(description="The discussion comment's body text.")


class TeamsTeamIdDiscussionsDiscussionNumberCommentsCommentNumberReactionsPostBody(
    GitHubModel
):
    """TeamsTeamIdDiscussionsDiscussionNumberCommentsCommentNumberReactionsPostBody"""

    content: Literal[
        "+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"
    ] = Field(
        description="The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion comment."
    )


class TeamsTeamIdDiscussionsDiscussionNumberReactionsPostBody(GitHubModel):
    """TeamsTeamIdDiscussionsDiscussionNumberReactionsPostBody"""

    content: Literal[
        "+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"
    ] = Field(
        description="The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion."
    )


class TeamsTeamIdMembershipsUsernamePutBody(GitHubModel):
    """TeamsTeamIdMembershipsUsernamePutBody"""

    role: Missing[Literal["member", "maintainer"]] = Field(
        default=UNSET, description="The role that this user should have in the team."
    )


class TeamsTeamIdProjectsProjectIdPutBody(GitHubModel):
    """TeamsTeamIdProjectsProjectIdPutBody"""

    permission: Missing[Literal["read", "write", "admin"]] = Field(
        default=UNSET,
        description="The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see \"[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).\"",
    )


class TeamsTeamIdProjectsProjectIdPutResponse403(GitHubModel):
    """TeamsTeamIdProjectsProjectIdPutResponse403"""

    message: Missing[str] = Field(default=UNSET)
    documentation_url: Missing[str] = Field(default=UNSET)


class TeamsTeamIdReposOwnerRepoPutBody(GitHubModel):
    """TeamsTeamIdReposOwnerRepoPutBody"""

    permission: Missing[Literal["pull", "push", "admin"]] = Field(
        default=UNSET,
        description="The permission to grant the team on this repository. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.",
    )


class UserPatchBody(GitHubModel):
    """UserPatchBody"""

    name: Missing[str] = Field(default=UNSET, description="The new name of the user.")
    email: Missing[str] = Field(
        default=UNSET, description="The publicly visible email address of the user."
    )
    blog: Missing[str] = Field(
        default=UNSET, description="The new blog URL of the user."
    )
    twitter_username: Missing[Union[str, None]] = Field(
        default=UNSET, description="The new Twitter username of the user."
    )
    company: Missing[str] = Field(
        default=UNSET, description="The new company of the user."
    )
    location: Missing[str] = Field(
        default=UNSET, description="The new location of the user."
    )
    hireable: Missing[bool] = Field(
        default=UNSET, description="The new hiring availability of the user."
    )
    bio: Missing[str] = Field(
        default=UNSET, description="The new short biography of the user."
    )


class UserCodespacesGetResponse200(GitHubModel):
    """UserCodespacesGetResponse200"""

    total_count: int = Field()
    codespaces: List[Codespace] = Field()


class UserCodespacesPostBodyOneof0(GitHubModel):
    """UserCodespacesPostBodyOneof0"""

    repository_id: int = Field(description="Repository id for this codespace")
    ref: Missing[str] = Field(
        default=UNSET,
        description="Git ref (typically a branch name) for this codespace",
    )
    location: Missing[str] = Field(
        default=UNSET,
        description="The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided.",
    )
    geo: Missing[Literal["EuropeWest", "SoutheastAsia", "UsEast", "UsWest"]] = Field(
        default=UNSET,
        description="The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is being deprecated.",
    )
    client_ip: Missing[str] = Field(
        default=UNSET,
        description="IP for location auto-detection when proxying a request",
    )
    machine: Missing[str] = Field(
        default=UNSET, description="Machine type to use for this codespace"
    )
    devcontainer_path: Missing[str] = Field(
        default=UNSET,
        description="Path to devcontainer.json config to use for this codespace",
    )
    multi_repo_permissions_opt_out: Missing[bool] = Field(
        default=UNSET,
        description="Whether to authorize requested permissions from devcontainer.json",
    )
    working_directory: Missing[str] = Field(
        default=UNSET, description="Working directory for this codespace"
    )
    idle_timeout_minutes: Missing[int] = Field(
        default=UNSET,
        description="Time in minutes before codespace stops from inactivity",
    )
    display_name: Missing[str] = Field(
        default=UNSET, description="Display name for this codespace"
    )
    retention_period_minutes: Missing[int] = Field(
        default=UNSET,
        description="Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).",
    )


class UserCodespacesPostBodyOneof1(GitHubModel):
    """UserCodespacesPostBodyOneof1"""

    pull_request: UserCodespacesPostBodyOneof1PropPullRequest = Field(
        description="Pull request number for this codespace"
    )
    location: Missing[str] = Field(
        default=UNSET,
        description="The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided.",
    )
    geo: Missing[Literal["EuropeWest", "SoutheastAsia", "UsEast", "UsWest"]] = Field(
        default=UNSET,
        description="The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is being deprecated.",
    )
    machine: Missing[str] = Field(
        default=UNSET, description="Machine type to use for this codespace"
    )
    devcontainer_path: Missing[str] = Field(
        default=UNSET,
        description="Path to devcontainer.json config to use for this codespace",
    )
    working_directory: Missing[str] = Field(
        default=UNSET, description="Working directory for this codespace"
    )
    idle_timeout_minutes: Missing[int] = Field(
        default=UNSET,
        description="Time in minutes before codespace stops from inactivity",
    )


class UserCodespacesPostBodyOneof1PropPullRequest(GitHubModel):
    """UserCodespacesPostBodyOneof1PropPullRequest

    Pull request number for this codespace
    """

    pull_request_number: int = Field(description="Pull request number")
    repository_id: int = Field(description="Repository id for this codespace")


class UserCodespacesSecretsGetResponse200(GitHubModel):
    """UserCodespacesSecretsGetResponse200"""

    total_count: int = Field()
    secrets: List[CodespacesSecret] = Field()


class UserCodespacesSecretsSecretNamePutBody(GitHubModel):
    """UserCodespacesSecretsSecretNamePutBody"""

    encrypted_value: Missing[
        Annotated[
            str,
            Field(
                pattern="^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"
            ),
        ]
    ] = Field(
        default=UNSET,
        description="Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get the public key for the authenticated user](https://docs.github.com/rest/codespaces/secrets#get-public-key-for-the-authenticated-user) endpoint.",
    )
    key_id: str = Field(description="ID of the key you used to encrypt the secret.")
    selected_repository_ids: Missing[List[Union[int, str]]] = Field(
        default=UNSET,
        description="An array of repository ids that can access the user secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#list-selected-repositories-for-a-user-secret), [Set selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#set-selected-repositories-for-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/codespaces/secrets#remove-a-selected-repository-from-a-user-secret) endpoints.",
    )


class UserCodespacesSecretsSecretNameRepositoriesGetResponse200(GitHubModel):
    """UserCodespacesSecretsSecretNameRepositoriesGetResponse200"""

    total_count: int = Field()
    repositories: List[MinimalRepository] = Field()


class UserCodespacesSecretsSecretNameRepositoriesPutBody(GitHubModel):
    """UserCodespacesSecretsSecretNameRepositoriesPutBody"""

    selected_repository_ids: List[int] = Field(
        description="An array of repository ids for which a codespace can access the secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#list-selected-repositories-for-a-user-secret), [Add a selected repository to a user secret](https://docs.github.com/rest/codespaces/secrets#add-a-selected-repository-to-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/codespaces/secrets#remove-a-selected-repository-from-a-user-secret) endpoints."
    )


class UserCodespacesCodespaceNamePatchBody(GitHubModel):
    """UserCodespacesCodespaceNamePatchBody"""

    machine: Missing[str] = Field(
        default=UNSET, description="A valid machine to transition this codespace to."
    )
    display_name: Missing[str] = Field(
        default=UNSET, description="Display name for this codespace"
    )
    recent_folders: Missing[List[str]] = Field(
        default=UNSET,
        description="Recently opened folders inside the codespace. It is currently used by the clients to determine the folder path to load the codespace in.",
    )


class UserCodespacesCodespaceNameMachinesGetResponse200(GitHubModel):
    """UserCodespacesCodespaceNameMachinesGetResponse200"""

    total_count: int = Field()
    machines: List[CodespaceMachine] = Field()


class UserCodespacesCodespaceNamePublishPostBody(GitHubModel):
    """UserCodespacesCodespaceNamePublishPostBody"""

    name: Missing[str] = Field(
        default=UNSET, description="A name for the new repository."
    )
    private: Missing[bool] = Field(
        default=UNSET, description="Whether the new repository should be private."
    )


class UserEmailVisibilityPatchBody(GitHubModel):
    """UserEmailVisibilityPatchBody"""

    visibility: Literal["public", "private"] = Field(
        description="Denotes whether an email is publicly visible."
    )


class UserEmailsPostBodyOneof0(GitHubModel):
    """UserEmailsPostBodyOneof0

    Examples:
        {'emails': ['octocat@github.com', 'mona@github.com']}
    """

    emails: List[str] = Field(
        description="Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key."
    )


class UserEmailsDeleteBodyOneof0(GitHubModel):
    """UserEmailsDeleteBodyOneof0

    Deletes one or more email addresses from your GitHub account. Must contain at
    least one email address. **Note:** Alternatively, you can pass a single email
    address or an `array` of emails addresses directly, but we recommend that you
    pass an object using the `emails` key.

    Examples:
        {'emails': ['octocat@github.com', 'mona@github.com']}
    """

    emails: List[str] = Field(
        description="Email addresses associated with the GitHub user account."
    )


class UserGpgKeysPostBody(GitHubModel):
    """UserGpgKeysPostBody"""

    name: Missing[str] = Field(
        default=UNSET, description="A descriptive name for the new key."
    )
    armored_public_key: str = Field(description="A GPG key in ASCII-armored format.")


class UserInstallationsGetResponse200(GitHubModel):
    """UserInstallationsGetResponse200"""

    total_count: int = Field()
    installations: List[Installation] = Field()


class UserInstallationsInstallationIdRepositoriesGetResponse200(GitHubModel):
    """UserInstallationsInstallationIdRepositoriesGetResponse200"""

    total_count: int = Field()
    repository_selection: Missing[str] = Field(default=UNSET)
    repositories: List[Repository] = Field()


class UserInteractionLimitsGetResponse200Anyof1(GitHubModel):
    """UserInteractionLimitsGetResponse200Anyof1"""


class UserKeysPostBody(GitHubModel):
    """UserKeysPostBody"""

    title: Missing[str] = Field(
        default=UNSET, description="A descriptive name for the new key."
    )
    key: Annotated[
        str, Field(pattern="^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521) ")
    ] = Field(description="The public SSH key to add to your GitHub account.")


class UserMembershipsOrgsOrgPatchBody(GitHubModel):
    """UserMembershipsOrgsOrgPatchBody"""

    state: Literal["active"] = Field(
        description='The state that the membership should be in. Only `"active"` will be accepted.'
    )


class UserMigrationsPostBody(GitHubModel):
    """UserMigrationsPostBody"""

    lock_repositories: Missing[bool] = Field(
        default=UNSET,
        description="Lock the repositories being migrated at the start of the migration",
    )
    exclude_metadata: Missing[bool] = Field(
        default=UNSET,
        description="Indicates whether metadata should be excluded and only git source should be included for the migration.",
    )
    exclude_git_data: Missing[bool] = Field(
        default=UNSET,
        description="Indicates whether the repository git data should be excluded from the migration.",
    )
    exclude_attachments: Missing[bool] = Field(
        default=UNSET, description="Do not include attachments in the migration"
    )
    exclude_releases: Missing[bool] = Field(
        default=UNSET, description="Do not include releases in the migration"
    )
    exclude_owner_projects: Missing[bool] = Field(
        default=UNSET,
        description="Indicates whether projects owned by the organization or users should be excluded.",
    )
    org_metadata_only: Missing[bool] = Field(
        default=UNSET,
        description="Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).",
    )
    exclude: Missing[List[Literal["repositories"]]] = Field(
        default=UNSET,
        description="Exclude attributes from the API response to improve performance",
    )
    repositories: List[str] = Field()


class UserProjectsPostBody(GitHubModel):
    """UserProjectsPostBody"""

    name: str = Field(description="Name of the project")
    body: Missing[Union[str, None]] = Field(
        default=UNSET, description="Body of the project"
    )


class UserReposPostBody(GitHubModel):
    """UserReposPostBody"""

    name: str = Field(description="The name of the repository.")
    description: Missing[str] = Field(
        default=UNSET, description="A short description of the repository."
    )
    homepage: Missing[str] = Field(
        default=UNSET, description="A URL with more information about the repository."
    )
    private: Missing[bool] = Field(
        default=UNSET, description="Whether the repository is private."
    )
    has_issues: Missing[bool] = Field(
        default=UNSET, description="Whether issues are enabled."
    )
    has_projects: Missing[bool] = Field(
        default=UNSET, description="Whether projects are enabled."
    )
    has_wiki: Missing[bool] = Field(
        default=UNSET, description="Whether the wiki is enabled."
    )
    has_discussions: Missing[bool] = Field(
        default=UNSET, description="Whether discussions are enabled."
    )
    team_id: Missing[int] = Field(
        default=UNSET,
        description="The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.",
    )
    auto_init: Missing[bool] = Field(
        default=UNSET,
        description="Whether the repository is initialized with a minimal README.",
    )
    gitignore_template: Missing[str] = Field(
        default=UNSET,
        description="The desired language or platform to apply to the .gitignore.",
    )
    license_template: Missing[str] = Field(
        default=UNSET,
        description="The license keyword of the open source license for this repository.",
    )
    allow_squash_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow squash merges for pull requests."
    )
    allow_merge_commit: Missing[bool] = Field(
        default=UNSET, description="Whether to allow merge commits for pull requests."
    )
    allow_rebase_merge: Missing[bool] = Field(
        default=UNSET, description="Whether to allow rebase merges for pull requests."
    )
    allow_auto_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to allow Auto-merge to be used on pull requests.",
    )
    delete_branch_on_merge: Missing[bool] = Field(
        default=UNSET,
        description="Whether to delete head branches when pull requests are merged",
    )
    squash_merge_commit_title: Missing[
        Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
    )
    squash_merge_commit_message: Missing[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ] = Field(
        default=UNSET,
        description="The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
    )
    merge_commit_title: Missing[Literal["PR_TITLE", "MERGE_MESSAGE"]] = Field(
        default=UNSET,
        description="The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
    )
    merge_commit_message: Missing[Literal["PR_BODY", "PR_TITLE", "BLANK"]] = Field(
        default=UNSET,
        description="The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
    )
    has_downloads: Missing[bool] = Field(
        default=UNSET, description="Whether downloads are enabled."
    )
    is_template: Missing[bool] = Field(
        default=UNSET,
        description="Whether this repository acts as a template that can be used to generate new repositories.",
    )


class UserSocialAccountsPostBody(GitHubModel):
    """UserSocialAccountsPostBody

    Examples:
        {'account_urls': ['https://www.linkedin.com/company/github/',
    'https://twitter.com/github']}
    """

    account_urls: List[str] = Field(
        description="Full URLs for the social media profiles to add."
    )


class UserSocialAccountsDeleteBody(GitHubModel):
    """UserSocialAccountsDeleteBody

    Examples:
        {'account_urls': ['https://www.linkedin.com/company/github/',
    'https://twitter.com/github']}
    """

    account_urls: List[str] = Field(
        description="Full URLs for the social media profiles to delete."
    )


class UserSshSigningKeysPostBody(GitHubModel):
    """UserSshSigningKeysPostBody"""

    title: Missing[str] = Field(
        default=UNSET, description="A descriptive name for the new key."
    )
    key: Annotated[
        str,
        Field(
            pattern="^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521) |^(sk-ssh-ed25519|sk-ecdsa-sha2-nistp256)@openssh.com "
        ),
    ] = Field(
        description='The public SSH key to add to your GitHub account. For more information, see "[Checking for existing SSH keys](https://docs.github.com/authentication/connecting-to-github-with-ssh/checking-for-existing-ssh-keys)."'
    )


model_rebuild(Root)
model_rebuild(SimpleUser)
model_rebuild(GlobalAdvisory)
model_rebuild(GlobalAdvisoryPropIdentifiersItems)
model_rebuild(GlobalAdvisoryPropVulnerabilitiesItems)
model_rebuild(GlobalAdvisoryPropVulnerabilitiesItemsPropPackage)
model_rebuild(GlobalAdvisoryPropCvss)
model_rebuild(GlobalAdvisoryPropCwesItems)
model_rebuild(GlobalAdvisoryPropCreditsItems)
model_rebuild(BasicError)
model_rebuild(ValidationErrorSimple)
model_rebuild(Integration)
model_rebuild(IntegrationPropPermissions)
model_rebuild(WebhookConfig)
model_rebuild(HookDeliveryItem)
model_rebuild(ScimError)
model_rebuild(ValidationError)
model_rebuild(ValidationErrorPropErrorsItems)
model_rebuild(HookDelivery)
model_rebuild(HookDeliveryPropRequest)
model_rebuild(HookDeliveryPropRequestPropHeaders)
model_rebuild(HookDeliveryPropRequestPropPayload)
model_rebuild(HookDeliveryPropResponse)
model_rebuild(HookDeliveryPropResponsePropHeaders)
model_rebuild(Enterprise)
model_rebuild(IntegrationInstallationRequest)
model_rebuild(AppPermissions)
model_rebuild(Installation)
model_rebuild(LicenseSimple)
model_rebuild(Repository)
model_rebuild(RepositoryPropPermissions)
model_rebuild(RepositoryPropTemplateRepositoryPropOwner)
model_rebuild(RepositoryPropTemplateRepositoryPropPermissions)
model_rebuild(RepositoryPropTemplateRepository)
model_rebuild(InstallationToken)
model_rebuild(ScopedInstallation)
model_rebuild(Authorization)
model_rebuild(AuthorizationPropApp)
model_rebuild(SimpleClassroomRepository)
model_rebuild(SimpleClassroomOrganization)
model_rebuild(Classroom)
model_rebuild(ClassroomAssignment)
model_rebuild(SimpleClassroomUser)
model_rebuild(SimpleClassroom)
model_rebuild(SimpleClassroomAssignment)
model_rebuild(ClassroomAcceptedAssignment)
model_rebuild(ClassroomAssignmentGrade)
model_rebuild(CodeOfConduct)
model_rebuild(DependabotAlertPackage)
model_rebuild(DependabotAlertSecurityVulnerability)
model_rebuild(DependabotAlertSecurityVulnerabilityPropFirstPatchedVersion)
model_rebuild(DependabotAlertSecurityAdvisory)
model_rebuild(DependabotAlertSecurityAdvisoryPropCvss)
model_rebuild(DependabotAlertSecurityAdvisoryPropCwesItems)
model_rebuild(DependabotAlertSecurityAdvisoryPropIdentifiersItems)
model_rebuild(DependabotAlertSecurityAdvisoryPropReferencesItems)
model_rebuild(SimpleRepository)
model_rebuild(DependabotAlertWithRepository)
model_rebuild(DependabotAlertWithRepositoryPropDependency)
model_rebuild(OrganizationSecretScanningAlert)
model_rebuild(Actor)
model_rebuild(Milestone)
model_rebuild(ReactionRollup)
model_rebuild(Issue)
model_rebuild(IssuePropLabelsItemsOneof1)
model_rebuild(IssuePropPullRequest)
model_rebuild(IssueComment)
model_rebuild(Event)
model_rebuild(EventPropRepo)
model_rebuild(EventPropPayload)
model_rebuild(EventPropPayloadPropPagesItems)
model_rebuild(LinkWithType)
model_rebuild(Feed)
model_rebuild(FeedPropLinks)
model_rebuild(BaseGist)
model_rebuild(BaseGistPropFiles)
model_rebuild(PublicUser)
model_rebuild(PublicUserPropPlan)
model_rebuild(GistHistory)
model_rebuild(GistHistoryPropChangeStatus)
model_rebuild(GistSimple)
model_rebuild(GistSimplePropForksItems)
model_rebuild(GistSimplePropForkOfPropFiles)
model_rebuild(GistSimplePropForkOf)
model_rebuild(GistSimplePropFiles)
model_rebuild(GistComment)
model_rebuild(GistCommit)
model_rebuild(GistCommitPropChangeStatus)
model_rebuild(GitignoreTemplate)
model_rebuild(License)
model_rebuild(MarketplaceListingPlan)
model_rebuild(MarketplacePurchase)
model_rebuild(MarketplacePurchasePropMarketplacePendingChange)
model_rebuild(MarketplacePurchasePropMarketplacePurchase)
model_rebuild(ApiOverview)
model_rebuild(ApiOverviewPropSshKeyFingerprints)
model_rebuild(ApiOverviewPropDomains)
model_rebuild(SecurityAndAnalysisPropAdvancedSecurity)
model_rebuild(SecurityAndAnalysisPropDependabotSecurityUpdates)
model_rebuild(SecurityAndAnalysisPropSecretScanning)
model_rebuild(SecurityAndAnalysisPropSecretScanningPushProtection)
model_rebuild(SecurityAndAnalysis)
model_rebuild(MinimalRepository)
model_rebuild(MinimalRepositoryPropPermissions)
model_rebuild(MinimalRepositoryPropLicense)
model_rebuild(Thread)
model_rebuild(ThreadPropSubject)
model_rebuild(ThreadSubscription)
model_rebuild(OrganizationSimple)
model_rebuild(OrganizationFull)
model_rebuild(OrganizationFullPropPlan)
model_rebuild(ActionsCacheUsageOrgEnterprise)
model_rebuild(ActionsCacheUsageByRepository)
model_rebuild(OidcCustomSub)
model_rebuild(EmptyObject)
model_rebuild(ActionsOrganizationPermissions)
model_rebuild(SelectedActions)
model_rebuild(ActionsGetDefaultWorkflowPermissions)
model_rebuild(ActionsSetDefaultWorkflowPermissions)
model_rebuild(RunnerLabel)
model_rebuild(Runner)
model_rebuild(RunnerApplication)
model_rebuild(AuthenticationToken)
model_rebuild(AuthenticationTokenPropPermissions)
model_rebuild(OrganizationActionsSecret)
model_rebuild(ActionsPublicKey)
model_rebuild(OrganizationActionsVariable)
model_rebuild(CodeScanningAlertRuleSummary)
model_rebuild(CodeScanningAnalysisTool)
model_rebuild(CodeScanningAlertLocation)
model_rebuild(CodeScanningAlertInstance)
model_rebuild(CodeScanningAlertInstancePropMessage)
model_rebuild(CodeScanningOrganizationAlertItems)
model_rebuild(CodespaceMachine)
model_rebuild(Codespace)
model_rebuild(CodespacePropGitStatus)
model_rebuild(CodespacePropRuntimeConstraints)
model_rebuild(CodespacesOrgSecret)
model_rebuild(CodespacesPublicKey)
model_rebuild(CopilotSeatBreakdown)
model_rebuild(CopilotOrganizationDetails)
model_rebuild(TeamSimple)
model_rebuild(Team)
model_rebuild(TeamPropPermissions)
model_rebuild(Organization)
model_rebuild(OrganizationPropPlan)
model_rebuild(CopilotSeatDetails)
model_rebuild(OrganizationDependabotSecret)
model_rebuild(DependabotPublicKey)
model_rebuild(Package)
model_rebuild(OrganizationInvitation)
model_rebuild(OrgHook)
model_rebuild(OrgHookPropConfig)
model_rebuild(InteractionLimitResponse)
model_rebuild(InteractionLimit)
model_rebuild(OrgMembership)
model_rebuild(OrgMembershipPropPermissions)
model_rebuild(Migration)
model_rebuild(OrganizationFineGrainedPermission)
model_rebuild(OrganizationRole)
model_rebuild(PackageVersion)
model_rebuild(PackageVersionPropMetadata)
model_rebuild(PackageVersionPropMetadataPropContainer)
model_rebuild(PackageVersionPropMetadataPropDocker)
model_rebuild(OrganizationProgrammaticAccessGrantRequest)
model_rebuild(OrganizationProgrammaticAccessGrantRequestPropPermissions)
model_rebuild(OrganizationProgrammaticAccessGrantRequestPropPermissionsPropOrganization)
model_rebuild(OrganizationProgrammaticAccessGrantRequestPropPermissionsPropRepository)
model_rebuild(OrganizationProgrammaticAccessGrantRequestPropPermissionsPropOther)
model_rebuild(OrganizationProgrammaticAccessGrant)
model_rebuild(OrganizationProgrammaticAccessGrantPropPermissions)
model_rebuild(OrganizationProgrammaticAccessGrantPropPermissionsPropOrganization)
model_rebuild(OrganizationProgrammaticAccessGrantPropPermissionsPropRepository)
model_rebuild(OrganizationProgrammaticAccessGrantPropPermissionsPropOther)
model_rebuild(Project)
model_rebuild(OrgCustomProperty)
model_rebuild(CustomPropertyValue)
model_rebuild(OrgRepoCustomPropertyValues)
model_rebuild(CodeOfConductSimple)
model_rebuild(FullRepository)
model_rebuild(FullRepositoryPropPermissions)
model_rebuild(RepositoryRulesetBypassActor)
model_rebuild(RepositoryRulesetConditions)
model_rebuild(RepositoryRulesetConditionsPropRefName)
model_rebuild(RepositoryRulesetConditionsRepositoryNameTarget)
model_rebuild(RepositoryRulesetConditionsRepositoryNameTargetPropRepositoryName)
model_rebuild(RepositoryRulesetConditionsRepositoryIdTarget)
model_rebuild(RepositoryRulesetConditionsRepositoryIdTargetPropRepositoryId)
model_rebuild(OrgRulesetConditionsOneof0)
model_rebuild(OrgRulesetConditionsOneof1)
model_rebuild(RepositoryRuleCreation)
model_rebuild(RepositoryRuleUpdate)
model_rebuild(RepositoryRuleUpdatePropParameters)
model_rebuild(RepositoryRuleDeletion)
model_rebuild(RepositoryRuleRequiredLinearHistory)
model_rebuild(RepositoryRuleRequiredDeployments)
model_rebuild(RepositoryRuleRequiredDeploymentsPropParameters)
model_rebuild(RepositoryRuleRequiredSignatures)
model_rebuild(RepositoryRulePullRequest)
model_rebuild(RepositoryRulePullRequestPropParameters)
model_rebuild(RepositoryRuleParamsStatusCheckConfiguration)
model_rebuild(RepositoryRuleRequiredStatusChecks)
model_rebuild(RepositoryRuleRequiredStatusChecksPropParameters)
model_rebuild(RepositoryRuleNonFastForward)
model_rebuild(RepositoryRuleCommitMessagePattern)
model_rebuild(RepositoryRuleCommitMessagePatternPropParameters)
model_rebuild(RepositoryRuleCommitAuthorEmailPattern)
model_rebuild(RepositoryRuleCommitAuthorEmailPatternPropParameters)
model_rebuild(RepositoryRuleCommitterEmailPattern)
model_rebuild(RepositoryRuleCommitterEmailPatternPropParameters)
model_rebuild(RepositoryRuleBranchNamePattern)
model_rebuild(RepositoryRuleBranchNamePatternPropParameters)
model_rebuild(RepositoryRuleTagNamePattern)
model_rebuild(RepositoryRuleTagNamePatternPropParameters)
model_rebuild(RepositoryRuleParamsWorkflowFileReference)
model_rebuild(RepositoryRuleWorkflows)
model_rebuild(RepositoryRuleWorkflowsPropParameters)
model_rebuild(RepositoryRuleset)
model_rebuild(RepositoryRulesetPropLinks)
model_rebuild(RepositoryRulesetPropLinksPropSelf)
model_rebuild(RepositoryRulesetPropLinksPropHtml)
model_rebuild(RuleSuitesItems)
model_rebuild(RuleSuite)
model_rebuild(RuleSuitePropRuleEvaluationsItems)
model_rebuild(RuleSuitePropRuleEvaluationsItemsPropRuleSource)
model_rebuild(RepositoryAdvisoryVulnerability)
model_rebuild(RepositoryAdvisoryVulnerabilityPropPackage)
model_rebuild(RepositoryAdvisoryCredit)
model_rebuild(RepositoryAdvisory)
model_rebuild(RepositoryAdvisoryPropIdentifiersItems)
model_rebuild(RepositoryAdvisoryPropSubmission)
model_rebuild(RepositoryAdvisoryPropCvss)
model_rebuild(RepositoryAdvisoryPropCwesItems)
model_rebuild(RepositoryAdvisoryPropCreditsItems)
model_rebuild(ActionsBillingUsage)
model_rebuild(ActionsBillingUsagePropMinutesUsedBreakdown)
model_rebuild(PackagesBillingUsage)
model_rebuild(CombinedBillingUsage)
model_rebuild(TeamOrganization)
model_rebuild(TeamOrganizationPropPlan)
model_rebuild(TeamFull)
model_rebuild(TeamDiscussion)
model_rebuild(TeamDiscussionComment)
model_rebuild(Reaction)
model_rebuild(TeamMembership)
model_rebuild(TeamProject)
model_rebuild(TeamProjectPropPermissions)
model_rebuild(TeamRepository)
model_rebuild(TeamRepositoryPropPermissions)
model_rebuild(ProjectCard)
model_rebuild(ProjectColumn)
model_rebuild(ProjectCollaboratorPermission)
model_rebuild(RateLimit)
model_rebuild(RateLimitOverview)
model_rebuild(RateLimitOverviewPropResources)
model_rebuild(Artifact)
model_rebuild(ArtifactPropWorkflowRun)
model_rebuild(ActionsCacheList)
model_rebuild(ActionsCacheListPropActionsCachesItems)
model_rebuild(Job)
model_rebuild(JobPropStepsItems)
model_rebuild(OidcCustomSubRepo)
model_rebuild(ActionsSecret)
model_rebuild(ActionsVariable)
model_rebuild(ActionsRepositoryPermissions)
model_rebuild(ActionsWorkflowAccessToRepository)
model_rebuild(ReferencedWorkflow)
model_rebuild(PullRequestMinimal)
model_rebuild(PullRequestMinimalPropHead)
model_rebuild(PullRequestMinimalPropHeadPropRepo)
model_rebuild(PullRequestMinimalPropBase)
model_rebuild(PullRequestMinimalPropBasePropRepo)
model_rebuild(SimpleCommit)
model_rebuild(SimpleCommitPropAuthor)
model_rebuild(SimpleCommitPropCommitter)
model_rebuild(WorkflowRun)
model_rebuild(EnvironmentApprovals)
model_rebuild(EnvironmentApprovalsPropEnvironmentsItems)
model_rebuild(ReviewCustomGatesCommentRequired)
model_rebuild(ReviewCustomGatesStateRequired)
model_rebuild(PendingDeployment)
model_rebuild(PendingDeploymentPropEnvironment)
model_rebuild(PendingDeploymentPropReviewersItems)
model_rebuild(Deployment)
model_rebuild(DeploymentPropPayloadOneof0)
model_rebuild(WorkflowRunUsage)
model_rebuild(WorkflowRunUsagePropBillable)
model_rebuild(WorkflowRunUsagePropBillablePropUbuntu)
model_rebuild(WorkflowRunUsagePropBillablePropUbuntuPropJobRunsItems)
model_rebuild(WorkflowRunUsagePropBillablePropMacos)
model_rebuild(WorkflowRunUsagePropBillablePropMacosPropJobRunsItems)
model_rebuild(WorkflowRunUsagePropBillablePropWindows)
model_rebuild(WorkflowRunUsagePropBillablePropWindowsPropJobRunsItems)
model_rebuild(Workflow)
model_rebuild(WorkflowUsage)
model_rebuild(WorkflowUsagePropBillable)
model_rebuild(WorkflowUsagePropBillablePropUbuntu)
model_rebuild(WorkflowUsagePropBillablePropMacos)
model_rebuild(WorkflowUsagePropBillablePropWindows)
model_rebuild(Activity)
model_rebuild(Autolink)
model_rebuild(CheckAutomatedSecurityFixes)
model_rebuild(ProtectedBranchRequiredStatusCheck)
model_rebuild(ProtectedBranchRequiredStatusCheckPropChecksItems)
model_rebuild(ProtectedBranchAdminEnforced)
model_rebuild(ProtectedBranchPullRequestReview)
model_rebuild(ProtectedBranchPullRequestReviewPropDismissalRestrictions)
model_rebuild(ProtectedBranchPullRequestReviewPropBypassPullRequestAllowances)
model_rebuild(BranchRestrictionPolicy)
model_rebuild(BranchRestrictionPolicyPropUsersItems)
model_rebuild(BranchRestrictionPolicyPropTeamsItems)
model_rebuild(BranchRestrictionPolicyPropAppsItems)
model_rebuild(BranchRestrictionPolicyPropAppsItemsPropOwner)
model_rebuild(BranchRestrictionPolicyPropAppsItemsPropPermissions)
model_rebuild(BranchProtection)
model_rebuild(BranchProtectionPropRequiredLinearHistory)
model_rebuild(BranchProtectionPropAllowForcePushes)
model_rebuild(BranchProtectionPropAllowDeletions)
model_rebuild(BranchProtectionPropBlockCreations)
model_rebuild(BranchProtectionPropRequiredConversationResolution)
model_rebuild(BranchProtectionPropRequiredSignatures)
model_rebuild(BranchProtectionPropLockBranch)
model_rebuild(BranchProtectionPropAllowForkSyncing)
model_rebuild(ShortBranch)
model_rebuild(ShortBranchPropCommit)
model_rebuild(GitUser)
model_rebuild(Verification)
model_rebuild(DiffEntry)
model_rebuild(Commit)
model_rebuild(CommitPropCommit)
model_rebuild(CommitPropCommitPropTree)
model_rebuild(CommitPropParentsItems)
model_rebuild(CommitPropStats)
model_rebuild(BranchWithProtection)
model_rebuild(BranchWithProtectionPropLinks)
model_rebuild(StatusCheckPolicy)
model_rebuild(StatusCheckPolicyPropChecksItems)
model_rebuild(ProtectedBranch)
model_rebuild(ProtectedBranchPropRequiredPullRequestReviews)
model_rebuild(ProtectedBranchPropRequiredPullRequestReviewsPropDismissalRestrictions)
model_rebuild(
    ProtectedBranchPropRequiredPullRequestReviewsPropBypassPullRequestAllowances
)
model_rebuild(ProtectedBranchPropRequiredSignatures)
model_rebuild(ProtectedBranchPropEnforceAdmins)
model_rebuild(ProtectedBranchPropRequiredLinearHistory)
model_rebuild(ProtectedBranchPropAllowForcePushes)
model_rebuild(ProtectedBranchPropAllowDeletions)
model_rebuild(ProtectedBranchPropRequiredConversationResolution)
model_rebuild(ProtectedBranchPropBlockCreations)
model_rebuild(ProtectedBranchPropLockBranch)
model_rebuild(ProtectedBranchPropAllowForkSyncing)
model_rebuild(DeploymentSimple)
model_rebuild(CheckRun)
model_rebuild(CheckRunPropOutput)
model_rebuild(CheckRunPropCheckSuite)
model_rebuild(CheckAnnotation)
model_rebuild(CheckSuite)
model_rebuild(CheckSuitePreference)
model_rebuild(CheckSuitePreferencePropPreferences)
model_rebuild(CheckSuitePreferencePropPreferencesPropAutoTriggerChecksItems)
model_rebuild(CodeScanningAlertItems)
model_rebuild(CodeScanningAlertRule)
model_rebuild(CodeScanningAlert)
model_rebuild(CodeScanningAnalysis)
model_rebuild(CodeScanningAnalysisDeletion)
model_rebuild(CodeScanningCodeqlDatabase)
model_rebuild(CodeScanningDefaultSetup)
model_rebuild(CodeScanningDefaultSetupUpdate)
model_rebuild(CodeScanningDefaultSetupUpdateResponse)
model_rebuild(CodeScanningSarifsReceipt)
model_rebuild(CodeScanningSarifsStatus)
model_rebuild(CodeownersErrors)
model_rebuild(CodeownersErrorsPropErrorsItems)
model_rebuild(CodespacesPermissionsCheckForDevcontainer)
model_rebuild(RepoCodespacesSecret)
model_rebuild(Collaborator)
model_rebuild(CollaboratorPropPermissions)
model_rebuild(RepositoryInvitation)
model_rebuild(RepositoryCollaboratorPermission)
model_rebuild(CommitComment)
model_rebuild(BranchShort)
model_rebuild(BranchShortPropCommit)
model_rebuild(Link)
model_rebuild(AutoMerge)
model_rebuild(PullRequestSimple)
model_rebuild(PullRequestSimplePropLabelsItems)
model_rebuild(PullRequestSimplePropHead)
model_rebuild(PullRequestSimplePropBase)
model_rebuild(PullRequestSimplePropLinks)
model_rebuild(SimpleCommitStatus)
model_rebuild(CombinedCommitStatus)
model_rebuild(Status)
model_rebuild(CommunityHealthFile)
model_rebuild(CommunityProfile)
model_rebuild(CommunityProfilePropFiles)
model_rebuild(CommitComparison)
model_rebuild(ContentTree)
model_rebuild(ContentTreePropEntriesItems)
model_rebuild(ContentTreePropEntriesItemsPropLinks)
model_rebuild(ContentTreePropLinks)
model_rebuild(ContentDirectoryItems)
model_rebuild(ContentDirectoryItemsPropLinks)
model_rebuild(ContentFile)
model_rebuild(ContentFilePropLinks)
model_rebuild(ContentSymlink)
model_rebuild(ContentSymlinkPropLinks)
model_rebuild(ContentSubmodule)
model_rebuild(ContentSubmodulePropLinks)
model_rebuild(FileCommit)
model_rebuild(FileCommitPropContentPropLinks)
model_rebuild(FileCommitPropContent)
model_rebuild(FileCommitPropCommit)
model_rebuild(FileCommitPropCommitPropAuthor)
model_rebuild(FileCommitPropCommitPropCommitter)
model_rebuild(FileCommitPropCommitPropTree)
model_rebuild(FileCommitPropCommitPropParentsItems)
model_rebuild(FileCommitPropCommitPropVerification)
model_rebuild(Contributor)
model_rebuild(DependabotAlert)
model_rebuild(DependabotAlertPropDependency)
model_rebuild(DependabotSecret)
model_rebuild(DependencyGraphDiffItems)
model_rebuild(DependencyGraphDiffItemsPropVulnerabilitiesItems)
model_rebuild(DependencyGraphSpdxSbom)
model_rebuild(DependencyGraphSpdxSbomPropSbom)
model_rebuild(DependencyGraphSpdxSbomPropSbomPropCreationInfo)
model_rebuild(DependencyGraphSpdxSbomPropSbomPropPackagesItems)
model_rebuild(DependencyGraphSpdxSbomPropSbomPropPackagesItemsPropExternalRefsItems)
model_rebuild(Metadata)
model_rebuild(Dependency)
model_rebuild(Manifest)
model_rebuild(ManifestPropFile)
model_rebuild(ManifestPropResolved)
model_rebuild(Snapshot)
model_rebuild(SnapshotPropJob)
model_rebuild(SnapshotPropDetector)
model_rebuild(SnapshotPropManifests)
model_rebuild(DeploymentStatus)
model_rebuild(DeploymentBranchPolicySettings)
model_rebuild(Environment)
model_rebuild(EnvironmentPropProtectionRulesItemsAnyof0)
model_rebuild(EnvironmentPropProtectionRulesItemsAnyof1)
model_rebuild(EnvironmentPropProtectionRulesItemsAnyof1PropReviewersItems)
model_rebuild(EnvironmentPropProtectionRulesItemsAnyof2)
model_rebuild(DeploymentBranchPolicy)
model_rebuild(DeploymentBranchPolicyNamePatternWithType)
model_rebuild(DeploymentBranchPolicyNamePattern)
model_rebuild(CustomDeploymentRuleApp)
model_rebuild(DeploymentProtectionRule)
model_rebuild(ShortBlob)
model_rebuild(Blob)
model_rebuild(GitCommit)
model_rebuild(GitCommitPropAuthor)
model_rebuild(GitCommitPropCommitter)
model_rebuild(GitCommitPropTree)
model_rebuild(GitCommitPropParentsItems)
model_rebuild(GitCommitPropVerification)
model_rebuild(GitRef)
model_rebuild(GitRefPropObject)
model_rebuild(GitTag)
model_rebuild(GitTagPropTagger)
model_rebuild(GitTagPropObject)
model_rebuild(GitTree)
model_rebuild(GitTreePropTreeItems)
model_rebuild(HookResponse)
model_rebuild(Hook)
model_rebuild(HookPropConfig)
model_rebuild(Import)
model_rebuild(ImportPropProjectChoicesItems)
model_rebuild(PorterAuthor)
model_rebuild(PorterLargeFile)
model_rebuild(IssueEventLabel)
model_rebuild(IssueEventDismissedReview)
model_rebuild(IssueEventMilestone)
model_rebuild(IssueEventProjectCard)
model_rebuild(IssueEventRename)
model_rebuild(IssueEvent)
model_rebuild(LabeledIssueEvent)
model_rebuild(LabeledIssueEventPropLabel)
model_rebuild(UnlabeledIssueEvent)
model_rebuild(UnlabeledIssueEventPropLabel)
model_rebuild(AssignedIssueEvent)
model_rebuild(UnassignedIssueEvent)
model_rebuild(MilestonedIssueEvent)
model_rebuild(MilestonedIssueEventPropMilestone)
model_rebuild(DemilestonedIssueEvent)
model_rebuild(DemilestonedIssueEventPropMilestone)
model_rebuild(RenamedIssueEvent)
model_rebuild(RenamedIssueEventPropRename)
model_rebuild(ReviewRequestedIssueEvent)
model_rebuild(ReviewRequestRemovedIssueEvent)
model_rebuild(ReviewDismissedIssueEvent)
model_rebuild(ReviewDismissedIssueEventPropDismissedReview)
model_rebuild(LockedIssueEvent)
model_rebuild(AddedToProjectIssueEvent)
model_rebuild(AddedToProjectIssueEventPropProjectCard)
model_rebuild(MovedColumnInProjectIssueEvent)
model_rebuild(MovedColumnInProjectIssueEventPropProjectCard)
model_rebuild(RemovedFromProjectIssueEvent)
model_rebuild(RemovedFromProjectIssueEventPropProjectCard)
model_rebuild(ConvertedNoteToIssueIssueEvent)
model_rebuild(ConvertedNoteToIssueIssueEventPropProjectCard)
model_rebuild(Label)
model_rebuild(TimelineCommentEvent)
model_rebuild(TimelineCrossReferencedEvent)
model_rebuild(TimelineCrossReferencedEventPropSource)
model_rebuild(TimelineCommittedEvent)
model_rebuild(TimelineCommittedEventPropAuthor)
model_rebuild(TimelineCommittedEventPropCommitter)
model_rebuild(TimelineCommittedEventPropTree)
model_rebuild(TimelineCommittedEventPropParentsItems)
model_rebuild(TimelineCommittedEventPropVerification)
model_rebuild(TimelineReviewedEvent)
model_rebuild(TimelineReviewedEventPropLinks)
model_rebuild(TimelineReviewedEventPropLinksPropHtml)
model_rebuild(TimelineReviewedEventPropLinksPropPullRequest)
model_rebuild(PullRequestReviewComment)
model_rebuild(PullRequestReviewCommentPropLinks)
model_rebuild(PullRequestReviewCommentPropLinksPropSelf)
model_rebuild(PullRequestReviewCommentPropLinksPropHtml)
model_rebuild(PullRequestReviewCommentPropLinksPropPullRequest)
model_rebuild(TimelineLineCommentedEvent)
model_rebuild(TimelineCommitCommentedEvent)
model_rebuild(TimelineAssignedIssueEvent)
model_rebuild(TimelineUnassignedIssueEvent)
model_rebuild(StateChangeIssueEvent)
model_rebuild(DeployKey)
model_rebuild(Language)
model_rebuild(LicenseContent)
model_rebuild(LicenseContentPropLinks)
model_rebuild(MergedUpstream)
model_rebuild(PagesSourceHash)
model_rebuild(PagesHttpsCertificate)
model_rebuild(Page)
model_rebuild(PageBuild)
model_rebuild(PageBuildPropError)
model_rebuild(PageBuildStatus)
model_rebuild(PageDeployment)
model_rebuild(PagesHealthCheck)
model_rebuild(PagesHealthCheckPropDomain)
model_rebuild(PagesHealthCheckPropAltDomain)
model_rebuild(PullRequest)
model_rebuild(PullRequestPropLabelsItems)
model_rebuild(PullRequestPropHead)
model_rebuild(PullRequestPropHeadPropRepoPropOwner)
model_rebuild(PullRequestPropHeadPropRepoPropPermissions)
model_rebuild(PullRequestPropHeadPropRepoPropLicense)
model_rebuild(PullRequestPropHeadPropRepo)
model_rebuild(PullRequestPropHeadPropUser)
model_rebuild(PullRequestPropBase)
model_rebuild(PullRequestPropBasePropRepo)
model_rebuild(PullRequestPropBasePropRepoPropOwner)
model_rebuild(PullRequestPropBasePropRepoPropPermissions)
model_rebuild(PullRequestPropBasePropUser)
model_rebuild(PullRequestPropLinks)
model_rebuild(PullRequestMergeResult)
model_rebuild(PullRequestReviewRequest)
model_rebuild(PullRequestReview)
model_rebuild(PullRequestReviewPropLinks)
model_rebuild(PullRequestReviewPropLinksPropHtml)
model_rebuild(PullRequestReviewPropLinksPropPullRequest)
model_rebuild(ReviewComment)
model_rebuild(ReviewCommentPropLinks)
model_rebuild(ReleaseAsset)
model_rebuild(Release)
model_rebuild(ReleaseNotesContent)
model_rebuild(RepositoryRuleRulesetInfo)
model_rebuild(RepositoryRuleDetailedOneof0)
model_rebuild(RepositoryRuleDetailedOneof1)
model_rebuild(RepositoryRuleDetailedOneof2)
model_rebuild(RepositoryRuleDetailedOneof3)
model_rebuild(RepositoryRuleDetailedOneof4)
model_rebuild(RepositoryRuleDetailedOneof5)
model_rebuild(RepositoryRuleDetailedOneof6)
model_rebuild(RepositoryRuleDetailedOneof7)
model_rebuild(RepositoryRuleDetailedOneof8)
model_rebuild(RepositoryRuleDetailedOneof9)
model_rebuild(RepositoryRuleDetailedOneof10)
model_rebuild(RepositoryRuleDetailedOneof11)
model_rebuild(RepositoryRuleDetailedOneof12)
model_rebuild(RepositoryRuleDetailedOneof13)
model_rebuild(RepositoryRuleDetailedOneof14)
model_rebuild(SecretScanningAlert)
model_rebuild(SecretScanningLocationCommit)
model_rebuild(SecretScanningLocationIssueTitle)
model_rebuild(SecretScanningLocationIssueBody)
model_rebuild(SecretScanningLocationIssueComment)
model_rebuild(SecretScanningLocationDiscussionTitle)
model_rebuild(SecretScanningLocationDiscussionBody)
model_rebuild(SecretScanningLocationDiscussionComment)
model_rebuild(SecretScanningLocationPullRequestTitle)
model_rebuild(SecretScanningLocationPullRequestBody)
model_rebuild(SecretScanningLocationPullRequestComment)
model_rebuild(SecretScanningLocationPullRequestReview)
model_rebuild(SecretScanningLocationPullRequestReviewComment)
model_rebuild(SecretScanningLocation)
model_rebuild(RepositoryAdvisoryCreate)
model_rebuild(RepositoryAdvisoryCreatePropVulnerabilitiesItems)
model_rebuild(RepositoryAdvisoryCreatePropVulnerabilitiesItemsPropPackage)
model_rebuild(RepositoryAdvisoryCreatePropCreditsItems)
model_rebuild(PrivateVulnerabilityReportCreate)
model_rebuild(PrivateVulnerabilityReportCreatePropVulnerabilitiesItems)
model_rebuild(PrivateVulnerabilityReportCreatePropVulnerabilitiesItemsPropPackage)
model_rebuild(RepositoryAdvisoryUpdate)
model_rebuild(RepositoryAdvisoryUpdatePropVulnerabilitiesItems)
model_rebuild(RepositoryAdvisoryUpdatePropVulnerabilitiesItemsPropPackage)
model_rebuild(RepositoryAdvisoryUpdatePropCreditsItems)
model_rebuild(Stargazer)
model_rebuild(CommitActivity)
model_rebuild(ContributorActivity)
model_rebuild(ContributorActivityPropWeeksItems)
model_rebuild(ParticipationStats)
model_rebuild(RepositorySubscription)
model_rebuild(Tag)
model_rebuild(TagPropCommit)
model_rebuild(TagProtection)
model_rebuild(Topic)
model_rebuild(Traffic)
model_rebuild(CloneTraffic)
model_rebuild(ContentTraffic)
model_rebuild(ReferrerTraffic)
model_rebuild(ViewTraffic)
model_rebuild(SearchResultTextMatchesItems)
model_rebuild(SearchResultTextMatchesItemsPropMatchesItems)
model_rebuild(CodeSearchResultItem)
model_rebuild(CommitSearchResultItem)
model_rebuild(CommitSearchResultItemPropCommit)
model_rebuild(CommitSearchResultItemPropCommitPropAuthor)
model_rebuild(CommitSearchResultItemPropCommitPropTree)
model_rebuild(CommitSearchResultItemPropParentsItems)
model_rebuild(IssueSearchResultItem)
model_rebuild(IssueSearchResultItemPropLabelsItems)
model_rebuild(IssueSearchResultItemPropPullRequest)
model_rebuild(LabelSearchResultItem)
model_rebuild(RepoSearchResultItem)
model_rebuild(RepoSearchResultItemPropPermissions)
model_rebuild(TopicSearchResultItem)
model_rebuild(TopicSearchResultItemPropRelatedItems)
model_rebuild(TopicSearchResultItemPropRelatedItemsPropTopicRelation)
model_rebuild(TopicSearchResultItemPropAliasesItems)
model_rebuild(TopicSearchResultItemPropAliasesItemsPropTopicRelation)
model_rebuild(UserSearchResultItem)
model_rebuild(PrivateUser)
model_rebuild(PrivateUserPropPlan)
model_rebuild(CodespacesSecret)
model_rebuild(CodespacesUserPublicKey)
model_rebuild(CodespaceExportDetails)
model_rebuild(CodespaceWithFullRepository)
model_rebuild(CodespaceWithFullRepositoryPropGitStatus)
model_rebuild(CodespaceWithFullRepositoryPropRuntimeConstraints)
model_rebuild(Email)
model_rebuild(GpgKey)
model_rebuild(GpgKeyPropEmailsItems)
model_rebuild(GpgKeyPropSubkeysItems)
model_rebuild(GpgKeyPropSubkeysItemsPropEmailsItems)
model_rebuild(Key)
model_rebuild(MarketplaceAccount)
model_rebuild(UserMarketplacePurchase)
model_rebuild(SocialAccount)
model_rebuild(SshSigningKey)
model_rebuild(StarredRepository)
model_rebuild(Hovercard)
model_rebuild(HovercardPropContextsItems)
model_rebuild(KeySimple)
model_rebuild(EnterpriseWebhooks)
model_rebuild(SimpleInstallation)
model_rebuild(OrganizationSimpleWebhooks)
model_rebuild(RepositoryWebhooks)
model_rebuild(RepositoryWebhooksPropPermissions)
model_rebuild(RepositoryWebhooksPropCustomProperties)
model_rebuild(RepositoryWebhooksPropTemplateRepositoryPropOwner)
model_rebuild(RepositoryWebhooksPropTemplateRepositoryPropPermissions)
model_rebuild(RepositoryWebhooksPropTemplateRepository)
model_rebuild(SimpleUserWebhooks)
model_rebuild(SimpleCheckSuite)
model_rebuild(CheckRunWithSimpleCheckSuite)
model_rebuild(CheckRunWithSimpleCheckSuitePropOutput)
model_rebuild(Discussion)
model_rebuild(DiscussionPropAnswerChosenBy)
model_rebuild(DiscussionPropCategory)
model_rebuild(DiscussionPropReactions)
model_rebuild(DiscussionPropUser)
model_rebuild(MergeGroup)
model_rebuild(PersonalAccessTokenRequest)
model_rebuild(PersonalAccessTokenRequestPropPermissionsAdded)
model_rebuild(PersonalAccessTokenRequestPropPermissionsAddedPropOrganization)
model_rebuild(PersonalAccessTokenRequestPropPermissionsAddedPropRepository)
model_rebuild(PersonalAccessTokenRequestPropPermissionsAddedPropOther)
model_rebuild(PersonalAccessTokenRequestPropPermissionsUpgraded)
model_rebuild(PersonalAccessTokenRequestPropPermissionsUpgradedPropOrganization)
model_rebuild(PersonalAccessTokenRequestPropPermissionsUpgradedPropRepository)
model_rebuild(PersonalAccessTokenRequestPropPermissionsUpgradedPropOther)
model_rebuild(PersonalAccessTokenRequestPropPermissionsResult)
model_rebuild(PersonalAccessTokenRequestPropPermissionsResultPropOrganization)
model_rebuild(PersonalAccessTokenRequestPropPermissionsResultPropRepository)
model_rebuild(PersonalAccessTokenRequestPropPermissionsResultPropOther)
model_rebuild(PersonalAccessTokenRequestPropRepositoriesItems)
model_rebuild(ProjectsV2)
model_rebuild(ProjectsV2Item)
model_rebuild(SecretScanningAlertWebhook)
model_rebuild(WebhookBranchProtectionConfigurationDisabled)
model_rebuild(WebhookBranchProtectionConfigurationEnabled)
model_rebuild(WebhookBranchProtectionRuleCreated)
model_rebuild(WebhookBranchProtectionRuleCreatedPropRule)
model_rebuild(WebhookBranchProtectionRuleDeleted)
model_rebuild(WebhookBranchProtectionRuleDeletedPropRule)
model_rebuild(WebhookBranchProtectionRuleEdited)
model_rebuild(WebhookBranchProtectionRuleEditedPropChanges)
model_rebuild(WebhookBranchProtectionRuleEditedPropChangesPropAdminEnforced)
model_rebuild(WebhookBranchProtectionRuleEditedPropChangesPropAuthorizedActorNames)
model_rebuild(WebhookBranchProtectionRuleEditedPropChangesPropAuthorizedActorsOnly)
model_rebuild(
    WebhookBranchProtectionRuleEditedPropChangesPropAuthorizedDismissalActorsOnly
)
model_rebuild(
    WebhookBranchProtectionRuleEditedPropChangesPropLinearHistoryRequirementEnforcementLevel
)
model_rebuild(WebhookBranchProtectionRuleEditedPropChangesPropRequiredStatusChecks)
model_rebuild(
    WebhookBranchProtectionRuleEditedPropChangesPropRequiredStatusChecksEnforcementLevel
)
model_rebuild(WebhookBranchProtectionRuleEditedPropRule)
model_rebuild(WebhookCheckRunCompleted)
model_rebuild(WebhookCheckRunCompletedFormEncoded)
model_rebuild(WebhookCheckRunCreated)
model_rebuild(WebhookCheckRunCreatedFormEncoded)
model_rebuild(WebhookCheckRunRequestedAction)
model_rebuild(WebhookCheckRunRequestedActionPropRequestedAction)
model_rebuild(WebhookCheckRunRequestedActionFormEncoded)
model_rebuild(WebhookCheckRunRerequested)
model_rebuild(WebhookCheckRunRerequestedFormEncoded)
model_rebuild(WebhookCheckSuiteCompleted)
model_rebuild(WebhookCheckSuiteCompletedPropCheckSuite)
model_rebuild(WebhookCheckSuiteCompletedPropCheckSuitePropApp)
model_rebuild(WebhookCheckSuiteCompletedPropCheckSuitePropAppPropOwner)
model_rebuild(WebhookCheckSuiteCompletedPropCheckSuitePropAppPropPermissions)
model_rebuild(WebhookCheckSuiteCompletedPropCheckSuitePropHeadCommit)
model_rebuild(WebhookCheckSuiteCompletedPropCheckSuitePropHeadCommitPropAuthor)
model_rebuild(WebhookCheckSuiteCompletedPropCheckSuitePropHeadCommitPropCommitter)
model_rebuild(WebhookCheckSuiteCompletedPropCheckSuitePropPullRequestsItems)
model_rebuild(WebhookCheckSuiteCompletedPropCheckSuitePropPullRequestsItemsPropBase)
model_rebuild(
    WebhookCheckSuiteCompletedPropCheckSuitePropPullRequestsItemsPropBasePropRepo
)
model_rebuild(WebhookCheckSuiteCompletedPropCheckSuitePropPullRequestsItemsPropHead)
model_rebuild(
    WebhookCheckSuiteCompletedPropCheckSuitePropPullRequestsItemsPropHeadPropRepo
)
model_rebuild(WebhookCheckSuiteRequested)
model_rebuild(WebhookCheckSuiteRequestedPropCheckSuite)
model_rebuild(WebhookCheckSuiteRequestedPropCheckSuitePropApp)
model_rebuild(WebhookCheckSuiteRequestedPropCheckSuitePropAppPropOwner)
model_rebuild(WebhookCheckSuiteRequestedPropCheckSuitePropAppPropPermissions)
model_rebuild(WebhookCheckSuiteRequestedPropCheckSuitePropHeadCommit)
model_rebuild(WebhookCheckSuiteRequestedPropCheckSuitePropHeadCommitPropAuthor)
model_rebuild(WebhookCheckSuiteRequestedPropCheckSuitePropHeadCommitPropCommitter)
model_rebuild(WebhookCheckSuiteRequestedPropCheckSuitePropPullRequestsItems)
model_rebuild(WebhookCheckSuiteRequestedPropCheckSuitePropPullRequestsItemsPropBase)
model_rebuild(
    WebhookCheckSuiteRequestedPropCheckSuitePropPullRequestsItemsPropBasePropRepo
)
model_rebuild(WebhookCheckSuiteRequestedPropCheckSuitePropPullRequestsItemsPropHead)
model_rebuild(
    WebhookCheckSuiteRequestedPropCheckSuitePropPullRequestsItemsPropHeadPropRepo
)
model_rebuild(WebhookCheckSuiteRerequested)
model_rebuild(WebhookCheckSuiteRerequestedPropCheckSuite)
model_rebuild(WebhookCheckSuiteRerequestedPropCheckSuitePropApp)
model_rebuild(WebhookCheckSuiteRerequestedPropCheckSuitePropAppPropOwner)
model_rebuild(WebhookCheckSuiteRerequestedPropCheckSuitePropAppPropPermissions)
model_rebuild(WebhookCheckSuiteRerequestedPropCheckSuitePropHeadCommit)
model_rebuild(WebhookCheckSuiteRerequestedPropCheckSuitePropHeadCommitPropAuthor)
model_rebuild(WebhookCheckSuiteRerequestedPropCheckSuitePropHeadCommitPropCommitter)
model_rebuild(WebhookCheckSuiteRerequestedPropCheckSuitePropPullRequestsItems)
model_rebuild(WebhookCheckSuiteRerequestedPropCheckSuitePropPullRequestsItemsPropBase)
model_rebuild(
    WebhookCheckSuiteRerequestedPropCheckSuitePropPullRequestsItemsPropBasePropRepo
)
model_rebuild(WebhookCheckSuiteRerequestedPropCheckSuitePropPullRequestsItemsPropHead)
model_rebuild(
    WebhookCheckSuiteRerequestedPropCheckSuitePropPullRequestsItemsPropHeadPropRepo
)
model_rebuild(WebhookCodeScanningAlertAppearedInBranch)
model_rebuild(WebhookCodeScanningAlertAppearedInBranchPropAlert)
model_rebuild(WebhookCodeScanningAlertAppearedInBranchPropAlertPropDismissedBy)
model_rebuild(
    WebhookCodeScanningAlertAppearedInBranchPropAlertPropMostRecentInstancePropLocation
)
model_rebuild(
    WebhookCodeScanningAlertAppearedInBranchPropAlertPropMostRecentInstancePropMessage
)
model_rebuild(WebhookCodeScanningAlertAppearedInBranchPropAlertPropMostRecentInstance)
model_rebuild(WebhookCodeScanningAlertAppearedInBranchPropAlertPropRule)
model_rebuild(WebhookCodeScanningAlertAppearedInBranchPropAlertPropTool)
model_rebuild(WebhookCodeScanningAlertClosedByUser)
model_rebuild(WebhookCodeScanningAlertClosedByUserPropAlert)
model_rebuild(WebhookCodeScanningAlertClosedByUserPropAlertPropDismissedBy)
model_rebuild(
    WebhookCodeScanningAlertClosedByUserPropAlertPropMostRecentInstancePropLocation
)
model_rebuild(
    WebhookCodeScanningAlertClosedByUserPropAlertPropMostRecentInstancePropMessage
)
model_rebuild(WebhookCodeScanningAlertClosedByUserPropAlertPropMostRecentInstance)
model_rebuild(WebhookCodeScanningAlertClosedByUserPropAlertPropRule)
model_rebuild(WebhookCodeScanningAlertClosedByUserPropAlertPropTool)
model_rebuild(WebhookCodeScanningAlertCreated)
model_rebuild(WebhookCodeScanningAlertCreatedPropAlert)
model_rebuild(
    WebhookCodeScanningAlertCreatedPropAlertPropMostRecentInstancePropLocation
)
model_rebuild(WebhookCodeScanningAlertCreatedPropAlertPropMostRecentInstancePropMessage)
model_rebuild(WebhookCodeScanningAlertCreatedPropAlertPropMostRecentInstance)
model_rebuild(WebhookCodeScanningAlertCreatedPropAlertPropRule)
model_rebuild(WebhookCodeScanningAlertCreatedPropAlertPropTool)
model_rebuild(WebhookCodeScanningAlertFixed)
model_rebuild(WebhookCodeScanningAlertFixedPropAlert)
model_rebuild(WebhookCodeScanningAlertFixedPropAlertPropDismissedBy)
model_rebuild(WebhookCodeScanningAlertFixedPropAlertPropMostRecentInstancePropLocation)
model_rebuild(WebhookCodeScanningAlertFixedPropAlertPropMostRecentInstancePropMessage)
model_rebuild(WebhookCodeScanningAlertFixedPropAlertPropMostRecentInstance)
model_rebuild(WebhookCodeScanningAlertFixedPropAlertPropRule)
model_rebuild(WebhookCodeScanningAlertFixedPropAlertPropTool)
model_rebuild(WebhookCodeScanningAlertReopened)
model_rebuild(WebhookCodeScanningAlertReopenedPropAlertPropDismissedBy)
model_rebuild(
    WebhookCodeScanningAlertReopenedPropAlertPropMostRecentInstancePropLocation
)
model_rebuild(
    WebhookCodeScanningAlertReopenedPropAlertPropMostRecentInstancePropMessage
)
model_rebuild(WebhookCodeScanningAlertReopenedPropAlertPropMostRecentInstance)
model_rebuild(WebhookCodeScanningAlertReopenedPropAlertPropRule)
model_rebuild(WebhookCodeScanningAlertReopenedPropAlertPropTool)
model_rebuild(WebhookCodeScanningAlertReopenedPropAlert)
model_rebuild(WebhookCodeScanningAlertReopenedByUser)
model_rebuild(WebhookCodeScanningAlertReopenedByUserPropAlert)
model_rebuild(
    WebhookCodeScanningAlertReopenedByUserPropAlertPropMostRecentInstancePropLocation
)
model_rebuild(
    WebhookCodeScanningAlertReopenedByUserPropAlertPropMostRecentInstancePropMessage
)
model_rebuild(WebhookCodeScanningAlertReopenedByUserPropAlertPropMostRecentInstance)
model_rebuild(WebhookCodeScanningAlertReopenedByUserPropAlertPropRule)
model_rebuild(WebhookCodeScanningAlertReopenedByUserPropAlertPropTool)
model_rebuild(WebhookCommitCommentCreated)
model_rebuild(WebhookCommitCommentCreatedPropComment)
model_rebuild(WebhookCommitCommentCreatedPropCommentPropReactions)
model_rebuild(WebhookCommitCommentCreatedPropCommentPropUser)
model_rebuild(WebhookCreate)
model_rebuild(WebhookCustomPropertyCreated)
model_rebuild(WebhookCustomPropertyDeleted)
model_rebuild(WebhookCustomPropertyDeletedPropDefinition)
model_rebuild(WebhookCustomPropertyUpdated)
model_rebuild(WebhookCustomPropertyValuesUpdated)
model_rebuild(WebhookDelete)
model_rebuild(WebhookDependabotAlertAutoDismissed)
model_rebuild(WebhookDependabotAlertAutoReopened)
model_rebuild(WebhookDependabotAlertCreated)
model_rebuild(WebhookDependabotAlertDismissed)
model_rebuild(WebhookDependabotAlertFixed)
model_rebuild(WebhookDependabotAlertReintroduced)
model_rebuild(WebhookDependabotAlertReopened)
model_rebuild(WebhookDeployKeyCreated)
model_rebuild(WebhookDeployKeyCreatedPropKey)
model_rebuild(WebhookDeployKeyDeleted)
model_rebuild(WebhookDeployKeyDeletedPropKey)
model_rebuild(WebhookDeploymentCreated)
model_rebuild(WebhookDeploymentCreatedPropDeployment)
model_rebuild(WebhookDeploymentCreatedPropDeploymentPropCreator)
model_rebuild(WebhookDeploymentCreatedPropDeploymentPropPayloadOneof0)
model_rebuild(WebhookDeploymentCreatedPropDeploymentPropPerformedViaGithubAppPropOwner)
model_rebuild(
    WebhookDeploymentCreatedPropDeploymentPropPerformedViaGithubAppPropPermissions
)
model_rebuild(WebhookDeploymentCreatedPropDeploymentPropPerformedViaGithubApp)
model_rebuild(WebhookDeploymentCreatedPropWorkflow)
model_rebuild(WebhookDeploymentCreatedPropWorkflowRunPropActor)
model_rebuild(WebhookDeploymentCreatedPropWorkflowRunPropHeadRepository)
model_rebuild(WebhookDeploymentCreatedPropWorkflowRunPropHeadRepositoryPropOwner)
model_rebuild(WebhookDeploymentCreatedPropWorkflowRunPropPullRequestsItems)
model_rebuild(WebhookDeploymentCreatedPropWorkflowRunPropPullRequestsItemsPropBase)
model_rebuild(
    WebhookDeploymentCreatedPropWorkflowRunPropPullRequestsItemsPropBasePropRepo
)
model_rebuild(WebhookDeploymentCreatedPropWorkflowRunPropPullRequestsItemsPropHead)
model_rebuild(
    WebhookDeploymentCreatedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepo
)
model_rebuild(WebhookDeploymentCreatedPropWorkflowRunPropReferencedWorkflowsItems)
model_rebuild(WebhookDeploymentCreatedPropWorkflowRunPropRepository)
model_rebuild(WebhookDeploymentCreatedPropWorkflowRunPropRepositoryPropOwner)
model_rebuild(WebhookDeploymentCreatedPropWorkflowRunPropTriggeringActor)
model_rebuild(WebhookDeploymentCreatedPropWorkflowRun)
model_rebuild(WebhookDeploymentProtectionRuleRequested)
model_rebuild(WebhookDeploymentReviewApproved)
model_rebuild(WebhookDeploymentReviewApprovedPropApprover)
model_rebuild(WebhookDeploymentReviewApprovedPropReviewersItems)
model_rebuild(WebhookDeploymentReviewApprovedPropReviewersItemsPropReviewer)
model_rebuild(WebhookDeploymentReviewApprovedPropWorkflowJobRun)
model_rebuild(WebhookDeploymentReviewApprovedPropWorkflowJobRunsItems)
model_rebuild(WebhookDeploymentReviewApprovedPropWorkflowRunPropActor)
model_rebuild(WebhookDeploymentReviewApprovedPropWorkflowRunPropHeadCommit)
model_rebuild(WebhookDeploymentReviewApprovedPropWorkflowRunPropHeadRepository)
model_rebuild(WebhookDeploymentReviewApprovedPropWorkflowRunPropHeadRepositoryPropOwner)
model_rebuild(WebhookDeploymentReviewApprovedPropWorkflowRunPropPullRequestsItems)
model_rebuild(
    WebhookDeploymentReviewApprovedPropWorkflowRunPropPullRequestsItemsPropBase
)
model_rebuild(
    WebhookDeploymentReviewApprovedPropWorkflowRunPropPullRequestsItemsPropBasePropRepo
)
model_rebuild(
    WebhookDeploymentReviewApprovedPropWorkflowRunPropPullRequestsItemsPropHead
)
model_rebuild(
    WebhookDeploymentReviewApprovedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepo
)
model_rebuild(
    WebhookDeploymentReviewApprovedPropWorkflowRunPropReferencedWorkflowsItems
)
model_rebuild(WebhookDeploymentReviewApprovedPropWorkflowRunPropRepository)
model_rebuild(WebhookDeploymentReviewApprovedPropWorkflowRunPropRepositoryPropOwner)
model_rebuild(WebhookDeploymentReviewApprovedPropWorkflowRunPropTriggeringActor)
model_rebuild(WebhookDeploymentReviewApprovedPropWorkflowRun)
model_rebuild(WebhookDeploymentReviewRejected)
model_rebuild(WebhookDeploymentReviewRejectedPropApprover)
model_rebuild(WebhookDeploymentReviewRejectedPropReviewersItems)
model_rebuild(WebhookDeploymentReviewRejectedPropReviewersItemsPropReviewer)
model_rebuild(WebhookDeploymentReviewRejectedPropWorkflowJobRun)
model_rebuild(WebhookDeploymentReviewRejectedPropWorkflowJobRunsItems)
model_rebuild(WebhookDeploymentReviewRejectedPropWorkflowRunPropActor)
model_rebuild(WebhookDeploymentReviewRejectedPropWorkflowRunPropHeadCommit)
model_rebuild(WebhookDeploymentReviewRejectedPropWorkflowRunPropHeadRepository)
model_rebuild(WebhookDeploymentReviewRejectedPropWorkflowRunPropHeadRepositoryPropOwner)
model_rebuild(WebhookDeploymentReviewRejectedPropWorkflowRunPropPullRequestsItems)
model_rebuild(
    WebhookDeploymentReviewRejectedPropWorkflowRunPropPullRequestsItemsPropBase
)
model_rebuild(
    WebhookDeploymentReviewRejectedPropWorkflowRunPropPullRequestsItemsPropBasePropRepo
)
model_rebuild(
    WebhookDeploymentReviewRejectedPropWorkflowRunPropPullRequestsItemsPropHead
)
model_rebuild(
    WebhookDeploymentReviewRejectedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepo
)
model_rebuild(
    WebhookDeploymentReviewRejectedPropWorkflowRunPropReferencedWorkflowsItems
)
model_rebuild(WebhookDeploymentReviewRejectedPropWorkflowRunPropRepository)
model_rebuild(WebhookDeploymentReviewRejectedPropWorkflowRunPropRepositoryPropOwner)
model_rebuild(WebhookDeploymentReviewRejectedPropWorkflowRunPropTriggeringActor)
model_rebuild(WebhookDeploymentReviewRejectedPropWorkflowRun)
model_rebuild(WebhookDeploymentReviewRequested)
model_rebuild(WebhookDeploymentReviewRequestedPropRequestor)
model_rebuild(WebhookDeploymentReviewRequestedPropReviewersItems)
model_rebuild(WebhookDeploymentReviewRequestedPropReviewersItemsPropReviewer)
model_rebuild(WebhookDeploymentReviewRequestedPropWorkflowJobRun)
model_rebuild(WebhookDeploymentReviewRequestedPropWorkflowRunPropActor)
model_rebuild(WebhookDeploymentReviewRequestedPropWorkflowRunPropHeadCommit)
model_rebuild(WebhookDeploymentReviewRequestedPropWorkflowRunPropHeadRepository)
model_rebuild(
    WebhookDeploymentReviewRequestedPropWorkflowRunPropHeadRepositoryPropOwner
)
model_rebuild(WebhookDeploymentReviewRequestedPropWorkflowRunPropPullRequestsItems)
model_rebuild(
    WebhookDeploymentReviewRequestedPropWorkflowRunPropPullRequestsItemsPropBase
)
model_rebuild(
    WebhookDeploymentReviewRequestedPropWorkflowRunPropPullRequestsItemsPropBasePropRepo
)
model_rebuild(
    WebhookDeploymentReviewRequestedPropWorkflowRunPropPullRequestsItemsPropHead
)
model_rebuild(
    WebhookDeploymentReviewRequestedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepo
)
model_rebuild(
    WebhookDeploymentReviewRequestedPropWorkflowRunPropReferencedWorkflowsItems
)
model_rebuild(WebhookDeploymentReviewRequestedPropWorkflowRunPropRepository)
model_rebuild(WebhookDeploymentReviewRequestedPropWorkflowRunPropRepositoryPropOwner)
model_rebuild(WebhookDeploymentReviewRequestedPropWorkflowRunPropTriggeringActor)
model_rebuild(WebhookDeploymentReviewRequestedPropWorkflowRun)
model_rebuild(WebhookDeploymentStatusCreated)
model_rebuild(WebhookDeploymentStatusCreatedPropCheckRun)
model_rebuild(WebhookDeploymentStatusCreatedPropDeployment)
model_rebuild(WebhookDeploymentStatusCreatedPropDeploymentPropCreator)
model_rebuild(WebhookDeploymentStatusCreatedPropDeploymentPropPayloadOneof1)
model_rebuild(
    WebhookDeploymentStatusCreatedPropDeploymentPropPerformedViaGithubAppPropOwner
)
model_rebuild(
    WebhookDeploymentStatusCreatedPropDeploymentPropPerformedViaGithubAppPropPermissions
)
model_rebuild(WebhookDeploymentStatusCreatedPropDeploymentPropPerformedViaGithubApp)
model_rebuild(WebhookDeploymentStatusCreatedPropDeploymentStatus)
model_rebuild(WebhookDeploymentStatusCreatedPropDeploymentStatusPropCreator)
model_rebuild(
    WebhookDeploymentStatusCreatedPropDeploymentStatusPropPerformedViaGithubAppPropOwner
)
model_rebuild(
    WebhookDeploymentStatusCreatedPropDeploymentStatusPropPerformedViaGithubAppPropPermissions
)
model_rebuild(
    WebhookDeploymentStatusCreatedPropDeploymentStatusPropPerformedViaGithubApp
)
model_rebuild(WebhookDeploymentStatusCreatedPropWorkflow)
model_rebuild(WebhookDeploymentStatusCreatedPropWorkflowRunPropActor)
model_rebuild(WebhookDeploymentStatusCreatedPropWorkflowRunPropHeadRepository)
model_rebuild(WebhookDeploymentStatusCreatedPropWorkflowRunPropHeadRepositoryPropOwner)
model_rebuild(WebhookDeploymentStatusCreatedPropWorkflowRunPropPullRequestsItems)
model_rebuild(
    WebhookDeploymentStatusCreatedPropWorkflowRunPropPullRequestsItemsPropBase
)
model_rebuild(
    WebhookDeploymentStatusCreatedPropWorkflowRunPropPullRequestsItemsPropBasePropRepo
)
model_rebuild(
    WebhookDeploymentStatusCreatedPropWorkflowRunPropPullRequestsItemsPropHead
)
model_rebuild(
    WebhookDeploymentStatusCreatedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepo
)
model_rebuild(WebhookDeploymentStatusCreatedPropWorkflowRunPropReferencedWorkflowsItems)
model_rebuild(WebhookDeploymentStatusCreatedPropWorkflowRunPropRepository)
model_rebuild(WebhookDeploymentStatusCreatedPropWorkflowRunPropRepositoryPropOwner)
model_rebuild(WebhookDeploymentStatusCreatedPropWorkflowRunPropTriggeringActor)
model_rebuild(WebhookDeploymentStatusCreatedPropWorkflowRun)
model_rebuild(WebhookDiscussionAnswered)
model_rebuild(WebhookDiscussionAnsweredPropAnswer)
model_rebuild(WebhookDiscussionAnsweredPropAnswerPropReactions)
model_rebuild(WebhookDiscussionAnsweredPropAnswerPropUser)
model_rebuild(WebhookDiscussionCategoryChanged)
model_rebuild(WebhookDiscussionCategoryChangedPropChanges)
model_rebuild(WebhookDiscussionCategoryChangedPropChangesPropCategory)
model_rebuild(WebhookDiscussionCategoryChangedPropChangesPropCategoryPropFrom)
model_rebuild(WebhookDiscussionClosed)
model_rebuild(WebhookDiscussionCommentCreated)
model_rebuild(WebhookDiscussionCommentCreatedPropComment)
model_rebuild(WebhookDiscussionCommentCreatedPropCommentPropReactions)
model_rebuild(WebhookDiscussionCommentCreatedPropCommentPropUser)
model_rebuild(WebhookDiscussionCommentDeleted)
model_rebuild(WebhookDiscussionCommentDeletedPropComment)
model_rebuild(WebhookDiscussionCommentDeletedPropCommentPropReactions)
model_rebuild(WebhookDiscussionCommentDeletedPropCommentPropUser)
model_rebuild(WebhookDiscussionCommentEdited)
model_rebuild(WebhookDiscussionCommentEditedPropChanges)
model_rebuild(WebhookDiscussionCommentEditedPropChangesPropBody)
model_rebuild(WebhookDiscussionCommentEditedPropComment)
model_rebuild(WebhookDiscussionCommentEditedPropCommentPropReactions)
model_rebuild(WebhookDiscussionCommentEditedPropCommentPropUser)
model_rebuild(WebhookDiscussionCreated)
model_rebuild(WebhookDiscussionCreatedPropDiscussion)
model_rebuild(WebhookDiscussionCreatedPropDiscussionAllof0)
model_rebuild(WebhookDiscussionCreatedPropDiscussionAllof0PropAnswerChosenBy)
model_rebuild(WebhookDiscussionCreatedPropDiscussionAllof0PropCategory)
model_rebuild(WebhookDiscussionCreatedPropDiscussionAllof0PropReactions)
model_rebuild(WebhookDiscussionCreatedPropDiscussionAllof0PropUser)
model_rebuild(WebhookDiscussionCreatedPropDiscussionAllof1)
model_rebuild(WebhookDiscussionCreatedPropDiscussionAllof1PropCategory)
model_rebuild(WebhookDiscussionCreatedPropDiscussionAllof1PropReactions)
model_rebuild(WebhookDiscussionCreatedPropDiscussionAllof1PropUser)
model_rebuild(WebhookDiscussionCreatedPropDiscussionMergedCategory)
model_rebuild(WebhookDiscussionCreatedPropDiscussionMergedReactions)
model_rebuild(WebhookDiscussionCreatedPropDiscussionMergedUser)
model_rebuild(WebhookDiscussionDeleted)
model_rebuild(WebhookDiscussionEdited)
model_rebuild(WebhookDiscussionEditedPropChanges)
model_rebuild(WebhookDiscussionEditedPropChangesPropBody)
model_rebuild(WebhookDiscussionEditedPropChangesPropTitle)
model_rebuild(WebhookDiscussionLabeled)
model_rebuild(WebhookDiscussionLabeledPropLabel)
model_rebuild(WebhookDiscussionLocked)
model_rebuild(WebhookDiscussionPinned)
model_rebuild(WebhookDiscussionReopened)
model_rebuild(WebhookDiscussionTransferred)
model_rebuild(WebhookDiscussionTransferredPropChanges)
model_rebuild(WebhookDiscussionUnanswered)
model_rebuild(WebhookDiscussionUnansweredPropOldAnswer)
model_rebuild(WebhookDiscussionUnansweredPropOldAnswerPropReactions)
model_rebuild(WebhookDiscussionUnansweredPropOldAnswerPropUser)
model_rebuild(WebhookDiscussionUnlabeled)
model_rebuild(WebhookDiscussionUnlabeledPropLabel)
model_rebuild(WebhookDiscussionUnlocked)
model_rebuild(WebhookDiscussionUnpinned)
model_rebuild(WebhookFork)
model_rebuild(WebhookForkPropForkee)
model_rebuild(WebhookForkPropForkeeAllof0)
model_rebuild(WebhookForkPropForkeeAllof0PropCustomProperties)
model_rebuild(WebhookForkPropForkeeAllof0PropLicense)
model_rebuild(WebhookForkPropForkeeAllof0PropOwner)
model_rebuild(WebhookForkPropForkeeAllof0PropPermissions)
model_rebuild(WebhookForkPropForkeeAllof1)
model_rebuild(WebhookForkPropForkeeAllof1PropLicense)
model_rebuild(WebhookForkPropForkeeAllof1PropOwner)
model_rebuild(WebhookForkPropForkeeMergedLicense)
model_rebuild(WebhookForkPropForkeeMergedOwner)
model_rebuild(WebhookGithubAppAuthorizationRevoked)
model_rebuild(WebhookGollum)
model_rebuild(WebhookGollumPropPagesItems)
model_rebuild(WebhookInstallationCreated)
model_rebuild(WebhookInstallationCreatedPropRepositoriesItems)
model_rebuild(WebhookInstallationCreatedPropRequester)
model_rebuild(WebhookInstallationDeleted)
model_rebuild(WebhookInstallationDeletedPropRepositoriesItems)
model_rebuild(WebhookInstallationNewPermissionsAccepted)
model_rebuild(WebhookInstallationNewPermissionsAcceptedPropRepositoriesItems)
model_rebuild(WebhookInstallationRepositoriesAdded)
model_rebuild(WebhookInstallationRepositoriesAddedPropRepositoriesAddedItems)
model_rebuild(WebhookInstallationRepositoriesAddedPropRepositoriesRemovedItems)
model_rebuild(WebhookInstallationRepositoriesAddedPropRequester)
model_rebuild(WebhookInstallationRepositoriesRemoved)
model_rebuild(WebhookInstallationRepositoriesRemovedPropRepositoriesAddedItems)
model_rebuild(WebhookInstallationRepositoriesRemovedPropRepositoriesRemovedItems)
model_rebuild(WebhookInstallationRepositoriesRemovedPropRequester)
model_rebuild(WebhookInstallationSuspend)
model_rebuild(WebhookInstallationSuspendPropRepositoriesItems)
model_rebuild(WebhookInstallationTargetRenamed)
model_rebuild(WebhookInstallationTargetRenamedPropAccount)
model_rebuild(WebhookInstallationTargetRenamedPropChanges)
model_rebuild(WebhookInstallationTargetRenamedPropChangesPropLogin)
model_rebuild(WebhookInstallationTargetRenamedPropChangesPropSlug)
model_rebuild(WebhookInstallationUnsuspend)
model_rebuild(WebhookInstallationUnsuspendPropRepositoriesItems)
model_rebuild(WebhookIssueCommentCreated)
model_rebuild(WebhookIssueCommentCreatedPropComment)
model_rebuild(WebhookIssueCommentCreatedPropCommentPropReactions)
model_rebuild(WebhookIssueCommentCreatedPropCommentPropUser)
model_rebuild(WebhookIssueCommentCreatedPropIssue)
model_rebuild(WebhookIssueCommentCreatedPropIssueAllof0)
model_rebuild(WebhookIssueCommentCreatedPropIssueAllof0PropAssignee)
model_rebuild(WebhookIssueCommentCreatedPropIssueAllof0PropAssigneesItems)
model_rebuild(WebhookIssueCommentCreatedPropIssueAllof0PropLabelsItems)
model_rebuild(WebhookIssueCommentCreatedPropIssueAllof0PropMilestonePropCreator)
model_rebuild(WebhookIssueCommentCreatedPropIssueAllof0PropMilestone)
model_rebuild(
    WebhookIssueCommentCreatedPropIssueAllof0PropPerformedViaGithubAppPropOwner
)
model_rebuild(
    WebhookIssueCommentCreatedPropIssueAllof0PropPerformedViaGithubAppPropPermissions
)
model_rebuild(WebhookIssueCommentCreatedPropIssueAllof0PropPerformedViaGithubApp)
model_rebuild(WebhookIssueCommentCreatedPropIssueAllof0PropPullRequest)
model_rebuild(WebhookIssueCommentCreatedPropIssueAllof0PropReactions)
model_rebuild(WebhookIssueCommentCreatedPropIssueAllof0PropUser)
model_rebuild(WebhookIssueCommentCreatedPropIssueAllof1)
model_rebuild(WebhookIssueCommentCreatedPropIssueAllof1PropAssignee)
model_rebuild(WebhookIssueCommentCreatedPropIssueAllof1PropAssigneesItems)
model_rebuild(WebhookIssueCommentCreatedPropIssueAllof1PropLabelsItems)
model_rebuild(WebhookIssueCommentCreatedPropIssueAllof1PropMilestone)
model_rebuild(WebhookIssueCommentCreatedPropIssueAllof1PropPerformedViaGithubApp)
model_rebuild(WebhookIssueCommentCreatedPropIssueAllof1PropReactions)
model_rebuild(WebhookIssueCommentCreatedPropIssueAllof1PropUser)
model_rebuild(WebhookIssueCommentCreatedPropIssueMergedAssignees)
model_rebuild(WebhookIssueCommentCreatedPropIssueMergedMilestone)
model_rebuild(WebhookIssueCommentCreatedPropIssueMergedPerformedViaGithubApp)
model_rebuild(WebhookIssueCommentCreatedPropIssueMergedReactions)
model_rebuild(WebhookIssueCommentCreatedPropIssueMergedUser)
model_rebuild(WebhookIssueCommentDeleted)
model_rebuild(WebhookIssueCommentDeletedPropComment)
model_rebuild(WebhookIssueCommentDeletedPropCommentPropReactions)
model_rebuild(WebhookIssueCommentDeletedPropCommentPropUser)
model_rebuild(WebhookIssueCommentDeletedPropIssue)
model_rebuild(WebhookIssueCommentDeletedPropIssueAllof0)
model_rebuild(WebhookIssueCommentDeletedPropIssueAllof0PropAssignee)
model_rebuild(WebhookIssueCommentDeletedPropIssueAllof0PropAssigneesItems)
model_rebuild(WebhookIssueCommentDeletedPropIssueAllof0PropLabelsItems)
model_rebuild(WebhookIssueCommentDeletedPropIssueAllof0PropMilestonePropCreator)
model_rebuild(WebhookIssueCommentDeletedPropIssueAllof0PropMilestone)
model_rebuild(
    WebhookIssueCommentDeletedPropIssueAllof0PropPerformedViaGithubAppPropOwner
)
model_rebuild(
    WebhookIssueCommentDeletedPropIssueAllof0PropPerformedViaGithubAppPropPermissions
)
model_rebuild(WebhookIssueCommentDeletedPropIssueAllof0PropPerformedViaGithubApp)
model_rebuild(WebhookIssueCommentDeletedPropIssueAllof0PropPullRequest)
model_rebuild(WebhookIssueCommentDeletedPropIssueAllof0PropReactions)
model_rebuild(WebhookIssueCommentDeletedPropIssueAllof0PropUser)
model_rebuild(WebhookIssueCommentDeletedPropIssueAllof1)
model_rebuild(WebhookIssueCommentDeletedPropIssueAllof1PropAssignee)
model_rebuild(WebhookIssueCommentDeletedPropIssueAllof1PropAssigneesItems)
model_rebuild(WebhookIssueCommentDeletedPropIssueAllof1PropLabelsItems)
model_rebuild(WebhookIssueCommentDeletedPropIssueAllof1PropMilestone)
model_rebuild(WebhookIssueCommentDeletedPropIssueAllof1PropPerformedViaGithubApp)
model_rebuild(WebhookIssueCommentDeletedPropIssueAllof1PropReactions)
model_rebuild(WebhookIssueCommentDeletedPropIssueAllof1PropUser)
model_rebuild(WebhookIssueCommentDeletedPropIssueMergedAssignees)
model_rebuild(WebhookIssueCommentDeletedPropIssueMergedMilestone)
model_rebuild(WebhookIssueCommentDeletedPropIssueMergedPerformedViaGithubApp)
model_rebuild(WebhookIssueCommentDeletedPropIssueMergedReactions)
model_rebuild(WebhookIssueCommentDeletedPropIssueMergedUser)
model_rebuild(WebhookIssueCommentEdited)
model_rebuild(WebhookIssueCommentEditedPropChanges)
model_rebuild(WebhookIssueCommentEditedPropChangesPropBody)
model_rebuild(WebhookIssueCommentEditedPropComment)
model_rebuild(WebhookIssueCommentEditedPropCommentPropReactions)
model_rebuild(WebhookIssueCommentEditedPropCommentPropUser)
model_rebuild(WebhookIssueCommentEditedPropIssue)
model_rebuild(WebhookIssueCommentEditedPropIssueAllof0)
model_rebuild(WebhookIssueCommentEditedPropIssueAllof0PropAssignee)
model_rebuild(WebhookIssueCommentEditedPropIssueAllof0PropAssigneesItems)
model_rebuild(WebhookIssueCommentEditedPropIssueAllof0PropLabelsItems)
model_rebuild(WebhookIssueCommentEditedPropIssueAllof0PropMilestonePropCreator)
model_rebuild(WebhookIssueCommentEditedPropIssueAllof0PropMilestone)
model_rebuild(
    WebhookIssueCommentEditedPropIssueAllof0PropPerformedViaGithubAppPropOwner
)
model_rebuild(
    WebhookIssueCommentEditedPropIssueAllof0PropPerformedViaGithubAppPropPermissions
)
model_rebuild(WebhookIssueCommentEditedPropIssueAllof0PropPerformedViaGithubApp)
model_rebuild(WebhookIssueCommentEditedPropIssueAllof0PropPullRequest)
model_rebuild(WebhookIssueCommentEditedPropIssueAllof0PropReactions)
model_rebuild(WebhookIssueCommentEditedPropIssueAllof0PropUser)
model_rebuild(WebhookIssueCommentEditedPropIssueAllof1)
model_rebuild(WebhookIssueCommentEditedPropIssueAllof1PropAssignee)
model_rebuild(WebhookIssueCommentEditedPropIssueAllof1PropAssigneesItems)
model_rebuild(WebhookIssueCommentEditedPropIssueAllof1PropLabelsItems)
model_rebuild(WebhookIssueCommentEditedPropIssueAllof1PropMilestone)
model_rebuild(WebhookIssueCommentEditedPropIssueAllof1PropPerformedViaGithubApp)
model_rebuild(WebhookIssueCommentEditedPropIssueAllof1PropReactions)
model_rebuild(WebhookIssueCommentEditedPropIssueAllof1PropUser)
model_rebuild(WebhookIssueCommentEditedPropIssueMergedAssignees)
model_rebuild(WebhookIssueCommentEditedPropIssueMergedMilestone)
model_rebuild(WebhookIssueCommentEditedPropIssueMergedPerformedViaGithubApp)
model_rebuild(WebhookIssueCommentEditedPropIssueMergedReactions)
model_rebuild(WebhookIssueCommentEditedPropIssueMergedUser)
model_rebuild(WebhookIssuesAssigned)
model_rebuild(WebhookIssuesAssignedPropAssignee)
model_rebuild(WebhookIssuesAssignedPropIssue)
model_rebuild(WebhookIssuesAssignedPropIssuePropAssignee)
model_rebuild(WebhookIssuesAssignedPropIssuePropAssigneesItems)
model_rebuild(WebhookIssuesAssignedPropIssuePropLabelsItems)
model_rebuild(WebhookIssuesAssignedPropIssuePropMilestonePropCreator)
model_rebuild(WebhookIssuesAssignedPropIssuePropMilestone)
model_rebuild(WebhookIssuesAssignedPropIssuePropPerformedViaGithubAppPropOwner)
model_rebuild(WebhookIssuesAssignedPropIssuePropPerformedViaGithubAppPropPermissions)
model_rebuild(WebhookIssuesAssignedPropIssuePropPerformedViaGithubApp)
model_rebuild(WebhookIssuesAssignedPropIssuePropPullRequest)
model_rebuild(WebhookIssuesAssignedPropIssuePropReactions)
model_rebuild(WebhookIssuesAssignedPropIssuePropUser)
model_rebuild(WebhookIssuesClosed)
model_rebuild(WebhookIssuesClosedPropIssue)
model_rebuild(WebhookIssuesClosedPropIssueAllof0)
model_rebuild(WebhookIssuesClosedPropIssueAllof0PropAssignee)
model_rebuild(WebhookIssuesClosedPropIssueAllof0PropAssigneesItems)
model_rebuild(WebhookIssuesClosedPropIssueAllof0PropLabelsItems)
model_rebuild(WebhookIssuesClosedPropIssueAllof0PropMilestonePropCreator)
model_rebuild(WebhookIssuesClosedPropIssueAllof0PropMilestone)
model_rebuild(WebhookIssuesClosedPropIssueAllof0PropPerformedViaGithubAppPropOwner)
model_rebuild(
    WebhookIssuesClosedPropIssueAllof0PropPerformedViaGithubAppPropPermissions
)
model_rebuild(WebhookIssuesClosedPropIssueAllof0PropPerformedViaGithubApp)
model_rebuild(WebhookIssuesClosedPropIssueAllof0PropPullRequest)
model_rebuild(WebhookIssuesClosedPropIssueAllof0PropReactions)
model_rebuild(WebhookIssuesClosedPropIssueAllof0PropUser)
model_rebuild(WebhookIssuesClosedPropIssueAllof1)
model_rebuild(WebhookIssuesClosedPropIssueAllof1PropAssignee)
model_rebuild(WebhookIssuesClosedPropIssueAllof1PropAssigneesItems)
model_rebuild(WebhookIssuesClosedPropIssueAllof1PropLabelsItems)
model_rebuild(WebhookIssuesClosedPropIssueAllof1PropMilestone)
model_rebuild(WebhookIssuesClosedPropIssueAllof1PropPerformedViaGithubApp)
model_rebuild(WebhookIssuesClosedPropIssueAllof1PropReactions)
model_rebuild(WebhookIssuesClosedPropIssueAllof1PropUser)
model_rebuild(WebhookIssuesClosedPropIssueMergedAssignee)
model_rebuild(WebhookIssuesClosedPropIssueMergedAssignees)
model_rebuild(WebhookIssuesClosedPropIssueMergedLabels)
model_rebuild(WebhookIssuesClosedPropIssueMergedMilestone)
model_rebuild(WebhookIssuesClosedPropIssueMergedPerformedViaGithubApp)
model_rebuild(WebhookIssuesClosedPropIssueMergedReactions)
model_rebuild(WebhookIssuesClosedPropIssueMergedUser)
model_rebuild(WebhookIssuesDeleted)
model_rebuild(WebhookIssuesDeletedPropIssue)
model_rebuild(WebhookIssuesDeletedPropIssuePropAssignee)
model_rebuild(WebhookIssuesDeletedPropIssuePropAssigneesItems)
model_rebuild(WebhookIssuesDeletedPropIssuePropLabelsItems)
model_rebuild(WebhookIssuesDeletedPropIssuePropMilestonePropCreator)
model_rebuild(WebhookIssuesDeletedPropIssuePropMilestone)
model_rebuild(WebhookIssuesDeletedPropIssuePropPerformedViaGithubAppPropOwner)
model_rebuild(WebhookIssuesDeletedPropIssuePropPerformedViaGithubAppPropPermissions)
model_rebuild(WebhookIssuesDeletedPropIssuePropPerformedViaGithubApp)
model_rebuild(WebhookIssuesDeletedPropIssuePropPullRequest)
model_rebuild(WebhookIssuesDeletedPropIssuePropReactions)
model_rebuild(WebhookIssuesDeletedPropIssuePropUser)
model_rebuild(WebhookIssuesDemilestoned)
model_rebuild(WebhookIssuesDemilestonedPropIssue)
model_rebuild(WebhookIssuesDemilestonedPropIssueAllof0)
model_rebuild(WebhookIssuesDemilestonedPropIssueAllof0PropAssignee)
model_rebuild(WebhookIssuesDemilestonedPropIssueAllof0PropAssigneesItems)
model_rebuild(WebhookIssuesDemilestonedPropIssueAllof0PropLabelsItems)
model_rebuild(WebhookIssuesDemilestonedPropIssueAllof0PropMilestonePropCreator)
model_rebuild(WebhookIssuesDemilestonedPropIssueAllof0PropMilestone)
model_rebuild(
    WebhookIssuesDemilestonedPropIssueAllof0PropPerformedViaGithubAppPropOwner
)
model_rebuild(
    WebhookIssuesDemilestonedPropIssueAllof0PropPerformedViaGithubAppPropPermissions
)
model_rebuild(WebhookIssuesDemilestonedPropIssueAllof0PropPerformedViaGithubApp)
model_rebuild(WebhookIssuesDemilestonedPropIssueAllof0PropPullRequest)
model_rebuild(WebhookIssuesDemilestonedPropIssueAllof0PropReactions)
model_rebuild(WebhookIssuesDemilestonedPropIssueAllof0PropUser)
model_rebuild(WebhookIssuesDemilestonedPropIssueAllof1)
model_rebuild(WebhookIssuesDemilestonedPropIssueAllof1PropAssignee)
model_rebuild(WebhookIssuesDemilestonedPropIssueAllof1PropAssigneesItems)
model_rebuild(WebhookIssuesDemilestonedPropIssueAllof1PropLabelsItems)
model_rebuild(WebhookIssuesDemilestonedPropIssueAllof1PropMilestonePropCreator)
model_rebuild(WebhookIssuesDemilestonedPropIssueAllof1PropMilestone)
model_rebuild(WebhookIssuesDemilestonedPropIssueAllof1PropPerformedViaGithubApp)
model_rebuild(WebhookIssuesDemilestonedPropIssueAllof1PropReactions)
model_rebuild(WebhookIssuesDemilestonedPropIssueAllof1PropUser)
model_rebuild(WebhookIssuesDemilestonedPropIssueMergedAssignee)
model_rebuild(WebhookIssuesDemilestonedPropIssueMergedAssignees)
model_rebuild(WebhookIssuesDemilestonedPropIssueMergedLabels)
model_rebuild(WebhookIssuesDemilestonedPropIssueMergedPerformedViaGithubApp)
model_rebuild(WebhookIssuesDemilestonedPropIssueMergedReactions)
model_rebuild(WebhookIssuesDemilestonedPropIssueMergedUser)
model_rebuild(WebhookIssuesDemilestonedPropMilestone)
model_rebuild(WebhookIssuesDemilestonedPropMilestonePropCreator)
model_rebuild(WebhookIssuesEdited)
model_rebuild(WebhookIssuesEditedPropChanges)
model_rebuild(WebhookIssuesEditedPropChangesPropBody)
model_rebuild(WebhookIssuesEditedPropChangesPropTitle)
model_rebuild(WebhookIssuesEditedPropIssue)
model_rebuild(WebhookIssuesEditedPropIssuePropAssignee)
model_rebuild(WebhookIssuesEditedPropIssuePropAssigneesItems)
model_rebuild(WebhookIssuesEditedPropIssuePropLabelsItems)
model_rebuild(WebhookIssuesEditedPropIssuePropMilestonePropCreator)
model_rebuild(WebhookIssuesEditedPropIssuePropMilestone)
model_rebuild(WebhookIssuesEditedPropIssuePropPerformedViaGithubAppPropOwner)
model_rebuild(WebhookIssuesEditedPropIssuePropPerformedViaGithubAppPropPermissions)
model_rebuild(WebhookIssuesEditedPropIssuePropPerformedViaGithubApp)
model_rebuild(WebhookIssuesEditedPropIssuePropPullRequest)
model_rebuild(WebhookIssuesEditedPropIssuePropReactions)
model_rebuild(WebhookIssuesEditedPropIssuePropUser)
model_rebuild(WebhookIssuesEditedPropLabel)
model_rebuild(WebhookIssuesLabeled)
model_rebuild(WebhookIssuesLabeledPropIssue)
model_rebuild(WebhookIssuesLabeledPropIssuePropAssignee)
model_rebuild(WebhookIssuesLabeledPropIssuePropAssigneesItems)
model_rebuild(WebhookIssuesLabeledPropIssuePropLabelsItems)
model_rebuild(WebhookIssuesLabeledPropIssuePropMilestonePropCreator)
model_rebuild(WebhookIssuesLabeledPropIssuePropMilestone)
model_rebuild(WebhookIssuesLabeledPropIssuePropPerformedViaGithubAppPropOwner)
model_rebuild(WebhookIssuesLabeledPropIssuePropPerformedViaGithubAppPropPermissions)
model_rebuild(WebhookIssuesLabeledPropIssuePropPerformedViaGithubApp)
model_rebuild(WebhookIssuesLabeledPropIssuePropPullRequest)
model_rebuild(WebhookIssuesLabeledPropIssuePropReactions)
model_rebuild(WebhookIssuesLabeledPropIssuePropUser)
model_rebuild(WebhookIssuesLabeledPropLabel)
model_rebuild(WebhookIssuesLocked)
model_rebuild(WebhookIssuesLockedPropIssue)
model_rebuild(WebhookIssuesLockedPropIssueAllof0)
model_rebuild(WebhookIssuesLockedPropIssueAllof0PropAssignee)
model_rebuild(WebhookIssuesLockedPropIssueAllof0PropAssigneesItems)
model_rebuild(WebhookIssuesLockedPropIssueAllof0PropLabelsItems)
model_rebuild(WebhookIssuesLockedPropIssueAllof0PropMilestonePropCreator)
model_rebuild(WebhookIssuesLockedPropIssueAllof0PropMilestone)
model_rebuild(WebhookIssuesLockedPropIssueAllof0PropPerformedViaGithubAppPropOwner)
model_rebuild(
    WebhookIssuesLockedPropIssueAllof0PropPerformedViaGithubAppPropPermissions
)
model_rebuild(WebhookIssuesLockedPropIssueAllof0PropPerformedViaGithubApp)
model_rebuild(WebhookIssuesLockedPropIssueAllof0PropPullRequest)
model_rebuild(WebhookIssuesLockedPropIssueAllof0PropReactions)
model_rebuild(WebhookIssuesLockedPropIssueAllof0PropUser)
model_rebuild(WebhookIssuesLockedPropIssueAllof1)
model_rebuild(WebhookIssuesLockedPropIssueAllof1PropAssignee)
model_rebuild(WebhookIssuesLockedPropIssueAllof1PropAssigneesItems)
model_rebuild(WebhookIssuesLockedPropIssueAllof1PropLabelsItems)
model_rebuild(WebhookIssuesLockedPropIssueAllof1PropMilestone)
model_rebuild(WebhookIssuesLockedPropIssueAllof1PropPerformedViaGithubApp)
model_rebuild(WebhookIssuesLockedPropIssueAllof1PropReactions)
model_rebuild(WebhookIssuesLockedPropIssueAllof1PropUser)
model_rebuild(WebhookIssuesLockedPropIssueMergedAssignee)
model_rebuild(WebhookIssuesLockedPropIssueMergedAssignees)
model_rebuild(WebhookIssuesLockedPropIssueMergedLabels)
model_rebuild(WebhookIssuesLockedPropIssueMergedMilestone)
model_rebuild(WebhookIssuesLockedPropIssueMergedPerformedViaGithubApp)
model_rebuild(WebhookIssuesLockedPropIssueMergedReactions)
model_rebuild(WebhookIssuesLockedPropIssueMergedUser)
model_rebuild(WebhookIssuesMilestoned)
model_rebuild(WebhookIssuesMilestonedPropIssue)
model_rebuild(WebhookIssuesMilestonedPropIssueAllof0)
model_rebuild(WebhookIssuesMilestonedPropIssueAllof0PropAssignee)
model_rebuild(WebhookIssuesMilestonedPropIssueAllof0PropAssigneesItems)
model_rebuild(WebhookIssuesMilestonedPropIssueAllof0PropLabelsItems)
model_rebuild(WebhookIssuesMilestonedPropIssueAllof0PropMilestonePropCreator)
model_rebuild(WebhookIssuesMilestonedPropIssueAllof0PropMilestone)
model_rebuild(WebhookIssuesMilestonedPropIssueAllof0PropPerformedViaGithubAppPropOwner)
model_rebuild(
    WebhookIssuesMilestonedPropIssueAllof0PropPerformedViaGithubAppPropPermissions
)
model_rebuild(WebhookIssuesMilestonedPropIssueAllof0PropPerformedViaGithubApp)
model_rebuild(WebhookIssuesMilestonedPropIssueAllof0PropPullRequest)
model_rebuild(WebhookIssuesMilestonedPropIssueAllof0PropReactions)
model_rebuild(WebhookIssuesMilestonedPropIssueAllof0PropUser)
model_rebuild(WebhookIssuesMilestonedPropIssueAllof1)
model_rebuild(WebhookIssuesMilestonedPropIssueAllof1PropAssignee)
model_rebuild(WebhookIssuesMilestonedPropIssueAllof1PropAssigneesItems)
model_rebuild(WebhookIssuesMilestonedPropIssueAllof1PropLabelsItems)
model_rebuild(WebhookIssuesMilestonedPropIssueAllof1PropMilestone)
model_rebuild(WebhookIssuesMilestonedPropIssueAllof1PropMilestonePropCreator)
model_rebuild(WebhookIssuesMilestonedPropIssueAllof1PropPerformedViaGithubApp)
model_rebuild(WebhookIssuesMilestonedPropIssueAllof1PropReactions)
model_rebuild(WebhookIssuesMilestonedPropIssueAllof1PropUser)
model_rebuild(WebhookIssuesMilestonedPropIssueMergedAssignee)
model_rebuild(WebhookIssuesMilestonedPropIssueMergedAssignees)
model_rebuild(WebhookIssuesMilestonedPropIssueMergedLabels)
model_rebuild(WebhookIssuesMilestonedPropIssueMergedPerformedViaGithubApp)
model_rebuild(WebhookIssuesMilestonedPropIssueMergedReactions)
model_rebuild(WebhookIssuesMilestonedPropIssueMergedUser)
model_rebuild(WebhookIssuesMilestonedPropMilestone)
model_rebuild(WebhookIssuesMilestonedPropMilestonePropCreator)
model_rebuild(WebhookIssuesOpened)
model_rebuild(WebhookIssuesOpenedPropChanges)
model_rebuild(WebhookIssuesOpenedPropChangesPropOldIssuePropAssignee)
model_rebuild(WebhookIssuesOpenedPropChangesPropOldIssuePropAssigneesItems)
model_rebuild(WebhookIssuesOpenedPropChangesPropOldIssuePropLabelsItems)
model_rebuild(WebhookIssuesOpenedPropChangesPropOldIssuePropMilestonePropCreator)
model_rebuild(WebhookIssuesOpenedPropChangesPropOldIssuePropMilestone)
model_rebuild(
    WebhookIssuesOpenedPropChangesPropOldIssuePropPerformedViaGithubAppPropOwner
)
model_rebuild(
    WebhookIssuesOpenedPropChangesPropOldIssuePropPerformedViaGithubAppPropPermissions
)
model_rebuild(WebhookIssuesOpenedPropChangesPropOldIssuePropPerformedViaGithubApp)
model_rebuild(WebhookIssuesOpenedPropChangesPropOldIssuePropPullRequest)
model_rebuild(WebhookIssuesOpenedPropChangesPropOldIssuePropReactions)
model_rebuild(WebhookIssuesOpenedPropChangesPropOldIssuePropUser)
model_rebuild(WebhookIssuesOpenedPropChangesPropOldIssue)
model_rebuild(WebhookIssuesOpenedPropChangesPropOldRepository)
model_rebuild(WebhookIssuesOpenedPropChangesPropOldRepositoryPropCustomProperties)
model_rebuild(WebhookIssuesOpenedPropChangesPropOldRepositoryPropLicense)
model_rebuild(WebhookIssuesOpenedPropChangesPropOldRepositoryPropOwner)
model_rebuild(WebhookIssuesOpenedPropChangesPropOldRepositoryPropPermissions)
model_rebuild(WebhookIssuesOpenedPropIssue)
model_rebuild(WebhookIssuesOpenedPropIssuePropAssignee)
model_rebuild(WebhookIssuesOpenedPropIssuePropAssigneesItems)
model_rebuild(WebhookIssuesOpenedPropIssuePropLabelsItems)
model_rebuild(WebhookIssuesOpenedPropIssuePropMilestonePropCreator)
model_rebuild(WebhookIssuesOpenedPropIssuePropMilestone)
model_rebuild(WebhookIssuesOpenedPropIssuePropPerformedViaGithubAppPropOwner)
model_rebuild(WebhookIssuesOpenedPropIssuePropPerformedViaGithubAppPropPermissions)
model_rebuild(WebhookIssuesOpenedPropIssuePropPerformedViaGithubApp)
model_rebuild(WebhookIssuesOpenedPropIssuePropPullRequest)
model_rebuild(WebhookIssuesOpenedPropIssuePropReactions)
model_rebuild(WebhookIssuesOpenedPropIssuePropUser)
model_rebuild(WebhookIssuesPinned)
model_rebuild(WebhookIssuesPinnedPropIssue)
model_rebuild(WebhookIssuesPinnedPropIssuePropAssignee)
model_rebuild(WebhookIssuesPinnedPropIssuePropAssigneesItems)
model_rebuild(WebhookIssuesPinnedPropIssuePropLabelsItems)
model_rebuild(WebhookIssuesPinnedPropIssuePropMilestonePropCreator)
model_rebuild(WebhookIssuesPinnedPropIssuePropMilestone)
model_rebuild(WebhookIssuesPinnedPropIssuePropPerformedViaGithubAppPropOwner)
model_rebuild(WebhookIssuesPinnedPropIssuePropPerformedViaGithubAppPropPermissions)
model_rebuild(WebhookIssuesPinnedPropIssuePropPerformedViaGithubApp)
model_rebuild(WebhookIssuesPinnedPropIssuePropPullRequest)
model_rebuild(WebhookIssuesPinnedPropIssuePropReactions)
model_rebuild(WebhookIssuesPinnedPropIssuePropUser)
model_rebuild(WebhookIssuesReopened)
model_rebuild(WebhookIssuesReopenedPropIssue)
model_rebuild(WebhookIssuesReopenedPropIssueAllof0)
model_rebuild(WebhookIssuesReopenedPropIssueAllof0PropAssignee)
model_rebuild(WebhookIssuesReopenedPropIssueAllof0PropAssigneesItems)
model_rebuild(WebhookIssuesReopenedPropIssueAllof0PropLabelsItems)
model_rebuild(WebhookIssuesReopenedPropIssueAllof0PropMilestonePropCreator)
model_rebuild(WebhookIssuesReopenedPropIssueAllof0PropMilestone)
model_rebuild(WebhookIssuesReopenedPropIssueAllof0PropPerformedViaGithubAppPropOwner)
model_rebuild(
    WebhookIssuesReopenedPropIssueAllof0PropPerformedViaGithubAppPropPermissions
)
model_rebuild(WebhookIssuesReopenedPropIssueAllof0PropPerformedViaGithubApp)
model_rebuild(WebhookIssuesReopenedPropIssueAllof0PropPullRequest)
model_rebuild(WebhookIssuesReopenedPropIssueAllof0PropReactions)
model_rebuild(WebhookIssuesReopenedPropIssueAllof0PropUser)
model_rebuild(WebhookIssuesReopenedPropIssueAllof1)
model_rebuild(WebhookIssuesReopenedPropIssueAllof1PropAssignee)
model_rebuild(WebhookIssuesReopenedPropIssueAllof1PropAssigneesItems)
model_rebuild(WebhookIssuesReopenedPropIssueAllof1PropLabelsItems)
model_rebuild(WebhookIssuesReopenedPropIssueAllof1PropMilestone)
model_rebuild(WebhookIssuesReopenedPropIssueAllof1PropPerformedViaGithubApp)
model_rebuild(WebhookIssuesReopenedPropIssueAllof1PropReactions)
model_rebuild(WebhookIssuesReopenedPropIssueAllof1PropUser)
model_rebuild(WebhookIssuesReopenedPropIssueMergedAssignee)
model_rebuild(WebhookIssuesReopenedPropIssueMergedAssignees)
model_rebuild(WebhookIssuesReopenedPropIssueMergedLabels)
model_rebuild(WebhookIssuesReopenedPropIssueMergedMilestone)
model_rebuild(WebhookIssuesReopenedPropIssueMergedPerformedViaGithubApp)
model_rebuild(WebhookIssuesReopenedPropIssueMergedReactions)
model_rebuild(WebhookIssuesReopenedPropIssueMergedUser)
model_rebuild(WebhookIssuesTransferred)
model_rebuild(WebhookIssuesTransferredPropChanges)
model_rebuild(WebhookIssuesTransferredPropChangesPropNewIssue)
model_rebuild(WebhookIssuesTransferredPropChangesPropNewIssuePropAssignee)
model_rebuild(WebhookIssuesTransferredPropChangesPropNewIssuePropAssigneesItems)
model_rebuild(WebhookIssuesTransferredPropChangesPropNewIssuePropLabelsItems)
model_rebuild(WebhookIssuesTransferredPropChangesPropNewIssuePropMilestonePropCreator)
model_rebuild(WebhookIssuesTransferredPropChangesPropNewIssuePropMilestone)
model_rebuild(
    WebhookIssuesTransferredPropChangesPropNewIssuePropPerformedViaGithubAppPropOwner
)
model_rebuild(
    WebhookIssuesTransferredPropChangesPropNewIssuePropPerformedViaGithubAppPropPermissions
)
model_rebuild(WebhookIssuesTransferredPropChangesPropNewIssuePropPerformedViaGithubApp)
model_rebuild(WebhookIssuesTransferredPropChangesPropNewIssuePropPullRequest)
model_rebuild(WebhookIssuesTransferredPropChangesPropNewIssuePropReactions)
model_rebuild(WebhookIssuesTransferredPropChangesPropNewIssuePropUser)
model_rebuild(WebhookIssuesTransferredPropChangesPropNewRepository)
model_rebuild(WebhookIssuesTransferredPropChangesPropNewRepositoryPropCustomProperties)
model_rebuild(WebhookIssuesTransferredPropChangesPropNewRepositoryPropLicense)
model_rebuild(WebhookIssuesTransferredPropChangesPropNewRepositoryPropOwner)
model_rebuild(WebhookIssuesTransferredPropChangesPropNewRepositoryPropPermissions)
model_rebuild(WebhookIssuesTransferredPropIssue)
model_rebuild(WebhookIssuesTransferredPropIssuePropAssignee)
model_rebuild(WebhookIssuesTransferredPropIssuePropAssigneesItems)
model_rebuild(WebhookIssuesTransferredPropIssuePropLabelsItems)
model_rebuild(WebhookIssuesTransferredPropIssuePropMilestonePropCreator)
model_rebuild(WebhookIssuesTransferredPropIssuePropMilestone)
model_rebuild(WebhookIssuesTransferredPropIssuePropPerformedViaGithubAppPropOwner)
model_rebuild(WebhookIssuesTransferredPropIssuePropPerformedViaGithubAppPropPermissions)
model_rebuild(WebhookIssuesTransferredPropIssuePropPerformedViaGithubApp)
model_rebuild(WebhookIssuesTransferredPropIssuePropPullRequest)
model_rebuild(WebhookIssuesTransferredPropIssuePropReactions)
model_rebuild(WebhookIssuesTransferredPropIssuePropUser)
model_rebuild(WebhookIssuesUnassigned)
model_rebuild(WebhookIssuesUnassignedPropAssignee)
model_rebuild(WebhookIssuesUnassignedPropIssue)
model_rebuild(WebhookIssuesUnassignedPropIssuePropAssignee)
model_rebuild(WebhookIssuesUnassignedPropIssuePropAssigneesItems)
model_rebuild(WebhookIssuesUnassignedPropIssuePropLabelsItems)
model_rebuild(WebhookIssuesUnassignedPropIssuePropMilestonePropCreator)
model_rebuild(WebhookIssuesUnassignedPropIssuePropMilestone)
model_rebuild(WebhookIssuesUnassignedPropIssuePropPerformedViaGithubAppPropOwner)
model_rebuild(WebhookIssuesUnassignedPropIssuePropPerformedViaGithubAppPropPermissions)
model_rebuild(WebhookIssuesUnassignedPropIssuePropPerformedViaGithubApp)
model_rebuild(WebhookIssuesUnassignedPropIssuePropPullRequest)
model_rebuild(WebhookIssuesUnassignedPropIssuePropReactions)
model_rebuild(WebhookIssuesUnassignedPropIssuePropUser)
model_rebuild(WebhookIssuesUnlabeled)
model_rebuild(WebhookIssuesUnlabeledPropIssue)
model_rebuild(WebhookIssuesUnlabeledPropIssuePropAssignee)
model_rebuild(WebhookIssuesUnlabeledPropIssuePropAssigneesItems)
model_rebuild(WebhookIssuesUnlabeledPropIssuePropLabelsItems)
model_rebuild(WebhookIssuesUnlabeledPropIssuePropMilestonePropCreator)
model_rebuild(WebhookIssuesUnlabeledPropIssuePropMilestone)
model_rebuild(WebhookIssuesUnlabeledPropIssuePropPerformedViaGithubAppPropOwner)
model_rebuild(WebhookIssuesUnlabeledPropIssuePropPerformedViaGithubAppPropPermissions)
model_rebuild(WebhookIssuesUnlabeledPropIssuePropPerformedViaGithubApp)
model_rebuild(WebhookIssuesUnlabeledPropIssuePropPullRequest)
model_rebuild(WebhookIssuesUnlabeledPropIssuePropReactions)
model_rebuild(WebhookIssuesUnlabeledPropIssuePropUser)
model_rebuild(WebhookIssuesUnlabeledPropLabel)
model_rebuild(WebhookIssuesUnlocked)
model_rebuild(WebhookIssuesUnlockedPropIssue)
model_rebuild(WebhookIssuesUnlockedPropIssueAllof0)
model_rebuild(WebhookIssuesUnlockedPropIssueAllof0PropAssignee)
model_rebuild(WebhookIssuesUnlockedPropIssueAllof0PropAssigneesItems)
model_rebuild(WebhookIssuesUnlockedPropIssueAllof0PropLabelsItems)
model_rebuild(WebhookIssuesUnlockedPropIssueAllof0PropMilestonePropCreator)
model_rebuild(WebhookIssuesUnlockedPropIssueAllof0PropMilestone)
model_rebuild(WebhookIssuesUnlockedPropIssueAllof0PropPerformedViaGithubAppPropOwner)
model_rebuild(
    WebhookIssuesUnlockedPropIssueAllof0PropPerformedViaGithubAppPropPermissions
)
model_rebuild(WebhookIssuesUnlockedPropIssueAllof0PropPerformedViaGithubApp)
model_rebuild(WebhookIssuesUnlockedPropIssueAllof0PropPullRequest)
model_rebuild(WebhookIssuesUnlockedPropIssueAllof0PropReactions)
model_rebuild(WebhookIssuesUnlockedPropIssueAllof0PropUser)
model_rebuild(WebhookIssuesUnlockedPropIssueAllof1)
model_rebuild(WebhookIssuesUnlockedPropIssueAllof1PropAssignee)
model_rebuild(WebhookIssuesUnlockedPropIssueAllof1PropAssigneesItems)
model_rebuild(WebhookIssuesUnlockedPropIssueAllof1PropLabelsItems)
model_rebuild(WebhookIssuesUnlockedPropIssueAllof1PropMilestone)
model_rebuild(WebhookIssuesUnlockedPropIssueAllof1PropReactions)
model_rebuild(WebhookIssuesUnlockedPropIssueAllof1PropUser)
model_rebuild(WebhookIssuesUnlockedPropIssueMergedAssignee)
model_rebuild(WebhookIssuesUnlockedPropIssueMergedAssignees)
model_rebuild(WebhookIssuesUnlockedPropIssueMergedLabels)
model_rebuild(WebhookIssuesUnlockedPropIssueMergedMilestone)
model_rebuild(WebhookIssuesUnlockedPropIssueMergedReactions)
model_rebuild(WebhookIssuesUnlockedPropIssueMergedUser)
model_rebuild(WebhookIssuesUnpinned)
model_rebuild(WebhookIssuesUnpinnedPropIssue)
model_rebuild(WebhookIssuesUnpinnedPropIssuePropAssignee)
model_rebuild(WebhookIssuesUnpinnedPropIssuePropAssigneesItems)
model_rebuild(WebhookIssuesUnpinnedPropIssuePropLabelsItems)
model_rebuild(WebhookIssuesUnpinnedPropIssuePropMilestonePropCreator)
model_rebuild(WebhookIssuesUnpinnedPropIssuePropMilestone)
model_rebuild(WebhookIssuesUnpinnedPropIssuePropPerformedViaGithubAppPropOwner)
model_rebuild(WebhookIssuesUnpinnedPropIssuePropPerformedViaGithubAppPropPermissions)
model_rebuild(WebhookIssuesUnpinnedPropIssuePropPerformedViaGithubApp)
model_rebuild(WebhookIssuesUnpinnedPropIssuePropPullRequest)
model_rebuild(WebhookIssuesUnpinnedPropIssuePropReactions)
model_rebuild(WebhookIssuesUnpinnedPropIssuePropUser)
model_rebuild(WebhookLabelCreated)
model_rebuild(WebhookLabelCreatedPropLabel)
model_rebuild(WebhookLabelDeleted)
model_rebuild(WebhookLabelDeletedPropLabel)
model_rebuild(WebhookLabelEdited)
model_rebuild(WebhookLabelEditedPropChanges)
model_rebuild(WebhookLabelEditedPropChangesPropColor)
model_rebuild(WebhookLabelEditedPropChangesPropDescription)
model_rebuild(WebhookLabelEditedPropChangesPropName)
model_rebuild(WebhookLabelEditedPropLabel)
model_rebuild(WebhookMarketplacePurchaseCancelled)
model_rebuild(WebhookMarketplacePurchaseCancelledPropMarketplacePurchase)
model_rebuild(WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof0)
model_rebuild(
    WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof0PropAccount
)
model_rebuild(WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof0PropPlan)
model_rebuild(WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof1)
model_rebuild(
    WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof1PropAccount
)
model_rebuild(WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof1PropPlan)
model_rebuild(WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseMergedAccount)
model_rebuild(WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseMergedPlan)
model_rebuild(WebhookMarketplacePurchaseCancelledPropPreviousMarketplacePurchase)
model_rebuild(
    WebhookMarketplacePurchaseCancelledPropPreviousMarketplacePurchasePropAccount
)
model_rebuild(
    WebhookMarketplacePurchaseCancelledPropPreviousMarketplacePurchasePropPlan
)
model_rebuild(WebhookMarketplacePurchaseChanged)
model_rebuild(WebhookMarketplacePurchaseChangedPropMarketplacePurchase)
model_rebuild(WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof0)
model_rebuild(WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof0PropAccount)
model_rebuild(WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof0PropPlan)
model_rebuild(WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof1)
model_rebuild(WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof1PropAccount)
model_rebuild(WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof1PropPlan)
model_rebuild(WebhookMarketplacePurchaseChangedPropMarketplacePurchaseMergedAccount)
model_rebuild(WebhookMarketplacePurchaseChangedPropMarketplacePurchaseMergedPlan)
model_rebuild(WebhookMarketplacePurchaseChangedPropPreviousMarketplacePurchase)
model_rebuild(
    WebhookMarketplacePurchaseChangedPropPreviousMarketplacePurchasePropAccount
)
model_rebuild(WebhookMarketplacePurchaseChangedPropPreviousMarketplacePurchasePropPlan)
model_rebuild(WebhookMarketplacePurchasePendingChange)
model_rebuild(WebhookMarketplacePurchasePendingChangePropMarketplacePurchase)
model_rebuild(WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof0)
model_rebuild(
    WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof0PropAccount
)
model_rebuild(
    WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof0PropPlan
)
model_rebuild(WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof1)
model_rebuild(
    WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof1PropAccount
)
model_rebuild(
    WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof1PropPlan
)
model_rebuild(
    WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseMergedAccount
)
model_rebuild(WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseMergedPlan)
model_rebuild(WebhookMarketplacePurchasePendingChangePropPreviousMarketplacePurchase)
model_rebuild(
    WebhookMarketplacePurchasePendingChangePropPreviousMarketplacePurchasePropAccount
)
model_rebuild(
    WebhookMarketplacePurchasePendingChangePropPreviousMarketplacePurchasePropPlan
)
model_rebuild(WebhookMarketplacePurchasePendingChangeCancelled)
model_rebuild(WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchase)
model_rebuild(
    WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchaseAllof0
)
model_rebuild(
    WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchaseAllof0PropAccount
)
model_rebuild(
    WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchaseAllof0PropPlan
)
model_rebuild(
    WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchaseAllof1
)
model_rebuild(
    WebhookMarketplacePurchasePendingChangeCancelledPropPreviousMarketplacePurchase
)
model_rebuild(
    WebhookMarketplacePurchasePendingChangeCancelledPropPreviousMarketplacePurchasePropAccount
)
model_rebuild(
    WebhookMarketplacePurchasePendingChangeCancelledPropPreviousMarketplacePurchasePropPlan
)
model_rebuild(WebhookMarketplacePurchasePurchased)
model_rebuild(WebhookMarketplacePurchasePurchasedPropMarketplacePurchase)
model_rebuild(WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof0)
model_rebuild(
    WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof0PropAccount
)
model_rebuild(WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof0PropPlan)
model_rebuild(WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof1)
model_rebuild(
    WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof1PropAccount
)
model_rebuild(WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof1PropPlan)
model_rebuild(WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseMergedAccount)
model_rebuild(WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseMergedPlan)
model_rebuild(WebhookMarketplacePurchasePurchasedPropPreviousMarketplacePurchase)
model_rebuild(
    WebhookMarketplacePurchasePurchasedPropPreviousMarketplacePurchasePropAccount
)
model_rebuild(
    WebhookMarketplacePurchasePurchasedPropPreviousMarketplacePurchasePropPlan
)
model_rebuild(WebhookMemberAdded)
model_rebuild(WebhookMemberAddedPropChanges)
model_rebuild(WebhookMemberAddedPropChangesPropPermission)
model_rebuild(WebhookMemberAddedPropMember)
model_rebuild(WebhookMemberEdited)
model_rebuild(WebhookMemberEditedPropChanges)
model_rebuild(WebhookMemberEditedPropChangesPropOldPermission)
model_rebuild(WebhookMemberEditedPropChangesPropPermission)
model_rebuild(WebhookMemberEditedPropMember)
model_rebuild(WebhookMemberRemoved)
model_rebuild(WebhookMemberRemovedPropMember)
model_rebuild(WebhookMembershipAdded)
model_rebuild(WebhookMembershipAddedPropMember)
model_rebuild(WebhookMembershipAddedPropSender)
model_rebuild(WebhookMembershipAddedPropTeam)
model_rebuild(WebhookMembershipAddedPropTeamPropParent)
model_rebuild(WebhookMembershipRemoved)
model_rebuild(WebhookMembershipRemovedPropMember)
model_rebuild(WebhookMembershipRemovedPropSender)
model_rebuild(WebhookMembershipRemovedPropTeam)
model_rebuild(WebhookMembershipRemovedPropTeamPropParent)
model_rebuild(WebhookMergeGroupChecksRequested)
model_rebuild(WebhookMergeGroupDestroyed)
model_rebuild(WebhookMetaDeleted)
model_rebuild(WebhookMetaDeletedPropHook)
model_rebuild(WebhookMetaDeletedPropHookPropConfig)
model_rebuild(WebhookMilestoneClosed)
model_rebuild(WebhookMilestoneClosedPropMilestone)
model_rebuild(WebhookMilestoneClosedPropMilestonePropCreator)
model_rebuild(WebhookMilestoneCreated)
model_rebuild(WebhookMilestoneCreatedPropMilestone)
model_rebuild(WebhookMilestoneCreatedPropMilestonePropCreator)
model_rebuild(WebhookMilestoneDeleted)
model_rebuild(WebhookMilestoneDeletedPropMilestone)
model_rebuild(WebhookMilestoneDeletedPropMilestonePropCreator)
model_rebuild(WebhookMilestoneEdited)
model_rebuild(WebhookMilestoneEditedPropChanges)
model_rebuild(WebhookMilestoneEditedPropChangesPropDescription)
model_rebuild(WebhookMilestoneEditedPropChangesPropDueOn)
model_rebuild(WebhookMilestoneEditedPropChangesPropTitle)
model_rebuild(WebhookMilestoneEditedPropMilestone)
model_rebuild(WebhookMilestoneEditedPropMilestonePropCreator)
model_rebuild(WebhookMilestoneOpened)
model_rebuild(WebhookMilestoneOpenedPropMilestone)
model_rebuild(WebhookMilestoneOpenedPropMilestonePropCreator)
model_rebuild(WebhookOrgBlockBlocked)
model_rebuild(WebhookOrgBlockBlockedPropBlockedUser)
model_rebuild(WebhookOrgBlockUnblocked)
model_rebuild(WebhookOrgBlockUnblockedPropBlockedUser)
model_rebuild(WebhookOrganizationDeleted)
model_rebuild(WebhookOrganizationDeletedPropMembership)
model_rebuild(WebhookOrganizationDeletedPropMembershipPropUser)
model_rebuild(WebhookOrganizationMemberAdded)
model_rebuild(WebhookOrganizationMemberAddedPropMembership)
model_rebuild(WebhookOrganizationMemberAddedPropMembershipPropUser)
model_rebuild(WebhookOrganizationMemberInvited)
model_rebuild(WebhookOrganizationMemberInvitedPropInvitation)
model_rebuild(WebhookOrganizationMemberInvitedPropInvitationPropInviter)
model_rebuild(WebhookOrganizationMemberInvitedPropUser)
model_rebuild(WebhookOrganizationMemberRemoved)
model_rebuild(WebhookOrganizationMemberRemovedPropMembership)
model_rebuild(WebhookOrganizationMemberRemovedPropMembershipPropUser)
model_rebuild(WebhookOrganizationRenamed)
model_rebuild(WebhookOrganizationRenamedPropChanges)
model_rebuild(WebhookOrganizationRenamedPropChangesPropLogin)
model_rebuild(WebhookOrganizationRenamedPropMembership)
model_rebuild(WebhookOrganizationRenamedPropMembershipPropUser)
model_rebuild(WebhookRubygemsMetadata)
model_rebuild(WebhookRubygemsMetadataPropVersionInfo)
model_rebuild(WebhookRubygemsMetadataPropMetadata)
model_rebuild(WebhookRubygemsMetadataPropDependenciesItems)
model_rebuild(WebhookPackagePublished)
model_rebuild(WebhookPackagePublishedPropPackage)
model_rebuild(WebhookPackagePublishedPropPackagePropOwner)
model_rebuild(WebhookPackagePublishedPropPackagePropPackageVersionPropAuthor)
model_rebuild(WebhookPackagePublishedPropPackagePropPackageVersionPropBodyOneof1)
model_rebuild(
    WebhookPackagePublishedPropPackagePropPackageVersionPropContainerMetadataPropLabels
)
model_rebuild(
    WebhookPackagePublishedPropPackagePropPackageVersionPropContainerMetadataPropManifest
)
model_rebuild(
    WebhookPackagePublishedPropPackagePropPackageVersionPropContainerMetadataPropTag
)
model_rebuild(WebhookPackagePublishedPropPackagePropPackageVersionPropContainerMetadata)
model_rebuild(
    WebhookPackagePublishedPropPackagePropPackageVersionPropDockerMetadataItems
)
model_rebuild(WebhookPackagePublishedPropPackagePropPackageVersionPropMetadataItems)
model_rebuild(
    WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropAuthor
)
model_rebuild(
    WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropBugs
)
model_rebuild(
    WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropDependencies
)
model_rebuild(
    WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropDevDependencies
)
model_rebuild(
    WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropPeerDependencies
)
model_rebuild(
    WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropOptionalDependencies
)
model_rebuild(
    WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropDist
)
model_rebuild(
    WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropRepository
)
model_rebuild(
    WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropScripts
)
model_rebuild(
    WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropMaintainersItems
)
model_rebuild(
    WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropContributorsItems
)
model_rebuild(
    WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropEngines
)
model_rebuild(
    WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropBin
)
model_rebuild(
    WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropMan
)
model_rebuild(
    WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropDirectories
)
model_rebuild(WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadata)
model_rebuild(
    WebhookPackagePublishedPropPackagePropPackageVersionPropNugetMetadataItems
)
model_rebuild(
    WebhookPackagePublishedPropPackagePropPackageVersionPropNugetMetadataItemsPropValueOneof3
)
model_rebuild(WebhookPackagePublishedPropPackagePropPackageVersionPropPackageFilesItems)
model_rebuild(WebhookPackagePublishedPropPackagePropPackageVersionPropRelease)
model_rebuild(WebhookPackagePublishedPropPackagePropPackageVersionPropReleasePropAuthor)
model_rebuild(WebhookPackagePublishedPropPackagePropPackageVersion)
model_rebuild(WebhookPackagePublishedPropPackagePropRegistry)
model_rebuild(WebhookPackageUpdated)
model_rebuild(WebhookPackageUpdatedPropPackage)
model_rebuild(WebhookPackageUpdatedPropPackagePropOwner)
model_rebuild(WebhookPackageUpdatedPropPackagePropPackageVersion)
model_rebuild(WebhookPackageUpdatedPropPackagePropPackageVersionPropAuthor)
model_rebuild(WebhookPackageUpdatedPropPackagePropPackageVersionPropDockerMetadataItems)
model_rebuild(WebhookPackageUpdatedPropPackagePropPackageVersionPropMetadataItems)
model_rebuild(WebhookPackageUpdatedPropPackagePropPackageVersionPropPackageFilesItems)
model_rebuild(WebhookPackageUpdatedPropPackagePropPackageVersionPropRelease)
model_rebuild(WebhookPackageUpdatedPropPackagePropPackageVersionPropReleasePropAuthor)
model_rebuild(WebhookPackageUpdatedPropPackagePropRegistry)
model_rebuild(WebhookPageBuild)
model_rebuild(WebhookPageBuildPropBuild)
model_rebuild(WebhookPageBuildPropBuildPropError)
model_rebuild(WebhookPageBuildPropBuildPropPusher)
model_rebuild(WebhookPersonalAccessTokenRequestApproved)
model_rebuild(WebhookPersonalAccessTokenRequestCancelled)
model_rebuild(WebhookPersonalAccessTokenRequestCreated)
model_rebuild(WebhookPersonalAccessTokenRequestDenied)
model_rebuild(WebhookPing)
model_rebuild(WebhookPingPropHook)
model_rebuild(WebhookPingPropHookPropConfig)
model_rebuild(WebhookPingFormEncoded)
model_rebuild(WebhookProjectCardConverted)
model_rebuild(WebhookProjectCardConvertedPropChanges)
model_rebuild(WebhookProjectCardConvertedPropChangesPropNote)
model_rebuild(WebhookProjectCardConvertedPropProjectCard)
model_rebuild(WebhookProjectCardConvertedPropProjectCardPropCreator)
model_rebuild(WebhookProjectCardCreated)
model_rebuild(WebhookProjectCardCreatedPropProjectCard)
model_rebuild(WebhookProjectCardCreatedPropProjectCardPropCreator)
model_rebuild(WebhookProjectCardDeleted)
model_rebuild(WebhookProjectCardDeletedPropProjectCard)
model_rebuild(WebhookProjectCardDeletedPropProjectCardPropCreator)
model_rebuild(WebhookProjectCardEdited)
model_rebuild(WebhookProjectCardEditedPropChanges)
model_rebuild(WebhookProjectCardEditedPropChangesPropNote)
model_rebuild(WebhookProjectCardEditedPropProjectCard)
model_rebuild(WebhookProjectCardEditedPropProjectCardPropCreator)
model_rebuild(WebhookProjectCardMoved)
model_rebuild(WebhookProjectCardMovedPropChanges)
model_rebuild(WebhookProjectCardMovedPropChangesPropColumnId)
model_rebuild(WebhookProjectCardMovedPropProjectCard)
model_rebuild(WebhookProjectCardMovedPropProjectCardAllof0)
model_rebuild(WebhookProjectCardMovedPropProjectCardAllof0PropCreator)
model_rebuild(WebhookProjectCardMovedPropProjectCardAllof1)
model_rebuild(WebhookProjectCardMovedPropProjectCardAllof1PropCreator)
model_rebuild(WebhookProjectCardMovedPropProjectCardMergedCreator)
model_rebuild(WebhookProjectClosed)
model_rebuild(WebhookProjectClosedPropProject)
model_rebuild(WebhookProjectClosedPropProjectPropCreator)
model_rebuild(WebhookProjectColumnCreated)
model_rebuild(WebhookProjectColumnCreatedPropProjectColumn)
model_rebuild(WebhookProjectColumnDeleted)
model_rebuild(WebhookProjectColumnDeletedPropProjectColumn)
model_rebuild(WebhookProjectColumnEdited)
model_rebuild(WebhookProjectColumnEditedPropChanges)
model_rebuild(WebhookProjectColumnEditedPropChangesPropName)
model_rebuild(WebhookProjectColumnEditedPropProjectColumn)
model_rebuild(WebhookProjectColumnMoved)
model_rebuild(WebhookProjectColumnMovedPropProjectColumn)
model_rebuild(WebhookProjectCreated)
model_rebuild(WebhookProjectCreatedPropProject)
model_rebuild(WebhookProjectCreatedPropProjectPropCreator)
model_rebuild(WebhookProjectDeleted)
model_rebuild(WebhookProjectDeletedPropProject)
model_rebuild(WebhookProjectDeletedPropProjectPropCreator)
model_rebuild(WebhookProjectEdited)
model_rebuild(WebhookProjectEditedPropChanges)
model_rebuild(WebhookProjectEditedPropChangesPropBody)
model_rebuild(WebhookProjectEditedPropChangesPropName)
model_rebuild(WebhookProjectEditedPropProject)
model_rebuild(WebhookProjectEditedPropProjectPropCreator)
model_rebuild(WebhookProjectReopened)
model_rebuild(WebhookProjectReopenedPropProject)
model_rebuild(WebhookProjectReopenedPropProjectPropCreator)
model_rebuild(WebhookProjectsV2ProjectClosed)
model_rebuild(WebhookProjectsV2ProjectCreated)
model_rebuild(WebhookProjectsV2ProjectDeleted)
model_rebuild(WebhookProjectsV2ProjectEdited)
model_rebuild(WebhookProjectsV2ProjectEditedPropChanges)
model_rebuild(WebhookProjectsV2ProjectEditedPropChangesPropDescription)
model_rebuild(WebhookProjectsV2ProjectEditedPropChangesPropPublic)
model_rebuild(WebhookProjectsV2ProjectEditedPropChangesPropShortDescription)
model_rebuild(WebhookProjectsV2ProjectEditedPropChangesPropTitle)
model_rebuild(WebhookProjectsV2ItemArchived)
model_rebuild(WebhookProjectsV2ItemArchivedPropChanges)
model_rebuild(WebhookProjectsV2ItemArchivedPropChangesPropArchivedAt)
model_rebuild(WebhookProjectsV2ItemConverted)
model_rebuild(WebhookProjectsV2ItemConvertedPropChanges)
model_rebuild(WebhookProjectsV2ItemConvertedPropChangesPropContentType)
model_rebuild(WebhookProjectsV2ItemCreated)
model_rebuild(WebhookProjectsV2ItemDeleted)
model_rebuild(WebhookProjectsV2ItemEdited)
model_rebuild(WebhookProjectsV2ItemEditedPropChangesOneof0)
model_rebuild(WebhookProjectsV2ItemEditedPropChangesOneof0PropFieldValue)
model_rebuild(WebhookProjectsV2ItemEditedPropChangesOneof1)
model_rebuild(WebhookProjectsV2ItemEditedPropChangesOneof1PropBody)
model_rebuild(WebhookProjectsV2ItemReordered)
model_rebuild(WebhookProjectsV2ItemReorderedPropChanges)
model_rebuild(WebhookProjectsV2ItemReorderedPropChangesPropPreviousProjectsV2ItemNodeId)
model_rebuild(WebhookProjectsV2ItemRestored)
model_rebuild(WebhookProjectsV2ItemRestoredPropChanges)
model_rebuild(WebhookProjectsV2ItemRestoredPropChangesPropArchivedAt)
model_rebuild(WebhookProjectsV2ProjectReopened)
model_rebuild(WebhookPublic)
model_rebuild(WebhookPullRequestAssigned)
model_rebuild(WebhookPullRequestAssignedPropAssignee)
model_rebuild(WebhookPullRequestAssignedPropPullRequest)
model_rebuild(WebhookPullRequestAssignedPropPullRequestPropLinks)
model_rebuild(WebhookPullRequestAssignedPropPullRequestPropLinksPropComments)
model_rebuild(WebhookPullRequestAssignedPropPullRequestPropLinksPropCommits)
model_rebuild(WebhookPullRequestAssignedPropPullRequestPropLinksPropHtml)
model_rebuild(WebhookPullRequestAssignedPropPullRequestPropLinksPropIssue)
model_rebuild(WebhookPullRequestAssignedPropPullRequestPropLinksPropReviewComment)
model_rebuild(WebhookPullRequestAssignedPropPullRequestPropLinksPropReviewComments)
model_rebuild(WebhookPullRequestAssignedPropPullRequestPropLinksPropSelf)
model_rebuild(WebhookPullRequestAssignedPropPullRequestPropLinksPropStatuses)
model_rebuild(WebhookPullRequestAssignedPropPullRequestPropAssignee)
model_rebuild(WebhookPullRequestAssignedPropPullRequestPropAssigneesItems)
model_rebuild(WebhookPullRequestAssignedPropPullRequestPropAutoMergePropEnabledBy)
model_rebuild(WebhookPullRequestAssignedPropPullRequestPropAutoMerge)
model_rebuild(WebhookPullRequestAssignedPropPullRequestPropBase)
model_rebuild(WebhookPullRequestAssignedPropPullRequestPropBasePropRepo)
model_rebuild(WebhookPullRequestAssignedPropPullRequestPropBasePropRepoPropLicense)
model_rebuild(WebhookPullRequestAssignedPropPullRequestPropBasePropRepoPropOwner)
model_rebuild(WebhookPullRequestAssignedPropPullRequestPropBasePropRepoPropPermissions)
model_rebuild(WebhookPullRequestAssignedPropPullRequestPropBasePropUser)
model_rebuild(WebhookPullRequestAssignedPropPullRequestPropHead)
model_rebuild(WebhookPullRequestAssignedPropPullRequestPropHeadPropRepoPropLicense)
model_rebuild(WebhookPullRequestAssignedPropPullRequestPropHeadPropRepoPropOwner)
model_rebuild(WebhookPullRequestAssignedPropPullRequestPropHeadPropRepoPropPermissions)
model_rebuild(WebhookPullRequestAssignedPropPullRequestPropHeadPropRepo)
model_rebuild(WebhookPullRequestAssignedPropPullRequestPropHeadPropUser)
model_rebuild(WebhookPullRequestAssignedPropPullRequestPropLabelsItems)
model_rebuild(WebhookPullRequestAssignedPropPullRequestPropMergedBy)
model_rebuild(WebhookPullRequestAssignedPropPullRequestPropMilestonePropCreator)
model_rebuild(WebhookPullRequestAssignedPropPullRequestPropMilestone)
model_rebuild(
    WebhookPullRequestAssignedPropPullRequestPropRequestedReviewersItemsOneof0
)
model_rebuild(
    WebhookPullRequestAssignedPropPullRequestPropRequestedReviewersItemsOneof1
)
model_rebuild(
    WebhookPullRequestAssignedPropPullRequestPropRequestedReviewersItemsOneof1PropParent
)
model_rebuild(WebhookPullRequestAssignedPropPullRequestPropRequestedTeamsItems)
model_rebuild(
    WebhookPullRequestAssignedPropPullRequestPropRequestedTeamsItemsPropParent
)
model_rebuild(WebhookPullRequestAssignedPropPullRequestPropUser)
model_rebuild(WebhookPullRequestAutoMergeDisabled)
model_rebuild(WebhookPullRequestAutoMergeDisabledPropPullRequest)
model_rebuild(WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinks)
model_rebuild(WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropComments)
model_rebuild(WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropCommits)
model_rebuild(WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropHtml)
model_rebuild(WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropIssue)
model_rebuild(
    WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropReviewComment
)
model_rebuild(
    WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropReviewComments
)
model_rebuild(WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropSelf)
model_rebuild(WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropStatuses)
model_rebuild(WebhookPullRequestAutoMergeDisabledPropPullRequestPropAssignee)
model_rebuild(WebhookPullRequestAutoMergeDisabledPropPullRequestPropAssigneesItems)
model_rebuild(
    WebhookPullRequestAutoMergeDisabledPropPullRequestPropAutoMergePropEnabledBy
)
model_rebuild(WebhookPullRequestAutoMergeDisabledPropPullRequestPropAutoMerge)
model_rebuild(WebhookPullRequestAutoMergeDisabledPropPullRequestPropBase)
model_rebuild(WebhookPullRequestAutoMergeDisabledPropPullRequestPropBasePropRepo)
model_rebuild(
    WebhookPullRequestAutoMergeDisabledPropPullRequestPropBasePropRepoPropLicense
)
model_rebuild(
    WebhookPullRequestAutoMergeDisabledPropPullRequestPropBasePropRepoPropOwner
)
model_rebuild(
    WebhookPullRequestAutoMergeDisabledPropPullRequestPropBasePropRepoPropPermissions
)
model_rebuild(WebhookPullRequestAutoMergeDisabledPropPullRequestPropBasePropUser)
model_rebuild(WebhookPullRequestAutoMergeDisabledPropPullRequestPropHead)
model_rebuild(WebhookPullRequestAutoMergeDisabledPropPullRequestPropHeadPropRepo)
model_rebuild(
    WebhookPullRequestAutoMergeDisabledPropPullRequestPropHeadPropRepoPropLicense
)
model_rebuild(
    WebhookPullRequestAutoMergeDisabledPropPullRequestPropHeadPropRepoPropOwner
)
model_rebuild(
    WebhookPullRequestAutoMergeDisabledPropPullRequestPropHeadPropRepoPropPermissions
)
model_rebuild(WebhookPullRequestAutoMergeDisabledPropPullRequestPropHeadPropUser)
model_rebuild(WebhookPullRequestAutoMergeDisabledPropPullRequestPropLabelsItems)
model_rebuild(WebhookPullRequestAutoMergeDisabledPropPullRequestPropMergedBy)
model_rebuild(
    WebhookPullRequestAutoMergeDisabledPropPullRequestPropMilestonePropCreator
)
model_rebuild(WebhookPullRequestAutoMergeDisabledPropPullRequestPropMilestone)
model_rebuild(
    WebhookPullRequestAutoMergeDisabledPropPullRequestPropRequestedReviewersItemsOneof0
)
model_rebuild(
    WebhookPullRequestAutoMergeDisabledPropPullRequestPropRequestedReviewersItemsOneof1
)
model_rebuild(
    WebhookPullRequestAutoMergeDisabledPropPullRequestPropRequestedReviewersItemsOneof1PropParent
)
model_rebuild(WebhookPullRequestAutoMergeDisabledPropPullRequestPropRequestedTeamsItems)
model_rebuild(
    WebhookPullRequestAutoMergeDisabledPropPullRequestPropRequestedTeamsItemsPropParent
)
model_rebuild(WebhookPullRequestAutoMergeDisabledPropPullRequestPropUser)
model_rebuild(WebhookPullRequestAutoMergeEnabled)
model_rebuild(WebhookPullRequestAutoMergeEnabledPropPullRequest)
model_rebuild(WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinks)
model_rebuild(WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropComments)
model_rebuild(WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropCommits)
model_rebuild(WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropHtml)
model_rebuild(WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropIssue)
model_rebuild(
    WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropReviewComment
)
model_rebuild(
    WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropReviewComments
)
model_rebuild(WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropSelf)
model_rebuild(WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropStatuses)
model_rebuild(WebhookPullRequestAutoMergeEnabledPropPullRequestPropAssignee)
model_rebuild(WebhookPullRequestAutoMergeEnabledPropPullRequestPropAssigneesItems)
model_rebuild(
    WebhookPullRequestAutoMergeEnabledPropPullRequestPropAutoMergePropEnabledBy
)
model_rebuild(WebhookPullRequestAutoMergeEnabledPropPullRequestPropAutoMerge)
model_rebuild(WebhookPullRequestAutoMergeEnabledPropPullRequestPropBase)
model_rebuild(WebhookPullRequestAutoMergeEnabledPropPullRequestPropBasePropRepo)
model_rebuild(
    WebhookPullRequestAutoMergeEnabledPropPullRequestPropBasePropRepoPropLicense
)
model_rebuild(
    WebhookPullRequestAutoMergeEnabledPropPullRequestPropBasePropRepoPropOwner
)
model_rebuild(
    WebhookPullRequestAutoMergeEnabledPropPullRequestPropBasePropRepoPropPermissions
)
model_rebuild(WebhookPullRequestAutoMergeEnabledPropPullRequestPropBasePropUser)
model_rebuild(WebhookPullRequestAutoMergeEnabledPropPullRequestPropHead)
model_rebuild(WebhookPullRequestAutoMergeEnabledPropPullRequestPropHeadPropRepo)
model_rebuild(
    WebhookPullRequestAutoMergeEnabledPropPullRequestPropHeadPropRepoPropLicense
)
model_rebuild(
    WebhookPullRequestAutoMergeEnabledPropPullRequestPropHeadPropRepoPropOwner
)
model_rebuild(
    WebhookPullRequestAutoMergeEnabledPropPullRequestPropHeadPropRepoPropPermissions
)
model_rebuild(WebhookPullRequestAutoMergeEnabledPropPullRequestPropHeadPropUser)
model_rebuild(WebhookPullRequestAutoMergeEnabledPropPullRequestPropLabelsItems)
model_rebuild(WebhookPullRequestAutoMergeEnabledPropPullRequestPropMergedBy)
model_rebuild(WebhookPullRequestAutoMergeEnabledPropPullRequestPropMilestonePropCreator)
model_rebuild(WebhookPullRequestAutoMergeEnabledPropPullRequestPropMilestone)
model_rebuild(
    WebhookPullRequestAutoMergeEnabledPropPullRequestPropRequestedReviewersItemsOneof0
)
model_rebuild(
    WebhookPullRequestAutoMergeEnabledPropPullRequestPropRequestedReviewersItemsOneof1
)
model_rebuild(
    WebhookPullRequestAutoMergeEnabledPropPullRequestPropRequestedReviewersItemsOneof1PropParent
)
model_rebuild(WebhookPullRequestAutoMergeEnabledPropPullRequestPropRequestedTeamsItems)
model_rebuild(
    WebhookPullRequestAutoMergeEnabledPropPullRequestPropRequestedTeamsItemsPropParent
)
model_rebuild(WebhookPullRequestAutoMergeEnabledPropPullRequestPropUser)
model_rebuild(WebhookPullRequestClosed)
model_rebuild(WebhookPullRequestClosedPropPullRequest)
model_rebuild(WebhookPullRequestClosedPropPullRequestAllof1)
model_rebuild(WebhookPullRequestConvertedToDraft)
model_rebuild(WebhookPullRequestConvertedToDraftPropPullRequest)
model_rebuild(WebhookPullRequestConvertedToDraftPropPullRequestAllof1)
model_rebuild(WebhookPullRequestDemilestoned)
model_rebuild(WebhookPullRequestDemilestonedPropPullRequest)
model_rebuild(WebhookPullRequestDemilestonedPropPullRequestPropLinks)
model_rebuild(WebhookPullRequestDemilestonedPropPullRequestPropLinksPropComments)
model_rebuild(WebhookPullRequestDemilestonedPropPullRequestPropLinksPropCommits)
model_rebuild(WebhookPullRequestDemilestonedPropPullRequestPropLinksPropHtml)
model_rebuild(WebhookPullRequestDemilestonedPropPullRequestPropLinksPropIssue)
model_rebuild(WebhookPullRequestDemilestonedPropPullRequestPropLinksPropReviewComment)
model_rebuild(WebhookPullRequestDemilestonedPropPullRequestPropLinksPropReviewComments)
model_rebuild(WebhookPullRequestDemilestonedPropPullRequestPropLinksPropSelf)
model_rebuild(WebhookPullRequestDemilestonedPropPullRequestPropLinksPropStatuses)
model_rebuild(WebhookPullRequestDemilestonedPropPullRequestPropAssignee)
model_rebuild(WebhookPullRequestDemilestonedPropPullRequestPropAssigneesItems)
model_rebuild(WebhookPullRequestDemilestonedPropPullRequestPropAutoMergePropEnabledBy)
model_rebuild(WebhookPullRequestDemilestonedPropPullRequestPropAutoMerge)
model_rebuild(WebhookPullRequestDemilestonedPropPullRequestPropBase)
model_rebuild(WebhookPullRequestDemilestonedPropPullRequestPropBasePropRepo)
model_rebuild(WebhookPullRequestDemilestonedPropPullRequestPropBasePropRepoPropLicense)
model_rebuild(WebhookPullRequestDemilestonedPropPullRequestPropBasePropRepoPropOwner)
model_rebuild(
    WebhookPullRequestDemilestonedPropPullRequestPropBasePropRepoPropPermissions
)
model_rebuild(WebhookPullRequestDemilestonedPropPullRequestPropBasePropUser)
model_rebuild(WebhookPullRequestDemilestonedPropPullRequestPropHead)
model_rebuild(WebhookPullRequestDemilestonedPropPullRequestPropHeadPropRepo)
model_rebuild(WebhookPullRequestDemilestonedPropPullRequestPropHeadPropRepoPropLicense)
model_rebuild(WebhookPullRequestDemilestonedPropPullRequestPropHeadPropRepoPropOwner)
model_rebuild(
    WebhookPullRequestDemilestonedPropPullRequestPropHeadPropRepoPropPermissions
)
model_rebuild(WebhookPullRequestDemilestonedPropPullRequestPropHeadPropUser)
model_rebuild(WebhookPullRequestDemilestonedPropPullRequestPropLabelsItems)
model_rebuild(WebhookPullRequestDemilestonedPropPullRequestPropMergedBy)
model_rebuild(WebhookPullRequestDemilestonedPropPullRequestPropMilestonePropCreator)
model_rebuild(WebhookPullRequestDemilestonedPropPullRequestPropMilestone)
model_rebuild(
    WebhookPullRequestDemilestonedPropPullRequestPropRequestedReviewersItemsOneof0
)
model_rebuild(
    WebhookPullRequestDemilestonedPropPullRequestPropRequestedReviewersItemsOneof1
)
model_rebuild(
    WebhookPullRequestDemilestonedPropPullRequestPropRequestedReviewersItemsOneof1PropParent
)
model_rebuild(WebhookPullRequestDemilestonedPropPullRequestPropRequestedTeamsItems)
model_rebuild(
    WebhookPullRequestDemilestonedPropPullRequestPropRequestedTeamsItemsPropParent
)
model_rebuild(WebhookPullRequestDemilestonedPropPullRequestPropUser)
model_rebuild(WebhookPullRequestDequeued)
model_rebuild(WebhookPullRequestDequeuedPropPullRequest)
model_rebuild(WebhookPullRequestDequeuedPropPullRequestPropLinks)
model_rebuild(WebhookPullRequestDequeuedPropPullRequestPropLinksPropComments)
model_rebuild(WebhookPullRequestDequeuedPropPullRequestPropLinksPropCommits)
model_rebuild(WebhookPullRequestDequeuedPropPullRequestPropLinksPropHtml)
model_rebuild(WebhookPullRequestDequeuedPropPullRequestPropLinksPropIssue)
model_rebuild(WebhookPullRequestDequeuedPropPullRequestPropLinksPropReviewComment)
model_rebuild(WebhookPullRequestDequeuedPropPullRequestPropLinksPropReviewComments)
model_rebuild(WebhookPullRequestDequeuedPropPullRequestPropLinksPropSelf)
model_rebuild(WebhookPullRequestDequeuedPropPullRequestPropLinksPropStatuses)
model_rebuild(WebhookPullRequestDequeuedPropPullRequestPropAssignee)
model_rebuild(WebhookPullRequestDequeuedPropPullRequestPropAssigneesItems)
model_rebuild(WebhookPullRequestDequeuedPropPullRequestPropAutoMergePropEnabledBy)
model_rebuild(WebhookPullRequestDequeuedPropPullRequestPropAutoMerge)
model_rebuild(WebhookPullRequestDequeuedPropPullRequestPropBase)
model_rebuild(WebhookPullRequestDequeuedPropPullRequestPropBasePropRepo)
model_rebuild(WebhookPullRequestDequeuedPropPullRequestPropBasePropRepoPropLicense)
model_rebuild(WebhookPullRequestDequeuedPropPullRequestPropBasePropRepoPropOwner)
model_rebuild(WebhookPullRequestDequeuedPropPullRequestPropBasePropRepoPropPermissions)
model_rebuild(WebhookPullRequestDequeuedPropPullRequestPropBasePropUser)
model_rebuild(WebhookPullRequestDequeuedPropPullRequestPropHead)
model_rebuild(WebhookPullRequestDequeuedPropPullRequestPropHeadPropRepo)
model_rebuild(WebhookPullRequestDequeuedPropPullRequestPropHeadPropRepoPropLicense)
model_rebuild(WebhookPullRequestDequeuedPropPullRequestPropHeadPropRepoPropOwner)
model_rebuild(WebhookPullRequestDequeuedPropPullRequestPropHeadPropRepoPropPermissions)
model_rebuild(WebhookPullRequestDequeuedPropPullRequestPropHeadPropUser)
model_rebuild(WebhookPullRequestDequeuedPropPullRequestPropLabelsItems)
model_rebuild(WebhookPullRequestDequeuedPropPullRequestPropMergedBy)
model_rebuild(WebhookPullRequestDequeuedPropPullRequestPropMilestonePropCreator)
model_rebuild(WebhookPullRequestDequeuedPropPullRequestPropMilestone)
model_rebuild(
    WebhookPullRequestDequeuedPropPullRequestPropRequestedReviewersItemsOneof0
)
model_rebuild(
    WebhookPullRequestDequeuedPropPullRequestPropRequestedReviewersItemsOneof1
)
model_rebuild(
    WebhookPullRequestDequeuedPropPullRequestPropRequestedReviewersItemsOneof1PropParent
)
model_rebuild(WebhookPullRequestDequeuedPropPullRequestPropRequestedTeamsItems)
model_rebuild(
    WebhookPullRequestDequeuedPropPullRequestPropRequestedTeamsItemsPropParent
)
model_rebuild(WebhookPullRequestDequeuedPropPullRequestPropUser)
model_rebuild(WebhookPullRequestEdited)
model_rebuild(WebhookPullRequestEditedPropChanges)
model_rebuild(WebhookPullRequestEditedPropChangesPropBase)
model_rebuild(WebhookPullRequestEditedPropChangesPropBasePropRef)
model_rebuild(WebhookPullRequestEditedPropChangesPropBasePropSha)
model_rebuild(WebhookPullRequestEditedPropChangesPropBody)
model_rebuild(WebhookPullRequestEditedPropChangesPropTitle)
model_rebuild(WebhookPullRequestEditedPropPullRequest)
model_rebuild(WebhookPullRequestEditedPropPullRequestAllof1)
model_rebuild(WebhookPullRequestEnqueued)
model_rebuild(WebhookPullRequestEnqueuedPropPullRequest)
model_rebuild(WebhookPullRequestEnqueuedPropPullRequestPropLinks)
model_rebuild(WebhookPullRequestEnqueuedPropPullRequestPropLinksPropComments)
model_rebuild(WebhookPullRequestEnqueuedPropPullRequestPropLinksPropCommits)
model_rebuild(WebhookPullRequestEnqueuedPropPullRequestPropLinksPropHtml)
model_rebuild(WebhookPullRequestEnqueuedPropPullRequestPropLinksPropIssue)
model_rebuild(WebhookPullRequestEnqueuedPropPullRequestPropLinksPropReviewComment)
model_rebuild(WebhookPullRequestEnqueuedPropPullRequestPropLinksPropReviewComments)
model_rebuild(WebhookPullRequestEnqueuedPropPullRequestPropLinksPropSelf)
model_rebuild(WebhookPullRequestEnqueuedPropPullRequestPropLinksPropStatuses)
model_rebuild(WebhookPullRequestEnqueuedPropPullRequestPropAssignee)
model_rebuild(WebhookPullRequestEnqueuedPropPullRequestPropAssigneesItems)
model_rebuild(WebhookPullRequestEnqueuedPropPullRequestPropAutoMergePropEnabledBy)
model_rebuild(WebhookPullRequestEnqueuedPropPullRequestPropAutoMerge)
model_rebuild(WebhookPullRequestEnqueuedPropPullRequestPropBase)
model_rebuild(WebhookPullRequestEnqueuedPropPullRequestPropBasePropRepo)
model_rebuild(WebhookPullRequestEnqueuedPropPullRequestPropBasePropRepoPropLicense)
model_rebuild(WebhookPullRequestEnqueuedPropPullRequestPropBasePropRepoPropOwner)
model_rebuild(WebhookPullRequestEnqueuedPropPullRequestPropBasePropRepoPropPermissions)
model_rebuild(WebhookPullRequestEnqueuedPropPullRequestPropBasePropUser)
model_rebuild(WebhookPullRequestEnqueuedPropPullRequestPropHead)
model_rebuild(WebhookPullRequestEnqueuedPropPullRequestPropHeadPropRepo)
model_rebuild(WebhookPullRequestEnqueuedPropPullRequestPropHeadPropRepoPropLicense)
model_rebuild(WebhookPullRequestEnqueuedPropPullRequestPropHeadPropRepoPropOwner)
model_rebuild(WebhookPullRequestEnqueuedPropPullRequestPropHeadPropRepoPropPermissions)
model_rebuild(WebhookPullRequestEnqueuedPropPullRequestPropHeadPropUser)
model_rebuild(WebhookPullRequestEnqueuedPropPullRequestPropLabelsItems)
model_rebuild(WebhookPullRequestEnqueuedPropPullRequestPropMergedBy)
model_rebuild(WebhookPullRequestEnqueuedPropPullRequestPropMilestonePropCreator)
model_rebuild(WebhookPullRequestEnqueuedPropPullRequestPropMilestone)
model_rebuild(
    WebhookPullRequestEnqueuedPropPullRequestPropRequestedReviewersItemsOneof0
)
model_rebuild(
    WebhookPullRequestEnqueuedPropPullRequestPropRequestedReviewersItemsOneof1
)
model_rebuild(
    WebhookPullRequestEnqueuedPropPullRequestPropRequestedReviewersItemsOneof1PropParent
)
model_rebuild(WebhookPullRequestEnqueuedPropPullRequestPropRequestedTeamsItems)
model_rebuild(
    WebhookPullRequestEnqueuedPropPullRequestPropRequestedTeamsItemsPropParent
)
model_rebuild(WebhookPullRequestEnqueuedPropPullRequestPropUser)
model_rebuild(WebhookPullRequestLabeled)
model_rebuild(WebhookPullRequestLabeledPropLabel)
model_rebuild(WebhookPullRequestLabeledPropPullRequest)
model_rebuild(WebhookPullRequestLabeledPropPullRequestPropLinks)
model_rebuild(WebhookPullRequestLabeledPropPullRequestPropLinksPropComments)
model_rebuild(WebhookPullRequestLabeledPropPullRequestPropLinksPropCommits)
model_rebuild(WebhookPullRequestLabeledPropPullRequestPropLinksPropHtml)
model_rebuild(WebhookPullRequestLabeledPropPullRequestPropLinksPropIssue)
model_rebuild(WebhookPullRequestLabeledPropPullRequestPropLinksPropReviewComment)
model_rebuild(WebhookPullRequestLabeledPropPullRequestPropLinksPropReviewComments)
model_rebuild(WebhookPullRequestLabeledPropPullRequestPropLinksPropSelf)
model_rebuild(WebhookPullRequestLabeledPropPullRequestPropLinksPropStatuses)
model_rebuild(WebhookPullRequestLabeledPropPullRequestPropAssignee)
model_rebuild(WebhookPullRequestLabeledPropPullRequestPropAssigneesItems)
model_rebuild(WebhookPullRequestLabeledPropPullRequestPropAutoMergePropEnabledBy)
model_rebuild(WebhookPullRequestLabeledPropPullRequestPropAutoMerge)
model_rebuild(WebhookPullRequestLabeledPropPullRequestPropBase)
model_rebuild(WebhookPullRequestLabeledPropPullRequestPropBasePropRepo)
model_rebuild(WebhookPullRequestLabeledPropPullRequestPropBasePropRepoPropLicense)
model_rebuild(WebhookPullRequestLabeledPropPullRequestPropBasePropRepoPropOwner)
model_rebuild(WebhookPullRequestLabeledPropPullRequestPropBasePropRepoPropPermissions)
model_rebuild(WebhookPullRequestLabeledPropPullRequestPropBasePropUser)
model_rebuild(WebhookPullRequestLabeledPropPullRequestPropHead)
model_rebuild(WebhookPullRequestLabeledPropPullRequestPropHeadPropRepoPropLicense)
model_rebuild(WebhookPullRequestLabeledPropPullRequestPropHeadPropRepoPropOwner)
model_rebuild(WebhookPullRequestLabeledPropPullRequestPropHeadPropRepoPropPermissions)
model_rebuild(WebhookPullRequestLabeledPropPullRequestPropHeadPropRepo)
model_rebuild(WebhookPullRequestLabeledPropPullRequestPropHeadPropUser)
model_rebuild(WebhookPullRequestLabeledPropPullRequestPropLabelsItems)
model_rebuild(WebhookPullRequestLabeledPropPullRequestPropMergedBy)
model_rebuild(WebhookPullRequestLabeledPropPullRequestPropMilestonePropCreator)
model_rebuild(WebhookPullRequestLabeledPropPullRequestPropMilestone)
model_rebuild(WebhookPullRequestLabeledPropPullRequestPropRequestedReviewersItemsOneof0)
model_rebuild(WebhookPullRequestLabeledPropPullRequestPropRequestedReviewersItemsOneof1)
model_rebuild(
    WebhookPullRequestLabeledPropPullRequestPropRequestedReviewersItemsOneof1PropParent
)
model_rebuild(WebhookPullRequestLabeledPropPullRequestPropRequestedTeamsItems)
model_rebuild(WebhookPullRequestLabeledPropPullRequestPropRequestedTeamsItemsPropParent)
model_rebuild(WebhookPullRequestLabeledPropPullRequestPropUser)
model_rebuild(WebhookPullRequestLocked)
model_rebuild(WebhookPullRequestLockedPropPullRequest)
model_rebuild(WebhookPullRequestLockedPropPullRequestPropLinks)
model_rebuild(WebhookPullRequestLockedPropPullRequestPropLinksPropComments)
model_rebuild(WebhookPullRequestLockedPropPullRequestPropLinksPropCommits)
model_rebuild(WebhookPullRequestLockedPropPullRequestPropLinksPropHtml)
model_rebuild(WebhookPullRequestLockedPropPullRequestPropLinksPropIssue)
model_rebuild(WebhookPullRequestLockedPropPullRequestPropLinksPropReviewComment)
model_rebuild(WebhookPullRequestLockedPropPullRequestPropLinksPropReviewComments)
model_rebuild(WebhookPullRequestLockedPropPullRequestPropLinksPropSelf)
model_rebuild(WebhookPullRequestLockedPropPullRequestPropLinksPropStatuses)
model_rebuild(WebhookPullRequestLockedPropPullRequestPropAssignee)
model_rebuild(WebhookPullRequestLockedPropPullRequestPropAssigneesItems)
model_rebuild(WebhookPullRequestLockedPropPullRequestPropAutoMergePropEnabledBy)
model_rebuild(WebhookPullRequestLockedPropPullRequestPropAutoMerge)
model_rebuild(WebhookPullRequestLockedPropPullRequestPropBase)
model_rebuild(WebhookPullRequestLockedPropPullRequestPropBasePropRepo)
model_rebuild(WebhookPullRequestLockedPropPullRequestPropBasePropRepoPropLicense)
model_rebuild(WebhookPullRequestLockedPropPullRequestPropBasePropRepoPropOwner)
model_rebuild(WebhookPullRequestLockedPropPullRequestPropBasePropRepoPropPermissions)
model_rebuild(WebhookPullRequestLockedPropPullRequestPropBasePropUser)
model_rebuild(WebhookPullRequestLockedPropPullRequestPropHead)
model_rebuild(WebhookPullRequestLockedPropPullRequestPropHeadPropRepoPropLicense)
model_rebuild(WebhookPullRequestLockedPropPullRequestPropHeadPropRepoPropOwner)
model_rebuild(WebhookPullRequestLockedPropPullRequestPropHeadPropRepoPropPermissions)
model_rebuild(WebhookPullRequestLockedPropPullRequestPropHeadPropRepo)
model_rebuild(WebhookPullRequestLockedPropPullRequestPropHeadPropUser)
model_rebuild(WebhookPullRequestLockedPropPullRequestPropLabelsItems)
model_rebuild(WebhookPullRequestLockedPropPullRequestPropMergedBy)
model_rebuild(WebhookPullRequestLockedPropPullRequestPropMilestonePropCreator)
model_rebuild(WebhookPullRequestLockedPropPullRequestPropMilestone)
model_rebuild(WebhookPullRequestLockedPropPullRequestPropRequestedReviewersItemsOneof0)
model_rebuild(WebhookPullRequestLockedPropPullRequestPropRequestedReviewersItemsOneof1)
model_rebuild(
    WebhookPullRequestLockedPropPullRequestPropRequestedReviewersItemsOneof1PropParent
)
model_rebuild(WebhookPullRequestLockedPropPullRequestPropRequestedTeamsItems)
model_rebuild(WebhookPullRequestLockedPropPullRequestPropRequestedTeamsItemsPropParent)
model_rebuild(WebhookPullRequestLockedPropPullRequestPropUser)
model_rebuild(WebhookPullRequestMilestoned)
model_rebuild(WebhookPullRequestMilestonedPropPullRequest)
model_rebuild(WebhookPullRequestMilestonedPropPullRequestPropLinks)
model_rebuild(WebhookPullRequestMilestonedPropPullRequestPropLinksPropComments)
model_rebuild(WebhookPullRequestMilestonedPropPullRequestPropLinksPropCommits)
model_rebuild(WebhookPullRequestMilestonedPropPullRequestPropLinksPropHtml)
model_rebuild(WebhookPullRequestMilestonedPropPullRequestPropLinksPropIssue)
model_rebuild(WebhookPullRequestMilestonedPropPullRequestPropLinksPropReviewComment)
model_rebuild(WebhookPullRequestMilestonedPropPullRequestPropLinksPropReviewComments)
model_rebuild(WebhookPullRequestMilestonedPropPullRequestPropLinksPropSelf)
model_rebuild(WebhookPullRequestMilestonedPropPullRequestPropLinksPropStatuses)
model_rebuild(WebhookPullRequestMilestonedPropPullRequestPropAssignee)
model_rebuild(WebhookPullRequestMilestonedPropPullRequestPropAssigneesItems)
model_rebuild(WebhookPullRequestMilestonedPropPullRequestPropAutoMergePropEnabledBy)
model_rebuild(WebhookPullRequestMilestonedPropPullRequestPropAutoMerge)
model_rebuild(WebhookPullRequestMilestonedPropPullRequestPropBase)
model_rebuild(WebhookPullRequestMilestonedPropPullRequestPropBasePropRepo)
model_rebuild(WebhookPullRequestMilestonedPropPullRequestPropBasePropRepoPropLicense)
model_rebuild(WebhookPullRequestMilestonedPropPullRequestPropBasePropRepoPropOwner)
model_rebuild(
    WebhookPullRequestMilestonedPropPullRequestPropBasePropRepoPropPermissions
)
model_rebuild(WebhookPullRequestMilestonedPropPullRequestPropBasePropUser)
model_rebuild(WebhookPullRequestMilestonedPropPullRequestPropHead)
model_rebuild(WebhookPullRequestMilestonedPropPullRequestPropHeadPropRepo)
model_rebuild(WebhookPullRequestMilestonedPropPullRequestPropHeadPropRepoPropLicense)
model_rebuild(WebhookPullRequestMilestonedPropPullRequestPropHeadPropRepoPropOwner)
model_rebuild(
    WebhookPullRequestMilestonedPropPullRequestPropHeadPropRepoPropPermissions
)
model_rebuild(WebhookPullRequestMilestonedPropPullRequestPropHeadPropUser)
model_rebuild(WebhookPullRequestMilestonedPropPullRequestPropLabelsItems)
model_rebuild(WebhookPullRequestMilestonedPropPullRequestPropMergedBy)
model_rebuild(WebhookPullRequestMilestonedPropPullRequestPropMilestonePropCreator)
model_rebuild(WebhookPullRequestMilestonedPropPullRequestPropMilestone)
model_rebuild(
    WebhookPullRequestMilestonedPropPullRequestPropRequestedReviewersItemsOneof0
)
model_rebuild(
    WebhookPullRequestMilestonedPropPullRequestPropRequestedReviewersItemsOneof1
)
model_rebuild(
    WebhookPullRequestMilestonedPropPullRequestPropRequestedReviewersItemsOneof1PropParent
)
model_rebuild(WebhookPullRequestMilestonedPropPullRequestPropRequestedTeamsItems)
model_rebuild(
    WebhookPullRequestMilestonedPropPullRequestPropRequestedTeamsItemsPropParent
)
model_rebuild(WebhookPullRequestMilestonedPropPullRequestPropUser)
model_rebuild(WebhookPullRequestOpened)
model_rebuild(WebhookPullRequestOpenedPropPullRequest)
model_rebuild(WebhookPullRequestOpenedPropPullRequestAllof1)
model_rebuild(WebhookPullRequestReadyForReview)
model_rebuild(WebhookPullRequestReadyForReviewPropPullRequest)
model_rebuild(WebhookPullRequestReadyForReviewPropPullRequestAllof1)
model_rebuild(WebhookPullRequestReopened)
model_rebuild(WebhookPullRequestReopenedPropPullRequest)
model_rebuild(WebhookPullRequestReopenedPropPullRequestAllof1)
model_rebuild(WebhookPullRequestReviewCommentCreated)
model_rebuild(WebhookPullRequestReviewCommentCreatedPropComment)
model_rebuild(WebhookPullRequestReviewCommentCreatedPropCommentPropLinks)
model_rebuild(WebhookPullRequestReviewCommentCreatedPropCommentPropLinksPropHtml)
model_rebuild(WebhookPullRequestReviewCommentCreatedPropCommentPropLinksPropPullRequest)
model_rebuild(WebhookPullRequestReviewCommentCreatedPropCommentPropLinksPropSelf)
model_rebuild(WebhookPullRequestReviewCommentCreatedPropCommentPropReactions)
model_rebuild(WebhookPullRequestReviewCommentCreatedPropCommentPropUser)
model_rebuild(WebhookPullRequestReviewCommentCreatedPropPullRequest)
model_rebuild(WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinks)
model_rebuild(
    WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropComments
)
model_rebuild(WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropCommits)
model_rebuild(WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropHtml)
model_rebuild(WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropIssue)
model_rebuild(
    WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropReviewComment
)
model_rebuild(
    WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropReviewComments
)
model_rebuild(WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropSelf)
model_rebuild(
    WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropStatuses
)
model_rebuild(WebhookPullRequestReviewCommentCreatedPropPullRequestPropAssignee)
model_rebuild(WebhookPullRequestReviewCommentCreatedPropPullRequestPropAssigneesItems)
model_rebuild(
    WebhookPullRequestReviewCommentCreatedPropPullRequestPropAutoMergePropEnabledBy
)
model_rebuild(WebhookPullRequestReviewCommentCreatedPropPullRequestPropAutoMerge)
model_rebuild(WebhookPullRequestReviewCommentCreatedPropPullRequestPropBase)
model_rebuild(WebhookPullRequestReviewCommentCreatedPropPullRequestPropBasePropRepo)
model_rebuild(
    WebhookPullRequestReviewCommentCreatedPropPullRequestPropBasePropRepoPropLicense
)
model_rebuild(
    WebhookPullRequestReviewCommentCreatedPropPullRequestPropBasePropRepoPropOwner
)
model_rebuild(
    WebhookPullRequestReviewCommentCreatedPropPullRequestPropBasePropRepoPropPermissions
)
model_rebuild(WebhookPullRequestReviewCommentCreatedPropPullRequestPropBasePropUser)
model_rebuild(WebhookPullRequestReviewCommentCreatedPropPullRequestPropHead)
model_rebuild(
    WebhookPullRequestReviewCommentCreatedPropPullRequestPropHeadPropRepoPropLicense
)
model_rebuild(
    WebhookPullRequestReviewCommentCreatedPropPullRequestPropHeadPropRepoPropOwner
)
model_rebuild(
    WebhookPullRequestReviewCommentCreatedPropPullRequestPropHeadPropRepoPropPermissions
)
model_rebuild(WebhookPullRequestReviewCommentCreatedPropPullRequestPropHeadPropRepo)
model_rebuild(WebhookPullRequestReviewCommentCreatedPropPullRequestPropHeadPropUser)
model_rebuild(WebhookPullRequestReviewCommentCreatedPropPullRequestPropLabelsItems)
model_rebuild(
    WebhookPullRequestReviewCommentCreatedPropPullRequestPropMilestonePropCreator
)
model_rebuild(WebhookPullRequestReviewCommentCreatedPropPullRequestPropMilestone)
model_rebuild(
    WebhookPullRequestReviewCommentCreatedPropPullRequestPropRequestedReviewersItemsOneof0
)
model_rebuild(
    WebhookPullRequestReviewCommentCreatedPropPullRequestPropRequestedReviewersItemsOneof1
)
model_rebuild(
    WebhookPullRequestReviewCommentCreatedPropPullRequestPropRequestedReviewersItemsOneof1PropParent
)
model_rebuild(
    WebhookPullRequestReviewCommentCreatedPropPullRequestPropRequestedTeamsItems
)
model_rebuild(
    WebhookPullRequestReviewCommentCreatedPropPullRequestPropRequestedTeamsItemsPropParent
)
model_rebuild(WebhookPullRequestReviewCommentCreatedPropPullRequestPropUser)
model_rebuild(WebhookPullRequestReviewCommentDeleted)
model_rebuild(WebhookPullRequestReviewCommentDeletedPropComment)
model_rebuild(WebhookPullRequestReviewCommentDeletedPropCommentPropLinks)
model_rebuild(WebhookPullRequestReviewCommentDeletedPropCommentPropLinksPropHtml)
model_rebuild(WebhookPullRequestReviewCommentDeletedPropCommentPropLinksPropPullRequest)
model_rebuild(WebhookPullRequestReviewCommentDeletedPropCommentPropLinksPropSelf)
model_rebuild(WebhookPullRequestReviewCommentDeletedPropCommentPropReactions)
model_rebuild(WebhookPullRequestReviewCommentDeletedPropCommentPropUser)
model_rebuild(WebhookPullRequestReviewCommentDeletedPropPullRequest)
model_rebuild(WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinks)
model_rebuild(
    WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropComments
)
model_rebuild(WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropCommits)
model_rebuild(WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropHtml)
model_rebuild(WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropIssue)
model_rebuild(
    WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropReviewComment
)
model_rebuild(
    WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropReviewComments
)
model_rebuild(WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropSelf)
model_rebuild(
    WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropStatuses
)
model_rebuild(WebhookPullRequestReviewCommentDeletedPropPullRequestPropAssignee)
model_rebuild(WebhookPullRequestReviewCommentDeletedPropPullRequestPropAssigneesItems)
model_rebuild(
    WebhookPullRequestReviewCommentDeletedPropPullRequestPropAutoMergePropEnabledBy
)
model_rebuild(WebhookPullRequestReviewCommentDeletedPropPullRequestPropAutoMerge)
model_rebuild(WebhookPullRequestReviewCommentDeletedPropPullRequestPropBase)
model_rebuild(WebhookPullRequestReviewCommentDeletedPropPullRequestPropBasePropRepo)
model_rebuild(
    WebhookPullRequestReviewCommentDeletedPropPullRequestPropBasePropRepoPropLicense
)
model_rebuild(
    WebhookPullRequestReviewCommentDeletedPropPullRequestPropBasePropRepoPropOwner
)
model_rebuild(
    WebhookPullRequestReviewCommentDeletedPropPullRequestPropBasePropRepoPropPermissions
)
model_rebuild(WebhookPullRequestReviewCommentDeletedPropPullRequestPropBasePropUser)
model_rebuild(WebhookPullRequestReviewCommentDeletedPropPullRequestPropHead)
model_rebuild(
    WebhookPullRequestReviewCommentDeletedPropPullRequestPropHeadPropRepoPropLicense
)
model_rebuild(
    WebhookPullRequestReviewCommentDeletedPropPullRequestPropHeadPropRepoPropOwner
)
model_rebuild(
    WebhookPullRequestReviewCommentDeletedPropPullRequestPropHeadPropRepoPropPermissions
)
model_rebuild(WebhookPullRequestReviewCommentDeletedPropPullRequestPropHeadPropRepo)
model_rebuild(WebhookPullRequestReviewCommentDeletedPropPullRequestPropHeadPropUser)
model_rebuild(WebhookPullRequestReviewCommentDeletedPropPullRequestPropLabelsItems)
model_rebuild(
    WebhookPullRequestReviewCommentDeletedPropPullRequestPropMilestonePropCreator
)
model_rebuild(WebhookPullRequestReviewCommentDeletedPropPullRequestPropMilestone)
model_rebuild(
    WebhookPullRequestReviewCommentDeletedPropPullRequestPropRequestedReviewersItemsOneof0
)
model_rebuild(
    WebhookPullRequestReviewCommentDeletedPropPullRequestPropRequestedReviewersItemsOneof1
)
model_rebuild(
    WebhookPullRequestReviewCommentDeletedPropPullRequestPropRequestedReviewersItemsOneof1PropParent
)
model_rebuild(
    WebhookPullRequestReviewCommentDeletedPropPullRequestPropRequestedTeamsItems
)
model_rebuild(
    WebhookPullRequestReviewCommentDeletedPropPullRequestPropRequestedTeamsItemsPropParent
)
model_rebuild(WebhookPullRequestReviewCommentDeletedPropPullRequestPropUser)
model_rebuild(WebhookPullRequestReviewCommentEdited)
model_rebuild(WebhookPullRequestReviewCommentEditedPropChanges)
model_rebuild(WebhookPullRequestReviewCommentEditedPropChangesPropBody)
model_rebuild(WebhookPullRequestReviewCommentEditedPropComment)
model_rebuild(WebhookPullRequestReviewCommentEditedPropCommentPropLinks)
model_rebuild(WebhookPullRequestReviewCommentEditedPropCommentPropLinksPropHtml)
model_rebuild(WebhookPullRequestReviewCommentEditedPropCommentPropLinksPropPullRequest)
model_rebuild(WebhookPullRequestReviewCommentEditedPropCommentPropLinksPropSelf)
model_rebuild(WebhookPullRequestReviewCommentEditedPropCommentPropReactions)
model_rebuild(WebhookPullRequestReviewCommentEditedPropCommentPropUser)
model_rebuild(WebhookPullRequestReviewCommentEditedPropPullRequest)
model_rebuild(WebhookPullRequestReviewCommentEditedPropPullRequestPropLinks)
model_rebuild(WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropComments)
model_rebuild(WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropCommits)
model_rebuild(WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropHtml)
model_rebuild(WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropIssue)
model_rebuild(
    WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropReviewComment
)
model_rebuild(
    WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropReviewComments
)
model_rebuild(WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropSelf)
model_rebuild(WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropStatuses)
model_rebuild(WebhookPullRequestReviewCommentEditedPropPullRequestPropAssignee)
model_rebuild(WebhookPullRequestReviewCommentEditedPropPullRequestPropAssigneesItems)
model_rebuild(
    WebhookPullRequestReviewCommentEditedPropPullRequestPropAutoMergePropEnabledBy
)
model_rebuild(WebhookPullRequestReviewCommentEditedPropPullRequestPropAutoMerge)
model_rebuild(WebhookPullRequestReviewCommentEditedPropPullRequestPropBase)
model_rebuild(WebhookPullRequestReviewCommentEditedPropPullRequestPropBasePropRepo)
model_rebuild(
    WebhookPullRequestReviewCommentEditedPropPullRequestPropBasePropRepoPropLicense
)
model_rebuild(
    WebhookPullRequestReviewCommentEditedPropPullRequestPropBasePropRepoPropOwner
)
model_rebuild(
    WebhookPullRequestReviewCommentEditedPropPullRequestPropBasePropRepoPropPermissions
)
model_rebuild(WebhookPullRequestReviewCommentEditedPropPullRequestPropBasePropUser)
model_rebuild(WebhookPullRequestReviewCommentEditedPropPullRequestPropHead)
model_rebuild(
    WebhookPullRequestReviewCommentEditedPropPullRequestPropHeadPropRepoPropLicense
)
model_rebuild(
    WebhookPullRequestReviewCommentEditedPropPullRequestPropHeadPropRepoPropOwner
)
model_rebuild(
    WebhookPullRequestReviewCommentEditedPropPullRequestPropHeadPropRepoPropPermissions
)
model_rebuild(WebhookPullRequestReviewCommentEditedPropPullRequestPropHeadPropRepo)
model_rebuild(WebhookPullRequestReviewCommentEditedPropPullRequestPropHeadPropUser)
model_rebuild(WebhookPullRequestReviewCommentEditedPropPullRequestPropLabelsItems)
model_rebuild(
    WebhookPullRequestReviewCommentEditedPropPullRequestPropMilestonePropCreator
)
model_rebuild(WebhookPullRequestReviewCommentEditedPropPullRequestPropMilestone)
model_rebuild(
    WebhookPullRequestReviewCommentEditedPropPullRequestPropRequestedReviewersItemsOneof0
)
model_rebuild(
    WebhookPullRequestReviewCommentEditedPropPullRequestPropRequestedReviewersItemsOneof1
)
model_rebuild(
    WebhookPullRequestReviewCommentEditedPropPullRequestPropRequestedReviewersItemsOneof1PropParent
)
model_rebuild(
    WebhookPullRequestReviewCommentEditedPropPullRequestPropRequestedTeamsItems
)
model_rebuild(
    WebhookPullRequestReviewCommentEditedPropPullRequestPropRequestedTeamsItemsPropParent
)
model_rebuild(WebhookPullRequestReviewCommentEditedPropPullRequestPropUser)
model_rebuild(WebhookPullRequestReviewDismissed)
model_rebuild(WebhookPullRequestReviewDismissedPropPullRequest)
model_rebuild(WebhookPullRequestReviewDismissedPropPullRequestPropLinks)
model_rebuild(WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropComments)
model_rebuild(WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropCommits)
model_rebuild(WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropHtml)
model_rebuild(WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropIssue)
model_rebuild(
    WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropReviewComment
)
model_rebuild(
    WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropReviewComments
)
model_rebuild(WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropSelf)
model_rebuild(WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropStatuses)
model_rebuild(WebhookPullRequestReviewDismissedPropPullRequestPropAssignee)
model_rebuild(WebhookPullRequestReviewDismissedPropPullRequestPropAssigneesItems)
model_rebuild(
    WebhookPullRequestReviewDismissedPropPullRequestPropAutoMergePropEnabledBy
)
model_rebuild(WebhookPullRequestReviewDismissedPropPullRequestPropAutoMerge)
model_rebuild(WebhookPullRequestReviewDismissedPropPullRequestPropBase)
model_rebuild(WebhookPullRequestReviewDismissedPropPullRequestPropBasePropRepo)
model_rebuild(
    WebhookPullRequestReviewDismissedPropPullRequestPropBasePropRepoPropLicense
)
model_rebuild(WebhookPullRequestReviewDismissedPropPullRequestPropBasePropRepoPropOwner)
model_rebuild(
    WebhookPullRequestReviewDismissedPropPullRequestPropBasePropRepoPropPermissions
)
model_rebuild(WebhookPullRequestReviewDismissedPropPullRequestPropBasePropUser)
model_rebuild(WebhookPullRequestReviewDismissedPropPullRequestPropHead)
model_rebuild(
    WebhookPullRequestReviewDismissedPropPullRequestPropHeadPropRepoPropLicense
)
model_rebuild(WebhookPullRequestReviewDismissedPropPullRequestPropHeadPropRepoPropOwner)
model_rebuild(
    WebhookPullRequestReviewDismissedPropPullRequestPropHeadPropRepoPropPermissions
)
model_rebuild(WebhookPullRequestReviewDismissedPropPullRequestPropHeadPropRepo)
model_rebuild(WebhookPullRequestReviewDismissedPropPullRequestPropHeadPropUser)
model_rebuild(WebhookPullRequestReviewDismissedPropPullRequestPropLabelsItems)
model_rebuild(WebhookPullRequestReviewDismissedPropPullRequestPropMilestonePropCreator)
model_rebuild(WebhookPullRequestReviewDismissedPropPullRequestPropMilestone)
model_rebuild(
    WebhookPullRequestReviewDismissedPropPullRequestPropRequestedReviewersItemsOneof0
)
model_rebuild(
    WebhookPullRequestReviewDismissedPropPullRequestPropRequestedReviewersItemsOneof1
)
model_rebuild(
    WebhookPullRequestReviewDismissedPropPullRequestPropRequestedReviewersItemsOneof1PropParent
)
model_rebuild(WebhookPullRequestReviewDismissedPropPullRequestPropRequestedTeamsItems)
model_rebuild(
    WebhookPullRequestReviewDismissedPropPullRequestPropRequestedTeamsItemsPropParent
)
model_rebuild(WebhookPullRequestReviewDismissedPropPullRequestPropUser)
model_rebuild(WebhookPullRequestReviewDismissedPropReview)
model_rebuild(WebhookPullRequestReviewDismissedPropReviewPropLinks)
model_rebuild(WebhookPullRequestReviewDismissedPropReviewPropLinksPropHtml)
model_rebuild(WebhookPullRequestReviewDismissedPropReviewPropLinksPropPullRequest)
model_rebuild(WebhookPullRequestReviewDismissedPropReviewPropUser)
model_rebuild(WebhookPullRequestReviewEdited)
model_rebuild(WebhookPullRequestReviewEditedPropChanges)
model_rebuild(WebhookPullRequestReviewEditedPropChangesPropBody)
model_rebuild(WebhookPullRequestReviewEditedPropPullRequest)
model_rebuild(WebhookPullRequestReviewEditedPropPullRequestPropLinks)
model_rebuild(WebhookPullRequestReviewEditedPropPullRequestPropLinksPropComments)
model_rebuild(WebhookPullRequestReviewEditedPropPullRequestPropLinksPropCommits)
model_rebuild(WebhookPullRequestReviewEditedPropPullRequestPropLinksPropHtml)
model_rebuild(WebhookPullRequestReviewEditedPropPullRequestPropLinksPropIssue)
model_rebuild(WebhookPullRequestReviewEditedPropPullRequestPropLinksPropReviewComment)
model_rebuild(WebhookPullRequestReviewEditedPropPullRequestPropLinksPropReviewComments)
model_rebuild(WebhookPullRequestReviewEditedPropPullRequestPropLinksPropSelf)
model_rebuild(WebhookPullRequestReviewEditedPropPullRequestPropLinksPropStatuses)
model_rebuild(WebhookPullRequestReviewEditedPropPullRequestPropAssignee)
model_rebuild(WebhookPullRequestReviewEditedPropPullRequestPropAssigneesItems)
model_rebuild(WebhookPullRequestReviewEditedPropPullRequestPropAutoMergePropEnabledBy)
model_rebuild(WebhookPullRequestReviewEditedPropPullRequestPropAutoMerge)
model_rebuild(WebhookPullRequestReviewEditedPropPullRequestPropBase)
model_rebuild(WebhookPullRequestReviewEditedPropPullRequestPropBasePropRepo)
model_rebuild(WebhookPullRequestReviewEditedPropPullRequestPropBasePropRepoPropLicense)
model_rebuild(WebhookPullRequestReviewEditedPropPullRequestPropBasePropRepoPropOwner)
model_rebuild(
    WebhookPullRequestReviewEditedPropPullRequestPropBasePropRepoPropPermissions
)
model_rebuild(WebhookPullRequestReviewEditedPropPullRequestPropBasePropUser)
model_rebuild(WebhookPullRequestReviewEditedPropPullRequestPropHead)
model_rebuild(WebhookPullRequestReviewEditedPropPullRequestPropHeadPropRepoPropLicense)
model_rebuild(WebhookPullRequestReviewEditedPropPullRequestPropHeadPropRepoPropOwner)
model_rebuild(
    WebhookPullRequestReviewEditedPropPullRequestPropHeadPropRepoPropPermissions
)
model_rebuild(WebhookPullRequestReviewEditedPropPullRequestPropHeadPropRepo)
model_rebuild(WebhookPullRequestReviewEditedPropPullRequestPropHeadPropUser)
model_rebuild(WebhookPullRequestReviewEditedPropPullRequestPropLabelsItems)
model_rebuild(WebhookPullRequestReviewEditedPropPullRequestPropMilestonePropCreator)
model_rebuild(WebhookPullRequestReviewEditedPropPullRequestPropMilestone)
model_rebuild(
    WebhookPullRequestReviewEditedPropPullRequestPropRequestedReviewersItemsOneof0
)
model_rebuild(
    WebhookPullRequestReviewEditedPropPullRequestPropRequestedReviewersItemsOneof1
)
model_rebuild(
    WebhookPullRequestReviewEditedPropPullRequestPropRequestedReviewersItemsOneof1PropParent
)
model_rebuild(WebhookPullRequestReviewEditedPropPullRequestPropRequestedTeamsItems)
model_rebuild(
    WebhookPullRequestReviewEditedPropPullRequestPropRequestedTeamsItemsPropParent
)
model_rebuild(WebhookPullRequestReviewEditedPropPullRequestPropUser)
model_rebuild(WebhookPullRequestReviewEditedPropReview)
model_rebuild(WebhookPullRequestReviewEditedPropReviewPropLinks)
model_rebuild(WebhookPullRequestReviewEditedPropReviewPropLinksPropHtml)
model_rebuild(WebhookPullRequestReviewEditedPropReviewPropLinksPropPullRequest)
model_rebuild(WebhookPullRequestReviewEditedPropReviewPropUser)
model_rebuild(WebhookPullRequestReviewRequestRemovedOneof0)
model_rebuild(WebhookPullRequestReviewRequestRemovedOneof0PropPullRequest)
model_rebuild(WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinks)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropComments
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropCommits
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropHtml
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropIssue
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropReviewComment
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropReviewComments
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropSelf
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropStatuses
)
model_rebuild(WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropAssignee)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropAssigneesItems
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropAutoMergePropEnabledBy
)
model_rebuild(WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropAutoMerge)
model_rebuild(WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBase)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBasePropRepo
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBasePropRepoPropLicense
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBasePropRepoPropOwner
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBasePropRepoPropPermissions
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBasePropUser
)
model_rebuild(WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHead)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHeadPropRepo
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHeadPropRepoPropLicense
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHeadPropRepoPropOwner
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHeadPropRepoPropPermissions
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHeadPropUser
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLabelsItems
)
model_rebuild(WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropMergedBy)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropMilestonePropCreator
)
model_rebuild(WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropMilestone)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropRequestedReviewersItemsOneof0
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropRequestedReviewersItemsOneof1
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropRequestedReviewersItemsOneof1PropParent
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropRequestedTeamsItems
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropRequestedTeamsItemsPropParent
)
model_rebuild(WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropUser)
model_rebuild(WebhookPullRequestReviewRequestRemovedOneof0PropRequestedReviewer)
model_rebuild(WebhookPullRequestReviewRequestRemovedOneof1)
model_rebuild(WebhookPullRequestReviewRequestRemovedOneof1PropPullRequest)
model_rebuild(WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinks)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropComments
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropCommits
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropHtml
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropIssue
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropReviewComment
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropReviewComments
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropSelf
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropStatuses
)
model_rebuild(WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropAssignee)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropAssigneesItems
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropAutoMergePropEnabledBy
)
model_rebuild(WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropAutoMerge)
model_rebuild(WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBase)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBasePropRepo
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBasePropRepoPropLicense
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBasePropRepoPropOwner
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBasePropRepoPropPermissions
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBasePropUser
)
model_rebuild(WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHead)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHeadPropRepo
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHeadPropRepoPropLicense
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHeadPropRepoPropOwner
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHeadPropRepoPropPermissions
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHeadPropUser
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLabelsItems
)
model_rebuild(WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropMergedBy)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropMilestonePropCreator
)
model_rebuild(WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropMilestone)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropRequestedReviewersItemsOneof0
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropRequestedReviewersItemsOneof1
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropRequestedReviewersItemsOneof1PropParent
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropRequestedTeamsItems
)
model_rebuild(
    WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropRequestedTeamsItemsPropParent
)
model_rebuild(WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropUser)
model_rebuild(WebhookPullRequestReviewRequestRemovedOneof1PropRequestedTeam)
model_rebuild(WebhookPullRequestReviewRequestRemovedOneof1PropRequestedTeamPropParent)
model_rebuild(WebhookPullRequestReviewRequestedOneof0)
model_rebuild(WebhookPullRequestReviewRequestedOneof0PropPullRequest)
model_rebuild(WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinks)
model_rebuild(
    WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropComments
)
model_rebuild(
    WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropCommits
)
model_rebuild(WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropHtml)
model_rebuild(WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropIssue)
model_rebuild(
    WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropReviewComment
)
model_rebuild(
    WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropReviewComments
)
model_rebuild(WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropSelf)
model_rebuild(
    WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropStatuses
)
model_rebuild(WebhookPullRequestReviewRequestedOneof0PropPullRequestPropAssignee)
model_rebuild(WebhookPullRequestReviewRequestedOneof0PropPullRequestPropAssigneesItems)
model_rebuild(
    WebhookPullRequestReviewRequestedOneof0PropPullRequestPropAutoMergePropEnabledBy
)
model_rebuild(WebhookPullRequestReviewRequestedOneof0PropPullRequestPropAutoMerge)
model_rebuild(WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBase)
model_rebuild(WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBasePropRepo)
model_rebuild(
    WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBasePropRepoPropLicense
)
model_rebuild(
    WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBasePropRepoPropOwner
)
model_rebuild(
    WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBasePropRepoPropPermissions
)
model_rebuild(WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBasePropUser)
model_rebuild(WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHead)
model_rebuild(WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHeadPropRepo)
model_rebuild(
    WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHeadPropRepoPropLicense
)
model_rebuild(
    WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHeadPropRepoPropOwner
)
model_rebuild(
    WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHeadPropRepoPropPermissions
)
model_rebuild(WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHeadPropUser)
model_rebuild(WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLabelsItems)
model_rebuild(WebhookPullRequestReviewRequestedOneof0PropPullRequestPropMergedBy)
model_rebuild(
    WebhookPullRequestReviewRequestedOneof0PropPullRequestPropMilestonePropCreator
)
model_rebuild(WebhookPullRequestReviewRequestedOneof0PropPullRequestPropMilestone)
model_rebuild(
    WebhookPullRequestReviewRequestedOneof0PropPullRequestPropRequestedReviewersItemsOneof0
)
model_rebuild(
    WebhookPullRequestReviewRequestedOneof0PropPullRequestPropRequestedReviewersItemsOneof1
)
model_rebuild(
    WebhookPullRequestReviewRequestedOneof0PropPullRequestPropRequestedReviewersItemsOneof1PropParent
)
model_rebuild(
    WebhookPullRequestReviewRequestedOneof0PropPullRequestPropRequestedTeamsItems
)
model_rebuild(
    WebhookPullRequestReviewRequestedOneof0PropPullRequestPropRequestedTeamsItemsPropParent
)
model_rebuild(WebhookPullRequestReviewRequestedOneof0PropPullRequestPropUser)
model_rebuild(WebhookPullRequestReviewRequestedOneof0PropRequestedReviewer)
model_rebuild(WebhookPullRequestReviewRequestedOneof1)
model_rebuild(WebhookPullRequestReviewRequestedOneof1PropPullRequest)
model_rebuild(WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinks)
model_rebuild(
    WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropComments
)
model_rebuild(
    WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropCommits
)
model_rebuild(WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropHtml)
model_rebuild(WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropIssue)
model_rebuild(
    WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropReviewComment
)
model_rebuild(
    WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropReviewComments
)
model_rebuild(WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropSelf)
model_rebuild(
    WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropStatuses
)
model_rebuild(WebhookPullRequestReviewRequestedOneof1PropPullRequestPropAssignee)
model_rebuild(WebhookPullRequestReviewRequestedOneof1PropPullRequestPropAssigneesItems)
model_rebuild(
    WebhookPullRequestReviewRequestedOneof1PropPullRequestPropAutoMergePropEnabledBy
)
model_rebuild(WebhookPullRequestReviewRequestedOneof1PropPullRequestPropAutoMerge)
model_rebuild(WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBase)
model_rebuild(WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBasePropRepo)
model_rebuild(
    WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBasePropRepoPropLicense
)
model_rebuild(
    WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBasePropRepoPropOwner
)
model_rebuild(
    WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBasePropRepoPropPermissions
)
model_rebuild(WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBasePropUser)
model_rebuild(WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHead)
model_rebuild(WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHeadPropRepo)
model_rebuild(
    WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHeadPropRepoPropLicense
)
model_rebuild(
    WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHeadPropRepoPropOwner
)
model_rebuild(
    WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHeadPropRepoPropPermissions
)
model_rebuild(WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHeadPropUser)
model_rebuild(WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLabelsItems)
model_rebuild(WebhookPullRequestReviewRequestedOneof1PropPullRequestPropMergedBy)
model_rebuild(
    WebhookPullRequestReviewRequestedOneof1PropPullRequestPropMilestonePropCreator
)
model_rebuild(WebhookPullRequestReviewRequestedOneof1PropPullRequestPropMilestone)
model_rebuild(
    WebhookPullRequestReviewRequestedOneof1PropPullRequestPropRequestedReviewersItemsOneof0
)
model_rebuild(
    WebhookPullRequestReviewRequestedOneof1PropPullRequestPropRequestedReviewersItemsOneof1
)
model_rebuild(
    WebhookPullRequestReviewRequestedOneof1PropPullRequestPropRequestedReviewersItemsOneof1PropParent
)
model_rebuild(
    WebhookPullRequestReviewRequestedOneof1PropPullRequestPropRequestedTeamsItems
)
model_rebuild(
    WebhookPullRequestReviewRequestedOneof1PropPullRequestPropRequestedTeamsItemsPropParent
)
model_rebuild(WebhookPullRequestReviewRequestedOneof1PropPullRequestPropUser)
model_rebuild(WebhookPullRequestReviewRequestedOneof1PropRequestedTeam)
model_rebuild(WebhookPullRequestReviewRequestedOneof1PropRequestedTeamPropParent)
model_rebuild(WebhookPullRequestReviewSubmitted)
model_rebuild(WebhookPullRequestReviewSubmittedPropPullRequest)
model_rebuild(WebhookPullRequestReviewSubmittedPropPullRequestPropLinks)
model_rebuild(WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropComments)
model_rebuild(WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropCommits)
model_rebuild(WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropHtml)
model_rebuild(WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropIssue)
model_rebuild(
    WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropReviewComment
)
model_rebuild(
    WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropReviewComments
)
model_rebuild(WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropSelf)
model_rebuild(WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropStatuses)
model_rebuild(WebhookPullRequestReviewSubmittedPropPullRequestPropAssignee)
model_rebuild(WebhookPullRequestReviewSubmittedPropPullRequestPropAssigneesItems)
model_rebuild(
    WebhookPullRequestReviewSubmittedPropPullRequestPropAutoMergePropEnabledBy
)
model_rebuild(WebhookPullRequestReviewSubmittedPropPullRequestPropAutoMerge)
model_rebuild(WebhookPullRequestReviewSubmittedPropPullRequestPropBase)
model_rebuild(WebhookPullRequestReviewSubmittedPropPullRequestPropBasePropRepo)
model_rebuild(
    WebhookPullRequestReviewSubmittedPropPullRequestPropBasePropRepoPropLicense
)
model_rebuild(WebhookPullRequestReviewSubmittedPropPullRequestPropBasePropRepoPropOwner)
model_rebuild(
    WebhookPullRequestReviewSubmittedPropPullRequestPropBasePropRepoPropPermissions
)
model_rebuild(WebhookPullRequestReviewSubmittedPropPullRequestPropBasePropUser)
model_rebuild(WebhookPullRequestReviewSubmittedPropPullRequestPropHead)
model_rebuild(
    WebhookPullRequestReviewSubmittedPropPullRequestPropHeadPropRepoPropLicense
)
model_rebuild(WebhookPullRequestReviewSubmittedPropPullRequestPropHeadPropRepoPropOwner)
model_rebuild(
    WebhookPullRequestReviewSubmittedPropPullRequestPropHeadPropRepoPropPermissions
)
model_rebuild(WebhookPullRequestReviewSubmittedPropPullRequestPropHeadPropRepo)
model_rebuild(WebhookPullRequestReviewSubmittedPropPullRequestPropHeadPropUser)
model_rebuild(WebhookPullRequestReviewSubmittedPropPullRequestPropLabelsItems)
model_rebuild(WebhookPullRequestReviewSubmittedPropPullRequestPropMilestonePropCreator)
model_rebuild(WebhookPullRequestReviewSubmittedPropPullRequestPropMilestone)
model_rebuild(
    WebhookPullRequestReviewSubmittedPropPullRequestPropRequestedReviewersItemsOneof0
)
model_rebuild(
    WebhookPullRequestReviewSubmittedPropPullRequestPropRequestedReviewersItemsOneof1
)
model_rebuild(
    WebhookPullRequestReviewSubmittedPropPullRequestPropRequestedReviewersItemsOneof1PropParent
)
model_rebuild(WebhookPullRequestReviewSubmittedPropPullRequestPropRequestedTeamsItems)
model_rebuild(
    WebhookPullRequestReviewSubmittedPropPullRequestPropRequestedTeamsItemsPropParent
)
model_rebuild(WebhookPullRequestReviewSubmittedPropPullRequestPropUser)
model_rebuild(WebhookPullRequestReviewSubmittedPropReview)
model_rebuild(WebhookPullRequestReviewSubmittedPropReviewPropLinks)
model_rebuild(WebhookPullRequestReviewSubmittedPropReviewPropLinksPropHtml)
model_rebuild(WebhookPullRequestReviewSubmittedPropReviewPropLinksPropPullRequest)
model_rebuild(WebhookPullRequestReviewSubmittedPropReviewPropUser)
model_rebuild(WebhookPullRequestReviewThreadResolved)
model_rebuild(WebhookPullRequestReviewThreadResolvedPropPullRequest)
model_rebuild(WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinks)
model_rebuild(
    WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropComments
)
model_rebuild(WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropCommits)
model_rebuild(WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropHtml)
model_rebuild(WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropIssue)
model_rebuild(
    WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropReviewComment
)
model_rebuild(
    WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropReviewComments
)
model_rebuild(WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropSelf)
model_rebuild(
    WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropStatuses
)
model_rebuild(WebhookPullRequestReviewThreadResolvedPropPullRequestPropAssignee)
model_rebuild(WebhookPullRequestReviewThreadResolvedPropPullRequestPropAssigneesItems)
model_rebuild(
    WebhookPullRequestReviewThreadResolvedPropPullRequestPropAutoMergePropEnabledBy
)
model_rebuild(WebhookPullRequestReviewThreadResolvedPropPullRequestPropAutoMerge)
model_rebuild(WebhookPullRequestReviewThreadResolvedPropPullRequestPropBase)
model_rebuild(WebhookPullRequestReviewThreadResolvedPropPullRequestPropBasePropRepo)
model_rebuild(
    WebhookPullRequestReviewThreadResolvedPropPullRequestPropBasePropRepoPropLicense
)
model_rebuild(
    WebhookPullRequestReviewThreadResolvedPropPullRequestPropBasePropRepoPropOwner
)
model_rebuild(
    WebhookPullRequestReviewThreadResolvedPropPullRequestPropBasePropRepoPropPermissions
)
model_rebuild(WebhookPullRequestReviewThreadResolvedPropPullRequestPropBasePropUser)
model_rebuild(WebhookPullRequestReviewThreadResolvedPropPullRequestPropHead)
model_rebuild(
    WebhookPullRequestReviewThreadResolvedPropPullRequestPropHeadPropRepoPropLicense
)
model_rebuild(
    WebhookPullRequestReviewThreadResolvedPropPullRequestPropHeadPropRepoPropOwner
)
model_rebuild(
    WebhookPullRequestReviewThreadResolvedPropPullRequestPropHeadPropRepoPropPermissions
)
model_rebuild(WebhookPullRequestReviewThreadResolvedPropPullRequestPropHeadPropRepo)
model_rebuild(WebhookPullRequestReviewThreadResolvedPropPullRequestPropHeadPropUser)
model_rebuild(WebhookPullRequestReviewThreadResolvedPropPullRequestPropLabelsItems)
model_rebuild(
    WebhookPullRequestReviewThreadResolvedPropPullRequestPropMilestonePropCreator
)
model_rebuild(WebhookPullRequestReviewThreadResolvedPropPullRequestPropMilestone)
model_rebuild(
    WebhookPullRequestReviewThreadResolvedPropPullRequestPropRequestedReviewersItemsOneof0
)
model_rebuild(
    WebhookPullRequestReviewThreadResolvedPropPullRequestPropRequestedReviewersItemsOneof1
)
model_rebuild(
    WebhookPullRequestReviewThreadResolvedPropPullRequestPropRequestedReviewersItemsOneof1PropParent
)
model_rebuild(
    WebhookPullRequestReviewThreadResolvedPropPullRequestPropRequestedTeamsItems
)
model_rebuild(
    WebhookPullRequestReviewThreadResolvedPropPullRequestPropRequestedTeamsItemsPropParent
)
model_rebuild(WebhookPullRequestReviewThreadResolvedPropPullRequestPropUser)
model_rebuild(WebhookPullRequestReviewThreadResolvedPropThread)
model_rebuild(WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItems)
model_rebuild(
    WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropLinks
)
model_rebuild(
    WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropLinksPropHtml
)
model_rebuild(
    WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropLinksPropPullRequest
)
model_rebuild(
    WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropLinksPropSelf
)
model_rebuild(
    WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropReactions
)
model_rebuild(WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropUser)
model_rebuild(WebhookPullRequestReviewThreadUnresolved)
model_rebuild(WebhookPullRequestReviewThreadUnresolvedPropPullRequest)
model_rebuild(WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinks)
model_rebuild(
    WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropComments
)
model_rebuild(
    WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropCommits
)
model_rebuild(WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropHtml)
model_rebuild(WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropIssue)
model_rebuild(
    WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropReviewComment
)
model_rebuild(
    WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropReviewComments
)
model_rebuild(WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropSelf)
model_rebuild(
    WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropStatuses
)
model_rebuild(WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropAssignee)
model_rebuild(WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropAssigneesItems)
model_rebuild(
    WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropAutoMergePropEnabledBy
)
model_rebuild(WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropAutoMerge)
model_rebuild(WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBase)
model_rebuild(WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBasePropRepo)
model_rebuild(
    WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBasePropRepoPropLicense
)
model_rebuild(
    WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBasePropRepoPropOwner
)
model_rebuild(
    WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBasePropRepoPropPermissions
)
model_rebuild(WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBasePropUser)
model_rebuild(WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHead)
model_rebuild(WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHeadPropRepo)
model_rebuild(
    WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHeadPropRepoPropLicense
)
model_rebuild(
    WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHeadPropRepoPropOwner
)
model_rebuild(
    WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHeadPropRepoPropPermissions
)
model_rebuild(WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHeadPropUser)
model_rebuild(WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLabelsItems)
model_rebuild(
    WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropMilestonePropCreator
)
model_rebuild(WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropMilestone)
model_rebuild(
    WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropRequestedReviewersItemsOneof0
)
model_rebuild(
    WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropRequestedReviewersItemsOneof1
)
model_rebuild(
    WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropRequestedReviewersItemsOneof1PropParent
)
model_rebuild(
    WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropRequestedTeamsItems
)
model_rebuild(
    WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropRequestedTeamsItemsPropParent
)
model_rebuild(WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropUser)
model_rebuild(WebhookPullRequestReviewThreadUnresolvedPropThread)
model_rebuild(WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItems)
model_rebuild(
    WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropLinks
)
model_rebuild(
    WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropLinksPropHtml
)
model_rebuild(
    WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropLinksPropPullRequest
)
model_rebuild(
    WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropLinksPropSelf
)
model_rebuild(
    WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropReactions
)
model_rebuild(
    WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropUser
)
model_rebuild(WebhookPullRequestSynchronize)
model_rebuild(WebhookPullRequestSynchronizePropPullRequest)
model_rebuild(WebhookPullRequestSynchronizePropPullRequestPropLinks)
model_rebuild(WebhookPullRequestSynchronizePropPullRequestPropLinksPropComments)
model_rebuild(WebhookPullRequestSynchronizePropPullRequestPropLinksPropCommits)
model_rebuild(WebhookPullRequestSynchronizePropPullRequestPropLinksPropHtml)
model_rebuild(WebhookPullRequestSynchronizePropPullRequestPropLinksPropIssue)
model_rebuild(WebhookPullRequestSynchronizePropPullRequestPropLinksPropReviewComment)
model_rebuild(WebhookPullRequestSynchronizePropPullRequestPropLinksPropReviewComments)
model_rebuild(WebhookPullRequestSynchronizePropPullRequestPropLinksPropSelf)
model_rebuild(WebhookPullRequestSynchronizePropPullRequestPropLinksPropStatuses)
model_rebuild(WebhookPullRequestSynchronizePropPullRequestPropAssignee)
model_rebuild(WebhookPullRequestSynchronizePropPullRequestPropAssigneesItems)
model_rebuild(WebhookPullRequestSynchronizePropPullRequestPropAutoMergePropEnabledBy)
model_rebuild(WebhookPullRequestSynchronizePropPullRequestPropAutoMerge)
model_rebuild(WebhookPullRequestSynchronizePropPullRequestPropBase)
model_rebuild(WebhookPullRequestSynchronizePropPullRequestPropBasePropRepo)
model_rebuild(WebhookPullRequestSynchronizePropPullRequestPropBasePropRepoPropLicense)
model_rebuild(WebhookPullRequestSynchronizePropPullRequestPropBasePropRepoPropOwner)
model_rebuild(
    WebhookPullRequestSynchronizePropPullRequestPropBasePropRepoPropPermissions
)
model_rebuild(WebhookPullRequestSynchronizePropPullRequestPropBasePropUser)
model_rebuild(WebhookPullRequestSynchronizePropPullRequestPropHead)
model_rebuild(WebhookPullRequestSynchronizePropPullRequestPropHeadPropRepo)
model_rebuild(WebhookPullRequestSynchronizePropPullRequestPropHeadPropRepoPropLicense)
model_rebuild(WebhookPullRequestSynchronizePropPullRequestPropHeadPropRepoPropOwner)
model_rebuild(
    WebhookPullRequestSynchronizePropPullRequestPropHeadPropRepoPropPermissions
)
model_rebuild(WebhookPullRequestSynchronizePropPullRequestPropHeadPropUser)
model_rebuild(WebhookPullRequestSynchronizePropPullRequestPropLabelsItems)
model_rebuild(WebhookPullRequestSynchronizePropPullRequestPropMergedBy)
model_rebuild(WebhookPullRequestSynchronizePropPullRequestPropMilestonePropCreator)
model_rebuild(WebhookPullRequestSynchronizePropPullRequestPropMilestone)
model_rebuild(
    WebhookPullRequestSynchronizePropPullRequestPropRequestedReviewersItemsOneof0
)
model_rebuild(
    WebhookPullRequestSynchronizePropPullRequestPropRequestedReviewersItemsOneof1
)
model_rebuild(
    WebhookPullRequestSynchronizePropPullRequestPropRequestedReviewersItemsOneof1PropParent
)
model_rebuild(WebhookPullRequestSynchronizePropPullRequestPropRequestedTeamsItems)
model_rebuild(
    WebhookPullRequestSynchronizePropPullRequestPropRequestedTeamsItemsPropParent
)
model_rebuild(WebhookPullRequestSynchronizePropPullRequestPropUser)
model_rebuild(WebhookPullRequestUnassigned)
model_rebuild(WebhookPullRequestUnassignedPropAssignee)
model_rebuild(WebhookPullRequestUnassignedPropPullRequest)
model_rebuild(WebhookPullRequestUnassignedPropPullRequestPropLinks)
model_rebuild(WebhookPullRequestUnassignedPropPullRequestPropLinksPropComments)
model_rebuild(WebhookPullRequestUnassignedPropPullRequestPropLinksPropCommits)
model_rebuild(WebhookPullRequestUnassignedPropPullRequestPropLinksPropHtml)
model_rebuild(WebhookPullRequestUnassignedPropPullRequestPropLinksPropIssue)
model_rebuild(WebhookPullRequestUnassignedPropPullRequestPropLinksPropReviewComment)
model_rebuild(WebhookPullRequestUnassignedPropPullRequestPropLinksPropReviewComments)
model_rebuild(WebhookPullRequestUnassignedPropPullRequestPropLinksPropSelf)
model_rebuild(WebhookPullRequestUnassignedPropPullRequestPropLinksPropStatuses)
model_rebuild(WebhookPullRequestUnassignedPropPullRequestPropAssignee)
model_rebuild(WebhookPullRequestUnassignedPropPullRequestPropAssigneesItems)
model_rebuild(WebhookPullRequestUnassignedPropPullRequestPropAutoMergePropEnabledBy)
model_rebuild(WebhookPullRequestUnassignedPropPullRequestPropAutoMerge)
model_rebuild(WebhookPullRequestUnassignedPropPullRequestPropBase)
model_rebuild(WebhookPullRequestUnassignedPropPullRequestPropBasePropRepo)
model_rebuild(WebhookPullRequestUnassignedPropPullRequestPropBasePropRepoPropLicense)
model_rebuild(WebhookPullRequestUnassignedPropPullRequestPropBasePropRepoPropOwner)
model_rebuild(
    WebhookPullRequestUnassignedPropPullRequestPropBasePropRepoPropPermissions
)
model_rebuild(WebhookPullRequestUnassignedPropPullRequestPropBasePropUser)
model_rebuild(WebhookPullRequestUnassignedPropPullRequestPropHead)
model_rebuild(WebhookPullRequestUnassignedPropPullRequestPropHeadPropRepoPropLicense)
model_rebuild(WebhookPullRequestUnassignedPropPullRequestPropHeadPropRepoPropOwner)
model_rebuild(
    WebhookPullRequestUnassignedPropPullRequestPropHeadPropRepoPropPermissions
)
model_rebuild(WebhookPullRequestUnassignedPropPullRequestPropHeadPropRepo)
model_rebuild(WebhookPullRequestUnassignedPropPullRequestPropHeadPropUser)
model_rebuild(WebhookPullRequestUnassignedPropPullRequestPropLabelsItems)
model_rebuild(WebhookPullRequestUnassignedPropPullRequestPropMergedBy)
model_rebuild(WebhookPullRequestUnassignedPropPullRequestPropMilestonePropCreator)
model_rebuild(WebhookPullRequestUnassignedPropPullRequestPropMilestone)
model_rebuild(
    WebhookPullRequestUnassignedPropPullRequestPropRequestedReviewersItemsOneof0
)
model_rebuild(
    WebhookPullRequestUnassignedPropPullRequestPropRequestedReviewersItemsOneof1
)
model_rebuild(
    WebhookPullRequestUnassignedPropPullRequestPropRequestedReviewersItemsOneof1PropParent
)
model_rebuild(WebhookPullRequestUnassignedPropPullRequestPropRequestedTeamsItems)
model_rebuild(
    WebhookPullRequestUnassignedPropPullRequestPropRequestedTeamsItemsPropParent
)
model_rebuild(WebhookPullRequestUnassignedPropPullRequestPropUser)
model_rebuild(WebhookPullRequestUnlabeled)
model_rebuild(WebhookPullRequestUnlabeledPropLabel)
model_rebuild(WebhookPullRequestUnlabeledPropPullRequest)
model_rebuild(WebhookPullRequestUnlabeledPropPullRequestPropLinks)
model_rebuild(WebhookPullRequestUnlabeledPropPullRequestPropLinksPropComments)
model_rebuild(WebhookPullRequestUnlabeledPropPullRequestPropLinksPropCommits)
model_rebuild(WebhookPullRequestUnlabeledPropPullRequestPropLinksPropHtml)
model_rebuild(WebhookPullRequestUnlabeledPropPullRequestPropLinksPropIssue)
model_rebuild(WebhookPullRequestUnlabeledPropPullRequestPropLinksPropReviewComment)
model_rebuild(WebhookPullRequestUnlabeledPropPullRequestPropLinksPropReviewComments)
model_rebuild(WebhookPullRequestUnlabeledPropPullRequestPropLinksPropSelf)
model_rebuild(WebhookPullRequestUnlabeledPropPullRequestPropLinksPropStatuses)
model_rebuild(WebhookPullRequestUnlabeledPropPullRequestPropAssignee)
model_rebuild(WebhookPullRequestUnlabeledPropPullRequestPropAssigneesItems)
model_rebuild(WebhookPullRequestUnlabeledPropPullRequestPropAutoMergePropEnabledBy)
model_rebuild(WebhookPullRequestUnlabeledPropPullRequestPropAutoMerge)
model_rebuild(WebhookPullRequestUnlabeledPropPullRequestPropBase)
model_rebuild(WebhookPullRequestUnlabeledPropPullRequestPropBasePropRepo)
model_rebuild(WebhookPullRequestUnlabeledPropPullRequestPropBasePropRepoPropLicense)
model_rebuild(WebhookPullRequestUnlabeledPropPullRequestPropBasePropRepoPropOwner)
model_rebuild(WebhookPullRequestUnlabeledPropPullRequestPropBasePropRepoPropPermissions)
model_rebuild(WebhookPullRequestUnlabeledPropPullRequestPropBasePropUser)
model_rebuild(WebhookPullRequestUnlabeledPropPullRequestPropHead)
model_rebuild(WebhookPullRequestUnlabeledPropPullRequestPropHeadPropRepoPropLicense)
model_rebuild(WebhookPullRequestUnlabeledPropPullRequestPropHeadPropRepoPropOwner)
model_rebuild(WebhookPullRequestUnlabeledPropPullRequestPropHeadPropRepoPropPermissions)
model_rebuild(WebhookPullRequestUnlabeledPropPullRequestPropHeadPropRepo)
model_rebuild(WebhookPullRequestUnlabeledPropPullRequestPropHeadPropUser)
model_rebuild(WebhookPullRequestUnlabeledPropPullRequestPropLabelsItems)
model_rebuild(WebhookPullRequestUnlabeledPropPullRequestPropMergedBy)
model_rebuild(WebhookPullRequestUnlabeledPropPullRequestPropMilestonePropCreator)
model_rebuild(WebhookPullRequestUnlabeledPropPullRequestPropMilestone)
model_rebuild(
    WebhookPullRequestUnlabeledPropPullRequestPropRequestedReviewersItemsOneof0
)
model_rebuild(
    WebhookPullRequestUnlabeledPropPullRequestPropRequestedReviewersItemsOneof1
)
model_rebuild(
    WebhookPullRequestUnlabeledPropPullRequestPropRequestedReviewersItemsOneof1PropParent
)
model_rebuild(WebhookPullRequestUnlabeledPropPullRequestPropRequestedTeamsItems)
model_rebuild(
    WebhookPullRequestUnlabeledPropPullRequestPropRequestedTeamsItemsPropParent
)
model_rebuild(WebhookPullRequestUnlabeledPropPullRequestPropUser)
model_rebuild(WebhookPullRequestUnlocked)
model_rebuild(WebhookPullRequestUnlockedPropPullRequest)
model_rebuild(WebhookPullRequestUnlockedPropPullRequestPropLinks)
model_rebuild(WebhookPullRequestUnlockedPropPullRequestPropLinksPropComments)
model_rebuild(WebhookPullRequestUnlockedPropPullRequestPropLinksPropCommits)
model_rebuild(WebhookPullRequestUnlockedPropPullRequestPropLinksPropHtml)
model_rebuild(WebhookPullRequestUnlockedPropPullRequestPropLinksPropIssue)
model_rebuild(WebhookPullRequestUnlockedPropPullRequestPropLinksPropReviewComment)
model_rebuild(WebhookPullRequestUnlockedPropPullRequestPropLinksPropReviewComments)
model_rebuild(WebhookPullRequestUnlockedPropPullRequestPropLinksPropSelf)
model_rebuild(WebhookPullRequestUnlockedPropPullRequestPropLinksPropStatuses)
model_rebuild(WebhookPullRequestUnlockedPropPullRequestPropAssignee)
model_rebuild(WebhookPullRequestUnlockedPropPullRequestPropAssigneesItems)
model_rebuild(WebhookPullRequestUnlockedPropPullRequestPropAutoMergePropEnabledBy)
model_rebuild(WebhookPullRequestUnlockedPropPullRequestPropAutoMerge)
model_rebuild(WebhookPullRequestUnlockedPropPullRequestPropBase)
model_rebuild(WebhookPullRequestUnlockedPropPullRequestPropBasePropRepo)
model_rebuild(WebhookPullRequestUnlockedPropPullRequestPropBasePropRepoPropLicense)
model_rebuild(WebhookPullRequestUnlockedPropPullRequestPropBasePropRepoPropOwner)
model_rebuild(WebhookPullRequestUnlockedPropPullRequestPropBasePropRepoPropPermissions)
model_rebuild(WebhookPullRequestUnlockedPropPullRequestPropBasePropUser)
model_rebuild(WebhookPullRequestUnlockedPropPullRequestPropHead)
model_rebuild(WebhookPullRequestUnlockedPropPullRequestPropHeadPropRepoPropLicense)
model_rebuild(WebhookPullRequestUnlockedPropPullRequestPropHeadPropRepoPropOwner)
model_rebuild(WebhookPullRequestUnlockedPropPullRequestPropHeadPropRepoPropPermissions)
model_rebuild(WebhookPullRequestUnlockedPropPullRequestPropHeadPropRepo)
model_rebuild(WebhookPullRequestUnlockedPropPullRequestPropHeadPropUser)
model_rebuild(WebhookPullRequestUnlockedPropPullRequestPropLabelsItems)
model_rebuild(WebhookPullRequestUnlockedPropPullRequestPropMergedBy)
model_rebuild(WebhookPullRequestUnlockedPropPullRequestPropMilestonePropCreator)
model_rebuild(WebhookPullRequestUnlockedPropPullRequestPropMilestone)
model_rebuild(
    WebhookPullRequestUnlockedPropPullRequestPropRequestedReviewersItemsOneof0
)
model_rebuild(
    WebhookPullRequestUnlockedPropPullRequestPropRequestedReviewersItemsOneof1
)
model_rebuild(
    WebhookPullRequestUnlockedPropPullRequestPropRequestedReviewersItemsOneof1PropParent
)
model_rebuild(WebhookPullRequestUnlockedPropPullRequestPropRequestedTeamsItems)
model_rebuild(
    WebhookPullRequestUnlockedPropPullRequestPropRequestedTeamsItemsPropParent
)
model_rebuild(WebhookPullRequestUnlockedPropPullRequestPropUser)
model_rebuild(WebhookPush)
model_rebuild(WebhookPushPropCommitsItems)
model_rebuild(WebhookPushPropCommitsItemsPropAuthor)
model_rebuild(WebhookPushPropCommitsItemsPropCommitter)
model_rebuild(WebhookPushPropHeadCommitPropAuthor)
model_rebuild(WebhookPushPropHeadCommitPropCommitter)
model_rebuild(WebhookPushPropHeadCommit)
model_rebuild(WebhookPushPropPusher)
model_rebuild(WebhookPushPropRepository)
model_rebuild(WebhookPushPropRepositoryPropCustomProperties)
model_rebuild(WebhookPushPropRepositoryPropLicense)
model_rebuild(WebhookPushPropRepositoryPropOwner)
model_rebuild(WebhookPushPropRepositoryPropPermissions)
model_rebuild(WebhookRegistryPackagePublished)
model_rebuild(WebhookRegistryPackagePublishedPropRegistryPackage)
model_rebuild(WebhookRegistryPackagePublishedPropRegistryPackagePropOwner)
model_rebuild(
    WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropAuthor
)
model_rebuild(
    WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropBodyOneof1
)
model_rebuild(
    WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropContainerMetadata
)
model_rebuild(
    WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropContainerMetadataPropLabels
)
model_rebuild(
    WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropContainerMetadataPropManifest
)
model_rebuild(
    WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropContainerMetadataPropTag
)
model_rebuild(
    WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropDockerMetadataItems
)
model_rebuild(
    WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropMetadataItems
)
model_rebuild(
    WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropAuthorOneof1
)
model_rebuild(
    WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropBugsOneof1
)
model_rebuild(
    WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropDependencies
)
model_rebuild(
    WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropDevDependencies
)
model_rebuild(
    WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropPeerDependencies
)
model_rebuild(
    WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropOptionalDependencies
)
model_rebuild(
    WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropDistOneof1
)
model_rebuild(
    WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropRepositoryOneof1
)
model_rebuild(
    WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropScripts
)
model_rebuild(
    WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropEngines
)
model_rebuild(
    WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropBin
)
model_rebuild(
    WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropMan
)
model_rebuild(
    WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropDirectoriesOneof1
)
model_rebuild(
    WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadata
)
model_rebuild(
    WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNugetMetadataItems
)
model_rebuild(
    WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNugetMetadataItemsPropIdOneof1
)
model_rebuild(
    WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNugetMetadataItemsPropValueOneof3
)
model_rebuild(
    WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropPackageFilesItems
)
model_rebuild(
    WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropRelease
)
model_rebuild(
    WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropReleasePropAuthor
)
model_rebuild(WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersion)
model_rebuild(WebhookRegistryPackagePublishedPropRegistryPackagePropRegistry)
model_rebuild(WebhookRegistryPackageUpdated)
model_rebuild(WebhookRegistryPackageUpdatedPropRegistryPackage)
model_rebuild(WebhookRegistryPackageUpdatedPropRegistryPackagePropOwner)
model_rebuild(WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersion)
model_rebuild(
    WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropAuthor
)
model_rebuild(
    WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropDockerMetadataItems
)
model_rebuild(
    WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropMetadataItems
)
model_rebuild(
    WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropPackageFilesItems
)
model_rebuild(
    WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropRelease
)
model_rebuild(
    WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropReleasePropAuthor
)
model_rebuild(WebhookRegistryPackageUpdatedPropRegistryPackagePropRegistry)
model_rebuild(WebhookReleaseCreated)
model_rebuild(WebhookReleaseCreatedPropRelease)
model_rebuild(WebhookReleaseCreatedPropReleasePropAssetsItems)
model_rebuild(WebhookReleaseCreatedPropReleasePropAssetsItemsPropUploader)
model_rebuild(WebhookReleaseCreatedPropReleasePropAuthor)
model_rebuild(WebhookReleaseCreatedPropReleasePropReactions)
model_rebuild(WebhookReleaseDeleted)
model_rebuild(WebhookReleaseDeletedPropRelease)
model_rebuild(WebhookReleaseDeletedPropReleasePropAssetsItems)
model_rebuild(WebhookReleaseDeletedPropReleasePropAssetsItemsPropUploader)
model_rebuild(WebhookReleaseDeletedPropReleasePropAuthor)
model_rebuild(WebhookReleaseDeletedPropReleasePropReactions)
model_rebuild(WebhookReleaseEdited)
model_rebuild(WebhookReleaseEditedPropChanges)
model_rebuild(WebhookReleaseEditedPropChangesPropBody)
model_rebuild(WebhookReleaseEditedPropChangesPropName)
model_rebuild(WebhookReleaseEditedPropChangesPropMakeLatest)
model_rebuild(WebhookReleaseEditedPropRelease)
model_rebuild(WebhookReleaseEditedPropReleasePropAssetsItems)
model_rebuild(WebhookReleaseEditedPropReleasePropAssetsItemsPropUploader)
model_rebuild(WebhookReleaseEditedPropReleasePropAuthor)
model_rebuild(WebhookReleaseEditedPropReleasePropReactions)
model_rebuild(WebhookReleasePrereleased)
model_rebuild(WebhookReleasePrereleasedPropRelease)
model_rebuild(WebhookReleasePrereleasedPropReleaseAllof0)
model_rebuild(WebhookReleasePrereleasedPropReleaseAllof0PropAssetsItems)
model_rebuild(WebhookReleasePrereleasedPropReleaseAllof0PropAssetsItemsPropUploader)
model_rebuild(WebhookReleasePrereleasedPropReleaseAllof0PropAuthor)
model_rebuild(WebhookReleasePrereleasedPropReleaseAllof0PropReactions)
model_rebuild(WebhookReleasePrereleasedPropReleaseAllof1)
model_rebuild(WebhookReleasePrereleasedPropReleaseAllof1PropAssetsItems)
model_rebuild(WebhookReleasePrereleasedPropReleaseAllof1PropAuthor)
model_rebuild(WebhookReleasePrereleasedPropReleaseMergedAssets)
model_rebuild(WebhookReleasePrereleasedPropReleaseMergedAuthor)
model_rebuild(WebhookReleasePublished)
model_rebuild(WebhookReleasePublishedPropRelease)
model_rebuild(WebhookReleasePublishedPropReleaseAllof0)
model_rebuild(WebhookReleasePublishedPropReleaseAllof0PropAssetsItems)
model_rebuild(WebhookReleasePublishedPropReleaseAllof0PropAssetsItemsPropUploader)
model_rebuild(WebhookReleasePublishedPropReleaseAllof0PropAuthor)
model_rebuild(WebhookReleasePublishedPropReleaseAllof0PropReactions)
model_rebuild(WebhookReleasePublishedPropReleaseAllof1)
model_rebuild(WebhookReleasePublishedPropReleaseAllof1PropAssetsItems)
model_rebuild(WebhookReleasePublishedPropReleaseAllof1PropAuthor)
model_rebuild(WebhookReleasePublishedPropReleaseMergedAssets)
model_rebuild(WebhookReleasePublishedPropReleaseMergedAuthor)
model_rebuild(WebhookReleaseReleased)
model_rebuild(WebhookReleaseReleasedPropRelease)
model_rebuild(WebhookReleaseReleasedPropReleasePropAssetsItems)
model_rebuild(WebhookReleaseReleasedPropReleasePropAssetsItemsPropUploader)
model_rebuild(WebhookReleaseReleasedPropReleasePropAuthor)
model_rebuild(WebhookReleaseReleasedPropReleasePropReactions)
model_rebuild(WebhookReleaseUnpublished)
model_rebuild(WebhookReleaseUnpublishedPropRelease)
model_rebuild(WebhookReleaseUnpublishedPropReleaseAllof0)
model_rebuild(WebhookReleaseUnpublishedPropReleaseAllof0PropAssetsItems)
model_rebuild(WebhookReleaseUnpublishedPropReleaseAllof0PropAssetsItemsPropUploader)
model_rebuild(WebhookReleaseUnpublishedPropReleaseAllof0PropAuthor)
model_rebuild(WebhookReleaseUnpublishedPropReleaseAllof0PropReactions)
model_rebuild(WebhookReleaseUnpublishedPropReleaseAllof1)
model_rebuild(WebhookReleaseUnpublishedPropReleaseAllof1PropAssetsItems)
model_rebuild(WebhookReleaseUnpublishedPropReleaseAllof1PropAuthor)
model_rebuild(WebhookReleaseUnpublishedPropReleaseMergedAssets)
model_rebuild(WebhookReleaseUnpublishedPropReleaseMergedAuthor)
model_rebuild(WebhookRepositoryAdvisoryPublished)
model_rebuild(WebhookRepositoryAdvisoryReported)
model_rebuild(WebhookRepositoryArchived)
model_rebuild(WebhookRepositoryCreated)
model_rebuild(WebhookRepositoryDeleted)
model_rebuild(WebhookRepositoryDispatchSample)
model_rebuild(WebhookRepositoryDispatchSamplePropClientPayload)
model_rebuild(WebhookRepositoryEdited)
model_rebuild(WebhookRepositoryEditedPropChanges)
model_rebuild(WebhookRepositoryEditedPropChangesPropDefaultBranch)
model_rebuild(WebhookRepositoryEditedPropChangesPropDescription)
model_rebuild(WebhookRepositoryEditedPropChangesPropHomepage)
model_rebuild(WebhookRepositoryEditedPropChangesPropTopics)
model_rebuild(WebhookRepositoryImport)
model_rebuild(WebhookRepositoryPrivatized)
model_rebuild(WebhookRepositoryPublicized)
model_rebuild(WebhookRepositoryRenamed)
model_rebuild(WebhookRepositoryRenamedPropChanges)
model_rebuild(WebhookRepositoryRenamedPropChangesPropRepository)
model_rebuild(WebhookRepositoryRenamedPropChangesPropRepositoryPropName)
model_rebuild(WebhookRepositoryRulesetCreated)
model_rebuild(WebhookRepositoryRulesetDeleted)
model_rebuild(WebhookRepositoryRulesetEdited)
model_rebuild(WebhookRepositoryRulesetEditedPropChanges)
model_rebuild(WebhookRepositoryRulesetEditedPropChangesPropName)
model_rebuild(WebhookRepositoryRulesetEditedPropChangesPropEnforcement)
model_rebuild(WebhookRepositoryRulesetEditedPropChangesPropConditions)
model_rebuild(WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItems)
model_rebuild(
    WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChanges
)
model_rebuild(
    WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChangesPropConditionType
)
model_rebuild(
    WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChangesPropTarget
)
model_rebuild(
    WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChangesPropInclude
)
model_rebuild(
    WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChangesPropExclude
)
model_rebuild(WebhookRepositoryRulesetEditedPropChangesPropRules)
model_rebuild(WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItems)
model_rebuild(
    WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItemsPropChanges
)
model_rebuild(
    WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItemsPropChangesPropConfiguration
)
model_rebuild(
    WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItemsPropChangesPropRuleType
)
model_rebuild(
    WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItemsPropChangesPropPattern
)
model_rebuild(WebhookRepositoryTransferred)
model_rebuild(WebhookRepositoryTransferredPropChanges)
model_rebuild(WebhookRepositoryTransferredPropChangesPropOwner)
model_rebuild(WebhookRepositoryTransferredPropChangesPropOwnerPropFrom)
model_rebuild(WebhookRepositoryTransferredPropChangesPropOwnerPropFromPropOrganization)
model_rebuild(WebhookRepositoryTransferredPropChangesPropOwnerPropFromPropUser)
model_rebuild(WebhookRepositoryUnarchived)
model_rebuild(WebhookRepositoryVulnerabilityAlertCreate)
model_rebuild(WebhookRepositoryVulnerabilityAlertCreatePropAlert)
model_rebuild(WebhookRepositoryVulnerabilityAlertCreatePropAlertAllof0)
model_rebuild(WebhookRepositoryVulnerabilityAlertCreatePropAlertAllof0PropDismisser)
model_rebuild(WebhookRepositoryVulnerabilityAlertCreatePropAlertAllof1)
model_rebuild(WebhookRepositoryVulnerabilityAlertDismiss)
model_rebuild(WebhookRepositoryVulnerabilityAlertDismissPropAlert)
model_rebuild(WebhookRepositoryVulnerabilityAlertDismissPropAlertAllof0)
model_rebuild(WebhookRepositoryVulnerabilityAlertDismissPropAlertAllof0PropDismisser)
model_rebuild(WebhookRepositoryVulnerabilityAlertDismissPropAlertAllof1)
model_rebuild(WebhookRepositoryVulnerabilityAlertDismissPropAlertAllof1PropDismisser)
model_rebuild(WebhookRepositoryVulnerabilityAlertReopen)
model_rebuild(WebhookRepositoryVulnerabilityAlertReopenPropAlert)
model_rebuild(WebhookRepositoryVulnerabilityAlertReopenPropAlertAllof0)
model_rebuild(WebhookRepositoryVulnerabilityAlertReopenPropAlertAllof0PropDismisser)
model_rebuild(WebhookRepositoryVulnerabilityAlertReopenPropAlertAllof1)
model_rebuild(WebhookRepositoryVulnerabilityAlertResolve)
model_rebuild(WebhookRepositoryVulnerabilityAlertResolvePropAlert)
model_rebuild(WebhookRepositoryVulnerabilityAlertResolvePropAlertAllof0)
model_rebuild(WebhookRepositoryVulnerabilityAlertResolvePropAlertAllof0PropDismisser)
model_rebuild(WebhookRepositoryVulnerabilityAlertResolvePropAlertAllof1)
model_rebuild(WebhookSecretScanningAlertCreated)
model_rebuild(WebhookSecretScanningAlertLocationCreated)
model_rebuild(WebhookSecretScanningAlertLocationCreatedFormEncoded)
model_rebuild(WebhookSecretScanningAlertReopened)
model_rebuild(WebhookSecretScanningAlertResolved)
model_rebuild(WebhookSecretScanningAlertRevoked)
model_rebuild(WebhookSecurityAdvisoryPublished)
model_rebuild(WebhookSecurityAdvisoryPublishedPropSecurityAdvisory)
model_rebuild(WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropCvss)
model_rebuild(WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropCwesItems)
model_rebuild(WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropIdentifiersItems)
model_rebuild(WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropReferencesItems)
model_rebuild(
    WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropVulnerabilitiesItems
)
model_rebuild(
    WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropVulnerabilitiesItemsPropFirstPatchedVersion
)
model_rebuild(
    WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropVulnerabilitiesItemsPropPackage
)
model_rebuild(WebhookSecurityAdvisoryUpdated)
model_rebuild(WebhookSecurityAdvisoryUpdatedPropSecurityAdvisory)
model_rebuild(WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropCvss)
model_rebuild(WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropCwesItems)
model_rebuild(WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropIdentifiersItems)
model_rebuild(WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropReferencesItems)
model_rebuild(
    WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropVulnerabilitiesItems
)
model_rebuild(
    WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropVulnerabilitiesItemsPropFirstPatchedVersion
)
model_rebuild(
    WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropVulnerabilitiesItemsPropPackage
)
model_rebuild(WebhookSecurityAdvisoryWithdrawn)
model_rebuild(WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisory)
model_rebuild(WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropCvss)
model_rebuild(WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropCwesItems)
model_rebuild(WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropIdentifiersItems)
model_rebuild(WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropReferencesItems)
model_rebuild(
    WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropVulnerabilitiesItems
)
model_rebuild(
    WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropVulnerabilitiesItemsPropFirstPatchedVersion
)
model_rebuild(
    WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropVulnerabilitiesItemsPropPackage
)
model_rebuild(WebhookSecurityAndAnalysis)
model_rebuild(WebhookSecurityAndAnalysisPropChanges)
model_rebuild(WebhookSecurityAndAnalysisPropChangesPropFrom)
model_rebuild(WebhookSponsorshipCancelled)
model_rebuild(WebhookSponsorshipCancelledPropSponsorship)
model_rebuild(WebhookSponsorshipCancelledPropSponsorshipPropMaintainer)
model_rebuild(WebhookSponsorshipCancelledPropSponsorshipPropSponsor)
model_rebuild(WebhookSponsorshipCancelledPropSponsorshipPropSponsorable)
model_rebuild(WebhookSponsorshipCancelledPropSponsorshipPropTier)
model_rebuild(WebhookSponsorshipCreated)
model_rebuild(WebhookSponsorshipCreatedPropSponsorship)
model_rebuild(WebhookSponsorshipCreatedPropSponsorshipPropMaintainer)
model_rebuild(WebhookSponsorshipCreatedPropSponsorshipPropSponsor)
model_rebuild(WebhookSponsorshipCreatedPropSponsorshipPropSponsorable)
model_rebuild(WebhookSponsorshipCreatedPropSponsorshipPropTier)
model_rebuild(WebhookSponsorshipEdited)
model_rebuild(WebhookSponsorshipEditedPropChanges)
model_rebuild(WebhookSponsorshipEditedPropChangesPropPrivacyLevel)
model_rebuild(WebhookSponsorshipEditedPropSponsorship)
model_rebuild(WebhookSponsorshipEditedPropSponsorshipPropMaintainer)
model_rebuild(WebhookSponsorshipEditedPropSponsorshipPropSponsor)
model_rebuild(WebhookSponsorshipEditedPropSponsorshipPropSponsorable)
model_rebuild(WebhookSponsorshipEditedPropSponsorshipPropTier)
model_rebuild(WebhookSponsorshipPendingCancellation)
model_rebuild(WebhookSponsorshipPendingCancellationPropSponsorship)
model_rebuild(WebhookSponsorshipPendingCancellationPropSponsorshipPropMaintainer)
model_rebuild(WebhookSponsorshipPendingCancellationPropSponsorshipPropSponsor)
model_rebuild(WebhookSponsorshipPendingCancellationPropSponsorshipPropSponsorable)
model_rebuild(WebhookSponsorshipPendingCancellationPropSponsorshipPropTier)
model_rebuild(WebhookSponsorshipPendingTierChange)
model_rebuild(WebhookSponsorshipPendingTierChangePropChanges)
model_rebuild(WebhookSponsorshipPendingTierChangePropChangesPropTier)
model_rebuild(WebhookSponsorshipPendingTierChangePropChangesPropTierPropFrom)
model_rebuild(WebhookSponsorshipPendingTierChangePropSponsorship)
model_rebuild(WebhookSponsorshipPendingTierChangePropSponsorshipPropMaintainer)
model_rebuild(WebhookSponsorshipPendingTierChangePropSponsorshipPropSponsor)
model_rebuild(WebhookSponsorshipPendingTierChangePropSponsorshipPropSponsorable)
model_rebuild(WebhookSponsorshipPendingTierChangePropSponsorshipPropTier)
model_rebuild(WebhookSponsorshipTierChanged)
model_rebuild(WebhookSponsorshipTierChangedPropChanges)
model_rebuild(WebhookSponsorshipTierChangedPropChangesPropTier)
model_rebuild(WebhookSponsorshipTierChangedPropChangesPropTierPropFrom)
model_rebuild(WebhookSponsorshipTierChangedPropSponsorship)
model_rebuild(WebhookSponsorshipTierChangedPropSponsorshipPropMaintainer)
model_rebuild(WebhookSponsorshipTierChangedPropSponsorshipPropSponsor)
model_rebuild(WebhookSponsorshipTierChangedPropSponsorshipPropSponsorable)
model_rebuild(WebhookSponsorshipTierChangedPropSponsorshipPropTier)
model_rebuild(WebhookStarCreated)
model_rebuild(WebhookStarDeleted)
model_rebuild(WebhookStatus)
model_rebuild(WebhookStatusPropBranchesItems)
model_rebuild(WebhookStatusPropBranchesItemsPropCommit)
model_rebuild(WebhookStatusPropCommit)
model_rebuild(WebhookStatusPropCommitPropAuthor)
model_rebuild(WebhookStatusPropCommitPropCommit)
model_rebuild(WebhookStatusPropCommitPropCommitPropAuthor)
model_rebuild(WebhookStatusPropCommitPropCommitPropAuthorAllof0)
model_rebuild(WebhookStatusPropCommitPropCommitPropAuthorAllof1)
model_rebuild(WebhookStatusPropCommitPropCommitPropCommitter)
model_rebuild(WebhookStatusPropCommitPropCommitPropCommitterAllof0)
model_rebuild(WebhookStatusPropCommitPropCommitPropCommitterAllof1)
model_rebuild(WebhookStatusPropCommitPropCommitPropTree)
model_rebuild(WebhookStatusPropCommitPropCommitPropVerification)
model_rebuild(WebhookStatusPropCommitPropCommitter)
model_rebuild(WebhookStatusPropCommitPropParentsItems)
model_rebuild(WebhookTeamAdd)
model_rebuild(WebhookTeamAddPropTeam)
model_rebuild(WebhookTeamAddPropTeamPropParent)
model_rebuild(WebhookTeamAddedToRepository)
model_rebuild(WebhookTeamAddedToRepositoryPropRepository)
model_rebuild(WebhookTeamAddedToRepositoryPropRepositoryPropCustomProperties)
model_rebuild(WebhookTeamAddedToRepositoryPropRepositoryPropLicense)
model_rebuild(WebhookTeamAddedToRepositoryPropRepositoryPropOwner)
model_rebuild(WebhookTeamAddedToRepositoryPropRepositoryPropPermissions)
model_rebuild(WebhookTeamAddedToRepositoryPropTeam)
model_rebuild(WebhookTeamAddedToRepositoryPropTeamPropParent)
model_rebuild(WebhookTeamCreated)
model_rebuild(WebhookTeamCreatedPropRepository)
model_rebuild(WebhookTeamCreatedPropRepositoryPropCustomProperties)
model_rebuild(WebhookTeamCreatedPropRepositoryPropLicense)
model_rebuild(WebhookTeamCreatedPropRepositoryPropOwner)
model_rebuild(WebhookTeamCreatedPropRepositoryPropPermissions)
model_rebuild(WebhookTeamCreatedPropTeam)
model_rebuild(WebhookTeamCreatedPropTeamPropParent)
model_rebuild(WebhookTeamDeleted)
model_rebuild(WebhookTeamDeletedPropRepository)
model_rebuild(WebhookTeamDeletedPropRepositoryPropCustomProperties)
model_rebuild(WebhookTeamDeletedPropRepositoryPropLicense)
model_rebuild(WebhookTeamDeletedPropRepositoryPropOwner)
model_rebuild(WebhookTeamDeletedPropRepositoryPropPermissions)
model_rebuild(WebhookTeamDeletedPropTeam)
model_rebuild(WebhookTeamDeletedPropTeamPropParent)
model_rebuild(WebhookTeamEdited)
model_rebuild(WebhookTeamEditedPropChanges)
model_rebuild(WebhookTeamEditedPropChangesPropDescription)
model_rebuild(WebhookTeamEditedPropChangesPropName)
model_rebuild(WebhookTeamEditedPropChangesPropPrivacy)
model_rebuild(WebhookTeamEditedPropChangesPropNotificationSetting)
model_rebuild(WebhookTeamEditedPropChangesPropRepository)
model_rebuild(WebhookTeamEditedPropChangesPropRepositoryPropPermissions)
model_rebuild(WebhookTeamEditedPropChangesPropRepositoryPropPermissionsPropFrom)
model_rebuild(WebhookTeamEditedPropRepository)
model_rebuild(WebhookTeamEditedPropRepositoryPropCustomProperties)
model_rebuild(WebhookTeamEditedPropRepositoryPropLicense)
model_rebuild(WebhookTeamEditedPropRepositoryPropOwner)
model_rebuild(WebhookTeamEditedPropRepositoryPropPermissions)
model_rebuild(WebhookTeamEditedPropTeam)
model_rebuild(WebhookTeamEditedPropTeamPropParent)
model_rebuild(WebhookTeamRemovedFromRepository)
model_rebuild(WebhookTeamRemovedFromRepositoryPropRepository)
model_rebuild(WebhookTeamRemovedFromRepositoryPropRepositoryPropCustomProperties)
model_rebuild(WebhookTeamRemovedFromRepositoryPropRepositoryPropLicense)
model_rebuild(WebhookTeamRemovedFromRepositoryPropRepositoryPropOwner)
model_rebuild(WebhookTeamRemovedFromRepositoryPropRepositoryPropPermissions)
model_rebuild(WebhookTeamRemovedFromRepositoryPropTeam)
model_rebuild(WebhookTeamRemovedFromRepositoryPropTeamPropParent)
model_rebuild(WebhookWatchStarted)
model_rebuild(WebhookWorkflowDispatch)
model_rebuild(WebhookWorkflowDispatchPropInputs)
model_rebuild(WebhookWorkflowJobCompleted)
model_rebuild(WebhookWorkflowJobCompletedPropWorkflowJob)
model_rebuild(WebhookWorkflowJobCompletedPropWorkflowJobAllof0)
model_rebuild(WebhookWorkflowJobCompletedPropWorkflowJobAllof0PropStepsItems)
model_rebuild(WebhookWorkflowJobCompletedPropWorkflowJobAllof1)
model_rebuild(WebhookWorkflowJobCompletedPropWorkflowJobAllof1PropStepsItems)
model_rebuild(WebhookWorkflowJobCompletedPropWorkflowJobMergedSteps)
model_rebuild(WebhookWorkflowJobInProgress)
model_rebuild(WebhookWorkflowJobInProgressPropWorkflowJob)
model_rebuild(WebhookWorkflowJobInProgressPropWorkflowJobAllof0)
model_rebuild(WebhookWorkflowJobInProgressPropWorkflowJobAllof0PropStepsItems)
model_rebuild(WebhookWorkflowJobInProgressPropWorkflowJobAllof1)
model_rebuild(WebhookWorkflowJobInProgressPropWorkflowJobAllof1PropStepsItems)
model_rebuild(WebhookWorkflowJobInProgressPropWorkflowJobMergedSteps)
model_rebuild(WebhookWorkflowJobQueued)
model_rebuild(WebhookWorkflowJobQueuedPropWorkflowJob)
model_rebuild(WebhookWorkflowJobQueuedPropWorkflowJobPropStepsItems)
model_rebuild(WebhookWorkflowJobWaiting)
model_rebuild(WebhookWorkflowJobWaitingPropWorkflowJob)
model_rebuild(WebhookWorkflowJobWaitingPropWorkflowJobPropStepsItems)
model_rebuild(WebhookWorkflowRunCompleted)
model_rebuild(WebhookWorkflowRunCompletedPropWorkflow)
model_rebuild(WebhookWorkflowRunCompletedPropWorkflowRun)
model_rebuild(WebhookWorkflowRunCompletedPropWorkflowRunAllof0)
model_rebuild(WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropActor)
model_rebuild(WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropHeadCommit)
model_rebuild(WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropHeadCommitPropAuthor)
model_rebuild(
    WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropHeadCommitPropCommitter
)
model_rebuild(WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropHeadRepository)
model_rebuild(
    WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropHeadRepositoryPropOwner
)
model_rebuild(WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItems)
model_rebuild(
    WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItemsPropBase
)
model_rebuild(
    WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItemsPropBasePropRepo
)
model_rebuild(
    WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItemsPropHead
)
model_rebuild(
    WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItemsPropHeadPropRepo
)
model_rebuild(
    WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropReferencedWorkflowsItems
)
model_rebuild(WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropRepository)
model_rebuild(WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropRepositoryPropOwner)
model_rebuild(WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropTriggeringActor)
model_rebuild(WebhookWorkflowRunCompletedPropWorkflowRunAllof1)
model_rebuild(WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropActor)
model_rebuild(WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadCommit)
model_rebuild(WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadCommitPropAuthor)
model_rebuild(
    WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadCommitPropCommitter
)
model_rebuild(WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadRepository)
model_rebuild(
    WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadRepositoryPropOwner
)
model_rebuild(WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropPullRequestsItems)
model_rebuild(
    WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropReferencedWorkflowsItems
)
model_rebuild(WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropRepository)
model_rebuild(WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropRepositoryPropOwner)
model_rebuild(WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropTriggeringActor)
model_rebuild(WebhookWorkflowRunCompletedPropWorkflowRunMergedActor)
model_rebuild(WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadCommitPropAuthor)
model_rebuild(WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadCommitPropCommitter)
model_rebuild(WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadCommit)
model_rebuild(WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadRepositoryPropOwner)
model_rebuild(WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadRepository)
model_rebuild(WebhookWorkflowRunCompletedPropWorkflowRunMergedPullRequests)
model_rebuild(WebhookWorkflowRunCompletedPropWorkflowRunMergedRepositoryPropOwner)
model_rebuild(WebhookWorkflowRunCompletedPropWorkflowRunMergedRepository)
model_rebuild(WebhookWorkflowRunCompletedPropWorkflowRunMergedTriggeringActor)
model_rebuild(WebhookWorkflowRunInProgress)
model_rebuild(WebhookWorkflowRunInProgressPropWorkflow)
model_rebuild(WebhookWorkflowRunInProgressPropWorkflowRun)
model_rebuild(WebhookWorkflowRunInProgressPropWorkflowRunAllof0)
model_rebuild(WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropActor)
model_rebuild(WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropHeadCommit)
model_rebuild(WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropHeadCommitPropAuthor)
model_rebuild(
    WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropHeadCommitPropCommitter
)
model_rebuild(WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropHeadRepository)
model_rebuild(
    WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropHeadRepositoryPropOwner
)
model_rebuild(WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItems)
model_rebuild(
    WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItemsPropBase
)
model_rebuild(
    WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItemsPropBasePropRepo
)
model_rebuild(
    WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItemsPropHead
)
model_rebuild(
    WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItemsPropHeadPropRepo
)
model_rebuild(
    WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropReferencedWorkflowsItems
)
model_rebuild(WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropRepository)
model_rebuild(WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropRepositoryPropOwner)
model_rebuild(WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropTriggeringActor)
model_rebuild(WebhookWorkflowRunInProgressPropWorkflowRunAllof1)
model_rebuild(WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropActor)
model_rebuild(WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadCommit)
model_rebuild(WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadCommitPropAuthor)
model_rebuild(
    WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadCommitPropCommitter
)
model_rebuild(WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadRepository)
model_rebuild(
    WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadRepositoryPropOwner
)
model_rebuild(WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropPullRequestsItems)
model_rebuild(
    WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropReferencedWorkflowsItems
)
model_rebuild(WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropRepository)
model_rebuild(WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropRepositoryPropOwner)
model_rebuild(WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropTriggeringActor)
model_rebuild(WebhookWorkflowRunInProgressPropWorkflowRunMergedActor)
model_rebuild(WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadCommitPropAuthor)
model_rebuild(WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadCommitPropCommitter)
model_rebuild(WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadCommit)
model_rebuild(WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadRepositoryPropOwner)
model_rebuild(WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadRepository)
model_rebuild(WebhookWorkflowRunInProgressPropWorkflowRunMergedPullRequests)
model_rebuild(WebhookWorkflowRunInProgressPropWorkflowRunMergedRepositoryPropOwner)
model_rebuild(WebhookWorkflowRunInProgressPropWorkflowRunMergedRepository)
model_rebuild(WebhookWorkflowRunInProgressPropWorkflowRunMergedTriggeringActor)
model_rebuild(WebhookWorkflowRunRequested)
model_rebuild(WebhookWorkflowRunRequestedPropWorkflow)
model_rebuild(WebhookWorkflowRunRequestedPropWorkflowRun)
model_rebuild(WebhookWorkflowRunRequestedPropWorkflowRunPropActor)
model_rebuild(WebhookWorkflowRunRequestedPropWorkflowRunPropHeadCommit)
model_rebuild(WebhookWorkflowRunRequestedPropWorkflowRunPropHeadCommitPropAuthor)
model_rebuild(WebhookWorkflowRunRequestedPropWorkflowRunPropHeadCommitPropCommitter)
model_rebuild(WebhookWorkflowRunRequestedPropWorkflowRunPropHeadRepository)
model_rebuild(WebhookWorkflowRunRequestedPropWorkflowRunPropHeadRepositoryPropOwner)
model_rebuild(WebhookWorkflowRunRequestedPropWorkflowRunPropPullRequestsItems)
model_rebuild(WebhookWorkflowRunRequestedPropWorkflowRunPropPullRequestsItemsPropBase)
model_rebuild(
    WebhookWorkflowRunRequestedPropWorkflowRunPropPullRequestsItemsPropBasePropRepo
)
model_rebuild(WebhookWorkflowRunRequestedPropWorkflowRunPropPullRequestsItemsPropHead)
model_rebuild(
    WebhookWorkflowRunRequestedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepo
)
model_rebuild(WebhookWorkflowRunRequestedPropWorkflowRunPropReferencedWorkflowsItems)
model_rebuild(WebhookWorkflowRunRequestedPropWorkflowRunPropRepository)
model_rebuild(WebhookWorkflowRunRequestedPropWorkflowRunPropRepositoryPropOwner)
model_rebuild(WebhookWorkflowRunRequestedPropWorkflowRunPropTriggeringActor)
model_rebuild(AppManifestsCodeConversionsPostResponse201)
model_rebuild(AppManifestsCodeConversionsPostResponse201Allof1)
model_rebuild(AppHookConfigPatchBody)
model_rebuild(AppHookDeliveriesDeliveryIdAttemptsPostResponse202)
model_rebuild(AppInstallationsInstallationIdAccessTokensPostBody)
model_rebuild(ApplicationsClientIdGrantDeleteBody)
model_rebuild(ApplicationsClientIdTokenPostBody)
model_rebuild(ApplicationsClientIdTokenDeleteBody)
model_rebuild(ApplicationsClientIdTokenPatchBody)
model_rebuild(ApplicationsClientIdTokenScopedPostBody)
model_rebuild(EmojisGetResponse200)
model_rebuild(EnterprisesEnterpriseSecretScanningAlertsGetResponse503)
model_rebuild(GistsPostBody)
model_rebuild(GistsPostBodyPropFiles)
model_rebuild(GistsGistIdGetResponse403)
model_rebuild(GistsGistIdGetResponse403PropBlock)
model_rebuild(GistsGistIdPatchBodyPropFiles)
model_rebuild(GistsGistIdPatchBody)
model_rebuild(GistsGistIdCommentsPostBody)
model_rebuild(GistsGistIdCommentsCommentIdPatchBody)
model_rebuild(GistsGistIdStarGetResponse404)
model_rebuild(InstallationRepositoriesGetResponse200)
model_rebuild(MarkdownPostBody)
model_rebuild(NotificationsPutBody)
model_rebuild(NotificationsPutResponse202)
model_rebuild(NotificationsThreadsThreadIdSubscriptionPutBody)
model_rebuild(OrgsOrgPatchBody)
model_rebuild(OrgsOrgActionsCacheUsageByRepositoryGetResponse200)
model_rebuild(OrgsOrgActionsPermissionsPutBody)
model_rebuild(OrgsOrgActionsPermissionsRepositoriesGetResponse200)
model_rebuild(OrgsOrgActionsPermissionsRepositoriesPutBody)
model_rebuild(OrgsOrgActionsRunnersGetResponse200)
model_rebuild(OrgsOrgActionsRunnersGenerateJitconfigPostBody)
model_rebuild(OrgsOrgActionsRunnersGenerateJitconfigPostResponse201)
model_rebuild(OrgsOrgActionsRunnersRunnerIdLabelsGetResponse200)
model_rebuild(OrgsOrgActionsRunnersRunnerIdLabelsPutBody)
model_rebuild(OrgsOrgActionsRunnersRunnerIdLabelsPostBody)
model_rebuild(OrgsOrgActionsRunnersRunnerIdLabelsDeleteResponse200)
model_rebuild(OrgsOrgActionsSecretsGetResponse200)
model_rebuild(OrgsOrgActionsSecretsSecretNamePutBody)
model_rebuild(OrgsOrgActionsSecretsSecretNameRepositoriesGetResponse200)
model_rebuild(OrgsOrgActionsSecretsSecretNameRepositoriesPutBody)
model_rebuild(OrgsOrgActionsVariablesGetResponse200)
model_rebuild(OrgsOrgActionsVariablesPostBody)
model_rebuild(OrgsOrgActionsVariablesNamePatchBody)
model_rebuild(OrgsOrgActionsVariablesNameRepositoriesGetResponse200)
model_rebuild(OrgsOrgActionsVariablesNameRepositoriesPutBody)
model_rebuild(OrgsOrgCodespacesGetResponse200)
model_rebuild(OrgsOrgCodespacesAccessPutBody)
model_rebuild(OrgsOrgCodespacesAccessSelectedUsersPostBody)
model_rebuild(OrgsOrgCodespacesAccessSelectedUsersDeleteBody)
model_rebuild(OrgsOrgCodespacesSecretsGetResponse200)
model_rebuild(OrgsOrgCodespacesSecretsSecretNamePutBody)
model_rebuild(OrgsOrgCodespacesSecretsSecretNameRepositoriesGetResponse200)
model_rebuild(OrgsOrgCodespacesSecretsSecretNameRepositoriesPutBody)
model_rebuild(OrgsOrgCopilotBillingSeatsGetResponse200)
model_rebuild(OrgsOrgCopilotBillingSelectedTeamsPostBody)
model_rebuild(OrgsOrgCopilotBillingSelectedTeamsPostResponse201)
model_rebuild(OrgsOrgCopilotBillingSelectedTeamsDeleteBody)
model_rebuild(OrgsOrgCopilotBillingSelectedTeamsDeleteResponse200)
model_rebuild(OrgsOrgCopilotBillingSelectedUsersPostBody)
model_rebuild(OrgsOrgCopilotBillingSelectedUsersPostResponse201)
model_rebuild(OrgsOrgCopilotBillingSelectedUsersDeleteBody)
model_rebuild(OrgsOrgCopilotBillingSelectedUsersDeleteResponse200)
model_rebuild(OrgsOrgDependabotSecretsGetResponse200)
model_rebuild(OrgsOrgDependabotSecretsSecretNamePutBody)
model_rebuild(OrgsOrgDependabotSecretsSecretNameRepositoriesGetResponse200)
model_rebuild(OrgsOrgDependabotSecretsSecretNameRepositoriesPutBody)
model_rebuild(OrgsOrgHooksPostBody)
model_rebuild(OrgsOrgHooksPostBodyPropConfig)
model_rebuild(OrgsOrgHooksHookIdPatchBody)
model_rebuild(OrgsOrgHooksHookIdPatchBodyPropConfig)
model_rebuild(OrgsOrgHooksHookIdConfigPatchBody)
model_rebuild(OrgsOrgInstallationsGetResponse200)
model_rebuild(OrgsOrgInteractionLimitsGetResponse200Anyof1)
model_rebuild(OrgsOrgInvitationsPostBody)
model_rebuild(OrgsOrgMembersUsernameCodespacesGetResponse200)
model_rebuild(OrgsOrgMembershipsUsernamePutBody)
model_rebuild(OrgsOrgMigrationsPostBody)
model_rebuild(OrgsOrgOrganizationRolesGetResponse200)
model_rebuild(OrgsOrgOrganizationRolesPostBody)
model_rebuild(OrgsOrgOrganizationRolesRoleIdPatchBody)
model_rebuild(OrgsOrgOutsideCollaboratorsUsernamePutBody)
model_rebuild(OrgsOrgOutsideCollaboratorsUsernamePutResponse202)
model_rebuild(OrgsOrgOutsideCollaboratorsUsernameDeleteResponse422)
model_rebuild(OrgsOrgPersonalAccessTokenRequestsPostBody)
model_rebuild(OrgsOrgPersonalAccessTokenRequestsPatRequestIdPostBody)
model_rebuild(OrgsOrgPersonalAccessTokensPostBody)
model_rebuild(OrgsOrgPersonalAccessTokensPatIdPostBody)
model_rebuild(OrgsOrgProjectsPostBody)
model_rebuild(OrgsOrgPropertiesSchemaPatchBody)
model_rebuild(OrgsOrgPropertiesSchemaCustomPropertyNamePutBody)
model_rebuild(OrgsOrgPropertiesValuesPatchBody)
model_rebuild(OrgsOrgReposPostBody)
model_rebuild(OrgsOrgReposPostBodyPropCustomProperties)
model_rebuild(OrgsOrgRulesetsPostBody)
model_rebuild(OrgsOrgRulesetsRulesetIdPutBody)
model_rebuild(OrgsOrgTeamsPostBody)
model_rebuild(OrgsOrgTeamsTeamSlugPatchBody)
model_rebuild(OrgsOrgTeamsTeamSlugDiscussionsPostBody)
model_rebuild(OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberPatchBody)
model_rebuild(OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsPostBody)
model_rebuild(
    OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsCommentNumberPatchBody
)
model_rebuild(
    OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsCommentNumberReactionsPostBody
)
model_rebuild(OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberReactionsPostBody)
model_rebuild(OrgsOrgTeamsTeamSlugMembershipsUsernamePutBody)
model_rebuild(OrgsOrgTeamsTeamSlugProjectsProjectIdPutBody)
model_rebuild(OrgsOrgTeamsTeamSlugProjectsProjectIdPutResponse403)
model_rebuild(OrgsOrgTeamsTeamSlugReposOwnerRepoPutBody)
model_rebuild(OrgsOrgSecurityProductEnablementPostBody)
model_rebuild(ProjectsColumnsCardsCardIdDeleteResponse403)
model_rebuild(ProjectsColumnsCardsCardIdPatchBody)
model_rebuild(ProjectsColumnsCardsCardIdMovesPostBody)
model_rebuild(ProjectsColumnsCardsCardIdMovesPostResponse201)
model_rebuild(ProjectsColumnsCardsCardIdMovesPostResponse403)
model_rebuild(ProjectsColumnsCardsCardIdMovesPostResponse403PropErrorsItems)
model_rebuild(ProjectsColumnsCardsCardIdMovesPostResponse503)
model_rebuild(ProjectsColumnsCardsCardIdMovesPostResponse503PropErrorsItems)
model_rebuild(ProjectsColumnsColumnIdPatchBody)
model_rebuild(ProjectsColumnsColumnIdCardsPostBodyOneof0)
model_rebuild(ProjectsColumnsColumnIdCardsPostBodyOneof1)
model_rebuild(ProjectsColumnsColumnIdCardsPostResponse503)
model_rebuild(ProjectsColumnsColumnIdCardsPostResponse503PropErrorsItems)
model_rebuild(ProjectsColumnsColumnIdMovesPostBody)
model_rebuild(ProjectsColumnsColumnIdMovesPostResponse201)
model_rebuild(ProjectsProjectIdDeleteResponse403)
model_rebuild(ProjectsProjectIdPatchBody)
model_rebuild(ProjectsProjectIdPatchResponse403)
model_rebuild(ProjectsProjectIdCollaboratorsUsernamePutBody)
model_rebuild(ProjectsProjectIdColumnsPostBody)
model_rebuild(ReposOwnerRepoDeleteResponse403)
model_rebuild(ReposOwnerRepoPatchBody)
model_rebuild(ReposOwnerRepoPatchBodyPropSecurityAndAnalysisPropAdvancedSecurity)
model_rebuild(ReposOwnerRepoPatchBodyPropSecurityAndAnalysisPropSecretScanning)
model_rebuild(
    ReposOwnerRepoPatchBodyPropSecurityAndAnalysisPropSecretScanningPushProtection
)
model_rebuild(ReposOwnerRepoPatchBodyPropSecurityAndAnalysis)
model_rebuild(ReposOwnerRepoActionsArtifactsGetResponse200)
model_rebuild(ReposOwnerRepoActionsJobsJobIdRerunPostBody)
model_rebuild(ReposOwnerRepoActionsOidcCustomizationSubPutBody)
model_rebuild(ReposOwnerRepoActionsOrganizationSecretsGetResponse200)
model_rebuild(ReposOwnerRepoActionsOrganizationVariablesGetResponse200)
model_rebuild(ReposOwnerRepoActionsPermissionsPutBody)
model_rebuild(ReposOwnerRepoActionsRunnersGetResponse200)
model_rebuild(ReposOwnerRepoActionsRunnersGenerateJitconfigPostBody)
model_rebuild(ReposOwnerRepoActionsRunnersRunnerIdLabelsPutBody)
model_rebuild(ReposOwnerRepoActionsRunnersRunnerIdLabelsPostBody)
model_rebuild(ReposOwnerRepoActionsRunsGetResponse200)
model_rebuild(ReposOwnerRepoActionsRunsRunIdArtifactsGetResponse200)
model_rebuild(ReposOwnerRepoActionsRunsRunIdAttemptsAttemptNumberJobsGetResponse200)
model_rebuild(ReposOwnerRepoActionsRunsRunIdJobsGetResponse200)
model_rebuild(ReposOwnerRepoActionsRunsRunIdPendingDeploymentsPostBody)
model_rebuild(ReposOwnerRepoActionsRunsRunIdRerunPostBody)
model_rebuild(ReposOwnerRepoActionsRunsRunIdRerunFailedJobsPostBody)
model_rebuild(ReposOwnerRepoActionsSecretsGetResponse200)
model_rebuild(ReposOwnerRepoActionsSecretsSecretNamePutBody)
model_rebuild(ReposOwnerRepoActionsVariablesGetResponse200)
model_rebuild(ReposOwnerRepoActionsVariablesPostBody)
model_rebuild(ReposOwnerRepoActionsVariablesNamePatchBody)
model_rebuild(ReposOwnerRepoActionsWorkflowsGetResponse200)
model_rebuild(ReposOwnerRepoActionsWorkflowsWorkflowIdDispatchesPostBody)
model_rebuild(ReposOwnerRepoActionsWorkflowsWorkflowIdDispatchesPostBodyPropInputs)
model_rebuild(ReposOwnerRepoActionsWorkflowsWorkflowIdRunsGetResponse200)
model_rebuild(ReposOwnerRepoAutolinksPostBody)
model_rebuild(ReposOwnerRepoBranchesBranchProtectionPutBody)
model_rebuild(
    ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredStatusChecksPropChecksItems
)
model_rebuild(ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredStatusChecks)
model_rebuild(
    ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredPullRequestReviewsPropDismissalRestrictions
)
model_rebuild(
    ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredPullRequestReviewsPropBypassPullRequestAllowances
)
model_rebuild(
    ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredPullRequestReviews
)
model_rebuild(ReposOwnerRepoBranchesBranchProtectionPutBodyPropRestrictions)
model_rebuild(ReposOwnerRepoBranchesBranchProtectionRequiredPullRequestReviewsPatchBody)
model_rebuild(
    ReposOwnerRepoBranchesBranchProtectionRequiredPullRequestReviewsPatchBodyPropDismissalRestrictions
)
model_rebuild(
    ReposOwnerRepoBranchesBranchProtectionRequiredPullRequestReviewsPatchBodyPropBypassPullRequestAllowances
)
model_rebuild(ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksPatchBody)
model_rebuild(
    ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksPatchBodyPropChecksItems
)
model_rebuild(
    ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsPutBodyOneof0
)
model_rebuild(
    ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsPostBodyOneof0
)
model_rebuild(
    ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsDeleteBodyOneof0
)
model_rebuild(ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsPutBodyOneof0)
model_rebuild(ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsPostBodyOneof0)
model_rebuild(ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsDeleteBodyOneof0)
model_rebuild(ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsPutBodyOneof0)
model_rebuild(ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsPostBodyOneof0)
model_rebuild(ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsDeleteBodyOneof0)
model_rebuild(ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersPutBodyOneof0)
model_rebuild(ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersPostBodyOneof0)
model_rebuild(ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersDeleteBodyOneof0)
model_rebuild(ReposOwnerRepoBranchesBranchRenamePostBody)
model_rebuild(ReposOwnerRepoCheckRunsPostBodyPropOutput)
model_rebuild(ReposOwnerRepoCheckRunsPostBodyPropOutputPropAnnotationsItems)
model_rebuild(ReposOwnerRepoCheckRunsPostBodyPropOutputPropImagesItems)
model_rebuild(ReposOwnerRepoCheckRunsPostBodyPropActionsItems)
model_rebuild(ReposOwnerRepoCheckRunsPostBodyOneof0)
model_rebuild(ReposOwnerRepoCheckRunsPostBodyOneof1)
model_rebuild(ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutput)
model_rebuild(ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutputPropAnnotationsItems)
model_rebuild(ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutputPropImagesItems)
model_rebuild(ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropActionsItems)
model_rebuild(ReposOwnerRepoCheckRunsCheckRunIdPatchBodyAnyof0)
model_rebuild(ReposOwnerRepoCheckRunsCheckRunIdPatchBodyAnyof1)
model_rebuild(ReposOwnerRepoCheckSuitesPostBody)
model_rebuild(ReposOwnerRepoCheckSuitesPreferencesPatchBody)
model_rebuild(ReposOwnerRepoCheckSuitesPreferencesPatchBodyPropAutoTriggerChecksItems)
model_rebuild(ReposOwnerRepoCheckSuitesCheckSuiteIdCheckRunsGetResponse200)
model_rebuild(ReposOwnerRepoCodeScanningAlertsAlertNumberPatchBody)
model_rebuild(ReposOwnerRepoCodeScanningSarifsPostBody)
model_rebuild(ReposOwnerRepoCodespacesGetResponse200)
model_rebuild(ReposOwnerRepoCodespacesPostBody)
model_rebuild(ReposOwnerRepoCodespacesDevcontainersGetResponse200)
model_rebuild(ReposOwnerRepoCodespacesDevcontainersGetResponse200PropDevcontainersItems)
model_rebuild(ReposOwnerRepoCodespacesMachinesGetResponse200)
model_rebuild(ReposOwnerRepoCodespacesNewGetResponse200)
model_rebuild(ReposOwnerRepoCodespacesNewGetResponse200PropDefaults)
model_rebuild(ReposOwnerRepoCodespacesSecretsGetResponse200)
model_rebuild(ReposOwnerRepoCodespacesSecretsSecretNamePutBody)
model_rebuild(ReposOwnerRepoCollaboratorsUsernamePutBody)
model_rebuild(ReposOwnerRepoCommentsCommentIdPatchBody)
model_rebuild(ReposOwnerRepoCommentsCommentIdReactionsPostBody)
model_rebuild(ReposOwnerRepoCommitsCommitShaCommentsPostBody)
model_rebuild(ReposOwnerRepoCommitsRefCheckRunsGetResponse200)
model_rebuild(ReposOwnerRepoCommitsRefCheckSuitesGetResponse200)
model_rebuild(ReposOwnerRepoContentsPathPutBody)
model_rebuild(ReposOwnerRepoContentsPathPutBodyPropCommitter)
model_rebuild(ReposOwnerRepoContentsPathPutBodyPropAuthor)
model_rebuild(ReposOwnerRepoContentsPathDeleteBody)
model_rebuild(ReposOwnerRepoContentsPathDeleteBodyPropCommitter)
model_rebuild(ReposOwnerRepoContentsPathDeleteBodyPropAuthor)
model_rebuild(ReposOwnerRepoDependabotAlertsAlertNumberPatchBody)
model_rebuild(ReposOwnerRepoDependabotSecretsGetResponse200)
model_rebuild(ReposOwnerRepoDependabotSecretsSecretNamePutBody)
model_rebuild(ReposOwnerRepoDependencyGraphSnapshotsPostResponse201)
model_rebuild(ReposOwnerRepoDeploymentsPostBody)
model_rebuild(ReposOwnerRepoDeploymentsPostBodyPropPayloadOneof0)
model_rebuild(ReposOwnerRepoDeploymentsPostResponse202)
model_rebuild(ReposOwnerRepoDeploymentsDeploymentIdStatusesPostBody)
model_rebuild(ReposOwnerRepoDispatchesPostBody)
model_rebuild(ReposOwnerRepoDispatchesPostBodyPropClientPayload)
model_rebuild(ReposOwnerRepoEnvironmentsGetResponse200)
model_rebuild(ReposOwnerRepoEnvironmentsEnvironmentNamePutBodyPropReviewersItems)
model_rebuild(ReposOwnerRepoEnvironmentsEnvironmentNamePutBody)
model_rebuild(
    ReposOwnerRepoEnvironmentsEnvironmentNameDeploymentBranchPoliciesGetResponse200
)
model_rebuild(
    ReposOwnerRepoEnvironmentsEnvironmentNameDeploymentProtectionRulesGetResponse200
)
model_rebuild(
    ReposOwnerRepoEnvironmentsEnvironmentNameDeploymentProtectionRulesPostBody
)
model_rebuild(
    ReposOwnerRepoEnvironmentsEnvironmentNameDeploymentProtectionRulesAppsGetResponse200
)
model_rebuild(ReposOwnerRepoForksPostBody)
model_rebuild(ReposOwnerRepoGitBlobsPostBody)
model_rebuild(ReposOwnerRepoGitCommitsPostBody)
model_rebuild(ReposOwnerRepoGitCommitsPostBodyPropAuthor)
model_rebuild(ReposOwnerRepoGitCommitsPostBodyPropCommitter)
model_rebuild(ReposOwnerRepoGitRefsPostBody)
model_rebuild(ReposOwnerRepoGitRefsRefPatchBody)
model_rebuild(ReposOwnerRepoGitTagsPostBody)
model_rebuild(ReposOwnerRepoGitTagsPostBodyPropTagger)
model_rebuild(ReposOwnerRepoGitTreesPostBody)
model_rebuild(ReposOwnerRepoGitTreesPostBodyPropTreeItems)
model_rebuild(ReposOwnerRepoHooksPostBodyPropConfig)
model_rebuild(ReposOwnerRepoHooksPostBody)
model_rebuild(ReposOwnerRepoHooksHookIdPatchBody)
model_rebuild(ReposOwnerRepoHooksHookIdPatchBodyPropConfig)
model_rebuild(ReposOwnerRepoHooksHookIdConfigPatchBody)
model_rebuild(ReposOwnerRepoImportPutBody)
model_rebuild(ReposOwnerRepoImportPatchBody)
model_rebuild(ReposOwnerRepoImportAuthorsAuthorIdPatchBody)
model_rebuild(ReposOwnerRepoImportLfsPatchBody)
model_rebuild(ReposOwnerRepoInteractionLimitsGetResponse200Anyof1)
model_rebuild(ReposOwnerRepoInvitationsInvitationIdPatchBody)
model_rebuild(ReposOwnerRepoIssuesPostBody)
model_rebuild(ReposOwnerRepoIssuesPostBodyPropLabelsItemsOneof1)
model_rebuild(ReposOwnerRepoIssuesCommentsCommentIdPatchBody)
model_rebuild(ReposOwnerRepoIssuesCommentsCommentIdReactionsPostBody)
model_rebuild(ReposOwnerRepoIssuesIssueNumberPatchBody)
model_rebuild(ReposOwnerRepoIssuesIssueNumberPatchBodyPropLabelsItemsOneof1)
model_rebuild(ReposOwnerRepoIssuesIssueNumberAssigneesPostBody)
model_rebuild(ReposOwnerRepoIssuesIssueNumberAssigneesDeleteBody)
model_rebuild(ReposOwnerRepoIssuesIssueNumberCommentsPostBody)
model_rebuild(ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof0)
model_rebuild(ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof2)
model_rebuild(ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof2PropLabelsItems)
model_rebuild(ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof3Items)
model_rebuild(ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof0)
model_rebuild(ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof2)
model_rebuild(ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof2PropLabelsItems)
model_rebuild(ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof3Items)
model_rebuild(ReposOwnerRepoIssuesIssueNumberLockPutBody)
model_rebuild(ReposOwnerRepoIssuesIssueNumberReactionsPostBody)
model_rebuild(ReposOwnerRepoKeysPostBody)
model_rebuild(ReposOwnerRepoLabelsPostBody)
model_rebuild(ReposOwnerRepoLabelsNamePatchBody)
model_rebuild(ReposOwnerRepoMergeUpstreamPostBody)
model_rebuild(ReposOwnerRepoMergesPostBody)
model_rebuild(ReposOwnerRepoMilestonesPostBody)
model_rebuild(ReposOwnerRepoMilestonesMilestoneNumberPatchBody)
model_rebuild(ReposOwnerRepoNotificationsPutBody)
model_rebuild(ReposOwnerRepoNotificationsPutResponse202)
model_rebuild(ReposOwnerRepoPagesPutBodyPropSourceAnyof1)
model_rebuild(ReposOwnerRepoPagesPutBodyAnyof0)
model_rebuild(ReposOwnerRepoPagesPutBodyAnyof1)
model_rebuild(ReposOwnerRepoPagesPutBodyAnyof2)
model_rebuild(ReposOwnerRepoPagesPutBodyAnyof3)
model_rebuild(ReposOwnerRepoPagesPutBodyAnyof4)
model_rebuild(ReposOwnerRepoPagesPostBodyPropSource)
model_rebuild(ReposOwnerRepoPagesPostBodyAnyof0)
model_rebuild(ReposOwnerRepoPagesPostBodyAnyof1)
model_rebuild(ReposOwnerRepoPagesDeploymentPostBody)
model_rebuild(ReposOwnerRepoProjectsPostBody)
model_rebuild(ReposOwnerRepoPullsPostBody)
model_rebuild(ReposOwnerRepoPullsCommentsCommentIdPatchBody)
model_rebuild(ReposOwnerRepoPullsCommentsCommentIdReactionsPostBody)
model_rebuild(ReposOwnerRepoPullsPullNumberPatchBody)
model_rebuild(ReposOwnerRepoPullsPullNumberCodespacesPostBody)
model_rebuild(ReposOwnerRepoPullsPullNumberCommentsPostBody)
model_rebuild(ReposOwnerRepoPullsPullNumberCommentsCommentIdRepliesPostBody)
model_rebuild(ReposOwnerRepoPullsPullNumberMergePutBody)
model_rebuild(ReposOwnerRepoPullsPullNumberMergePutResponse405)
model_rebuild(ReposOwnerRepoPullsPullNumberMergePutResponse409)
model_rebuild(ReposOwnerRepoPullsPullNumberRequestedReviewersPostBodyAnyof0)
model_rebuild(ReposOwnerRepoPullsPullNumberRequestedReviewersPostBodyAnyof1)
model_rebuild(ReposOwnerRepoPullsPullNumberRequestedReviewersDeleteBody)
model_rebuild(ReposOwnerRepoPullsPullNumberReviewsPostBody)
model_rebuild(ReposOwnerRepoPullsPullNumberReviewsPostBodyPropCommentsItems)
model_rebuild(ReposOwnerRepoPullsPullNumberReviewsReviewIdPutBody)
model_rebuild(ReposOwnerRepoPullsPullNumberReviewsReviewIdDismissalsPutBody)
model_rebuild(ReposOwnerRepoPullsPullNumberReviewsReviewIdEventsPostBody)
model_rebuild(ReposOwnerRepoPullsPullNumberUpdateBranchPutBody)
model_rebuild(ReposOwnerRepoPullsPullNumberUpdateBranchPutResponse202)
model_rebuild(ReposOwnerRepoReleasesPostBody)
model_rebuild(ReposOwnerRepoReleasesAssetsAssetIdPatchBody)
model_rebuild(ReposOwnerRepoReleasesGenerateNotesPostBody)
model_rebuild(ReposOwnerRepoReleasesReleaseIdPatchBody)
model_rebuild(ReposOwnerRepoReleasesReleaseIdReactionsPostBody)
model_rebuild(ReposOwnerRepoRulesetsPostBody)
model_rebuild(ReposOwnerRepoRulesetsRulesetIdPutBody)
model_rebuild(ReposOwnerRepoSecretScanningAlertsAlertNumberPatchBody)
model_rebuild(ReposOwnerRepoStatusesShaPostBody)
model_rebuild(ReposOwnerRepoSubscriptionPutBody)
model_rebuild(ReposOwnerRepoTagsProtectionPostBody)
model_rebuild(ReposOwnerRepoTopicsPutBody)
model_rebuild(ReposOwnerRepoTransferPostBody)
model_rebuild(ReposTemplateOwnerTemplateRepoGeneratePostBody)
model_rebuild(RepositoriesRepositoryIdEnvironmentsEnvironmentNameSecretsGetResponse200)
model_rebuild(
    RepositoriesRepositoryIdEnvironmentsEnvironmentNameSecretsSecretNamePutBody
)
model_rebuild(
    RepositoriesRepositoryIdEnvironmentsEnvironmentNameVariablesGetResponse200
)
model_rebuild(RepositoriesRepositoryIdEnvironmentsEnvironmentNameVariablesPostBody)
model_rebuild(RepositoriesRepositoryIdEnvironmentsEnvironmentNameVariablesNamePatchBody)
model_rebuild(SearchCodeGetResponse200)
model_rebuild(SearchCommitsGetResponse200)
model_rebuild(SearchIssuesGetResponse200)
model_rebuild(SearchLabelsGetResponse200)
model_rebuild(SearchRepositoriesGetResponse200)
model_rebuild(SearchTopicsGetResponse200)
model_rebuild(SearchUsersGetResponse200)
model_rebuild(TeamsTeamIdPatchBody)
model_rebuild(TeamsTeamIdDiscussionsPostBody)
model_rebuild(TeamsTeamIdDiscussionsDiscussionNumberPatchBody)
model_rebuild(TeamsTeamIdDiscussionsDiscussionNumberCommentsPostBody)
model_rebuild(TeamsTeamIdDiscussionsDiscussionNumberCommentsCommentNumberPatchBody)
model_rebuild(
    TeamsTeamIdDiscussionsDiscussionNumberCommentsCommentNumberReactionsPostBody
)
model_rebuild(TeamsTeamIdDiscussionsDiscussionNumberReactionsPostBody)
model_rebuild(TeamsTeamIdMembershipsUsernamePutBody)
model_rebuild(TeamsTeamIdProjectsProjectIdPutBody)
model_rebuild(TeamsTeamIdProjectsProjectIdPutResponse403)
model_rebuild(TeamsTeamIdReposOwnerRepoPutBody)
model_rebuild(UserPatchBody)
model_rebuild(UserCodespacesGetResponse200)
model_rebuild(UserCodespacesPostBodyOneof0)
model_rebuild(UserCodespacesPostBodyOneof1)
model_rebuild(UserCodespacesPostBodyOneof1PropPullRequest)
model_rebuild(UserCodespacesSecretsGetResponse200)
model_rebuild(UserCodespacesSecretsSecretNamePutBody)
model_rebuild(UserCodespacesSecretsSecretNameRepositoriesGetResponse200)
model_rebuild(UserCodespacesSecretsSecretNameRepositoriesPutBody)
model_rebuild(UserCodespacesCodespaceNamePatchBody)
model_rebuild(UserCodespacesCodespaceNameMachinesGetResponse200)
model_rebuild(UserCodespacesCodespaceNamePublishPostBody)
model_rebuild(UserEmailVisibilityPatchBody)
model_rebuild(UserEmailsPostBodyOneof0)
model_rebuild(UserEmailsDeleteBodyOneof0)
model_rebuild(UserGpgKeysPostBody)
model_rebuild(UserInstallationsGetResponse200)
model_rebuild(UserInstallationsInstallationIdRepositoriesGetResponse200)
model_rebuild(UserInteractionLimitsGetResponse200Anyof1)
model_rebuild(UserKeysPostBody)
model_rebuild(UserMembershipsOrgsOrgPatchBody)
model_rebuild(UserMigrationsPostBody)
model_rebuild(UserProjectsPostBody)
model_rebuild(UserReposPostBody)
model_rebuild(UserSocialAccountsPostBody)
model_rebuild(UserSocialAccountsDeleteBody)
model_rebuild(UserSshSigningKeysPostBody)

__all__ = (
    "Root",
    "SimpleUser",
    "GlobalAdvisory",
    "GlobalAdvisoryPropIdentifiersItems",
    "GlobalAdvisoryPropVulnerabilitiesItems",
    "GlobalAdvisoryPropVulnerabilitiesItemsPropPackage",
    "GlobalAdvisoryPropCvss",
    "GlobalAdvisoryPropCwesItems",
    "GlobalAdvisoryPropCreditsItems",
    "BasicError",
    "ValidationErrorSimple",
    "Integration",
    "IntegrationPropPermissions",
    "WebhookConfig",
    "HookDeliveryItem",
    "ScimError",
    "ValidationError",
    "ValidationErrorPropErrorsItems",
    "HookDelivery",
    "HookDeliveryPropRequest",
    "HookDeliveryPropRequestPropHeaders",
    "HookDeliveryPropRequestPropPayload",
    "HookDeliveryPropResponse",
    "HookDeliveryPropResponsePropHeaders",
    "Enterprise",
    "IntegrationInstallationRequest",
    "AppPermissions",
    "Installation",
    "LicenseSimple",
    "Repository",
    "RepositoryPropPermissions",
    "RepositoryPropTemplateRepositoryPropOwner",
    "RepositoryPropTemplateRepositoryPropPermissions",
    "RepositoryPropTemplateRepository",
    "InstallationToken",
    "ScopedInstallation",
    "Authorization",
    "AuthorizationPropApp",
    "SimpleClassroomRepository",
    "SimpleClassroomOrganization",
    "Classroom",
    "ClassroomAssignment",
    "SimpleClassroomUser",
    "SimpleClassroom",
    "SimpleClassroomAssignment",
    "ClassroomAcceptedAssignment",
    "ClassroomAssignmentGrade",
    "CodeOfConduct",
    "DependabotAlertPackage",
    "DependabotAlertSecurityVulnerability",
    "DependabotAlertSecurityVulnerabilityPropFirstPatchedVersion",
    "DependabotAlertSecurityAdvisory",
    "DependabotAlertSecurityAdvisoryPropCvss",
    "DependabotAlertSecurityAdvisoryPropCwesItems",
    "DependabotAlertSecurityAdvisoryPropIdentifiersItems",
    "DependabotAlertSecurityAdvisoryPropReferencesItems",
    "SimpleRepository",
    "DependabotAlertWithRepository",
    "DependabotAlertWithRepositoryPropDependency",
    "OrganizationSecretScanningAlert",
    "Actor",
    "Milestone",
    "ReactionRollup",
    "Issue",
    "IssuePropLabelsItemsOneof1",
    "IssuePropPullRequest",
    "IssueComment",
    "Event",
    "EventPropRepo",
    "EventPropPayload",
    "EventPropPayloadPropPagesItems",
    "LinkWithType",
    "Feed",
    "FeedPropLinks",
    "BaseGist",
    "BaseGistPropFiles",
    "PublicUser",
    "PublicUserPropPlan",
    "GistHistory",
    "GistHistoryPropChangeStatus",
    "GistSimple",
    "GistSimplePropForksItems",
    "GistSimplePropForkOfPropFiles",
    "GistSimplePropForkOf",
    "GistSimplePropFiles",
    "GistComment",
    "GistCommit",
    "GistCommitPropChangeStatus",
    "GitignoreTemplate",
    "License",
    "MarketplaceListingPlan",
    "MarketplacePurchase",
    "MarketplacePurchasePropMarketplacePendingChange",
    "MarketplacePurchasePropMarketplacePurchase",
    "ApiOverview",
    "ApiOverviewPropSshKeyFingerprints",
    "ApiOverviewPropDomains",
    "SecurityAndAnalysisPropAdvancedSecurity",
    "SecurityAndAnalysisPropDependabotSecurityUpdates",
    "SecurityAndAnalysisPropSecretScanning",
    "SecurityAndAnalysisPropSecretScanningPushProtection",
    "SecurityAndAnalysis",
    "MinimalRepository",
    "MinimalRepositoryPropPermissions",
    "MinimalRepositoryPropLicense",
    "Thread",
    "ThreadPropSubject",
    "ThreadSubscription",
    "OrganizationSimple",
    "OrganizationFull",
    "OrganizationFullPropPlan",
    "ActionsCacheUsageOrgEnterprise",
    "ActionsCacheUsageByRepository",
    "OidcCustomSub",
    "EmptyObject",
    "ActionsOrganizationPermissions",
    "SelectedActions",
    "ActionsGetDefaultWorkflowPermissions",
    "ActionsSetDefaultWorkflowPermissions",
    "RunnerLabel",
    "Runner",
    "RunnerApplication",
    "AuthenticationToken",
    "AuthenticationTokenPropPermissions",
    "OrganizationActionsSecret",
    "ActionsPublicKey",
    "OrganizationActionsVariable",
    "CodeScanningAlertRuleSummary",
    "CodeScanningAnalysisTool",
    "CodeScanningAlertLocation",
    "CodeScanningAlertInstance",
    "CodeScanningAlertInstancePropMessage",
    "CodeScanningOrganizationAlertItems",
    "CodespaceMachine",
    "Codespace",
    "CodespacePropGitStatus",
    "CodespacePropRuntimeConstraints",
    "CodespacesOrgSecret",
    "CodespacesPublicKey",
    "CopilotSeatBreakdown",
    "CopilotOrganizationDetails",
    "TeamSimple",
    "Team",
    "TeamPropPermissions",
    "Organization",
    "OrganizationPropPlan",
    "CopilotSeatDetails",
    "OrganizationDependabotSecret",
    "DependabotPublicKey",
    "Package",
    "OrganizationInvitation",
    "OrgHook",
    "OrgHookPropConfig",
    "InteractionLimitResponse",
    "InteractionLimit",
    "OrgMembership",
    "OrgMembershipPropPermissions",
    "Migration",
    "OrganizationFineGrainedPermission",
    "OrganizationRole",
    "PackageVersion",
    "PackageVersionPropMetadata",
    "PackageVersionPropMetadataPropContainer",
    "PackageVersionPropMetadataPropDocker",
    "OrganizationProgrammaticAccessGrantRequest",
    "OrganizationProgrammaticAccessGrantRequestPropPermissions",
    "OrganizationProgrammaticAccessGrantRequestPropPermissionsPropOrganization",
    "OrganizationProgrammaticAccessGrantRequestPropPermissionsPropRepository",
    "OrganizationProgrammaticAccessGrantRequestPropPermissionsPropOther",
    "OrganizationProgrammaticAccessGrant",
    "OrganizationProgrammaticAccessGrantPropPermissions",
    "OrganizationProgrammaticAccessGrantPropPermissionsPropOrganization",
    "OrganizationProgrammaticAccessGrantPropPermissionsPropRepository",
    "OrganizationProgrammaticAccessGrantPropPermissionsPropOther",
    "Project",
    "OrgCustomProperty",
    "CustomPropertyValue",
    "OrgRepoCustomPropertyValues",
    "CodeOfConductSimple",
    "FullRepository",
    "FullRepositoryPropPermissions",
    "RepositoryRulesetBypassActor",
    "RepositoryRulesetConditions",
    "RepositoryRulesetConditionsPropRefName",
    "RepositoryRulesetConditionsRepositoryNameTarget",
    "RepositoryRulesetConditionsRepositoryNameTargetPropRepositoryName",
    "RepositoryRulesetConditionsRepositoryIdTarget",
    "RepositoryRulesetConditionsRepositoryIdTargetPropRepositoryId",
    "OrgRulesetConditionsOneof0",
    "OrgRulesetConditionsOneof1",
    "RepositoryRuleCreation",
    "RepositoryRuleUpdate",
    "RepositoryRuleUpdatePropParameters",
    "RepositoryRuleDeletion",
    "RepositoryRuleRequiredLinearHistory",
    "RepositoryRuleRequiredDeployments",
    "RepositoryRuleRequiredDeploymentsPropParameters",
    "RepositoryRuleRequiredSignatures",
    "RepositoryRulePullRequest",
    "RepositoryRulePullRequestPropParameters",
    "RepositoryRuleParamsStatusCheckConfiguration",
    "RepositoryRuleRequiredStatusChecks",
    "RepositoryRuleRequiredStatusChecksPropParameters",
    "RepositoryRuleNonFastForward",
    "RepositoryRuleCommitMessagePattern",
    "RepositoryRuleCommitMessagePatternPropParameters",
    "RepositoryRuleCommitAuthorEmailPattern",
    "RepositoryRuleCommitAuthorEmailPatternPropParameters",
    "RepositoryRuleCommitterEmailPattern",
    "RepositoryRuleCommitterEmailPatternPropParameters",
    "RepositoryRuleBranchNamePattern",
    "RepositoryRuleBranchNamePatternPropParameters",
    "RepositoryRuleTagNamePattern",
    "RepositoryRuleTagNamePatternPropParameters",
    "RepositoryRuleParamsWorkflowFileReference",
    "RepositoryRuleWorkflows",
    "RepositoryRuleWorkflowsPropParameters",
    "RepositoryRuleset",
    "RepositoryRulesetPropLinks",
    "RepositoryRulesetPropLinksPropSelf",
    "RepositoryRulesetPropLinksPropHtml",
    "RuleSuitesItems",
    "RuleSuite",
    "RuleSuitePropRuleEvaluationsItems",
    "RuleSuitePropRuleEvaluationsItemsPropRuleSource",
    "RepositoryAdvisoryVulnerability",
    "RepositoryAdvisoryVulnerabilityPropPackage",
    "RepositoryAdvisoryCredit",
    "RepositoryAdvisory",
    "RepositoryAdvisoryPropIdentifiersItems",
    "RepositoryAdvisoryPropSubmission",
    "RepositoryAdvisoryPropCvss",
    "RepositoryAdvisoryPropCwesItems",
    "RepositoryAdvisoryPropCreditsItems",
    "ActionsBillingUsage",
    "ActionsBillingUsagePropMinutesUsedBreakdown",
    "PackagesBillingUsage",
    "CombinedBillingUsage",
    "TeamOrganization",
    "TeamOrganizationPropPlan",
    "TeamFull",
    "TeamDiscussion",
    "TeamDiscussionComment",
    "Reaction",
    "TeamMembership",
    "TeamProject",
    "TeamProjectPropPermissions",
    "TeamRepository",
    "TeamRepositoryPropPermissions",
    "ProjectCard",
    "ProjectColumn",
    "ProjectCollaboratorPermission",
    "RateLimit",
    "RateLimitOverview",
    "RateLimitOverviewPropResources",
    "Artifact",
    "ArtifactPropWorkflowRun",
    "ActionsCacheList",
    "ActionsCacheListPropActionsCachesItems",
    "Job",
    "JobPropStepsItems",
    "OidcCustomSubRepo",
    "ActionsSecret",
    "ActionsVariable",
    "ActionsRepositoryPermissions",
    "ActionsWorkflowAccessToRepository",
    "ReferencedWorkflow",
    "PullRequestMinimal",
    "PullRequestMinimalPropHead",
    "PullRequestMinimalPropHeadPropRepo",
    "PullRequestMinimalPropBase",
    "PullRequestMinimalPropBasePropRepo",
    "SimpleCommit",
    "SimpleCommitPropAuthor",
    "SimpleCommitPropCommitter",
    "WorkflowRun",
    "EnvironmentApprovals",
    "EnvironmentApprovalsPropEnvironmentsItems",
    "ReviewCustomGatesCommentRequired",
    "ReviewCustomGatesStateRequired",
    "PendingDeployment",
    "PendingDeploymentPropEnvironment",
    "PendingDeploymentPropReviewersItems",
    "Deployment",
    "DeploymentPropPayloadOneof0",
    "WorkflowRunUsage",
    "WorkflowRunUsagePropBillable",
    "WorkflowRunUsagePropBillablePropUbuntu",
    "WorkflowRunUsagePropBillablePropUbuntuPropJobRunsItems",
    "WorkflowRunUsagePropBillablePropMacos",
    "WorkflowRunUsagePropBillablePropMacosPropJobRunsItems",
    "WorkflowRunUsagePropBillablePropWindows",
    "WorkflowRunUsagePropBillablePropWindowsPropJobRunsItems",
    "Workflow",
    "WorkflowUsage",
    "WorkflowUsagePropBillable",
    "WorkflowUsagePropBillablePropUbuntu",
    "WorkflowUsagePropBillablePropMacos",
    "WorkflowUsagePropBillablePropWindows",
    "Activity",
    "Autolink",
    "CheckAutomatedSecurityFixes",
    "ProtectedBranchRequiredStatusCheck",
    "ProtectedBranchRequiredStatusCheckPropChecksItems",
    "ProtectedBranchAdminEnforced",
    "ProtectedBranchPullRequestReview",
    "ProtectedBranchPullRequestReviewPropDismissalRestrictions",
    "ProtectedBranchPullRequestReviewPropBypassPullRequestAllowances",
    "BranchRestrictionPolicy",
    "BranchRestrictionPolicyPropUsersItems",
    "BranchRestrictionPolicyPropTeamsItems",
    "BranchRestrictionPolicyPropAppsItems",
    "BranchRestrictionPolicyPropAppsItemsPropOwner",
    "BranchRestrictionPolicyPropAppsItemsPropPermissions",
    "BranchProtection",
    "BranchProtectionPropRequiredLinearHistory",
    "BranchProtectionPropAllowForcePushes",
    "BranchProtectionPropAllowDeletions",
    "BranchProtectionPropBlockCreations",
    "BranchProtectionPropRequiredConversationResolution",
    "BranchProtectionPropRequiredSignatures",
    "BranchProtectionPropLockBranch",
    "BranchProtectionPropAllowForkSyncing",
    "ShortBranch",
    "ShortBranchPropCommit",
    "GitUser",
    "Verification",
    "DiffEntry",
    "Commit",
    "CommitPropCommit",
    "CommitPropCommitPropTree",
    "CommitPropParentsItems",
    "CommitPropStats",
    "BranchWithProtection",
    "BranchWithProtectionPropLinks",
    "StatusCheckPolicy",
    "StatusCheckPolicyPropChecksItems",
    "ProtectedBranch",
    "ProtectedBranchPropRequiredPullRequestReviews",
    "ProtectedBranchPropRequiredPullRequestReviewsPropDismissalRestrictions",
    "ProtectedBranchPropRequiredPullRequestReviewsPropBypassPullRequestAllowances",
    "ProtectedBranchPropRequiredSignatures",
    "ProtectedBranchPropEnforceAdmins",
    "ProtectedBranchPropRequiredLinearHistory",
    "ProtectedBranchPropAllowForcePushes",
    "ProtectedBranchPropAllowDeletions",
    "ProtectedBranchPropRequiredConversationResolution",
    "ProtectedBranchPropBlockCreations",
    "ProtectedBranchPropLockBranch",
    "ProtectedBranchPropAllowForkSyncing",
    "DeploymentSimple",
    "CheckRun",
    "CheckRunPropOutput",
    "CheckRunPropCheckSuite",
    "CheckAnnotation",
    "CheckSuite",
    "CheckSuitePreference",
    "CheckSuitePreferencePropPreferences",
    "CheckSuitePreferencePropPreferencesPropAutoTriggerChecksItems",
    "CodeScanningAlertItems",
    "CodeScanningAlertRule",
    "CodeScanningAlert",
    "CodeScanningAnalysis",
    "CodeScanningAnalysisDeletion",
    "CodeScanningCodeqlDatabase",
    "CodeScanningDefaultSetup",
    "CodeScanningDefaultSetupUpdate",
    "CodeScanningDefaultSetupUpdateResponse",
    "CodeScanningSarifsReceipt",
    "CodeScanningSarifsStatus",
    "CodeownersErrors",
    "CodeownersErrorsPropErrorsItems",
    "CodespacesPermissionsCheckForDevcontainer",
    "RepoCodespacesSecret",
    "Collaborator",
    "CollaboratorPropPermissions",
    "RepositoryInvitation",
    "RepositoryCollaboratorPermission",
    "CommitComment",
    "BranchShort",
    "BranchShortPropCommit",
    "Link",
    "AutoMerge",
    "PullRequestSimple",
    "PullRequestSimplePropLabelsItems",
    "PullRequestSimplePropHead",
    "PullRequestSimplePropBase",
    "PullRequestSimplePropLinks",
    "SimpleCommitStatus",
    "CombinedCommitStatus",
    "Status",
    "CommunityHealthFile",
    "CommunityProfile",
    "CommunityProfilePropFiles",
    "CommitComparison",
    "ContentTree",
    "ContentTreePropEntriesItems",
    "ContentTreePropEntriesItemsPropLinks",
    "ContentTreePropLinks",
    "ContentDirectoryItems",
    "ContentDirectoryItemsPropLinks",
    "ContentFile",
    "ContentFilePropLinks",
    "ContentSymlink",
    "ContentSymlinkPropLinks",
    "ContentSubmodule",
    "ContentSubmodulePropLinks",
    "FileCommit",
    "FileCommitPropContentPropLinks",
    "FileCommitPropContent",
    "FileCommitPropCommit",
    "FileCommitPropCommitPropAuthor",
    "FileCommitPropCommitPropCommitter",
    "FileCommitPropCommitPropTree",
    "FileCommitPropCommitPropParentsItems",
    "FileCommitPropCommitPropVerification",
    "Contributor",
    "DependabotAlert",
    "DependabotAlertPropDependency",
    "DependabotSecret",
    "DependencyGraphDiffItems",
    "DependencyGraphDiffItemsPropVulnerabilitiesItems",
    "DependencyGraphSpdxSbom",
    "DependencyGraphSpdxSbomPropSbom",
    "DependencyGraphSpdxSbomPropSbomPropCreationInfo",
    "DependencyGraphSpdxSbomPropSbomPropPackagesItems",
    "DependencyGraphSpdxSbomPropSbomPropPackagesItemsPropExternalRefsItems",
    "Metadata",
    "Dependency",
    "Manifest",
    "ManifestPropFile",
    "ManifestPropResolved",
    "Snapshot",
    "SnapshotPropJob",
    "SnapshotPropDetector",
    "SnapshotPropManifests",
    "DeploymentStatus",
    "DeploymentBranchPolicySettings",
    "Environment",
    "EnvironmentPropProtectionRulesItemsAnyof0",
    "EnvironmentPropProtectionRulesItemsAnyof1",
    "EnvironmentPropProtectionRulesItemsAnyof1PropReviewersItems",
    "EnvironmentPropProtectionRulesItemsAnyof2",
    "DeploymentBranchPolicy",
    "DeploymentBranchPolicyNamePatternWithType",
    "DeploymentBranchPolicyNamePattern",
    "CustomDeploymentRuleApp",
    "DeploymentProtectionRule",
    "ShortBlob",
    "Blob",
    "GitCommit",
    "GitCommitPropAuthor",
    "GitCommitPropCommitter",
    "GitCommitPropTree",
    "GitCommitPropParentsItems",
    "GitCommitPropVerification",
    "GitRef",
    "GitRefPropObject",
    "GitTag",
    "GitTagPropTagger",
    "GitTagPropObject",
    "GitTree",
    "GitTreePropTreeItems",
    "HookResponse",
    "Hook",
    "HookPropConfig",
    "Import",
    "ImportPropProjectChoicesItems",
    "PorterAuthor",
    "PorterLargeFile",
    "IssueEventLabel",
    "IssueEventDismissedReview",
    "IssueEventMilestone",
    "IssueEventProjectCard",
    "IssueEventRename",
    "IssueEvent",
    "LabeledIssueEvent",
    "LabeledIssueEventPropLabel",
    "UnlabeledIssueEvent",
    "UnlabeledIssueEventPropLabel",
    "AssignedIssueEvent",
    "UnassignedIssueEvent",
    "MilestonedIssueEvent",
    "MilestonedIssueEventPropMilestone",
    "DemilestonedIssueEvent",
    "DemilestonedIssueEventPropMilestone",
    "RenamedIssueEvent",
    "RenamedIssueEventPropRename",
    "ReviewRequestedIssueEvent",
    "ReviewRequestRemovedIssueEvent",
    "ReviewDismissedIssueEvent",
    "ReviewDismissedIssueEventPropDismissedReview",
    "LockedIssueEvent",
    "AddedToProjectIssueEvent",
    "AddedToProjectIssueEventPropProjectCard",
    "MovedColumnInProjectIssueEvent",
    "MovedColumnInProjectIssueEventPropProjectCard",
    "RemovedFromProjectIssueEvent",
    "RemovedFromProjectIssueEventPropProjectCard",
    "ConvertedNoteToIssueIssueEvent",
    "ConvertedNoteToIssueIssueEventPropProjectCard",
    "Label",
    "TimelineCommentEvent",
    "TimelineCrossReferencedEvent",
    "TimelineCrossReferencedEventPropSource",
    "TimelineCommittedEvent",
    "TimelineCommittedEventPropAuthor",
    "TimelineCommittedEventPropCommitter",
    "TimelineCommittedEventPropTree",
    "TimelineCommittedEventPropParentsItems",
    "TimelineCommittedEventPropVerification",
    "TimelineReviewedEvent",
    "TimelineReviewedEventPropLinks",
    "TimelineReviewedEventPropLinksPropHtml",
    "TimelineReviewedEventPropLinksPropPullRequest",
    "PullRequestReviewComment",
    "PullRequestReviewCommentPropLinks",
    "PullRequestReviewCommentPropLinksPropSelf",
    "PullRequestReviewCommentPropLinksPropHtml",
    "PullRequestReviewCommentPropLinksPropPullRequest",
    "TimelineLineCommentedEvent",
    "TimelineCommitCommentedEvent",
    "TimelineAssignedIssueEvent",
    "TimelineUnassignedIssueEvent",
    "StateChangeIssueEvent",
    "DeployKey",
    "Language",
    "LicenseContent",
    "LicenseContentPropLinks",
    "MergedUpstream",
    "PagesSourceHash",
    "PagesHttpsCertificate",
    "Page",
    "PageBuild",
    "PageBuildPropError",
    "PageBuildStatus",
    "PageDeployment",
    "PagesHealthCheck",
    "PagesHealthCheckPropDomain",
    "PagesHealthCheckPropAltDomain",
    "PullRequest",
    "PullRequestPropLabelsItems",
    "PullRequestPropHead",
    "PullRequestPropHeadPropRepoPropOwner",
    "PullRequestPropHeadPropRepoPropPermissions",
    "PullRequestPropHeadPropRepoPropLicense",
    "PullRequestPropHeadPropRepo",
    "PullRequestPropHeadPropUser",
    "PullRequestPropBase",
    "PullRequestPropBasePropRepo",
    "PullRequestPropBasePropRepoPropOwner",
    "PullRequestPropBasePropRepoPropPermissions",
    "PullRequestPropBasePropUser",
    "PullRequestPropLinks",
    "PullRequestMergeResult",
    "PullRequestReviewRequest",
    "PullRequestReview",
    "PullRequestReviewPropLinks",
    "PullRequestReviewPropLinksPropHtml",
    "PullRequestReviewPropLinksPropPullRequest",
    "ReviewComment",
    "ReviewCommentPropLinks",
    "ReleaseAsset",
    "Release",
    "ReleaseNotesContent",
    "RepositoryRuleRulesetInfo",
    "RepositoryRuleDetailedOneof0",
    "RepositoryRuleDetailedOneof1",
    "RepositoryRuleDetailedOneof2",
    "RepositoryRuleDetailedOneof3",
    "RepositoryRuleDetailedOneof4",
    "RepositoryRuleDetailedOneof5",
    "RepositoryRuleDetailedOneof6",
    "RepositoryRuleDetailedOneof7",
    "RepositoryRuleDetailedOneof8",
    "RepositoryRuleDetailedOneof9",
    "RepositoryRuleDetailedOneof10",
    "RepositoryRuleDetailedOneof11",
    "RepositoryRuleDetailedOneof12",
    "RepositoryRuleDetailedOneof13",
    "RepositoryRuleDetailedOneof14",
    "SecretScanningAlert",
    "SecretScanningLocationCommit",
    "SecretScanningLocationIssueTitle",
    "SecretScanningLocationIssueBody",
    "SecretScanningLocationIssueComment",
    "SecretScanningLocationDiscussionTitle",
    "SecretScanningLocationDiscussionBody",
    "SecretScanningLocationDiscussionComment",
    "SecretScanningLocationPullRequestTitle",
    "SecretScanningLocationPullRequestBody",
    "SecretScanningLocationPullRequestComment",
    "SecretScanningLocationPullRequestReview",
    "SecretScanningLocationPullRequestReviewComment",
    "SecretScanningLocation",
    "RepositoryAdvisoryCreate",
    "RepositoryAdvisoryCreatePropVulnerabilitiesItems",
    "RepositoryAdvisoryCreatePropVulnerabilitiesItemsPropPackage",
    "RepositoryAdvisoryCreatePropCreditsItems",
    "PrivateVulnerabilityReportCreate",
    "PrivateVulnerabilityReportCreatePropVulnerabilitiesItems",
    "PrivateVulnerabilityReportCreatePropVulnerabilitiesItemsPropPackage",
    "RepositoryAdvisoryUpdate",
    "RepositoryAdvisoryUpdatePropVulnerabilitiesItems",
    "RepositoryAdvisoryUpdatePropVulnerabilitiesItemsPropPackage",
    "RepositoryAdvisoryUpdatePropCreditsItems",
    "Stargazer",
    "CommitActivity",
    "ContributorActivity",
    "ContributorActivityPropWeeksItems",
    "ParticipationStats",
    "RepositorySubscription",
    "Tag",
    "TagPropCommit",
    "TagProtection",
    "Topic",
    "Traffic",
    "CloneTraffic",
    "ContentTraffic",
    "ReferrerTraffic",
    "ViewTraffic",
    "SearchResultTextMatchesItems",
    "SearchResultTextMatchesItemsPropMatchesItems",
    "CodeSearchResultItem",
    "CommitSearchResultItem",
    "CommitSearchResultItemPropCommit",
    "CommitSearchResultItemPropCommitPropAuthor",
    "CommitSearchResultItemPropCommitPropTree",
    "CommitSearchResultItemPropParentsItems",
    "IssueSearchResultItem",
    "IssueSearchResultItemPropLabelsItems",
    "IssueSearchResultItemPropPullRequest",
    "LabelSearchResultItem",
    "RepoSearchResultItem",
    "RepoSearchResultItemPropPermissions",
    "TopicSearchResultItem",
    "TopicSearchResultItemPropRelatedItems",
    "TopicSearchResultItemPropRelatedItemsPropTopicRelation",
    "TopicSearchResultItemPropAliasesItems",
    "TopicSearchResultItemPropAliasesItemsPropTopicRelation",
    "UserSearchResultItem",
    "PrivateUser",
    "PrivateUserPropPlan",
    "CodespacesSecret",
    "CodespacesUserPublicKey",
    "CodespaceExportDetails",
    "CodespaceWithFullRepository",
    "CodespaceWithFullRepositoryPropGitStatus",
    "CodespaceWithFullRepositoryPropRuntimeConstraints",
    "Email",
    "GpgKey",
    "GpgKeyPropEmailsItems",
    "GpgKeyPropSubkeysItems",
    "GpgKeyPropSubkeysItemsPropEmailsItems",
    "Key",
    "MarketplaceAccount",
    "UserMarketplacePurchase",
    "SocialAccount",
    "SshSigningKey",
    "StarredRepository",
    "Hovercard",
    "HovercardPropContextsItems",
    "KeySimple",
    "EnterpriseWebhooks",
    "SimpleInstallation",
    "OrganizationSimpleWebhooks",
    "RepositoryWebhooks",
    "RepositoryWebhooksPropPermissions",
    "RepositoryWebhooksPropCustomProperties",
    "RepositoryWebhooksPropTemplateRepositoryPropOwner",
    "RepositoryWebhooksPropTemplateRepositoryPropPermissions",
    "RepositoryWebhooksPropTemplateRepository",
    "SimpleUserWebhooks",
    "SimpleCheckSuite",
    "CheckRunWithSimpleCheckSuite",
    "CheckRunWithSimpleCheckSuitePropOutput",
    "Discussion",
    "DiscussionPropAnswerChosenBy",
    "DiscussionPropCategory",
    "DiscussionPropReactions",
    "DiscussionPropUser",
    "MergeGroup",
    "PersonalAccessTokenRequest",
    "PersonalAccessTokenRequestPropPermissionsAdded",
    "PersonalAccessTokenRequestPropPermissionsAddedPropOrganization",
    "PersonalAccessTokenRequestPropPermissionsAddedPropRepository",
    "PersonalAccessTokenRequestPropPermissionsAddedPropOther",
    "PersonalAccessTokenRequestPropPermissionsUpgraded",
    "PersonalAccessTokenRequestPropPermissionsUpgradedPropOrganization",
    "PersonalAccessTokenRequestPropPermissionsUpgradedPropRepository",
    "PersonalAccessTokenRequestPropPermissionsUpgradedPropOther",
    "PersonalAccessTokenRequestPropPermissionsResult",
    "PersonalAccessTokenRequestPropPermissionsResultPropOrganization",
    "PersonalAccessTokenRequestPropPermissionsResultPropRepository",
    "PersonalAccessTokenRequestPropPermissionsResultPropOther",
    "PersonalAccessTokenRequestPropRepositoriesItems",
    "ProjectsV2",
    "ProjectsV2Item",
    "SecretScanningAlertWebhook",
    "WebhookBranchProtectionConfigurationDisabled",
    "WebhookBranchProtectionConfigurationEnabled",
    "WebhookBranchProtectionRuleCreated",
    "WebhookBranchProtectionRuleCreatedPropRule",
    "WebhookBranchProtectionRuleDeleted",
    "WebhookBranchProtectionRuleDeletedPropRule",
    "WebhookBranchProtectionRuleEdited",
    "WebhookBranchProtectionRuleEditedPropChanges",
    "WebhookBranchProtectionRuleEditedPropChangesPropAdminEnforced",
    "WebhookBranchProtectionRuleEditedPropChangesPropAuthorizedActorNames",
    "WebhookBranchProtectionRuleEditedPropChangesPropAuthorizedActorsOnly",
    "WebhookBranchProtectionRuleEditedPropChangesPropAuthorizedDismissalActorsOnly",
    "WebhookBranchProtectionRuleEditedPropChangesPropLinearHistoryRequirementEnforcementLevel",
    "WebhookBranchProtectionRuleEditedPropChangesPropRequiredStatusChecks",
    "WebhookBranchProtectionRuleEditedPropChangesPropRequiredStatusChecksEnforcementLevel",
    "WebhookBranchProtectionRuleEditedPropRule",
    "WebhookCheckRunCompleted",
    "WebhookCheckRunCompletedFormEncoded",
    "WebhookCheckRunCreated",
    "WebhookCheckRunCreatedFormEncoded",
    "WebhookCheckRunRequestedAction",
    "WebhookCheckRunRequestedActionPropRequestedAction",
    "WebhookCheckRunRequestedActionFormEncoded",
    "WebhookCheckRunRerequested",
    "WebhookCheckRunRerequestedFormEncoded",
    "WebhookCheckSuiteCompleted",
    "WebhookCheckSuiteCompletedPropCheckSuite",
    "WebhookCheckSuiteCompletedPropCheckSuitePropApp",
    "WebhookCheckSuiteCompletedPropCheckSuitePropAppPropOwner",
    "WebhookCheckSuiteCompletedPropCheckSuitePropAppPropPermissions",
    "WebhookCheckSuiteCompletedPropCheckSuitePropHeadCommit",
    "WebhookCheckSuiteCompletedPropCheckSuitePropHeadCommitPropAuthor",
    "WebhookCheckSuiteCompletedPropCheckSuitePropHeadCommitPropCommitter",
    "WebhookCheckSuiteCompletedPropCheckSuitePropPullRequestsItems",
    "WebhookCheckSuiteCompletedPropCheckSuitePropPullRequestsItemsPropBase",
    "WebhookCheckSuiteCompletedPropCheckSuitePropPullRequestsItemsPropBasePropRepo",
    "WebhookCheckSuiteCompletedPropCheckSuitePropPullRequestsItemsPropHead",
    "WebhookCheckSuiteCompletedPropCheckSuitePropPullRequestsItemsPropHeadPropRepo",
    "WebhookCheckSuiteRequested",
    "WebhookCheckSuiteRequestedPropCheckSuite",
    "WebhookCheckSuiteRequestedPropCheckSuitePropApp",
    "WebhookCheckSuiteRequestedPropCheckSuitePropAppPropOwner",
    "WebhookCheckSuiteRequestedPropCheckSuitePropAppPropPermissions",
    "WebhookCheckSuiteRequestedPropCheckSuitePropHeadCommit",
    "WebhookCheckSuiteRequestedPropCheckSuitePropHeadCommitPropAuthor",
    "WebhookCheckSuiteRequestedPropCheckSuitePropHeadCommitPropCommitter",
    "WebhookCheckSuiteRequestedPropCheckSuitePropPullRequestsItems",
    "WebhookCheckSuiteRequestedPropCheckSuitePropPullRequestsItemsPropBase",
    "WebhookCheckSuiteRequestedPropCheckSuitePropPullRequestsItemsPropBasePropRepo",
    "WebhookCheckSuiteRequestedPropCheckSuitePropPullRequestsItemsPropHead",
    "WebhookCheckSuiteRequestedPropCheckSuitePropPullRequestsItemsPropHeadPropRepo",
    "WebhookCheckSuiteRerequested",
    "WebhookCheckSuiteRerequestedPropCheckSuite",
    "WebhookCheckSuiteRerequestedPropCheckSuitePropApp",
    "WebhookCheckSuiteRerequestedPropCheckSuitePropAppPropOwner",
    "WebhookCheckSuiteRerequestedPropCheckSuitePropAppPropPermissions",
    "WebhookCheckSuiteRerequestedPropCheckSuitePropHeadCommit",
    "WebhookCheckSuiteRerequestedPropCheckSuitePropHeadCommitPropAuthor",
    "WebhookCheckSuiteRerequestedPropCheckSuitePropHeadCommitPropCommitter",
    "WebhookCheckSuiteRerequestedPropCheckSuitePropPullRequestsItems",
    "WebhookCheckSuiteRerequestedPropCheckSuitePropPullRequestsItemsPropBase",
    "WebhookCheckSuiteRerequestedPropCheckSuitePropPullRequestsItemsPropBasePropRepo",
    "WebhookCheckSuiteRerequestedPropCheckSuitePropPullRequestsItemsPropHead",
    "WebhookCheckSuiteRerequestedPropCheckSuitePropPullRequestsItemsPropHeadPropRepo",
    "WebhookCodeScanningAlertAppearedInBranch",
    "WebhookCodeScanningAlertAppearedInBranchPropAlert",
    "WebhookCodeScanningAlertAppearedInBranchPropAlertPropDismissedBy",
    "WebhookCodeScanningAlertAppearedInBranchPropAlertPropMostRecentInstancePropLocation",
    "WebhookCodeScanningAlertAppearedInBranchPropAlertPropMostRecentInstancePropMessage",
    "WebhookCodeScanningAlertAppearedInBranchPropAlertPropMostRecentInstance",
    "WebhookCodeScanningAlertAppearedInBranchPropAlertPropRule",
    "WebhookCodeScanningAlertAppearedInBranchPropAlertPropTool",
    "WebhookCodeScanningAlertClosedByUser",
    "WebhookCodeScanningAlertClosedByUserPropAlert",
    "WebhookCodeScanningAlertClosedByUserPropAlertPropDismissedBy",
    "WebhookCodeScanningAlertClosedByUserPropAlertPropMostRecentInstancePropLocation",
    "WebhookCodeScanningAlertClosedByUserPropAlertPropMostRecentInstancePropMessage",
    "WebhookCodeScanningAlertClosedByUserPropAlertPropMostRecentInstance",
    "WebhookCodeScanningAlertClosedByUserPropAlertPropRule",
    "WebhookCodeScanningAlertClosedByUserPropAlertPropTool",
    "WebhookCodeScanningAlertCreated",
    "WebhookCodeScanningAlertCreatedPropAlert",
    "WebhookCodeScanningAlertCreatedPropAlertPropMostRecentInstancePropLocation",
    "WebhookCodeScanningAlertCreatedPropAlertPropMostRecentInstancePropMessage",
    "WebhookCodeScanningAlertCreatedPropAlertPropMostRecentInstance",
    "WebhookCodeScanningAlertCreatedPropAlertPropRule",
    "WebhookCodeScanningAlertCreatedPropAlertPropTool",
    "WebhookCodeScanningAlertFixed",
    "WebhookCodeScanningAlertFixedPropAlert",
    "WebhookCodeScanningAlertFixedPropAlertPropDismissedBy",
    "WebhookCodeScanningAlertFixedPropAlertPropMostRecentInstancePropLocation",
    "WebhookCodeScanningAlertFixedPropAlertPropMostRecentInstancePropMessage",
    "WebhookCodeScanningAlertFixedPropAlertPropMostRecentInstance",
    "WebhookCodeScanningAlertFixedPropAlertPropRule",
    "WebhookCodeScanningAlertFixedPropAlertPropTool",
    "WebhookCodeScanningAlertReopened",
    "WebhookCodeScanningAlertReopenedPropAlertPropDismissedBy",
    "WebhookCodeScanningAlertReopenedPropAlertPropMostRecentInstancePropLocation",
    "WebhookCodeScanningAlertReopenedPropAlertPropMostRecentInstancePropMessage",
    "WebhookCodeScanningAlertReopenedPropAlertPropMostRecentInstance",
    "WebhookCodeScanningAlertReopenedPropAlertPropRule",
    "WebhookCodeScanningAlertReopenedPropAlertPropTool",
    "WebhookCodeScanningAlertReopenedPropAlert",
    "WebhookCodeScanningAlertReopenedByUser",
    "WebhookCodeScanningAlertReopenedByUserPropAlert",
    "WebhookCodeScanningAlertReopenedByUserPropAlertPropMostRecentInstancePropLocation",
    "WebhookCodeScanningAlertReopenedByUserPropAlertPropMostRecentInstancePropMessage",
    "WebhookCodeScanningAlertReopenedByUserPropAlertPropMostRecentInstance",
    "WebhookCodeScanningAlertReopenedByUserPropAlertPropRule",
    "WebhookCodeScanningAlertReopenedByUserPropAlertPropTool",
    "WebhookCommitCommentCreated",
    "WebhookCommitCommentCreatedPropComment",
    "WebhookCommitCommentCreatedPropCommentPropReactions",
    "WebhookCommitCommentCreatedPropCommentPropUser",
    "WebhookCreate",
    "WebhookCustomPropertyCreated",
    "WebhookCustomPropertyDeleted",
    "WebhookCustomPropertyDeletedPropDefinition",
    "WebhookCustomPropertyUpdated",
    "WebhookCustomPropertyValuesUpdated",
    "WebhookDelete",
    "WebhookDependabotAlertAutoDismissed",
    "WebhookDependabotAlertAutoReopened",
    "WebhookDependabotAlertCreated",
    "WebhookDependabotAlertDismissed",
    "WebhookDependabotAlertFixed",
    "WebhookDependabotAlertReintroduced",
    "WebhookDependabotAlertReopened",
    "WebhookDeployKeyCreated",
    "WebhookDeployKeyCreatedPropKey",
    "WebhookDeployKeyDeleted",
    "WebhookDeployKeyDeletedPropKey",
    "WebhookDeploymentCreated",
    "WebhookDeploymentCreatedPropDeployment",
    "WebhookDeploymentCreatedPropDeploymentPropCreator",
    "WebhookDeploymentCreatedPropDeploymentPropPayloadOneof0",
    "WebhookDeploymentCreatedPropDeploymentPropPerformedViaGithubAppPropOwner",
    "WebhookDeploymentCreatedPropDeploymentPropPerformedViaGithubAppPropPermissions",
    "WebhookDeploymentCreatedPropDeploymentPropPerformedViaGithubApp",
    "WebhookDeploymentCreatedPropWorkflow",
    "WebhookDeploymentCreatedPropWorkflowRunPropActor",
    "WebhookDeploymentCreatedPropWorkflowRunPropHeadRepository",
    "WebhookDeploymentCreatedPropWorkflowRunPropHeadRepositoryPropOwner",
    "WebhookDeploymentCreatedPropWorkflowRunPropPullRequestsItems",
    "WebhookDeploymentCreatedPropWorkflowRunPropPullRequestsItemsPropBase",
    "WebhookDeploymentCreatedPropWorkflowRunPropPullRequestsItemsPropBasePropRepo",
    "WebhookDeploymentCreatedPropWorkflowRunPropPullRequestsItemsPropHead",
    "WebhookDeploymentCreatedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepo",
    "WebhookDeploymentCreatedPropWorkflowRunPropReferencedWorkflowsItems",
    "WebhookDeploymentCreatedPropWorkflowRunPropRepository",
    "WebhookDeploymentCreatedPropWorkflowRunPropRepositoryPropOwner",
    "WebhookDeploymentCreatedPropWorkflowRunPropTriggeringActor",
    "WebhookDeploymentCreatedPropWorkflowRun",
    "WebhookDeploymentProtectionRuleRequested",
    "WebhookDeploymentReviewApproved",
    "WebhookDeploymentReviewApprovedPropApprover",
    "WebhookDeploymentReviewApprovedPropReviewersItems",
    "WebhookDeploymentReviewApprovedPropReviewersItemsPropReviewer",
    "WebhookDeploymentReviewApprovedPropWorkflowJobRun",
    "WebhookDeploymentReviewApprovedPropWorkflowJobRunsItems",
    "WebhookDeploymentReviewApprovedPropWorkflowRunPropActor",
    "WebhookDeploymentReviewApprovedPropWorkflowRunPropHeadCommit",
    "WebhookDeploymentReviewApprovedPropWorkflowRunPropHeadRepository",
    "WebhookDeploymentReviewApprovedPropWorkflowRunPropHeadRepositoryPropOwner",
    "WebhookDeploymentReviewApprovedPropWorkflowRunPropPullRequestsItems",
    "WebhookDeploymentReviewApprovedPropWorkflowRunPropPullRequestsItemsPropBase",
    "WebhookDeploymentReviewApprovedPropWorkflowRunPropPullRequestsItemsPropBasePropRepo",
    "WebhookDeploymentReviewApprovedPropWorkflowRunPropPullRequestsItemsPropHead",
    "WebhookDeploymentReviewApprovedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepo",
    "WebhookDeploymentReviewApprovedPropWorkflowRunPropReferencedWorkflowsItems",
    "WebhookDeploymentReviewApprovedPropWorkflowRunPropRepository",
    "WebhookDeploymentReviewApprovedPropWorkflowRunPropRepositoryPropOwner",
    "WebhookDeploymentReviewApprovedPropWorkflowRunPropTriggeringActor",
    "WebhookDeploymentReviewApprovedPropWorkflowRun",
    "WebhookDeploymentReviewRejected",
    "WebhookDeploymentReviewRejectedPropApprover",
    "WebhookDeploymentReviewRejectedPropReviewersItems",
    "WebhookDeploymentReviewRejectedPropReviewersItemsPropReviewer",
    "WebhookDeploymentReviewRejectedPropWorkflowJobRun",
    "WebhookDeploymentReviewRejectedPropWorkflowJobRunsItems",
    "WebhookDeploymentReviewRejectedPropWorkflowRunPropActor",
    "WebhookDeploymentReviewRejectedPropWorkflowRunPropHeadCommit",
    "WebhookDeploymentReviewRejectedPropWorkflowRunPropHeadRepository",
    "WebhookDeploymentReviewRejectedPropWorkflowRunPropHeadRepositoryPropOwner",
    "WebhookDeploymentReviewRejectedPropWorkflowRunPropPullRequestsItems",
    "WebhookDeploymentReviewRejectedPropWorkflowRunPropPullRequestsItemsPropBase",
    "WebhookDeploymentReviewRejectedPropWorkflowRunPropPullRequestsItemsPropBasePropRepo",
    "WebhookDeploymentReviewRejectedPropWorkflowRunPropPullRequestsItemsPropHead",
    "WebhookDeploymentReviewRejectedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepo",
    "WebhookDeploymentReviewRejectedPropWorkflowRunPropReferencedWorkflowsItems",
    "WebhookDeploymentReviewRejectedPropWorkflowRunPropRepository",
    "WebhookDeploymentReviewRejectedPropWorkflowRunPropRepositoryPropOwner",
    "WebhookDeploymentReviewRejectedPropWorkflowRunPropTriggeringActor",
    "WebhookDeploymentReviewRejectedPropWorkflowRun",
    "WebhookDeploymentReviewRequested",
    "WebhookDeploymentReviewRequestedPropRequestor",
    "WebhookDeploymentReviewRequestedPropReviewersItems",
    "WebhookDeploymentReviewRequestedPropReviewersItemsPropReviewer",
    "WebhookDeploymentReviewRequestedPropWorkflowJobRun",
    "WebhookDeploymentReviewRequestedPropWorkflowRunPropActor",
    "WebhookDeploymentReviewRequestedPropWorkflowRunPropHeadCommit",
    "WebhookDeploymentReviewRequestedPropWorkflowRunPropHeadRepository",
    "WebhookDeploymentReviewRequestedPropWorkflowRunPropHeadRepositoryPropOwner",
    "WebhookDeploymentReviewRequestedPropWorkflowRunPropPullRequestsItems",
    "WebhookDeploymentReviewRequestedPropWorkflowRunPropPullRequestsItemsPropBase",
    "WebhookDeploymentReviewRequestedPropWorkflowRunPropPullRequestsItemsPropBasePropRepo",
    "WebhookDeploymentReviewRequestedPropWorkflowRunPropPullRequestsItemsPropHead",
    "WebhookDeploymentReviewRequestedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepo",
    "WebhookDeploymentReviewRequestedPropWorkflowRunPropReferencedWorkflowsItems",
    "WebhookDeploymentReviewRequestedPropWorkflowRunPropRepository",
    "WebhookDeploymentReviewRequestedPropWorkflowRunPropRepositoryPropOwner",
    "WebhookDeploymentReviewRequestedPropWorkflowRunPropTriggeringActor",
    "WebhookDeploymentReviewRequestedPropWorkflowRun",
    "WebhookDeploymentStatusCreated",
    "WebhookDeploymentStatusCreatedPropCheckRun",
    "WebhookDeploymentStatusCreatedPropDeployment",
    "WebhookDeploymentStatusCreatedPropDeploymentPropCreator",
    "WebhookDeploymentStatusCreatedPropDeploymentPropPayloadOneof1",
    "WebhookDeploymentStatusCreatedPropDeploymentPropPerformedViaGithubAppPropOwner",
    "WebhookDeploymentStatusCreatedPropDeploymentPropPerformedViaGithubAppPropPermissions",
    "WebhookDeploymentStatusCreatedPropDeploymentPropPerformedViaGithubApp",
    "WebhookDeploymentStatusCreatedPropDeploymentStatus",
    "WebhookDeploymentStatusCreatedPropDeploymentStatusPropCreator",
    "WebhookDeploymentStatusCreatedPropDeploymentStatusPropPerformedViaGithubAppPropOwner",
    "WebhookDeploymentStatusCreatedPropDeploymentStatusPropPerformedViaGithubAppPropPermissions",
    "WebhookDeploymentStatusCreatedPropDeploymentStatusPropPerformedViaGithubApp",
    "WebhookDeploymentStatusCreatedPropWorkflow",
    "WebhookDeploymentStatusCreatedPropWorkflowRunPropActor",
    "WebhookDeploymentStatusCreatedPropWorkflowRunPropHeadRepository",
    "WebhookDeploymentStatusCreatedPropWorkflowRunPropHeadRepositoryPropOwner",
    "WebhookDeploymentStatusCreatedPropWorkflowRunPropPullRequestsItems",
    "WebhookDeploymentStatusCreatedPropWorkflowRunPropPullRequestsItemsPropBase",
    "WebhookDeploymentStatusCreatedPropWorkflowRunPropPullRequestsItemsPropBasePropRepo",
    "WebhookDeploymentStatusCreatedPropWorkflowRunPropPullRequestsItemsPropHead",
    "WebhookDeploymentStatusCreatedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepo",
    "WebhookDeploymentStatusCreatedPropWorkflowRunPropReferencedWorkflowsItems",
    "WebhookDeploymentStatusCreatedPropWorkflowRunPropRepository",
    "WebhookDeploymentStatusCreatedPropWorkflowRunPropRepositoryPropOwner",
    "WebhookDeploymentStatusCreatedPropWorkflowRunPropTriggeringActor",
    "WebhookDeploymentStatusCreatedPropWorkflowRun",
    "WebhookDiscussionAnswered",
    "WebhookDiscussionAnsweredPropAnswer",
    "WebhookDiscussionAnsweredPropAnswerPropReactions",
    "WebhookDiscussionAnsweredPropAnswerPropUser",
    "WebhookDiscussionCategoryChanged",
    "WebhookDiscussionCategoryChangedPropChanges",
    "WebhookDiscussionCategoryChangedPropChangesPropCategory",
    "WebhookDiscussionCategoryChangedPropChangesPropCategoryPropFrom",
    "WebhookDiscussionClosed",
    "WebhookDiscussionCommentCreated",
    "WebhookDiscussionCommentCreatedPropComment",
    "WebhookDiscussionCommentCreatedPropCommentPropReactions",
    "WebhookDiscussionCommentCreatedPropCommentPropUser",
    "WebhookDiscussionCommentDeleted",
    "WebhookDiscussionCommentDeletedPropComment",
    "WebhookDiscussionCommentDeletedPropCommentPropReactions",
    "WebhookDiscussionCommentDeletedPropCommentPropUser",
    "WebhookDiscussionCommentEdited",
    "WebhookDiscussionCommentEditedPropChanges",
    "WebhookDiscussionCommentEditedPropChangesPropBody",
    "WebhookDiscussionCommentEditedPropComment",
    "WebhookDiscussionCommentEditedPropCommentPropReactions",
    "WebhookDiscussionCommentEditedPropCommentPropUser",
    "WebhookDiscussionCreated",
    "WebhookDiscussionCreatedPropDiscussion",
    "WebhookDiscussionCreatedPropDiscussionAllof0",
    "WebhookDiscussionCreatedPropDiscussionAllof0PropAnswerChosenBy",
    "WebhookDiscussionCreatedPropDiscussionAllof0PropCategory",
    "WebhookDiscussionCreatedPropDiscussionAllof0PropReactions",
    "WebhookDiscussionCreatedPropDiscussionAllof0PropUser",
    "WebhookDiscussionCreatedPropDiscussionAllof1",
    "WebhookDiscussionCreatedPropDiscussionAllof1PropCategory",
    "WebhookDiscussionCreatedPropDiscussionAllof1PropReactions",
    "WebhookDiscussionCreatedPropDiscussionAllof1PropUser",
    "WebhookDiscussionCreatedPropDiscussionMergedCategory",
    "WebhookDiscussionCreatedPropDiscussionMergedReactions",
    "WebhookDiscussionCreatedPropDiscussionMergedUser",
    "WebhookDiscussionDeleted",
    "WebhookDiscussionEdited",
    "WebhookDiscussionEditedPropChanges",
    "WebhookDiscussionEditedPropChangesPropBody",
    "WebhookDiscussionEditedPropChangesPropTitle",
    "WebhookDiscussionLabeled",
    "WebhookDiscussionLabeledPropLabel",
    "WebhookDiscussionLocked",
    "WebhookDiscussionPinned",
    "WebhookDiscussionReopened",
    "WebhookDiscussionTransferred",
    "WebhookDiscussionTransferredPropChanges",
    "WebhookDiscussionUnanswered",
    "WebhookDiscussionUnansweredPropOldAnswer",
    "WebhookDiscussionUnansweredPropOldAnswerPropReactions",
    "WebhookDiscussionUnansweredPropOldAnswerPropUser",
    "WebhookDiscussionUnlabeled",
    "WebhookDiscussionUnlabeledPropLabel",
    "WebhookDiscussionUnlocked",
    "WebhookDiscussionUnpinned",
    "WebhookFork",
    "WebhookForkPropForkee",
    "WebhookForkPropForkeeAllof0",
    "WebhookForkPropForkeeAllof0PropCustomProperties",
    "WebhookForkPropForkeeAllof0PropLicense",
    "WebhookForkPropForkeeAllof0PropOwner",
    "WebhookForkPropForkeeAllof0PropPermissions",
    "WebhookForkPropForkeeAllof1",
    "WebhookForkPropForkeeAllof1PropLicense",
    "WebhookForkPropForkeeAllof1PropOwner",
    "WebhookForkPropForkeeMergedLicense",
    "WebhookForkPropForkeeMergedOwner",
    "WebhookGithubAppAuthorizationRevoked",
    "WebhookGollum",
    "WebhookGollumPropPagesItems",
    "WebhookInstallationCreated",
    "WebhookInstallationCreatedPropRepositoriesItems",
    "WebhookInstallationCreatedPropRequester",
    "WebhookInstallationDeleted",
    "WebhookInstallationDeletedPropRepositoriesItems",
    "WebhookInstallationNewPermissionsAccepted",
    "WebhookInstallationNewPermissionsAcceptedPropRepositoriesItems",
    "WebhookInstallationRepositoriesAdded",
    "WebhookInstallationRepositoriesAddedPropRepositoriesAddedItems",
    "WebhookInstallationRepositoriesAddedPropRepositoriesRemovedItems",
    "WebhookInstallationRepositoriesAddedPropRequester",
    "WebhookInstallationRepositoriesRemoved",
    "WebhookInstallationRepositoriesRemovedPropRepositoriesAddedItems",
    "WebhookInstallationRepositoriesRemovedPropRepositoriesRemovedItems",
    "WebhookInstallationRepositoriesRemovedPropRequester",
    "WebhookInstallationSuspend",
    "WebhookInstallationSuspendPropRepositoriesItems",
    "WebhookInstallationTargetRenamed",
    "WebhookInstallationTargetRenamedPropAccount",
    "WebhookInstallationTargetRenamedPropChanges",
    "WebhookInstallationTargetRenamedPropChangesPropLogin",
    "WebhookInstallationTargetRenamedPropChangesPropSlug",
    "WebhookInstallationUnsuspend",
    "WebhookInstallationUnsuspendPropRepositoriesItems",
    "WebhookIssueCommentCreated",
    "WebhookIssueCommentCreatedPropComment",
    "WebhookIssueCommentCreatedPropCommentPropReactions",
    "WebhookIssueCommentCreatedPropCommentPropUser",
    "WebhookIssueCommentCreatedPropIssue",
    "WebhookIssueCommentCreatedPropIssueAllof0",
    "WebhookIssueCommentCreatedPropIssueAllof0PropAssignee",
    "WebhookIssueCommentCreatedPropIssueAllof0PropAssigneesItems",
    "WebhookIssueCommentCreatedPropIssueAllof0PropLabelsItems",
    "WebhookIssueCommentCreatedPropIssueAllof0PropMilestonePropCreator",
    "WebhookIssueCommentCreatedPropIssueAllof0PropMilestone",
    "WebhookIssueCommentCreatedPropIssueAllof0PropPerformedViaGithubAppPropOwner",
    "WebhookIssueCommentCreatedPropIssueAllof0PropPerformedViaGithubAppPropPermissions",
    "WebhookIssueCommentCreatedPropIssueAllof0PropPerformedViaGithubApp",
    "WebhookIssueCommentCreatedPropIssueAllof0PropPullRequest",
    "WebhookIssueCommentCreatedPropIssueAllof0PropReactions",
    "WebhookIssueCommentCreatedPropIssueAllof0PropUser",
    "WebhookIssueCommentCreatedPropIssueAllof1",
    "WebhookIssueCommentCreatedPropIssueAllof1PropAssignee",
    "WebhookIssueCommentCreatedPropIssueAllof1PropAssigneesItems",
    "WebhookIssueCommentCreatedPropIssueAllof1PropLabelsItems",
    "WebhookIssueCommentCreatedPropIssueAllof1PropMilestone",
    "WebhookIssueCommentCreatedPropIssueAllof1PropPerformedViaGithubApp",
    "WebhookIssueCommentCreatedPropIssueAllof1PropReactions",
    "WebhookIssueCommentCreatedPropIssueAllof1PropUser",
    "WebhookIssueCommentCreatedPropIssueMergedAssignees",
    "WebhookIssueCommentCreatedPropIssueMergedMilestone",
    "WebhookIssueCommentCreatedPropIssueMergedPerformedViaGithubApp",
    "WebhookIssueCommentCreatedPropIssueMergedReactions",
    "WebhookIssueCommentCreatedPropIssueMergedUser",
    "WebhookIssueCommentDeleted",
    "WebhookIssueCommentDeletedPropComment",
    "WebhookIssueCommentDeletedPropCommentPropReactions",
    "WebhookIssueCommentDeletedPropCommentPropUser",
    "WebhookIssueCommentDeletedPropIssue",
    "WebhookIssueCommentDeletedPropIssueAllof0",
    "WebhookIssueCommentDeletedPropIssueAllof0PropAssignee",
    "WebhookIssueCommentDeletedPropIssueAllof0PropAssigneesItems",
    "WebhookIssueCommentDeletedPropIssueAllof0PropLabelsItems",
    "WebhookIssueCommentDeletedPropIssueAllof0PropMilestonePropCreator",
    "WebhookIssueCommentDeletedPropIssueAllof0PropMilestone",
    "WebhookIssueCommentDeletedPropIssueAllof0PropPerformedViaGithubAppPropOwner",
    "WebhookIssueCommentDeletedPropIssueAllof0PropPerformedViaGithubAppPropPermissions",
    "WebhookIssueCommentDeletedPropIssueAllof0PropPerformedViaGithubApp",
    "WebhookIssueCommentDeletedPropIssueAllof0PropPullRequest",
    "WebhookIssueCommentDeletedPropIssueAllof0PropReactions",
    "WebhookIssueCommentDeletedPropIssueAllof0PropUser",
    "WebhookIssueCommentDeletedPropIssueAllof1",
    "WebhookIssueCommentDeletedPropIssueAllof1PropAssignee",
    "WebhookIssueCommentDeletedPropIssueAllof1PropAssigneesItems",
    "WebhookIssueCommentDeletedPropIssueAllof1PropLabelsItems",
    "WebhookIssueCommentDeletedPropIssueAllof1PropMilestone",
    "WebhookIssueCommentDeletedPropIssueAllof1PropPerformedViaGithubApp",
    "WebhookIssueCommentDeletedPropIssueAllof1PropReactions",
    "WebhookIssueCommentDeletedPropIssueAllof1PropUser",
    "WebhookIssueCommentDeletedPropIssueMergedAssignees",
    "WebhookIssueCommentDeletedPropIssueMergedMilestone",
    "WebhookIssueCommentDeletedPropIssueMergedPerformedViaGithubApp",
    "WebhookIssueCommentDeletedPropIssueMergedReactions",
    "WebhookIssueCommentDeletedPropIssueMergedUser",
    "WebhookIssueCommentEdited",
    "WebhookIssueCommentEditedPropChanges",
    "WebhookIssueCommentEditedPropChangesPropBody",
    "WebhookIssueCommentEditedPropComment",
    "WebhookIssueCommentEditedPropCommentPropReactions",
    "WebhookIssueCommentEditedPropCommentPropUser",
    "WebhookIssueCommentEditedPropIssue",
    "WebhookIssueCommentEditedPropIssueAllof0",
    "WebhookIssueCommentEditedPropIssueAllof0PropAssignee",
    "WebhookIssueCommentEditedPropIssueAllof0PropAssigneesItems",
    "WebhookIssueCommentEditedPropIssueAllof0PropLabelsItems",
    "WebhookIssueCommentEditedPropIssueAllof0PropMilestonePropCreator",
    "WebhookIssueCommentEditedPropIssueAllof0PropMilestone",
    "WebhookIssueCommentEditedPropIssueAllof0PropPerformedViaGithubAppPropOwner",
    "WebhookIssueCommentEditedPropIssueAllof0PropPerformedViaGithubAppPropPermissions",
    "WebhookIssueCommentEditedPropIssueAllof0PropPerformedViaGithubApp",
    "WebhookIssueCommentEditedPropIssueAllof0PropPullRequest",
    "WebhookIssueCommentEditedPropIssueAllof0PropReactions",
    "WebhookIssueCommentEditedPropIssueAllof0PropUser",
    "WebhookIssueCommentEditedPropIssueAllof1",
    "WebhookIssueCommentEditedPropIssueAllof1PropAssignee",
    "WebhookIssueCommentEditedPropIssueAllof1PropAssigneesItems",
    "WebhookIssueCommentEditedPropIssueAllof1PropLabelsItems",
    "WebhookIssueCommentEditedPropIssueAllof1PropMilestone",
    "WebhookIssueCommentEditedPropIssueAllof1PropPerformedViaGithubApp",
    "WebhookIssueCommentEditedPropIssueAllof1PropReactions",
    "WebhookIssueCommentEditedPropIssueAllof1PropUser",
    "WebhookIssueCommentEditedPropIssueMergedAssignees",
    "WebhookIssueCommentEditedPropIssueMergedMilestone",
    "WebhookIssueCommentEditedPropIssueMergedPerformedViaGithubApp",
    "WebhookIssueCommentEditedPropIssueMergedReactions",
    "WebhookIssueCommentEditedPropIssueMergedUser",
    "WebhookIssuesAssigned",
    "WebhookIssuesAssignedPropAssignee",
    "WebhookIssuesAssignedPropIssue",
    "WebhookIssuesAssignedPropIssuePropAssignee",
    "WebhookIssuesAssignedPropIssuePropAssigneesItems",
    "WebhookIssuesAssignedPropIssuePropLabelsItems",
    "WebhookIssuesAssignedPropIssuePropMilestonePropCreator",
    "WebhookIssuesAssignedPropIssuePropMilestone",
    "WebhookIssuesAssignedPropIssuePropPerformedViaGithubAppPropOwner",
    "WebhookIssuesAssignedPropIssuePropPerformedViaGithubAppPropPermissions",
    "WebhookIssuesAssignedPropIssuePropPerformedViaGithubApp",
    "WebhookIssuesAssignedPropIssuePropPullRequest",
    "WebhookIssuesAssignedPropIssuePropReactions",
    "WebhookIssuesAssignedPropIssuePropUser",
    "WebhookIssuesClosed",
    "WebhookIssuesClosedPropIssue",
    "WebhookIssuesClosedPropIssueAllof0",
    "WebhookIssuesClosedPropIssueAllof0PropAssignee",
    "WebhookIssuesClosedPropIssueAllof0PropAssigneesItems",
    "WebhookIssuesClosedPropIssueAllof0PropLabelsItems",
    "WebhookIssuesClosedPropIssueAllof0PropMilestonePropCreator",
    "WebhookIssuesClosedPropIssueAllof0PropMilestone",
    "WebhookIssuesClosedPropIssueAllof0PropPerformedViaGithubAppPropOwner",
    "WebhookIssuesClosedPropIssueAllof0PropPerformedViaGithubAppPropPermissions",
    "WebhookIssuesClosedPropIssueAllof0PropPerformedViaGithubApp",
    "WebhookIssuesClosedPropIssueAllof0PropPullRequest",
    "WebhookIssuesClosedPropIssueAllof0PropReactions",
    "WebhookIssuesClosedPropIssueAllof0PropUser",
    "WebhookIssuesClosedPropIssueAllof1",
    "WebhookIssuesClosedPropIssueAllof1PropAssignee",
    "WebhookIssuesClosedPropIssueAllof1PropAssigneesItems",
    "WebhookIssuesClosedPropIssueAllof1PropLabelsItems",
    "WebhookIssuesClosedPropIssueAllof1PropMilestone",
    "WebhookIssuesClosedPropIssueAllof1PropPerformedViaGithubApp",
    "WebhookIssuesClosedPropIssueAllof1PropReactions",
    "WebhookIssuesClosedPropIssueAllof1PropUser",
    "WebhookIssuesClosedPropIssueMergedAssignee",
    "WebhookIssuesClosedPropIssueMergedAssignees",
    "WebhookIssuesClosedPropIssueMergedLabels",
    "WebhookIssuesClosedPropIssueMergedMilestone",
    "WebhookIssuesClosedPropIssueMergedPerformedViaGithubApp",
    "WebhookIssuesClosedPropIssueMergedReactions",
    "WebhookIssuesClosedPropIssueMergedUser",
    "WebhookIssuesDeleted",
    "WebhookIssuesDeletedPropIssue",
    "WebhookIssuesDeletedPropIssuePropAssignee",
    "WebhookIssuesDeletedPropIssuePropAssigneesItems",
    "WebhookIssuesDeletedPropIssuePropLabelsItems",
    "WebhookIssuesDeletedPropIssuePropMilestonePropCreator",
    "WebhookIssuesDeletedPropIssuePropMilestone",
    "WebhookIssuesDeletedPropIssuePropPerformedViaGithubAppPropOwner",
    "WebhookIssuesDeletedPropIssuePropPerformedViaGithubAppPropPermissions",
    "WebhookIssuesDeletedPropIssuePropPerformedViaGithubApp",
    "WebhookIssuesDeletedPropIssuePropPullRequest",
    "WebhookIssuesDeletedPropIssuePropReactions",
    "WebhookIssuesDeletedPropIssuePropUser",
    "WebhookIssuesDemilestoned",
    "WebhookIssuesDemilestonedPropIssue",
    "WebhookIssuesDemilestonedPropIssueAllof0",
    "WebhookIssuesDemilestonedPropIssueAllof0PropAssignee",
    "WebhookIssuesDemilestonedPropIssueAllof0PropAssigneesItems",
    "WebhookIssuesDemilestonedPropIssueAllof0PropLabelsItems",
    "WebhookIssuesDemilestonedPropIssueAllof0PropMilestonePropCreator",
    "WebhookIssuesDemilestonedPropIssueAllof0PropMilestone",
    "WebhookIssuesDemilestonedPropIssueAllof0PropPerformedViaGithubAppPropOwner",
    "WebhookIssuesDemilestonedPropIssueAllof0PropPerformedViaGithubAppPropPermissions",
    "WebhookIssuesDemilestonedPropIssueAllof0PropPerformedViaGithubApp",
    "WebhookIssuesDemilestonedPropIssueAllof0PropPullRequest",
    "WebhookIssuesDemilestonedPropIssueAllof0PropReactions",
    "WebhookIssuesDemilestonedPropIssueAllof0PropUser",
    "WebhookIssuesDemilestonedPropIssueAllof1",
    "WebhookIssuesDemilestonedPropIssueAllof1PropAssignee",
    "WebhookIssuesDemilestonedPropIssueAllof1PropAssigneesItems",
    "WebhookIssuesDemilestonedPropIssueAllof1PropLabelsItems",
    "WebhookIssuesDemilestonedPropIssueAllof1PropMilestonePropCreator",
    "WebhookIssuesDemilestonedPropIssueAllof1PropMilestone",
    "WebhookIssuesDemilestonedPropIssueAllof1PropPerformedViaGithubApp",
    "WebhookIssuesDemilestonedPropIssueAllof1PropReactions",
    "WebhookIssuesDemilestonedPropIssueAllof1PropUser",
    "WebhookIssuesDemilestonedPropIssueMergedAssignee",
    "WebhookIssuesDemilestonedPropIssueMergedAssignees",
    "WebhookIssuesDemilestonedPropIssueMergedLabels",
    "WebhookIssuesDemilestonedPropIssueMergedPerformedViaGithubApp",
    "WebhookIssuesDemilestonedPropIssueMergedReactions",
    "WebhookIssuesDemilestonedPropIssueMergedUser",
    "WebhookIssuesDemilestonedPropMilestone",
    "WebhookIssuesDemilestonedPropMilestonePropCreator",
    "WebhookIssuesEdited",
    "WebhookIssuesEditedPropChanges",
    "WebhookIssuesEditedPropChangesPropBody",
    "WebhookIssuesEditedPropChangesPropTitle",
    "WebhookIssuesEditedPropIssue",
    "WebhookIssuesEditedPropIssuePropAssignee",
    "WebhookIssuesEditedPropIssuePropAssigneesItems",
    "WebhookIssuesEditedPropIssuePropLabelsItems",
    "WebhookIssuesEditedPropIssuePropMilestonePropCreator",
    "WebhookIssuesEditedPropIssuePropMilestone",
    "WebhookIssuesEditedPropIssuePropPerformedViaGithubAppPropOwner",
    "WebhookIssuesEditedPropIssuePropPerformedViaGithubAppPropPermissions",
    "WebhookIssuesEditedPropIssuePropPerformedViaGithubApp",
    "WebhookIssuesEditedPropIssuePropPullRequest",
    "WebhookIssuesEditedPropIssuePropReactions",
    "WebhookIssuesEditedPropIssuePropUser",
    "WebhookIssuesEditedPropLabel",
    "WebhookIssuesLabeled",
    "WebhookIssuesLabeledPropIssue",
    "WebhookIssuesLabeledPropIssuePropAssignee",
    "WebhookIssuesLabeledPropIssuePropAssigneesItems",
    "WebhookIssuesLabeledPropIssuePropLabelsItems",
    "WebhookIssuesLabeledPropIssuePropMilestonePropCreator",
    "WebhookIssuesLabeledPropIssuePropMilestone",
    "WebhookIssuesLabeledPropIssuePropPerformedViaGithubAppPropOwner",
    "WebhookIssuesLabeledPropIssuePropPerformedViaGithubAppPropPermissions",
    "WebhookIssuesLabeledPropIssuePropPerformedViaGithubApp",
    "WebhookIssuesLabeledPropIssuePropPullRequest",
    "WebhookIssuesLabeledPropIssuePropReactions",
    "WebhookIssuesLabeledPropIssuePropUser",
    "WebhookIssuesLabeledPropLabel",
    "WebhookIssuesLocked",
    "WebhookIssuesLockedPropIssue",
    "WebhookIssuesLockedPropIssueAllof0",
    "WebhookIssuesLockedPropIssueAllof0PropAssignee",
    "WebhookIssuesLockedPropIssueAllof0PropAssigneesItems",
    "WebhookIssuesLockedPropIssueAllof0PropLabelsItems",
    "WebhookIssuesLockedPropIssueAllof0PropMilestonePropCreator",
    "WebhookIssuesLockedPropIssueAllof0PropMilestone",
    "WebhookIssuesLockedPropIssueAllof0PropPerformedViaGithubAppPropOwner",
    "WebhookIssuesLockedPropIssueAllof0PropPerformedViaGithubAppPropPermissions",
    "WebhookIssuesLockedPropIssueAllof0PropPerformedViaGithubApp",
    "WebhookIssuesLockedPropIssueAllof0PropPullRequest",
    "WebhookIssuesLockedPropIssueAllof0PropReactions",
    "WebhookIssuesLockedPropIssueAllof0PropUser",
    "WebhookIssuesLockedPropIssueAllof1",
    "WebhookIssuesLockedPropIssueAllof1PropAssignee",
    "WebhookIssuesLockedPropIssueAllof1PropAssigneesItems",
    "WebhookIssuesLockedPropIssueAllof1PropLabelsItems",
    "WebhookIssuesLockedPropIssueAllof1PropMilestone",
    "WebhookIssuesLockedPropIssueAllof1PropPerformedViaGithubApp",
    "WebhookIssuesLockedPropIssueAllof1PropReactions",
    "WebhookIssuesLockedPropIssueAllof1PropUser",
    "WebhookIssuesLockedPropIssueMergedAssignee",
    "WebhookIssuesLockedPropIssueMergedAssignees",
    "WebhookIssuesLockedPropIssueMergedLabels",
    "WebhookIssuesLockedPropIssueMergedMilestone",
    "WebhookIssuesLockedPropIssueMergedPerformedViaGithubApp",
    "WebhookIssuesLockedPropIssueMergedReactions",
    "WebhookIssuesLockedPropIssueMergedUser",
    "WebhookIssuesMilestoned",
    "WebhookIssuesMilestonedPropIssue",
    "WebhookIssuesMilestonedPropIssueAllof0",
    "WebhookIssuesMilestonedPropIssueAllof0PropAssignee",
    "WebhookIssuesMilestonedPropIssueAllof0PropAssigneesItems",
    "WebhookIssuesMilestonedPropIssueAllof0PropLabelsItems",
    "WebhookIssuesMilestonedPropIssueAllof0PropMilestonePropCreator",
    "WebhookIssuesMilestonedPropIssueAllof0PropMilestone",
    "WebhookIssuesMilestonedPropIssueAllof0PropPerformedViaGithubAppPropOwner",
    "WebhookIssuesMilestonedPropIssueAllof0PropPerformedViaGithubAppPropPermissions",
    "WebhookIssuesMilestonedPropIssueAllof0PropPerformedViaGithubApp",
    "WebhookIssuesMilestonedPropIssueAllof0PropPullRequest",
    "WebhookIssuesMilestonedPropIssueAllof0PropReactions",
    "WebhookIssuesMilestonedPropIssueAllof0PropUser",
    "WebhookIssuesMilestonedPropIssueAllof1",
    "WebhookIssuesMilestonedPropIssueAllof1PropAssignee",
    "WebhookIssuesMilestonedPropIssueAllof1PropAssigneesItems",
    "WebhookIssuesMilestonedPropIssueAllof1PropLabelsItems",
    "WebhookIssuesMilestonedPropIssueAllof1PropMilestone",
    "WebhookIssuesMilestonedPropIssueAllof1PropMilestonePropCreator",
    "WebhookIssuesMilestonedPropIssueAllof1PropPerformedViaGithubApp",
    "WebhookIssuesMilestonedPropIssueAllof1PropReactions",
    "WebhookIssuesMilestonedPropIssueAllof1PropUser",
    "WebhookIssuesMilestonedPropIssueMergedAssignee",
    "WebhookIssuesMilestonedPropIssueMergedAssignees",
    "WebhookIssuesMilestonedPropIssueMergedLabels",
    "WebhookIssuesMilestonedPropIssueMergedPerformedViaGithubApp",
    "WebhookIssuesMilestonedPropIssueMergedReactions",
    "WebhookIssuesMilestonedPropIssueMergedUser",
    "WebhookIssuesMilestonedPropMilestone",
    "WebhookIssuesMilestonedPropMilestonePropCreator",
    "WebhookIssuesOpened",
    "WebhookIssuesOpenedPropChanges",
    "WebhookIssuesOpenedPropChangesPropOldIssuePropAssignee",
    "WebhookIssuesOpenedPropChangesPropOldIssuePropAssigneesItems",
    "WebhookIssuesOpenedPropChangesPropOldIssuePropLabelsItems",
    "WebhookIssuesOpenedPropChangesPropOldIssuePropMilestonePropCreator",
    "WebhookIssuesOpenedPropChangesPropOldIssuePropMilestone",
    "WebhookIssuesOpenedPropChangesPropOldIssuePropPerformedViaGithubAppPropOwner",
    "WebhookIssuesOpenedPropChangesPropOldIssuePropPerformedViaGithubAppPropPermissions",
    "WebhookIssuesOpenedPropChangesPropOldIssuePropPerformedViaGithubApp",
    "WebhookIssuesOpenedPropChangesPropOldIssuePropPullRequest",
    "WebhookIssuesOpenedPropChangesPropOldIssuePropReactions",
    "WebhookIssuesOpenedPropChangesPropOldIssuePropUser",
    "WebhookIssuesOpenedPropChangesPropOldIssue",
    "WebhookIssuesOpenedPropChangesPropOldRepository",
    "WebhookIssuesOpenedPropChangesPropOldRepositoryPropCustomProperties",
    "WebhookIssuesOpenedPropChangesPropOldRepositoryPropLicense",
    "WebhookIssuesOpenedPropChangesPropOldRepositoryPropOwner",
    "WebhookIssuesOpenedPropChangesPropOldRepositoryPropPermissions",
    "WebhookIssuesOpenedPropIssue",
    "WebhookIssuesOpenedPropIssuePropAssignee",
    "WebhookIssuesOpenedPropIssuePropAssigneesItems",
    "WebhookIssuesOpenedPropIssuePropLabelsItems",
    "WebhookIssuesOpenedPropIssuePropMilestonePropCreator",
    "WebhookIssuesOpenedPropIssuePropMilestone",
    "WebhookIssuesOpenedPropIssuePropPerformedViaGithubAppPropOwner",
    "WebhookIssuesOpenedPropIssuePropPerformedViaGithubAppPropPermissions",
    "WebhookIssuesOpenedPropIssuePropPerformedViaGithubApp",
    "WebhookIssuesOpenedPropIssuePropPullRequest",
    "WebhookIssuesOpenedPropIssuePropReactions",
    "WebhookIssuesOpenedPropIssuePropUser",
    "WebhookIssuesPinned",
    "WebhookIssuesPinnedPropIssue",
    "WebhookIssuesPinnedPropIssuePropAssignee",
    "WebhookIssuesPinnedPropIssuePropAssigneesItems",
    "WebhookIssuesPinnedPropIssuePropLabelsItems",
    "WebhookIssuesPinnedPropIssuePropMilestonePropCreator",
    "WebhookIssuesPinnedPropIssuePropMilestone",
    "WebhookIssuesPinnedPropIssuePropPerformedViaGithubAppPropOwner",
    "WebhookIssuesPinnedPropIssuePropPerformedViaGithubAppPropPermissions",
    "WebhookIssuesPinnedPropIssuePropPerformedViaGithubApp",
    "WebhookIssuesPinnedPropIssuePropPullRequest",
    "WebhookIssuesPinnedPropIssuePropReactions",
    "WebhookIssuesPinnedPropIssuePropUser",
    "WebhookIssuesReopened",
    "WebhookIssuesReopenedPropIssue",
    "WebhookIssuesReopenedPropIssueAllof0",
    "WebhookIssuesReopenedPropIssueAllof0PropAssignee",
    "WebhookIssuesReopenedPropIssueAllof0PropAssigneesItems",
    "WebhookIssuesReopenedPropIssueAllof0PropLabelsItems",
    "WebhookIssuesReopenedPropIssueAllof0PropMilestonePropCreator",
    "WebhookIssuesReopenedPropIssueAllof0PropMilestone",
    "WebhookIssuesReopenedPropIssueAllof0PropPerformedViaGithubAppPropOwner",
    "WebhookIssuesReopenedPropIssueAllof0PropPerformedViaGithubAppPropPermissions",
    "WebhookIssuesReopenedPropIssueAllof0PropPerformedViaGithubApp",
    "WebhookIssuesReopenedPropIssueAllof0PropPullRequest",
    "WebhookIssuesReopenedPropIssueAllof0PropReactions",
    "WebhookIssuesReopenedPropIssueAllof0PropUser",
    "WebhookIssuesReopenedPropIssueAllof1",
    "WebhookIssuesReopenedPropIssueAllof1PropAssignee",
    "WebhookIssuesReopenedPropIssueAllof1PropAssigneesItems",
    "WebhookIssuesReopenedPropIssueAllof1PropLabelsItems",
    "WebhookIssuesReopenedPropIssueAllof1PropMilestone",
    "WebhookIssuesReopenedPropIssueAllof1PropPerformedViaGithubApp",
    "WebhookIssuesReopenedPropIssueAllof1PropReactions",
    "WebhookIssuesReopenedPropIssueAllof1PropUser",
    "WebhookIssuesReopenedPropIssueMergedAssignee",
    "WebhookIssuesReopenedPropIssueMergedAssignees",
    "WebhookIssuesReopenedPropIssueMergedLabels",
    "WebhookIssuesReopenedPropIssueMergedMilestone",
    "WebhookIssuesReopenedPropIssueMergedPerformedViaGithubApp",
    "WebhookIssuesReopenedPropIssueMergedReactions",
    "WebhookIssuesReopenedPropIssueMergedUser",
    "WebhookIssuesTransferred",
    "WebhookIssuesTransferredPropChanges",
    "WebhookIssuesTransferredPropChangesPropNewIssue",
    "WebhookIssuesTransferredPropChangesPropNewIssuePropAssignee",
    "WebhookIssuesTransferredPropChangesPropNewIssuePropAssigneesItems",
    "WebhookIssuesTransferredPropChangesPropNewIssuePropLabelsItems",
    "WebhookIssuesTransferredPropChangesPropNewIssuePropMilestonePropCreator",
    "WebhookIssuesTransferredPropChangesPropNewIssuePropMilestone",
    "WebhookIssuesTransferredPropChangesPropNewIssuePropPerformedViaGithubAppPropOwner",
    "WebhookIssuesTransferredPropChangesPropNewIssuePropPerformedViaGithubAppPropPermissions",
    "WebhookIssuesTransferredPropChangesPropNewIssuePropPerformedViaGithubApp",
    "WebhookIssuesTransferredPropChangesPropNewIssuePropPullRequest",
    "WebhookIssuesTransferredPropChangesPropNewIssuePropReactions",
    "WebhookIssuesTransferredPropChangesPropNewIssuePropUser",
    "WebhookIssuesTransferredPropChangesPropNewRepository",
    "WebhookIssuesTransferredPropChangesPropNewRepositoryPropCustomProperties",
    "WebhookIssuesTransferredPropChangesPropNewRepositoryPropLicense",
    "WebhookIssuesTransferredPropChangesPropNewRepositoryPropOwner",
    "WebhookIssuesTransferredPropChangesPropNewRepositoryPropPermissions",
    "WebhookIssuesTransferredPropIssue",
    "WebhookIssuesTransferredPropIssuePropAssignee",
    "WebhookIssuesTransferredPropIssuePropAssigneesItems",
    "WebhookIssuesTransferredPropIssuePropLabelsItems",
    "WebhookIssuesTransferredPropIssuePropMilestonePropCreator",
    "WebhookIssuesTransferredPropIssuePropMilestone",
    "WebhookIssuesTransferredPropIssuePropPerformedViaGithubAppPropOwner",
    "WebhookIssuesTransferredPropIssuePropPerformedViaGithubAppPropPermissions",
    "WebhookIssuesTransferredPropIssuePropPerformedViaGithubApp",
    "WebhookIssuesTransferredPropIssuePropPullRequest",
    "WebhookIssuesTransferredPropIssuePropReactions",
    "WebhookIssuesTransferredPropIssuePropUser",
    "WebhookIssuesUnassigned",
    "WebhookIssuesUnassignedPropAssignee",
    "WebhookIssuesUnassignedPropIssue",
    "WebhookIssuesUnassignedPropIssuePropAssignee",
    "WebhookIssuesUnassignedPropIssuePropAssigneesItems",
    "WebhookIssuesUnassignedPropIssuePropLabelsItems",
    "WebhookIssuesUnassignedPropIssuePropMilestonePropCreator",
    "WebhookIssuesUnassignedPropIssuePropMilestone",
    "WebhookIssuesUnassignedPropIssuePropPerformedViaGithubAppPropOwner",
    "WebhookIssuesUnassignedPropIssuePropPerformedViaGithubAppPropPermissions",
    "WebhookIssuesUnassignedPropIssuePropPerformedViaGithubApp",
    "WebhookIssuesUnassignedPropIssuePropPullRequest",
    "WebhookIssuesUnassignedPropIssuePropReactions",
    "WebhookIssuesUnassignedPropIssuePropUser",
    "WebhookIssuesUnlabeled",
    "WebhookIssuesUnlabeledPropIssue",
    "WebhookIssuesUnlabeledPropIssuePropAssignee",
    "WebhookIssuesUnlabeledPropIssuePropAssigneesItems",
    "WebhookIssuesUnlabeledPropIssuePropLabelsItems",
    "WebhookIssuesUnlabeledPropIssuePropMilestonePropCreator",
    "WebhookIssuesUnlabeledPropIssuePropMilestone",
    "WebhookIssuesUnlabeledPropIssuePropPerformedViaGithubAppPropOwner",
    "WebhookIssuesUnlabeledPropIssuePropPerformedViaGithubAppPropPermissions",
    "WebhookIssuesUnlabeledPropIssuePropPerformedViaGithubApp",
    "WebhookIssuesUnlabeledPropIssuePropPullRequest",
    "WebhookIssuesUnlabeledPropIssuePropReactions",
    "WebhookIssuesUnlabeledPropIssuePropUser",
    "WebhookIssuesUnlabeledPropLabel",
    "WebhookIssuesUnlocked",
    "WebhookIssuesUnlockedPropIssue",
    "WebhookIssuesUnlockedPropIssueAllof0",
    "WebhookIssuesUnlockedPropIssueAllof0PropAssignee",
    "WebhookIssuesUnlockedPropIssueAllof0PropAssigneesItems",
    "WebhookIssuesUnlockedPropIssueAllof0PropLabelsItems",
    "WebhookIssuesUnlockedPropIssueAllof0PropMilestonePropCreator",
    "WebhookIssuesUnlockedPropIssueAllof0PropMilestone",
    "WebhookIssuesUnlockedPropIssueAllof0PropPerformedViaGithubAppPropOwner",
    "WebhookIssuesUnlockedPropIssueAllof0PropPerformedViaGithubAppPropPermissions",
    "WebhookIssuesUnlockedPropIssueAllof0PropPerformedViaGithubApp",
    "WebhookIssuesUnlockedPropIssueAllof0PropPullRequest",
    "WebhookIssuesUnlockedPropIssueAllof0PropReactions",
    "WebhookIssuesUnlockedPropIssueAllof0PropUser",
    "WebhookIssuesUnlockedPropIssueAllof1",
    "WebhookIssuesUnlockedPropIssueAllof1PropAssignee",
    "WebhookIssuesUnlockedPropIssueAllof1PropAssigneesItems",
    "WebhookIssuesUnlockedPropIssueAllof1PropLabelsItems",
    "WebhookIssuesUnlockedPropIssueAllof1PropMilestone",
    "WebhookIssuesUnlockedPropIssueAllof1PropReactions",
    "WebhookIssuesUnlockedPropIssueAllof1PropUser",
    "WebhookIssuesUnlockedPropIssueMergedAssignee",
    "WebhookIssuesUnlockedPropIssueMergedAssignees",
    "WebhookIssuesUnlockedPropIssueMergedLabels",
    "WebhookIssuesUnlockedPropIssueMergedMilestone",
    "WebhookIssuesUnlockedPropIssueMergedReactions",
    "WebhookIssuesUnlockedPropIssueMergedUser",
    "WebhookIssuesUnpinned",
    "WebhookIssuesUnpinnedPropIssue",
    "WebhookIssuesUnpinnedPropIssuePropAssignee",
    "WebhookIssuesUnpinnedPropIssuePropAssigneesItems",
    "WebhookIssuesUnpinnedPropIssuePropLabelsItems",
    "WebhookIssuesUnpinnedPropIssuePropMilestonePropCreator",
    "WebhookIssuesUnpinnedPropIssuePropMilestone",
    "WebhookIssuesUnpinnedPropIssuePropPerformedViaGithubAppPropOwner",
    "WebhookIssuesUnpinnedPropIssuePropPerformedViaGithubAppPropPermissions",
    "WebhookIssuesUnpinnedPropIssuePropPerformedViaGithubApp",
    "WebhookIssuesUnpinnedPropIssuePropPullRequest",
    "WebhookIssuesUnpinnedPropIssuePropReactions",
    "WebhookIssuesUnpinnedPropIssuePropUser",
    "WebhookLabelCreated",
    "WebhookLabelCreatedPropLabel",
    "WebhookLabelDeleted",
    "WebhookLabelDeletedPropLabel",
    "WebhookLabelEdited",
    "WebhookLabelEditedPropChanges",
    "WebhookLabelEditedPropChangesPropColor",
    "WebhookLabelEditedPropChangesPropDescription",
    "WebhookLabelEditedPropChangesPropName",
    "WebhookLabelEditedPropLabel",
    "WebhookMarketplacePurchaseCancelled",
    "WebhookMarketplacePurchaseCancelledPropMarketplacePurchase",
    "WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof0",
    "WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof0PropAccount",
    "WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof0PropPlan",
    "WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof1",
    "WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof1PropAccount",
    "WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof1PropPlan",
    "WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseMergedAccount",
    "WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseMergedPlan",
    "WebhookMarketplacePurchaseCancelledPropPreviousMarketplacePurchase",
    "WebhookMarketplacePurchaseCancelledPropPreviousMarketplacePurchasePropAccount",
    "WebhookMarketplacePurchaseCancelledPropPreviousMarketplacePurchasePropPlan",
    "WebhookMarketplacePurchaseChanged",
    "WebhookMarketplacePurchaseChangedPropMarketplacePurchase",
    "WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof0",
    "WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof0PropAccount",
    "WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof0PropPlan",
    "WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof1",
    "WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof1PropAccount",
    "WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof1PropPlan",
    "WebhookMarketplacePurchaseChangedPropMarketplacePurchaseMergedAccount",
    "WebhookMarketplacePurchaseChangedPropMarketplacePurchaseMergedPlan",
    "WebhookMarketplacePurchaseChangedPropPreviousMarketplacePurchase",
    "WebhookMarketplacePurchaseChangedPropPreviousMarketplacePurchasePropAccount",
    "WebhookMarketplacePurchaseChangedPropPreviousMarketplacePurchasePropPlan",
    "WebhookMarketplacePurchasePendingChange",
    "WebhookMarketplacePurchasePendingChangePropMarketplacePurchase",
    "WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof0",
    "WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof0PropAccount",
    "WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof0PropPlan",
    "WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof1",
    "WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof1PropAccount",
    "WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof1PropPlan",
    "WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseMergedAccount",
    "WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseMergedPlan",
    "WebhookMarketplacePurchasePendingChangePropPreviousMarketplacePurchase",
    "WebhookMarketplacePurchasePendingChangePropPreviousMarketplacePurchasePropAccount",
    "WebhookMarketplacePurchasePendingChangePropPreviousMarketplacePurchasePropPlan",
    "WebhookMarketplacePurchasePendingChangeCancelled",
    "WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchase",
    "WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchaseAllof0",
    "WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchaseAllof0PropAccount",
    "WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchaseAllof0PropPlan",
    "WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchaseAllof1",
    "WebhookMarketplacePurchasePendingChangeCancelledPropPreviousMarketplacePurchase",
    "WebhookMarketplacePurchasePendingChangeCancelledPropPreviousMarketplacePurchasePropAccount",
    "WebhookMarketplacePurchasePendingChangeCancelledPropPreviousMarketplacePurchasePropPlan",
    "WebhookMarketplacePurchasePurchased",
    "WebhookMarketplacePurchasePurchasedPropMarketplacePurchase",
    "WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof0",
    "WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof0PropAccount",
    "WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof0PropPlan",
    "WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof1",
    "WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof1PropAccount",
    "WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof1PropPlan",
    "WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseMergedAccount",
    "WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseMergedPlan",
    "WebhookMarketplacePurchasePurchasedPropPreviousMarketplacePurchase",
    "WebhookMarketplacePurchasePurchasedPropPreviousMarketplacePurchasePropAccount",
    "WebhookMarketplacePurchasePurchasedPropPreviousMarketplacePurchasePropPlan",
    "WebhookMemberAdded",
    "WebhookMemberAddedPropChanges",
    "WebhookMemberAddedPropChangesPropPermission",
    "WebhookMemberAddedPropMember",
    "WebhookMemberEdited",
    "WebhookMemberEditedPropChanges",
    "WebhookMemberEditedPropChangesPropOldPermission",
    "WebhookMemberEditedPropChangesPropPermission",
    "WebhookMemberEditedPropMember",
    "WebhookMemberRemoved",
    "WebhookMemberRemovedPropMember",
    "WebhookMembershipAdded",
    "WebhookMembershipAddedPropMember",
    "WebhookMembershipAddedPropSender",
    "WebhookMembershipAddedPropTeam",
    "WebhookMembershipAddedPropTeamPropParent",
    "WebhookMembershipRemoved",
    "WebhookMembershipRemovedPropMember",
    "WebhookMembershipRemovedPropSender",
    "WebhookMembershipRemovedPropTeam",
    "WebhookMembershipRemovedPropTeamPropParent",
    "WebhookMergeGroupChecksRequested",
    "WebhookMergeGroupDestroyed",
    "WebhookMetaDeleted",
    "WebhookMetaDeletedPropHook",
    "WebhookMetaDeletedPropHookPropConfig",
    "WebhookMilestoneClosed",
    "WebhookMilestoneClosedPropMilestone",
    "WebhookMilestoneClosedPropMilestonePropCreator",
    "WebhookMilestoneCreated",
    "WebhookMilestoneCreatedPropMilestone",
    "WebhookMilestoneCreatedPropMilestonePropCreator",
    "WebhookMilestoneDeleted",
    "WebhookMilestoneDeletedPropMilestone",
    "WebhookMilestoneDeletedPropMilestonePropCreator",
    "WebhookMilestoneEdited",
    "WebhookMilestoneEditedPropChanges",
    "WebhookMilestoneEditedPropChangesPropDescription",
    "WebhookMilestoneEditedPropChangesPropDueOn",
    "WebhookMilestoneEditedPropChangesPropTitle",
    "WebhookMilestoneEditedPropMilestone",
    "WebhookMilestoneEditedPropMilestonePropCreator",
    "WebhookMilestoneOpened",
    "WebhookMilestoneOpenedPropMilestone",
    "WebhookMilestoneOpenedPropMilestonePropCreator",
    "WebhookOrgBlockBlocked",
    "WebhookOrgBlockBlockedPropBlockedUser",
    "WebhookOrgBlockUnblocked",
    "WebhookOrgBlockUnblockedPropBlockedUser",
    "WebhookOrganizationDeleted",
    "WebhookOrganizationDeletedPropMembership",
    "WebhookOrganizationDeletedPropMembershipPropUser",
    "WebhookOrganizationMemberAdded",
    "WebhookOrganizationMemberAddedPropMembership",
    "WebhookOrganizationMemberAddedPropMembershipPropUser",
    "WebhookOrganizationMemberInvited",
    "WebhookOrganizationMemberInvitedPropInvitation",
    "WebhookOrganizationMemberInvitedPropInvitationPropInviter",
    "WebhookOrganizationMemberInvitedPropUser",
    "WebhookOrganizationMemberRemoved",
    "WebhookOrganizationMemberRemovedPropMembership",
    "WebhookOrganizationMemberRemovedPropMembershipPropUser",
    "WebhookOrganizationRenamed",
    "WebhookOrganizationRenamedPropChanges",
    "WebhookOrganizationRenamedPropChangesPropLogin",
    "WebhookOrganizationRenamedPropMembership",
    "WebhookOrganizationRenamedPropMembershipPropUser",
    "WebhookRubygemsMetadata",
    "WebhookRubygemsMetadataPropVersionInfo",
    "WebhookRubygemsMetadataPropMetadata",
    "WebhookRubygemsMetadataPropDependenciesItems",
    "WebhookPackagePublished",
    "WebhookPackagePublishedPropPackage",
    "WebhookPackagePublishedPropPackagePropOwner",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropAuthor",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropBodyOneof1",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropContainerMetadataPropLabels",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropContainerMetadataPropManifest",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropContainerMetadataPropTag",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropContainerMetadata",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropDockerMetadataItems",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropMetadataItems",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropAuthor",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropBugs",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropDependencies",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropDevDependencies",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropPeerDependencies",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropOptionalDependencies",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropDist",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropRepository",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropScripts",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropMaintainersItems",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropContributorsItems",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropEngines",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropBin",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropMan",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropDirectories",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadata",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropNugetMetadataItems",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropNugetMetadataItemsPropValueOneof3",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropPackageFilesItems",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropRelease",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropReleasePropAuthor",
    "WebhookPackagePublishedPropPackagePropPackageVersion",
    "WebhookPackagePublishedPropPackagePropRegistry",
    "WebhookPackageUpdated",
    "WebhookPackageUpdatedPropPackage",
    "WebhookPackageUpdatedPropPackagePropOwner",
    "WebhookPackageUpdatedPropPackagePropPackageVersion",
    "WebhookPackageUpdatedPropPackagePropPackageVersionPropAuthor",
    "WebhookPackageUpdatedPropPackagePropPackageVersionPropDockerMetadataItems",
    "WebhookPackageUpdatedPropPackagePropPackageVersionPropMetadataItems",
    "WebhookPackageUpdatedPropPackagePropPackageVersionPropPackageFilesItems",
    "WebhookPackageUpdatedPropPackagePropPackageVersionPropRelease",
    "WebhookPackageUpdatedPropPackagePropPackageVersionPropReleasePropAuthor",
    "WebhookPackageUpdatedPropPackagePropRegistry",
    "WebhookPageBuild",
    "WebhookPageBuildPropBuild",
    "WebhookPageBuildPropBuildPropError",
    "WebhookPageBuildPropBuildPropPusher",
    "WebhookPersonalAccessTokenRequestApproved",
    "WebhookPersonalAccessTokenRequestCancelled",
    "WebhookPersonalAccessTokenRequestCreated",
    "WebhookPersonalAccessTokenRequestDenied",
    "WebhookPing",
    "WebhookPingPropHook",
    "WebhookPingPropHookPropConfig",
    "WebhookPingFormEncoded",
    "WebhookProjectCardConverted",
    "WebhookProjectCardConvertedPropChanges",
    "WebhookProjectCardConvertedPropChangesPropNote",
    "WebhookProjectCardConvertedPropProjectCard",
    "WebhookProjectCardConvertedPropProjectCardPropCreator",
    "WebhookProjectCardCreated",
    "WebhookProjectCardCreatedPropProjectCard",
    "WebhookProjectCardCreatedPropProjectCardPropCreator",
    "WebhookProjectCardDeleted",
    "WebhookProjectCardDeletedPropProjectCard",
    "WebhookProjectCardDeletedPropProjectCardPropCreator",
    "WebhookProjectCardEdited",
    "WebhookProjectCardEditedPropChanges",
    "WebhookProjectCardEditedPropChangesPropNote",
    "WebhookProjectCardEditedPropProjectCard",
    "WebhookProjectCardEditedPropProjectCardPropCreator",
    "WebhookProjectCardMoved",
    "WebhookProjectCardMovedPropChanges",
    "WebhookProjectCardMovedPropChangesPropColumnId",
    "WebhookProjectCardMovedPropProjectCard",
    "WebhookProjectCardMovedPropProjectCardAllof0",
    "WebhookProjectCardMovedPropProjectCardAllof0PropCreator",
    "WebhookProjectCardMovedPropProjectCardAllof1",
    "WebhookProjectCardMovedPropProjectCardAllof1PropCreator",
    "WebhookProjectCardMovedPropProjectCardMergedCreator",
    "WebhookProjectClosed",
    "WebhookProjectClosedPropProject",
    "WebhookProjectClosedPropProjectPropCreator",
    "WebhookProjectColumnCreated",
    "WebhookProjectColumnCreatedPropProjectColumn",
    "WebhookProjectColumnDeleted",
    "WebhookProjectColumnDeletedPropProjectColumn",
    "WebhookProjectColumnEdited",
    "WebhookProjectColumnEditedPropChanges",
    "WebhookProjectColumnEditedPropChangesPropName",
    "WebhookProjectColumnEditedPropProjectColumn",
    "WebhookProjectColumnMoved",
    "WebhookProjectColumnMovedPropProjectColumn",
    "WebhookProjectCreated",
    "WebhookProjectCreatedPropProject",
    "WebhookProjectCreatedPropProjectPropCreator",
    "WebhookProjectDeleted",
    "WebhookProjectDeletedPropProject",
    "WebhookProjectDeletedPropProjectPropCreator",
    "WebhookProjectEdited",
    "WebhookProjectEditedPropChanges",
    "WebhookProjectEditedPropChangesPropBody",
    "WebhookProjectEditedPropChangesPropName",
    "WebhookProjectEditedPropProject",
    "WebhookProjectEditedPropProjectPropCreator",
    "WebhookProjectReopened",
    "WebhookProjectReopenedPropProject",
    "WebhookProjectReopenedPropProjectPropCreator",
    "WebhookProjectsV2ProjectClosed",
    "WebhookProjectsV2ProjectCreated",
    "WebhookProjectsV2ProjectDeleted",
    "WebhookProjectsV2ProjectEdited",
    "WebhookProjectsV2ProjectEditedPropChanges",
    "WebhookProjectsV2ProjectEditedPropChangesPropDescription",
    "WebhookProjectsV2ProjectEditedPropChangesPropPublic",
    "WebhookProjectsV2ProjectEditedPropChangesPropShortDescription",
    "WebhookProjectsV2ProjectEditedPropChangesPropTitle",
    "WebhookProjectsV2ItemArchived",
    "WebhookProjectsV2ItemArchivedPropChanges",
    "WebhookProjectsV2ItemArchivedPropChangesPropArchivedAt",
    "WebhookProjectsV2ItemConverted",
    "WebhookProjectsV2ItemConvertedPropChanges",
    "WebhookProjectsV2ItemConvertedPropChangesPropContentType",
    "WebhookProjectsV2ItemCreated",
    "WebhookProjectsV2ItemDeleted",
    "WebhookProjectsV2ItemEdited",
    "WebhookProjectsV2ItemEditedPropChangesOneof0",
    "WebhookProjectsV2ItemEditedPropChangesOneof0PropFieldValue",
    "WebhookProjectsV2ItemEditedPropChangesOneof1",
    "WebhookProjectsV2ItemEditedPropChangesOneof1PropBody",
    "WebhookProjectsV2ItemReordered",
    "WebhookProjectsV2ItemReorderedPropChanges",
    "WebhookProjectsV2ItemReorderedPropChangesPropPreviousProjectsV2ItemNodeId",
    "WebhookProjectsV2ItemRestored",
    "WebhookProjectsV2ItemRestoredPropChanges",
    "WebhookProjectsV2ItemRestoredPropChangesPropArchivedAt",
    "WebhookProjectsV2ProjectReopened",
    "WebhookPublic",
    "WebhookPullRequestAssigned",
    "WebhookPullRequestAssignedPropAssignee",
    "WebhookPullRequestAssignedPropPullRequest",
    "WebhookPullRequestAssignedPropPullRequestPropLinks",
    "WebhookPullRequestAssignedPropPullRequestPropLinksPropComments",
    "WebhookPullRequestAssignedPropPullRequestPropLinksPropCommits",
    "WebhookPullRequestAssignedPropPullRequestPropLinksPropHtml",
    "WebhookPullRequestAssignedPropPullRequestPropLinksPropIssue",
    "WebhookPullRequestAssignedPropPullRequestPropLinksPropReviewComment",
    "WebhookPullRequestAssignedPropPullRequestPropLinksPropReviewComments",
    "WebhookPullRequestAssignedPropPullRequestPropLinksPropSelf",
    "WebhookPullRequestAssignedPropPullRequestPropLinksPropStatuses",
    "WebhookPullRequestAssignedPropPullRequestPropAssignee",
    "WebhookPullRequestAssignedPropPullRequestPropAssigneesItems",
    "WebhookPullRequestAssignedPropPullRequestPropAutoMergePropEnabledBy",
    "WebhookPullRequestAssignedPropPullRequestPropAutoMerge",
    "WebhookPullRequestAssignedPropPullRequestPropBase",
    "WebhookPullRequestAssignedPropPullRequestPropBasePropRepo",
    "WebhookPullRequestAssignedPropPullRequestPropBasePropRepoPropLicense",
    "WebhookPullRequestAssignedPropPullRequestPropBasePropRepoPropOwner",
    "WebhookPullRequestAssignedPropPullRequestPropBasePropRepoPropPermissions",
    "WebhookPullRequestAssignedPropPullRequestPropBasePropUser",
    "WebhookPullRequestAssignedPropPullRequestPropHead",
    "WebhookPullRequestAssignedPropPullRequestPropHeadPropRepoPropLicense",
    "WebhookPullRequestAssignedPropPullRequestPropHeadPropRepoPropOwner",
    "WebhookPullRequestAssignedPropPullRequestPropHeadPropRepoPropPermissions",
    "WebhookPullRequestAssignedPropPullRequestPropHeadPropRepo",
    "WebhookPullRequestAssignedPropPullRequestPropHeadPropUser",
    "WebhookPullRequestAssignedPropPullRequestPropLabelsItems",
    "WebhookPullRequestAssignedPropPullRequestPropMergedBy",
    "WebhookPullRequestAssignedPropPullRequestPropMilestonePropCreator",
    "WebhookPullRequestAssignedPropPullRequestPropMilestone",
    "WebhookPullRequestAssignedPropPullRequestPropRequestedReviewersItemsOneof0",
    "WebhookPullRequestAssignedPropPullRequestPropRequestedReviewersItemsOneof1",
    "WebhookPullRequestAssignedPropPullRequestPropRequestedReviewersItemsOneof1PropParent",
    "WebhookPullRequestAssignedPropPullRequestPropRequestedTeamsItems",
    "WebhookPullRequestAssignedPropPullRequestPropRequestedTeamsItemsPropParent",
    "WebhookPullRequestAssignedPropPullRequestPropUser",
    "WebhookPullRequestAutoMergeDisabled",
    "WebhookPullRequestAutoMergeDisabledPropPullRequest",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinks",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropComments",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropCommits",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropHtml",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropIssue",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropReviewComment",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropReviewComments",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropSelf",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropStatuses",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropAssignee",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropAssigneesItems",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropAutoMergePropEnabledBy",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropAutoMerge",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropBase",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropBasePropRepo",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropBasePropRepoPropLicense",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropBasePropRepoPropOwner",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropBasePropRepoPropPermissions",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropBasePropUser",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropHead",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropHeadPropRepo",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropHeadPropRepoPropLicense",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropHeadPropRepoPropOwner",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropHeadPropRepoPropPermissions",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropHeadPropUser",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropLabelsItems",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropMergedBy",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropMilestonePropCreator",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropMilestone",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropRequestedReviewersItemsOneof0",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropRequestedReviewersItemsOneof1",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropRequestedReviewersItemsOneof1PropParent",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropRequestedTeamsItems",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropRequestedTeamsItemsPropParent",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropUser",
    "WebhookPullRequestAutoMergeEnabled",
    "WebhookPullRequestAutoMergeEnabledPropPullRequest",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinks",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropComments",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropCommits",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropHtml",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropIssue",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropReviewComment",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropReviewComments",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropSelf",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropStatuses",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropAssignee",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropAssigneesItems",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropAutoMergePropEnabledBy",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropAutoMerge",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropBase",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropBasePropRepo",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropBasePropRepoPropLicense",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropBasePropRepoPropOwner",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropBasePropRepoPropPermissions",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropBasePropUser",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropHead",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropHeadPropRepo",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropHeadPropRepoPropLicense",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropHeadPropRepoPropOwner",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropHeadPropRepoPropPermissions",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropHeadPropUser",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropLabelsItems",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropMergedBy",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropMilestonePropCreator",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropMilestone",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropRequestedReviewersItemsOneof0",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropRequestedReviewersItemsOneof1",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropRequestedReviewersItemsOneof1PropParent",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropRequestedTeamsItems",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropRequestedTeamsItemsPropParent",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropUser",
    "WebhookPullRequestClosed",
    "WebhookPullRequestClosedPropPullRequest",
    "WebhookPullRequestClosedPropPullRequestAllof1",
    "WebhookPullRequestConvertedToDraft",
    "WebhookPullRequestConvertedToDraftPropPullRequest",
    "WebhookPullRequestConvertedToDraftPropPullRequestAllof1",
    "WebhookPullRequestDemilestoned",
    "WebhookPullRequestDemilestonedPropPullRequest",
    "WebhookPullRequestDemilestonedPropPullRequestPropLinks",
    "WebhookPullRequestDemilestonedPropPullRequestPropLinksPropComments",
    "WebhookPullRequestDemilestonedPropPullRequestPropLinksPropCommits",
    "WebhookPullRequestDemilestonedPropPullRequestPropLinksPropHtml",
    "WebhookPullRequestDemilestonedPropPullRequestPropLinksPropIssue",
    "WebhookPullRequestDemilestonedPropPullRequestPropLinksPropReviewComment",
    "WebhookPullRequestDemilestonedPropPullRequestPropLinksPropReviewComments",
    "WebhookPullRequestDemilestonedPropPullRequestPropLinksPropSelf",
    "WebhookPullRequestDemilestonedPropPullRequestPropLinksPropStatuses",
    "WebhookPullRequestDemilestonedPropPullRequestPropAssignee",
    "WebhookPullRequestDemilestonedPropPullRequestPropAssigneesItems",
    "WebhookPullRequestDemilestonedPropPullRequestPropAutoMergePropEnabledBy",
    "WebhookPullRequestDemilestonedPropPullRequestPropAutoMerge",
    "WebhookPullRequestDemilestonedPropPullRequestPropBase",
    "WebhookPullRequestDemilestonedPropPullRequestPropBasePropRepo",
    "WebhookPullRequestDemilestonedPropPullRequestPropBasePropRepoPropLicense",
    "WebhookPullRequestDemilestonedPropPullRequestPropBasePropRepoPropOwner",
    "WebhookPullRequestDemilestonedPropPullRequestPropBasePropRepoPropPermissions",
    "WebhookPullRequestDemilestonedPropPullRequestPropBasePropUser",
    "WebhookPullRequestDemilestonedPropPullRequestPropHead",
    "WebhookPullRequestDemilestonedPropPullRequestPropHeadPropRepo",
    "WebhookPullRequestDemilestonedPropPullRequestPropHeadPropRepoPropLicense",
    "WebhookPullRequestDemilestonedPropPullRequestPropHeadPropRepoPropOwner",
    "WebhookPullRequestDemilestonedPropPullRequestPropHeadPropRepoPropPermissions",
    "WebhookPullRequestDemilestonedPropPullRequestPropHeadPropUser",
    "WebhookPullRequestDemilestonedPropPullRequestPropLabelsItems",
    "WebhookPullRequestDemilestonedPropPullRequestPropMergedBy",
    "WebhookPullRequestDemilestonedPropPullRequestPropMilestonePropCreator",
    "WebhookPullRequestDemilestonedPropPullRequestPropMilestone",
    "WebhookPullRequestDemilestonedPropPullRequestPropRequestedReviewersItemsOneof0",
    "WebhookPullRequestDemilestonedPropPullRequestPropRequestedReviewersItemsOneof1",
    "WebhookPullRequestDemilestonedPropPullRequestPropRequestedReviewersItemsOneof1PropParent",
    "WebhookPullRequestDemilestonedPropPullRequestPropRequestedTeamsItems",
    "WebhookPullRequestDemilestonedPropPullRequestPropRequestedTeamsItemsPropParent",
    "WebhookPullRequestDemilestonedPropPullRequestPropUser",
    "WebhookPullRequestDequeued",
    "WebhookPullRequestDequeuedPropPullRequest",
    "WebhookPullRequestDequeuedPropPullRequestPropLinks",
    "WebhookPullRequestDequeuedPropPullRequestPropLinksPropComments",
    "WebhookPullRequestDequeuedPropPullRequestPropLinksPropCommits",
    "WebhookPullRequestDequeuedPropPullRequestPropLinksPropHtml",
    "WebhookPullRequestDequeuedPropPullRequestPropLinksPropIssue",
    "WebhookPullRequestDequeuedPropPullRequestPropLinksPropReviewComment",
    "WebhookPullRequestDequeuedPropPullRequestPropLinksPropReviewComments",
    "WebhookPullRequestDequeuedPropPullRequestPropLinksPropSelf",
    "WebhookPullRequestDequeuedPropPullRequestPropLinksPropStatuses",
    "WebhookPullRequestDequeuedPropPullRequestPropAssignee",
    "WebhookPullRequestDequeuedPropPullRequestPropAssigneesItems",
    "WebhookPullRequestDequeuedPropPullRequestPropAutoMergePropEnabledBy",
    "WebhookPullRequestDequeuedPropPullRequestPropAutoMerge",
    "WebhookPullRequestDequeuedPropPullRequestPropBase",
    "WebhookPullRequestDequeuedPropPullRequestPropBasePropRepo",
    "WebhookPullRequestDequeuedPropPullRequestPropBasePropRepoPropLicense",
    "WebhookPullRequestDequeuedPropPullRequestPropBasePropRepoPropOwner",
    "WebhookPullRequestDequeuedPropPullRequestPropBasePropRepoPropPermissions",
    "WebhookPullRequestDequeuedPropPullRequestPropBasePropUser",
    "WebhookPullRequestDequeuedPropPullRequestPropHead",
    "WebhookPullRequestDequeuedPropPullRequestPropHeadPropRepo",
    "WebhookPullRequestDequeuedPropPullRequestPropHeadPropRepoPropLicense",
    "WebhookPullRequestDequeuedPropPullRequestPropHeadPropRepoPropOwner",
    "WebhookPullRequestDequeuedPropPullRequestPropHeadPropRepoPropPermissions",
    "WebhookPullRequestDequeuedPropPullRequestPropHeadPropUser",
    "WebhookPullRequestDequeuedPropPullRequestPropLabelsItems",
    "WebhookPullRequestDequeuedPropPullRequestPropMergedBy",
    "WebhookPullRequestDequeuedPropPullRequestPropMilestonePropCreator",
    "WebhookPullRequestDequeuedPropPullRequestPropMilestone",
    "WebhookPullRequestDequeuedPropPullRequestPropRequestedReviewersItemsOneof0",
    "WebhookPullRequestDequeuedPropPullRequestPropRequestedReviewersItemsOneof1",
    "WebhookPullRequestDequeuedPropPullRequestPropRequestedReviewersItemsOneof1PropParent",
    "WebhookPullRequestDequeuedPropPullRequestPropRequestedTeamsItems",
    "WebhookPullRequestDequeuedPropPullRequestPropRequestedTeamsItemsPropParent",
    "WebhookPullRequestDequeuedPropPullRequestPropUser",
    "WebhookPullRequestEdited",
    "WebhookPullRequestEditedPropChanges",
    "WebhookPullRequestEditedPropChangesPropBase",
    "WebhookPullRequestEditedPropChangesPropBasePropRef",
    "WebhookPullRequestEditedPropChangesPropBasePropSha",
    "WebhookPullRequestEditedPropChangesPropBody",
    "WebhookPullRequestEditedPropChangesPropTitle",
    "WebhookPullRequestEditedPropPullRequest",
    "WebhookPullRequestEditedPropPullRequestAllof1",
    "WebhookPullRequestEnqueued",
    "WebhookPullRequestEnqueuedPropPullRequest",
    "WebhookPullRequestEnqueuedPropPullRequestPropLinks",
    "WebhookPullRequestEnqueuedPropPullRequestPropLinksPropComments",
    "WebhookPullRequestEnqueuedPropPullRequestPropLinksPropCommits",
    "WebhookPullRequestEnqueuedPropPullRequestPropLinksPropHtml",
    "WebhookPullRequestEnqueuedPropPullRequestPropLinksPropIssue",
    "WebhookPullRequestEnqueuedPropPullRequestPropLinksPropReviewComment",
    "WebhookPullRequestEnqueuedPropPullRequestPropLinksPropReviewComments",
    "WebhookPullRequestEnqueuedPropPullRequestPropLinksPropSelf",
    "WebhookPullRequestEnqueuedPropPullRequestPropLinksPropStatuses",
    "WebhookPullRequestEnqueuedPropPullRequestPropAssignee",
    "WebhookPullRequestEnqueuedPropPullRequestPropAssigneesItems",
    "WebhookPullRequestEnqueuedPropPullRequestPropAutoMergePropEnabledBy",
    "WebhookPullRequestEnqueuedPropPullRequestPropAutoMerge",
    "WebhookPullRequestEnqueuedPropPullRequestPropBase",
    "WebhookPullRequestEnqueuedPropPullRequestPropBasePropRepo",
    "WebhookPullRequestEnqueuedPropPullRequestPropBasePropRepoPropLicense",
    "WebhookPullRequestEnqueuedPropPullRequestPropBasePropRepoPropOwner",
    "WebhookPullRequestEnqueuedPropPullRequestPropBasePropRepoPropPermissions",
    "WebhookPullRequestEnqueuedPropPullRequestPropBasePropUser",
    "WebhookPullRequestEnqueuedPropPullRequestPropHead",
    "WebhookPullRequestEnqueuedPropPullRequestPropHeadPropRepo",
    "WebhookPullRequestEnqueuedPropPullRequestPropHeadPropRepoPropLicense",
    "WebhookPullRequestEnqueuedPropPullRequestPropHeadPropRepoPropOwner",
    "WebhookPullRequestEnqueuedPropPullRequestPropHeadPropRepoPropPermissions",
    "WebhookPullRequestEnqueuedPropPullRequestPropHeadPropUser",
    "WebhookPullRequestEnqueuedPropPullRequestPropLabelsItems",
    "WebhookPullRequestEnqueuedPropPullRequestPropMergedBy",
    "WebhookPullRequestEnqueuedPropPullRequestPropMilestonePropCreator",
    "WebhookPullRequestEnqueuedPropPullRequestPropMilestone",
    "WebhookPullRequestEnqueuedPropPullRequestPropRequestedReviewersItemsOneof0",
    "WebhookPullRequestEnqueuedPropPullRequestPropRequestedReviewersItemsOneof1",
    "WebhookPullRequestEnqueuedPropPullRequestPropRequestedReviewersItemsOneof1PropParent",
    "WebhookPullRequestEnqueuedPropPullRequestPropRequestedTeamsItems",
    "WebhookPullRequestEnqueuedPropPullRequestPropRequestedTeamsItemsPropParent",
    "WebhookPullRequestEnqueuedPropPullRequestPropUser",
    "WebhookPullRequestLabeled",
    "WebhookPullRequestLabeledPropLabel",
    "WebhookPullRequestLabeledPropPullRequest",
    "WebhookPullRequestLabeledPropPullRequestPropLinks",
    "WebhookPullRequestLabeledPropPullRequestPropLinksPropComments",
    "WebhookPullRequestLabeledPropPullRequestPropLinksPropCommits",
    "WebhookPullRequestLabeledPropPullRequestPropLinksPropHtml",
    "WebhookPullRequestLabeledPropPullRequestPropLinksPropIssue",
    "WebhookPullRequestLabeledPropPullRequestPropLinksPropReviewComment",
    "WebhookPullRequestLabeledPropPullRequestPropLinksPropReviewComments",
    "WebhookPullRequestLabeledPropPullRequestPropLinksPropSelf",
    "WebhookPullRequestLabeledPropPullRequestPropLinksPropStatuses",
    "WebhookPullRequestLabeledPropPullRequestPropAssignee",
    "WebhookPullRequestLabeledPropPullRequestPropAssigneesItems",
    "WebhookPullRequestLabeledPropPullRequestPropAutoMergePropEnabledBy",
    "WebhookPullRequestLabeledPropPullRequestPropAutoMerge",
    "WebhookPullRequestLabeledPropPullRequestPropBase",
    "WebhookPullRequestLabeledPropPullRequestPropBasePropRepo",
    "WebhookPullRequestLabeledPropPullRequestPropBasePropRepoPropLicense",
    "WebhookPullRequestLabeledPropPullRequestPropBasePropRepoPropOwner",
    "WebhookPullRequestLabeledPropPullRequestPropBasePropRepoPropPermissions",
    "WebhookPullRequestLabeledPropPullRequestPropBasePropUser",
    "WebhookPullRequestLabeledPropPullRequestPropHead",
    "WebhookPullRequestLabeledPropPullRequestPropHeadPropRepoPropLicense",
    "WebhookPullRequestLabeledPropPullRequestPropHeadPropRepoPropOwner",
    "WebhookPullRequestLabeledPropPullRequestPropHeadPropRepoPropPermissions",
    "WebhookPullRequestLabeledPropPullRequestPropHeadPropRepo",
    "WebhookPullRequestLabeledPropPullRequestPropHeadPropUser",
    "WebhookPullRequestLabeledPropPullRequestPropLabelsItems",
    "WebhookPullRequestLabeledPropPullRequestPropMergedBy",
    "WebhookPullRequestLabeledPropPullRequestPropMilestonePropCreator",
    "WebhookPullRequestLabeledPropPullRequestPropMilestone",
    "WebhookPullRequestLabeledPropPullRequestPropRequestedReviewersItemsOneof0",
    "WebhookPullRequestLabeledPropPullRequestPropRequestedReviewersItemsOneof1",
    "WebhookPullRequestLabeledPropPullRequestPropRequestedReviewersItemsOneof1PropParent",
    "WebhookPullRequestLabeledPropPullRequestPropRequestedTeamsItems",
    "WebhookPullRequestLabeledPropPullRequestPropRequestedTeamsItemsPropParent",
    "WebhookPullRequestLabeledPropPullRequestPropUser",
    "WebhookPullRequestLocked",
    "WebhookPullRequestLockedPropPullRequest",
    "WebhookPullRequestLockedPropPullRequestPropLinks",
    "WebhookPullRequestLockedPropPullRequestPropLinksPropComments",
    "WebhookPullRequestLockedPropPullRequestPropLinksPropCommits",
    "WebhookPullRequestLockedPropPullRequestPropLinksPropHtml",
    "WebhookPullRequestLockedPropPullRequestPropLinksPropIssue",
    "WebhookPullRequestLockedPropPullRequestPropLinksPropReviewComment",
    "WebhookPullRequestLockedPropPullRequestPropLinksPropReviewComments",
    "WebhookPullRequestLockedPropPullRequestPropLinksPropSelf",
    "WebhookPullRequestLockedPropPullRequestPropLinksPropStatuses",
    "WebhookPullRequestLockedPropPullRequestPropAssignee",
    "WebhookPullRequestLockedPropPullRequestPropAssigneesItems",
    "WebhookPullRequestLockedPropPullRequestPropAutoMergePropEnabledBy",
    "WebhookPullRequestLockedPropPullRequestPropAutoMerge",
    "WebhookPullRequestLockedPropPullRequestPropBase",
    "WebhookPullRequestLockedPropPullRequestPropBasePropRepo",
    "WebhookPullRequestLockedPropPullRequestPropBasePropRepoPropLicense",
    "WebhookPullRequestLockedPropPullRequestPropBasePropRepoPropOwner",
    "WebhookPullRequestLockedPropPullRequestPropBasePropRepoPropPermissions",
    "WebhookPullRequestLockedPropPullRequestPropBasePropUser",
    "WebhookPullRequestLockedPropPullRequestPropHead",
    "WebhookPullRequestLockedPropPullRequestPropHeadPropRepoPropLicense",
    "WebhookPullRequestLockedPropPullRequestPropHeadPropRepoPropOwner",
    "WebhookPullRequestLockedPropPullRequestPropHeadPropRepoPropPermissions",
    "WebhookPullRequestLockedPropPullRequestPropHeadPropRepo",
    "WebhookPullRequestLockedPropPullRequestPropHeadPropUser",
    "WebhookPullRequestLockedPropPullRequestPropLabelsItems",
    "WebhookPullRequestLockedPropPullRequestPropMergedBy",
    "WebhookPullRequestLockedPropPullRequestPropMilestonePropCreator",
    "WebhookPullRequestLockedPropPullRequestPropMilestone",
    "WebhookPullRequestLockedPropPullRequestPropRequestedReviewersItemsOneof0",
    "WebhookPullRequestLockedPropPullRequestPropRequestedReviewersItemsOneof1",
    "WebhookPullRequestLockedPropPullRequestPropRequestedReviewersItemsOneof1PropParent",
    "WebhookPullRequestLockedPropPullRequestPropRequestedTeamsItems",
    "WebhookPullRequestLockedPropPullRequestPropRequestedTeamsItemsPropParent",
    "WebhookPullRequestLockedPropPullRequestPropUser",
    "WebhookPullRequestMilestoned",
    "WebhookPullRequestMilestonedPropPullRequest",
    "WebhookPullRequestMilestonedPropPullRequestPropLinks",
    "WebhookPullRequestMilestonedPropPullRequestPropLinksPropComments",
    "WebhookPullRequestMilestonedPropPullRequestPropLinksPropCommits",
    "WebhookPullRequestMilestonedPropPullRequestPropLinksPropHtml",
    "WebhookPullRequestMilestonedPropPullRequestPropLinksPropIssue",
    "WebhookPullRequestMilestonedPropPullRequestPropLinksPropReviewComment",
    "WebhookPullRequestMilestonedPropPullRequestPropLinksPropReviewComments",
    "WebhookPullRequestMilestonedPropPullRequestPropLinksPropSelf",
    "WebhookPullRequestMilestonedPropPullRequestPropLinksPropStatuses",
    "WebhookPullRequestMilestonedPropPullRequestPropAssignee",
    "WebhookPullRequestMilestonedPropPullRequestPropAssigneesItems",
    "WebhookPullRequestMilestonedPropPullRequestPropAutoMergePropEnabledBy",
    "WebhookPullRequestMilestonedPropPullRequestPropAutoMerge",
    "WebhookPullRequestMilestonedPropPullRequestPropBase",
    "WebhookPullRequestMilestonedPropPullRequestPropBasePropRepo",
    "WebhookPullRequestMilestonedPropPullRequestPropBasePropRepoPropLicense",
    "WebhookPullRequestMilestonedPropPullRequestPropBasePropRepoPropOwner",
    "WebhookPullRequestMilestonedPropPullRequestPropBasePropRepoPropPermissions",
    "WebhookPullRequestMilestonedPropPullRequestPropBasePropUser",
    "WebhookPullRequestMilestonedPropPullRequestPropHead",
    "WebhookPullRequestMilestonedPropPullRequestPropHeadPropRepo",
    "WebhookPullRequestMilestonedPropPullRequestPropHeadPropRepoPropLicense",
    "WebhookPullRequestMilestonedPropPullRequestPropHeadPropRepoPropOwner",
    "WebhookPullRequestMilestonedPropPullRequestPropHeadPropRepoPropPermissions",
    "WebhookPullRequestMilestonedPropPullRequestPropHeadPropUser",
    "WebhookPullRequestMilestonedPropPullRequestPropLabelsItems",
    "WebhookPullRequestMilestonedPropPullRequestPropMergedBy",
    "WebhookPullRequestMilestonedPropPullRequestPropMilestonePropCreator",
    "WebhookPullRequestMilestonedPropPullRequestPropMilestone",
    "WebhookPullRequestMilestonedPropPullRequestPropRequestedReviewersItemsOneof0",
    "WebhookPullRequestMilestonedPropPullRequestPropRequestedReviewersItemsOneof1",
    "WebhookPullRequestMilestonedPropPullRequestPropRequestedReviewersItemsOneof1PropParent",
    "WebhookPullRequestMilestonedPropPullRequestPropRequestedTeamsItems",
    "WebhookPullRequestMilestonedPropPullRequestPropRequestedTeamsItemsPropParent",
    "WebhookPullRequestMilestonedPropPullRequestPropUser",
    "WebhookPullRequestOpened",
    "WebhookPullRequestOpenedPropPullRequest",
    "WebhookPullRequestOpenedPropPullRequestAllof1",
    "WebhookPullRequestReadyForReview",
    "WebhookPullRequestReadyForReviewPropPullRequest",
    "WebhookPullRequestReadyForReviewPropPullRequestAllof1",
    "WebhookPullRequestReopened",
    "WebhookPullRequestReopenedPropPullRequest",
    "WebhookPullRequestReopenedPropPullRequestAllof1",
    "WebhookPullRequestReviewCommentCreated",
    "WebhookPullRequestReviewCommentCreatedPropComment",
    "WebhookPullRequestReviewCommentCreatedPropCommentPropLinks",
    "WebhookPullRequestReviewCommentCreatedPropCommentPropLinksPropHtml",
    "WebhookPullRequestReviewCommentCreatedPropCommentPropLinksPropPullRequest",
    "WebhookPullRequestReviewCommentCreatedPropCommentPropLinksPropSelf",
    "WebhookPullRequestReviewCommentCreatedPropCommentPropReactions",
    "WebhookPullRequestReviewCommentCreatedPropCommentPropUser",
    "WebhookPullRequestReviewCommentCreatedPropPullRequest",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinks",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropComments",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropCommits",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropHtml",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropIssue",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropReviewComment",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropReviewComments",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropSelf",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropStatuses",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropAssignee",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropAssigneesItems",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropAutoMergePropEnabledBy",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropAutoMerge",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropBase",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropBasePropRepo",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropBasePropRepoPropLicense",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropBasePropRepoPropOwner",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropBasePropRepoPropPermissions",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropBasePropUser",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropHead",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropHeadPropRepoPropLicense",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropHeadPropRepoPropOwner",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropHeadPropRepoPropPermissions",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropHeadPropRepo",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropHeadPropUser",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropLabelsItems",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropMilestonePropCreator",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropMilestone",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropRequestedReviewersItemsOneof0",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropRequestedReviewersItemsOneof1",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropRequestedReviewersItemsOneof1PropParent",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropRequestedTeamsItems",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropRequestedTeamsItemsPropParent",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropUser",
    "WebhookPullRequestReviewCommentDeleted",
    "WebhookPullRequestReviewCommentDeletedPropComment",
    "WebhookPullRequestReviewCommentDeletedPropCommentPropLinks",
    "WebhookPullRequestReviewCommentDeletedPropCommentPropLinksPropHtml",
    "WebhookPullRequestReviewCommentDeletedPropCommentPropLinksPropPullRequest",
    "WebhookPullRequestReviewCommentDeletedPropCommentPropLinksPropSelf",
    "WebhookPullRequestReviewCommentDeletedPropCommentPropReactions",
    "WebhookPullRequestReviewCommentDeletedPropCommentPropUser",
    "WebhookPullRequestReviewCommentDeletedPropPullRequest",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinks",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropComments",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropCommits",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropHtml",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropIssue",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropReviewComment",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropReviewComments",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropSelf",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropStatuses",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropAssignee",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropAssigneesItems",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropAutoMergePropEnabledBy",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropAutoMerge",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropBase",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropBasePropRepo",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropBasePropRepoPropLicense",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropBasePropRepoPropOwner",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropBasePropRepoPropPermissions",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropBasePropUser",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropHead",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropHeadPropRepoPropLicense",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropHeadPropRepoPropOwner",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropHeadPropRepoPropPermissions",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropHeadPropRepo",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropHeadPropUser",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropLabelsItems",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropMilestonePropCreator",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropMilestone",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropRequestedReviewersItemsOneof0",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropRequestedReviewersItemsOneof1",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropRequestedReviewersItemsOneof1PropParent",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropRequestedTeamsItems",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropRequestedTeamsItemsPropParent",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropUser",
    "WebhookPullRequestReviewCommentEdited",
    "WebhookPullRequestReviewCommentEditedPropChanges",
    "WebhookPullRequestReviewCommentEditedPropChangesPropBody",
    "WebhookPullRequestReviewCommentEditedPropComment",
    "WebhookPullRequestReviewCommentEditedPropCommentPropLinks",
    "WebhookPullRequestReviewCommentEditedPropCommentPropLinksPropHtml",
    "WebhookPullRequestReviewCommentEditedPropCommentPropLinksPropPullRequest",
    "WebhookPullRequestReviewCommentEditedPropCommentPropLinksPropSelf",
    "WebhookPullRequestReviewCommentEditedPropCommentPropReactions",
    "WebhookPullRequestReviewCommentEditedPropCommentPropUser",
    "WebhookPullRequestReviewCommentEditedPropPullRequest",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropLinks",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropComments",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropCommits",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropHtml",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropIssue",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropReviewComment",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropReviewComments",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropSelf",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropStatuses",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropAssignee",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropAssigneesItems",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropAutoMergePropEnabledBy",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropAutoMerge",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropBase",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropBasePropRepo",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropBasePropRepoPropLicense",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropBasePropRepoPropOwner",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropBasePropRepoPropPermissions",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropBasePropUser",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropHead",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropHeadPropRepoPropLicense",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropHeadPropRepoPropOwner",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropHeadPropRepoPropPermissions",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropHeadPropRepo",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropHeadPropUser",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropLabelsItems",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropMilestonePropCreator",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropMilestone",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropRequestedReviewersItemsOneof0",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropRequestedReviewersItemsOneof1",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropRequestedReviewersItemsOneof1PropParent",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropRequestedTeamsItems",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropRequestedTeamsItemsPropParent",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropUser",
    "WebhookPullRequestReviewDismissed",
    "WebhookPullRequestReviewDismissedPropPullRequest",
    "WebhookPullRequestReviewDismissedPropPullRequestPropLinks",
    "WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropComments",
    "WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropCommits",
    "WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropHtml",
    "WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropIssue",
    "WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropReviewComment",
    "WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropReviewComments",
    "WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropSelf",
    "WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropStatuses",
    "WebhookPullRequestReviewDismissedPropPullRequestPropAssignee",
    "WebhookPullRequestReviewDismissedPropPullRequestPropAssigneesItems",
    "WebhookPullRequestReviewDismissedPropPullRequestPropAutoMergePropEnabledBy",
    "WebhookPullRequestReviewDismissedPropPullRequestPropAutoMerge",
    "WebhookPullRequestReviewDismissedPropPullRequestPropBase",
    "WebhookPullRequestReviewDismissedPropPullRequestPropBasePropRepo",
    "WebhookPullRequestReviewDismissedPropPullRequestPropBasePropRepoPropLicense",
    "WebhookPullRequestReviewDismissedPropPullRequestPropBasePropRepoPropOwner",
    "WebhookPullRequestReviewDismissedPropPullRequestPropBasePropRepoPropPermissions",
    "WebhookPullRequestReviewDismissedPropPullRequestPropBasePropUser",
    "WebhookPullRequestReviewDismissedPropPullRequestPropHead",
    "WebhookPullRequestReviewDismissedPropPullRequestPropHeadPropRepoPropLicense",
    "WebhookPullRequestReviewDismissedPropPullRequestPropHeadPropRepoPropOwner",
    "WebhookPullRequestReviewDismissedPropPullRequestPropHeadPropRepoPropPermissions",
    "WebhookPullRequestReviewDismissedPropPullRequestPropHeadPropRepo",
    "WebhookPullRequestReviewDismissedPropPullRequestPropHeadPropUser",
    "WebhookPullRequestReviewDismissedPropPullRequestPropLabelsItems",
    "WebhookPullRequestReviewDismissedPropPullRequestPropMilestonePropCreator",
    "WebhookPullRequestReviewDismissedPropPullRequestPropMilestone",
    "WebhookPullRequestReviewDismissedPropPullRequestPropRequestedReviewersItemsOneof0",
    "WebhookPullRequestReviewDismissedPropPullRequestPropRequestedReviewersItemsOneof1",
    "WebhookPullRequestReviewDismissedPropPullRequestPropRequestedReviewersItemsOneof1PropParent",
    "WebhookPullRequestReviewDismissedPropPullRequestPropRequestedTeamsItems",
    "WebhookPullRequestReviewDismissedPropPullRequestPropRequestedTeamsItemsPropParent",
    "WebhookPullRequestReviewDismissedPropPullRequestPropUser",
    "WebhookPullRequestReviewDismissedPropReview",
    "WebhookPullRequestReviewDismissedPropReviewPropLinks",
    "WebhookPullRequestReviewDismissedPropReviewPropLinksPropHtml",
    "WebhookPullRequestReviewDismissedPropReviewPropLinksPropPullRequest",
    "WebhookPullRequestReviewDismissedPropReviewPropUser",
    "WebhookPullRequestReviewEdited",
    "WebhookPullRequestReviewEditedPropChanges",
    "WebhookPullRequestReviewEditedPropChangesPropBody",
    "WebhookPullRequestReviewEditedPropPullRequest",
    "WebhookPullRequestReviewEditedPropPullRequestPropLinks",
    "WebhookPullRequestReviewEditedPropPullRequestPropLinksPropComments",
    "WebhookPullRequestReviewEditedPropPullRequestPropLinksPropCommits",
    "WebhookPullRequestReviewEditedPropPullRequestPropLinksPropHtml",
    "WebhookPullRequestReviewEditedPropPullRequestPropLinksPropIssue",
    "WebhookPullRequestReviewEditedPropPullRequestPropLinksPropReviewComment",
    "WebhookPullRequestReviewEditedPropPullRequestPropLinksPropReviewComments",
    "WebhookPullRequestReviewEditedPropPullRequestPropLinksPropSelf",
    "WebhookPullRequestReviewEditedPropPullRequestPropLinksPropStatuses",
    "WebhookPullRequestReviewEditedPropPullRequestPropAssignee",
    "WebhookPullRequestReviewEditedPropPullRequestPropAssigneesItems",
    "WebhookPullRequestReviewEditedPropPullRequestPropAutoMergePropEnabledBy",
    "WebhookPullRequestReviewEditedPropPullRequestPropAutoMerge",
    "WebhookPullRequestReviewEditedPropPullRequestPropBase",
    "WebhookPullRequestReviewEditedPropPullRequestPropBasePropRepo",
    "WebhookPullRequestReviewEditedPropPullRequestPropBasePropRepoPropLicense",
    "WebhookPullRequestReviewEditedPropPullRequestPropBasePropRepoPropOwner",
    "WebhookPullRequestReviewEditedPropPullRequestPropBasePropRepoPropPermissions",
    "WebhookPullRequestReviewEditedPropPullRequestPropBasePropUser",
    "WebhookPullRequestReviewEditedPropPullRequestPropHead",
    "WebhookPullRequestReviewEditedPropPullRequestPropHeadPropRepoPropLicense",
    "WebhookPullRequestReviewEditedPropPullRequestPropHeadPropRepoPropOwner",
    "WebhookPullRequestReviewEditedPropPullRequestPropHeadPropRepoPropPermissions",
    "WebhookPullRequestReviewEditedPropPullRequestPropHeadPropRepo",
    "WebhookPullRequestReviewEditedPropPullRequestPropHeadPropUser",
    "WebhookPullRequestReviewEditedPropPullRequestPropLabelsItems",
    "WebhookPullRequestReviewEditedPropPullRequestPropMilestonePropCreator",
    "WebhookPullRequestReviewEditedPropPullRequestPropMilestone",
    "WebhookPullRequestReviewEditedPropPullRequestPropRequestedReviewersItemsOneof0",
    "WebhookPullRequestReviewEditedPropPullRequestPropRequestedReviewersItemsOneof1",
    "WebhookPullRequestReviewEditedPropPullRequestPropRequestedReviewersItemsOneof1PropParent",
    "WebhookPullRequestReviewEditedPropPullRequestPropRequestedTeamsItems",
    "WebhookPullRequestReviewEditedPropPullRequestPropRequestedTeamsItemsPropParent",
    "WebhookPullRequestReviewEditedPropPullRequestPropUser",
    "WebhookPullRequestReviewEditedPropReview",
    "WebhookPullRequestReviewEditedPropReviewPropLinks",
    "WebhookPullRequestReviewEditedPropReviewPropLinksPropHtml",
    "WebhookPullRequestReviewEditedPropReviewPropLinksPropPullRequest",
    "WebhookPullRequestReviewEditedPropReviewPropUser",
    "WebhookPullRequestReviewRequestRemovedOneof0",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequest",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinks",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropComments",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropCommits",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropHtml",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropIssue",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropReviewComment",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropReviewComments",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropSelf",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropStatuses",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropAssignee",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropAssigneesItems",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropAutoMergePropEnabledBy",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropAutoMerge",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBase",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBasePropRepo",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBasePropRepoPropLicense",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBasePropRepoPropOwner",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBasePropRepoPropPermissions",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBasePropUser",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHead",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHeadPropRepo",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHeadPropRepoPropLicense",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHeadPropRepoPropOwner",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHeadPropRepoPropPermissions",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHeadPropUser",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLabelsItems",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropMergedBy",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropMilestonePropCreator",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropMilestone",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropRequestedReviewersItemsOneof0",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropRequestedReviewersItemsOneof1",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropRequestedReviewersItemsOneof1PropParent",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropRequestedTeamsItems",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropRequestedTeamsItemsPropParent",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropUser",
    "WebhookPullRequestReviewRequestRemovedOneof0PropRequestedReviewer",
    "WebhookPullRequestReviewRequestRemovedOneof1",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequest",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinks",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropComments",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropCommits",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropHtml",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropIssue",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropReviewComment",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropReviewComments",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropSelf",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropStatuses",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropAssignee",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropAssigneesItems",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropAutoMergePropEnabledBy",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropAutoMerge",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBase",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBasePropRepo",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBasePropRepoPropLicense",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBasePropRepoPropOwner",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBasePropRepoPropPermissions",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBasePropUser",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHead",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHeadPropRepo",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHeadPropRepoPropLicense",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHeadPropRepoPropOwner",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHeadPropRepoPropPermissions",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHeadPropUser",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLabelsItems",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropMergedBy",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropMilestonePropCreator",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropMilestone",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropRequestedReviewersItemsOneof0",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropRequestedReviewersItemsOneof1",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropRequestedReviewersItemsOneof1PropParent",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropRequestedTeamsItems",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropRequestedTeamsItemsPropParent",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropUser",
    "WebhookPullRequestReviewRequestRemovedOneof1PropRequestedTeam",
    "WebhookPullRequestReviewRequestRemovedOneof1PropRequestedTeamPropParent",
    "WebhookPullRequestReviewRequestedOneof0",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequest",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinks",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropComments",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropCommits",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropHtml",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropIssue",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropReviewComment",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropReviewComments",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropSelf",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropStatuses",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropAssignee",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropAssigneesItems",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropAutoMergePropEnabledBy",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropAutoMerge",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBase",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBasePropRepo",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBasePropRepoPropLicense",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBasePropRepoPropOwner",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBasePropRepoPropPermissions",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBasePropUser",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHead",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHeadPropRepo",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHeadPropRepoPropLicense",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHeadPropRepoPropOwner",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHeadPropRepoPropPermissions",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHeadPropUser",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLabelsItems",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropMergedBy",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropMilestonePropCreator",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropMilestone",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropRequestedReviewersItemsOneof0",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropRequestedReviewersItemsOneof1",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropRequestedReviewersItemsOneof1PropParent",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropRequestedTeamsItems",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropRequestedTeamsItemsPropParent",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropUser",
    "WebhookPullRequestReviewRequestedOneof0PropRequestedReviewer",
    "WebhookPullRequestReviewRequestedOneof1",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequest",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinks",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropComments",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropCommits",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropHtml",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropIssue",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropReviewComment",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropReviewComments",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropSelf",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropStatuses",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropAssignee",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropAssigneesItems",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropAutoMergePropEnabledBy",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropAutoMerge",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBase",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBasePropRepo",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBasePropRepoPropLicense",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBasePropRepoPropOwner",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBasePropRepoPropPermissions",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBasePropUser",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHead",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHeadPropRepo",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHeadPropRepoPropLicense",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHeadPropRepoPropOwner",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHeadPropRepoPropPermissions",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHeadPropUser",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLabelsItems",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropMergedBy",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropMilestonePropCreator",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropMilestone",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropRequestedReviewersItemsOneof0",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropRequestedReviewersItemsOneof1",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropRequestedReviewersItemsOneof1PropParent",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropRequestedTeamsItems",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropRequestedTeamsItemsPropParent",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropUser",
    "WebhookPullRequestReviewRequestedOneof1PropRequestedTeam",
    "WebhookPullRequestReviewRequestedOneof1PropRequestedTeamPropParent",
    "WebhookPullRequestReviewSubmitted",
    "WebhookPullRequestReviewSubmittedPropPullRequest",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropLinks",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropComments",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropCommits",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropHtml",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropIssue",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropReviewComment",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropReviewComments",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropSelf",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropStatuses",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropAssignee",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropAssigneesItems",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropAutoMergePropEnabledBy",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropAutoMerge",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropBase",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropBasePropRepo",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropBasePropRepoPropLicense",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropBasePropRepoPropOwner",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropBasePropRepoPropPermissions",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropBasePropUser",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropHead",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropHeadPropRepoPropLicense",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropHeadPropRepoPropOwner",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropHeadPropRepoPropPermissions",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropHeadPropRepo",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropHeadPropUser",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropLabelsItems",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropMilestonePropCreator",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropMilestone",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropRequestedReviewersItemsOneof0",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropRequestedReviewersItemsOneof1",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropRequestedReviewersItemsOneof1PropParent",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropRequestedTeamsItems",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropRequestedTeamsItemsPropParent",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropUser",
    "WebhookPullRequestReviewSubmittedPropReview",
    "WebhookPullRequestReviewSubmittedPropReviewPropLinks",
    "WebhookPullRequestReviewSubmittedPropReviewPropLinksPropHtml",
    "WebhookPullRequestReviewSubmittedPropReviewPropLinksPropPullRequest",
    "WebhookPullRequestReviewSubmittedPropReviewPropUser",
    "WebhookPullRequestReviewThreadResolved",
    "WebhookPullRequestReviewThreadResolvedPropPullRequest",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinks",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropComments",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropCommits",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropHtml",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropIssue",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropReviewComment",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropReviewComments",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropSelf",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropStatuses",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropAssignee",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropAssigneesItems",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropAutoMergePropEnabledBy",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropAutoMerge",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropBase",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropBasePropRepo",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropBasePropRepoPropLicense",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropBasePropRepoPropOwner",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropBasePropRepoPropPermissions",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropBasePropUser",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropHead",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropHeadPropRepoPropLicense",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropHeadPropRepoPropOwner",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropHeadPropRepoPropPermissions",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropHeadPropRepo",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropHeadPropUser",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropLabelsItems",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropMilestonePropCreator",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropMilestone",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropRequestedReviewersItemsOneof0",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropRequestedReviewersItemsOneof1",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropRequestedReviewersItemsOneof1PropParent",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropRequestedTeamsItems",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropRequestedTeamsItemsPropParent",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropUser",
    "WebhookPullRequestReviewThreadResolvedPropThread",
    "WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItems",
    "WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropLinks",
    "WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropLinksPropHtml",
    "WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropLinksPropPullRequest",
    "WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropLinksPropSelf",
    "WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropReactions",
    "WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropUser",
    "WebhookPullRequestReviewThreadUnresolved",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequest",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinks",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropComments",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropCommits",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropHtml",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropIssue",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropReviewComment",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropReviewComments",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropSelf",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropStatuses",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropAssignee",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropAssigneesItems",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropAutoMergePropEnabledBy",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropAutoMerge",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBase",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBasePropRepo",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBasePropRepoPropLicense",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBasePropRepoPropOwner",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBasePropRepoPropPermissions",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBasePropUser",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHead",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHeadPropRepo",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHeadPropRepoPropLicense",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHeadPropRepoPropOwner",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHeadPropRepoPropPermissions",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHeadPropUser",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLabelsItems",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropMilestonePropCreator",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropMilestone",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropRequestedReviewersItemsOneof0",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropRequestedReviewersItemsOneof1",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropRequestedReviewersItemsOneof1PropParent",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropRequestedTeamsItems",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropRequestedTeamsItemsPropParent",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropUser",
    "WebhookPullRequestReviewThreadUnresolvedPropThread",
    "WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItems",
    "WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropLinks",
    "WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropLinksPropHtml",
    "WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropLinksPropPullRequest",
    "WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropLinksPropSelf",
    "WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropReactions",
    "WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropUser",
    "WebhookPullRequestSynchronize",
    "WebhookPullRequestSynchronizePropPullRequest",
    "WebhookPullRequestSynchronizePropPullRequestPropLinks",
    "WebhookPullRequestSynchronizePropPullRequestPropLinksPropComments",
    "WebhookPullRequestSynchronizePropPullRequestPropLinksPropCommits",
    "WebhookPullRequestSynchronizePropPullRequestPropLinksPropHtml",
    "WebhookPullRequestSynchronizePropPullRequestPropLinksPropIssue",
    "WebhookPullRequestSynchronizePropPullRequestPropLinksPropReviewComment",
    "WebhookPullRequestSynchronizePropPullRequestPropLinksPropReviewComments",
    "WebhookPullRequestSynchronizePropPullRequestPropLinksPropSelf",
    "WebhookPullRequestSynchronizePropPullRequestPropLinksPropStatuses",
    "WebhookPullRequestSynchronizePropPullRequestPropAssignee",
    "WebhookPullRequestSynchronizePropPullRequestPropAssigneesItems",
    "WebhookPullRequestSynchronizePropPullRequestPropAutoMergePropEnabledBy",
    "WebhookPullRequestSynchronizePropPullRequestPropAutoMerge",
    "WebhookPullRequestSynchronizePropPullRequestPropBase",
    "WebhookPullRequestSynchronizePropPullRequestPropBasePropRepo",
    "WebhookPullRequestSynchronizePropPullRequestPropBasePropRepoPropLicense",
    "WebhookPullRequestSynchronizePropPullRequestPropBasePropRepoPropOwner",
    "WebhookPullRequestSynchronizePropPullRequestPropBasePropRepoPropPermissions",
    "WebhookPullRequestSynchronizePropPullRequestPropBasePropUser",
    "WebhookPullRequestSynchronizePropPullRequestPropHead",
    "WebhookPullRequestSynchronizePropPullRequestPropHeadPropRepo",
    "WebhookPullRequestSynchronizePropPullRequestPropHeadPropRepoPropLicense",
    "WebhookPullRequestSynchronizePropPullRequestPropHeadPropRepoPropOwner",
    "WebhookPullRequestSynchronizePropPullRequestPropHeadPropRepoPropPermissions",
    "WebhookPullRequestSynchronizePropPullRequestPropHeadPropUser",
    "WebhookPullRequestSynchronizePropPullRequestPropLabelsItems",
    "WebhookPullRequestSynchronizePropPullRequestPropMergedBy",
    "WebhookPullRequestSynchronizePropPullRequestPropMilestonePropCreator",
    "WebhookPullRequestSynchronizePropPullRequestPropMilestone",
    "WebhookPullRequestSynchronizePropPullRequestPropRequestedReviewersItemsOneof0",
    "WebhookPullRequestSynchronizePropPullRequestPropRequestedReviewersItemsOneof1",
    "WebhookPullRequestSynchronizePropPullRequestPropRequestedReviewersItemsOneof1PropParent",
    "WebhookPullRequestSynchronizePropPullRequestPropRequestedTeamsItems",
    "WebhookPullRequestSynchronizePropPullRequestPropRequestedTeamsItemsPropParent",
    "WebhookPullRequestSynchronizePropPullRequestPropUser",
    "WebhookPullRequestUnassigned",
    "WebhookPullRequestUnassignedPropAssignee",
    "WebhookPullRequestUnassignedPropPullRequest",
    "WebhookPullRequestUnassignedPropPullRequestPropLinks",
    "WebhookPullRequestUnassignedPropPullRequestPropLinksPropComments",
    "WebhookPullRequestUnassignedPropPullRequestPropLinksPropCommits",
    "WebhookPullRequestUnassignedPropPullRequestPropLinksPropHtml",
    "WebhookPullRequestUnassignedPropPullRequestPropLinksPropIssue",
    "WebhookPullRequestUnassignedPropPullRequestPropLinksPropReviewComment",
    "WebhookPullRequestUnassignedPropPullRequestPropLinksPropReviewComments",
    "WebhookPullRequestUnassignedPropPullRequestPropLinksPropSelf",
    "WebhookPullRequestUnassignedPropPullRequestPropLinksPropStatuses",
    "WebhookPullRequestUnassignedPropPullRequestPropAssignee",
    "WebhookPullRequestUnassignedPropPullRequestPropAssigneesItems",
    "WebhookPullRequestUnassignedPropPullRequestPropAutoMergePropEnabledBy",
    "WebhookPullRequestUnassignedPropPullRequestPropAutoMerge",
    "WebhookPullRequestUnassignedPropPullRequestPropBase",
    "WebhookPullRequestUnassignedPropPullRequestPropBasePropRepo",
    "WebhookPullRequestUnassignedPropPullRequestPropBasePropRepoPropLicense",
    "WebhookPullRequestUnassignedPropPullRequestPropBasePropRepoPropOwner",
    "WebhookPullRequestUnassignedPropPullRequestPropBasePropRepoPropPermissions",
    "WebhookPullRequestUnassignedPropPullRequestPropBasePropUser",
    "WebhookPullRequestUnassignedPropPullRequestPropHead",
    "WebhookPullRequestUnassignedPropPullRequestPropHeadPropRepoPropLicense",
    "WebhookPullRequestUnassignedPropPullRequestPropHeadPropRepoPropOwner",
    "WebhookPullRequestUnassignedPropPullRequestPropHeadPropRepoPropPermissions",
    "WebhookPullRequestUnassignedPropPullRequestPropHeadPropRepo",
    "WebhookPullRequestUnassignedPropPullRequestPropHeadPropUser",
    "WebhookPullRequestUnassignedPropPullRequestPropLabelsItems",
    "WebhookPullRequestUnassignedPropPullRequestPropMergedBy",
    "WebhookPullRequestUnassignedPropPullRequestPropMilestonePropCreator",
    "WebhookPullRequestUnassignedPropPullRequestPropMilestone",
    "WebhookPullRequestUnassignedPropPullRequestPropRequestedReviewersItemsOneof0",
    "WebhookPullRequestUnassignedPropPullRequestPropRequestedReviewersItemsOneof1",
    "WebhookPullRequestUnassignedPropPullRequestPropRequestedReviewersItemsOneof1PropParent",
    "WebhookPullRequestUnassignedPropPullRequestPropRequestedTeamsItems",
    "WebhookPullRequestUnassignedPropPullRequestPropRequestedTeamsItemsPropParent",
    "WebhookPullRequestUnassignedPropPullRequestPropUser",
    "WebhookPullRequestUnlabeled",
    "WebhookPullRequestUnlabeledPropLabel",
    "WebhookPullRequestUnlabeledPropPullRequest",
    "WebhookPullRequestUnlabeledPropPullRequestPropLinks",
    "WebhookPullRequestUnlabeledPropPullRequestPropLinksPropComments",
    "WebhookPullRequestUnlabeledPropPullRequestPropLinksPropCommits",
    "WebhookPullRequestUnlabeledPropPullRequestPropLinksPropHtml",
    "WebhookPullRequestUnlabeledPropPullRequestPropLinksPropIssue",
    "WebhookPullRequestUnlabeledPropPullRequestPropLinksPropReviewComment",
    "WebhookPullRequestUnlabeledPropPullRequestPropLinksPropReviewComments",
    "WebhookPullRequestUnlabeledPropPullRequestPropLinksPropSelf",
    "WebhookPullRequestUnlabeledPropPullRequestPropLinksPropStatuses",
    "WebhookPullRequestUnlabeledPropPullRequestPropAssignee",
    "WebhookPullRequestUnlabeledPropPullRequestPropAssigneesItems",
    "WebhookPullRequestUnlabeledPropPullRequestPropAutoMergePropEnabledBy",
    "WebhookPullRequestUnlabeledPropPullRequestPropAutoMerge",
    "WebhookPullRequestUnlabeledPropPullRequestPropBase",
    "WebhookPullRequestUnlabeledPropPullRequestPropBasePropRepo",
    "WebhookPullRequestUnlabeledPropPullRequestPropBasePropRepoPropLicense",
    "WebhookPullRequestUnlabeledPropPullRequestPropBasePropRepoPropOwner",
    "WebhookPullRequestUnlabeledPropPullRequestPropBasePropRepoPropPermissions",
    "WebhookPullRequestUnlabeledPropPullRequestPropBasePropUser",
    "WebhookPullRequestUnlabeledPropPullRequestPropHead",
    "WebhookPullRequestUnlabeledPropPullRequestPropHeadPropRepoPropLicense",
    "WebhookPullRequestUnlabeledPropPullRequestPropHeadPropRepoPropOwner",
    "WebhookPullRequestUnlabeledPropPullRequestPropHeadPropRepoPropPermissions",
    "WebhookPullRequestUnlabeledPropPullRequestPropHeadPropRepo",
    "WebhookPullRequestUnlabeledPropPullRequestPropHeadPropUser",
    "WebhookPullRequestUnlabeledPropPullRequestPropLabelsItems",
    "WebhookPullRequestUnlabeledPropPullRequestPropMergedBy",
    "WebhookPullRequestUnlabeledPropPullRequestPropMilestonePropCreator",
    "WebhookPullRequestUnlabeledPropPullRequestPropMilestone",
    "WebhookPullRequestUnlabeledPropPullRequestPropRequestedReviewersItemsOneof0",
    "WebhookPullRequestUnlabeledPropPullRequestPropRequestedReviewersItemsOneof1",
    "WebhookPullRequestUnlabeledPropPullRequestPropRequestedReviewersItemsOneof1PropParent",
    "WebhookPullRequestUnlabeledPropPullRequestPropRequestedTeamsItems",
    "WebhookPullRequestUnlabeledPropPullRequestPropRequestedTeamsItemsPropParent",
    "WebhookPullRequestUnlabeledPropPullRequestPropUser",
    "WebhookPullRequestUnlocked",
    "WebhookPullRequestUnlockedPropPullRequest",
    "WebhookPullRequestUnlockedPropPullRequestPropLinks",
    "WebhookPullRequestUnlockedPropPullRequestPropLinksPropComments",
    "WebhookPullRequestUnlockedPropPullRequestPropLinksPropCommits",
    "WebhookPullRequestUnlockedPropPullRequestPropLinksPropHtml",
    "WebhookPullRequestUnlockedPropPullRequestPropLinksPropIssue",
    "WebhookPullRequestUnlockedPropPullRequestPropLinksPropReviewComment",
    "WebhookPullRequestUnlockedPropPullRequestPropLinksPropReviewComments",
    "WebhookPullRequestUnlockedPropPullRequestPropLinksPropSelf",
    "WebhookPullRequestUnlockedPropPullRequestPropLinksPropStatuses",
    "WebhookPullRequestUnlockedPropPullRequestPropAssignee",
    "WebhookPullRequestUnlockedPropPullRequestPropAssigneesItems",
    "WebhookPullRequestUnlockedPropPullRequestPropAutoMergePropEnabledBy",
    "WebhookPullRequestUnlockedPropPullRequestPropAutoMerge",
    "WebhookPullRequestUnlockedPropPullRequestPropBase",
    "WebhookPullRequestUnlockedPropPullRequestPropBasePropRepo",
    "WebhookPullRequestUnlockedPropPullRequestPropBasePropRepoPropLicense",
    "WebhookPullRequestUnlockedPropPullRequestPropBasePropRepoPropOwner",
    "WebhookPullRequestUnlockedPropPullRequestPropBasePropRepoPropPermissions",
    "WebhookPullRequestUnlockedPropPullRequestPropBasePropUser",
    "WebhookPullRequestUnlockedPropPullRequestPropHead",
    "WebhookPullRequestUnlockedPropPullRequestPropHeadPropRepoPropLicense",
    "WebhookPullRequestUnlockedPropPullRequestPropHeadPropRepoPropOwner",
    "WebhookPullRequestUnlockedPropPullRequestPropHeadPropRepoPropPermissions",
    "WebhookPullRequestUnlockedPropPullRequestPropHeadPropRepo",
    "WebhookPullRequestUnlockedPropPullRequestPropHeadPropUser",
    "WebhookPullRequestUnlockedPropPullRequestPropLabelsItems",
    "WebhookPullRequestUnlockedPropPullRequestPropMergedBy",
    "WebhookPullRequestUnlockedPropPullRequestPropMilestonePropCreator",
    "WebhookPullRequestUnlockedPropPullRequestPropMilestone",
    "WebhookPullRequestUnlockedPropPullRequestPropRequestedReviewersItemsOneof0",
    "WebhookPullRequestUnlockedPropPullRequestPropRequestedReviewersItemsOneof1",
    "WebhookPullRequestUnlockedPropPullRequestPropRequestedReviewersItemsOneof1PropParent",
    "WebhookPullRequestUnlockedPropPullRequestPropRequestedTeamsItems",
    "WebhookPullRequestUnlockedPropPullRequestPropRequestedTeamsItemsPropParent",
    "WebhookPullRequestUnlockedPropPullRequestPropUser",
    "WebhookPush",
    "WebhookPushPropCommitsItems",
    "WebhookPushPropCommitsItemsPropAuthor",
    "WebhookPushPropCommitsItemsPropCommitter",
    "WebhookPushPropHeadCommitPropAuthor",
    "WebhookPushPropHeadCommitPropCommitter",
    "WebhookPushPropHeadCommit",
    "WebhookPushPropPusher",
    "WebhookPushPropRepository",
    "WebhookPushPropRepositoryPropCustomProperties",
    "WebhookPushPropRepositoryPropLicense",
    "WebhookPushPropRepositoryPropOwner",
    "WebhookPushPropRepositoryPropPermissions",
    "WebhookRegistryPackagePublished",
    "WebhookRegistryPackagePublishedPropRegistryPackage",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropOwner",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropAuthor",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropBodyOneof1",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropContainerMetadata",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropContainerMetadataPropLabels",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropContainerMetadataPropManifest",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropContainerMetadataPropTag",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropDockerMetadataItems",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropMetadataItems",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropAuthorOneof1",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropBugsOneof1",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropDependencies",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropDevDependencies",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropPeerDependencies",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropOptionalDependencies",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropDistOneof1",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropRepositoryOneof1",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropScripts",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropEngines",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropBin",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropMan",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropDirectoriesOneof1",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadata",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNugetMetadataItems",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNugetMetadataItemsPropIdOneof1",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNugetMetadataItemsPropValueOneof3",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropPackageFilesItems",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropRelease",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropReleasePropAuthor",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersion",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropRegistry",
    "WebhookRegistryPackageUpdated",
    "WebhookRegistryPackageUpdatedPropRegistryPackage",
    "WebhookRegistryPackageUpdatedPropRegistryPackagePropOwner",
    "WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersion",
    "WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropAuthor",
    "WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropDockerMetadataItems",
    "WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropMetadataItems",
    "WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropPackageFilesItems",
    "WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropRelease",
    "WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropReleasePropAuthor",
    "WebhookRegistryPackageUpdatedPropRegistryPackagePropRegistry",
    "WebhookReleaseCreated",
    "WebhookReleaseCreatedPropRelease",
    "WebhookReleaseCreatedPropReleasePropAssetsItems",
    "WebhookReleaseCreatedPropReleasePropAssetsItemsPropUploader",
    "WebhookReleaseCreatedPropReleasePropAuthor",
    "WebhookReleaseCreatedPropReleasePropReactions",
    "WebhookReleaseDeleted",
    "WebhookReleaseDeletedPropRelease",
    "WebhookReleaseDeletedPropReleasePropAssetsItems",
    "WebhookReleaseDeletedPropReleasePropAssetsItemsPropUploader",
    "WebhookReleaseDeletedPropReleasePropAuthor",
    "WebhookReleaseDeletedPropReleasePropReactions",
    "WebhookReleaseEdited",
    "WebhookReleaseEditedPropChanges",
    "WebhookReleaseEditedPropChangesPropBody",
    "WebhookReleaseEditedPropChangesPropName",
    "WebhookReleaseEditedPropChangesPropMakeLatest",
    "WebhookReleaseEditedPropRelease",
    "WebhookReleaseEditedPropReleasePropAssetsItems",
    "WebhookReleaseEditedPropReleasePropAssetsItemsPropUploader",
    "WebhookReleaseEditedPropReleasePropAuthor",
    "WebhookReleaseEditedPropReleasePropReactions",
    "WebhookReleasePrereleased",
    "WebhookReleasePrereleasedPropRelease",
    "WebhookReleasePrereleasedPropReleaseAllof0",
    "WebhookReleasePrereleasedPropReleaseAllof0PropAssetsItems",
    "WebhookReleasePrereleasedPropReleaseAllof0PropAssetsItemsPropUploader",
    "WebhookReleasePrereleasedPropReleaseAllof0PropAuthor",
    "WebhookReleasePrereleasedPropReleaseAllof0PropReactions",
    "WebhookReleasePrereleasedPropReleaseAllof1",
    "WebhookReleasePrereleasedPropReleaseAllof1PropAssetsItems",
    "WebhookReleasePrereleasedPropReleaseAllof1PropAuthor",
    "WebhookReleasePrereleasedPropReleaseMergedAssets",
    "WebhookReleasePrereleasedPropReleaseMergedAuthor",
    "WebhookReleasePublished",
    "WebhookReleasePublishedPropRelease",
    "WebhookReleasePublishedPropReleaseAllof0",
    "WebhookReleasePublishedPropReleaseAllof0PropAssetsItems",
    "WebhookReleasePublishedPropReleaseAllof0PropAssetsItemsPropUploader",
    "WebhookReleasePublishedPropReleaseAllof0PropAuthor",
    "WebhookReleasePublishedPropReleaseAllof0PropReactions",
    "WebhookReleasePublishedPropReleaseAllof1",
    "WebhookReleasePublishedPropReleaseAllof1PropAssetsItems",
    "WebhookReleasePublishedPropReleaseAllof1PropAuthor",
    "WebhookReleasePublishedPropReleaseMergedAssets",
    "WebhookReleasePublishedPropReleaseMergedAuthor",
    "WebhookReleaseReleased",
    "WebhookReleaseReleasedPropRelease",
    "WebhookReleaseReleasedPropReleasePropAssetsItems",
    "WebhookReleaseReleasedPropReleasePropAssetsItemsPropUploader",
    "WebhookReleaseReleasedPropReleasePropAuthor",
    "WebhookReleaseReleasedPropReleasePropReactions",
    "WebhookReleaseUnpublished",
    "WebhookReleaseUnpublishedPropRelease",
    "WebhookReleaseUnpublishedPropReleaseAllof0",
    "WebhookReleaseUnpublishedPropReleaseAllof0PropAssetsItems",
    "WebhookReleaseUnpublishedPropReleaseAllof0PropAssetsItemsPropUploader",
    "WebhookReleaseUnpublishedPropReleaseAllof0PropAuthor",
    "WebhookReleaseUnpublishedPropReleaseAllof0PropReactions",
    "WebhookReleaseUnpublishedPropReleaseAllof1",
    "WebhookReleaseUnpublishedPropReleaseAllof1PropAssetsItems",
    "WebhookReleaseUnpublishedPropReleaseAllof1PropAuthor",
    "WebhookReleaseUnpublishedPropReleaseMergedAssets",
    "WebhookReleaseUnpublishedPropReleaseMergedAuthor",
    "WebhookRepositoryAdvisoryPublished",
    "WebhookRepositoryAdvisoryReported",
    "WebhookRepositoryArchived",
    "WebhookRepositoryCreated",
    "WebhookRepositoryDeleted",
    "WebhookRepositoryDispatchSample",
    "WebhookRepositoryDispatchSamplePropClientPayload",
    "WebhookRepositoryEdited",
    "WebhookRepositoryEditedPropChanges",
    "WebhookRepositoryEditedPropChangesPropDefaultBranch",
    "WebhookRepositoryEditedPropChangesPropDescription",
    "WebhookRepositoryEditedPropChangesPropHomepage",
    "WebhookRepositoryEditedPropChangesPropTopics",
    "WebhookRepositoryImport",
    "WebhookRepositoryPrivatized",
    "WebhookRepositoryPublicized",
    "WebhookRepositoryRenamed",
    "WebhookRepositoryRenamedPropChanges",
    "WebhookRepositoryRenamedPropChangesPropRepository",
    "WebhookRepositoryRenamedPropChangesPropRepositoryPropName",
    "WebhookRepositoryRulesetCreated",
    "WebhookRepositoryRulesetDeleted",
    "WebhookRepositoryRulesetEdited",
    "WebhookRepositoryRulesetEditedPropChanges",
    "WebhookRepositoryRulesetEditedPropChangesPropName",
    "WebhookRepositoryRulesetEditedPropChangesPropEnforcement",
    "WebhookRepositoryRulesetEditedPropChangesPropConditions",
    "WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItems",
    "WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChanges",
    "WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChangesPropConditionType",
    "WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChangesPropTarget",
    "WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChangesPropInclude",
    "WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChangesPropExclude",
    "WebhookRepositoryRulesetEditedPropChangesPropRules",
    "WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItems",
    "WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItemsPropChanges",
    "WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItemsPropChangesPropConfiguration",
    "WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItemsPropChangesPropRuleType",
    "WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItemsPropChangesPropPattern",
    "WebhookRepositoryTransferred",
    "WebhookRepositoryTransferredPropChanges",
    "WebhookRepositoryTransferredPropChangesPropOwner",
    "WebhookRepositoryTransferredPropChangesPropOwnerPropFrom",
    "WebhookRepositoryTransferredPropChangesPropOwnerPropFromPropOrganization",
    "WebhookRepositoryTransferredPropChangesPropOwnerPropFromPropUser",
    "WebhookRepositoryUnarchived",
    "WebhookRepositoryVulnerabilityAlertCreate",
    "WebhookRepositoryVulnerabilityAlertCreatePropAlert",
    "WebhookRepositoryVulnerabilityAlertCreatePropAlertAllof0",
    "WebhookRepositoryVulnerabilityAlertCreatePropAlertAllof0PropDismisser",
    "WebhookRepositoryVulnerabilityAlertCreatePropAlertAllof1",
    "WebhookRepositoryVulnerabilityAlertDismiss",
    "WebhookRepositoryVulnerabilityAlertDismissPropAlert",
    "WebhookRepositoryVulnerabilityAlertDismissPropAlertAllof0",
    "WebhookRepositoryVulnerabilityAlertDismissPropAlertAllof0PropDismisser",
    "WebhookRepositoryVulnerabilityAlertDismissPropAlertAllof1",
    "WebhookRepositoryVulnerabilityAlertDismissPropAlertAllof1PropDismisser",
    "WebhookRepositoryVulnerabilityAlertReopen",
    "WebhookRepositoryVulnerabilityAlertReopenPropAlert",
    "WebhookRepositoryVulnerabilityAlertReopenPropAlertAllof0",
    "WebhookRepositoryVulnerabilityAlertReopenPropAlertAllof0PropDismisser",
    "WebhookRepositoryVulnerabilityAlertReopenPropAlertAllof1",
    "WebhookRepositoryVulnerabilityAlertResolve",
    "WebhookRepositoryVulnerabilityAlertResolvePropAlert",
    "WebhookRepositoryVulnerabilityAlertResolvePropAlertAllof0",
    "WebhookRepositoryVulnerabilityAlertResolvePropAlertAllof0PropDismisser",
    "WebhookRepositoryVulnerabilityAlertResolvePropAlertAllof1",
    "WebhookSecretScanningAlertCreated",
    "WebhookSecretScanningAlertLocationCreated",
    "WebhookSecretScanningAlertLocationCreatedFormEncoded",
    "WebhookSecretScanningAlertReopened",
    "WebhookSecretScanningAlertResolved",
    "WebhookSecretScanningAlertRevoked",
    "WebhookSecurityAdvisoryPublished",
    "WebhookSecurityAdvisoryPublishedPropSecurityAdvisory",
    "WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropCvss",
    "WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropCwesItems",
    "WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropIdentifiersItems",
    "WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropReferencesItems",
    "WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropVulnerabilitiesItems",
    "WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropVulnerabilitiesItemsPropFirstPatchedVersion",
    "WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropVulnerabilitiesItemsPropPackage",
    "WebhookSecurityAdvisoryUpdated",
    "WebhookSecurityAdvisoryUpdatedPropSecurityAdvisory",
    "WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropCvss",
    "WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropCwesItems",
    "WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropIdentifiersItems",
    "WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropReferencesItems",
    "WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropVulnerabilitiesItems",
    "WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropVulnerabilitiesItemsPropFirstPatchedVersion",
    "WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropVulnerabilitiesItemsPropPackage",
    "WebhookSecurityAdvisoryWithdrawn",
    "WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisory",
    "WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropCvss",
    "WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropCwesItems",
    "WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropIdentifiersItems",
    "WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropReferencesItems",
    "WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropVulnerabilitiesItems",
    "WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropVulnerabilitiesItemsPropFirstPatchedVersion",
    "WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropVulnerabilitiesItemsPropPackage",
    "WebhookSecurityAndAnalysis",
    "WebhookSecurityAndAnalysisPropChanges",
    "WebhookSecurityAndAnalysisPropChangesPropFrom",
    "WebhookSponsorshipCancelled",
    "WebhookSponsorshipCancelledPropSponsorship",
    "WebhookSponsorshipCancelledPropSponsorshipPropMaintainer",
    "WebhookSponsorshipCancelledPropSponsorshipPropSponsor",
    "WebhookSponsorshipCancelledPropSponsorshipPropSponsorable",
    "WebhookSponsorshipCancelledPropSponsorshipPropTier",
    "WebhookSponsorshipCreated",
    "WebhookSponsorshipCreatedPropSponsorship",
    "WebhookSponsorshipCreatedPropSponsorshipPropMaintainer",
    "WebhookSponsorshipCreatedPropSponsorshipPropSponsor",
    "WebhookSponsorshipCreatedPropSponsorshipPropSponsorable",
    "WebhookSponsorshipCreatedPropSponsorshipPropTier",
    "WebhookSponsorshipEdited",
    "WebhookSponsorshipEditedPropChanges",
    "WebhookSponsorshipEditedPropChangesPropPrivacyLevel",
    "WebhookSponsorshipEditedPropSponsorship",
    "WebhookSponsorshipEditedPropSponsorshipPropMaintainer",
    "WebhookSponsorshipEditedPropSponsorshipPropSponsor",
    "WebhookSponsorshipEditedPropSponsorshipPropSponsorable",
    "WebhookSponsorshipEditedPropSponsorshipPropTier",
    "WebhookSponsorshipPendingCancellation",
    "WebhookSponsorshipPendingCancellationPropSponsorship",
    "WebhookSponsorshipPendingCancellationPropSponsorshipPropMaintainer",
    "WebhookSponsorshipPendingCancellationPropSponsorshipPropSponsor",
    "WebhookSponsorshipPendingCancellationPropSponsorshipPropSponsorable",
    "WebhookSponsorshipPendingCancellationPropSponsorshipPropTier",
    "WebhookSponsorshipPendingTierChange",
    "WebhookSponsorshipPendingTierChangePropChanges",
    "WebhookSponsorshipPendingTierChangePropChangesPropTier",
    "WebhookSponsorshipPendingTierChangePropChangesPropTierPropFrom",
    "WebhookSponsorshipPendingTierChangePropSponsorship",
    "WebhookSponsorshipPendingTierChangePropSponsorshipPropMaintainer",
    "WebhookSponsorshipPendingTierChangePropSponsorshipPropSponsor",
    "WebhookSponsorshipPendingTierChangePropSponsorshipPropSponsorable",
    "WebhookSponsorshipPendingTierChangePropSponsorshipPropTier",
    "WebhookSponsorshipTierChanged",
    "WebhookSponsorshipTierChangedPropChanges",
    "WebhookSponsorshipTierChangedPropChangesPropTier",
    "WebhookSponsorshipTierChangedPropChangesPropTierPropFrom",
    "WebhookSponsorshipTierChangedPropSponsorship",
    "WebhookSponsorshipTierChangedPropSponsorshipPropMaintainer",
    "WebhookSponsorshipTierChangedPropSponsorshipPropSponsor",
    "WebhookSponsorshipTierChangedPropSponsorshipPropSponsorable",
    "WebhookSponsorshipTierChangedPropSponsorshipPropTier",
    "WebhookStarCreated",
    "WebhookStarDeleted",
    "WebhookStatus",
    "WebhookStatusPropBranchesItems",
    "WebhookStatusPropBranchesItemsPropCommit",
    "WebhookStatusPropCommit",
    "WebhookStatusPropCommitPropAuthor",
    "WebhookStatusPropCommitPropCommit",
    "WebhookStatusPropCommitPropCommitPropAuthor",
    "WebhookStatusPropCommitPropCommitPropAuthorAllof0",
    "WebhookStatusPropCommitPropCommitPropAuthorAllof1",
    "WebhookStatusPropCommitPropCommitPropCommitter",
    "WebhookStatusPropCommitPropCommitPropCommitterAllof0",
    "WebhookStatusPropCommitPropCommitPropCommitterAllof1",
    "WebhookStatusPropCommitPropCommitPropTree",
    "WebhookStatusPropCommitPropCommitPropVerification",
    "WebhookStatusPropCommitPropCommitter",
    "WebhookStatusPropCommitPropParentsItems",
    "WebhookTeamAdd",
    "WebhookTeamAddPropTeam",
    "WebhookTeamAddPropTeamPropParent",
    "WebhookTeamAddedToRepository",
    "WebhookTeamAddedToRepositoryPropRepository",
    "WebhookTeamAddedToRepositoryPropRepositoryPropCustomProperties",
    "WebhookTeamAddedToRepositoryPropRepositoryPropLicense",
    "WebhookTeamAddedToRepositoryPropRepositoryPropOwner",
    "WebhookTeamAddedToRepositoryPropRepositoryPropPermissions",
    "WebhookTeamAddedToRepositoryPropTeam",
    "WebhookTeamAddedToRepositoryPropTeamPropParent",
    "WebhookTeamCreated",
    "WebhookTeamCreatedPropRepository",
    "WebhookTeamCreatedPropRepositoryPropCustomProperties",
    "WebhookTeamCreatedPropRepositoryPropLicense",
    "WebhookTeamCreatedPropRepositoryPropOwner",
    "WebhookTeamCreatedPropRepositoryPropPermissions",
    "WebhookTeamCreatedPropTeam",
    "WebhookTeamCreatedPropTeamPropParent",
    "WebhookTeamDeleted",
    "WebhookTeamDeletedPropRepository",
    "WebhookTeamDeletedPropRepositoryPropCustomProperties",
    "WebhookTeamDeletedPropRepositoryPropLicense",
    "WebhookTeamDeletedPropRepositoryPropOwner",
    "WebhookTeamDeletedPropRepositoryPropPermissions",
    "WebhookTeamDeletedPropTeam",
    "WebhookTeamDeletedPropTeamPropParent",
    "WebhookTeamEdited",
    "WebhookTeamEditedPropChanges",
    "WebhookTeamEditedPropChangesPropDescription",
    "WebhookTeamEditedPropChangesPropName",
    "WebhookTeamEditedPropChangesPropPrivacy",
    "WebhookTeamEditedPropChangesPropNotificationSetting",
    "WebhookTeamEditedPropChangesPropRepository",
    "WebhookTeamEditedPropChangesPropRepositoryPropPermissions",
    "WebhookTeamEditedPropChangesPropRepositoryPropPermissionsPropFrom",
    "WebhookTeamEditedPropRepository",
    "WebhookTeamEditedPropRepositoryPropCustomProperties",
    "WebhookTeamEditedPropRepositoryPropLicense",
    "WebhookTeamEditedPropRepositoryPropOwner",
    "WebhookTeamEditedPropRepositoryPropPermissions",
    "WebhookTeamEditedPropTeam",
    "WebhookTeamEditedPropTeamPropParent",
    "WebhookTeamRemovedFromRepository",
    "WebhookTeamRemovedFromRepositoryPropRepository",
    "WebhookTeamRemovedFromRepositoryPropRepositoryPropCustomProperties",
    "WebhookTeamRemovedFromRepositoryPropRepositoryPropLicense",
    "WebhookTeamRemovedFromRepositoryPropRepositoryPropOwner",
    "WebhookTeamRemovedFromRepositoryPropRepositoryPropPermissions",
    "WebhookTeamRemovedFromRepositoryPropTeam",
    "WebhookTeamRemovedFromRepositoryPropTeamPropParent",
    "WebhookWatchStarted",
    "WebhookWorkflowDispatch",
    "WebhookWorkflowDispatchPropInputs",
    "WebhookWorkflowJobCompleted",
    "WebhookWorkflowJobCompletedPropWorkflowJob",
    "WebhookWorkflowJobCompletedPropWorkflowJobAllof0",
    "WebhookWorkflowJobCompletedPropWorkflowJobAllof0PropStepsItems",
    "WebhookWorkflowJobCompletedPropWorkflowJobAllof1",
    "WebhookWorkflowJobCompletedPropWorkflowJobAllof1PropStepsItems",
    "WebhookWorkflowJobCompletedPropWorkflowJobMergedSteps",
    "WebhookWorkflowJobInProgress",
    "WebhookWorkflowJobInProgressPropWorkflowJob",
    "WebhookWorkflowJobInProgressPropWorkflowJobAllof0",
    "WebhookWorkflowJobInProgressPropWorkflowJobAllof0PropStepsItems",
    "WebhookWorkflowJobInProgressPropWorkflowJobAllof1",
    "WebhookWorkflowJobInProgressPropWorkflowJobAllof1PropStepsItems",
    "WebhookWorkflowJobInProgressPropWorkflowJobMergedSteps",
    "WebhookWorkflowJobQueued",
    "WebhookWorkflowJobQueuedPropWorkflowJob",
    "WebhookWorkflowJobQueuedPropWorkflowJobPropStepsItems",
    "WebhookWorkflowJobWaiting",
    "WebhookWorkflowJobWaitingPropWorkflowJob",
    "WebhookWorkflowJobWaitingPropWorkflowJobPropStepsItems",
    "WebhookWorkflowRunCompleted",
    "WebhookWorkflowRunCompletedPropWorkflow",
    "WebhookWorkflowRunCompletedPropWorkflowRun",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof0",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropActor",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropHeadCommit",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropHeadCommitPropAuthor",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropHeadCommitPropCommitter",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropHeadRepository",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropHeadRepositoryPropOwner",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItems",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItemsPropBase",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItemsPropBasePropRepo",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItemsPropHead",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItemsPropHeadPropRepo",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropReferencedWorkflowsItems",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropRepository",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropRepositoryPropOwner",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropTriggeringActor",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof1",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropActor",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadCommit",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadCommitPropAuthor",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadCommitPropCommitter",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadRepository",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadRepositoryPropOwner",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropPullRequestsItems",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropReferencedWorkflowsItems",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropRepository",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropRepositoryPropOwner",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropTriggeringActor",
    "WebhookWorkflowRunCompletedPropWorkflowRunMergedActor",
    "WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadCommitPropAuthor",
    "WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadCommitPropCommitter",
    "WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadCommit",
    "WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadRepositoryPropOwner",
    "WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadRepository",
    "WebhookWorkflowRunCompletedPropWorkflowRunMergedPullRequests",
    "WebhookWorkflowRunCompletedPropWorkflowRunMergedRepositoryPropOwner",
    "WebhookWorkflowRunCompletedPropWorkflowRunMergedRepository",
    "WebhookWorkflowRunCompletedPropWorkflowRunMergedTriggeringActor",
    "WebhookWorkflowRunInProgress",
    "WebhookWorkflowRunInProgressPropWorkflow",
    "WebhookWorkflowRunInProgressPropWorkflowRun",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof0",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropActor",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropHeadCommit",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropHeadCommitPropAuthor",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropHeadCommitPropCommitter",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropHeadRepository",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropHeadRepositoryPropOwner",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItems",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItemsPropBase",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItemsPropBasePropRepo",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItemsPropHead",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItemsPropHeadPropRepo",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropReferencedWorkflowsItems",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropRepository",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropRepositoryPropOwner",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropTriggeringActor",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof1",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropActor",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadCommit",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadCommitPropAuthor",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadCommitPropCommitter",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadRepository",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadRepositoryPropOwner",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropPullRequestsItems",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropReferencedWorkflowsItems",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropRepository",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropRepositoryPropOwner",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropTriggeringActor",
    "WebhookWorkflowRunInProgressPropWorkflowRunMergedActor",
    "WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadCommitPropAuthor",
    "WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadCommitPropCommitter",
    "WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadCommit",
    "WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadRepositoryPropOwner",
    "WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadRepository",
    "WebhookWorkflowRunInProgressPropWorkflowRunMergedPullRequests",
    "WebhookWorkflowRunInProgressPropWorkflowRunMergedRepositoryPropOwner",
    "WebhookWorkflowRunInProgressPropWorkflowRunMergedRepository",
    "WebhookWorkflowRunInProgressPropWorkflowRunMergedTriggeringActor",
    "WebhookWorkflowRunRequested",
    "WebhookWorkflowRunRequestedPropWorkflow",
    "WebhookWorkflowRunRequestedPropWorkflowRun",
    "WebhookWorkflowRunRequestedPropWorkflowRunPropActor",
    "WebhookWorkflowRunRequestedPropWorkflowRunPropHeadCommit",
    "WebhookWorkflowRunRequestedPropWorkflowRunPropHeadCommitPropAuthor",
    "WebhookWorkflowRunRequestedPropWorkflowRunPropHeadCommitPropCommitter",
    "WebhookWorkflowRunRequestedPropWorkflowRunPropHeadRepository",
    "WebhookWorkflowRunRequestedPropWorkflowRunPropHeadRepositoryPropOwner",
    "WebhookWorkflowRunRequestedPropWorkflowRunPropPullRequestsItems",
    "WebhookWorkflowRunRequestedPropWorkflowRunPropPullRequestsItemsPropBase",
    "WebhookWorkflowRunRequestedPropWorkflowRunPropPullRequestsItemsPropBasePropRepo",
    "WebhookWorkflowRunRequestedPropWorkflowRunPropPullRequestsItemsPropHead",
    "WebhookWorkflowRunRequestedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepo",
    "WebhookWorkflowRunRequestedPropWorkflowRunPropReferencedWorkflowsItems",
    "WebhookWorkflowRunRequestedPropWorkflowRunPropRepository",
    "WebhookWorkflowRunRequestedPropWorkflowRunPropRepositoryPropOwner",
    "WebhookWorkflowRunRequestedPropWorkflowRunPropTriggeringActor",
    "AppManifestsCodeConversionsPostResponse201",
    "AppManifestsCodeConversionsPostResponse201Allof1",
    "AppHookConfigPatchBody",
    "AppHookDeliveriesDeliveryIdAttemptsPostResponse202",
    "AppInstallationsInstallationIdAccessTokensPostBody",
    "ApplicationsClientIdGrantDeleteBody",
    "ApplicationsClientIdTokenPostBody",
    "ApplicationsClientIdTokenDeleteBody",
    "ApplicationsClientIdTokenPatchBody",
    "ApplicationsClientIdTokenScopedPostBody",
    "EmojisGetResponse200",
    "EnterprisesEnterpriseSecretScanningAlertsGetResponse503",
    "GistsPostBody",
    "GistsPostBodyPropFiles",
    "GistsGistIdGetResponse403",
    "GistsGistIdGetResponse403PropBlock",
    "GistsGistIdPatchBodyPropFiles",
    "GistsGistIdPatchBody",
    "GistsGistIdCommentsPostBody",
    "GistsGistIdCommentsCommentIdPatchBody",
    "GistsGistIdStarGetResponse404",
    "InstallationRepositoriesGetResponse200",
    "MarkdownPostBody",
    "NotificationsPutBody",
    "NotificationsPutResponse202",
    "NotificationsThreadsThreadIdSubscriptionPutBody",
    "OrgsOrgPatchBody",
    "OrgsOrgActionsCacheUsageByRepositoryGetResponse200",
    "OrgsOrgActionsPermissionsPutBody",
    "OrgsOrgActionsPermissionsRepositoriesGetResponse200",
    "OrgsOrgActionsPermissionsRepositoriesPutBody",
    "OrgsOrgActionsRunnersGetResponse200",
    "OrgsOrgActionsRunnersGenerateJitconfigPostBody",
    "OrgsOrgActionsRunnersGenerateJitconfigPostResponse201",
    "OrgsOrgActionsRunnersRunnerIdLabelsGetResponse200",
    "OrgsOrgActionsRunnersRunnerIdLabelsPutBody",
    "OrgsOrgActionsRunnersRunnerIdLabelsPostBody",
    "OrgsOrgActionsRunnersRunnerIdLabelsDeleteResponse200",
    "OrgsOrgActionsSecretsGetResponse200",
    "OrgsOrgActionsSecretsSecretNamePutBody",
    "OrgsOrgActionsSecretsSecretNameRepositoriesGetResponse200",
    "OrgsOrgActionsSecretsSecretNameRepositoriesPutBody",
    "OrgsOrgActionsVariablesGetResponse200",
    "OrgsOrgActionsVariablesPostBody",
    "OrgsOrgActionsVariablesNamePatchBody",
    "OrgsOrgActionsVariablesNameRepositoriesGetResponse200",
    "OrgsOrgActionsVariablesNameRepositoriesPutBody",
    "OrgsOrgCodespacesGetResponse200",
    "OrgsOrgCodespacesAccessPutBody",
    "OrgsOrgCodespacesAccessSelectedUsersPostBody",
    "OrgsOrgCodespacesAccessSelectedUsersDeleteBody",
    "OrgsOrgCodespacesSecretsGetResponse200",
    "OrgsOrgCodespacesSecretsSecretNamePutBody",
    "OrgsOrgCodespacesSecretsSecretNameRepositoriesGetResponse200",
    "OrgsOrgCodespacesSecretsSecretNameRepositoriesPutBody",
    "OrgsOrgCopilotBillingSeatsGetResponse200",
    "OrgsOrgCopilotBillingSelectedTeamsPostBody",
    "OrgsOrgCopilotBillingSelectedTeamsPostResponse201",
    "OrgsOrgCopilotBillingSelectedTeamsDeleteBody",
    "OrgsOrgCopilotBillingSelectedTeamsDeleteResponse200",
    "OrgsOrgCopilotBillingSelectedUsersPostBody",
    "OrgsOrgCopilotBillingSelectedUsersPostResponse201",
    "OrgsOrgCopilotBillingSelectedUsersDeleteBody",
    "OrgsOrgCopilotBillingSelectedUsersDeleteResponse200",
    "OrgsOrgDependabotSecretsGetResponse200",
    "OrgsOrgDependabotSecretsSecretNamePutBody",
    "OrgsOrgDependabotSecretsSecretNameRepositoriesGetResponse200",
    "OrgsOrgDependabotSecretsSecretNameRepositoriesPutBody",
    "OrgsOrgHooksPostBody",
    "OrgsOrgHooksPostBodyPropConfig",
    "OrgsOrgHooksHookIdPatchBody",
    "OrgsOrgHooksHookIdPatchBodyPropConfig",
    "OrgsOrgHooksHookIdConfigPatchBody",
    "OrgsOrgInstallationsGetResponse200",
    "OrgsOrgInteractionLimitsGetResponse200Anyof1",
    "OrgsOrgInvitationsPostBody",
    "OrgsOrgMembersUsernameCodespacesGetResponse200",
    "OrgsOrgMembershipsUsernamePutBody",
    "OrgsOrgMigrationsPostBody",
    "OrgsOrgOrganizationRolesGetResponse200",
    "OrgsOrgOrganizationRolesPostBody",
    "OrgsOrgOrganizationRolesRoleIdPatchBody",
    "OrgsOrgOutsideCollaboratorsUsernamePutBody",
    "OrgsOrgOutsideCollaboratorsUsernamePutResponse202",
    "OrgsOrgOutsideCollaboratorsUsernameDeleteResponse422",
    "OrgsOrgPersonalAccessTokenRequestsPostBody",
    "OrgsOrgPersonalAccessTokenRequestsPatRequestIdPostBody",
    "OrgsOrgPersonalAccessTokensPostBody",
    "OrgsOrgPersonalAccessTokensPatIdPostBody",
    "OrgsOrgProjectsPostBody",
    "OrgsOrgPropertiesSchemaPatchBody",
    "OrgsOrgPropertiesSchemaCustomPropertyNamePutBody",
    "OrgsOrgPropertiesValuesPatchBody",
    "OrgsOrgReposPostBody",
    "OrgsOrgReposPostBodyPropCustomProperties",
    "OrgsOrgRulesetsPostBody",
    "OrgsOrgRulesetsRulesetIdPutBody",
    "OrgsOrgTeamsPostBody",
    "OrgsOrgTeamsTeamSlugPatchBody",
    "OrgsOrgTeamsTeamSlugDiscussionsPostBody",
    "OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberPatchBody",
    "OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsPostBody",
    "OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsCommentNumberPatchBody",
    "OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsCommentNumberReactionsPostBody",
    "OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberReactionsPostBody",
    "OrgsOrgTeamsTeamSlugMembershipsUsernamePutBody",
    "OrgsOrgTeamsTeamSlugProjectsProjectIdPutBody",
    "OrgsOrgTeamsTeamSlugProjectsProjectIdPutResponse403",
    "OrgsOrgTeamsTeamSlugReposOwnerRepoPutBody",
    "OrgsOrgSecurityProductEnablementPostBody",
    "ProjectsColumnsCardsCardIdDeleteResponse403",
    "ProjectsColumnsCardsCardIdPatchBody",
    "ProjectsColumnsCardsCardIdMovesPostBody",
    "ProjectsColumnsCardsCardIdMovesPostResponse201",
    "ProjectsColumnsCardsCardIdMovesPostResponse403",
    "ProjectsColumnsCardsCardIdMovesPostResponse403PropErrorsItems",
    "ProjectsColumnsCardsCardIdMovesPostResponse503",
    "ProjectsColumnsCardsCardIdMovesPostResponse503PropErrorsItems",
    "ProjectsColumnsColumnIdPatchBody",
    "ProjectsColumnsColumnIdCardsPostBodyOneof0",
    "ProjectsColumnsColumnIdCardsPostBodyOneof1",
    "ProjectsColumnsColumnIdCardsPostResponse503",
    "ProjectsColumnsColumnIdCardsPostResponse503PropErrorsItems",
    "ProjectsColumnsColumnIdMovesPostBody",
    "ProjectsColumnsColumnIdMovesPostResponse201",
    "ProjectsProjectIdDeleteResponse403",
    "ProjectsProjectIdPatchBody",
    "ProjectsProjectIdPatchResponse403",
    "ProjectsProjectIdCollaboratorsUsernamePutBody",
    "ProjectsProjectIdColumnsPostBody",
    "ReposOwnerRepoDeleteResponse403",
    "ReposOwnerRepoPatchBody",
    "ReposOwnerRepoPatchBodyPropSecurityAndAnalysisPropAdvancedSecurity",
    "ReposOwnerRepoPatchBodyPropSecurityAndAnalysisPropSecretScanning",
    "ReposOwnerRepoPatchBodyPropSecurityAndAnalysisPropSecretScanningPushProtection",
    "ReposOwnerRepoPatchBodyPropSecurityAndAnalysis",
    "ReposOwnerRepoActionsArtifactsGetResponse200",
    "ReposOwnerRepoActionsJobsJobIdRerunPostBody",
    "ReposOwnerRepoActionsOidcCustomizationSubPutBody",
    "ReposOwnerRepoActionsOrganizationSecretsGetResponse200",
    "ReposOwnerRepoActionsOrganizationVariablesGetResponse200",
    "ReposOwnerRepoActionsPermissionsPutBody",
    "ReposOwnerRepoActionsRunnersGetResponse200",
    "ReposOwnerRepoActionsRunnersGenerateJitconfigPostBody",
    "ReposOwnerRepoActionsRunnersRunnerIdLabelsPutBody",
    "ReposOwnerRepoActionsRunnersRunnerIdLabelsPostBody",
    "ReposOwnerRepoActionsRunsGetResponse200",
    "ReposOwnerRepoActionsRunsRunIdArtifactsGetResponse200",
    "ReposOwnerRepoActionsRunsRunIdAttemptsAttemptNumberJobsGetResponse200",
    "ReposOwnerRepoActionsRunsRunIdJobsGetResponse200",
    "ReposOwnerRepoActionsRunsRunIdPendingDeploymentsPostBody",
    "ReposOwnerRepoActionsRunsRunIdRerunPostBody",
    "ReposOwnerRepoActionsRunsRunIdRerunFailedJobsPostBody",
    "ReposOwnerRepoActionsSecretsGetResponse200",
    "ReposOwnerRepoActionsSecretsSecretNamePutBody",
    "ReposOwnerRepoActionsVariablesGetResponse200",
    "ReposOwnerRepoActionsVariablesPostBody",
    "ReposOwnerRepoActionsVariablesNamePatchBody",
    "ReposOwnerRepoActionsWorkflowsGetResponse200",
    "ReposOwnerRepoActionsWorkflowsWorkflowIdDispatchesPostBody",
    "ReposOwnerRepoActionsWorkflowsWorkflowIdDispatchesPostBodyPropInputs",
    "ReposOwnerRepoActionsWorkflowsWorkflowIdRunsGetResponse200",
    "ReposOwnerRepoAutolinksPostBody",
    "ReposOwnerRepoBranchesBranchProtectionPutBody",
    "ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredStatusChecksPropChecksItems",
    "ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredStatusChecks",
    "ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredPullRequestReviewsPropDismissalRestrictions",
    "ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredPullRequestReviewsPropBypassPullRequestAllowances",
    "ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredPullRequestReviews",
    "ReposOwnerRepoBranchesBranchProtectionPutBodyPropRestrictions",
    "ReposOwnerRepoBranchesBranchProtectionRequiredPullRequestReviewsPatchBody",
    "ReposOwnerRepoBranchesBranchProtectionRequiredPullRequestReviewsPatchBodyPropDismissalRestrictions",
    "ReposOwnerRepoBranchesBranchProtectionRequiredPullRequestReviewsPatchBodyPropBypassPullRequestAllowances",
    "ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksPatchBody",
    "ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksPatchBodyPropChecksItems",
    "ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsPutBodyOneof0",
    "ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsPostBodyOneof0",
    "ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsDeleteBodyOneof0",
    "ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsPutBodyOneof0",
    "ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsPostBodyOneof0",
    "ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsDeleteBodyOneof0",
    "ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsPutBodyOneof0",
    "ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsPostBodyOneof0",
    "ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsDeleteBodyOneof0",
    "ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersPutBodyOneof0",
    "ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersPostBodyOneof0",
    "ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersDeleteBodyOneof0",
    "ReposOwnerRepoBranchesBranchRenamePostBody",
    "ReposOwnerRepoCheckRunsPostBodyPropOutput",
    "ReposOwnerRepoCheckRunsPostBodyPropOutputPropAnnotationsItems",
    "ReposOwnerRepoCheckRunsPostBodyPropOutputPropImagesItems",
    "ReposOwnerRepoCheckRunsPostBodyPropActionsItems",
    "ReposOwnerRepoCheckRunsPostBodyOneof0",
    "ReposOwnerRepoCheckRunsPostBodyOneof1",
    "ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutput",
    "ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutputPropAnnotationsItems",
    "ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutputPropImagesItems",
    "ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropActionsItems",
    "ReposOwnerRepoCheckRunsCheckRunIdPatchBodyAnyof0",
    "ReposOwnerRepoCheckRunsCheckRunIdPatchBodyAnyof1",
    "ReposOwnerRepoCheckSuitesPostBody",
    "ReposOwnerRepoCheckSuitesPreferencesPatchBody",
    "ReposOwnerRepoCheckSuitesPreferencesPatchBodyPropAutoTriggerChecksItems",
    "ReposOwnerRepoCheckSuitesCheckSuiteIdCheckRunsGetResponse200",
    "ReposOwnerRepoCodeScanningAlertsAlertNumberPatchBody",
    "ReposOwnerRepoCodeScanningSarifsPostBody",
    "ReposOwnerRepoCodespacesGetResponse200",
    "ReposOwnerRepoCodespacesPostBody",
    "ReposOwnerRepoCodespacesDevcontainersGetResponse200",
    "ReposOwnerRepoCodespacesDevcontainersGetResponse200PropDevcontainersItems",
    "ReposOwnerRepoCodespacesMachinesGetResponse200",
    "ReposOwnerRepoCodespacesNewGetResponse200",
    "ReposOwnerRepoCodespacesNewGetResponse200PropDefaults",
    "ReposOwnerRepoCodespacesSecretsGetResponse200",
    "ReposOwnerRepoCodespacesSecretsSecretNamePutBody",
    "ReposOwnerRepoCollaboratorsUsernamePutBody",
    "ReposOwnerRepoCommentsCommentIdPatchBody",
    "ReposOwnerRepoCommentsCommentIdReactionsPostBody",
    "ReposOwnerRepoCommitsCommitShaCommentsPostBody",
    "ReposOwnerRepoCommitsRefCheckRunsGetResponse200",
    "ReposOwnerRepoCommitsRefCheckSuitesGetResponse200",
    "ReposOwnerRepoContentsPathPutBody",
    "ReposOwnerRepoContentsPathPutBodyPropCommitter",
    "ReposOwnerRepoContentsPathPutBodyPropAuthor",
    "ReposOwnerRepoContentsPathDeleteBody",
    "ReposOwnerRepoContentsPathDeleteBodyPropCommitter",
    "ReposOwnerRepoContentsPathDeleteBodyPropAuthor",
    "ReposOwnerRepoDependabotAlertsAlertNumberPatchBody",
    "ReposOwnerRepoDependabotSecretsGetResponse200",
    "ReposOwnerRepoDependabotSecretsSecretNamePutBody",
    "ReposOwnerRepoDependencyGraphSnapshotsPostResponse201",
    "ReposOwnerRepoDeploymentsPostBody",
    "ReposOwnerRepoDeploymentsPostBodyPropPayloadOneof0",
    "ReposOwnerRepoDeploymentsPostResponse202",
    "ReposOwnerRepoDeploymentsDeploymentIdStatusesPostBody",
    "ReposOwnerRepoDispatchesPostBody",
    "ReposOwnerRepoDispatchesPostBodyPropClientPayload",
    "ReposOwnerRepoEnvironmentsGetResponse200",
    "ReposOwnerRepoEnvironmentsEnvironmentNamePutBodyPropReviewersItems",
    "ReposOwnerRepoEnvironmentsEnvironmentNamePutBody",
    "ReposOwnerRepoEnvironmentsEnvironmentNameDeploymentBranchPoliciesGetResponse200",
    "ReposOwnerRepoEnvironmentsEnvironmentNameDeploymentProtectionRulesGetResponse200",
    "ReposOwnerRepoEnvironmentsEnvironmentNameDeploymentProtectionRulesPostBody",
    "ReposOwnerRepoEnvironmentsEnvironmentNameDeploymentProtectionRulesAppsGetResponse200",
    "ReposOwnerRepoForksPostBody",
    "ReposOwnerRepoGitBlobsPostBody",
    "ReposOwnerRepoGitCommitsPostBody",
    "ReposOwnerRepoGitCommitsPostBodyPropAuthor",
    "ReposOwnerRepoGitCommitsPostBodyPropCommitter",
    "ReposOwnerRepoGitRefsPostBody",
    "ReposOwnerRepoGitRefsRefPatchBody",
    "ReposOwnerRepoGitTagsPostBody",
    "ReposOwnerRepoGitTagsPostBodyPropTagger",
    "ReposOwnerRepoGitTreesPostBody",
    "ReposOwnerRepoGitTreesPostBodyPropTreeItems",
    "ReposOwnerRepoHooksPostBodyPropConfig",
    "ReposOwnerRepoHooksPostBody",
    "ReposOwnerRepoHooksHookIdPatchBody",
    "ReposOwnerRepoHooksHookIdPatchBodyPropConfig",
    "ReposOwnerRepoHooksHookIdConfigPatchBody",
    "ReposOwnerRepoImportPutBody",
    "ReposOwnerRepoImportPatchBody",
    "ReposOwnerRepoImportAuthorsAuthorIdPatchBody",
    "ReposOwnerRepoImportLfsPatchBody",
    "ReposOwnerRepoInteractionLimitsGetResponse200Anyof1",
    "ReposOwnerRepoInvitationsInvitationIdPatchBody",
    "ReposOwnerRepoIssuesPostBody",
    "ReposOwnerRepoIssuesPostBodyPropLabelsItemsOneof1",
    "ReposOwnerRepoIssuesCommentsCommentIdPatchBody",
    "ReposOwnerRepoIssuesCommentsCommentIdReactionsPostBody",
    "ReposOwnerRepoIssuesIssueNumberPatchBody",
    "ReposOwnerRepoIssuesIssueNumberPatchBodyPropLabelsItemsOneof1",
    "ReposOwnerRepoIssuesIssueNumberAssigneesPostBody",
    "ReposOwnerRepoIssuesIssueNumberAssigneesDeleteBody",
    "ReposOwnerRepoIssuesIssueNumberCommentsPostBody",
    "ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof0",
    "ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof2",
    "ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof2PropLabelsItems",
    "ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof3Items",
    "ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof0",
    "ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof2",
    "ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof2PropLabelsItems",
    "ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof3Items",
    "ReposOwnerRepoIssuesIssueNumberLockPutBody",
    "ReposOwnerRepoIssuesIssueNumberReactionsPostBody",
    "ReposOwnerRepoKeysPostBody",
    "ReposOwnerRepoLabelsPostBody",
    "ReposOwnerRepoLabelsNamePatchBody",
    "ReposOwnerRepoMergeUpstreamPostBody",
    "ReposOwnerRepoMergesPostBody",
    "ReposOwnerRepoMilestonesPostBody",
    "ReposOwnerRepoMilestonesMilestoneNumberPatchBody",
    "ReposOwnerRepoNotificationsPutBody",
    "ReposOwnerRepoNotificationsPutResponse202",
    "ReposOwnerRepoPagesPutBodyPropSourceAnyof1",
    "ReposOwnerRepoPagesPutBodyAnyof0",
    "ReposOwnerRepoPagesPutBodyAnyof1",
    "ReposOwnerRepoPagesPutBodyAnyof2",
    "ReposOwnerRepoPagesPutBodyAnyof3",
    "ReposOwnerRepoPagesPutBodyAnyof4",
    "ReposOwnerRepoPagesPostBodyPropSource",
    "ReposOwnerRepoPagesPostBodyAnyof0",
    "ReposOwnerRepoPagesPostBodyAnyof1",
    "ReposOwnerRepoPagesDeploymentPostBody",
    "ReposOwnerRepoProjectsPostBody",
    "ReposOwnerRepoPullsPostBody",
    "ReposOwnerRepoPullsCommentsCommentIdPatchBody",
    "ReposOwnerRepoPullsCommentsCommentIdReactionsPostBody",
    "ReposOwnerRepoPullsPullNumberPatchBody",
    "ReposOwnerRepoPullsPullNumberCodespacesPostBody",
    "ReposOwnerRepoPullsPullNumberCommentsPostBody",
    "ReposOwnerRepoPullsPullNumberCommentsCommentIdRepliesPostBody",
    "ReposOwnerRepoPullsPullNumberMergePutBody",
    "ReposOwnerRepoPullsPullNumberMergePutResponse405",
    "ReposOwnerRepoPullsPullNumberMergePutResponse409",
    "ReposOwnerRepoPullsPullNumberRequestedReviewersPostBodyAnyof0",
    "ReposOwnerRepoPullsPullNumberRequestedReviewersPostBodyAnyof1",
    "ReposOwnerRepoPullsPullNumberRequestedReviewersDeleteBody",
    "ReposOwnerRepoPullsPullNumberReviewsPostBody",
    "ReposOwnerRepoPullsPullNumberReviewsPostBodyPropCommentsItems",
    "ReposOwnerRepoPullsPullNumberReviewsReviewIdPutBody",
    "ReposOwnerRepoPullsPullNumberReviewsReviewIdDismissalsPutBody",
    "ReposOwnerRepoPullsPullNumberReviewsReviewIdEventsPostBody",
    "ReposOwnerRepoPullsPullNumberUpdateBranchPutBody",
    "ReposOwnerRepoPullsPullNumberUpdateBranchPutResponse202",
    "ReposOwnerRepoReleasesPostBody",
    "ReposOwnerRepoReleasesAssetsAssetIdPatchBody",
    "ReposOwnerRepoReleasesGenerateNotesPostBody",
    "ReposOwnerRepoReleasesReleaseIdPatchBody",
    "ReposOwnerRepoReleasesReleaseIdReactionsPostBody",
    "ReposOwnerRepoRulesetsPostBody",
    "ReposOwnerRepoRulesetsRulesetIdPutBody",
    "ReposOwnerRepoSecretScanningAlertsAlertNumberPatchBody",
    "ReposOwnerRepoStatusesShaPostBody",
    "ReposOwnerRepoSubscriptionPutBody",
    "ReposOwnerRepoTagsProtectionPostBody",
    "ReposOwnerRepoTopicsPutBody",
    "ReposOwnerRepoTransferPostBody",
    "ReposTemplateOwnerTemplateRepoGeneratePostBody",
    "RepositoriesRepositoryIdEnvironmentsEnvironmentNameSecretsGetResponse200",
    "RepositoriesRepositoryIdEnvironmentsEnvironmentNameSecretsSecretNamePutBody",
    "RepositoriesRepositoryIdEnvironmentsEnvironmentNameVariablesGetResponse200",
    "RepositoriesRepositoryIdEnvironmentsEnvironmentNameVariablesPostBody",
    "RepositoriesRepositoryIdEnvironmentsEnvironmentNameVariablesNamePatchBody",
    "SearchCodeGetResponse200",
    "SearchCommitsGetResponse200",
    "SearchIssuesGetResponse200",
    "SearchLabelsGetResponse200",
    "SearchRepositoriesGetResponse200",
    "SearchTopicsGetResponse200",
    "SearchUsersGetResponse200",
    "TeamsTeamIdPatchBody",
    "TeamsTeamIdDiscussionsPostBody",
    "TeamsTeamIdDiscussionsDiscussionNumberPatchBody",
    "TeamsTeamIdDiscussionsDiscussionNumberCommentsPostBody",
    "TeamsTeamIdDiscussionsDiscussionNumberCommentsCommentNumberPatchBody",
    "TeamsTeamIdDiscussionsDiscussionNumberCommentsCommentNumberReactionsPostBody",
    "TeamsTeamIdDiscussionsDiscussionNumberReactionsPostBody",
    "TeamsTeamIdMembershipsUsernamePutBody",
    "TeamsTeamIdProjectsProjectIdPutBody",
    "TeamsTeamIdProjectsProjectIdPutResponse403",
    "TeamsTeamIdReposOwnerRepoPutBody",
    "UserPatchBody",
    "UserCodespacesGetResponse200",
    "UserCodespacesPostBodyOneof0",
    "UserCodespacesPostBodyOneof1",
    "UserCodespacesPostBodyOneof1PropPullRequest",
    "UserCodespacesSecretsGetResponse200",
    "UserCodespacesSecretsSecretNamePutBody",
    "UserCodespacesSecretsSecretNameRepositoriesGetResponse200",
    "UserCodespacesSecretsSecretNameRepositoriesPutBody",
    "UserCodespacesCodespaceNamePatchBody",
    "UserCodespacesCodespaceNameMachinesGetResponse200",
    "UserCodespacesCodespaceNamePublishPostBody",
    "UserEmailVisibilityPatchBody",
    "UserEmailsPostBodyOneof0",
    "UserEmailsDeleteBodyOneof0",
    "UserGpgKeysPostBody",
    "UserInstallationsGetResponse200",
    "UserInstallationsInstallationIdRepositoriesGetResponse200",
    "UserInteractionLimitsGetResponse200Anyof1",
    "UserKeysPostBody",
    "UserMembershipsOrgsOrgPatchBody",
    "UserMigrationsPostBody",
    "UserProjectsPostBody",
    "UserReposPostBody",
    "UserSocialAccountsPostBody",
    "UserSocialAccountsDeleteBody",
    "UserSshSigningKeysPostBody",
)
