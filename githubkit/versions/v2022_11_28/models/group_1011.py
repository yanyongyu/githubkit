"""DO NOT EDIT THIS FILE!

This file is automatically @generated by githubkit using the follow command:

python -m codegen && isort . && black .

See https://github.com/github/rest-api-description for more information.
"""


from __future__ import annotations

from typing import List
from datetime import datetime

from pydantic import Field

from githubkit.utils import UNSET
from githubkit.typing import Missing
from githubkit.compat import GitHubModel, model_rebuild


class ReposOwnerRepoGitCommitsPostBody(GitHubModel):
    """ReposOwnerRepoGitCommitsPostBody"""

    message: str = Field(description="The commit message")
    tree: str = Field(description="The SHA of the tree object this commit points to")
    parents: Missing[List[str]] = Field(
        default=UNSET,
        description="The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.",
    )
    author: Missing[ReposOwnerRepoGitCommitsPostBodyPropAuthor] = Field(
        default=UNSET,
        description="Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details.",
    )
    committer: Missing[ReposOwnerRepoGitCommitsPostBodyPropCommitter] = Field(
        default=UNSET,
        description="Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details.",
    )
    signature: Missing[str] = Field(
        default=UNSET,
        description="The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.",
    )


class ReposOwnerRepoGitCommitsPostBodyPropAuthor(GitHubModel):
    """ReposOwnerRepoGitCommitsPostBodyPropAuthor

    Information about the author of the commit. By default, the `author` will be the
    authenticated user and the current date. See the `author` and `committer` object
    below for details.
    """

    name: str = Field(description="The name of the author (or committer) of the commit")
    email: str = Field(
        description="The email of the author (or committer) of the commit"
    )
    date: Missing[datetime] = Field(
        default=UNSET,
        description="Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )


class ReposOwnerRepoGitCommitsPostBodyPropCommitter(GitHubModel):
    """ReposOwnerRepoGitCommitsPostBodyPropCommitter

    Information about the person who is making the commit. By default, `committer`
    will use the information set in `author`. See the `author` and `committer`
    object below for details.
    """

    name: Missing[str] = Field(
        default=UNSET, description="The name of the author (or committer) of the commit"
    )
    email: Missing[str] = Field(
        default=UNSET,
        description="The email of the author (or committer) of the commit",
    )
    date: Missing[datetime] = Field(
        default=UNSET,
        description="Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
    )


model_rebuild(ReposOwnerRepoGitCommitsPostBody)
model_rebuild(ReposOwnerRepoGitCommitsPostBodyPropAuthor)
model_rebuild(ReposOwnerRepoGitCommitsPostBodyPropCommitter)

__all__ = (
    "ReposOwnerRepoGitCommitsPostBody",
    "ReposOwnerRepoGitCommitsPostBodyPropAuthor",
    "ReposOwnerRepoGitCommitsPostBodyPropCommitter",
)
