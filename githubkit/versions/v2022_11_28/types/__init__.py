"""DO NOT EDIT THIS FILE!

This file is automatically @generated by githubkit using the follow command:

python -m codegen && isort . && black .

See https://github.com/github/rest-api-description for more information.
"""


from __future__ import annotations

from datetime import date, datetime
from typing import Any, List, Union, Literal
from typing_extensions import TypedDict, NotRequired


class RootType(TypedDict):
    """Root"""

    current_user_url: str
    current_user_authorizations_html_url: str
    authorizations_url: str
    code_search_url: str
    commit_search_url: str
    emails_url: str
    emojis_url: str
    events_url: str
    feeds_url: str
    followers_url: str
    following_url: str
    gists_url: str
    hub_url: str
    issue_search_url: str
    issues_url: str
    keys_url: str
    label_search_url: str
    notifications_url: str
    organization_url: str
    organization_repositories_url: str
    organization_teams_url: str
    public_gists_url: str
    rate_limit_url: str
    repository_url: str
    repository_search_url: str
    current_user_repositories_url: str
    starred_url: str
    starred_gists_url: str
    topic_search_url: NotRequired[str]
    user_url: str
    user_organizations_url: str
    user_repositories_url: str
    user_search_url: str


class SimpleUserType(TypedDict):
    """Simple User

    A GitHub user.
    """

    name: NotRequired[Union[str, None]]
    email: NotRequired[Union[str, None]]
    login: str
    id: int
    node_id: str
    avatar_url: str
    gravatar_id: Union[str, None]
    url: str
    html_url: str
    followers_url: str
    following_url: str
    gists_url: str
    starred_url: str
    subscriptions_url: str
    organizations_url: str
    repos_url: str
    events_url: str
    received_events_url: str
    type: str
    site_admin: bool
    starred_at: NotRequired[str]


class GlobalAdvisoryType(TypedDict):
    """GlobalAdvisory

    A GitHub Security Advisory.
    """

    ghsa_id: str
    cve_id: Union[str, None]
    url: str
    html_url: str
    repository_advisory_url: Union[str, None]
    summary: str
    description: Union[str, None]
    type: Literal["reviewed", "unreviewed", "malware"]
    severity: Literal["critical", "high", "medium", "low", "unknown"]
    source_code_location: Union[str, None]
    identifiers: Union[List[GlobalAdvisoryPropIdentifiersItemsType], None]
    references: Union[List[str], None]
    published_at: datetime
    updated_at: datetime
    github_reviewed_at: Union[datetime, None]
    nvd_published_at: Union[datetime, None]
    withdrawn_at: Union[datetime, None]
    vulnerabilities: Union[List[GlobalAdvisoryPropVulnerabilitiesItemsType], None]
    cvss: Union[GlobalAdvisoryPropCvssType, None]
    cwes: Union[List[GlobalAdvisoryPropCwesItemsType], None]
    credits_: Union[List[GlobalAdvisoryPropCreditsItemsType], None]


class GlobalAdvisoryPropIdentifiersItemsType(TypedDict):
    """GlobalAdvisoryPropIdentifiersItems"""

    type: Literal["CVE", "GHSA"]
    value: str


class GlobalAdvisoryPropVulnerabilitiesItemsType(TypedDict):
    """GlobalAdvisoryPropVulnerabilitiesItems"""

    package: Union[GlobalAdvisoryPropVulnerabilitiesItemsPropPackageType, None]
    vulnerable_version_range: Union[str, None]
    first_patched_version: Union[str, None]
    vulnerable_functions: Union[List[str], None]


class GlobalAdvisoryPropVulnerabilitiesItemsPropPackageType(TypedDict):
    """GlobalAdvisoryPropVulnerabilitiesItemsPropPackage

    The name of the package affected by the vulnerability.
    """

    ecosystem: Literal[
        "rubygems",
        "npm",
        "pip",
        "maven",
        "nuget",
        "composer",
        "go",
        "rust",
        "erlang",
        "actions",
        "pub",
        "other",
        "swift",
    ]
    name: Union[str, None]


class GlobalAdvisoryPropCvssType(TypedDict):
    """GlobalAdvisoryPropCvss"""

    vector_string: Union[str, None]
    score: Union[float, None]


class GlobalAdvisoryPropCwesItemsType(TypedDict):
    """GlobalAdvisoryPropCwesItems"""

    cwe_id: str
    name: str


class GlobalAdvisoryPropCreditsItemsType(TypedDict):
    """GlobalAdvisoryPropCreditsItems"""

    user: SimpleUserType
    type: Literal[
        "analyst",
        "finder",
        "reporter",
        "coordinator",
        "remediation_developer",
        "remediation_reviewer",
        "remediation_verifier",
        "tool",
        "sponsor",
        "other",
    ]


class BasicErrorType(TypedDict):
    """Basic Error

    Basic Error
    """

    message: NotRequired[str]
    documentation_url: NotRequired[str]
    url: NotRequired[str]
    status: NotRequired[str]


class ValidationErrorSimpleType(TypedDict):
    """Validation Error Simple

    Validation Error Simple
    """

    message: str
    documentation_url: str
    errors: NotRequired[List[str]]


class IntegrationType(TypedDict):
    """GitHub app

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    id: int
    slug: NotRequired[str]
    node_id: str
    owner: Union[None, SimpleUserType]
    name: str
    description: Union[str, None]
    external_url: str
    html_url: str
    created_at: datetime
    updated_at: datetime
    permissions: IntegrationPropPermissionsType
    events: List[str]
    installations_count: NotRequired[int]
    client_id: NotRequired[str]
    client_secret: NotRequired[str]
    webhook_secret: NotRequired[Union[str, None]]
    pem: NotRequired[str]


class IntegrationPropPermissionsType(TypedDict):
    """IntegrationPropPermissions

    The set of permissions for the GitHub app

    Examples:
        {'issues': 'read', 'deployments': 'write'}
    """

    issues: NotRequired[str]
    checks: NotRequired[str]
    metadata: NotRequired[str]
    contents: NotRequired[str]
    deployments: NotRequired[str]


class WebhookConfigType(TypedDict):
    """Webhook Configuration

    Configuration object of the webhook
    """

    url: NotRequired[str]
    content_type: NotRequired[str]
    secret: NotRequired[str]
    insecure_ssl: NotRequired[Union[str, float]]


class HookDeliveryItemType(TypedDict):
    """Simple webhook delivery

    Delivery made by a webhook, without request and response information.
    """

    id: int
    guid: str
    delivered_at: datetime
    redelivery: bool
    duration: float
    status: str
    status_code: int
    event: str
    action: Union[str, None]
    installation_id: Union[int, None]
    repository_id: Union[int, None]


class ScimErrorType(TypedDict):
    """Scim Error

    Scim Error
    """

    message: NotRequired[Union[str, None]]
    documentation_url: NotRequired[Union[str, None]]
    detail: NotRequired[Union[str, None]]
    status: NotRequired[int]
    scim_type: NotRequired[Union[str, None]]
    schemas: NotRequired[List[str]]


class ValidationErrorType(TypedDict):
    """Validation Error

    Validation Error
    """

    message: str
    documentation_url: str
    errors: NotRequired[List[ValidationErrorPropErrorsItemsType]]


class ValidationErrorPropErrorsItemsType(TypedDict):
    """ValidationErrorPropErrorsItems"""

    resource: NotRequired[str]
    field: NotRequired[str]
    message: NotRequired[str]
    code: str
    index: NotRequired[int]
    value: NotRequired[Union[str, None, int, None, List[str], None]]


class HookDeliveryType(TypedDict):
    """Webhook delivery

    Delivery made by a webhook.
    """

    id: int
    guid: str
    delivered_at: datetime
    redelivery: bool
    duration: float
    status: str
    status_code: int
    event: str
    action: Union[str, None]
    installation_id: Union[int, None]
    repository_id: Union[int, None]
    url: NotRequired[str]
    request: HookDeliveryPropRequestType
    response: HookDeliveryPropResponseType


class HookDeliveryPropRequestType(TypedDict):
    """HookDeliveryPropRequest"""

    headers: Union[HookDeliveryPropRequestPropHeadersType, None]
    payload: Union[HookDeliveryPropRequestPropPayloadType, None]


class HookDeliveryPropRequestPropHeadersType(TypedDict):
    """HookDeliveryPropRequestPropHeaders

    The request headers sent with the webhook delivery.
    """


class HookDeliveryPropRequestPropPayloadType(TypedDict):
    """HookDeliveryPropRequestPropPayload

    The webhook payload.
    """


class HookDeliveryPropResponseType(TypedDict):
    """HookDeliveryPropResponse"""

    headers: Union[HookDeliveryPropResponsePropHeadersType, None]
    payload: Union[str, None]


class HookDeliveryPropResponsePropHeadersType(TypedDict):
    """HookDeliveryPropResponsePropHeaders

    The response headers received when the delivery was made.
    """


class EnterpriseType(TypedDict):
    """Enterprise

    An enterprise on GitHub.
    """

    description: NotRequired[Union[str, None]]
    html_url: str
    website_url: NotRequired[Union[str, None]]
    id: int
    node_id: str
    name: str
    slug: str
    created_at: Union[datetime, None]
    updated_at: Union[datetime, None]
    avatar_url: str


class IntegrationInstallationRequestType(TypedDict):
    """Integration Installation Request

    Request to install an integration on a target
    """

    id: int
    node_id: NotRequired[str]
    account: Union[SimpleUserType, EnterpriseType]
    requester: SimpleUserType
    created_at: datetime


class AppPermissionsType(TypedDict):
    """App Permissions

    The permissions granted to the user access token.

    Examples:
        {'contents': 'read', 'issues': 'read', 'deployments': 'write', 'single_file':
    'read'}
    """

    actions: NotRequired[Literal["read", "write"]]
    administration: NotRequired[Literal["read", "write"]]
    checks: NotRequired[Literal["read", "write"]]
    codespaces: NotRequired[Literal["read", "write"]]
    contents: NotRequired[Literal["read", "write"]]
    dependabot_secrets: NotRequired[Literal["read", "write"]]
    deployments: NotRequired[Literal["read", "write"]]
    environments: NotRequired[Literal["read", "write"]]
    issues: NotRequired[Literal["read", "write"]]
    metadata: NotRequired[Literal["read", "write"]]
    packages: NotRequired[Literal["read", "write"]]
    pages: NotRequired[Literal["read", "write"]]
    pull_requests: NotRequired[Literal["read", "write"]]
    repository_custom_properties: NotRequired[Literal["read", "write"]]
    repository_hooks: NotRequired[Literal["read", "write"]]
    repository_projects: NotRequired[Literal["read", "write", "admin"]]
    secret_scanning_alerts: NotRequired[Literal["read", "write"]]
    secrets: NotRequired[Literal["read", "write"]]
    security_events: NotRequired[Literal["read", "write"]]
    single_file: NotRequired[Literal["read", "write"]]
    statuses: NotRequired[Literal["read", "write"]]
    vulnerability_alerts: NotRequired[Literal["read", "write"]]
    workflows: NotRequired[Literal["write"]]
    members: NotRequired[Literal["read", "write"]]
    organization_administration: NotRequired[Literal["read", "write"]]
    organization_custom_roles: NotRequired[Literal["read", "write"]]
    organization_custom_org_roles: NotRequired[Literal["read", "write"]]
    organization_custom_properties: NotRequired[Literal["read", "write", "admin"]]
    organization_copilot_seat_management: NotRequired[Literal["write"]]
    organization_announcement_banners: NotRequired[Literal["read", "write"]]
    organization_events: NotRequired[Literal["read"]]
    organization_hooks: NotRequired[Literal["read", "write"]]
    organization_personal_access_tokens: NotRequired[Literal["read", "write"]]
    organization_personal_access_token_requests: NotRequired[Literal["read", "write"]]
    organization_plan: NotRequired[Literal["read"]]
    organization_projects: NotRequired[Literal["read", "write", "admin"]]
    organization_packages: NotRequired[Literal["read", "write"]]
    organization_secrets: NotRequired[Literal["read", "write"]]
    organization_self_hosted_runners: NotRequired[Literal["read", "write"]]
    organization_user_blocking: NotRequired[Literal["read", "write"]]
    team_discussions: NotRequired[Literal["read", "write"]]
    email_addresses: NotRequired[Literal["read", "write"]]
    followers: NotRequired[Literal["read", "write"]]
    git_ssh_keys: NotRequired[Literal["read", "write"]]
    gpg_keys: NotRequired[Literal["read", "write"]]
    interaction_limits: NotRequired[Literal["read", "write"]]
    profile: NotRequired[Literal["write"]]
    starring: NotRequired[Literal["read", "write"]]


class InstallationType(TypedDict):
    """Installation

    Installation
    """

    id: int
    account: Union[SimpleUserType, EnterpriseType, None]
    repository_selection: Literal["all", "selected"]
    access_tokens_url: str
    repositories_url: str
    html_url: str
    app_id: int
    target_id: int
    target_type: str
    permissions: AppPermissionsType
    events: List[str]
    created_at: datetime
    updated_at: datetime
    single_file_name: Union[str, None]
    has_multiple_single_files: NotRequired[bool]
    single_file_paths: NotRequired[List[str]]
    app_slug: str
    suspended_by: Union[None, SimpleUserType]
    suspended_at: Union[datetime, None]
    contact_email: NotRequired[Union[str, None]]


class LicenseSimpleType(TypedDict):
    """License Simple

    License Simple
    """

    key: str
    name: str
    url: Union[str, None]
    spdx_id: Union[str, None]
    node_id: str
    html_url: NotRequired[str]


class RepositoryType(TypedDict):
    """Repository

    A repository on GitHub.
    """

    id: int
    node_id: str
    name: str
    full_name: str
    license_: Union[None, LicenseSimpleType]
    organization: NotRequired[Union[None, SimpleUserType]]
    forks: int
    permissions: NotRequired[RepositoryPropPermissionsType]
    owner: SimpleUserType
    private: bool
    html_url: str
    description: Union[str, None]
    fork: bool
    url: str
    archive_url: str
    assignees_url: str
    blobs_url: str
    branches_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    deployments_url: str
    downloads_url: str
    events_url: str
    forks_url: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    languages_url: str
    merges_url: str
    milestones_url: str
    notifications_url: str
    pulls_url: str
    releases_url: str
    ssh_url: str
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    tags_url: str
    teams_url: str
    trees_url: str
    clone_url: str
    mirror_url: Union[str, None]
    hooks_url: str
    svn_url: str
    homepage: Union[str, None]
    language: Union[str, None]
    forks_count: int
    stargazers_count: int
    watchers_count: int
    size: int
    default_branch: str
    open_issues_count: int
    is_template: NotRequired[bool]
    topics: NotRequired[List[str]]
    has_issues: bool
    has_projects: bool
    has_wiki: bool
    has_pages: bool
    has_downloads: bool
    has_discussions: NotRequired[bool]
    archived: bool
    disabled: bool
    visibility: NotRequired[str]
    pushed_at: Union[datetime, None]
    created_at: Union[datetime, None]
    updated_at: Union[datetime, None]
    allow_rebase_merge: NotRequired[bool]
    template_repository: NotRequired[Union[RepositoryPropTemplateRepositoryType, None]]
    temp_clone_token: NotRequired[Union[str, None]]
    allow_squash_merge: NotRequired[bool]
    allow_auto_merge: NotRequired[bool]
    delete_branch_on_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    use_squash_pr_title_as_default: NotRequired[bool]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    allow_merge_commit: NotRequired[bool]
    allow_forking: NotRequired[bool]
    web_commit_signoff_required: NotRequired[bool]
    subscribers_count: NotRequired[int]
    network_count: NotRequired[int]
    open_issues: int
    watchers: int
    master_branch: NotRequired[str]
    starred_at: NotRequired[str]
    anonymous_access_enabled: NotRequired[bool]


class RepositoryPropPermissionsType(TypedDict):
    """RepositoryPropPermissions"""

    admin: bool
    pull: bool
    triage: NotRequired[bool]
    push: bool
    maintain: NotRequired[bool]


class RepositoryPropTemplateRepositoryPropOwnerType(TypedDict):
    """RepositoryPropTemplateRepositoryPropOwner"""

    login: NotRequired[str]
    id: NotRequired[int]
    node_id: NotRequired[str]
    avatar_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    url: NotRequired[str]
    html_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    organizations_url: NotRequired[str]
    repos_url: NotRequired[str]
    events_url: NotRequired[str]
    received_events_url: NotRequired[str]
    type: NotRequired[str]
    site_admin: NotRequired[bool]


class RepositoryPropTemplateRepositoryPropPermissionsType(TypedDict):
    """RepositoryPropTemplateRepositoryPropPermissions"""

    admin: NotRequired[bool]
    maintain: NotRequired[bool]
    push: NotRequired[bool]
    triage: NotRequired[bool]
    pull: NotRequired[bool]


class RepositoryPropTemplateRepositoryType(TypedDict):
    """RepositoryPropTemplateRepository"""

    id: NotRequired[int]
    node_id: NotRequired[str]
    name: NotRequired[str]
    full_name: NotRequired[str]
    owner: NotRequired[RepositoryPropTemplateRepositoryPropOwnerType]
    private: NotRequired[bool]
    html_url: NotRequired[str]
    description: NotRequired[str]
    fork: NotRequired[bool]
    url: NotRequired[str]
    archive_url: NotRequired[str]
    assignees_url: NotRequired[str]
    blobs_url: NotRequired[str]
    branches_url: NotRequired[str]
    collaborators_url: NotRequired[str]
    comments_url: NotRequired[str]
    commits_url: NotRequired[str]
    compare_url: NotRequired[str]
    contents_url: NotRequired[str]
    contributors_url: NotRequired[str]
    deployments_url: NotRequired[str]
    downloads_url: NotRequired[str]
    events_url: NotRequired[str]
    forks_url: NotRequired[str]
    git_commits_url: NotRequired[str]
    git_refs_url: NotRequired[str]
    git_tags_url: NotRequired[str]
    git_url: NotRequired[str]
    issue_comment_url: NotRequired[str]
    issue_events_url: NotRequired[str]
    issues_url: NotRequired[str]
    keys_url: NotRequired[str]
    labels_url: NotRequired[str]
    languages_url: NotRequired[str]
    merges_url: NotRequired[str]
    milestones_url: NotRequired[str]
    notifications_url: NotRequired[str]
    pulls_url: NotRequired[str]
    releases_url: NotRequired[str]
    ssh_url: NotRequired[str]
    stargazers_url: NotRequired[str]
    statuses_url: NotRequired[str]
    subscribers_url: NotRequired[str]
    subscription_url: NotRequired[str]
    tags_url: NotRequired[str]
    teams_url: NotRequired[str]
    trees_url: NotRequired[str]
    clone_url: NotRequired[str]
    mirror_url: NotRequired[str]
    hooks_url: NotRequired[str]
    svn_url: NotRequired[str]
    homepage: NotRequired[str]
    language: NotRequired[str]
    forks_count: NotRequired[int]
    stargazers_count: NotRequired[int]
    watchers_count: NotRequired[int]
    size: NotRequired[int]
    default_branch: NotRequired[str]
    open_issues_count: NotRequired[int]
    is_template: NotRequired[bool]
    topics: NotRequired[List[str]]
    has_issues: NotRequired[bool]
    has_projects: NotRequired[bool]
    has_wiki: NotRequired[bool]
    has_pages: NotRequired[bool]
    has_downloads: NotRequired[bool]
    archived: NotRequired[bool]
    disabled: NotRequired[bool]
    visibility: NotRequired[str]
    pushed_at: NotRequired[str]
    created_at: NotRequired[str]
    updated_at: NotRequired[str]
    permissions: NotRequired[RepositoryPropTemplateRepositoryPropPermissionsType]
    allow_rebase_merge: NotRequired[bool]
    temp_clone_token: NotRequired[Union[str, None]]
    allow_squash_merge: NotRequired[bool]
    allow_auto_merge: NotRequired[bool]
    delete_branch_on_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    use_squash_pr_title_as_default: NotRequired[bool]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    allow_merge_commit: NotRequired[bool]
    subscribers_count: NotRequired[int]
    network_count: NotRequired[int]


class InstallationTokenType(TypedDict):
    """Installation Token

    Authentication token for a GitHub App installed on a user or org.
    """

    token: str
    expires_at: str
    permissions: NotRequired[AppPermissionsType]
    repository_selection: NotRequired[Literal["all", "selected"]]
    repositories: NotRequired[List[RepositoryType]]
    single_file: NotRequired[str]
    has_multiple_single_files: NotRequired[bool]
    single_file_paths: NotRequired[List[str]]


class ScopedInstallationType(TypedDict):
    """Scoped Installation"""

    permissions: AppPermissionsType
    repository_selection: Literal["all", "selected"]
    single_file_name: Union[str, None]
    has_multiple_single_files: NotRequired[bool]
    single_file_paths: NotRequired[List[str]]
    repositories_url: str
    account: SimpleUserType


class AuthorizationType(TypedDict):
    """Authorization

    The authorization for an OAuth app, GitHub App, or a Personal Access Token.
    """

    id: int
    url: str
    scopes: Union[List[str], None]
    token: str
    token_last_eight: Union[str, None]
    hashed_token: Union[str, None]
    app: AuthorizationPropAppType
    note: Union[str, None]
    note_url: Union[str, None]
    updated_at: datetime
    created_at: datetime
    fingerprint: Union[str, None]
    user: NotRequired[Union[None, SimpleUserType]]
    installation: NotRequired[Union[None, ScopedInstallationType]]
    expires_at: Union[datetime, None]


class AuthorizationPropAppType(TypedDict):
    """AuthorizationPropApp"""

    client_id: str
    name: str
    url: str


class SimpleClassroomRepositoryType(TypedDict):
    """Simple Classroom Repository

    A GitHub repository view for Classroom
    """

    id: int
    full_name: str
    html_url: str
    node_id: str
    private: bool
    default_branch: str


class SimpleClassroomOrganizationType(TypedDict):
    """Organization Simple for Classroom

    A GitHub organization.
    """

    id: int
    login: str
    node_id: str
    html_url: str
    name: Union[str, None]
    avatar_url: str


class ClassroomType(TypedDict):
    """Classroom

    A GitHub Classroom classroom
    """

    id: int
    name: str
    archived: bool
    organization: SimpleClassroomOrganizationType
    url: str


class ClassroomAssignmentType(TypedDict):
    """Classroom Assignment

    A GitHub Classroom assignment
    """

    id: int
    public_repo: bool
    title: str
    type: Literal["individual", "group"]
    invite_link: str
    invitations_enabled: bool
    slug: str
    students_are_repo_admins: bool
    feedback_pull_requests_enabled: bool
    max_teams: Union[int, None]
    max_members: Union[int, None]
    editor: str
    accepted: int
    submitted: int
    passing: int
    language: str
    deadline: Union[datetime, None]
    starter_code_repository: SimpleClassroomRepositoryType
    classroom: ClassroomType


class SimpleClassroomUserType(TypedDict):
    """Simple Classroom User

    A GitHub user simplified for Classroom.
    """

    id: int
    login: str
    avatar_url: str
    html_url: str


class SimpleClassroomType(TypedDict):
    """Simple Classroom

    A GitHub Classroom classroom
    """

    id: int
    name: str
    archived: bool
    url: str


class SimpleClassroomAssignmentType(TypedDict):
    """Simple Classroom Assignment

    A GitHub Classroom assignment
    """

    id: int
    public_repo: bool
    title: str
    type: Literal["individual", "group"]
    invite_link: str
    invitations_enabled: bool
    slug: str
    students_are_repo_admins: bool
    feedback_pull_requests_enabled: bool
    max_teams: NotRequired[Union[int, None]]
    max_members: NotRequired[Union[int, None]]
    editor: str
    accepted: int
    submitted: int
    passing: int
    language: str
    deadline: Union[datetime, None]
    classroom: SimpleClassroomType


class ClassroomAcceptedAssignmentType(TypedDict):
    """Classroom Accepted Assignment

    A GitHub Classroom accepted assignment
    """

    id: int
    submitted: bool
    passing: bool
    commit_count: int
    grade: str
    students: List[SimpleClassroomUserType]
    repository: SimpleClassroomRepositoryType
    assignment: SimpleClassroomAssignmentType


class ClassroomAssignmentGradeType(TypedDict):
    """Classroom Assignment Grade

    Grade for a student or groups GitHub Classroom assignment
    """

    assignment_name: str
    assignment_url: str
    starter_code_url: str
    github_username: str
    roster_identifier: str
    student_repository_name: str
    student_repository_url: str
    submission_timestamp: str
    points_awarded: int
    points_available: int
    group_name: NotRequired[str]


class CodeOfConductType(TypedDict):
    """Code Of Conduct

    Code Of Conduct
    """

    key: str
    name: str
    url: str
    body: NotRequired[str]
    html_url: Union[str, None]


class DependabotAlertPackageType(TypedDict):
    """DependabotAlertPackage

    Details for the vulnerable package.
    """

    ecosystem: str
    name: str


class DependabotAlertSecurityVulnerabilityType(TypedDict):
    """DependabotAlertSecurityVulnerability

    Details pertaining to one vulnerable version range for the advisory.
    """

    package: DependabotAlertPackageType
    severity: Literal["low", "medium", "high", "critical"]
    vulnerable_version_range: str
    first_patched_version: Union[
        DependabotAlertSecurityVulnerabilityPropFirstPatchedVersionType, None
    ]


class DependabotAlertSecurityVulnerabilityPropFirstPatchedVersionType(TypedDict):
    """DependabotAlertSecurityVulnerabilityPropFirstPatchedVersion

    Details pertaining to the package version that patches this vulnerability.
    """

    identifier: str


class DependabotAlertSecurityAdvisoryType(TypedDict):
    """DependabotAlertSecurityAdvisory

    Details for the GitHub Security Advisory.
    """

    ghsa_id: str
    cve_id: Union[str, None]
    summary: str
    description: str
    vulnerabilities: List[DependabotAlertSecurityVulnerabilityType]
    severity: Literal["low", "medium", "high", "critical"]
    cvss: DependabotAlertSecurityAdvisoryPropCvssType
    cwes: List[DependabotAlertSecurityAdvisoryPropCwesItemsType]
    identifiers: List[DependabotAlertSecurityAdvisoryPropIdentifiersItemsType]
    references: List[DependabotAlertSecurityAdvisoryPropReferencesItemsType]
    published_at: datetime
    updated_at: datetime
    withdrawn_at: Union[datetime, None]


class DependabotAlertSecurityAdvisoryPropCvssType(TypedDict):
    """DependabotAlertSecurityAdvisoryPropCvss

    Details for the advisory pertaining to the Common Vulnerability Scoring System.
    """

    score: float
    vector_string: Union[str, None]


class DependabotAlertSecurityAdvisoryPropCwesItemsType(TypedDict):
    """DependabotAlertSecurityAdvisoryPropCwesItems

    A CWE weakness assigned to the advisory.
    """

    cwe_id: str
    name: str


class DependabotAlertSecurityAdvisoryPropIdentifiersItemsType(TypedDict):
    """DependabotAlertSecurityAdvisoryPropIdentifiersItems

    An advisory identifier.
    """

    type: Literal["CVE", "GHSA"]
    value: str


class DependabotAlertSecurityAdvisoryPropReferencesItemsType(TypedDict):
    """DependabotAlertSecurityAdvisoryPropReferencesItems

    A link to additional advisory information.
    """

    url: str


class SimpleRepositoryType(TypedDict):
    """Simple Repository

    A GitHub repository.
    """

    id: int
    node_id: str
    name: str
    full_name: str
    owner: SimpleUserType
    private: bool
    html_url: str
    description: Union[str, None]
    fork: bool
    url: str
    archive_url: str
    assignees_url: str
    blobs_url: str
    branches_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    deployments_url: str
    downloads_url: str
    events_url: str
    forks_url: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    languages_url: str
    merges_url: str
    milestones_url: str
    notifications_url: str
    pulls_url: str
    releases_url: str
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    tags_url: str
    teams_url: str
    trees_url: str
    hooks_url: str


class DependabotAlertWithRepositoryType(TypedDict):
    """DependabotAlertWithRepository

    A Dependabot alert.
    """

    number: int
    state: Literal["auto_dismissed", "dismissed", "fixed", "open"]
    dependency: DependabotAlertWithRepositoryPropDependencyType
    security_advisory: DependabotAlertSecurityAdvisoryType
    security_vulnerability: DependabotAlertSecurityVulnerabilityType
    url: str
    html_url: str
    created_at: datetime
    updated_at: datetime
    dismissed_at: Union[datetime, None]
    dismissed_by: Union[None, SimpleUserType]
    dismissed_reason: Union[
        None,
        Literal[
            "fix_started", "inaccurate", "no_bandwidth", "not_used", "tolerable_risk"
        ],
    ]
    dismissed_comment: Union[str, None]
    fixed_at: Union[datetime, None]
    auto_dismissed_at: NotRequired[Union[datetime, None]]
    repository: SimpleRepositoryType


class DependabotAlertWithRepositoryPropDependencyType(TypedDict):
    """DependabotAlertWithRepositoryPropDependency

    Details for the vulnerable dependency.
    """

    package: NotRequired[DependabotAlertPackageType]
    manifest_path: NotRequired[str]
    scope: NotRequired[Union[None, Literal["development", "runtime"]]]


class OrganizationSecretScanningAlertType(TypedDict):
    """OrganizationSecretScanningAlert"""

    number: NotRequired[int]
    created_at: NotRequired[datetime]
    updated_at: NotRequired[Union[None, datetime]]
    url: NotRequired[str]
    html_url: NotRequired[str]
    locations_url: NotRequired[str]
    state: NotRequired[Literal["open", "resolved"]]
    resolution: NotRequired[
        Union[None, Literal["false_positive", "wont_fix", "revoked", "used_in_tests"]]
    ]
    resolved_at: NotRequired[Union[datetime, None]]
    resolved_by: NotRequired[Union[None, SimpleUserType]]
    secret_type: NotRequired[str]
    secret_type_display_name: NotRequired[str]
    secret: NotRequired[str]
    repository: NotRequired[SimpleRepositoryType]
    push_protection_bypassed: NotRequired[Union[bool, None]]
    push_protection_bypassed_by: NotRequired[Union[None, SimpleUserType]]
    push_protection_bypassed_at: NotRequired[Union[datetime, None]]
    resolution_comment: NotRequired[Union[str, None]]
    validity: NotRequired[Literal["active", "inactive", "unknown"]]


class ActorType(TypedDict):
    """Actor

    Actor
    """

    id: int
    login: str
    display_login: NotRequired[str]
    gravatar_id: Union[str, None]
    url: str
    avatar_url: str


class MilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    url: str
    html_url: str
    labels_url: str
    id: int
    node_id: str
    number: int
    state: Literal["open", "closed"]
    title: str
    description: Union[str, None]
    creator: Union[None, SimpleUserType]
    open_issues: int
    closed_issues: int
    created_at: datetime
    updated_at: datetime
    closed_at: Union[datetime, None]
    due_on: Union[datetime, None]


class ReactionRollupType(TypedDict):
    """Reaction Rollup"""

    url: str
    total_count: int
    plus_one: int
    minus_one: int
    laugh: int
    confused: int
    heart: int
    hooray: int
    eyes: int
    rocket: int


class IssueType(TypedDict):
    """Issue

    Issues are a great way to keep track of tasks, enhancements, and bugs for your
    projects.
    """

    id: int
    node_id: str
    url: str
    repository_url: str
    labels_url: str
    comments_url: str
    events_url: str
    html_url: str
    number: int
    state: str
    state_reason: NotRequired[
        Union[None, Literal["completed", "reopened", "not_planned"]]
    ]
    title: str
    body: NotRequired[Union[str, None]]
    user: Union[None, SimpleUserType]
    labels: List[Union[str, IssuePropLabelsItemsOneof1Type]]
    assignee: Union[None, SimpleUserType]
    assignees: NotRequired[Union[List[SimpleUserType], None]]
    milestone: Union[None, MilestoneType]
    locked: bool
    active_lock_reason: NotRequired[Union[str, None]]
    comments: int
    pull_request: NotRequired[IssuePropPullRequestType]
    closed_at: Union[datetime, None]
    created_at: datetime
    updated_at: datetime
    draft: NotRequired[bool]
    closed_by: NotRequired[Union[None, SimpleUserType]]
    body_html: NotRequired[Union[str, None]]
    body_text: NotRequired[Union[str, None]]
    timeline_url: NotRequired[str]
    repository: NotRequired[RepositoryType]
    performed_via_github_app: NotRequired[Union[None, IntegrationType]]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    reactions: NotRequired[ReactionRollupType]


class IssuePropLabelsItemsOneof1Type(TypedDict):
    """IssuePropLabelsItemsOneof1"""

    id: NotRequired[int]
    node_id: NotRequired[str]
    url: NotRequired[str]
    name: NotRequired[str]
    description: NotRequired[Union[str, None]]
    color: NotRequired[Union[str, None]]
    default: NotRequired[bool]


class IssuePropPullRequestType(TypedDict):
    """IssuePropPullRequest"""

    merged_at: NotRequired[Union[datetime, None]]
    diff_url: Union[str, None]
    html_url: Union[str, None]
    patch_url: Union[str, None]
    url: Union[str, None]


class IssueCommentType(TypedDict):
    """Issue Comment

    Comments provide a way for people to collaborate on an issue.
    """

    id: int
    node_id: str
    url: str
    body: NotRequired[str]
    body_text: NotRequired[str]
    body_html: NotRequired[str]
    html_url: str
    user: Union[None, SimpleUserType]
    created_at: datetime
    updated_at: datetime
    issue_url: str
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    performed_via_github_app: NotRequired[Union[None, IntegrationType]]
    reactions: NotRequired[ReactionRollupType]


class EventType(TypedDict):
    """Event

    Event
    """

    id: str
    type: Union[str, None]
    actor: ActorType
    repo: EventPropRepoType
    org: NotRequired[ActorType]
    payload: EventPropPayloadType
    public: bool
    created_at: Union[datetime, None]


class EventPropRepoType(TypedDict):
    """EventPropRepo"""

    id: int
    name: str
    url: str


class EventPropPayloadType(TypedDict):
    """EventPropPayload"""

    action: NotRequired[str]
    issue: NotRequired[IssueType]
    comment: NotRequired[IssueCommentType]
    pages: NotRequired[List[EventPropPayloadPropPagesItemsType]]


class EventPropPayloadPropPagesItemsType(TypedDict):
    """EventPropPayloadPropPagesItems"""

    page_name: NotRequired[str]
    title: NotRequired[str]
    summary: NotRequired[Union[str, None]]
    action: NotRequired[str]
    sha: NotRequired[str]
    html_url: NotRequired[str]


class LinkWithTypeType(TypedDict):
    """Link With Type

    Hypermedia Link with Type
    """

    href: str
    type: str


class FeedType(TypedDict):
    """Feed

    Feed
    """

    timeline_url: str
    user_url: str
    current_user_public_url: NotRequired[str]
    current_user_url: NotRequired[str]
    current_user_actor_url: NotRequired[str]
    current_user_organization_url: NotRequired[str]
    current_user_organization_urls: NotRequired[List[str]]
    security_advisories_url: NotRequired[str]
    repository_discussions_url: NotRequired[str]
    repository_discussions_category_url: NotRequired[str]
    links: FeedPropLinksType


class FeedPropLinksType(TypedDict):
    """FeedPropLinks"""

    timeline: LinkWithTypeType
    user: LinkWithTypeType
    security_advisories: NotRequired[LinkWithTypeType]
    current_user: NotRequired[LinkWithTypeType]
    current_user_public: NotRequired[LinkWithTypeType]
    current_user_actor: NotRequired[LinkWithTypeType]
    current_user_organization: NotRequired[LinkWithTypeType]
    current_user_organizations: NotRequired[List[LinkWithTypeType]]
    repository_discussions: NotRequired[LinkWithTypeType]
    repository_discussions_category: NotRequired[LinkWithTypeType]


class BaseGistType(TypedDict):
    """Base Gist

    Base Gist
    """

    url: str
    forks_url: str
    commits_url: str
    id: str
    node_id: str
    git_pull_url: str
    git_push_url: str
    html_url: str
    files: BaseGistPropFilesType
    public: bool
    created_at: datetime
    updated_at: datetime
    description: Union[str, None]
    comments: int
    user: Union[None, SimpleUserType]
    comments_url: str
    owner: NotRequired[SimpleUserType]
    truncated: NotRequired[bool]
    forks: NotRequired[List[Any]]
    history: NotRequired[List[Any]]


class BaseGistPropFilesType(TypedDict):
    """BaseGistPropFiles"""


class PublicUserType(TypedDict):
    """Public User

    Public User
    """

    login: str
    id: int
    node_id: str
    avatar_url: str
    gravatar_id: Union[str, None]
    url: str
    html_url: str
    followers_url: str
    following_url: str
    gists_url: str
    starred_url: str
    subscriptions_url: str
    organizations_url: str
    repos_url: str
    events_url: str
    received_events_url: str
    type: str
    site_admin: bool
    name: Union[str, None]
    company: Union[str, None]
    blog: Union[str, None]
    location: Union[str, None]
    email: Union[str, None]
    hireable: Union[bool, None]
    bio: Union[str, None]
    twitter_username: NotRequired[Union[str, None]]
    public_repos: int
    public_gists: int
    followers: int
    following: int
    created_at: datetime
    updated_at: datetime
    plan: NotRequired[PublicUserPropPlanType]
    suspended_at: NotRequired[Union[datetime, None]]
    private_gists: NotRequired[int]
    total_private_repos: NotRequired[int]
    owned_private_repos: NotRequired[int]
    disk_usage: NotRequired[int]
    collaborators: NotRequired[int]


class PublicUserPropPlanType(TypedDict):
    """PublicUserPropPlan"""

    collaborators: int
    name: str
    space: int
    private_repos: int


class GistHistoryType(TypedDict):
    """Gist History

    Gist History
    """

    user: NotRequired[Union[None, SimpleUserType]]
    version: NotRequired[str]
    committed_at: NotRequired[datetime]
    change_status: NotRequired[GistHistoryPropChangeStatusType]
    url: NotRequired[str]


class GistHistoryPropChangeStatusType(TypedDict):
    """GistHistoryPropChangeStatus"""

    total: NotRequired[int]
    additions: NotRequired[int]
    deletions: NotRequired[int]


class GistSimpleType(TypedDict):
    """Gist Simple

    Gist Simple
    """

    forks: NotRequired[Union[List[GistSimplePropForksItemsType], None]]
    history: NotRequired[Union[List[GistHistoryType], None]]
    fork_of: NotRequired[Union[GistSimplePropForkOfType, None]]
    url: NotRequired[str]
    forks_url: NotRequired[str]
    commits_url: NotRequired[str]
    id: NotRequired[str]
    node_id: NotRequired[str]
    git_pull_url: NotRequired[str]
    git_push_url: NotRequired[str]
    html_url: NotRequired[str]
    files: NotRequired[GistSimplePropFilesType]
    public: NotRequired[bool]
    created_at: NotRequired[str]
    updated_at: NotRequired[str]
    description: NotRequired[Union[str, None]]
    comments: NotRequired[int]
    user: NotRequired[Union[str, None]]
    comments_url: NotRequired[str]
    owner: NotRequired[SimpleUserType]
    truncated: NotRequired[bool]


class GistSimplePropForksItemsType(TypedDict):
    """GistSimplePropForksItems"""

    id: NotRequired[str]
    url: NotRequired[str]
    user: NotRequired[PublicUserType]
    created_at: NotRequired[datetime]
    updated_at: NotRequired[datetime]


class GistSimplePropForkOfPropFilesType(TypedDict):
    """GistSimplePropForkOfPropFiles"""


class GistSimplePropForkOfType(TypedDict):
    """Gist

    Gist
    """

    url: str
    forks_url: str
    commits_url: str
    id: str
    node_id: str
    git_pull_url: str
    git_push_url: str
    html_url: str
    files: GistSimplePropForkOfPropFilesType
    public: bool
    created_at: datetime
    updated_at: datetime
    description: Union[str, None]
    comments: int
    user: Union[None, SimpleUserType]
    comments_url: str
    owner: NotRequired[Union[None, SimpleUserType]]
    truncated: NotRequired[bool]
    forks: NotRequired[List[Any]]
    history: NotRequired[List[Any]]


class GistSimplePropFilesType(TypedDict):
    """GistSimplePropFiles"""


class GistCommentType(TypedDict):
    """Gist Comment

    A comment made to a gist.
    """

    id: int
    node_id: str
    url: str
    body: str
    user: Union[None, SimpleUserType]
    created_at: datetime
    updated_at: datetime
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]


class GistCommitType(TypedDict):
    """Gist Commit

    Gist Commit
    """

    url: str
    version: str
    user: Union[None, SimpleUserType]
    change_status: GistCommitPropChangeStatusType
    committed_at: datetime


class GistCommitPropChangeStatusType(TypedDict):
    """GistCommitPropChangeStatus"""

    total: NotRequired[int]
    additions: NotRequired[int]
    deletions: NotRequired[int]


class GitignoreTemplateType(TypedDict):
    """Gitignore Template

    Gitignore Template
    """

    name: str
    source: str


class LicenseType(TypedDict):
    """License

    License
    """

    key: str
    name: str
    spdx_id: Union[str, None]
    url: Union[str, None]
    node_id: str
    html_url: str
    description: str
    implementation: str
    permissions: List[str]
    conditions: List[str]
    limitations: List[str]
    body: str
    featured: bool


class MarketplaceListingPlanType(TypedDict):
    """Marketplace Listing Plan

    Marketplace Listing Plan
    """

    url: str
    accounts_url: str
    id: int
    number: int
    name: str
    description: str
    monthly_price_in_cents: int
    yearly_price_in_cents: int
    price_model: Literal["FREE", "FLAT_RATE", "PER_UNIT"]
    has_free_trial: bool
    unit_name: Union[str, None]
    state: str
    bullets: List[str]


class MarketplacePurchaseType(TypedDict):
    """Marketplace Purchase

    Marketplace Purchase
    """

    url: str
    type: str
    id: int
    login: str
    organization_billing_email: NotRequired[str]
    email: NotRequired[Union[str, None]]
    marketplace_pending_change: NotRequired[
        Union[MarketplacePurchasePropMarketplacePendingChangeType, None]
    ]
    marketplace_purchase: MarketplacePurchasePropMarketplacePurchaseType


class MarketplacePurchasePropMarketplacePendingChangeType(TypedDict):
    """MarketplacePurchasePropMarketplacePendingChange"""

    is_installed: NotRequired[bool]
    effective_date: NotRequired[str]
    unit_count: NotRequired[Union[int, None]]
    id: NotRequired[int]
    plan: NotRequired[MarketplaceListingPlanType]


class MarketplacePurchasePropMarketplacePurchaseType(TypedDict):
    """MarketplacePurchasePropMarketplacePurchase"""

    billing_cycle: NotRequired[str]
    next_billing_date: NotRequired[Union[str, None]]
    is_installed: NotRequired[bool]
    unit_count: NotRequired[Union[int, None]]
    on_free_trial: NotRequired[bool]
    free_trial_ends_on: NotRequired[Union[str, None]]
    updated_at: NotRequired[str]
    plan: NotRequired[MarketplaceListingPlanType]


class ApiOverviewType(TypedDict):
    """Api Overview

    Api Overview
    """

    verifiable_password_authentication: bool
    ssh_key_fingerprints: NotRequired[ApiOverviewPropSshKeyFingerprintsType]
    ssh_keys: NotRequired[List[str]]
    hooks: NotRequired[List[str]]
    github_enterprise_importer: NotRequired[List[str]]
    web: NotRequired[List[str]]
    api: NotRequired[List[str]]
    git: NotRequired[List[str]]
    packages: NotRequired[List[str]]
    pages: NotRequired[List[str]]
    importer: NotRequired[List[str]]
    actions: NotRequired[List[str]]
    dependabot: NotRequired[List[str]]
    domains: NotRequired[ApiOverviewPropDomainsType]


class ApiOverviewPropSshKeyFingerprintsType(TypedDict):
    """ApiOverviewPropSshKeyFingerprints"""

    sha256_rsa: NotRequired[str]
    sha256_dsa: NotRequired[str]
    sha256_ecdsa: NotRequired[str]
    sha256_ed25519: NotRequired[str]


class ApiOverviewPropDomainsType(TypedDict):
    """ApiOverviewPropDomains"""

    website: NotRequired[List[str]]
    codespaces: NotRequired[List[str]]
    copilot: NotRequired[List[str]]
    packages: NotRequired[List[str]]
    actions: NotRequired[List[str]]


class SecurityAndAnalysisPropAdvancedSecurityType(TypedDict):
    """SecurityAndAnalysisPropAdvancedSecurity"""

    status: NotRequired[Literal["enabled", "disabled"]]


class SecurityAndAnalysisPropDependabotSecurityUpdatesType(TypedDict):
    """SecurityAndAnalysisPropDependabotSecurityUpdates

    Enable or disable Dependabot security updates for the repository.
    """

    status: NotRequired[Literal["enabled", "disabled"]]


class SecurityAndAnalysisPropSecretScanningType(TypedDict):
    """SecurityAndAnalysisPropSecretScanning"""

    status: NotRequired[Literal["enabled", "disabled"]]


class SecurityAndAnalysisPropSecretScanningPushProtectionType(TypedDict):
    """SecurityAndAnalysisPropSecretScanningPushProtection"""

    status: NotRequired[Literal["enabled", "disabled"]]


class SecurityAndAnalysisType(TypedDict):
    """SecurityAndAnalysis"""

    advanced_security: NotRequired[SecurityAndAnalysisPropAdvancedSecurityType]
    dependabot_security_updates: NotRequired[
        SecurityAndAnalysisPropDependabotSecurityUpdatesType
    ]
    secret_scanning: NotRequired[SecurityAndAnalysisPropSecretScanningType]
    secret_scanning_push_protection: NotRequired[
        SecurityAndAnalysisPropSecretScanningPushProtectionType
    ]


class MinimalRepositoryType(TypedDict):
    """Minimal Repository

    Minimal Repository
    """

    id: int
    node_id: str
    name: str
    full_name: str
    owner: SimpleUserType
    private: bool
    html_url: str
    description: Union[str, None]
    fork: bool
    url: str
    archive_url: str
    assignees_url: str
    blobs_url: str
    branches_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    deployments_url: str
    downloads_url: str
    events_url: str
    forks_url: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: NotRequired[str]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    languages_url: str
    merges_url: str
    milestones_url: str
    notifications_url: str
    pulls_url: str
    releases_url: str
    ssh_url: NotRequired[str]
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    tags_url: str
    teams_url: str
    trees_url: str
    clone_url: NotRequired[str]
    mirror_url: NotRequired[Union[str, None]]
    hooks_url: str
    svn_url: NotRequired[str]
    homepage: NotRequired[Union[str, None]]
    language: NotRequired[Union[str, None]]
    forks_count: NotRequired[int]
    stargazers_count: NotRequired[int]
    watchers_count: NotRequired[int]
    size: NotRequired[int]
    default_branch: NotRequired[str]
    open_issues_count: NotRequired[int]
    is_template: NotRequired[bool]
    topics: NotRequired[List[str]]
    has_issues: NotRequired[bool]
    has_projects: NotRequired[bool]
    has_wiki: NotRequired[bool]
    has_pages: NotRequired[bool]
    has_downloads: NotRequired[bool]
    has_discussions: NotRequired[bool]
    archived: NotRequired[bool]
    disabled: NotRequired[bool]
    visibility: NotRequired[str]
    pushed_at: NotRequired[Union[datetime, None]]
    created_at: NotRequired[Union[datetime, None]]
    updated_at: NotRequired[Union[datetime, None]]
    permissions: NotRequired[MinimalRepositoryPropPermissionsType]
    role_name: NotRequired[str]
    temp_clone_token: NotRequired[Union[str, None]]
    delete_branch_on_merge: NotRequired[bool]
    subscribers_count: NotRequired[int]
    network_count: NotRequired[int]
    code_of_conduct: NotRequired[CodeOfConductType]
    license_: NotRequired[Union[MinimalRepositoryPropLicenseType, None]]
    forks: NotRequired[int]
    open_issues: NotRequired[int]
    watchers: NotRequired[int]
    allow_forking: NotRequired[bool]
    web_commit_signoff_required: NotRequired[bool]
    security_and_analysis: NotRequired[Union[SecurityAndAnalysisType, None]]


class MinimalRepositoryPropPermissionsType(TypedDict):
    """MinimalRepositoryPropPermissions"""

    admin: NotRequired[bool]
    maintain: NotRequired[bool]
    push: NotRequired[bool]
    triage: NotRequired[bool]
    pull: NotRequired[bool]


class MinimalRepositoryPropLicenseType(TypedDict):
    """MinimalRepositoryPropLicense"""

    key: NotRequired[str]
    name: NotRequired[str]
    spdx_id: NotRequired[str]
    url: NotRequired[str]
    node_id: NotRequired[str]


class ThreadType(TypedDict):
    """Thread

    Thread
    """

    id: str
    repository: MinimalRepositoryType
    subject: ThreadPropSubjectType
    reason: str
    unread: bool
    updated_at: str
    last_read_at: Union[str, None]
    url: str
    subscription_url: str


class ThreadPropSubjectType(TypedDict):
    """ThreadPropSubject"""

    title: str
    url: str
    latest_comment_url: str
    type: str


class ThreadSubscriptionType(TypedDict):
    """Thread Subscription

    Thread Subscription
    """

    subscribed: bool
    ignored: bool
    reason: Union[str, None]
    created_at: Union[datetime, None]
    url: str
    thread_url: NotRequired[str]
    repository_url: NotRequired[str]


class OrganizationSimpleType(TypedDict):
    """Organization Simple

    A GitHub organization.
    """

    login: str
    id: int
    node_id: str
    url: str
    repos_url: str
    events_url: str
    hooks_url: str
    issues_url: str
    members_url: str
    public_members_url: str
    avatar_url: str
    description: Union[str, None]


class OrganizationFullType(TypedDict):
    """Organization Full

    Organization Full
    """

    login: str
    id: int
    node_id: str
    url: str
    repos_url: str
    events_url: str
    hooks_url: str
    issues_url: str
    members_url: str
    public_members_url: str
    avatar_url: str
    description: Union[str, None]
    name: NotRequired[Union[str, None]]
    company: NotRequired[Union[str, None]]
    blog: NotRequired[Union[str, None]]
    location: NotRequired[Union[str, None]]
    email: NotRequired[Union[str, None]]
    twitter_username: NotRequired[Union[str, None]]
    is_verified: NotRequired[bool]
    has_organization_projects: bool
    has_repository_projects: bool
    public_repos: int
    public_gists: int
    followers: int
    following: int
    html_url: str
    type: str
    total_private_repos: NotRequired[int]
    owned_private_repos: NotRequired[int]
    private_gists: NotRequired[Union[int, None]]
    disk_usage: NotRequired[Union[int, None]]
    collaborators: NotRequired[Union[int, None]]
    billing_email: NotRequired[Union[str, None]]
    plan: NotRequired[OrganizationFullPropPlanType]
    default_repository_permission: NotRequired[Union[str, None]]
    members_can_create_repositories: NotRequired[Union[bool, None]]
    two_factor_requirement_enabled: NotRequired[Union[bool, None]]
    members_allowed_repository_creation_type: NotRequired[str]
    members_can_create_public_repositories: NotRequired[bool]
    members_can_create_private_repositories: NotRequired[bool]
    members_can_create_internal_repositories: NotRequired[bool]
    members_can_create_pages: NotRequired[bool]
    members_can_create_public_pages: NotRequired[bool]
    members_can_create_private_pages: NotRequired[bool]
    members_can_fork_private_repositories: NotRequired[Union[bool, None]]
    web_commit_signoff_required: NotRequired[bool]
    advanced_security_enabled_for_new_repositories: NotRequired[bool]
    dependabot_alerts_enabled_for_new_repositories: NotRequired[bool]
    dependabot_security_updates_enabled_for_new_repositories: NotRequired[bool]
    dependency_graph_enabled_for_new_repositories: NotRequired[bool]
    secret_scanning_enabled_for_new_repositories: NotRequired[bool]
    secret_scanning_push_protection_enabled_for_new_repositories: NotRequired[bool]
    secret_scanning_push_protection_custom_link_enabled: NotRequired[bool]
    secret_scanning_push_protection_custom_link: NotRequired[Union[str, None]]
    created_at: datetime
    updated_at: datetime
    archived_at: Union[datetime, None]


class OrganizationFullPropPlanType(TypedDict):
    """OrganizationFullPropPlan"""

    name: str
    space: int
    private_repos: int
    filled_seats: NotRequired[int]
    seats: NotRequired[int]


class ActionsCacheUsageOrgEnterpriseType(TypedDict):
    """ActionsCacheUsageOrgEnterprise"""

    total_active_caches_count: int
    total_active_caches_size_in_bytes: int


class ActionsCacheUsageByRepositoryType(TypedDict):
    """Actions Cache Usage by repository

    GitHub Actions Cache Usage by repository.
    """

    full_name: str
    active_caches_size_in_bytes: int
    active_caches_count: int


class OidcCustomSubType(TypedDict):
    """Actions OIDC Subject customization

    Actions OIDC Subject customization
    """

    include_claim_keys: List[str]


class EmptyObjectType(TypedDict):
    """Empty Object

    An object without any properties.
    """


class ActionsOrganizationPermissionsType(TypedDict):
    """ActionsOrganizationPermissions"""

    enabled_repositories: Literal["all", "none", "selected"]
    selected_repositories_url: NotRequired[str]
    allowed_actions: NotRequired[Literal["all", "local_only", "selected"]]
    selected_actions_url: NotRequired[str]


class SelectedActionsType(TypedDict):
    """SelectedActions"""

    github_owned_allowed: NotRequired[bool]
    verified_allowed: NotRequired[bool]
    patterns_allowed: NotRequired[List[str]]


class ActionsGetDefaultWorkflowPermissionsType(TypedDict):
    """ActionsGetDefaultWorkflowPermissions"""

    default_workflow_permissions: Literal["read", "write"]
    can_approve_pull_request_reviews: bool


class ActionsSetDefaultWorkflowPermissionsType(TypedDict):
    """ActionsSetDefaultWorkflowPermissions"""

    default_workflow_permissions: NotRequired[Literal["read", "write"]]
    can_approve_pull_request_reviews: NotRequired[bool]


class RunnerLabelType(TypedDict):
    """Self hosted runner label

    A label for a self hosted runner
    """

    id: NotRequired[int]
    name: str
    type: NotRequired[Literal["read-only", "custom"]]


class RunnerType(TypedDict):
    """Self hosted runners

    A self hosted runner
    """

    id: int
    runner_group_id: NotRequired[int]
    name: str
    os: str
    status: str
    busy: bool
    labels: List[RunnerLabelType]


class RunnerApplicationType(TypedDict):
    """Runner Application

    Runner Application
    """

    os: str
    architecture: str
    download_url: str
    filename: str
    temp_download_token: NotRequired[str]
    sha256_checksum: NotRequired[str]


class AuthenticationTokenType(TypedDict):
    """Authentication Token

    Authentication Token
    """

    token: str
    expires_at: datetime
    permissions: NotRequired[AuthenticationTokenPropPermissionsType]
    repositories: NotRequired[List[RepositoryType]]
    single_file: NotRequired[Union[str, None]]
    repository_selection: NotRequired[Literal["all", "selected"]]


class AuthenticationTokenPropPermissionsType(TypedDict):
    """AuthenticationTokenPropPermissions

    Examples:
        {'issues': 'read', 'deployments': 'write'}
    """


class OrganizationActionsSecretType(TypedDict):
    """Actions Secret for an Organization

    Secrets for GitHub Actions for an organization.
    """

    name: str
    created_at: datetime
    updated_at: datetime
    visibility: Literal["all", "private", "selected"]
    selected_repositories_url: NotRequired[str]


class ActionsPublicKeyType(TypedDict):
    """ActionsPublicKey

    The public key used for setting Actions Secrets.
    """

    key_id: str
    key: str
    id: NotRequired[int]
    url: NotRequired[str]
    title: NotRequired[str]
    created_at: NotRequired[str]


class OrganizationActionsVariableType(TypedDict):
    """Actions Variable for an Organization

    Organization variable for GitHub Actions.
    """

    name: str
    value: str
    created_at: datetime
    updated_at: datetime
    visibility: Literal["all", "private", "selected"]
    selected_repositories_url: NotRequired[str]


class CodeScanningAlertRuleSummaryType(TypedDict):
    """CodeScanningAlertRuleSummary"""

    id: NotRequired[Union[str, None]]
    name: NotRequired[str]
    tags: NotRequired[Union[List[str], None]]
    severity: NotRequired[Union[None, Literal["none", "note", "warning", "error"]]]
    security_severity_level: NotRequired[
        Union[None, Literal["low", "medium", "high", "critical"]]
    ]
    description: NotRequired[str]


class CodeScanningAnalysisToolType(TypedDict):
    """CodeScanningAnalysisTool"""

    name: NotRequired[str]
    version: NotRequired[Union[str, None]]
    guid: NotRequired[Union[str, None]]


class CodeScanningAlertLocationType(TypedDict):
    """CodeScanningAlertLocation

    Describe a region within a file for the alert.
    """

    path: NotRequired[str]
    start_line: NotRequired[int]
    end_line: NotRequired[int]
    start_column: NotRequired[int]
    end_column: NotRequired[int]


class CodeScanningAlertInstanceType(TypedDict):
    """CodeScanningAlertInstance"""

    ref: NotRequired[str]
    analysis_key: NotRequired[str]
    environment: NotRequired[str]
    category: NotRequired[str]
    state: NotRequired[Literal["open", "dismissed", "fixed"]]
    commit_sha: NotRequired[str]
    message: NotRequired[CodeScanningAlertInstancePropMessageType]
    location: NotRequired[CodeScanningAlertLocationType]
    html_url: NotRequired[str]
    classifications: NotRequired[
        List[Union[None, Literal["source", "generated", "test", "library"]]]
    ]


class CodeScanningAlertInstancePropMessageType(TypedDict):
    """CodeScanningAlertInstancePropMessage"""

    text: NotRequired[str]


class CodeScanningOrganizationAlertItemsType(TypedDict):
    """CodeScanningOrganizationAlertItems"""

    number: int
    created_at: datetime
    updated_at: NotRequired[datetime]
    url: str
    html_url: str
    instances_url: str
    state: Literal["open", "dismissed", "fixed"]
    fixed_at: NotRequired[Union[datetime, None]]
    dismissed_by: Union[None, SimpleUserType]
    dismissed_at: Union[datetime, None]
    dismissed_reason: Union[
        None, Literal["false positive", "won't fix", "used in tests"]
    ]
    dismissed_comment: NotRequired[Union[str, None]]
    rule: CodeScanningAlertRuleSummaryType
    tool: CodeScanningAnalysisToolType
    most_recent_instance: CodeScanningAlertInstanceType
    repository: SimpleRepositoryType


class CodespaceMachineType(TypedDict):
    """Codespace machine

    A description of the machine powering a codespace.
    """

    name: str
    display_name: str
    operating_system: str
    storage_in_bytes: int
    memory_in_bytes: int
    cpus: int
    prebuild_availability: Union[None, Literal["none", "ready", "in_progress"]]


class CodespaceType(TypedDict):
    """Codespace

    A codespace.
    """

    id: int
    name: str
    display_name: NotRequired[Union[str, None]]
    environment_id: Union[str, None]
    owner: SimpleUserType
    billable_owner: SimpleUserType
    repository: MinimalRepositoryType
    machine: Union[None, CodespaceMachineType]
    devcontainer_path: NotRequired[Union[str, None]]
    prebuild: Union[bool, None]
    created_at: datetime
    updated_at: datetime
    last_used_at: datetime
    state: Literal[
        "Unknown",
        "Created",
        "Queued",
        "Provisioning",
        "Available",
        "Awaiting",
        "Unavailable",
        "Deleted",
        "Moved",
        "Shutdown",
        "Archived",
        "Starting",
        "ShuttingDown",
        "Failed",
        "Exporting",
        "Updating",
        "Rebuilding",
    ]
    url: str
    git_status: CodespacePropGitStatusType
    location: Literal["EastUs", "SouthEastAsia", "WestEurope", "WestUs2"]
    idle_timeout_minutes: Union[int, None]
    web_url: str
    machines_url: str
    start_url: str
    stop_url: str
    publish_url: NotRequired[Union[str, None]]
    pulls_url: Union[str, None]
    recent_folders: List[str]
    runtime_constraints: NotRequired[CodespacePropRuntimeConstraintsType]
    pending_operation: NotRequired[Union[bool, None]]
    pending_operation_disabled_reason: NotRequired[Union[str, None]]
    idle_timeout_notice: NotRequired[Union[str, None]]
    retention_period_minutes: NotRequired[Union[int, None]]
    retention_expires_at: NotRequired[Union[datetime, None]]
    last_known_stop_notice: NotRequired[Union[str, None]]


class CodespacePropGitStatusType(TypedDict):
    """CodespacePropGitStatus

    Details about the codespace's git repository.
    """

    ahead: NotRequired[int]
    behind: NotRequired[int]
    has_unpushed_changes: NotRequired[bool]
    has_uncommitted_changes: NotRequired[bool]
    ref: NotRequired[str]


class CodespacePropRuntimeConstraintsType(TypedDict):
    """CodespacePropRuntimeConstraints"""

    allowed_port_privacy_settings: NotRequired[Union[List[str], None]]


class CodespacesOrgSecretType(TypedDict):
    """Codespaces Secret

    Secrets for a GitHub Codespace.
    """

    name: str
    created_at: datetime
    updated_at: datetime
    visibility: Literal["all", "private", "selected"]
    selected_repositories_url: NotRequired[str]


class CodespacesPublicKeyType(TypedDict):
    """CodespacesPublicKey

    The public key used for setting Codespaces secrets.
    """

    key_id: str
    key: str
    id: NotRequired[int]
    url: NotRequired[str]
    title: NotRequired[str]
    created_at: NotRequired[str]


class CopilotSeatBreakdownType(TypedDict):
    """Copilot Business Seat Breakdown

    The breakdown of Copilot Business seats for the organization.
    """

    total: NotRequired[int]
    added_this_cycle: NotRequired[int]
    pending_cancellation: NotRequired[int]
    pending_invitation: NotRequired[int]
    active_this_cycle: NotRequired[int]
    inactive_this_cycle: NotRequired[int]


class CopilotOrganizationDetailsType(TypedDict):
    """Copilot Business Organization Details

    Information about the seat breakdown and policies set for an organization with a
    Copilot Business subscription.
    """

    seat_breakdown: CopilotSeatBreakdownType
    public_code_suggestions: Literal["allow", "block", "unconfigured", "unknown"]
    copilot_chat: NotRequired[Literal["enabled", "disabled", "unconfigured"]]
    seat_management_setting: Literal[
        "assign_all", "assign_selected", "disabled", "unconfigured"
    ]


class TeamSimpleType(TypedDict):
    """Team Simple

    Groups of organization members that gives permissions on specified repositories.
    """

    id: int
    node_id: str
    url: str
    members_url: str
    name: str
    description: Union[str, None]
    permission: str
    privacy: NotRequired[str]
    notification_setting: NotRequired[str]
    html_url: str
    repositories_url: str
    slug: str
    ldap_dn: NotRequired[str]


class TeamType(TypedDict):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    id: int
    node_id: str
    name: str
    slug: str
    description: Union[str, None]
    privacy: NotRequired[str]
    notification_setting: NotRequired[str]
    permission: str
    permissions: NotRequired[TeamPropPermissionsType]
    url: str
    html_url: str
    members_url: str
    repositories_url: str
    parent: Union[None, TeamSimpleType]


class TeamPropPermissionsType(TypedDict):
    """TeamPropPermissions"""

    pull: bool
    triage: bool
    push: bool
    maintain: bool
    admin: bool


class OrganizationType(TypedDict):
    """Organization

    GitHub account for managing multiple users, teams, and repositories
    """

    login: str
    url: str
    id: int
    node_id: str
    repos_url: str
    events_url: str
    hooks_url: str
    issues_url: str
    members_url: str
    public_members_url: str
    avatar_url: str
    description: Union[str, None]
    blog: NotRequired[str]
    html_url: str
    name: NotRequired[str]
    company: NotRequired[str]
    location: NotRequired[str]
    email: NotRequired[str]
    has_organization_projects: bool
    has_repository_projects: bool
    is_verified: NotRequired[bool]
    public_repos: int
    public_gists: int
    followers: int
    following: int
    type: str
    created_at: datetime
    updated_at: datetime
    plan: NotRequired[OrganizationPropPlanType]


class OrganizationPropPlanType(TypedDict):
    """OrganizationPropPlan"""

    name: NotRequired[str]
    space: NotRequired[int]
    private_repos: NotRequired[int]
    filled_seats: NotRequired[int]
    seats: NotRequired[int]


class CopilotSeatDetailsType(TypedDict):
    """Copilot Business Seat Detail

    Information about a Copilot Business seat assignment for a user, team, or
    organization.
    """

    assignee: Union[SimpleUserType, TeamType, OrganizationType]
    assigning_team: NotRequired[Union[TeamType, None]]
    pending_cancellation_date: NotRequired[Union[date, None]]
    last_activity_at: NotRequired[Union[datetime, None]]
    last_activity_editor: NotRequired[Union[str, None]]
    created_at: datetime
    updated_at: NotRequired[datetime]


class OrganizationDependabotSecretType(TypedDict):
    """Dependabot Secret for an Organization

    Secrets for GitHub Dependabot for an organization.
    """

    name: str
    created_at: datetime
    updated_at: datetime
    visibility: Literal["all", "private", "selected"]
    selected_repositories_url: NotRequired[str]


class DependabotPublicKeyType(TypedDict):
    """DependabotPublicKey

    The public key used for setting Dependabot Secrets.
    """

    key_id: str
    key: str


class PackageType(TypedDict):
    """Package

    A software package
    """

    id: int
    name: str
    package_type: Literal["npm", "maven", "rubygems", "docker", "nuget", "container"]
    url: str
    html_url: str
    version_count: int
    visibility: Literal["private", "public"]
    owner: NotRequired[Union[None, SimpleUserType]]
    repository: NotRequired[Union[None, MinimalRepositoryType]]
    created_at: datetime
    updated_at: datetime


class OrganizationInvitationType(TypedDict):
    """Organization Invitation

    Organization Invitation
    """

    id: int
    login: Union[str, None]
    email: Union[str, None]
    role: str
    created_at: str
    failed_at: NotRequired[Union[str, None]]
    failed_reason: NotRequired[Union[str, None]]
    inviter: SimpleUserType
    team_count: int
    node_id: str
    invitation_teams_url: str
    invitation_source: NotRequired[str]


class OrgHookType(TypedDict):
    """Org Hook

    Org Hook
    """

    id: int
    url: str
    ping_url: str
    deliveries_url: NotRequired[str]
    name: str
    events: List[str]
    active: bool
    config: OrgHookPropConfigType
    updated_at: datetime
    created_at: datetime
    type: str


class OrgHookPropConfigType(TypedDict):
    """OrgHookPropConfig"""

    url: NotRequired[str]
    insecure_ssl: NotRequired[str]
    content_type: NotRequired[str]
    secret: NotRequired[str]


class InteractionLimitResponseType(TypedDict):
    """Interaction Limits

    Interaction limit settings.
    """

    limit: Literal["existing_users", "contributors_only", "collaborators_only"]
    origin: str
    expires_at: datetime


class InteractionLimitType(TypedDict):
    """Interaction Restrictions

    Limit interactions to a specific type of user for a specified duration
    """

    limit: Literal["existing_users", "contributors_only", "collaborators_only"]
    expiry: NotRequired[
        Literal["one_day", "three_days", "one_week", "one_month", "six_months"]
    ]


class OrgMembershipType(TypedDict):
    """Org Membership

    Org Membership
    """

    url: str
    state: Literal["active", "pending"]
    role: Literal["admin", "member", "billing_manager"]
    organization_url: str
    organization: OrganizationSimpleType
    user: Union[None, SimpleUserType]
    permissions: NotRequired[OrgMembershipPropPermissionsType]


class OrgMembershipPropPermissionsType(TypedDict):
    """OrgMembershipPropPermissions"""

    can_create_repository: bool


class MigrationType(TypedDict):
    """Migration

    A migration.
    """

    id: int
    owner: Union[None, SimpleUserType]
    guid: str
    state: str
    lock_repositories: bool
    exclude_metadata: bool
    exclude_git_data: bool
    exclude_attachments: bool
    exclude_releases: bool
    exclude_owner_projects: bool
    org_metadata_only: bool
    repositories: List[RepositoryType]
    url: str
    created_at: datetime
    updated_at: datetime
    node_id: str
    archive_url: NotRequired[str]
    exclude: NotRequired[List[str]]


class OrganizationFineGrainedPermissionType(TypedDict):
    """Organization Fine-Grained Permission

    A fine-grained permission that protects organization resources.
    """

    name: str
    description: str


class OrganizationRoleType(TypedDict):
    """Organization Role

    Organization roles
    """

    id: int
    name: str
    description: NotRequired[Union[str, None]]
    permissions: List[str]
    organization: Union[None, SimpleUserType]
    created_at: datetime
    updated_at: datetime


class PackageVersionType(TypedDict):
    """Package Version

    A version of a software package
    """

    id: int
    name: str
    url: str
    package_html_url: str
    html_url: NotRequired[str]
    license_: NotRequired[str]
    description: NotRequired[str]
    created_at: datetime
    updated_at: datetime
    deleted_at: NotRequired[datetime]
    metadata: NotRequired[PackageVersionPropMetadataType]


class PackageVersionPropMetadataType(TypedDict):
    """Package Version Metadata"""

    package_type: Literal["npm", "maven", "rubygems", "docker", "nuget", "container"]
    container: NotRequired[PackageVersionPropMetadataPropContainerType]
    docker: NotRequired[PackageVersionPropMetadataPropDockerType]


class PackageVersionPropMetadataPropContainerType(TypedDict):
    """Container Metadata"""

    tags: List[str]


class PackageVersionPropMetadataPropDockerType(TypedDict):
    """Docker Metadata"""

    tag: NotRequired[List[str]]


class OrganizationProgrammaticAccessGrantRequestType(TypedDict):
    """Simple Organization Programmatic Access Grant Request

    Minimal representation of an organization programmatic access grant request for
    enumerations
    """

    id: int
    reason: Union[str, None]
    owner: SimpleUserType
    repository_selection: Literal["none", "all", "subset"]
    repositories_url: str
    permissions: OrganizationProgrammaticAccessGrantRequestPropPermissionsType
    created_at: str
    token_expired: bool
    token_expires_at: Union[str, None]
    token_last_used_at: Union[str, None]


class OrganizationProgrammaticAccessGrantRequestPropPermissionsType(TypedDict):
    """OrganizationProgrammaticAccessGrantRequestPropPermissions

    Permissions requested, categorized by type of permission.
    """

    organization: NotRequired[
        OrganizationProgrammaticAccessGrantRequestPropPermissionsPropOrganizationType
    ]
    repository: NotRequired[
        OrganizationProgrammaticAccessGrantRequestPropPermissionsPropRepositoryType
    ]
    other: NotRequired[
        OrganizationProgrammaticAccessGrantRequestPropPermissionsPropOtherType
    ]


class OrganizationProgrammaticAccessGrantRequestPropPermissionsPropOrganizationType(
    TypedDict
):
    """OrganizationProgrammaticAccessGrantRequestPropPermissionsPropOrganization"""


class OrganizationProgrammaticAccessGrantRequestPropPermissionsPropRepositoryType(
    TypedDict
):
    """OrganizationProgrammaticAccessGrantRequestPropPermissionsPropRepository"""


class OrganizationProgrammaticAccessGrantRequestPropPermissionsPropOtherType(TypedDict):
    """OrganizationProgrammaticAccessGrantRequestPropPermissionsPropOther"""


class OrganizationProgrammaticAccessGrantType(TypedDict):
    """Organization Programmatic Access Grant

    Minimal representation of an organization programmatic access grant for
    enumerations
    """

    id: int
    owner: SimpleUserType
    repository_selection: Literal["none", "all", "subset"]
    repositories_url: str
    permissions: OrganizationProgrammaticAccessGrantPropPermissionsType
    access_granted_at: str
    token_expired: bool
    token_expires_at: Union[str, None]
    token_last_used_at: Union[str, None]


class OrganizationProgrammaticAccessGrantPropPermissionsType(TypedDict):
    """OrganizationProgrammaticAccessGrantPropPermissions

    Permissions requested, categorized by type of permission.
    """

    organization: NotRequired[
        OrganizationProgrammaticAccessGrantPropPermissionsPropOrganizationType
    ]
    repository: NotRequired[
        OrganizationProgrammaticAccessGrantPropPermissionsPropRepositoryType
    ]
    other: NotRequired[OrganizationProgrammaticAccessGrantPropPermissionsPropOtherType]


class OrganizationProgrammaticAccessGrantPropPermissionsPropOrganizationType(TypedDict):
    """OrganizationProgrammaticAccessGrantPropPermissionsPropOrganization"""


class OrganizationProgrammaticAccessGrantPropPermissionsPropRepositoryType(TypedDict):
    """OrganizationProgrammaticAccessGrantPropPermissionsPropRepository"""


class OrganizationProgrammaticAccessGrantPropPermissionsPropOtherType(TypedDict):
    """OrganizationProgrammaticAccessGrantPropPermissionsPropOther"""


class ProjectType(TypedDict):
    """Project

    Projects are a way to organize columns and cards of work.
    """

    owner_url: str
    url: str
    html_url: str
    columns_url: str
    id: int
    node_id: str
    name: str
    body: Union[str, None]
    number: int
    state: str
    creator: Union[None, SimpleUserType]
    created_at: datetime
    updated_at: datetime
    organization_permission: NotRequired[Literal["read", "write", "admin", "none"]]
    private: NotRequired[bool]


class OrgCustomPropertyType(TypedDict):
    """Organization Custom Property

    Custom property defined on an organization
    """

    property_name: str
    value_type: Literal["string", "single_select"]
    required: NotRequired[bool]
    default_value: NotRequired[Union[str, None]]
    description: NotRequired[Union[str, None]]
    allowed_values: NotRequired[Union[List[str], None]]


class CustomPropertyValueType(TypedDict):
    """Custom Property Value

    Custom property name and associated value
    """

    property_name: str
    value: Union[str, None]


class OrgRepoCustomPropertyValuesType(TypedDict):
    """Organization Repository Custom Property Values

    List of custom property values for a repository
    """

    repository_id: int
    repository_name: str
    repository_full_name: str
    properties: List[CustomPropertyValueType]


class CodeOfConductSimpleType(TypedDict):
    """Code Of Conduct Simple

    Code of Conduct Simple
    """

    url: str
    key: str
    name: str
    html_url: Union[str, None]


class FullRepositoryType(TypedDict):
    """Full Repository

    Full Repository
    """

    id: int
    node_id: str
    name: str
    full_name: str
    owner: SimpleUserType
    private: bool
    html_url: str
    description: Union[str, None]
    fork: bool
    url: str
    archive_url: str
    assignees_url: str
    blobs_url: str
    branches_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    deployments_url: str
    downloads_url: str
    events_url: str
    forks_url: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    languages_url: str
    merges_url: str
    milestones_url: str
    notifications_url: str
    pulls_url: str
    releases_url: str
    ssh_url: str
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    tags_url: str
    teams_url: str
    trees_url: str
    clone_url: str
    mirror_url: Union[str, None]
    hooks_url: str
    svn_url: str
    homepage: Union[str, None]
    language: Union[str, None]
    forks_count: int
    stargazers_count: int
    watchers_count: int
    size: int
    default_branch: str
    open_issues_count: int
    is_template: NotRequired[bool]
    topics: NotRequired[List[str]]
    has_issues: bool
    has_projects: bool
    has_wiki: bool
    has_pages: bool
    has_downloads: NotRequired[bool]
    has_discussions: bool
    archived: bool
    disabled: bool
    visibility: NotRequired[str]
    pushed_at: datetime
    created_at: datetime
    updated_at: datetime
    permissions: NotRequired[FullRepositoryPropPermissionsType]
    allow_rebase_merge: NotRequired[bool]
    template_repository: NotRequired[Union[None, RepositoryType]]
    temp_clone_token: NotRequired[Union[str, None]]
    allow_squash_merge: NotRequired[bool]
    allow_auto_merge: NotRequired[bool]
    delete_branch_on_merge: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    use_squash_pr_title_as_default: NotRequired[bool]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    allow_forking: NotRequired[bool]
    web_commit_signoff_required: NotRequired[bool]
    subscribers_count: int
    network_count: int
    license_: Union[None, LicenseSimpleType]
    organization: NotRequired[Union[None, SimpleUserType]]
    parent: NotRequired[RepositoryType]
    source: NotRequired[RepositoryType]
    forks: int
    master_branch: NotRequired[str]
    open_issues: int
    watchers: int
    anonymous_access_enabled: NotRequired[bool]
    code_of_conduct: NotRequired[CodeOfConductSimpleType]
    security_and_analysis: NotRequired[Union[SecurityAndAnalysisType, None]]


class FullRepositoryPropPermissionsType(TypedDict):
    """FullRepositoryPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    push: bool
    triage: NotRequired[bool]
    pull: bool


class RepositoryRulesetBypassActorType(TypedDict):
    """Repository Ruleset Bypass Actor

    An actor that can bypass rules in a ruleset
    """

    actor_id: int
    actor_type: Literal["RepositoryRole", "Team", "Integration", "OrganizationAdmin"]
    bypass_mode: Literal["always", "pull_request"]


class RepositoryRulesetConditionsType(TypedDict):
    """Repository ruleset conditions for ref names

    Parameters for a repository ruleset ref name condition
    """

    ref_name: NotRequired[RepositoryRulesetConditionsPropRefNameType]


class RepositoryRulesetConditionsPropRefNameType(TypedDict):
    """RepositoryRulesetConditionsPropRefName"""

    include: NotRequired[List[str]]
    exclude: NotRequired[List[str]]


class RepositoryRulesetConditionsRepositoryNameTargetType(TypedDict):
    """Repository ruleset conditions for repository names

    Parameters for a repository name condition
    """

    repository_name: RepositoryRulesetConditionsRepositoryNameTargetPropRepositoryNameType


class RepositoryRulesetConditionsRepositoryNameTargetPropRepositoryNameType(TypedDict):
    """RepositoryRulesetConditionsRepositoryNameTargetPropRepositoryName"""

    include: NotRequired[List[str]]
    exclude: NotRequired[List[str]]
    protected: NotRequired[bool]


class RepositoryRulesetConditionsRepositoryIdTargetType(TypedDict):
    """Repository ruleset conditions for repository IDs

    Parameters for a repository ID condition
    """

    repository_id: RepositoryRulesetConditionsRepositoryIdTargetPropRepositoryIdType


class RepositoryRulesetConditionsRepositoryIdTargetPropRepositoryIdType(TypedDict):
    """RepositoryRulesetConditionsRepositoryIdTargetPropRepositoryId"""

    repository_ids: NotRequired[List[int]]


class OrgRulesetConditionsOneof0Type(TypedDict):
    """repository_name_and_ref_name

    Conditions to target repositories by name and refs by name
    """

    ref_name: NotRequired[RepositoryRulesetConditionsPropRefNameType]
    repository_name: RepositoryRulesetConditionsRepositoryNameTargetPropRepositoryNameType


class OrgRulesetConditionsOneof1Type(TypedDict):
    """repository_id_and_ref_name

    Conditions to target repositories by id and refs by name
    """

    ref_name: NotRequired[RepositoryRulesetConditionsPropRefNameType]
    repository_id: RepositoryRulesetConditionsRepositoryIdTargetPropRepositoryIdType


class RepositoryRuleCreationType(TypedDict):
    """creation

    Only allow users with bypass permission to create matching refs.
    """

    type: Literal["creation"]


class RepositoryRuleUpdateType(TypedDict):
    """update

    Only allow users with bypass permission to update matching refs.
    """

    type: Literal["update"]
    parameters: NotRequired[RepositoryRuleUpdatePropParametersType]


class RepositoryRuleUpdatePropParametersType(TypedDict):
    """RepositoryRuleUpdatePropParameters"""

    update_allows_fetch_and_merge: bool


class RepositoryRuleDeletionType(TypedDict):
    """deletion

    Only allow users with bypass permissions to delete matching refs.
    """

    type: Literal["deletion"]


class RepositoryRuleRequiredLinearHistoryType(TypedDict):
    """required_linear_history

    Prevent merge commits from being pushed to matching refs.
    """

    type: Literal["required_linear_history"]


class RepositoryRuleRequiredDeploymentsType(TypedDict):
    """required_deployments

    Choose which environments must be successfully deployed to before refs can be
    pushed into a ref that matches this rule.
    """

    type: Literal["required_deployments"]
    parameters: NotRequired[RepositoryRuleRequiredDeploymentsPropParametersType]


class RepositoryRuleRequiredDeploymentsPropParametersType(TypedDict):
    """RepositoryRuleRequiredDeploymentsPropParameters"""

    required_deployment_environments: List[str]


class RepositoryRuleRequiredSignaturesType(TypedDict):
    """required_signatures

    Commits pushed to matching refs must have verified signatures.
    """

    type: Literal["required_signatures"]


class RepositoryRulePullRequestType(TypedDict):
    """pull_request

    Require all commits be made to a non-target branch and submitted via a pull
    request before they can be merged.
    """

    type: Literal["pull_request"]
    parameters: NotRequired[RepositoryRulePullRequestPropParametersType]


class RepositoryRulePullRequestPropParametersType(TypedDict):
    """RepositoryRulePullRequestPropParameters"""

    dismiss_stale_reviews_on_push: bool
    require_code_owner_review: bool
    require_last_push_approval: bool
    required_approving_review_count: int
    required_review_thread_resolution: bool


class RepositoryRuleParamsStatusCheckConfigurationType(TypedDict):
    """StatusCheckConfiguration

    Required status check
    """

    context: str
    integration_id: NotRequired[int]


class RepositoryRuleRequiredStatusChecksType(TypedDict):
    """required_status_checks

    Choose which status checks must pass before the ref is updated. When enabled,
    commits must first be pushed to another ref where the checks pass.
    """

    type: Literal["required_status_checks"]
    parameters: NotRequired[RepositoryRuleRequiredStatusChecksPropParametersType]


class RepositoryRuleRequiredStatusChecksPropParametersType(TypedDict):
    """RepositoryRuleRequiredStatusChecksPropParameters"""

    required_status_checks: List[RepositoryRuleParamsStatusCheckConfigurationType]
    strict_required_status_checks_policy: bool


class RepositoryRuleNonFastForwardType(TypedDict):
    """non_fast_forward

    Prevent users with push access from force pushing to refs.
    """

    type: Literal["non_fast_forward"]


class RepositoryRuleCommitMessagePatternType(TypedDict):
    """commit_message_pattern

    Parameters to be used for the commit_message_pattern rule
    """

    type: Literal["commit_message_pattern"]
    parameters: NotRequired[RepositoryRuleCommitMessagePatternPropParametersType]


class RepositoryRuleCommitMessagePatternPropParametersType(TypedDict):
    """RepositoryRuleCommitMessagePatternPropParameters"""

    name: NotRequired[str]
    negate: NotRequired[bool]
    operator: Literal["starts_with", "ends_with", "contains", "regex"]
    pattern: str


class RepositoryRuleCommitAuthorEmailPatternType(TypedDict):
    """commit_author_email_pattern

    Parameters to be used for the commit_author_email_pattern rule
    """

    type: Literal["commit_author_email_pattern"]
    parameters: NotRequired[RepositoryRuleCommitAuthorEmailPatternPropParametersType]


class RepositoryRuleCommitAuthorEmailPatternPropParametersType(TypedDict):
    """RepositoryRuleCommitAuthorEmailPatternPropParameters"""

    name: NotRequired[str]
    negate: NotRequired[bool]
    operator: Literal["starts_with", "ends_with", "contains", "regex"]
    pattern: str


class RepositoryRuleCommitterEmailPatternType(TypedDict):
    """committer_email_pattern

    Parameters to be used for the committer_email_pattern rule
    """

    type: Literal["committer_email_pattern"]
    parameters: NotRequired[RepositoryRuleCommitterEmailPatternPropParametersType]


class RepositoryRuleCommitterEmailPatternPropParametersType(TypedDict):
    """RepositoryRuleCommitterEmailPatternPropParameters"""

    name: NotRequired[str]
    negate: NotRequired[bool]
    operator: Literal["starts_with", "ends_with", "contains", "regex"]
    pattern: str


class RepositoryRuleBranchNamePatternType(TypedDict):
    """branch_name_pattern

    Parameters to be used for the branch_name_pattern rule
    """

    type: Literal["branch_name_pattern"]
    parameters: NotRequired[RepositoryRuleBranchNamePatternPropParametersType]


class RepositoryRuleBranchNamePatternPropParametersType(TypedDict):
    """RepositoryRuleBranchNamePatternPropParameters"""

    name: NotRequired[str]
    negate: NotRequired[bool]
    operator: Literal["starts_with", "ends_with", "contains", "regex"]
    pattern: str


class RepositoryRuleTagNamePatternType(TypedDict):
    """tag_name_pattern

    Parameters to be used for the tag_name_pattern rule
    """

    type: Literal["tag_name_pattern"]
    parameters: NotRequired[RepositoryRuleTagNamePatternPropParametersType]


class RepositoryRuleTagNamePatternPropParametersType(TypedDict):
    """RepositoryRuleTagNamePatternPropParameters"""

    name: NotRequired[str]
    negate: NotRequired[bool]
    operator: Literal["starts_with", "ends_with", "contains", "regex"]
    pattern: str


class RepositoryRuleParamsWorkflowFileReferenceType(TypedDict):
    """WorkflowFileReference

    A workflow that must run for this rule to pass
    """

    path: str
    ref: NotRequired[str]
    repository_id: int
    sha: NotRequired[str]


class RepositoryRuleWorkflowsType(TypedDict):
    """workflows

    Require all changes made to a targeted branch to pass the specified workflows
    before they can be merged.
    """

    type: Literal["workflows"]
    parameters: NotRequired[RepositoryRuleWorkflowsPropParametersType]


class RepositoryRuleWorkflowsPropParametersType(TypedDict):
    """RepositoryRuleWorkflowsPropParameters"""

    workflows: List[RepositoryRuleParamsWorkflowFileReferenceType]


class RepositoryRulesetType(TypedDict):
    """Repository ruleset

    A set of rules to apply when specified conditions are met.
    """

    id: int
    name: str
    target: NotRequired[Literal["branch", "tag"]]
    source_type: NotRequired[Literal["Repository", "Organization"]]
    source: str
    enforcement: Literal["disabled", "active", "evaluate"]
    bypass_actors: NotRequired[List[RepositoryRulesetBypassActorType]]
    current_user_can_bypass: NotRequired[
        Literal["always", "pull_requests_only", "never"]
    ]
    node_id: NotRequired[str]
    links: NotRequired[RepositoryRulesetPropLinksType]
    conditions: NotRequired[
        Union[
            RepositoryRulesetConditionsType,
            OrgRulesetConditionsOneof0Type,
            OrgRulesetConditionsOneof1Type,
        ]
    ]
    rules: NotRequired[
        List[
            Union[
                RepositoryRuleCreationType,
                RepositoryRuleUpdateType,
                RepositoryRuleDeletionType,
                RepositoryRuleRequiredLinearHistoryType,
                RepositoryRuleRequiredDeploymentsType,
                RepositoryRuleRequiredSignaturesType,
                RepositoryRulePullRequestType,
                RepositoryRuleRequiredStatusChecksType,
                RepositoryRuleNonFastForwardType,
                RepositoryRuleCommitMessagePatternType,
                RepositoryRuleCommitAuthorEmailPatternType,
                RepositoryRuleCommitterEmailPatternType,
                RepositoryRuleBranchNamePatternType,
                RepositoryRuleTagNamePatternType,
                RepositoryRuleWorkflowsType,
            ]
        ]
    ]
    created_at: NotRequired[datetime]
    updated_at: NotRequired[datetime]


class RepositoryRulesetPropLinksType(TypedDict):
    """RepositoryRulesetPropLinks"""

    self_: NotRequired[RepositoryRulesetPropLinksPropSelfType]
    html: NotRequired[RepositoryRulesetPropLinksPropHtmlType]


class RepositoryRulesetPropLinksPropSelfType(TypedDict):
    """RepositoryRulesetPropLinksPropSelf"""

    href: NotRequired[str]


class RepositoryRulesetPropLinksPropHtmlType(TypedDict):
    """RepositoryRulesetPropLinksPropHtml"""

    href: NotRequired[str]


class RuleSuitesItemsType(TypedDict):
    """RuleSuitesItems"""

    id: NotRequired[int]
    actor_id: NotRequired[int]
    actor_name: NotRequired[str]
    before_sha: NotRequired[str]
    after_sha: NotRequired[str]
    ref: NotRequired[str]
    repository_id: NotRequired[int]
    repository_name: NotRequired[str]
    pushed_at: NotRequired[datetime]
    result: NotRequired[Literal["pass", "fail", "bypass"]]
    evaluation_result: NotRequired[Literal["pass", "fail"]]


class RuleSuiteType(TypedDict):
    """Rule Suite

    Response
    """

    id: NotRequired[int]
    actor_id: NotRequired[int]
    actor_name: NotRequired[str]
    before_sha: NotRequired[str]
    after_sha: NotRequired[str]
    ref: NotRequired[str]
    repository_id: NotRequired[int]
    repository_name: NotRequired[str]
    pushed_at: NotRequired[datetime]
    result: NotRequired[Literal["pass", "fail", "bypass"]]
    evaluation_result: NotRequired[Literal["pass", "fail"]]
    rule_evaluations: NotRequired[List[RuleSuitePropRuleEvaluationsItemsType]]


class RuleSuitePropRuleEvaluationsItemsType(TypedDict):
    """RuleSuitePropRuleEvaluationsItems"""

    rule_source: NotRequired[RuleSuitePropRuleEvaluationsItemsPropRuleSourceType]
    enforcement: NotRequired[Literal["active", "evaluate", "deleted ruleset"]]
    result: NotRequired[Literal["pass", "fail"]]
    rule_type: NotRequired[str]
    details: NotRequired[str]


class RuleSuitePropRuleEvaluationsItemsPropRuleSourceType(TypedDict):
    """RuleSuitePropRuleEvaluationsItemsPropRuleSource"""

    type: NotRequired[str]
    id: NotRequired[Union[int, None]]
    name: NotRequired[Union[str, None]]


class RepositoryAdvisoryVulnerabilityType(TypedDict):
    """RepositoryAdvisoryVulnerability

    A product affected by the vulnerability detailed in a repository security
    advisory.
    """

    package: Union[RepositoryAdvisoryVulnerabilityPropPackageType, None]
    vulnerable_version_range: Union[str, None]
    patched_versions: Union[str, None]
    vulnerable_functions: Union[List[str], None]


class RepositoryAdvisoryVulnerabilityPropPackageType(TypedDict):
    """RepositoryAdvisoryVulnerabilityPropPackage

    The name of the package affected by the vulnerability.
    """

    ecosystem: Literal[
        "rubygems",
        "npm",
        "pip",
        "maven",
        "nuget",
        "composer",
        "go",
        "rust",
        "erlang",
        "actions",
        "pub",
        "other",
        "swift",
    ]
    name: Union[str, None]


class RepositoryAdvisoryCreditType(TypedDict):
    """RepositoryAdvisoryCredit

    A credit given to a user for a repository security advisory.
    """

    user: SimpleUserType
    type: Literal[
        "analyst",
        "finder",
        "reporter",
        "coordinator",
        "remediation_developer",
        "remediation_reviewer",
        "remediation_verifier",
        "tool",
        "sponsor",
        "other",
    ]
    state: Literal["accepted", "declined", "pending"]


class RepositoryAdvisoryType(TypedDict):
    """RepositoryAdvisory

    A repository security advisory.
    """

    ghsa_id: str
    cve_id: Union[str, None]
    url: str
    html_url: str
    summary: str
    description: Union[str, None]
    severity: Union[None, Literal["critical", "high", "medium", "low"]]
    author: None
    publisher: None
    identifiers: List[RepositoryAdvisoryPropIdentifiersItemsType]
    state: Literal["published", "closed", "withdrawn", "draft", "triage"]
    created_at: Union[datetime, None]
    updated_at: Union[datetime, None]
    published_at: Union[datetime, None]
    closed_at: Union[datetime, None]
    withdrawn_at: Union[datetime, None]
    submission: Union[RepositoryAdvisoryPropSubmissionType, None]
    vulnerabilities: Union[List[RepositoryAdvisoryVulnerabilityType], None]
    cvss: Union[RepositoryAdvisoryPropCvssType, None]
    cwes: Union[List[RepositoryAdvisoryPropCwesItemsType], None]
    cwe_ids: Union[List[str], None]
    credits_: Union[List[RepositoryAdvisoryPropCreditsItemsType], None]
    credits_detailed: Union[List[RepositoryAdvisoryCreditType], None]
    collaborating_users: Union[List[SimpleUserType], None]
    collaborating_teams: Union[List[TeamType], None]
    private_fork: None


class RepositoryAdvisoryPropIdentifiersItemsType(TypedDict):
    """RepositoryAdvisoryPropIdentifiersItems"""

    type: Literal["CVE", "GHSA"]
    value: str


class RepositoryAdvisoryPropSubmissionType(TypedDict):
    """RepositoryAdvisoryPropSubmission"""

    accepted: bool


class RepositoryAdvisoryPropCvssType(TypedDict):
    """RepositoryAdvisoryPropCvss"""

    vector_string: Union[str, None]
    score: Union[float, None]


class RepositoryAdvisoryPropCwesItemsType(TypedDict):
    """RepositoryAdvisoryPropCwesItems"""

    cwe_id: str
    name: str


class RepositoryAdvisoryPropCreditsItemsType(TypedDict):
    """RepositoryAdvisoryPropCreditsItems"""

    login: NotRequired[str]
    type: NotRequired[
        Literal[
            "analyst",
            "finder",
            "reporter",
            "coordinator",
            "remediation_developer",
            "remediation_reviewer",
            "remediation_verifier",
            "tool",
            "sponsor",
            "other",
        ]
    ]


class ActionsBillingUsageType(TypedDict):
    """ActionsBillingUsage"""

    total_minutes_used: int
    total_paid_minutes_used: int
    included_minutes: int
    minutes_used_breakdown: ActionsBillingUsagePropMinutesUsedBreakdownType


class ActionsBillingUsagePropMinutesUsedBreakdownType(TypedDict):
    """ActionsBillingUsagePropMinutesUsedBreakdown"""

    ubuntu: NotRequired[int]
    macos: NotRequired[int]
    windows: NotRequired[int]
    ubuntu_4_core: NotRequired[int]
    ubuntu_8_core: NotRequired[int]
    ubuntu_16_core: NotRequired[int]
    ubuntu_32_core: NotRequired[int]
    ubuntu_64_core: NotRequired[int]
    windows_4_core: NotRequired[int]
    windows_8_core: NotRequired[int]
    windows_16_core: NotRequired[int]
    windows_32_core: NotRequired[int]
    windows_64_core: NotRequired[int]
    macos_12_core: NotRequired[int]
    total: NotRequired[int]


class PackagesBillingUsageType(TypedDict):
    """PackagesBillingUsage"""

    total_gigabytes_bandwidth_used: int
    total_paid_gigabytes_bandwidth_used: int
    included_gigabytes_bandwidth: int


class CombinedBillingUsageType(TypedDict):
    """CombinedBillingUsage"""

    days_left_in_billing_cycle: int
    estimated_paid_storage_for_month: int
    estimated_storage_for_month: int


class TeamOrganizationType(TypedDict):
    """Team Organization

    Team Organization
    """

    login: str
    id: int
    node_id: str
    url: str
    repos_url: str
    events_url: str
    hooks_url: str
    issues_url: str
    members_url: str
    public_members_url: str
    avatar_url: str
    description: Union[str, None]
    name: NotRequired[Union[str, None]]
    company: NotRequired[Union[str, None]]
    blog: NotRequired[Union[str, None]]
    location: NotRequired[Union[str, None]]
    email: NotRequired[Union[str, None]]
    twitter_username: NotRequired[Union[str, None]]
    is_verified: NotRequired[bool]
    has_organization_projects: bool
    has_repository_projects: bool
    public_repos: int
    public_gists: int
    followers: int
    following: int
    html_url: str
    created_at: datetime
    type: str
    total_private_repos: NotRequired[int]
    owned_private_repos: NotRequired[int]
    private_gists: NotRequired[Union[int, None]]
    disk_usage: NotRequired[Union[int, None]]
    collaborators: NotRequired[Union[int, None]]
    billing_email: NotRequired[Union[str, None]]
    plan: NotRequired[TeamOrganizationPropPlanType]
    default_repository_permission: NotRequired[Union[str, None]]
    members_can_create_repositories: NotRequired[Union[bool, None]]
    two_factor_requirement_enabled: NotRequired[Union[bool, None]]
    members_allowed_repository_creation_type: NotRequired[str]
    members_can_create_public_repositories: NotRequired[bool]
    members_can_create_private_repositories: NotRequired[bool]
    members_can_create_internal_repositories: NotRequired[bool]
    members_can_create_pages: NotRequired[bool]
    members_can_create_public_pages: NotRequired[bool]
    members_can_create_private_pages: NotRequired[bool]
    members_can_fork_private_repositories: NotRequired[Union[bool, None]]
    web_commit_signoff_required: NotRequired[bool]
    updated_at: datetime
    archived_at: Union[datetime, None]


class TeamOrganizationPropPlanType(TypedDict):
    """TeamOrganizationPropPlan"""

    name: str
    space: int
    private_repos: int
    filled_seats: NotRequired[int]
    seats: NotRequired[int]


class TeamFullType(TypedDict):
    """Full Team

    Groups of organization members that gives permissions on specified repositories.
    """

    id: int
    node_id: str
    url: str
    html_url: str
    name: str
    slug: str
    description: Union[str, None]
    privacy: NotRequired[Literal["closed", "secret"]]
    notification_setting: NotRequired[
        Literal["notifications_enabled", "notifications_disabled"]
    ]
    permission: str
    members_url: str
    repositories_url: str
    parent: NotRequired[Union[None, TeamSimpleType]]
    members_count: int
    repos_count: int
    created_at: datetime
    updated_at: datetime
    organization: TeamOrganizationType
    ldap_dn: NotRequired[str]


class TeamDiscussionType(TypedDict):
    """Team Discussion

    A team discussion is a persistent record of a free-form conversation within a
    team.
    """

    author: Union[None, SimpleUserType]
    body: str
    body_html: str
    body_version: str
    comments_count: int
    comments_url: str
    created_at: datetime
    last_edited_at: Union[datetime, None]
    html_url: str
    node_id: str
    number: int
    pinned: bool
    private: bool
    team_url: str
    title: str
    updated_at: datetime
    url: str
    reactions: NotRequired[ReactionRollupType]


class TeamDiscussionCommentType(TypedDict):
    """Team Discussion Comment

    A reply to a discussion within a team.
    """

    author: Union[None, SimpleUserType]
    body: str
    body_html: str
    body_version: str
    created_at: datetime
    last_edited_at: Union[datetime, None]
    discussion_url: str
    html_url: str
    node_id: str
    number: int
    updated_at: datetime
    url: str
    reactions: NotRequired[ReactionRollupType]


class ReactionType(TypedDict):
    """Reaction

    Reactions to conversations provide a way to help people express their feelings
    more simply and effectively.
    """

    id: int
    node_id: str
    user: Union[None, SimpleUserType]
    content: Literal[
        "+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"
    ]
    created_at: datetime


class TeamMembershipType(TypedDict):
    """Team Membership

    Team Membership
    """

    url: str
    role: Literal["member", "maintainer"]
    state: Literal["active", "pending"]


class TeamProjectType(TypedDict):
    """Team Project

    A team's access to a project.
    """

    owner_url: str
    url: str
    html_url: str
    columns_url: str
    id: int
    node_id: str
    name: str
    body: Union[str, None]
    number: int
    state: str
    creator: SimpleUserType
    created_at: str
    updated_at: str
    organization_permission: NotRequired[str]
    private: NotRequired[bool]
    permissions: TeamProjectPropPermissionsType


class TeamProjectPropPermissionsType(TypedDict):
    """TeamProjectPropPermissions"""

    read: bool
    write: bool
    admin: bool


class TeamRepositoryType(TypedDict):
    """Team Repository

    A team's access to a repository.
    """

    id: int
    node_id: str
    name: str
    full_name: str
    license_: Union[None, LicenseSimpleType]
    forks: int
    permissions: NotRequired[TeamRepositoryPropPermissionsType]
    role_name: NotRequired[str]
    owner: Union[None, SimpleUserType]
    private: bool
    html_url: str
    description: Union[str, None]
    fork: bool
    url: str
    archive_url: str
    assignees_url: str
    blobs_url: str
    branches_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    deployments_url: str
    downloads_url: str
    events_url: str
    forks_url: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    languages_url: str
    merges_url: str
    milestones_url: str
    notifications_url: str
    pulls_url: str
    releases_url: str
    ssh_url: str
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    tags_url: str
    teams_url: str
    trees_url: str
    clone_url: str
    mirror_url: Union[str, None]
    hooks_url: str
    svn_url: str
    homepage: Union[str, None]
    language: Union[str, None]
    forks_count: int
    stargazers_count: int
    watchers_count: int
    size: int
    default_branch: str
    open_issues_count: int
    is_template: NotRequired[bool]
    topics: NotRequired[List[str]]
    has_issues: bool
    has_projects: bool
    has_wiki: bool
    has_pages: bool
    has_downloads: bool
    archived: bool
    disabled: bool
    visibility: NotRequired[str]
    pushed_at: Union[datetime, None]
    created_at: Union[datetime, None]
    updated_at: Union[datetime, None]
    allow_rebase_merge: NotRequired[bool]
    temp_clone_token: NotRequired[Union[str, None]]
    allow_squash_merge: NotRequired[bool]
    allow_auto_merge: NotRequired[bool]
    delete_branch_on_merge: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_forking: NotRequired[bool]
    web_commit_signoff_required: NotRequired[bool]
    subscribers_count: NotRequired[int]
    network_count: NotRequired[int]
    open_issues: int
    watchers: int
    master_branch: NotRequired[str]


class TeamRepositoryPropPermissionsType(TypedDict):
    """TeamRepositoryPropPermissions"""

    admin: bool
    pull: bool
    triage: NotRequired[bool]
    push: bool
    maintain: NotRequired[bool]


class ProjectCardType(TypedDict):
    """Project Card

    Project cards represent a scope of work.
    """

    url: str
    id: int
    node_id: str
    note: Union[str, None]
    creator: Union[None, SimpleUserType]
    created_at: datetime
    updated_at: datetime
    archived: NotRequired[bool]
    column_name: NotRequired[str]
    project_id: NotRequired[str]
    column_url: str
    content_url: NotRequired[str]
    project_url: str


class ProjectColumnType(TypedDict):
    """Project Column

    Project columns contain cards of work.
    """

    url: str
    project_url: str
    cards_url: str
    id: int
    node_id: str
    name: str
    created_at: datetime
    updated_at: datetime


class ProjectCollaboratorPermissionType(TypedDict):
    """Project Collaborator Permission

    Project Collaborator Permission
    """

    permission: str
    user: Union[None, SimpleUserType]


class RateLimitType(TypedDict):
    """Rate Limit"""

    limit: int
    remaining: int
    reset: int
    used: int


class RateLimitOverviewType(TypedDict):
    """Rate Limit Overview

    Rate Limit Overview
    """

    resources: RateLimitOverviewPropResourcesType
    rate: RateLimitType


class RateLimitOverviewPropResourcesType(TypedDict):
    """RateLimitOverviewPropResources"""

    core: RateLimitType
    graphql: NotRequired[RateLimitType]
    search: RateLimitType
    code_search: NotRequired[RateLimitType]
    source_import: NotRequired[RateLimitType]
    integration_manifest: NotRequired[RateLimitType]
    code_scanning_upload: NotRequired[RateLimitType]
    actions_runner_registration: NotRequired[RateLimitType]
    scim: NotRequired[RateLimitType]
    dependency_snapshots: NotRequired[RateLimitType]


class ArtifactType(TypedDict):
    """Artifact

    An artifact
    """

    id: int
    node_id: str
    name: str
    size_in_bytes: int
    url: str
    archive_download_url: str
    expired: bool
    created_at: Union[datetime, None]
    expires_at: Union[datetime, None]
    updated_at: Union[datetime, None]
    workflow_run: NotRequired[Union[ArtifactPropWorkflowRunType, None]]


class ArtifactPropWorkflowRunType(TypedDict):
    """ArtifactPropWorkflowRun"""

    id: NotRequired[int]
    repository_id: NotRequired[int]
    head_repository_id: NotRequired[int]
    head_branch: NotRequired[str]
    head_sha: NotRequired[str]


class ActionsCacheListType(TypedDict):
    """Repository actions caches

    Repository actions caches
    """

    total_count: int
    actions_caches: List[ActionsCacheListPropActionsCachesItemsType]


class ActionsCacheListPropActionsCachesItemsType(TypedDict):
    """ActionsCacheListPropActionsCachesItems"""

    id: NotRequired[int]
    ref: NotRequired[str]
    key: NotRequired[str]
    version: NotRequired[str]
    last_accessed_at: NotRequired[datetime]
    created_at: NotRequired[datetime]
    size_in_bytes: NotRequired[int]


class JobType(TypedDict):
    """Job

    Information of a job execution in a workflow run
    """

    id: int
    run_id: int
    run_url: str
    run_attempt: NotRequired[int]
    node_id: str
    head_sha: str
    url: str
    html_url: Union[str, None]
    status: Literal["queued", "in_progress", "completed", "waiting"]
    conclusion: Union[
        None,
        Literal[
            "success",
            "failure",
            "neutral",
            "cancelled",
            "skipped",
            "timed_out",
            "action_required",
        ],
    ]
    created_at: datetime
    started_at: datetime
    completed_at: Union[datetime, None]
    name: str
    steps: NotRequired[List[JobPropStepsItemsType]]
    check_run_url: str
    labels: List[str]
    runner_id: Union[int, None]
    runner_name: Union[str, None]
    runner_group_id: Union[int, None]
    runner_group_name: Union[str, None]
    workflow_name: Union[str, None]
    head_branch: Union[str, None]


class JobPropStepsItemsType(TypedDict):
    """JobPropStepsItems"""

    status: Literal["queued", "in_progress", "completed"]
    conclusion: Union[str, None]
    name: str
    number: int
    started_at: NotRequired[Union[datetime, None]]
    completed_at: NotRequired[Union[datetime, None]]


class OidcCustomSubRepoType(TypedDict):
    """Actions OIDC subject customization for a repository

    Actions OIDC subject customization for a repository
    """

    use_default: bool
    include_claim_keys: NotRequired[List[str]]


class ActionsSecretType(TypedDict):
    """Actions Secret

    Set secrets for GitHub Actions.
    """

    name: str
    created_at: datetime
    updated_at: datetime


class ActionsVariableType(TypedDict):
    """Actions Variable"""

    name: str
    value: str
    created_at: datetime
    updated_at: datetime


class ActionsRepositoryPermissionsType(TypedDict):
    """ActionsRepositoryPermissions"""

    enabled: bool
    allowed_actions: NotRequired[Literal["all", "local_only", "selected"]]
    selected_actions_url: NotRequired[str]


class ActionsWorkflowAccessToRepositoryType(TypedDict):
    """ActionsWorkflowAccessToRepository"""

    access_level: Literal["none", "user", "organization"]


class ReferencedWorkflowType(TypedDict):
    """Referenced workflow

    A workflow referenced/reused by the initial caller workflow
    """

    path: str
    sha: str
    ref: NotRequired[str]


class PullRequestMinimalType(TypedDict):
    """Pull Request Minimal"""

    id: int
    number: int
    url: str
    head: PullRequestMinimalPropHeadType
    base: PullRequestMinimalPropBaseType


class PullRequestMinimalPropHeadType(TypedDict):
    """PullRequestMinimalPropHead"""

    ref: str
    sha: str
    repo: PullRequestMinimalPropHeadPropRepoType


class PullRequestMinimalPropHeadPropRepoType(TypedDict):
    """PullRequestMinimalPropHeadPropRepo"""

    id: int
    url: str
    name: str


class PullRequestMinimalPropBaseType(TypedDict):
    """PullRequestMinimalPropBase"""

    ref: str
    sha: str
    repo: PullRequestMinimalPropBasePropRepoType


class PullRequestMinimalPropBasePropRepoType(TypedDict):
    """PullRequestMinimalPropBasePropRepo"""

    id: int
    url: str
    name: str


class SimpleCommitType(TypedDict):
    """Simple Commit

    A commit.
    """

    id: str
    tree_id: str
    message: str
    timestamp: datetime
    author: Union[SimpleCommitPropAuthorType, None]
    committer: Union[SimpleCommitPropCommitterType, None]


class SimpleCommitPropAuthorType(TypedDict):
    """SimpleCommitPropAuthor

    Information about the Git author
    """

    name: str
    email: str


class SimpleCommitPropCommitterType(TypedDict):
    """SimpleCommitPropCommitter

    Information about the Git committer
    """

    name: str
    email: str


class WorkflowRunType(TypedDict):
    """Workflow Run

    An invocation of a workflow
    """

    id: int
    name: NotRequired[Union[str, None]]
    node_id: str
    check_suite_id: NotRequired[int]
    check_suite_node_id: NotRequired[str]
    head_branch: Union[str, None]
    head_sha: str
    path: str
    run_number: int
    run_attempt: NotRequired[int]
    referenced_workflows: NotRequired[Union[List[ReferencedWorkflowType], None]]
    event: str
    status: Union[str, None]
    conclusion: Union[str, None]
    workflow_id: int
    url: str
    html_url: str
    pull_requests: Union[List[PullRequestMinimalType], None]
    created_at: datetime
    updated_at: datetime
    actor: NotRequired[SimpleUserType]
    triggering_actor: NotRequired[SimpleUserType]
    run_started_at: NotRequired[datetime]
    jobs_url: str
    logs_url: str
    check_suite_url: str
    artifacts_url: str
    cancel_url: str
    rerun_url: str
    previous_attempt_url: NotRequired[Union[str, None]]
    workflow_url: str
    head_commit: Union[None, SimpleCommitType]
    repository: MinimalRepositoryType
    head_repository: MinimalRepositoryType
    head_repository_id: NotRequired[int]
    display_title: str


class EnvironmentApprovalsType(TypedDict):
    """Environment Approval

    An entry in the reviews log for environment deployments
    """

    environments: List[EnvironmentApprovalsPropEnvironmentsItemsType]
    state: Literal["approved", "rejected", "pending"]
    user: SimpleUserType
    comment: str


class EnvironmentApprovalsPropEnvironmentsItemsType(TypedDict):
    """EnvironmentApprovalsPropEnvironmentsItems"""

    id: NotRequired[int]
    node_id: NotRequired[str]
    name: NotRequired[str]
    url: NotRequired[str]
    html_url: NotRequired[str]
    created_at: NotRequired[datetime]
    updated_at: NotRequired[datetime]


class ReviewCustomGatesCommentRequiredType(TypedDict):
    """ReviewCustomGatesCommentRequired"""

    environment_name: str
    comment: str


class ReviewCustomGatesStateRequiredType(TypedDict):
    """ReviewCustomGatesStateRequired"""

    environment_name: str
    state: Literal["approved", "rejected"]
    comment: NotRequired[str]


class PendingDeploymentType(TypedDict):
    """Pending Deployment

    Details of a deployment that is waiting for protection rules to pass
    """

    environment: PendingDeploymentPropEnvironmentType
    wait_timer: int
    wait_timer_started_at: Union[datetime, None]
    current_user_can_approve: bool
    reviewers: List[PendingDeploymentPropReviewersItemsType]


class PendingDeploymentPropEnvironmentType(TypedDict):
    """PendingDeploymentPropEnvironment"""

    id: NotRequired[int]
    node_id: NotRequired[str]
    name: NotRequired[str]
    url: NotRequired[str]
    html_url: NotRequired[str]


class PendingDeploymentPropReviewersItemsType(TypedDict):
    """PendingDeploymentPropReviewersItems"""

    type: NotRequired[Literal["User", "Team"]]
    reviewer: NotRequired[Union[SimpleUserType, TeamType]]


class DeploymentType(TypedDict):
    """Deployment

    A request for a specific ref(branch,sha,tag) to be deployed
    """

    url: str
    id: int
    node_id: str
    sha: str
    ref: str
    task: str
    payload: Union[DeploymentPropPayloadOneof0Type, str]
    original_environment: NotRequired[str]
    environment: str
    description: Union[str, None]
    creator: Union[None, SimpleUserType]
    created_at: datetime
    updated_at: datetime
    statuses_url: str
    repository_url: str
    transient_environment: NotRequired[bool]
    production_environment: NotRequired[bool]
    performed_via_github_app: NotRequired[Union[None, IntegrationType]]


class DeploymentPropPayloadOneof0Type(TypedDict):
    """DeploymentPropPayloadOneof0"""


class WorkflowRunUsageType(TypedDict):
    """Workflow Run Usage

    Workflow Run Usage
    """

    billable: WorkflowRunUsagePropBillableType
    run_duration_ms: NotRequired[int]


class WorkflowRunUsagePropBillableType(TypedDict):
    """WorkflowRunUsagePropBillable"""

    ubuntu: NotRequired[WorkflowRunUsagePropBillablePropUbuntuType]
    macos: NotRequired[WorkflowRunUsagePropBillablePropMacosType]
    windows: NotRequired[WorkflowRunUsagePropBillablePropWindowsType]


class WorkflowRunUsagePropBillablePropUbuntuType(TypedDict):
    """WorkflowRunUsagePropBillablePropUbuntu"""

    total_ms: int
    jobs: int
    job_runs: NotRequired[
        List[WorkflowRunUsagePropBillablePropUbuntuPropJobRunsItemsType]
    ]


class WorkflowRunUsagePropBillablePropUbuntuPropJobRunsItemsType(TypedDict):
    """WorkflowRunUsagePropBillablePropUbuntuPropJobRunsItems"""

    job_id: int
    duration_ms: int


class WorkflowRunUsagePropBillablePropMacosType(TypedDict):
    """WorkflowRunUsagePropBillablePropMacos"""

    total_ms: int
    jobs: int
    job_runs: NotRequired[
        List[WorkflowRunUsagePropBillablePropMacosPropJobRunsItemsType]
    ]


class WorkflowRunUsagePropBillablePropMacosPropJobRunsItemsType(TypedDict):
    """WorkflowRunUsagePropBillablePropMacosPropJobRunsItems"""

    job_id: int
    duration_ms: int


class WorkflowRunUsagePropBillablePropWindowsType(TypedDict):
    """WorkflowRunUsagePropBillablePropWindows"""

    total_ms: int
    jobs: int
    job_runs: NotRequired[
        List[WorkflowRunUsagePropBillablePropWindowsPropJobRunsItemsType]
    ]


class WorkflowRunUsagePropBillablePropWindowsPropJobRunsItemsType(TypedDict):
    """WorkflowRunUsagePropBillablePropWindowsPropJobRunsItems"""

    job_id: int
    duration_ms: int


class WorkflowType(TypedDict):
    """Workflow

    A GitHub Actions workflow
    """

    id: int
    node_id: str
    name: str
    path: str
    state: Literal[
        "active", "deleted", "disabled_fork", "disabled_inactivity", "disabled_manually"
    ]
    created_at: datetime
    updated_at: datetime
    url: str
    html_url: str
    badge_url: str
    deleted_at: NotRequired[datetime]


class WorkflowUsageType(TypedDict):
    """Workflow Usage

    Workflow Usage
    """

    billable: WorkflowUsagePropBillableType


class WorkflowUsagePropBillableType(TypedDict):
    """WorkflowUsagePropBillable"""

    ubuntu: NotRequired[WorkflowUsagePropBillablePropUbuntuType]
    macos: NotRequired[WorkflowUsagePropBillablePropMacosType]
    windows: NotRequired[WorkflowUsagePropBillablePropWindowsType]


class WorkflowUsagePropBillablePropUbuntuType(TypedDict):
    """WorkflowUsagePropBillablePropUbuntu"""

    total_ms: NotRequired[int]


class WorkflowUsagePropBillablePropMacosType(TypedDict):
    """WorkflowUsagePropBillablePropMacos"""

    total_ms: NotRequired[int]


class WorkflowUsagePropBillablePropWindowsType(TypedDict):
    """WorkflowUsagePropBillablePropWindows"""

    total_ms: NotRequired[int]


class ActivityType(TypedDict):
    """Activity

    Activity
    """

    id: int
    node_id: str
    before: str
    after: str
    ref: str
    timestamp: datetime
    activity_type: Literal[
        "push",
        "force_push",
        "branch_deletion",
        "branch_creation",
        "pr_merge",
        "merge_queue_merge",
    ]
    actor: Union[None, SimpleUserType]


class AutolinkType(TypedDict):
    """Autolink reference

    An autolink reference.
    """

    id: int
    key_prefix: str
    url_template: str
    is_alphanumeric: bool


class CheckAutomatedSecurityFixesType(TypedDict):
    """Check Automated Security Fixes

    Check Automated Security Fixes
    """

    enabled: bool
    paused: bool


class ProtectedBranchRequiredStatusCheckType(TypedDict):
    """Protected Branch Required Status Check

    Protected Branch Required Status Check
    """

    url: NotRequired[str]
    enforcement_level: NotRequired[str]
    contexts: List[str]
    checks: List[ProtectedBranchRequiredStatusCheckPropChecksItemsType]
    contexts_url: NotRequired[str]
    strict: NotRequired[bool]


class ProtectedBranchRequiredStatusCheckPropChecksItemsType(TypedDict):
    """ProtectedBranchRequiredStatusCheckPropChecksItems"""

    context: str
    app_id: Union[int, None]


class ProtectedBranchAdminEnforcedType(TypedDict):
    """Protected Branch Admin Enforced

    Protected Branch Admin Enforced
    """

    url: str
    enabled: bool


class ProtectedBranchPullRequestReviewType(TypedDict):
    """Protected Branch Pull Request Review

    Protected Branch Pull Request Review
    """

    url: NotRequired[str]
    dismissal_restrictions: NotRequired[
        ProtectedBranchPullRequestReviewPropDismissalRestrictionsType
    ]
    bypass_pull_request_allowances: NotRequired[
        ProtectedBranchPullRequestReviewPropBypassPullRequestAllowancesType
    ]
    dismiss_stale_reviews: bool
    require_code_owner_reviews: bool
    required_approving_review_count: NotRequired[int]
    require_last_push_approval: NotRequired[bool]


class ProtectedBranchPullRequestReviewPropDismissalRestrictionsType(TypedDict):
    """ProtectedBranchPullRequestReviewPropDismissalRestrictions"""

    users: NotRequired[List[SimpleUserType]]
    teams: NotRequired[List[TeamType]]
    apps: NotRequired[List[IntegrationType]]
    url: NotRequired[str]
    users_url: NotRequired[str]
    teams_url: NotRequired[str]


class ProtectedBranchPullRequestReviewPropBypassPullRequestAllowancesType(TypedDict):
    """ProtectedBranchPullRequestReviewPropBypassPullRequestAllowances

    Allow specific users, teams, or apps to bypass pull request requirements.
    """

    users: NotRequired[List[SimpleUserType]]
    teams: NotRequired[List[TeamType]]
    apps: NotRequired[List[IntegrationType]]


class BranchRestrictionPolicyType(TypedDict):
    """Branch Restriction Policy

    Branch Restriction Policy
    """

    url: str
    users_url: str
    teams_url: str
    apps_url: str
    users: List[BranchRestrictionPolicyPropUsersItemsType]
    teams: List[BranchRestrictionPolicyPropTeamsItemsType]
    apps: List[BranchRestrictionPolicyPropAppsItemsType]


class BranchRestrictionPolicyPropUsersItemsType(TypedDict):
    """BranchRestrictionPolicyPropUsersItems"""

    login: NotRequired[str]
    id: NotRequired[int]
    node_id: NotRequired[str]
    avatar_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    url: NotRequired[str]
    html_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    organizations_url: NotRequired[str]
    repos_url: NotRequired[str]
    events_url: NotRequired[str]
    received_events_url: NotRequired[str]
    type: NotRequired[str]
    site_admin: NotRequired[bool]


class BranchRestrictionPolicyPropTeamsItemsType(TypedDict):
    """BranchRestrictionPolicyPropTeamsItems"""

    id: NotRequired[int]
    node_id: NotRequired[str]
    url: NotRequired[str]
    html_url: NotRequired[str]
    name: NotRequired[str]
    slug: NotRequired[str]
    description: NotRequired[Union[str, None]]
    privacy: NotRequired[str]
    notification_setting: NotRequired[str]
    permission: NotRequired[str]
    members_url: NotRequired[str]
    repositories_url: NotRequired[str]
    parent: NotRequired[Union[str, None]]


class BranchRestrictionPolicyPropAppsItemsType(TypedDict):
    """BranchRestrictionPolicyPropAppsItems"""

    id: NotRequired[int]
    slug: NotRequired[str]
    node_id: NotRequired[str]
    owner: NotRequired[BranchRestrictionPolicyPropAppsItemsPropOwnerType]
    name: NotRequired[str]
    description: NotRequired[str]
    external_url: NotRequired[str]
    html_url: NotRequired[str]
    created_at: NotRequired[str]
    updated_at: NotRequired[str]
    permissions: NotRequired[BranchRestrictionPolicyPropAppsItemsPropPermissionsType]
    events: NotRequired[List[str]]


class BranchRestrictionPolicyPropAppsItemsPropOwnerType(TypedDict):
    """BranchRestrictionPolicyPropAppsItemsPropOwner"""

    login: NotRequired[str]
    id: NotRequired[int]
    node_id: NotRequired[str]
    url: NotRequired[str]
    repos_url: NotRequired[str]
    events_url: NotRequired[str]
    hooks_url: NotRequired[str]
    issues_url: NotRequired[str]
    members_url: NotRequired[str]
    public_members_url: NotRequired[str]
    avatar_url: NotRequired[str]
    description: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    type: NotRequired[str]
    site_admin: NotRequired[bool]


class BranchRestrictionPolicyPropAppsItemsPropPermissionsType(TypedDict):
    """BranchRestrictionPolicyPropAppsItemsPropPermissions"""

    metadata: NotRequired[str]
    contents: NotRequired[str]
    issues: NotRequired[str]
    single_file: NotRequired[str]


class BranchProtectionType(TypedDict):
    """Branch Protection

    Branch Protection
    """

    url: NotRequired[str]
    enabled: NotRequired[bool]
    required_status_checks: NotRequired[ProtectedBranchRequiredStatusCheckType]
    enforce_admins: NotRequired[ProtectedBranchAdminEnforcedType]
    required_pull_request_reviews: NotRequired[ProtectedBranchPullRequestReviewType]
    restrictions: NotRequired[BranchRestrictionPolicyType]
    required_linear_history: NotRequired[BranchProtectionPropRequiredLinearHistoryType]
    allow_force_pushes: NotRequired[BranchProtectionPropAllowForcePushesType]
    allow_deletions: NotRequired[BranchProtectionPropAllowDeletionsType]
    block_creations: NotRequired[BranchProtectionPropBlockCreationsType]
    required_conversation_resolution: NotRequired[
        BranchProtectionPropRequiredConversationResolutionType
    ]
    name: NotRequired[str]
    protection_url: NotRequired[str]
    required_signatures: NotRequired[BranchProtectionPropRequiredSignaturesType]
    lock_branch: NotRequired[BranchProtectionPropLockBranchType]
    allow_fork_syncing: NotRequired[BranchProtectionPropAllowForkSyncingType]


class BranchProtectionPropRequiredLinearHistoryType(TypedDict):
    """BranchProtectionPropRequiredLinearHistory"""

    enabled: NotRequired[bool]


class BranchProtectionPropAllowForcePushesType(TypedDict):
    """BranchProtectionPropAllowForcePushes"""

    enabled: NotRequired[bool]


class BranchProtectionPropAllowDeletionsType(TypedDict):
    """BranchProtectionPropAllowDeletions"""

    enabled: NotRequired[bool]


class BranchProtectionPropBlockCreationsType(TypedDict):
    """BranchProtectionPropBlockCreations"""

    enabled: NotRequired[bool]


class BranchProtectionPropRequiredConversationResolutionType(TypedDict):
    """BranchProtectionPropRequiredConversationResolution"""

    enabled: NotRequired[bool]


class BranchProtectionPropRequiredSignaturesType(TypedDict):
    """BranchProtectionPropRequiredSignatures"""

    url: str
    enabled: bool


class BranchProtectionPropLockBranchType(TypedDict):
    """BranchProtectionPropLockBranch

    Whether to set the branch as read-only. If this is true, users will not be able
    to push to the branch.
    """

    enabled: NotRequired[bool]


class BranchProtectionPropAllowForkSyncingType(TypedDict):
    """BranchProtectionPropAllowForkSyncing

    Whether users can pull changes from upstream when the branch is locked. Set to
    `true` to allow fork syncing. Set to `false` to prevent fork syncing.
    """

    enabled: NotRequired[bool]


class ShortBranchType(TypedDict):
    """Short Branch

    Short Branch
    """

    name: str
    commit: ShortBranchPropCommitType
    protected: bool
    protection: NotRequired[BranchProtectionType]
    protection_url: NotRequired[str]


class ShortBranchPropCommitType(TypedDict):
    """ShortBranchPropCommit"""

    sha: str
    url: str


class GitUserType(TypedDict):
    """Git User

    Metaproperties for Git author/committer information.
    """

    name: NotRequired[str]
    email: NotRequired[str]
    date: NotRequired[str]


class VerificationType(TypedDict):
    """Verification"""

    verified: bool
    reason: str
    payload: Union[str, None]
    signature: Union[str, None]


class DiffEntryType(TypedDict):
    """Diff Entry

    Diff Entry
    """

    sha: str
    filename: str
    status: Literal[
        "added", "removed", "modified", "renamed", "copied", "changed", "unchanged"
    ]
    additions: int
    deletions: int
    changes: int
    blob_url: str
    raw_url: str
    contents_url: str
    patch: NotRequired[str]
    previous_filename: NotRequired[str]


class CommitType(TypedDict):
    """Commit

    Commit
    """

    url: str
    sha: str
    node_id: str
    html_url: str
    comments_url: str
    commit: CommitPropCommitType
    author: Union[None, SimpleUserType]
    committer: Union[None, SimpleUserType]
    parents: List[CommitPropParentsItemsType]
    stats: NotRequired[CommitPropStatsType]
    files: NotRequired[List[DiffEntryType]]


class CommitPropCommitType(TypedDict):
    """CommitPropCommit"""

    url: str
    author: Union[None, GitUserType]
    committer: Union[None, GitUserType]
    message: str
    comment_count: int
    tree: CommitPropCommitPropTreeType
    verification: NotRequired[VerificationType]


class CommitPropCommitPropTreeType(TypedDict):
    """CommitPropCommitPropTree"""

    sha: str
    url: str


class CommitPropParentsItemsType(TypedDict):
    """CommitPropParentsItems"""

    sha: str
    url: str
    html_url: NotRequired[str]


class CommitPropStatsType(TypedDict):
    """CommitPropStats"""

    additions: NotRequired[int]
    deletions: NotRequired[int]
    total: NotRequired[int]


class BranchWithProtectionType(TypedDict):
    """Branch With Protection

    Branch With Protection
    """

    name: str
    commit: CommitType
    links: BranchWithProtectionPropLinksType
    protected: bool
    protection: BranchProtectionType
    protection_url: str
    pattern: NotRequired[str]
    required_approving_review_count: NotRequired[int]


class BranchWithProtectionPropLinksType(TypedDict):
    """BranchWithProtectionPropLinks"""

    html: str
    self_: str


class StatusCheckPolicyType(TypedDict):
    """Status Check Policy

    Status Check Policy
    """

    url: str
    strict: bool
    contexts: List[str]
    checks: List[StatusCheckPolicyPropChecksItemsType]
    contexts_url: str


class StatusCheckPolicyPropChecksItemsType(TypedDict):
    """StatusCheckPolicyPropChecksItems"""

    context: str
    app_id: Union[int, None]


class ProtectedBranchType(TypedDict):
    """Protected Branch

    Branch protections protect branches
    """

    url: str
    required_status_checks: NotRequired[StatusCheckPolicyType]
    required_pull_request_reviews: NotRequired[
        ProtectedBranchPropRequiredPullRequestReviewsType
    ]
    required_signatures: NotRequired[ProtectedBranchPropRequiredSignaturesType]
    enforce_admins: NotRequired[ProtectedBranchPropEnforceAdminsType]
    required_linear_history: NotRequired[ProtectedBranchPropRequiredLinearHistoryType]
    allow_force_pushes: NotRequired[ProtectedBranchPropAllowForcePushesType]
    allow_deletions: NotRequired[ProtectedBranchPropAllowDeletionsType]
    restrictions: NotRequired[BranchRestrictionPolicyType]
    required_conversation_resolution: NotRequired[
        ProtectedBranchPropRequiredConversationResolutionType
    ]
    block_creations: NotRequired[ProtectedBranchPropBlockCreationsType]
    lock_branch: NotRequired[ProtectedBranchPropLockBranchType]
    allow_fork_syncing: NotRequired[ProtectedBranchPropAllowForkSyncingType]


class ProtectedBranchPropRequiredPullRequestReviewsType(TypedDict):
    """ProtectedBranchPropRequiredPullRequestReviews"""

    url: str
    dismiss_stale_reviews: NotRequired[bool]
    require_code_owner_reviews: NotRequired[bool]
    required_approving_review_count: NotRequired[int]
    require_last_push_approval: NotRequired[bool]
    dismissal_restrictions: NotRequired[
        ProtectedBranchPropRequiredPullRequestReviewsPropDismissalRestrictionsType
    ]
    bypass_pull_request_allowances: NotRequired[
        ProtectedBranchPropRequiredPullRequestReviewsPropBypassPullRequestAllowancesType
    ]


class ProtectedBranchPropRequiredPullRequestReviewsPropDismissalRestrictionsType(
    TypedDict
):
    """ProtectedBranchPropRequiredPullRequestReviewsPropDismissalRestrictions"""

    url: str
    users_url: str
    teams_url: str
    users: List[SimpleUserType]
    teams: List[TeamType]
    apps: NotRequired[List[IntegrationType]]


class ProtectedBranchPropRequiredPullRequestReviewsPropBypassPullRequestAllowancesType(
    TypedDict
):
    """ProtectedBranchPropRequiredPullRequestReviewsPropBypassPullRequestAllowances"""

    users: List[SimpleUserType]
    teams: List[TeamType]
    apps: NotRequired[List[IntegrationType]]


class ProtectedBranchPropRequiredSignaturesType(TypedDict):
    """ProtectedBranchPropRequiredSignatures"""

    url: str
    enabled: bool


class ProtectedBranchPropEnforceAdminsType(TypedDict):
    """ProtectedBranchPropEnforceAdmins"""

    url: str
    enabled: bool


class ProtectedBranchPropRequiredLinearHistoryType(TypedDict):
    """ProtectedBranchPropRequiredLinearHistory"""

    enabled: bool


class ProtectedBranchPropAllowForcePushesType(TypedDict):
    """ProtectedBranchPropAllowForcePushes"""

    enabled: bool


class ProtectedBranchPropAllowDeletionsType(TypedDict):
    """ProtectedBranchPropAllowDeletions"""

    enabled: bool


class ProtectedBranchPropRequiredConversationResolutionType(TypedDict):
    """ProtectedBranchPropRequiredConversationResolution"""

    enabled: NotRequired[bool]


class ProtectedBranchPropBlockCreationsType(TypedDict):
    """ProtectedBranchPropBlockCreations"""

    enabled: bool


class ProtectedBranchPropLockBranchType(TypedDict):
    """ProtectedBranchPropLockBranch

    Whether to set the branch as read-only. If this is true, users will not be able
    to push to the branch.
    """

    enabled: NotRequired[bool]


class ProtectedBranchPropAllowForkSyncingType(TypedDict):
    """ProtectedBranchPropAllowForkSyncing

    Whether users can pull changes from upstream when the branch is locked. Set to
    `true` to allow fork syncing. Set to `false` to prevent fork syncing.
    """

    enabled: NotRequired[bool]


class DeploymentSimpleType(TypedDict):
    """Deployment

    A deployment created as the result of an Actions check run from a workflow that
    references an environment
    """

    url: str
    id: int
    node_id: str
    task: str
    original_environment: NotRequired[str]
    environment: str
    description: Union[str, None]
    created_at: datetime
    updated_at: datetime
    statuses_url: str
    repository_url: str
    transient_environment: NotRequired[bool]
    production_environment: NotRequired[bool]
    performed_via_github_app: NotRequired[Union[None, IntegrationType]]


class CheckRunType(TypedDict):
    """CheckRun

    A check performed on the code of a given code change
    """

    id: int
    head_sha: str
    node_id: str
    external_id: Union[str, None]
    url: str
    html_url: Union[str, None]
    details_url: Union[str, None]
    status: Literal["queued", "in_progress", "completed"]
    conclusion: Union[
        None,
        Literal[
            "success",
            "failure",
            "neutral",
            "cancelled",
            "skipped",
            "timed_out",
            "action_required",
        ],
    ]
    started_at: Union[datetime, None]
    completed_at: Union[datetime, None]
    output: CheckRunPropOutputType
    name: str
    check_suite: Union[CheckRunPropCheckSuiteType, None]
    app: Union[None, IntegrationType]
    pull_requests: List[PullRequestMinimalType]
    deployment: NotRequired[DeploymentSimpleType]


class CheckRunPropOutputType(TypedDict):
    """CheckRunPropOutput"""

    title: Union[str, None]
    summary: Union[str, None]
    text: Union[str, None]
    annotations_count: int
    annotations_url: str


class CheckRunPropCheckSuiteType(TypedDict):
    """CheckRunPropCheckSuite"""

    id: int


class CheckAnnotationType(TypedDict):
    """Check Annotation

    Check Annotation
    """

    path: str
    start_line: int
    end_line: int
    start_column: Union[int, None]
    end_column: Union[int, None]
    annotation_level: Union[str, None]
    title: Union[str, None]
    message: Union[str, None]
    raw_details: Union[str, None]
    blob_href: str


class CheckSuiteType(TypedDict):
    """CheckSuite

    A suite of checks performed on the code of a given code change
    """

    id: int
    node_id: str
    head_branch: Union[str, None]
    head_sha: str
    status: Union[None, Literal["queued", "in_progress", "completed"]]
    conclusion: Union[
        None,
        Literal[
            "success",
            "failure",
            "neutral",
            "cancelled",
            "skipped",
            "timed_out",
            "action_required",
            "startup_failure",
            "stale",
        ],
    ]
    url: Union[str, None]
    before: Union[str, None]
    after: Union[str, None]
    pull_requests: Union[List[PullRequestMinimalType], None]
    app: Union[None, IntegrationType]
    repository: MinimalRepositoryType
    created_at: Union[datetime, None]
    updated_at: Union[datetime, None]
    head_commit: SimpleCommitType
    latest_check_runs_count: int
    check_runs_url: str
    rerequestable: NotRequired[bool]
    runs_rerequestable: NotRequired[bool]


class CheckSuitePreferenceType(TypedDict):
    """Check Suite Preference

    Check suite configuration preferences for a repository.
    """

    preferences: CheckSuitePreferencePropPreferencesType
    repository: MinimalRepositoryType


class CheckSuitePreferencePropPreferencesType(TypedDict):
    """CheckSuitePreferencePropPreferences"""

    auto_trigger_checks: NotRequired[
        List[CheckSuitePreferencePropPreferencesPropAutoTriggerChecksItemsType]
    ]


class CheckSuitePreferencePropPreferencesPropAutoTriggerChecksItemsType(TypedDict):
    """CheckSuitePreferencePropPreferencesPropAutoTriggerChecksItems"""

    app_id: int
    setting: bool


class CodeScanningAlertItemsType(TypedDict):
    """CodeScanningAlertItems"""

    number: int
    created_at: datetime
    updated_at: NotRequired[datetime]
    url: str
    html_url: str
    instances_url: str
    state: Literal["open", "dismissed", "fixed"]
    fixed_at: NotRequired[Union[datetime, None]]
    dismissed_by: Union[None, SimpleUserType]
    dismissed_at: Union[datetime, None]
    dismissed_reason: Union[
        None, Literal["false positive", "won't fix", "used in tests"]
    ]
    dismissed_comment: NotRequired[Union[str, None]]
    rule: CodeScanningAlertRuleSummaryType
    tool: CodeScanningAnalysisToolType
    most_recent_instance: CodeScanningAlertInstanceType


class CodeScanningAlertRuleType(TypedDict):
    """CodeScanningAlertRule"""

    id: NotRequired[Union[str, None]]
    name: NotRequired[str]
    severity: NotRequired[Union[None, Literal["none", "note", "warning", "error"]]]
    security_severity_level: NotRequired[
        Union[None, Literal["low", "medium", "high", "critical"]]
    ]
    description: NotRequired[str]
    full_description: NotRequired[str]
    tags: NotRequired[Union[List[str], None]]
    help_: NotRequired[Union[str, None]]
    help_uri: NotRequired[Union[str, None]]


class CodeScanningAlertType(TypedDict):
    """CodeScanningAlert"""

    number: int
    created_at: datetime
    updated_at: NotRequired[datetime]
    url: str
    html_url: str
    instances_url: str
    state: Literal["open", "dismissed", "fixed"]
    fixed_at: NotRequired[Union[datetime, None]]
    dismissed_by: Union[None, SimpleUserType]
    dismissed_at: Union[datetime, None]
    dismissed_reason: Union[
        None, Literal["false positive", "won't fix", "used in tests"]
    ]
    dismissed_comment: NotRequired[Union[str, None]]
    rule: CodeScanningAlertRuleType
    tool: CodeScanningAnalysisToolType
    most_recent_instance: CodeScanningAlertInstanceType


class CodeScanningAnalysisType(TypedDict):
    """CodeScanningAnalysis"""

    ref: str
    commit_sha: str
    analysis_key: str
    environment: str
    category: NotRequired[str]
    error: str
    created_at: datetime
    results_count: int
    rules_count: int
    id: int
    url: str
    sarif_id: str
    tool: CodeScanningAnalysisToolType
    deletable: bool
    warning: str


class CodeScanningAnalysisDeletionType(TypedDict):
    """Analysis deletion

    Successful deletion of a code scanning analysis
    """

    next_analysis_url: Union[str, None]
    confirm_delete_url: Union[str, None]


class CodeScanningCodeqlDatabaseType(TypedDict):
    """CodeQL Database

    A CodeQL database.
    """

    id: int
    name: str
    language: str
    uploader: SimpleUserType
    content_type: str
    size: int
    created_at: datetime
    updated_at: datetime
    url: str
    commit_oid: NotRequired[Union[str, None]]


class CodeScanningDefaultSetupType(TypedDict):
    """CodeScanningDefaultSetup

    Configuration for code scanning default setup.
    """

    state: NotRequired[Literal["configured", "not-configured"]]
    languages: NotRequired[
        List[
            Literal[
                "c-cpp",
                "csharp",
                "go",
                "java-kotlin",
                "javascript-typescript",
                "javascript",
                "python",
                "ruby",
                "typescript",
                "swift",
            ]
        ]
    ]
    query_suite: NotRequired[Literal["default", "extended"]]
    updated_at: NotRequired[Union[datetime, None]]
    schedule: NotRequired[Union[None, Literal["weekly"]]]


class CodeScanningDefaultSetupUpdateType(TypedDict):
    """CodeScanningDefaultSetupUpdate

    Configuration for code scanning default setup.
    """

    state: NotRequired[Literal["configured", "not-configured"]]
    query_suite: NotRequired[Literal["default", "extended"]]
    languages: NotRequired[
        List[
            Literal[
                "c-cpp",
                "csharp",
                "go",
                "java-kotlin",
                "javascript-typescript",
                "python",
                "ruby",
                "swift",
            ]
        ]
    ]


class CodeScanningDefaultSetupUpdateResponseType(TypedDict):
    """CodeScanningDefaultSetupUpdateResponse

    You can use `run_url` to track the status of the run. This includes a property
    status and conclusion.
    You should not rely on this always being an actions workflow run object.
    """

    run_id: NotRequired[int]
    run_url: NotRequired[str]


class CodeScanningSarifsReceiptType(TypedDict):
    """CodeScanningSarifsReceipt"""

    id: NotRequired[str]
    url: NotRequired[str]


class CodeScanningSarifsStatusType(TypedDict):
    """CodeScanningSarifsStatus"""

    processing_status: NotRequired[Literal["pending", "complete", "failed"]]
    analyses_url: NotRequired[Union[str, None]]
    errors: NotRequired[Union[List[str], None]]


class CodeownersErrorsType(TypedDict):
    """CODEOWNERS errors

    A list of errors found in a repo's CODEOWNERS file
    """

    errors: List[CodeownersErrorsPropErrorsItemsType]


class CodeownersErrorsPropErrorsItemsType(TypedDict):
    """CodeownersErrorsPropErrorsItems"""

    line: int
    column: int
    source: NotRequired[str]
    kind: str
    suggestion: NotRequired[Union[str, None]]
    message: str
    path: str


class CodespacesPermissionsCheckForDevcontainerType(TypedDict):
    """Codespaces Permissions Check

    Permission check result for a given devcontainer config.
    """

    accepted: bool


class RepoCodespacesSecretType(TypedDict):
    """Codespaces Secret

    Set repository secrets for GitHub Codespaces.
    """

    name: str
    created_at: datetime
    updated_at: datetime


class CollaboratorType(TypedDict):
    """Collaborator

    Collaborator
    """

    login: str
    id: int
    email: NotRequired[Union[str, None]]
    name: NotRequired[Union[str, None]]
    node_id: str
    avatar_url: str
    gravatar_id: Union[str, None]
    url: str
    html_url: str
    followers_url: str
    following_url: str
    gists_url: str
    starred_url: str
    subscriptions_url: str
    organizations_url: str
    repos_url: str
    events_url: str
    received_events_url: str
    type: str
    site_admin: bool
    permissions: NotRequired[CollaboratorPropPermissionsType]
    role_name: str


class CollaboratorPropPermissionsType(TypedDict):
    """CollaboratorPropPermissions"""

    pull: bool
    triage: NotRequired[bool]
    push: bool
    maintain: NotRequired[bool]
    admin: bool


class RepositoryInvitationType(TypedDict):
    """Repository Invitation

    Repository invitations let you manage who you collaborate with.
    """

    id: int
    repository: MinimalRepositoryType
    invitee: Union[None, SimpleUserType]
    inviter: Union[None, SimpleUserType]
    permissions: Literal["read", "write", "admin", "triage", "maintain"]
    created_at: datetime
    expired: NotRequired[bool]
    url: str
    html_url: str
    node_id: str


class RepositoryCollaboratorPermissionType(TypedDict):
    """Repository Collaborator Permission

    Repository Collaborator Permission
    """

    permission: str
    role_name: str
    user: Union[None, CollaboratorType]


class CommitCommentType(TypedDict):
    """Commit Comment

    Commit Comment
    """

    html_url: str
    url: str
    id: int
    node_id: str
    body: str
    path: Union[str, None]
    position: Union[int, None]
    line: Union[int, None]
    commit_id: str
    user: Union[None, SimpleUserType]
    created_at: datetime
    updated_at: datetime
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    reactions: NotRequired[ReactionRollupType]


class BranchShortType(TypedDict):
    """Branch Short

    Branch Short
    """

    name: str
    commit: BranchShortPropCommitType
    protected: bool


class BranchShortPropCommitType(TypedDict):
    """BranchShortPropCommit"""

    sha: str
    url: str


class LinkType(TypedDict):
    """Link

    Hypermedia Link
    """

    href: str


class AutoMergeType(TypedDict):
    """Auto merge

    The status of auto merging a pull request.
    """

    enabled_by: SimpleUserType
    merge_method: Literal["merge", "squash", "rebase"]
    commit_title: Union[str, None]
    commit_message: Union[str, None]


class PullRequestSimpleType(TypedDict):
    """Pull Request Simple

    Pull Request Simple
    """

    url: str
    id: int
    node_id: str
    html_url: str
    diff_url: str
    patch_url: str
    issue_url: str
    commits_url: str
    review_comments_url: str
    review_comment_url: str
    comments_url: str
    statuses_url: str
    number: int
    state: str
    locked: bool
    title: str
    user: Union[None, SimpleUserType]
    body: Union[str, None]
    labels: List[PullRequestSimplePropLabelsItemsType]
    milestone: Union[None, MilestoneType]
    active_lock_reason: NotRequired[Union[str, None]]
    created_at: datetime
    updated_at: datetime
    closed_at: Union[datetime, None]
    merged_at: Union[datetime, None]
    merge_commit_sha: Union[str, None]
    assignee: Union[None, SimpleUserType]
    assignees: NotRequired[Union[List[SimpleUserType], None]]
    requested_reviewers: NotRequired[Union[List[SimpleUserType], None]]
    requested_teams: NotRequired[Union[List[TeamType], None]]
    head: PullRequestSimplePropHeadType
    base: PullRequestSimplePropBaseType
    links: PullRequestSimplePropLinksType
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    auto_merge: Union[AutoMergeType, None]
    draft: NotRequired[bool]


class PullRequestSimplePropLabelsItemsType(TypedDict):
    """PullRequestSimplePropLabelsItems"""

    id: int
    node_id: str
    url: str
    name: str
    description: Union[str, None]
    color: str
    default: bool


class PullRequestSimplePropHeadType(TypedDict):
    """PullRequestSimplePropHead"""

    label: Union[str, None]
    ref: str
    repo: Union[None, RepositoryType]
    sha: str
    user: Union[None, SimpleUserType]


class PullRequestSimplePropBaseType(TypedDict):
    """PullRequestSimplePropBase"""

    label: str
    ref: str
    repo: RepositoryType
    sha: str
    user: Union[None, SimpleUserType]


class PullRequestSimplePropLinksType(TypedDict):
    """PullRequestSimplePropLinks"""

    comments: LinkType
    commits: LinkType
    statuses: LinkType
    html: LinkType
    issue: LinkType
    review_comments: LinkType
    review_comment: LinkType
    self_: LinkType


class SimpleCommitStatusType(TypedDict):
    """Simple Commit Status"""

    description: Union[str, None]
    id: int
    node_id: str
    state: str
    context: str
    target_url: Union[str, None]
    required: NotRequired[Union[bool, None]]
    avatar_url: Union[str, None]
    url: str
    created_at: datetime
    updated_at: datetime


class CombinedCommitStatusType(TypedDict):
    """Combined Commit Status

    Combined Commit Status
    """

    state: str
    statuses: List[SimpleCommitStatusType]
    sha: str
    total_count: int
    repository: MinimalRepositoryType
    commit_url: str
    url: str


class StatusType(TypedDict):
    """Status

    The status of a commit.
    """

    url: str
    avatar_url: Union[str, None]
    id: int
    node_id: str
    state: str
    description: Union[str, None]
    target_url: Union[str, None]
    context: str
    created_at: str
    updated_at: str
    creator: Union[None, SimpleUserType]


class CommunityHealthFileType(TypedDict):
    """Community Health File"""

    url: str
    html_url: str


class CommunityProfileType(TypedDict):
    """Community Profile

    Community Profile
    """

    health_percentage: int
    description: Union[str, None]
    documentation: Union[str, None]
    files: CommunityProfilePropFilesType
    updated_at: Union[datetime, None]
    content_reports_enabled: NotRequired[bool]


class CommunityProfilePropFilesType(TypedDict):
    """CommunityProfilePropFiles"""

    code_of_conduct: Union[None, CodeOfConductSimpleType]
    code_of_conduct_file: Union[None, CommunityHealthFileType]
    license_: Union[None, LicenseSimpleType]
    contributing: Union[None, CommunityHealthFileType]
    readme: Union[None, CommunityHealthFileType]
    issue_template: Union[None, CommunityHealthFileType]
    pull_request_template: Union[None, CommunityHealthFileType]


class CommitComparisonType(TypedDict):
    """Commit Comparison

    Commit Comparison
    """

    url: str
    html_url: str
    permalink_url: str
    diff_url: str
    patch_url: str
    base_commit: CommitType
    merge_base_commit: CommitType
    status: Literal["diverged", "ahead", "behind", "identical"]
    ahead_by: int
    behind_by: int
    total_commits: int
    commits: List[CommitType]
    files: NotRequired[List[DiffEntryType]]


class ContentTreeType(TypedDict):
    """Content Tree

    Content Tree
    """

    type: str
    size: int
    name: str
    path: str
    sha: str
    url: str
    git_url: Union[str, None]
    html_url: Union[str, None]
    download_url: Union[str, None]
    entries: NotRequired[List[ContentTreePropEntriesItemsType]]
    links: ContentTreePropLinksType


class ContentTreePropEntriesItemsType(TypedDict):
    """ContentTreePropEntriesItems"""

    type: str
    size: int
    name: str
    path: str
    content: NotRequired[str]
    sha: str
    url: str
    git_url: Union[str, None]
    html_url: Union[str, None]
    download_url: Union[str, None]
    links: ContentTreePropEntriesItemsPropLinksType


class ContentTreePropEntriesItemsPropLinksType(TypedDict):
    """ContentTreePropEntriesItemsPropLinks"""

    git: Union[str, None]
    html: Union[str, None]
    self_: str


class ContentTreePropLinksType(TypedDict):
    """ContentTreePropLinks"""

    git: Union[str, None]
    html: Union[str, None]
    self_: str


class ContentDirectoryItemsType(TypedDict):
    """ContentDirectoryItems"""

    type: Literal["dir", "file", "submodule", "symlink"]
    size: int
    name: str
    path: str
    content: NotRequired[str]
    sha: str
    url: str
    git_url: Union[str, None]
    html_url: Union[str, None]
    download_url: Union[str, None]
    links: ContentDirectoryItemsPropLinksType


class ContentDirectoryItemsPropLinksType(TypedDict):
    """ContentDirectoryItemsPropLinks"""

    git: Union[str, None]
    html: Union[str, None]
    self_: str


class ContentFileType(TypedDict):
    """Content File

    Content File
    """

    type: Literal["file"]
    encoding: str
    size: int
    name: str
    path: str
    content: str
    sha: str
    url: str
    git_url: Union[str, None]
    html_url: Union[str, None]
    download_url: Union[str, None]
    links: ContentFilePropLinksType
    target: NotRequired[str]
    submodule_git_url: NotRequired[str]


class ContentFilePropLinksType(TypedDict):
    """ContentFilePropLinks"""

    git: Union[str, None]
    html: Union[str, None]
    self_: str


class ContentSymlinkType(TypedDict):
    """Symlink Content

    An object describing a symlink
    """

    type: Literal["symlink"]
    target: str
    size: int
    name: str
    path: str
    sha: str
    url: str
    git_url: Union[str, None]
    html_url: Union[str, None]
    download_url: Union[str, None]
    links: ContentSymlinkPropLinksType


class ContentSymlinkPropLinksType(TypedDict):
    """ContentSymlinkPropLinks"""

    git: Union[str, None]
    html: Union[str, None]
    self_: str


class ContentSubmoduleType(TypedDict):
    """Submodule Content

    An object describing a submodule
    """

    type: Literal["submodule"]
    submodule_git_url: str
    size: int
    name: str
    path: str
    sha: str
    url: str
    git_url: Union[str, None]
    html_url: Union[str, None]
    download_url: Union[str, None]
    links: ContentSubmodulePropLinksType


class ContentSubmodulePropLinksType(TypedDict):
    """ContentSubmodulePropLinks"""

    git: Union[str, None]
    html: Union[str, None]
    self_: str


class FileCommitType(TypedDict):
    """File Commit

    File Commit
    """

    content: Union[FileCommitPropContentType, None]
    commit: FileCommitPropCommitType


class FileCommitPropContentPropLinksType(TypedDict):
    """FileCommitPropContentPropLinks"""

    self_: NotRequired[str]
    git: NotRequired[str]
    html: NotRequired[str]


class FileCommitPropContentType(TypedDict):
    """FileCommitPropContent"""

    name: NotRequired[str]
    path: NotRequired[str]
    sha: NotRequired[str]
    size: NotRequired[int]
    url: NotRequired[str]
    html_url: NotRequired[str]
    git_url: NotRequired[str]
    download_url: NotRequired[str]
    type: NotRequired[str]
    links: NotRequired[FileCommitPropContentPropLinksType]


class FileCommitPropCommitType(TypedDict):
    """FileCommitPropCommit"""

    sha: NotRequired[str]
    node_id: NotRequired[str]
    url: NotRequired[str]
    html_url: NotRequired[str]
    author: NotRequired[FileCommitPropCommitPropAuthorType]
    committer: NotRequired[FileCommitPropCommitPropCommitterType]
    message: NotRequired[str]
    tree: NotRequired[FileCommitPropCommitPropTreeType]
    parents: NotRequired[List[FileCommitPropCommitPropParentsItemsType]]
    verification: NotRequired[FileCommitPropCommitPropVerificationType]


class FileCommitPropCommitPropAuthorType(TypedDict):
    """FileCommitPropCommitPropAuthor"""

    date: NotRequired[str]
    name: NotRequired[str]
    email: NotRequired[str]


class FileCommitPropCommitPropCommitterType(TypedDict):
    """FileCommitPropCommitPropCommitter"""

    date: NotRequired[str]
    name: NotRequired[str]
    email: NotRequired[str]


class FileCommitPropCommitPropTreeType(TypedDict):
    """FileCommitPropCommitPropTree"""

    url: NotRequired[str]
    sha: NotRequired[str]


class FileCommitPropCommitPropParentsItemsType(TypedDict):
    """FileCommitPropCommitPropParentsItems"""

    url: NotRequired[str]
    html_url: NotRequired[str]
    sha: NotRequired[str]


class FileCommitPropCommitPropVerificationType(TypedDict):
    """FileCommitPropCommitPropVerification"""

    verified: NotRequired[bool]
    reason: NotRequired[str]
    signature: NotRequired[Union[str, None]]
    payload: NotRequired[Union[str, None]]


class ContributorType(TypedDict):
    """Contributor

    Contributor
    """

    login: NotRequired[str]
    id: NotRequired[int]
    node_id: NotRequired[str]
    avatar_url: NotRequired[str]
    gravatar_id: NotRequired[Union[str, None]]
    url: NotRequired[str]
    html_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    organizations_url: NotRequired[str]
    repos_url: NotRequired[str]
    events_url: NotRequired[str]
    received_events_url: NotRequired[str]
    type: str
    site_admin: NotRequired[bool]
    contributions: int
    email: NotRequired[str]
    name: NotRequired[str]


class DependabotAlertType(TypedDict):
    """DependabotAlert

    A Dependabot alert.
    """

    number: int
    state: Literal["auto_dismissed", "dismissed", "fixed", "open"]
    dependency: DependabotAlertPropDependencyType
    security_advisory: DependabotAlertSecurityAdvisoryType
    security_vulnerability: DependabotAlertSecurityVulnerabilityType
    url: str
    html_url: str
    created_at: datetime
    updated_at: datetime
    dismissed_at: Union[datetime, None]
    dismissed_by: Union[None, SimpleUserType]
    dismissed_reason: Union[
        None,
        Literal[
            "fix_started", "inaccurate", "no_bandwidth", "not_used", "tolerable_risk"
        ],
    ]
    dismissed_comment: Union[str, None]
    fixed_at: Union[datetime, None]
    auto_dismissed_at: NotRequired[Union[datetime, None]]


class DependabotAlertPropDependencyType(TypedDict):
    """DependabotAlertPropDependency

    Details for the vulnerable dependency.
    """

    package: NotRequired[DependabotAlertPackageType]
    manifest_path: NotRequired[str]
    scope: NotRequired[Union[None, Literal["development", "runtime"]]]


class DependabotSecretType(TypedDict):
    """Dependabot Secret

    Set secrets for Dependabot.
    """

    name: str
    created_at: datetime
    updated_at: datetime


class DependencyGraphDiffItemsType(TypedDict):
    """DependencyGraphDiffItems"""

    change_type: Literal["added", "removed"]
    manifest: str
    ecosystem: str
    name: str
    version: str
    package_url: Union[str, None]
    license_: Union[str, None]
    source_repository_url: Union[str, None]
    vulnerabilities: List[DependencyGraphDiffItemsPropVulnerabilitiesItemsType]
    scope: Literal["unknown", "runtime", "development"]


class DependencyGraphDiffItemsPropVulnerabilitiesItemsType(TypedDict):
    """DependencyGraphDiffItemsPropVulnerabilitiesItems"""

    severity: str
    advisory_ghsa_id: str
    advisory_summary: str
    advisory_url: str


class DependencyGraphSpdxSbomType(TypedDict):
    """Dependency Graph SPDX SBOM

    A schema for the SPDX JSON format returned by the Dependency Graph.
    """

    sbom: DependencyGraphSpdxSbomPropSbomType


class DependencyGraphSpdxSbomPropSbomType(TypedDict):
    """DependencyGraphSpdxSbomPropSbom"""

    spdxid: str
    spdx_version: str
    creation_info: DependencyGraphSpdxSbomPropSbomPropCreationInfoType
    name: str
    data_license: str
    document_describes: List[str]
    document_namespace: str
    packages: List[DependencyGraphSpdxSbomPropSbomPropPackagesItemsType]


class DependencyGraphSpdxSbomPropSbomPropCreationInfoType(TypedDict):
    """DependencyGraphSpdxSbomPropSbomPropCreationInfo"""

    created: str
    creators: List[str]


class DependencyGraphSpdxSbomPropSbomPropPackagesItemsType(TypedDict):
    """DependencyGraphSpdxSbomPropSbomPropPackagesItems"""

    spdxid: NotRequired[str]
    name: NotRequired[str]
    version_info: NotRequired[str]
    download_location: NotRequired[str]
    files_analyzed: NotRequired[bool]
    license_concluded: NotRequired[str]
    license_declared: NotRequired[str]
    supplier: NotRequired[str]
    external_refs: NotRequired[
        List[DependencyGraphSpdxSbomPropSbomPropPackagesItemsPropExternalRefsItemsType]
    ]


class DependencyGraphSpdxSbomPropSbomPropPackagesItemsPropExternalRefsItemsType(
    TypedDict
):
    """DependencyGraphSpdxSbomPropSbomPropPackagesItemsPropExternalRefsItems"""

    reference_category: str
    reference_locator: str
    reference_type: str


class MetadataType(TypedDict):
    """metadata

    User-defined metadata to store domain-specific information limited to 8 keys
    with scalar values.
    """


class DependencyType(TypedDict):
    """Dependency"""

    package_url: NotRequired[str]
    metadata: NotRequired[MetadataType]
    relationship: NotRequired[Literal["direct", "indirect"]]
    scope: NotRequired[Literal["runtime", "development"]]
    dependencies: NotRequired[List[str]]


class ManifestType(TypedDict):
    """Manifest"""

    name: str
    file: NotRequired[ManifestPropFileType]
    metadata: NotRequired[MetadataType]
    resolved: NotRequired[ManifestPropResolvedType]


class ManifestPropFileType(TypedDict):
    """ManifestPropFile"""

    source_location: NotRequired[str]


class ManifestPropResolvedType(TypedDict):
    """ManifestPropResolved

    A collection of resolved package dependencies.
    """


class SnapshotType(TypedDict):
    """snapshot

    Create a new snapshot of a repository's dependencies.
    """

    version: int
    job: SnapshotPropJobType
    sha: str
    ref: str
    detector: SnapshotPropDetectorType
    metadata: NotRequired[MetadataType]
    manifests: NotRequired[SnapshotPropManifestsType]
    scanned: datetime


class SnapshotPropJobType(TypedDict):
    """SnapshotPropJob"""

    id: str
    correlator: str
    html_url: NotRequired[str]


class SnapshotPropDetectorType(TypedDict):
    """SnapshotPropDetector

    A description of the detector used.
    """

    name: str
    version: str
    url: str


class SnapshotPropManifestsType(TypedDict):
    """SnapshotPropManifests

    A collection of package manifests, which are a collection of related
    dependencies declared in a file or representing a logical group of dependencies.
    """


class DeploymentStatusType(TypedDict):
    """Deployment Status

    The status of a deployment.
    """

    url: str
    id: int
    node_id: str
    state: Literal[
        "error", "failure", "inactive", "pending", "success", "queued", "in_progress"
    ]
    creator: Union[None, SimpleUserType]
    description: str
    environment: NotRequired[str]
    target_url: str
    created_at: datetime
    updated_at: datetime
    deployment_url: str
    repository_url: str
    environment_url: NotRequired[str]
    log_url: NotRequired[str]
    performed_via_github_app: NotRequired[Union[None, IntegrationType]]


class DeploymentBranchPolicySettingsType(TypedDict):
    """DeploymentBranchPolicySettings

    The type of deployment branch policy for this environment. To allow all branches
    to deploy, set to `null`.
    """

    protected_branches: bool
    custom_branch_policies: bool


class EnvironmentType(TypedDict):
    """Environment

    Details of a deployment environment
    """

    id: int
    node_id: str
    name: str
    url: str
    html_url: str
    created_at: datetime
    updated_at: datetime
    protection_rules: NotRequired[
        List[
            Union[
                EnvironmentPropProtectionRulesItemsAnyof0Type,
                EnvironmentPropProtectionRulesItemsAnyof1Type,
                EnvironmentPropProtectionRulesItemsAnyof2Type,
            ]
        ]
    ]
    deployment_branch_policy: NotRequired[
        Union[DeploymentBranchPolicySettingsType, None]
    ]


class EnvironmentPropProtectionRulesItemsAnyof0Type(TypedDict):
    """EnvironmentPropProtectionRulesItemsAnyof0"""

    id: int
    node_id: str
    type: str
    wait_timer: NotRequired[int]


class EnvironmentPropProtectionRulesItemsAnyof1Type(TypedDict):
    """EnvironmentPropProtectionRulesItemsAnyof1"""

    id: int
    node_id: str
    prevent_self_review: NotRequired[bool]
    type: str
    reviewers: NotRequired[
        List[EnvironmentPropProtectionRulesItemsAnyof1PropReviewersItemsType]
    ]


class EnvironmentPropProtectionRulesItemsAnyof1PropReviewersItemsType(TypedDict):
    """EnvironmentPropProtectionRulesItemsAnyof1PropReviewersItems"""

    type: NotRequired[Literal["User", "Team"]]
    reviewer: NotRequired[Union[SimpleUserType, TeamType]]


class EnvironmentPropProtectionRulesItemsAnyof2Type(TypedDict):
    """EnvironmentPropProtectionRulesItemsAnyof2"""

    id: int
    node_id: str
    type: str


class DeploymentBranchPolicyType(TypedDict):
    """Deployment branch policy

    Details of a deployment branch or tag policy.
    """

    id: NotRequired[int]
    node_id: NotRequired[str]
    name: NotRequired[str]
    type: NotRequired[Literal["branch", "tag"]]


class DeploymentBranchPolicyNamePatternWithTypeType(TypedDict):
    """Deployment branch and tag policy name pattern"""

    name: str
    type: NotRequired[Literal["branch", "tag"]]


class DeploymentBranchPolicyNamePatternType(TypedDict):
    """Deployment branch policy name pattern"""

    name: str


class CustomDeploymentRuleAppType(TypedDict):
    """Custom deployment protection rule app

    A GitHub App that is providing a custom deployment protection rule.
    """

    id: int
    slug: str
    integration_url: str
    node_id: str


class DeploymentProtectionRuleType(TypedDict):
    """Deployment protection rule

    Deployment protection rule
    """

    id: int
    node_id: str
    enabled: bool
    app: CustomDeploymentRuleAppType


class ShortBlobType(TypedDict):
    """Short Blob

    Short Blob
    """

    url: str
    sha: str


class BlobType(TypedDict):
    """Blob

    Blob
    """

    content: str
    encoding: str
    url: str
    sha: str
    size: Union[int, None]
    node_id: str
    highlighted_content: NotRequired[str]


class GitCommitType(TypedDict):
    """Git Commit

    Low-level Git commit operations within a repository
    """

    sha: str
    node_id: str
    url: str
    author: GitCommitPropAuthorType
    committer: GitCommitPropCommitterType
    message: str
    tree: GitCommitPropTreeType
    parents: List[GitCommitPropParentsItemsType]
    verification: GitCommitPropVerificationType
    html_url: str


class GitCommitPropAuthorType(TypedDict):
    """GitCommitPropAuthor

    Identifying information for the git-user
    """

    date: datetime
    email: str
    name: str


class GitCommitPropCommitterType(TypedDict):
    """GitCommitPropCommitter

    Identifying information for the git-user
    """

    date: datetime
    email: str
    name: str


class GitCommitPropTreeType(TypedDict):
    """GitCommitPropTree"""

    sha: str
    url: str


class GitCommitPropParentsItemsType(TypedDict):
    """GitCommitPropParentsItems"""

    sha: str
    url: str
    html_url: str


class GitCommitPropVerificationType(TypedDict):
    """GitCommitPropVerification"""

    verified: bool
    reason: str
    signature: Union[str, None]
    payload: Union[str, None]


class GitRefType(TypedDict):
    """Git Reference

    Git references within a repository
    """

    ref: str
    node_id: str
    url: str
    object_: GitRefPropObjectType


class GitRefPropObjectType(TypedDict):
    """GitRefPropObject"""

    type: str
    sha: str
    url: str


class GitTagType(TypedDict):
    """Git Tag

    Metadata for a Git tag
    """

    node_id: str
    tag: str
    sha: str
    url: str
    message: str
    tagger: GitTagPropTaggerType
    object_: GitTagPropObjectType
    verification: NotRequired[VerificationType]


class GitTagPropTaggerType(TypedDict):
    """GitTagPropTagger"""

    date: str
    email: str
    name: str


class GitTagPropObjectType(TypedDict):
    """GitTagPropObject"""

    sha: str
    type: str
    url: str


class GitTreeType(TypedDict):
    """Git Tree

    The hierarchy between files in a Git repository.
    """

    sha: str
    url: str
    truncated: bool
    tree: List[GitTreePropTreeItemsType]


class GitTreePropTreeItemsType(TypedDict):
    """GitTreePropTreeItems"""

    path: NotRequired[str]
    mode: NotRequired[str]
    type: NotRequired[str]
    sha: NotRequired[str]
    size: NotRequired[int]
    url: NotRequired[str]


class HookResponseType(TypedDict):
    """Hook Response"""

    code: Union[int, None]
    status: Union[str, None]
    message: Union[str, None]


class HookType(TypedDict):
    """Webhook

    Webhooks for repositories.
    """

    type: str
    id: int
    name: str
    active: bool
    events: List[str]
    config: HookPropConfigType
    updated_at: datetime
    created_at: datetime
    url: str
    test_url: str
    ping_url: str
    deliveries_url: NotRequired[str]
    last_response: HookResponseType


class HookPropConfigType(TypedDict):
    """HookPropConfig"""

    email: NotRequired[str]
    password: NotRequired[str]
    room: NotRequired[str]
    subdomain: NotRequired[str]
    url: NotRequired[str]
    insecure_ssl: NotRequired[Union[str, float]]
    content_type: NotRequired[str]
    digest: NotRequired[str]
    secret: NotRequired[str]
    token: NotRequired[str]


class ImportType(TypedDict):
    """Import

    A repository import from an external source.
    """

    vcs: Union[str, None]
    use_lfs: NotRequired[bool]
    vcs_url: str
    svc_root: NotRequired[str]
    tfvc_project: NotRequired[str]
    status: Literal[
        "auth",
        "error",
        "none",
        "detecting",
        "choose",
        "auth_failed",
        "importing",
        "mapping",
        "waiting_to_push",
        "pushing",
        "complete",
        "setup",
        "unknown",
        "detection_found_multiple",
        "detection_found_nothing",
        "detection_needs_auth",
    ]
    status_text: NotRequired[Union[str, None]]
    failed_step: NotRequired[Union[str, None]]
    error_message: NotRequired[Union[str, None]]
    import_percent: NotRequired[Union[int, None]]
    commit_count: NotRequired[Union[int, None]]
    push_percent: NotRequired[Union[int, None]]
    has_large_files: NotRequired[bool]
    large_files_size: NotRequired[int]
    large_files_count: NotRequired[int]
    project_choices: NotRequired[List[ImportPropProjectChoicesItemsType]]
    message: NotRequired[str]
    authors_count: NotRequired[Union[int, None]]
    url: str
    html_url: str
    authors_url: str
    repository_url: str
    svn_root: NotRequired[str]


class ImportPropProjectChoicesItemsType(TypedDict):
    """ImportPropProjectChoicesItems"""

    vcs: NotRequired[str]
    tfvc_project: NotRequired[str]
    human_name: NotRequired[str]


class PorterAuthorType(TypedDict):
    """Porter Author

    Porter Author
    """

    id: int
    remote_id: str
    remote_name: str
    email: str
    name: str
    url: str
    import_url: str


class PorterLargeFileType(TypedDict):
    """Porter Large File

    Porter Large File
    """

    ref_name: str
    path: str
    oid: str
    size: int


class IssueEventLabelType(TypedDict):
    """Issue Event Label

    Issue Event Label
    """

    name: Union[str, None]
    color: Union[str, None]


class IssueEventDismissedReviewType(TypedDict):
    """Issue Event Dismissed Review"""

    state: str
    review_id: int
    dismissal_message: Union[str, None]
    dismissal_commit_id: NotRequired[Union[str, None]]


class IssueEventMilestoneType(TypedDict):
    """Issue Event Milestone

    Issue Event Milestone
    """

    title: str


class IssueEventProjectCardType(TypedDict):
    """Issue Event Project Card

    Issue Event Project Card
    """

    url: str
    id: int
    project_url: str
    project_id: int
    column_name: str
    previous_column_name: NotRequired[str]


class IssueEventRenameType(TypedDict):
    """Issue Event Rename

    Issue Event Rename
    """

    from_: str
    to: str


class IssueEventType(TypedDict):
    """Issue Event

    Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: Union[None, SimpleUserType]
    event: str
    commit_id: Union[str, None]
    commit_url: Union[str, None]
    created_at: datetime
    issue: NotRequired[Union[None, IssueType]]
    label: NotRequired[IssueEventLabelType]
    assignee: NotRequired[Union[None, SimpleUserType]]
    assigner: NotRequired[Union[None, SimpleUserType]]
    review_requester: NotRequired[Union[None, SimpleUserType]]
    requested_reviewer: NotRequired[Union[None, SimpleUserType]]
    requested_team: NotRequired[TeamType]
    dismissed_review: NotRequired[IssueEventDismissedReviewType]
    milestone: NotRequired[IssueEventMilestoneType]
    project_card: NotRequired[IssueEventProjectCardType]
    rename: NotRequired[IssueEventRenameType]
    author_association: NotRequired[
        Literal[
            "COLLABORATOR",
            "CONTRIBUTOR",
            "FIRST_TIMER",
            "FIRST_TIME_CONTRIBUTOR",
            "MANNEQUIN",
            "MEMBER",
            "NONE",
            "OWNER",
        ]
    ]
    lock_reason: NotRequired[Union[str, None]]
    performed_via_github_app: NotRequired[Union[None, IntegrationType]]


class LabeledIssueEventType(TypedDict):
    """Labeled Issue Event

    Labeled Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUserType
    event: Literal["labeled"]
    commit_id: Union[str, None]
    commit_url: Union[str, None]
    created_at: str
    performed_via_github_app: Union[None, IntegrationType]
    label: LabeledIssueEventPropLabelType


class LabeledIssueEventPropLabelType(TypedDict):
    """LabeledIssueEventPropLabel"""

    name: str
    color: str


class UnlabeledIssueEventType(TypedDict):
    """Unlabeled Issue Event

    Unlabeled Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUserType
    event: Literal["unlabeled"]
    commit_id: Union[str, None]
    commit_url: Union[str, None]
    created_at: str
    performed_via_github_app: Union[None, IntegrationType]
    label: UnlabeledIssueEventPropLabelType


class UnlabeledIssueEventPropLabelType(TypedDict):
    """UnlabeledIssueEventPropLabel"""

    name: str
    color: str


class AssignedIssueEventType(TypedDict):
    """Assigned Issue Event

    Assigned Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUserType
    event: str
    commit_id: Union[str, None]
    commit_url: Union[str, None]
    created_at: str
    performed_via_github_app: IntegrationType
    assignee: SimpleUserType
    assigner: SimpleUserType


class UnassignedIssueEventType(TypedDict):
    """Unassigned Issue Event

    Unassigned Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUserType
    event: str
    commit_id: Union[str, None]
    commit_url: Union[str, None]
    created_at: str
    performed_via_github_app: Union[None, IntegrationType]
    assignee: SimpleUserType
    assigner: SimpleUserType


class MilestonedIssueEventType(TypedDict):
    """Milestoned Issue Event

    Milestoned Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUserType
    event: Literal["milestoned"]
    commit_id: Union[str, None]
    commit_url: Union[str, None]
    created_at: str
    performed_via_github_app: Union[None, IntegrationType]
    milestone: MilestonedIssueEventPropMilestoneType


class MilestonedIssueEventPropMilestoneType(TypedDict):
    """MilestonedIssueEventPropMilestone"""

    title: str


class DemilestonedIssueEventType(TypedDict):
    """Demilestoned Issue Event

    Demilestoned Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUserType
    event: Literal["demilestoned"]
    commit_id: Union[str, None]
    commit_url: Union[str, None]
    created_at: str
    performed_via_github_app: Union[None, IntegrationType]
    milestone: DemilestonedIssueEventPropMilestoneType


class DemilestonedIssueEventPropMilestoneType(TypedDict):
    """DemilestonedIssueEventPropMilestone"""

    title: str


class RenamedIssueEventType(TypedDict):
    """Renamed Issue Event

    Renamed Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUserType
    event: Literal["renamed"]
    commit_id: Union[str, None]
    commit_url: Union[str, None]
    created_at: str
    performed_via_github_app: Union[None, IntegrationType]
    rename: RenamedIssueEventPropRenameType


class RenamedIssueEventPropRenameType(TypedDict):
    """RenamedIssueEventPropRename"""

    from_: str
    to: str


class ReviewRequestedIssueEventType(TypedDict):
    """Review Requested Issue Event

    Review Requested Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUserType
    event: Literal["review_requested"]
    commit_id: Union[str, None]
    commit_url: Union[str, None]
    created_at: str
    performed_via_github_app: Union[None, IntegrationType]
    review_requester: SimpleUserType
    requested_team: NotRequired[TeamType]
    requested_reviewer: NotRequired[SimpleUserType]


class ReviewRequestRemovedIssueEventType(TypedDict):
    """Review Request Removed Issue Event

    Review Request Removed Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUserType
    event: Literal["review_request_removed"]
    commit_id: Union[str, None]
    commit_url: Union[str, None]
    created_at: str
    performed_via_github_app: Union[None, IntegrationType]
    review_requester: SimpleUserType
    requested_team: NotRequired[TeamType]
    requested_reviewer: NotRequired[SimpleUserType]


class ReviewDismissedIssueEventType(TypedDict):
    """Review Dismissed Issue Event

    Review Dismissed Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUserType
    event: Literal["review_dismissed"]
    commit_id: Union[str, None]
    commit_url: Union[str, None]
    created_at: str
    performed_via_github_app: Union[None, IntegrationType]
    dismissed_review: ReviewDismissedIssueEventPropDismissedReviewType


class ReviewDismissedIssueEventPropDismissedReviewType(TypedDict):
    """ReviewDismissedIssueEventPropDismissedReview"""

    state: str
    review_id: int
    dismissal_message: Union[str, None]
    dismissal_commit_id: NotRequired[str]


class LockedIssueEventType(TypedDict):
    """Locked Issue Event

    Locked Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUserType
    event: Literal["locked"]
    commit_id: Union[str, None]
    commit_url: Union[str, None]
    created_at: str
    performed_via_github_app: Union[None, IntegrationType]
    lock_reason: Union[str, None]


class AddedToProjectIssueEventType(TypedDict):
    """Added to Project Issue Event

    Added to Project Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUserType
    event: Literal["added_to_project"]
    commit_id: Union[str, None]
    commit_url: Union[str, None]
    created_at: str
    performed_via_github_app: Union[None, IntegrationType]
    project_card: NotRequired[AddedToProjectIssueEventPropProjectCardType]


class AddedToProjectIssueEventPropProjectCardType(TypedDict):
    """AddedToProjectIssueEventPropProjectCard"""

    id: int
    url: str
    project_id: int
    project_url: str
    column_name: str
    previous_column_name: NotRequired[str]


class MovedColumnInProjectIssueEventType(TypedDict):
    """Moved Column in Project Issue Event

    Moved Column in Project Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUserType
    event: Literal["moved_columns_in_project"]
    commit_id: Union[str, None]
    commit_url: Union[str, None]
    created_at: str
    performed_via_github_app: Union[None, IntegrationType]
    project_card: NotRequired[MovedColumnInProjectIssueEventPropProjectCardType]


class MovedColumnInProjectIssueEventPropProjectCardType(TypedDict):
    """MovedColumnInProjectIssueEventPropProjectCard"""

    id: int
    url: str
    project_id: int
    project_url: str
    column_name: str
    previous_column_name: NotRequired[str]


class RemovedFromProjectIssueEventType(TypedDict):
    """Removed from Project Issue Event

    Removed from Project Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUserType
    event: Literal["removed_from_project"]
    commit_id: Union[str, None]
    commit_url: Union[str, None]
    created_at: str
    performed_via_github_app: Union[None, IntegrationType]
    project_card: NotRequired[RemovedFromProjectIssueEventPropProjectCardType]


class RemovedFromProjectIssueEventPropProjectCardType(TypedDict):
    """RemovedFromProjectIssueEventPropProjectCard"""

    id: int
    url: str
    project_id: int
    project_url: str
    column_name: str
    previous_column_name: NotRequired[str]


class ConvertedNoteToIssueIssueEventType(TypedDict):
    """Converted Note to Issue Issue Event

    Converted Note to Issue Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUserType
    event: Literal["converted_note_to_issue"]
    commit_id: Union[str, None]
    commit_url: Union[str, None]
    created_at: str
    performed_via_github_app: IntegrationType
    project_card: NotRequired[ConvertedNoteToIssueIssueEventPropProjectCardType]


class ConvertedNoteToIssueIssueEventPropProjectCardType(TypedDict):
    """ConvertedNoteToIssueIssueEventPropProjectCard"""

    id: int
    url: str
    project_id: int
    project_url: str
    column_name: str
    previous_column_name: NotRequired[str]


class LabelType(TypedDict):
    """Label

    Color-coded labels help you categorize and filter your issues (just like labels
    in Gmail).
    """

    id: int
    node_id: str
    url: str
    name: str
    description: Union[str, None]
    color: str
    default: bool


class TimelineCommentEventType(TypedDict):
    """Timeline Comment Event

    Timeline Comment Event
    """

    event: Literal["commented"]
    actor: SimpleUserType
    id: int
    node_id: str
    url: str
    body: NotRequired[str]
    body_text: NotRequired[str]
    body_html: NotRequired[str]
    html_url: str
    user: SimpleUserType
    created_at: datetime
    updated_at: datetime
    issue_url: str
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    performed_via_github_app: NotRequired[Union[None, IntegrationType]]
    reactions: NotRequired[ReactionRollupType]


class TimelineCrossReferencedEventType(TypedDict):
    """Timeline Cross Referenced Event

    Timeline Cross Referenced Event
    """

    event: Literal["cross-referenced"]
    actor: NotRequired[SimpleUserType]
    created_at: datetime
    updated_at: datetime
    source: TimelineCrossReferencedEventPropSourceType


class TimelineCrossReferencedEventPropSourceType(TypedDict):
    """TimelineCrossReferencedEventPropSource"""

    type: NotRequired[str]
    issue: NotRequired[IssueType]


class TimelineCommittedEventType(TypedDict):
    """Timeline Committed Event

    Timeline Committed Event
    """

    event: NotRequired[Literal["committed"]]
    sha: str
    node_id: str
    url: str
    author: TimelineCommittedEventPropAuthorType
    committer: TimelineCommittedEventPropCommitterType
    message: str
    tree: TimelineCommittedEventPropTreeType
    parents: List[TimelineCommittedEventPropParentsItemsType]
    verification: TimelineCommittedEventPropVerificationType
    html_url: str


class TimelineCommittedEventPropAuthorType(TypedDict):
    """TimelineCommittedEventPropAuthor

    Identifying information for the git-user
    """

    date: datetime
    email: str
    name: str


class TimelineCommittedEventPropCommitterType(TypedDict):
    """TimelineCommittedEventPropCommitter

    Identifying information for the git-user
    """

    date: datetime
    email: str
    name: str


class TimelineCommittedEventPropTreeType(TypedDict):
    """TimelineCommittedEventPropTree"""

    sha: str
    url: str


class TimelineCommittedEventPropParentsItemsType(TypedDict):
    """TimelineCommittedEventPropParentsItems"""

    sha: str
    url: str
    html_url: str


class TimelineCommittedEventPropVerificationType(TypedDict):
    """TimelineCommittedEventPropVerification"""

    verified: bool
    reason: str
    signature: Union[str, None]
    payload: Union[str, None]


class TimelineReviewedEventType(TypedDict):
    """Timeline Reviewed Event

    Timeline Reviewed Event
    """

    event: Literal["reviewed"]
    id: int
    node_id: str
    user: SimpleUserType
    body: Union[str, None]
    state: str
    html_url: str
    pull_request_url: str
    links: TimelineReviewedEventPropLinksType
    submitted_at: NotRequired[datetime]
    commit_id: str
    body_html: NotRequired[Union[str, None]]
    body_text: NotRequired[Union[str, None]]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]


class TimelineReviewedEventPropLinksType(TypedDict):
    """TimelineReviewedEventPropLinks"""

    html: TimelineReviewedEventPropLinksPropHtmlType
    pull_request: TimelineReviewedEventPropLinksPropPullRequestType


class TimelineReviewedEventPropLinksPropHtmlType(TypedDict):
    """TimelineReviewedEventPropLinksPropHtml"""

    href: str


class TimelineReviewedEventPropLinksPropPullRequestType(TypedDict):
    """TimelineReviewedEventPropLinksPropPullRequest"""

    href: str


class PullRequestReviewCommentType(TypedDict):
    """Pull Request Review Comment

    Pull Request Review Comments are comments on a portion of the Pull Request's
    diff.
    """

    url: str
    pull_request_review_id: Union[int, None]
    id: int
    node_id: str
    diff_hunk: str
    path: str
    position: NotRequired[int]
    original_position: NotRequired[int]
    commit_id: str
    original_commit_id: str
    in_reply_to_id: NotRequired[int]
    user: SimpleUserType
    body: str
    created_at: datetime
    updated_at: datetime
    html_url: str
    pull_request_url: str
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    links: PullRequestReviewCommentPropLinksType
    start_line: NotRequired[Union[int, None]]
    original_start_line: NotRequired[Union[int, None]]
    start_side: NotRequired[Union[None, Literal["LEFT", "RIGHT"]]]
    line: NotRequired[int]
    original_line: NotRequired[int]
    side: NotRequired[Literal["LEFT", "RIGHT"]]
    subject_type: NotRequired[Literal["line", "file"]]
    reactions: NotRequired[ReactionRollupType]
    body_html: NotRequired[str]
    body_text: NotRequired[str]


class PullRequestReviewCommentPropLinksType(TypedDict):
    """PullRequestReviewCommentPropLinks"""

    self_: PullRequestReviewCommentPropLinksPropSelfType
    html: PullRequestReviewCommentPropLinksPropHtmlType
    pull_request: PullRequestReviewCommentPropLinksPropPullRequestType


class PullRequestReviewCommentPropLinksPropSelfType(TypedDict):
    """PullRequestReviewCommentPropLinksPropSelf"""

    href: str


class PullRequestReviewCommentPropLinksPropHtmlType(TypedDict):
    """PullRequestReviewCommentPropLinksPropHtml"""

    href: str


class PullRequestReviewCommentPropLinksPropPullRequestType(TypedDict):
    """PullRequestReviewCommentPropLinksPropPullRequest"""

    href: str


class TimelineLineCommentedEventType(TypedDict):
    """Timeline Line Commented Event

    Timeline Line Commented Event
    """

    event: NotRequired[Literal["line_commented"]]
    node_id: NotRequired[str]
    comments: NotRequired[List[PullRequestReviewCommentType]]


class TimelineCommitCommentedEventType(TypedDict):
    """Timeline Commit Commented Event

    Timeline Commit Commented Event
    """

    event: NotRequired[Literal["commit_commented"]]
    node_id: NotRequired[str]
    commit_id: NotRequired[str]
    comments: NotRequired[List[CommitCommentType]]


class TimelineAssignedIssueEventType(TypedDict):
    """Timeline Assigned Issue Event

    Timeline Assigned Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUserType
    event: Literal["assigned"]
    commit_id: Union[str, None]
    commit_url: Union[str, None]
    created_at: str
    performed_via_github_app: Union[None, IntegrationType]
    assignee: SimpleUserType


class TimelineUnassignedIssueEventType(TypedDict):
    """Timeline Unassigned Issue Event

    Timeline Unassigned Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUserType
    event: Literal["unassigned"]
    commit_id: Union[str, None]
    commit_url: Union[str, None]
    created_at: str
    performed_via_github_app: Union[None, IntegrationType]
    assignee: SimpleUserType


class StateChangeIssueEventType(TypedDict):
    """State Change Issue Event

    State Change Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUserType
    event: str
    commit_id: Union[str, None]
    commit_url: Union[str, None]
    created_at: str
    performed_via_github_app: Union[None, IntegrationType]
    state_reason: NotRequired[Union[str, None]]


class DeployKeyType(TypedDict):
    """Deploy Key

    An SSH key granting access to a single repository.
    """

    id: int
    key: str
    url: str
    title: str
    verified: bool
    created_at: str
    read_only: bool
    added_by: NotRequired[Union[str, None]]
    last_used: NotRequired[Union[str, None]]


class LanguageType(TypedDict):
    """Language

    Language
    """


class LicenseContentType(TypedDict):
    """License Content

    License Content
    """

    name: str
    path: str
    sha: str
    size: int
    url: str
    html_url: Union[str, None]
    git_url: Union[str, None]
    download_url: Union[str, None]
    type: str
    content: str
    encoding: str
    links: LicenseContentPropLinksType
    license_: Union[None, LicenseSimpleType]


class LicenseContentPropLinksType(TypedDict):
    """LicenseContentPropLinks"""

    git: Union[str, None]
    html: Union[str, None]
    self_: str


class MergedUpstreamType(TypedDict):
    """Merged upstream

    Results of a successful merge upstream request
    """

    message: NotRequired[str]
    merge_type: NotRequired[Literal["merge", "fast-forward", "none"]]
    base_branch: NotRequired[str]


class PagesSourceHashType(TypedDict):
    """Pages Source Hash"""

    branch: str
    path: str


class PagesHttpsCertificateType(TypedDict):
    """Pages Https Certificate"""

    state: Literal[
        "new",
        "authorization_created",
        "authorization_pending",
        "authorized",
        "authorization_revoked",
        "issued",
        "uploaded",
        "approved",
        "errored",
        "bad_authz",
        "destroy_pending",
        "dns_changed",
    ]
    description: str
    domains: List[str]
    expires_at: NotRequired[date]


class PageType(TypedDict):
    """GitHub Pages

    The configuration for GitHub Pages for a repository.
    """

    url: str
    status: Union[None, Literal["built", "building", "errored"]]
    cname: Union[str, None]
    protected_domain_state: NotRequired[
        Union[None, Literal["pending", "verified", "unverified"]]
    ]
    pending_domain_unverified_at: NotRequired[Union[datetime, None]]
    custom_404: bool
    html_url: NotRequired[str]
    build_type: NotRequired[Union[None, Literal["legacy", "workflow"]]]
    source: NotRequired[PagesSourceHashType]
    public: bool
    https_certificate: NotRequired[PagesHttpsCertificateType]
    https_enforced: NotRequired[bool]


class PageBuildType(TypedDict):
    """Page Build

    Page Build
    """

    url: str
    status: str
    error: PageBuildPropErrorType
    pusher: Union[None, SimpleUserType]
    commit: str
    duration: int
    created_at: datetime
    updated_at: datetime


class PageBuildPropErrorType(TypedDict):
    """PageBuildPropError"""

    message: Union[str, None]


class PageBuildStatusType(TypedDict):
    """Page Build Status

    Page Build Status
    """

    url: str
    status: str


class PageDeploymentType(TypedDict):
    """GitHub Pages

    The GitHub Pages deployment status.
    """

    status_url: str
    page_url: str
    preview_url: NotRequired[str]


class PagesHealthCheckType(TypedDict):
    """Pages Health Check Status

    Pages Health Check Status
    """

    domain: NotRequired[PagesHealthCheckPropDomainType]
    alt_domain: NotRequired[Union[PagesHealthCheckPropAltDomainType, None]]


class PagesHealthCheckPropDomainType(TypedDict):
    """PagesHealthCheckPropDomain"""

    host: NotRequired[str]
    uri: NotRequired[str]
    nameservers: NotRequired[str]
    dns_resolves: NotRequired[bool]
    is_proxied: NotRequired[Union[bool, None]]
    is_cloudflare_ip: NotRequired[Union[bool, None]]
    is_fastly_ip: NotRequired[Union[bool, None]]
    is_old_ip_address: NotRequired[Union[bool, None]]
    is_a_record: NotRequired[Union[bool, None]]
    has_cname_record: NotRequired[Union[bool, None]]
    has_mx_records_present: NotRequired[Union[bool, None]]
    is_valid_domain: NotRequired[bool]
    is_apex_domain: NotRequired[bool]
    should_be_a_record: NotRequired[Union[bool, None]]
    is_cname_to_github_user_domain: NotRequired[Union[bool, None]]
    is_cname_to_pages_dot_github_dot_com: NotRequired[Union[bool, None]]
    is_cname_to_fastly: NotRequired[Union[bool, None]]
    is_pointed_to_github_pages_ip: NotRequired[Union[bool, None]]
    is_non_github_pages_ip_present: NotRequired[Union[bool, None]]
    is_pages_domain: NotRequired[bool]
    is_served_by_pages: NotRequired[Union[bool, None]]
    is_valid: NotRequired[bool]
    reason: NotRequired[Union[str, None]]
    responds_to_https: NotRequired[bool]
    enforces_https: NotRequired[bool]
    https_error: NotRequired[Union[str, None]]
    is_https_eligible: NotRequired[Union[bool, None]]
    caa_error: NotRequired[Union[str, None]]


class PagesHealthCheckPropAltDomainType(TypedDict):
    """PagesHealthCheckPropAltDomain"""

    host: NotRequired[str]
    uri: NotRequired[str]
    nameservers: NotRequired[str]
    dns_resolves: NotRequired[bool]
    is_proxied: NotRequired[Union[bool, None]]
    is_cloudflare_ip: NotRequired[Union[bool, None]]
    is_fastly_ip: NotRequired[Union[bool, None]]
    is_old_ip_address: NotRequired[Union[bool, None]]
    is_a_record: NotRequired[Union[bool, None]]
    has_cname_record: NotRequired[Union[bool, None]]
    has_mx_records_present: NotRequired[Union[bool, None]]
    is_valid_domain: NotRequired[bool]
    is_apex_domain: NotRequired[bool]
    should_be_a_record: NotRequired[Union[bool, None]]
    is_cname_to_github_user_domain: NotRequired[Union[bool, None]]
    is_cname_to_pages_dot_github_dot_com: NotRequired[Union[bool, None]]
    is_cname_to_fastly: NotRequired[Union[bool, None]]
    is_pointed_to_github_pages_ip: NotRequired[Union[bool, None]]
    is_non_github_pages_ip_present: NotRequired[Union[bool, None]]
    is_pages_domain: NotRequired[bool]
    is_served_by_pages: NotRequired[Union[bool, None]]
    is_valid: NotRequired[bool]
    reason: NotRequired[Union[str, None]]
    responds_to_https: NotRequired[bool]
    enforces_https: NotRequired[bool]
    https_error: NotRequired[Union[str, None]]
    is_https_eligible: NotRequired[Union[bool, None]]
    caa_error: NotRequired[Union[str, None]]


class PullRequestType(TypedDict):
    """Pull Request

    Pull requests let you tell others about changes you've pushed to a repository on
    GitHub. Once a pull request is sent, interested parties can review the set of
    changes, discuss potential modifications, and even push follow-up commits if
    necessary.
    """

    url: str
    id: int
    node_id: str
    html_url: str
    diff_url: str
    patch_url: str
    issue_url: str
    commits_url: str
    review_comments_url: str
    review_comment_url: str
    comments_url: str
    statuses_url: str
    number: int
    state: Literal["open", "closed"]
    locked: bool
    title: str
    user: SimpleUserType
    body: Union[str, None]
    labels: List[PullRequestPropLabelsItemsType]
    milestone: Union[None, MilestoneType]
    active_lock_reason: NotRequired[Union[str, None]]
    created_at: datetime
    updated_at: datetime
    closed_at: Union[datetime, None]
    merged_at: Union[datetime, None]
    merge_commit_sha: Union[str, None]
    assignee: Union[None, SimpleUserType]
    assignees: NotRequired[Union[List[SimpleUserType], None]]
    requested_reviewers: NotRequired[Union[List[SimpleUserType], None]]
    requested_teams: NotRequired[Union[List[TeamSimpleType], None]]
    head: PullRequestPropHeadType
    base: PullRequestPropBaseType
    links: PullRequestPropLinksType
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    auto_merge: Union[AutoMergeType, None]
    draft: NotRequired[bool]
    merged: bool
    mergeable: Union[bool, None]
    rebaseable: NotRequired[Union[bool, None]]
    mergeable_state: str
    merged_by: Union[None, SimpleUserType]
    comments: int
    review_comments: int
    maintainer_can_modify: bool
    commits: int
    additions: int
    deletions: int
    changed_files: int


class PullRequestPropLabelsItemsType(TypedDict):
    """PullRequestPropLabelsItems"""

    id: int
    node_id: str
    url: str
    name: str
    description: Union[str, None]
    color: str
    default: bool


class PullRequestPropHeadType(TypedDict):
    """PullRequestPropHead"""

    label: Union[str, None]
    ref: str
    repo: Union[PullRequestPropHeadPropRepoType, None]
    sha: str
    user: Union[PullRequestPropHeadPropUserType, None]


class PullRequestPropHeadPropRepoPropOwnerType(TypedDict):
    """PullRequestPropHeadPropRepoPropOwner"""

    avatar_url: str
    events_url: str
    followers_url: str
    following_url: str
    gists_url: str
    gravatar_id: Union[str, None]
    html_url: str
    id: int
    node_id: str
    login: str
    organizations_url: str
    received_events_url: str
    repos_url: str
    site_admin: bool
    starred_url: str
    subscriptions_url: str
    type: str
    url: str


class PullRequestPropHeadPropRepoPropPermissionsType(TypedDict):
    """PullRequestPropHeadPropRepoPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    push: bool
    triage: NotRequired[bool]
    pull: bool


class PullRequestPropHeadPropRepoPropLicenseType(TypedDict):
    """PullRequestPropHeadPropRepoPropLicense"""

    key: str
    name: str
    url: Union[str, None]
    spdx_id: Union[str, None]
    node_id: str


class PullRequestPropHeadPropRepoType(TypedDict):
    """PullRequestPropHeadPropRepo"""

    archive_url: str
    assignees_url: str
    blobs_url: str
    branches_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    deployments_url: str
    description: Union[str, None]
    downloads_url: str
    events_url: str
    fork: bool
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    hooks_url: str
    html_url: str
    id: int
    node_id: str
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    languages_url: str
    merges_url: str
    milestones_url: str
    name: str
    notifications_url: str
    owner: PullRequestPropHeadPropRepoPropOwnerType
    private: bool
    pulls_url: str
    releases_url: str
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    tags_url: str
    teams_url: str
    trees_url: str
    url: str
    clone_url: str
    default_branch: str
    forks: int
    forks_count: int
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_projects: bool
    has_wiki: bool
    has_pages: bool
    has_discussions: bool
    homepage: Union[str, None]
    language: Union[str, None]
    master_branch: NotRequired[str]
    archived: bool
    disabled: bool
    visibility: NotRequired[str]
    mirror_url: Union[str, None]
    open_issues: int
    open_issues_count: int
    permissions: NotRequired[PullRequestPropHeadPropRepoPropPermissionsType]
    temp_clone_token: NotRequired[Union[str, None]]
    allow_merge_commit: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    license_: Union[PullRequestPropHeadPropRepoPropLicenseType, None]
    pushed_at: datetime
    size: int
    ssh_url: str
    stargazers_count: int
    svn_url: str
    topics: NotRequired[List[str]]
    watchers: int
    watchers_count: int
    created_at: datetime
    updated_at: datetime
    allow_forking: NotRequired[bool]
    is_template: NotRequired[bool]
    web_commit_signoff_required: NotRequired[bool]


class PullRequestPropHeadPropUserType(TypedDict):
    """PullRequestPropHeadPropUser"""

    avatar_url: str
    events_url: str
    followers_url: str
    following_url: str
    gists_url: str
    gravatar_id: Union[str, None]
    html_url: str
    id: int
    node_id: str
    login: str
    organizations_url: str
    received_events_url: str
    repos_url: str
    site_admin: bool
    starred_url: str
    subscriptions_url: str
    type: str
    url: str


class PullRequestPropBaseType(TypedDict):
    """PullRequestPropBase"""

    label: str
    ref: str
    repo: PullRequestPropBasePropRepoType
    sha: str
    user: PullRequestPropBasePropUserType


class PullRequestPropBasePropRepoType(TypedDict):
    """PullRequestPropBasePropRepo"""

    archive_url: str
    assignees_url: str
    blobs_url: str
    branches_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    deployments_url: str
    description: Union[str, None]
    downloads_url: str
    events_url: str
    fork: bool
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    node_id: str
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    languages_url: str
    merges_url: str
    milestones_url: str
    name: str
    notifications_url: str
    owner: PullRequestPropBasePropRepoPropOwnerType
    private: bool
    pulls_url: str
    releases_url: str
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    tags_url: str
    teams_url: str
    trees_url: str
    url: str
    clone_url: str
    default_branch: str
    forks: int
    forks_count: int
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_projects: bool
    has_wiki: bool
    has_pages: bool
    has_discussions: bool
    homepage: Union[str, None]
    language: Union[str, None]
    master_branch: NotRequired[str]
    archived: bool
    disabled: bool
    visibility: NotRequired[str]
    mirror_url: Union[str, None]
    open_issues: int
    open_issues_count: int
    permissions: NotRequired[PullRequestPropBasePropRepoPropPermissionsType]
    temp_clone_token: NotRequired[Union[str, None]]
    allow_merge_commit: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    license_: Union[None, LicenseSimpleType]
    pushed_at: datetime
    size: int
    ssh_url: str
    stargazers_count: int
    svn_url: str
    topics: NotRequired[List[str]]
    watchers: int
    watchers_count: int
    created_at: datetime
    updated_at: datetime
    allow_forking: NotRequired[bool]
    web_commit_signoff_required: NotRequired[bool]


class PullRequestPropBasePropRepoPropOwnerType(TypedDict):
    """PullRequestPropBasePropRepoPropOwner"""

    avatar_url: str
    events_url: str
    followers_url: str
    following_url: str
    gists_url: str
    gravatar_id: Union[str, None]
    html_url: str
    id: int
    node_id: str
    login: str
    organizations_url: str
    received_events_url: str
    repos_url: str
    site_admin: bool
    starred_url: str
    subscriptions_url: str
    type: str
    url: str


class PullRequestPropBasePropRepoPropPermissionsType(TypedDict):
    """PullRequestPropBasePropRepoPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    push: bool
    triage: NotRequired[bool]
    pull: bool


class PullRequestPropBasePropUserType(TypedDict):
    """PullRequestPropBasePropUser"""

    avatar_url: str
    events_url: str
    followers_url: str
    following_url: str
    gists_url: str
    gravatar_id: Union[str, None]
    html_url: str
    id: int
    node_id: str
    login: str
    organizations_url: str
    received_events_url: str
    repos_url: str
    site_admin: bool
    starred_url: str
    subscriptions_url: str
    type: str
    url: str


class PullRequestPropLinksType(TypedDict):
    """PullRequestPropLinks"""

    comments: LinkType
    commits: LinkType
    statuses: LinkType
    html: LinkType
    issue: LinkType
    review_comments: LinkType
    review_comment: LinkType
    self_: LinkType


class PullRequestMergeResultType(TypedDict):
    """Pull Request Merge Result

    Pull Request Merge Result
    """

    sha: str
    merged: bool
    message: str


class PullRequestReviewRequestType(TypedDict):
    """Pull Request Review Request

    Pull Request Review Request
    """

    users: List[SimpleUserType]
    teams: List[TeamType]


class PullRequestReviewType(TypedDict):
    """Pull Request Review

    Pull Request Reviews are reviews on pull requests.
    """

    id: int
    node_id: str
    user: Union[None, SimpleUserType]
    body: str
    state: str
    html_url: str
    pull_request_url: str
    links: PullRequestReviewPropLinksType
    submitted_at: NotRequired[datetime]
    commit_id: Union[str, None]
    body_html: NotRequired[str]
    body_text: NotRequired[str]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]


class PullRequestReviewPropLinksType(TypedDict):
    """PullRequestReviewPropLinks"""

    html: PullRequestReviewPropLinksPropHtmlType
    pull_request: PullRequestReviewPropLinksPropPullRequestType


class PullRequestReviewPropLinksPropHtmlType(TypedDict):
    """PullRequestReviewPropLinksPropHtml"""

    href: str


class PullRequestReviewPropLinksPropPullRequestType(TypedDict):
    """PullRequestReviewPropLinksPropPullRequest"""

    href: str


class ReviewCommentType(TypedDict):
    """Legacy Review Comment

    Legacy Review Comment
    """

    url: str
    pull_request_review_id: Union[int, None]
    id: int
    node_id: str
    diff_hunk: str
    path: str
    position: Union[int, None]
    original_position: int
    commit_id: str
    original_commit_id: str
    in_reply_to_id: NotRequired[int]
    user: Union[None, SimpleUserType]
    body: str
    created_at: datetime
    updated_at: datetime
    html_url: str
    pull_request_url: str
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    links: ReviewCommentPropLinksType
    body_text: NotRequired[str]
    body_html: NotRequired[str]
    reactions: NotRequired[ReactionRollupType]
    side: NotRequired[Literal["LEFT", "RIGHT"]]
    start_side: NotRequired[Union[None, Literal["LEFT", "RIGHT"]]]
    line: NotRequired[int]
    original_line: NotRequired[int]
    start_line: NotRequired[Union[int, None]]
    original_start_line: NotRequired[Union[int, None]]


class ReviewCommentPropLinksType(TypedDict):
    """ReviewCommentPropLinks"""

    self_: LinkType
    html: LinkType
    pull_request: LinkType


class ReleaseAssetType(TypedDict):
    """Release Asset

    Data related to a release.
    """

    url: str
    browser_download_url: str
    id: int
    node_id: str
    name: str
    label: Union[str, None]
    state: Literal["uploaded", "open"]
    content_type: str
    size: int
    download_count: int
    created_at: datetime
    updated_at: datetime
    uploader: Union[None, SimpleUserType]


class ReleaseType(TypedDict):
    """Release

    A release.
    """

    url: str
    html_url: str
    assets_url: str
    upload_url: str
    tarball_url: Union[str, None]
    zipball_url: Union[str, None]
    id: int
    node_id: str
    tag_name: str
    target_commitish: str
    name: Union[str, None]
    body: NotRequired[Union[str, None]]
    draft: bool
    prerelease: bool
    created_at: datetime
    published_at: Union[datetime, None]
    author: SimpleUserType
    assets: List[ReleaseAssetType]
    body_html: NotRequired[Union[str, None]]
    body_text: NotRequired[Union[str, None]]
    mentions_count: NotRequired[int]
    discussion_url: NotRequired[str]
    reactions: NotRequired[ReactionRollupType]


class ReleaseNotesContentType(TypedDict):
    """Generated Release Notes Content

    Generated name and body describing a release
    """

    name: str
    body: str


class RepositoryRuleRulesetInfoType(TypedDict):
    """repository ruleset data for rule

    User-defined metadata to store domain-specific information limited to 8 keys
    with scalar values.
    """

    ruleset_source_type: NotRequired[Literal["Repository", "Organization"]]
    ruleset_source: NotRequired[str]
    ruleset_id: NotRequired[int]


class RepositoryRuleDetailedOneof0Type(TypedDict):
    """RepositoryRuleDetailedOneof0"""

    type: Literal["creation"]
    ruleset_source_type: NotRequired[Literal["Repository", "Organization"]]
    ruleset_source: NotRequired[str]
    ruleset_id: NotRequired[int]


class RepositoryRuleDetailedOneof1Type(TypedDict):
    """RepositoryRuleDetailedOneof1"""

    type: Literal["update"]
    parameters: NotRequired[RepositoryRuleUpdatePropParametersType]
    ruleset_source_type: NotRequired[Literal["Repository", "Organization"]]
    ruleset_source: NotRequired[str]
    ruleset_id: NotRequired[int]


class RepositoryRuleDetailedOneof2Type(TypedDict):
    """RepositoryRuleDetailedOneof2"""

    type: Literal["deletion"]
    ruleset_source_type: NotRequired[Literal["Repository", "Organization"]]
    ruleset_source: NotRequired[str]
    ruleset_id: NotRequired[int]


class RepositoryRuleDetailedOneof3Type(TypedDict):
    """RepositoryRuleDetailedOneof3"""

    type: Literal["required_linear_history"]
    ruleset_source_type: NotRequired[Literal["Repository", "Organization"]]
    ruleset_source: NotRequired[str]
    ruleset_id: NotRequired[int]


class RepositoryRuleDetailedOneof4Type(TypedDict):
    """RepositoryRuleDetailedOneof4"""

    type: Literal["required_deployments"]
    parameters: NotRequired[RepositoryRuleRequiredDeploymentsPropParametersType]
    ruleset_source_type: NotRequired[Literal["Repository", "Organization"]]
    ruleset_source: NotRequired[str]
    ruleset_id: NotRequired[int]


class RepositoryRuleDetailedOneof5Type(TypedDict):
    """RepositoryRuleDetailedOneof5"""

    type: Literal["required_signatures"]
    ruleset_source_type: NotRequired[Literal["Repository", "Organization"]]
    ruleset_source: NotRequired[str]
    ruleset_id: NotRequired[int]


class RepositoryRuleDetailedOneof6Type(TypedDict):
    """RepositoryRuleDetailedOneof6"""

    type: Literal["pull_request"]
    parameters: NotRequired[RepositoryRulePullRequestPropParametersType]
    ruleset_source_type: NotRequired[Literal["Repository", "Organization"]]
    ruleset_source: NotRequired[str]
    ruleset_id: NotRequired[int]


class RepositoryRuleDetailedOneof7Type(TypedDict):
    """RepositoryRuleDetailedOneof7"""

    type: Literal["required_status_checks"]
    parameters: NotRequired[RepositoryRuleRequiredStatusChecksPropParametersType]
    ruleset_source_type: NotRequired[Literal["Repository", "Organization"]]
    ruleset_source: NotRequired[str]
    ruleset_id: NotRequired[int]


class RepositoryRuleDetailedOneof8Type(TypedDict):
    """RepositoryRuleDetailedOneof8"""

    type: Literal["non_fast_forward"]
    ruleset_source_type: NotRequired[Literal["Repository", "Organization"]]
    ruleset_source: NotRequired[str]
    ruleset_id: NotRequired[int]


class RepositoryRuleDetailedOneof9Type(TypedDict):
    """RepositoryRuleDetailedOneof9"""

    type: Literal["commit_message_pattern"]
    parameters: NotRequired[RepositoryRuleCommitMessagePatternPropParametersType]
    ruleset_source_type: NotRequired[Literal["Repository", "Organization"]]
    ruleset_source: NotRequired[str]
    ruleset_id: NotRequired[int]


class RepositoryRuleDetailedOneof10Type(TypedDict):
    """RepositoryRuleDetailedOneof10"""

    type: Literal["commit_author_email_pattern"]
    parameters: NotRequired[RepositoryRuleCommitAuthorEmailPatternPropParametersType]
    ruleset_source_type: NotRequired[Literal["Repository", "Organization"]]
    ruleset_source: NotRequired[str]
    ruleset_id: NotRequired[int]


class RepositoryRuleDetailedOneof11Type(TypedDict):
    """RepositoryRuleDetailedOneof11"""

    type: Literal["committer_email_pattern"]
    parameters: NotRequired[RepositoryRuleCommitterEmailPatternPropParametersType]
    ruleset_source_type: NotRequired[Literal["Repository", "Organization"]]
    ruleset_source: NotRequired[str]
    ruleset_id: NotRequired[int]


class RepositoryRuleDetailedOneof12Type(TypedDict):
    """RepositoryRuleDetailedOneof12"""

    type: Literal["branch_name_pattern"]
    parameters: NotRequired[RepositoryRuleBranchNamePatternPropParametersType]
    ruleset_source_type: NotRequired[Literal["Repository", "Organization"]]
    ruleset_source: NotRequired[str]
    ruleset_id: NotRequired[int]


class RepositoryRuleDetailedOneof13Type(TypedDict):
    """RepositoryRuleDetailedOneof13"""

    type: Literal["tag_name_pattern"]
    parameters: NotRequired[RepositoryRuleTagNamePatternPropParametersType]
    ruleset_source_type: NotRequired[Literal["Repository", "Organization"]]
    ruleset_source: NotRequired[str]
    ruleset_id: NotRequired[int]


class RepositoryRuleDetailedOneof14Type(TypedDict):
    """RepositoryRuleDetailedOneof14"""

    type: Literal["workflows"]
    parameters: NotRequired[RepositoryRuleWorkflowsPropParametersType]
    ruleset_source_type: NotRequired[Literal["Repository", "Organization"]]
    ruleset_source: NotRequired[str]
    ruleset_id: NotRequired[int]


class SecretScanningAlertType(TypedDict):
    """SecretScanningAlert"""

    number: NotRequired[int]
    created_at: NotRequired[datetime]
    updated_at: NotRequired[Union[None, datetime]]
    url: NotRequired[str]
    html_url: NotRequired[str]
    locations_url: NotRequired[str]
    state: NotRequired[Literal["open", "resolved"]]
    resolution: NotRequired[
        Union[None, Literal["false_positive", "wont_fix", "revoked", "used_in_tests"]]
    ]
    resolved_at: NotRequired[Union[datetime, None]]
    resolved_by: NotRequired[Union[None, SimpleUserType]]
    resolution_comment: NotRequired[Union[str, None]]
    secret_type: NotRequired[str]
    secret_type_display_name: NotRequired[str]
    secret: NotRequired[str]
    push_protection_bypassed: NotRequired[Union[bool, None]]
    push_protection_bypassed_by: NotRequired[Union[None, SimpleUserType]]
    push_protection_bypassed_at: NotRequired[Union[datetime, None]]
    validity: NotRequired[Literal["active", "inactive", "unknown"]]


class SecretScanningLocationCommitType(TypedDict):
    """SecretScanningLocationCommit

    Represents a 'commit' secret scanning location type. This location type shows
    that a secret was detected inside a commit to a repository.
    """

    path: str
    start_line: float
    end_line: float
    start_column: float
    end_column: float
    blob_sha: str
    blob_url: str
    commit_sha: str
    commit_url: str


class SecretScanningLocationIssueTitleType(TypedDict):
    """SecretScanningLocationIssueTitle

    Represents an 'issue_title' secret scanning location type. This location type
    shows that a secret was detected in the title of an issue.
    """

    issue_title_url: str


class SecretScanningLocationIssueBodyType(TypedDict):
    """SecretScanningLocationIssueBody

    Represents an 'issue_body' secret scanning location type. This location type
    shows that a secret was detected in the body of an issue.
    """

    issue_body_url: str


class SecretScanningLocationIssueCommentType(TypedDict):
    """SecretScanningLocationIssueComment

    Represents an 'issue_comment' secret scanning location type. This location type
    shows that a secret was detected in a comment on an issue.
    """

    issue_comment_url: str


class SecretScanningLocationDiscussionTitleType(TypedDict):
    """SecretScanningLocationDiscussionTitle

    Represents a 'discussion_title' secret scanning location type. This location
    type shows that a secret was detected in the title of a discussion.
    """

    discussion_title_url: str


class SecretScanningLocationDiscussionBodyType(TypedDict):
    """SecretScanningLocationDiscussionBody

    Represents a 'discussion_body' secret scanning location type. This location type
    shows that a secret was detected in the body of a discussion.
    """

    discussion_body_url: str


class SecretScanningLocationDiscussionCommentType(TypedDict):
    """SecretScanningLocationDiscussionComment

    Represents a 'discussion_comment' secret scanning location type. This location
    type shows that a secret was detected in a comment on a discussion.
    """

    discussion_comment_url: str


class SecretScanningLocationPullRequestTitleType(TypedDict):
    """SecretScanningLocationPullRequestTitle

    Represents a 'pull_request_title' secret scanning location type. This location
    type shows that a secret was detected in the title of a pull request.
    """

    pull_request_title_url: str


class SecretScanningLocationPullRequestBodyType(TypedDict):
    """SecretScanningLocationPullRequestBody

    Represents a 'pull_request_body' secret scanning location type. This location
    type shows that a secret was detected in the body of a pull request.
    """

    pull_request_body_url: str


class SecretScanningLocationPullRequestCommentType(TypedDict):
    """SecretScanningLocationPullRequestComment

    Represents a 'pull_request_comment' secret scanning location type. This location
    type shows that a secret was detected in a comment on a pull request.
    """

    pull_request_comment_url: str


class SecretScanningLocationPullRequestReviewType(TypedDict):
    """SecretScanningLocationPullRequestReview

    Represents a 'pull_request_review' secret scanning location type. This location
    type shows that a secret was detected in a review on a pull request.
    """

    pull_request_review_url: str


class SecretScanningLocationPullRequestReviewCommentType(TypedDict):
    """SecretScanningLocationPullRequestReviewComment

    Represents a 'pull_request_review_comment' secret scanning location type. This
    location type shows that a secret was detected in a review comment on a pull
    request.
    """

    pull_request_review_comment_url: str


class SecretScanningLocationType(TypedDict):
    """SecretScanningLocation"""

    type: Literal[
        "commit",
        "issue_title",
        "issue_body",
        "issue_comment",
        "discussion_title",
        "discussion_body",
        "discussion_comment",
        "pull_request_title",
        "pull_request_body",
        "pull_request_comment",
        "pull_request_review",
        "pull_request_review_comment",
    ]
    details: Union[
        SecretScanningLocationCommitType,
        SecretScanningLocationIssueTitleType,
        SecretScanningLocationIssueBodyType,
        SecretScanningLocationIssueCommentType,
        SecretScanningLocationDiscussionTitleType,
        SecretScanningLocationDiscussionBodyType,
        SecretScanningLocationDiscussionCommentType,
        SecretScanningLocationPullRequestTitleType,
        SecretScanningLocationPullRequestBodyType,
        SecretScanningLocationPullRequestCommentType,
        SecretScanningLocationPullRequestReviewType,
        SecretScanningLocationPullRequestReviewCommentType,
    ]


class RepositoryAdvisoryCreateType(TypedDict):
    """RepositoryAdvisoryCreate"""

    summary: str
    description: str
    cve_id: NotRequired[Union[str, None]]
    vulnerabilities: List[RepositoryAdvisoryCreatePropVulnerabilitiesItemsType]
    cwe_ids: NotRequired[Union[List[str], None]]
    credits_: NotRequired[
        Union[List[RepositoryAdvisoryCreatePropCreditsItemsType], None]
    ]
    severity: NotRequired[Union[None, Literal["critical", "high", "medium", "low"]]]
    cvss_vector_string: NotRequired[Union[str, None]]
    start_private_fork: NotRequired[bool]


class RepositoryAdvisoryCreatePropVulnerabilitiesItemsType(TypedDict):
    """RepositoryAdvisoryCreatePropVulnerabilitiesItems"""

    package: RepositoryAdvisoryCreatePropVulnerabilitiesItemsPropPackageType
    vulnerable_version_range: NotRequired[Union[str, None]]
    patched_versions: NotRequired[Union[str, None]]
    vulnerable_functions: NotRequired[Union[List[str], None]]


class RepositoryAdvisoryCreatePropVulnerabilitiesItemsPropPackageType(TypedDict):
    """RepositoryAdvisoryCreatePropVulnerabilitiesItemsPropPackage

    The name of the package affected by the vulnerability.
    """

    ecosystem: Literal[
        "rubygems",
        "npm",
        "pip",
        "maven",
        "nuget",
        "composer",
        "go",
        "rust",
        "erlang",
        "actions",
        "pub",
        "other",
        "swift",
    ]
    name: NotRequired[Union[str, None]]


class RepositoryAdvisoryCreatePropCreditsItemsType(TypedDict):
    """RepositoryAdvisoryCreatePropCreditsItems"""

    login: str
    type: Literal[
        "analyst",
        "finder",
        "reporter",
        "coordinator",
        "remediation_developer",
        "remediation_reviewer",
        "remediation_verifier",
        "tool",
        "sponsor",
        "other",
    ]


class PrivateVulnerabilityReportCreateType(TypedDict):
    """PrivateVulnerabilityReportCreate"""

    summary: str
    description: str
    vulnerabilities: NotRequired[
        Union[List[PrivateVulnerabilityReportCreatePropVulnerabilitiesItemsType], None]
    ]
    cwe_ids: NotRequired[Union[List[str], None]]
    severity: NotRequired[Union[None, Literal["critical", "high", "medium", "low"]]]
    cvss_vector_string: NotRequired[Union[str, None]]
    start_private_fork: NotRequired[bool]


class PrivateVulnerabilityReportCreatePropVulnerabilitiesItemsType(TypedDict):
    """PrivateVulnerabilityReportCreatePropVulnerabilitiesItems"""

    package: PrivateVulnerabilityReportCreatePropVulnerabilitiesItemsPropPackageType
    vulnerable_version_range: NotRequired[Union[str, None]]
    patched_versions: NotRequired[Union[str, None]]
    vulnerable_functions: NotRequired[Union[List[str], None]]


class PrivateVulnerabilityReportCreatePropVulnerabilitiesItemsPropPackageType(
    TypedDict
):
    """PrivateVulnerabilityReportCreatePropVulnerabilitiesItemsPropPackage

    The name of the package affected by the vulnerability.
    """

    ecosystem: Literal[
        "rubygems",
        "npm",
        "pip",
        "maven",
        "nuget",
        "composer",
        "go",
        "rust",
        "erlang",
        "actions",
        "pub",
        "other",
        "swift",
    ]
    name: NotRequired[Union[str, None]]


class RepositoryAdvisoryUpdateType(TypedDict):
    """RepositoryAdvisoryUpdate"""

    summary: NotRequired[str]
    description: NotRequired[str]
    cve_id: NotRequired[Union[str, None]]
    vulnerabilities: NotRequired[
        List[RepositoryAdvisoryUpdatePropVulnerabilitiesItemsType]
    ]
    cwe_ids: NotRequired[Union[List[str], None]]
    credits_: NotRequired[
        Union[List[RepositoryAdvisoryUpdatePropCreditsItemsType], None]
    ]
    severity: NotRequired[Union[None, Literal["critical", "high", "medium", "low"]]]
    cvss_vector_string: NotRequired[Union[str, None]]
    state: NotRequired[Literal["published", "closed", "draft"]]
    collaborating_users: NotRequired[Union[List[str], None]]
    collaborating_teams: NotRequired[Union[List[str], None]]


class RepositoryAdvisoryUpdatePropVulnerabilitiesItemsType(TypedDict):
    """RepositoryAdvisoryUpdatePropVulnerabilitiesItems"""

    package: RepositoryAdvisoryUpdatePropVulnerabilitiesItemsPropPackageType
    vulnerable_version_range: NotRequired[Union[str, None]]
    patched_versions: NotRequired[Union[str, None]]
    vulnerable_functions: NotRequired[Union[List[str], None]]


class RepositoryAdvisoryUpdatePropVulnerabilitiesItemsPropPackageType(TypedDict):
    """RepositoryAdvisoryUpdatePropVulnerabilitiesItemsPropPackage

    The name of the package affected by the vulnerability.
    """

    ecosystem: Literal[
        "rubygems",
        "npm",
        "pip",
        "maven",
        "nuget",
        "composer",
        "go",
        "rust",
        "erlang",
        "actions",
        "pub",
        "other",
        "swift",
    ]
    name: NotRequired[Union[str, None]]


class RepositoryAdvisoryUpdatePropCreditsItemsType(TypedDict):
    """RepositoryAdvisoryUpdatePropCreditsItems"""

    login: str
    type: Literal[
        "analyst",
        "finder",
        "reporter",
        "coordinator",
        "remediation_developer",
        "remediation_reviewer",
        "remediation_verifier",
        "tool",
        "sponsor",
        "other",
    ]


class StargazerType(TypedDict):
    """Stargazer

    Stargazer
    """

    starred_at: datetime
    user: Union[None, SimpleUserType]


class CommitActivityType(TypedDict):
    """Commit Activity

    Commit Activity
    """

    days: List[int]
    total: int
    week: int


class ContributorActivityType(TypedDict):
    """Contributor Activity

    Contributor Activity
    """

    author: Union[None, SimpleUserType]
    total: int
    weeks: List[ContributorActivityPropWeeksItemsType]


class ContributorActivityPropWeeksItemsType(TypedDict):
    """ContributorActivityPropWeeksItems"""

    w: NotRequired[int]
    a: NotRequired[int]
    d: NotRequired[int]
    c: NotRequired[int]


class ParticipationStatsType(TypedDict):
    """Participation Stats"""

    all_: List[int]
    owner: List[int]


class RepositorySubscriptionType(TypedDict):
    """Repository Invitation

    Repository invitations let you manage who you collaborate with.
    """

    subscribed: bool
    ignored: bool
    reason: Union[str, None]
    created_at: datetime
    url: str
    repository_url: str


class TagType(TypedDict):
    """Tag

    Tag
    """

    name: str
    commit: TagPropCommitType
    zipball_url: str
    tarball_url: str
    node_id: str


class TagPropCommitType(TypedDict):
    """TagPropCommit"""

    sha: str
    url: str


class TagProtectionType(TypedDict):
    """Tag protection

    Tag protection
    """

    id: NotRequired[int]
    created_at: NotRequired[str]
    updated_at: NotRequired[str]
    enabled: NotRequired[bool]
    pattern: str


class TopicType(TypedDict):
    """Topic

    A topic aggregates entities that are related to a subject.
    """

    names: List[str]


class TrafficType(TypedDict):
    """Traffic"""

    timestamp: datetime
    uniques: int
    count: int


class CloneTrafficType(TypedDict):
    """Clone Traffic

    Clone Traffic
    """

    count: int
    uniques: int
    clones: List[TrafficType]


class ContentTrafficType(TypedDict):
    """Content Traffic

    Content Traffic
    """

    path: str
    title: str
    count: int
    uniques: int


class ReferrerTrafficType(TypedDict):
    """Referrer Traffic

    Referrer Traffic
    """

    referrer: str
    count: int
    uniques: int


class ViewTrafficType(TypedDict):
    """View Traffic

    View Traffic
    """

    count: int
    uniques: int
    views: List[TrafficType]


class SearchResultTextMatchesItemsType(TypedDict):
    """SearchResultTextMatchesItems"""

    object_url: NotRequired[str]
    object_type: NotRequired[Union[str, None]]
    property_: NotRequired[str]
    fragment: NotRequired[str]
    matches: NotRequired[List[SearchResultTextMatchesItemsPropMatchesItemsType]]


class SearchResultTextMatchesItemsPropMatchesItemsType(TypedDict):
    """SearchResultTextMatchesItemsPropMatchesItems"""

    text: NotRequired[str]
    indices: NotRequired[List[int]]


class CodeSearchResultItemType(TypedDict):
    """Code Search Result Item

    Code Search Result Item
    """

    name: str
    path: str
    sha: str
    url: str
    git_url: str
    html_url: str
    repository: MinimalRepositoryType
    score: float
    file_size: NotRequired[int]
    language: NotRequired[Union[str, None]]
    last_modified_at: NotRequired[datetime]
    line_numbers: NotRequired[List[str]]
    text_matches: NotRequired[List[SearchResultTextMatchesItemsType]]


class CommitSearchResultItemType(TypedDict):
    """Commit Search Result Item

    Commit Search Result Item
    """

    url: str
    sha: str
    html_url: str
    comments_url: str
    commit: CommitSearchResultItemPropCommitType
    author: Union[None, SimpleUserType]
    committer: Union[None, GitUserType]
    parents: List[CommitSearchResultItemPropParentsItemsType]
    repository: MinimalRepositoryType
    score: float
    node_id: str
    text_matches: NotRequired[List[SearchResultTextMatchesItemsType]]


class CommitSearchResultItemPropCommitType(TypedDict):
    """CommitSearchResultItemPropCommit"""

    author: CommitSearchResultItemPropCommitPropAuthorType
    committer: Union[None, GitUserType]
    comment_count: int
    message: str
    tree: CommitSearchResultItemPropCommitPropTreeType
    url: str
    verification: NotRequired[VerificationType]


class CommitSearchResultItemPropCommitPropAuthorType(TypedDict):
    """CommitSearchResultItemPropCommitPropAuthor"""

    name: str
    email: str
    date: datetime


class CommitSearchResultItemPropCommitPropTreeType(TypedDict):
    """CommitSearchResultItemPropCommitPropTree"""

    sha: str
    url: str


class CommitSearchResultItemPropParentsItemsType(TypedDict):
    """CommitSearchResultItemPropParentsItems"""

    url: NotRequired[str]
    html_url: NotRequired[str]
    sha: NotRequired[str]


class IssueSearchResultItemType(TypedDict):
    """Issue Search Result Item

    Issue Search Result Item
    """

    url: str
    repository_url: str
    labels_url: str
    comments_url: str
    events_url: str
    html_url: str
    id: int
    node_id: str
    number: int
    title: str
    locked: bool
    active_lock_reason: NotRequired[Union[str, None]]
    assignees: NotRequired[Union[List[SimpleUserType], None]]
    user: Union[None, SimpleUserType]
    labels: List[IssueSearchResultItemPropLabelsItemsType]
    state: str
    state_reason: NotRequired[Union[str, None]]
    assignee: Union[None, SimpleUserType]
    milestone: Union[None, MilestoneType]
    comments: int
    created_at: datetime
    updated_at: datetime
    closed_at: Union[datetime, None]
    text_matches: NotRequired[List[SearchResultTextMatchesItemsType]]
    pull_request: NotRequired[IssueSearchResultItemPropPullRequestType]
    body: NotRequired[str]
    score: float
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    draft: NotRequired[bool]
    repository: NotRequired[RepositoryType]
    body_html: NotRequired[str]
    body_text: NotRequired[str]
    timeline_url: NotRequired[str]
    performed_via_github_app: NotRequired[Union[None, IntegrationType]]
    reactions: NotRequired[ReactionRollupType]


class IssueSearchResultItemPropLabelsItemsType(TypedDict):
    """IssueSearchResultItemPropLabelsItems"""

    id: NotRequired[int]
    node_id: NotRequired[str]
    url: NotRequired[str]
    name: NotRequired[str]
    color: NotRequired[str]
    default: NotRequired[bool]
    description: NotRequired[Union[str, None]]


class IssueSearchResultItemPropPullRequestType(TypedDict):
    """IssueSearchResultItemPropPullRequest"""

    merged_at: NotRequired[Union[datetime, None]]
    diff_url: Union[str, None]
    html_url: Union[str, None]
    patch_url: Union[str, None]
    url: Union[str, None]


class LabelSearchResultItemType(TypedDict):
    """Label Search Result Item

    Label Search Result Item
    """

    id: int
    node_id: str
    url: str
    name: str
    color: str
    default: bool
    description: Union[str, None]
    score: float
    text_matches: NotRequired[List[SearchResultTextMatchesItemsType]]


class RepoSearchResultItemType(TypedDict):
    """Repo Search Result Item

    Repo Search Result Item
    """

    id: int
    node_id: str
    name: str
    full_name: str
    owner: Union[None, SimpleUserType]
    private: bool
    html_url: str
    description: Union[str, None]
    fork: bool
    url: str
    created_at: datetime
    updated_at: datetime
    pushed_at: datetime
    homepage: Union[str, None]
    size: int
    stargazers_count: int
    watchers_count: int
    language: Union[str, None]
    forks_count: int
    open_issues_count: int
    master_branch: NotRequired[str]
    default_branch: str
    score: float
    forks_url: str
    keys_url: str
    collaborators_url: str
    teams_url: str
    hooks_url: str
    issue_events_url: str
    events_url: str
    assignees_url: str
    branches_url: str
    tags_url: str
    blobs_url: str
    git_tags_url: str
    git_refs_url: str
    trees_url: str
    statuses_url: str
    languages_url: str
    stargazers_url: str
    contributors_url: str
    subscribers_url: str
    subscription_url: str
    commits_url: str
    git_commits_url: str
    comments_url: str
    issue_comment_url: str
    contents_url: str
    compare_url: str
    merges_url: str
    archive_url: str
    downloads_url: str
    issues_url: str
    pulls_url: str
    milestones_url: str
    notifications_url: str
    labels_url: str
    releases_url: str
    deployments_url: str
    git_url: str
    ssh_url: str
    clone_url: str
    svn_url: str
    forks: int
    open_issues: int
    watchers: int
    topics: NotRequired[List[str]]
    mirror_url: Union[str, None]
    has_issues: bool
    has_projects: bool
    has_pages: bool
    has_wiki: bool
    has_downloads: bool
    has_discussions: NotRequired[bool]
    archived: bool
    disabled: bool
    visibility: NotRequired[str]
    license_: Union[None, LicenseSimpleType]
    permissions: NotRequired[RepoSearchResultItemPropPermissionsType]
    text_matches: NotRequired[List[SearchResultTextMatchesItemsType]]
    temp_clone_token: NotRequired[Union[str, None]]
    allow_merge_commit: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_auto_merge: NotRequired[bool]
    delete_branch_on_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    is_template: NotRequired[bool]
    web_commit_signoff_required: NotRequired[bool]


class RepoSearchResultItemPropPermissionsType(TypedDict):
    """RepoSearchResultItemPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    push: bool
    triage: NotRequired[bool]
    pull: bool


class TopicSearchResultItemType(TypedDict):
    """Topic Search Result Item

    Topic Search Result Item
    """

    name: str
    display_name: Union[str, None]
    short_description: Union[str, None]
    description: Union[str, None]
    created_by: Union[str, None]
    released: Union[str, None]
    created_at: datetime
    updated_at: datetime
    featured: bool
    curated: bool
    score: float
    repository_count: NotRequired[Union[int, None]]
    logo_url: NotRequired[Union[str, None]]
    text_matches: NotRequired[List[SearchResultTextMatchesItemsType]]
    related: NotRequired[Union[List[TopicSearchResultItemPropRelatedItemsType], None]]
    aliases: NotRequired[Union[List[TopicSearchResultItemPropAliasesItemsType], None]]


class TopicSearchResultItemPropRelatedItemsType(TypedDict):
    """TopicSearchResultItemPropRelatedItems"""

    topic_relation: NotRequired[
        TopicSearchResultItemPropRelatedItemsPropTopicRelationType
    ]


class TopicSearchResultItemPropRelatedItemsPropTopicRelationType(TypedDict):
    """TopicSearchResultItemPropRelatedItemsPropTopicRelation"""

    id: NotRequired[int]
    name: NotRequired[str]
    topic_id: NotRequired[int]
    relation_type: NotRequired[str]


class TopicSearchResultItemPropAliasesItemsType(TypedDict):
    """TopicSearchResultItemPropAliasesItems"""

    topic_relation: NotRequired[
        TopicSearchResultItemPropAliasesItemsPropTopicRelationType
    ]


class TopicSearchResultItemPropAliasesItemsPropTopicRelationType(TypedDict):
    """TopicSearchResultItemPropAliasesItemsPropTopicRelation"""

    id: NotRequired[int]
    name: NotRequired[str]
    topic_id: NotRequired[int]
    relation_type: NotRequired[str]


class UserSearchResultItemType(TypedDict):
    """User Search Result Item

    User Search Result Item
    """

    login: str
    id: int
    node_id: str
    avatar_url: str
    gravatar_id: Union[str, None]
    url: str
    html_url: str
    followers_url: str
    subscriptions_url: str
    organizations_url: str
    repos_url: str
    received_events_url: str
    type: str
    score: float
    following_url: str
    gists_url: str
    starred_url: str
    events_url: str
    public_repos: NotRequired[int]
    public_gists: NotRequired[int]
    followers: NotRequired[int]
    following: NotRequired[int]
    created_at: NotRequired[datetime]
    updated_at: NotRequired[datetime]
    name: NotRequired[Union[str, None]]
    bio: NotRequired[Union[str, None]]
    email: NotRequired[Union[str, None]]
    location: NotRequired[Union[str, None]]
    site_admin: bool
    hireable: NotRequired[Union[bool, None]]
    text_matches: NotRequired[List[SearchResultTextMatchesItemsType]]
    blog: NotRequired[Union[str, None]]
    company: NotRequired[Union[str, None]]
    suspended_at: NotRequired[Union[datetime, None]]


class PrivateUserType(TypedDict):
    """Private User

    Private User
    """

    login: str
    id: int
    node_id: str
    avatar_url: str
    gravatar_id: Union[str, None]
    url: str
    html_url: str
    followers_url: str
    following_url: str
    gists_url: str
    starred_url: str
    subscriptions_url: str
    organizations_url: str
    repos_url: str
    events_url: str
    received_events_url: str
    type: str
    site_admin: bool
    name: Union[str, None]
    company: Union[str, None]
    blog: Union[str, None]
    location: Union[str, None]
    email: Union[str, None]
    hireable: Union[bool, None]
    bio: Union[str, None]
    twitter_username: NotRequired[Union[str, None]]
    public_repos: int
    public_gists: int
    followers: int
    following: int
    created_at: datetime
    updated_at: datetime
    private_gists: int
    total_private_repos: int
    owned_private_repos: int
    disk_usage: int
    collaborators: int
    two_factor_authentication: bool
    plan: NotRequired[PrivateUserPropPlanType]
    suspended_at: NotRequired[Union[datetime, None]]
    business_plus: NotRequired[bool]
    ldap_dn: NotRequired[str]


class PrivateUserPropPlanType(TypedDict):
    """PrivateUserPropPlan"""

    collaborators: int
    name: str
    space: int
    private_repos: int


class CodespacesSecretType(TypedDict):
    """Codespaces Secret

    Secrets for a GitHub Codespace.
    """

    name: str
    created_at: datetime
    updated_at: datetime
    visibility: Literal["all", "private", "selected"]
    selected_repositories_url: str


class CodespacesUserPublicKeyType(TypedDict):
    """CodespacesUserPublicKey

    The public key used for setting user Codespaces' Secrets.
    """

    key_id: str
    key: str


class CodespaceExportDetailsType(TypedDict):
    """Fetches information about an export of a codespace.

    An export of a codespace. Also, latest export details for a codespace can be
    fetched with id = latest
    """

    state: NotRequired[Union[str, None]]
    completed_at: NotRequired[Union[datetime, None]]
    branch: NotRequired[Union[str, None]]
    sha: NotRequired[Union[str, None]]
    id: NotRequired[str]
    export_url: NotRequired[str]
    html_url: NotRequired[Union[str, None]]


class CodespaceWithFullRepositoryType(TypedDict):
    """Codespace

    A codespace.
    """

    id: int
    name: str
    display_name: NotRequired[Union[str, None]]
    environment_id: Union[str, None]
    owner: SimpleUserType
    billable_owner: SimpleUserType
    repository: FullRepositoryType
    machine: Union[None, CodespaceMachineType]
    devcontainer_path: NotRequired[Union[str, None]]
    prebuild: Union[bool, None]
    created_at: datetime
    updated_at: datetime
    last_used_at: datetime
    state: Literal[
        "Unknown",
        "Created",
        "Queued",
        "Provisioning",
        "Available",
        "Awaiting",
        "Unavailable",
        "Deleted",
        "Moved",
        "Shutdown",
        "Archived",
        "Starting",
        "ShuttingDown",
        "Failed",
        "Exporting",
        "Updating",
        "Rebuilding",
    ]
    url: str
    git_status: CodespaceWithFullRepositoryPropGitStatusType
    location: Literal["EastUs", "SouthEastAsia", "WestEurope", "WestUs2"]
    idle_timeout_minutes: Union[int, None]
    web_url: str
    machines_url: str
    start_url: str
    stop_url: str
    publish_url: NotRequired[Union[str, None]]
    pulls_url: Union[str, None]
    recent_folders: List[str]
    runtime_constraints: NotRequired[
        CodespaceWithFullRepositoryPropRuntimeConstraintsType
    ]
    pending_operation: NotRequired[Union[bool, None]]
    pending_operation_disabled_reason: NotRequired[Union[str, None]]
    idle_timeout_notice: NotRequired[Union[str, None]]
    retention_period_minutes: NotRequired[Union[int, None]]
    retention_expires_at: NotRequired[Union[datetime, None]]


class CodespaceWithFullRepositoryPropGitStatusType(TypedDict):
    """CodespaceWithFullRepositoryPropGitStatus

    Details about the codespace's git repository.
    """

    ahead: NotRequired[int]
    behind: NotRequired[int]
    has_unpushed_changes: NotRequired[bool]
    has_uncommitted_changes: NotRequired[bool]
    ref: NotRequired[str]


class CodespaceWithFullRepositoryPropRuntimeConstraintsType(TypedDict):
    """CodespaceWithFullRepositoryPropRuntimeConstraints"""

    allowed_port_privacy_settings: NotRequired[Union[List[str], None]]


class EmailType(TypedDict):
    """Email

    Email
    """

    email: str
    primary: bool
    verified: bool
    visibility: Union[str, None]


class GpgKeyType(TypedDict):
    """GPG Key

    A unique encryption key
    """

    id: int
    name: NotRequired[Union[str, None]]
    primary_key_id: Union[int, None]
    key_id: str
    public_key: str
    emails: List[GpgKeyPropEmailsItemsType]
    subkeys: List[GpgKeyPropSubkeysItemsType]
    can_sign: bool
    can_encrypt_comms: bool
    can_encrypt_storage: bool
    can_certify: bool
    created_at: datetime
    expires_at: Union[datetime, None]
    revoked: bool
    raw_key: Union[str, None]


class GpgKeyPropEmailsItemsType(TypedDict):
    """GpgKeyPropEmailsItems"""

    email: NotRequired[str]
    verified: NotRequired[bool]


class GpgKeyPropSubkeysItemsType(TypedDict):
    """GpgKeyPropSubkeysItems"""

    id: NotRequired[int]
    primary_key_id: NotRequired[int]
    key_id: NotRequired[str]
    public_key: NotRequired[str]
    emails: NotRequired[List[GpgKeyPropSubkeysItemsPropEmailsItemsType]]
    subkeys: NotRequired[List[Any]]
    can_sign: NotRequired[bool]
    can_encrypt_comms: NotRequired[bool]
    can_encrypt_storage: NotRequired[bool]
    can_certify: NotRequired[bool]
    created_at: NotRequired[str]
    expires_at: NotRequired[Union[str, None]]
    raw_key: NotRequired[Union[str, None]]
    revoked: NotRequired[bool]


class GpgKeyPropSubkeysItemsPropEmailsItemsType(TypedDict):
    """GpgKeyPropSubkeysItemsPropEmailsItems"""

    email: NotRequired[str]
    verified: NotRequired[bool]


class KeyType(TypedDict):
    """Key

    Key
    """

    key: str
    id: int
    url: str
    title: str
    created_at: datetime
    verified: bool
    read_only: bool


class MarketplaceAccountType(TypedDict):
    """Marketplace Account"""

    url: str
    id: int
    type: str
    node_id: NotRequired[str]
    login: str
    email: NotRequired[Union[str, None]]
    organization_billing_email: NotRequired[Union[str, None]]


class UserMarketplacePurchaseType(TypedDict):
    """User Marketplace Purchase

    User Marketplace Purchase
    """

    billing_cycle: str
    next_billing_date: Union[datetime, None]
    unit_count: Union[int, None]
    on_free_trial: bool
    free_trial_ends_on: Union[datetime, None]
    updated_at: Union[datetime, None]
    account: MarketplaceAccountType
    plan: MarketplaceListingPlanType


class SocialAccountType(TypedDict):
    """Social account

    Social media account
    """

    provider: str
    url: str


class SshSigningKeyType(TypedDict):
    """SSH Signing Key

    A public SSH key used to sign Git commits
    """

    key: str
    id: int
    title: str
    created_at: datetime


class StarredRepositoryType(TypedDict):
    """Starred Repository

    Starred Repository
    """

    starred_at: datetime
    repo: RepositoryType


class HovercardType(TypedDict):
    """Hovercard

    Hovercard
    """

    contexts: List[HovercardPropContextsItemsType]


class HovercardPropContextsItemsType(TypedDict):
    """HovercardPropContextsItems"""

    message: str
    octicon: str


class KeySimpleType(TypedDict):
    """Key Simple

    Key Simple
    """

    id: int
    key: str


class EnterpriseWebhooksType(TypedDict):
    """Enterprise

    An enterprise on GitHub. Webhook payloads contain the `enterprise` property when
    the webhook is configured
    on an enterprise account or an organization that's part of an enterprise
    account. For more information,
    see "[About enterprise accounts](https://docs.github.com/admin/overview/about-
    enterprise-accounts)."
    """

    description: NotRequired[Union[str, None]]
    html_url: str
    website_url: NotRequired[Union[str, None]]
    id: int
    node_id: str
    name: str
    slug: str
    created_at: Union[datetime, None]
    updated_at: Union[datetime, None]
    avatar_url: str


class SimpleInstallationType(TypedDict):
    """Simple Installation

    The GitHub App installation. Webhook payloads contain the `installation`
    property when the event is configured
    for and sent to a GitHub App. For more information,
    see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-
    github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
    """

    id: int
    node_id: str


class OrganizationSimpleWebhooksType(TypedDict):
    """Organization Simple

    A GitHub organization. Webhook payloads contain the `organization` property when
    the webhook is configured for an
    organization, or when the event occurs from activity in a repository owned by an
    organization.
    """

    login: str
    id: int
    node_id: str
    url: str
    repos_url: str
    events_url: str
    hooks_url: str
    issues_url: str
    members_url: str
    public_members_url: str
    avatar_url: str
    description: Union[str, None]


class RepositoryWebhooksType(TypedDict):
    """Repository

    The repository on GitHub where the event occurred. Webhook payloads contain the
    `repository` property
    when the event occurs from activity in a repository.
    """

    id: int
    node_id: str
    name: str
    full_name: str
    license_: Union[None, LicenseSimpleType]
    organization: NotRequired[Union[None, SimpleUserType]]
    forks: int
    permissions: NotRequired[RepositoryWebhooksPropPermissionsType]
    owner: SimpleUserType
    private: bool
    html_url: str
    description: Union[str, None]
    fork: bool
    url: str
    archive_url: str
    assignees_url: str
    blobs_url: str
    branches_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    deployments_url: str
    downloads_url: str
    events_url: str
    forks_url: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    languages_url: str
    merges_url: str
    milestones_url: str
    notifications_url: str
    pulls_url: str
    releases_url: str
    ssh_url: str
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    tags_url: str
    teams_url: str
    trees_url: str
    clone_url: str
    mirror_url: Union[str, None]
    hooks_url: str
    svn_url: str
    homepage: Union[str, None]
    language: Union[str, None]
    forks_count: int
    stargazers_count: int
    watchers_count: int
    size: int
    default_branch: str
    open_issues_count: int
    is_template: NotRequired[bool]
    topics: NotRequired[List[str]]
    custom_properties: NotRequired[RepositoryWebhooksPropCustomPropertiesType]
    has_issues: bool
    has_projects: bool
    has_wiki: bool
    has_pages: bool
    has_downloads: bool
    has_discussions: NotRequired[bool]
    archived: bool
    disabled: bool
    visibility: NotRequired[str]
    pushed_at: Union[datetime, None]
    created_at: Union[datetime, None]
    updated_at: Union[datetime, None]
    allow_rebase_merge: NotRequired[bool]
    template_repository: NotRequired[
        Union[RepositoryWebhooksPropTemplateRepositoryType, None]
    ]
    temp_clone_token: NotRequired[str]
    allow_squash_merge: NotRequired[bool]
    allow_auto_merge: NotRequired[bool]
    delete_branch_on_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    use_squash_pr_title_as_default: NotRequired[bool]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    allow_merge_commit: NotRequired[bool]
    allow_forking: NotRequired[bool]
    web_commit_signoff_required: NotRequired[bool]
    subscribers_count: NotRequired[int]
    network_count: NotRequired[int]
    open_issues: int
    watchers: int
    master_branch: NotRequired[str]
    starred_at: NotRequired[str]
    anonymous_access_enabled: NotRequired[bool]


class RepositoryWebhooksPropPermissionsType(TypedDict):
    """RepositoryWebhooksPropPermissions"""

    admin: bool
    pull: bool
    triage: NotRequired[bool]
    push: bool
    maintain: NotRequired[bool]


class RepositoryWebhooksPropCustomPropertiesType(TypedDict):
    """RepositoryWebhooksPropCustomProperties

    The custom properties that were defined for the repository. The keys are the
    custom property names, and the values are the corresponding custom property
    values.
    """


class RepositoryWebhooksPropTemplateRepositoryPropOwnerType(TypedDict):
    """RepositoryWebhooksPropTemplateRepositoryPropOwner"""

    login: NotRequired[str]
    id: NotRequired[int]
    node_id: NotRequired[str]
    avatar_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    url: NotRequired[str]
    html_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    organizations_url: NotRequired[str]
    repos_url: NotRequired[str]
    events_url: NotRequired[str]
    received_events_url: NotRequired[str]
    type: NotRequired[str]
    site_admin: NotRequired[bool]


class RepositoryWebhooksPropTemplateRepositoryPropPermissionsType(TypedDict):
    """RepositoryWebhooksPropTemplateRepositoryPropPermissions"""

    admin: NotRequired[bool]
    maintain: NotRequired[bool]
    push: NotRequired[bool]
    triage: NotRequired[bool]
    pull: NotRequired[bool]


class RepositoryWebhooksPropTemplateRepositoryType(TypedDict):
    """RepositoryWebhooksPropTemplateRepository"""

    id: NotRequired[int]
    node_id: NotRequired[str]
    name: NotRequired[str]
    full_name: NotRequired[str]
    owner: NotRequired[RepositoryWebhooksPropTemplateRepositoryPropOwnerType]
    private: NotRequired[bool]
    html_url: NotRequired[str]
    description: NotRequired[str]
    fork: NotRequired[bool]
    url: NotRequired[str]
    archive_url: NotRequired[str]
    assignees_url: NotRequired[str]
    blobs_url: NotRequired[str]
    branches_url: NotRequired[str]
    collaborators_url: NotRequired[str]
    comments_url: NotRequired[str]
    commits_url: NotRequired[str]
    compare_url: NotRequired[str]
    contents_url: NotRequired[str]
    contributors_url: NotRequired[str]
    deployments_url: NotRequired[str]
    downloads_url: NotRequired[str]
    events_url: NotRequired[str]
    forks_url: NotRequired[str]
    git_commits_url: NotRequired[str]
    git_refs_url: NotRequired[str]
    git_tags_url: NotRequired[str]
    git_url: NotRequired[str]
    issue_comment_url: NotRequired[str]
    issue_events_url: NotRequired[str]
    issues_url: NotRequired[str]
    keys_url: NotRequired[str]
    labels_url: NotRequired[str]
    languages_url: NotRequired[str]
    merges_url: NotRequired[str]
    milestones_url: NotRequired[str]
    notifications_url: NotRequired[str]
    pulls_url: NotRequired[str]
    releases_url: NotRequired[str]
    ssh_url: NotRequired[str]
    stargazers_url: NotRequired[str]
    statuses_url: NotRequired[str]
    subscribers_url: NotRequired[str]
    subscription_url: NotRequired[str]
    tags_url: NotRequired[str]
    teams_url: NotRequired[str]
    trees_url: NotRequired[str]
    clone_url: NotRequired[str]
    mirror_url: NotRequired[str]
    hooks_url: NotRequired[str]
    svn_url: NotRequired[str]
    homepage: NotRequired[str]
    language: NotRequired[str]
    forks_count: NotRequired[int]
    stargazers_count: NotRequired[int]
    watchers_count: NotRequired[int]
    size: NotRequired[int]
    default_branch: NotRequired[str]
    open_issues_count: NotRequired[int]
    is_template: NotRequired[bool]
    topics: NotRequired[List[str]]
    has_issues: NotRequired[bool]
    has_projects: NotRequired[bool]
    has_wiki: NotRequired[bool]
    has_pages: NotRequired[bool]
    has_downloads: NotRequired[bool]
    archived: NotRequired[bool]
    disabled: NotRequired[bool]
    visibility: NotRequired[str]
    pushed_at: NotRequired[str]
    created_at: NotRequired[str]
    updated_at: NotRequired[str]
    permissions: NotRequired[
        RepositoryWebhooksPropTemplateRepositoryPropPermissionsType
    ]
    allow_rebase_merge: NotRequired[bool]
    temp_clone_token: NotRequired[str]
    allow_squash_merge: NotRequired[bool]
    allow_auto_merge: NotRequired[bool]
    delete_branch_on_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    use_squash_pr_title_as_default: NotRequired[bool]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    allow_merge_commit: NotRequired[bool]
    subscribers_count: NotRequired[int]
    network_count: NotRequired[int]


class SimpleUserWebhooksType(TypedDict):
    """Simple User

    The GitHub user that triggered the event. This property is included in every
    webhook payload.
    """

    name: NotRequired[Union[str, None]]
    email: NotRequired[Union[str, None]]
    login: str
    id: int
    node_id: str
    avatar_url: str
    gravatar_id: Union[str, None]
    url: str
    html_url: str
    followers_url: str
    following_url: str
    gists_url: str
    starred_url: str
    subscriptions_url: str
    organizations_url: str
    repos_url: str
    events_url: str
    received_events_url: str
    type: str
    site_admin: bool
    starred_at: NotRequired[str]


class SimpleCheckSuiteType(TypedDict):
    """SimpleCheckSuite

    A suite of checks performed on the code of a given code change
    """

    after: NotRequired[Union[str, None]]
    app: NotRequired[IntegrationType]
    before: NotRequired[Union[str, None]]
    conclusion: NotRequired[
        Union[
            None,
            Literal[
                "success",
                "failure",
                "neutral",
                "cancelled",
                "skipped",
                "timed_out",
                "action_required",
                "stale",
                "startup_failure",
            ],
        ]
    ]
    created_at: NotRequired[datetime]
    head_branch: NotRequired[Union[str, None]]
    head_sha: NotRequired[str]
    id: NotRequired[int]
    node_id: NotRequired[str]
    pull_requests: NotRequired[List[PullRequestMinimalType]]
    repository: NotRequired[MinimalRepositoryType]
    status: NotRequired[
        Literal["queued", "in_progress", "completed", "pending", "waiting"]
    ]
    updated_at: NotRequired[datetime]
    url: NotRequired[str]


class CheckRunWithSimpleCheckSuiteType(TypedDict):
    """CheckRun

    A check performed on the code of a given code change
    """

    app: Union[None, IntegrationType]
    check_suite: SimpleCheckSuiteType
    completed_at: Union[datetime, None]
    conclusion: Union[
        None,
        Literal[
            "waiting",
            "pending",
            "startup_failure",
            "stale",
            "success",
            "failure",
            "neutral",
            "cancelled",
            "skipped",
            "timed_out",
            "action_required",
        ],
    ]
    deployment: NotRequired[DeploymentSimpleType]
    details_url: str
    external_id: str
    head_sha: str
    html_url: str
    id: int
    name: str
    node_id: str
    output: CheckRunWithSimpleCheckSuitePropOutputType
    pull_requests: List[PullRequestMinimalType]
    started_at: datetime
    status: Literal["queued", "in_progress", "completed", "pending"]
    url: str


class CheckRunWithSimpleCheckSuitePropOutputType(TypedDict):
    """CheckRunWithSimpleCheckSuitePropOutput"""

    annotations_count: int
    annotations_url: str
    summary: Union[str, None]
    text: Union[str, None]
    title: Union[str, None]


class DiscussionType(TypedDict):
    """Discussion

    A Discussion in a repository.
    """

    active_lock_reason: Union[str, None]
    answer_chosen_at: Union[str, None]
    answer_chosen_by: Union[DiscussionPropAnswerChosenByType, None]
    answer_html_url: Union[str, None]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: str
    category: DiscussionPropCategoryType
    comments: int
    created_at: datetime
    html_url: str
    id: int
    locked: bool
    node_id: str
    number: int
    reactions: NotRequired[DiscussionPropReactionsType]
    repository_url: str
    state: Literal["open", "closed", "locked", "converting", "transferring"]
    state_reason: Union[None, Literal["resolved", "outdated", "duplicate", "reopened"]]
    timeline_url: NotRequired[str]
    title: str
    updated_at: datetime
    user: Union[DiscussionPropUserType, None]


class DiscussionPropAnswerChosenByType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class DiscussionPropCategoryType(TypedDict):
    """DiscussionPropCategory"""

    created_at: datetime
    description: str
    emoji: str
    id: int
    is_answerable: bool
    name: str
    node_id: NotRequired[str]
    repository_id: int
    slug: str
    updated_at: str


class DiscussionPropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class DiscussionPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class MergeGroupType(TypedDict):
    """Merge Group

    A group of pull requests that the merge queue has grouped together to be merged.
    """

    head_sha: str
    head_ref: str
    base_sha: str
    base_ref: str
    head_commit: SimpleCommitType


class PersonalAccessTokenRequestType(TypedDict):
    """Personal Access Token Request

    Details of a Personal Access Token Request.
    """

    id: int
    owner: SimpleUserType
    permissions_added: PersonalAccessTokenRequestPropPermissionsAddedType
    permissions_upgraded: PersonalAccessTokenRequestPropPermissionsUpgradedType
    permissions_result: PersonalAccessTokenRequestPropPermissionsResultType
    repository_selection: Literal["none", "all", "subset"]
    repository_count: Union[int, None]
    repositories: Union[List[PersonalAccessTokenRequestPropRepositoriesItemsType], None]
    created_at: str
    token_expired: bool
    token_expires_at: Union[str, None]
    token_last_used_at: Union[str, None]


class PersonalAccessTokenRequestPropPermissionsAddedType(TypedDict):
    """PersonalAccessTokenRequestPropPermissionsAdded

    New requested permissions, categorized by type of permission.
    """

    organization: NotRequired[
        PersonalAccessTokenRequestPropPermissionsAddedPropOrganizationType
    ]
    repository: NotRequired[
        PersonalAccessTokenRequestPropPermissionsAddedPropRepositoryType
    ]
    other: NotRequired[PersonalAccessTokenRequestPropPermissionsAddedPropOtherType]


class PersonalAccessTokenRequestPropPermissionsAddedPropOrganizationType(TypedDict):
    """PersonalAccessTokenRequestPropPermissionsAddedPropOrganization"""


class PersonalAccessTokenRequestPropPermissionsAddedPropRepositoryType(TypedDict):
    """PersonalAccessTokenRequestPropPermissionsAddedPropRepository"""


class PersonalAccessTokenRequestPropPermissionsAddedPropOtherType(TypedDict):
    """PersonalAccessTokenRequestPropPermissionsAddedPropOther"""


class PersonalAccessTokenRequestPropPermissionsUpgradedType(TypedDict):
    """PersonalAccessTokenRequestPropPermissionsUpgraded

    Requested permissions that elevate access for a previously approved request for
    access, categorized by type of permission.
    """

    organization: NotRequired[
        PersonalAccessTokenRequestPropPermissionsUpgradedPropOrganizationType
    ]
    repository: NotRequired[
        PersonalAccessTokenRequestPropPermissionsUpgradedPropRepositoryType
    ]
    other: NotRequired[PersonalAccessTokenRequestPropPermissionsUpgradedPropOtherType]


class PersonalAccessTokenRequestPropPermissionsUpgradedPropOrganizationType(TypedDict):
    """PersonalAccessTokenRequestPropPermissionsUpgradedPropOrganization"""


class PersonalAccessTokenRequestPropPermissionsUpgradedPropRepositoryType(TypedDict):
    """PersonalAccessTokenRequestPropPermissionsUpgradedPropRepository"""


class PersonalAccessTokenRequestPropPermissionsUpgradedPropOtherType(TypedDict):
    """PersonalAccessTokenRequestPropPermissionsUpgradedPropOther"""


class PersonalAccessTokenRequestPropPermissionsResultType(TypedDict):
    """PersonalAccessTokenRequestPropPermissionsResult

    Permissions requested, categorized by type of permission. This field
    incorporates `permissions_added` and `permissions_upgraded`.
    """

    organization: NotRequired[
        PersonalAccessTokenRequestPropPermissionsResultPropOrganizationType
    ]
    repository: NotRequired[
        PersonalAccessTokenRequestPropPermissionsResultPropRepositoryType
    ]
    other: NotRequired[PersonalAccessTokenRequestPropPermissionsResultPropOtherType]


class PersonalAccessTokenRequestPropPermissionsResultPropOrganizationType(TypedDict):
    """PersonalAccessTokenRequestPropPermissionsResultPropOrganization"""


class PersonalAccessTokenRequestPropPermissionsResultPropRepositoryType(TypedDict):
    """PersonalAccessTokenRequestPropPermissionsResultPropRepository"""


class PersonalAccessTokenRequestPropPermissionsResultPropOtherType(TypedDict):
    """PersonalAccessTokenRequestPropPermissionsResultPropOther"""


class PersonalAccessTokenRequestPropRepositoriesItemsType(TypedDict):
    """PersonalAccessTokenRequestPropRepositoriesItems"""

    full_name: str
    id: int
    name: str
    node_id: str
    private: bool


class ProjectsV2Type(TypedDict):
    """Projects v2 Project

    A projects v2 project
    """

    id: float
    node_id: str
    owner: SimpleUserType
    creator: SimpleUserType
    title: str
    description: Union[str, None]
    public: bool
    closed_at: Union[datetime, None]
    created_at: datetime
    updated_at: datetime
    number: int
    short_description: Union[str, None]
    deleted_at: Union[datetime, None]
    deleted_by: Union[None, SimpleUserType]


class ProjectsV2ItemType(TypedDict):
    """Projects v2 Item

    An item belonging to a project
    """

    id: float
    node_id: NotRequired[str]
    project_node_id: NotRequired[str]
    content_node_id: str
    content_type: Literal["Issue", "PullRequest", "DraftIssue"]
    creator: NotRequired[SimpleUserType]
    created_at: datetime
    updated_at: datetime
    archived_at: Union[datetime, None]


class SecretScanningAlertWebhookType(TypedDict):
    """SecretScanningAlertWebhook"""

    number: NotRequired[int]
    created_at: NotRequired[datetime]
    updated_at: NotRequired[Union[None, datetime]]
    url: NotRequired[str]
    html_url: NotRequired[str]
    locations_url: NotRequired[str]
    resolution: NotRequired[
        Union[
            None,
            Literal[
                "false_positive",
                "wont_fix",
                "revoked",
                "used_in_tests",
                "pattern_deleted",
                "pattern_edited",
            ],
        ]
    ]
    resolved_at: NotRequired[Union[datetime, None]]
    resolved_by: NotRequired[Union[None, SimpleUserType]]
    resolution_comment: NotRequired[Union[str, None]]
    secret_type: NotRequired[str]
    push_protection_bypassed: NotRequired[Union[bool, None]]
    push_protection_bypassed_by: NotRequired[Union[None, SimpleUserType]]
    push_protection_bypassed_at: NotRequired[Union[datetime, None]]


class WebhookBranchProtectionConfigurationDisabledType(TypedDict):
    """branch protection configuration disabled event"""

    action: Literal["disabled"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookBranchProtectionConfigurationEnabledType(TypedDict):
    """branch protection configuration enabled event"""

    action: Literal["enabled"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookBranchProtectionRuleCreatedType(TypedDict):
    """branch protection rule created event"""

    action: Literal["created"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    rule: WebhookBranchProtectionRuleCreatedPropRuleType
    sender: SimpleUserWebhooksType


class WebhookBranchProtectionRuleCreatedPropRuleType(TypedDict):
    """branch protection rule

    The branch protection rule. Includes a `name` and all the [branch protection
    settings](https://docs.github.com/github/administering-a-repository/defining-
    the-mergeability-of-pull-requests/about-protected-branches#about-branch-
    protection-settings) applied to branches that match the name. Binary settings
    are boolean. Multi-level configurations are one of `off`, `non_admins`, or
    `everyone`. Actor and build lists are arrays of strings.
    """

    admin_enforced: bool
    allow_deletions_enforcement_level: Literal["off", "non_admins", "everyone"]
    allow_force_pushes_enforcement_level: Literal["off", "non_admins", "everyone"]
    authorized_actor_names: List[str]
    authorized_actors_only: bool
    authorized_dismissal_actors_only: bool
    create_protected: NotRequired[bool]
    created_at: datetime
    dismiss_stale_reviews_on_push: bool
    id: int
    ignore_approvals_from_contributors: bool
    linear_history_requirement_enforcement_level: Literal[
        "off", "non_admins", "everyone"
    ]
    merge_queue_enforcement_level: Literal["off", "non_admins", "everyone"]
    name: str
    pull_request_reviews_enforcement_level: Literal["off", "non_admins", "everyone"]
    repository_id: int
    require_code_owner_review: bool
    require_last_push_approval: NotRequired[bool]
    required_approving_review_count: int
    required_conversation_resolution_level: Literal["off", "non_admins", "everyone"]
    required_deployments_enforcement_level: Literal["off", "non_admins", "everyone"]
    required_status_checks: List[str]
    required_status_checks_enforcement_level: Literal["off", "non_admins", "everyone"]
    signature_requirement_enforcement_level: Literal["off", "non_admins", "everyone"]
    strict_required_status_checks_policy: bool
    updated_at: datetime


class WebhookBranchProtectionRuleDeletedType(TypedDict):
    """branch protection rule deleted event"""

    action: Literal["deleted"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    rule: WebhookBranchProtectionRuleDeletedPropRuleType
    sender: SimpleUserWebhooksType


class WebhookBranchProtectionRuleDeletedPropRuleType(TypedDict):
    """branch protection rule

    The branch protection rule. Includes a `name` and all the [branch protection
    settings](https://docs.github.com/github/administering-a-repository/defining-
    the-mergeability-of-pull-requests/about-protected-branches#about-branch-
    protection-settings) applied to branches that match the name. Binary settings
    are boolean. Multi-level configurations are one of `off`, `non_admins`, or
    `everyone`. Actor and build lists are arrays of strings.
    """

    admin_enforced: bool
    allow_deletions_enforcement_level: Literal["off", "non_admins", "everyone"]
    allow_force_pushes_enforcement_level: Literal["off", "non_admins", "everyone"]
    authorized_actor_names: List[str]
    authorized_actors_only: bool
    authorized_dismissal_actors_only: bool
    create_protected: NotRequired[bool]
    created_at: datetime
    dismiss_stale_reviews_on_push: bool
    id: int
    ignore_approvals_from_contributors: bool
    linear_history_requirement_enforcement_level: Literal[
        "off", "non_admins", "everyone"
    ]
    merge_queue_enforcement_level: Literal["off", "non_admins", "everyone"]
    name: str
    pull_request_reviews_enforcement_level: Literal["off", "non_admins", "everyone"]
    repository_id: int
    require_code_owner_review: bool
    require_last_push_approval: NotRequired[bool]
    required_approving_review_count: int
    required_conversation_resolution_level: Literal["off", "non_admins", "everyone"]
    required_deployments_enforcement_level: Literal["off", "non_admins", "everyone"]
    required_status_checks: List[str]
    required_status_checks_enforcement_level: Literal["off", "non_admins", "everyone"]
    signature_requirement_enforcement_level: Literal["off", "non_admins", "everyone"]
    strict_required_status_checks_policy: bool
    updated_at: datetime


class WebhookBranchProtectionRuleEditedType(TypedDict):
    """branch protection rule edited event"""

    action: Literal["edited"]
    changes: NotRequired[WebhookBranchProtectionRuleEditedPropChangesType]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    rule: WebhookBranchProtectionRuleEditedPropRuleType
    sender: SimpleUserWebhooksType


class WebhookBranchProtectionRuleEditedPropChangesType(TypedDict):
    """WebhookBranchProtectionRuleEditedPropChanges

    If the action was `edited`, the changes to the rule.
    """

    admin_enforced: NotRequired[
        WebhookBranchProtectionRuleEditedPropChangesPropAdminEnforcedType
    ]
    authorized_actor_names: NotRequired[
        WebhookBranchProtectionRuleEditedPropChangesPropAuthorizedActorNamesType
    ]
    authorized_actors_only: NotRequired[
        WebhookBranchProtectionRuleEditedPropChangesPropAuthorizedActorsOnlyType
    ]
    authorized_dismissal_actors_only: NotRequired[
        WebhookBranchProtectionRuleEditedPropChangesPropAuthorizedDismissalActorsOnlyType
    ]
    linear_history_requirement_enforcement_level: NotRequired[
        WebhookBranchProtectionRuleEditedPropChangesPropLinearHistoryRequirementEnforcementLevelType
    ]
    required_status_checks: NotRequired[
        WebhookBranchProtectionRuleEditedPropChangesPropRequiredStatusChecksType
    ]
    required_status_checks_enforcement_level: NotRequired[
        WebhookBranchProtectionRuleEditedPropChangesPropRequiredStatusChecksEnforcementLevelType
    ]


class WebhookBranchProtectionRuleEditedPropChangesPropAdminEnforcedType(TypedDict):
    """WebhookBranchProtectionRuleEditedPropChangesPropAdminEnforced"""

    from_: Union[bool, None]


class WebhookBranchProtectionRuleEditedPropChangesPropAuthorizedActorNamesType(
    TypedDict
):
    """WebhookBranchProtectionRuleEditedPropChangesPropAuthorizedActorNames"""

    from_: List[str]


class WebhookBranchProtectionRuleEditedPropChangesPropAuthorizedActorsOnlyType(
    TypedDict
):
    """WebhookBranchProtectionRuleEditedPropChangesPropAuthorizedActorsOnly"""

    from_: Union[bool, None]


class WebhookBranchProtectionRuleEditedPropChangesPropAuthorizedDismissalActorsOnlyType(
    TypedDict
):
    """WebhookBranchProtectionRuleEditedPropChangesPropAuthorizedDismissalActorsOnly"""

    from_: Union[bool, None]


class WebhookBranchProtectionRuleEditedPropChangesPropLinearHistoryRequirementEnforcementLevelType(
    TypedDict
):
    """WebhookBranchProtectionRuleEditedPropChangesPropLinearHistoryRequirementEnforcem
    entLevel
    """

    from_: Literal["off", "non_admins", "everyone"]


class WebhookBranchProtectionRuleEditedPropChangesPropRequiredStatusChecksType(
    TypedDict
):
    """WebhookBranchProtectionRuleEditedPropChangesPropRequiredStatusChecks"""

    from_: List[str]


class WebhookBranchProtectionRuleEditedPropChangesPropRequiredStatusChecksEnforcementLevelType(
    TypedDict
):
    """WebhookBranchProtectionRuleEditedPropChangesPropRequiredStatusChecksEnforcementL
    evel
    """

    from_: Literal["off", "non_admins", "everyone"]


class WebhookBranchProtectionRuleEditedPropRuleType(TypedDict):
    """branch protection rule

    The branch protection rule. Includes a `name` and all the [branch protection
    settings](https://docs.github.com/github/administering-a-repository/defining-
    the-mergeability-of-pull-requests/about-protected-branches#about-branch-
    protection-settings) applied to branches that match the name. Binary settings
    are boolean. Multi-level configurations are one of `off`, `non_admins`, or
    `everyone`. Actor and build lists are arrays of strings.
    """

    admin_enforced: bool
    allow_deletions_enforcement_level: Literal["off", "non_admins", "everyone"]
    allow_force_pushes_enforcement_level: Literal["off", "non_admins", "everyone"]
    authorized_actor_names: List[str]
    authorized_actors_only: bool
    authorized_dismissal_actors_only: bool
    create_protected: NotRequired[bool]
    created_at: datetime
    dismiss_stale_reviews_on_push: bool
    id: int
    ignore_approvals_from_contributors: bool
    linear_history_requirement_enforcement_level: Literal[
        "off", "non_admins", "everyone"
    ]
    merge_queue_enforcement_level: Literal["off", "non_admins", "everyone"]
    name: str
    pull_request_reviews_enforcement_level: Literal["off", "non_admins", "everyone"]
    repository_id: int
    require_code_owner_review: bool
    require_last_push_approval: NotRequired[bool]
    required_approving_review_count: int
    required_conversation_resolution_level: Literal["off", "non_admins", "everyone"]
    required_deployments_enforcement_level: Literal["off", "non_admins", "everyone"]
    required_status_checks: List[str]
    required_status_checks_enforcement_level: Literal["off", "non_admins", "everyone"]
    signature_requirement_enforcement_level: Literal["off", "non_admins", "everyone"]
    strict_required_status_checks_policy: bool
    updated_at: datetime


class WebhookCheckRunCompletedType(TypedDict):
    """Check Run Completed Event"""

    action: NotRequired[Literal["completed"]]
    check_run: CheckRunWithSimpleCheckSuiteType
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookCheckRunCompletedFormEncodedType(TypedDict):
    """Check Run Completed Event

    The check_run.completed webhook encoded with URL encoding
    """

    payload: str


class WebhookCheckRunCreatedType(TypedDict):
    """Check Run Created Event"""

    action: NotRequired[Literal["created"]]
    check_run: CheckRunWithSimpleCheckSuiteType
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookCheckRunCreatedFormEncodedType(TypedDict):
    """Check Run Created Event

    The check_run.created webhook encoded with URL encoding
    """

    payload: str


class WebhookCheckRunRequestedActionType(TypedDict):
    """Check Run Requested Action Event"""

    action: Literal["requested_action"]
    check_run: CheckRunWithSimpleCheckSuiteType
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    requested_action: NotRequired[WebhookCheckRunRequestedActionPropRequestedActionType]
    sender: SimpleUserWebhooksType


class WebhookCheckRunRequestedActionPropRequestedActionType(TypedDict):
    """WebhookCheckRunRequestedActionPropRequestedAction

    The action requested by the user.
    """

    identifier: NotRequired[str]


class WebhookCheckRunRequestedActionFormEncodedType(TypedDict):
    """Check Run Requested Action Event

    The check_run.requested_action webhook encoded with URL encoding
    """

    payload: str


class WebhookCheckRunRerequestedType(TypedDict):
    """Check Run Re-Requested Event"""

    action: NotRequired[Literal["rerequested"]]
    check_run: CheckRunWithSimpleCheckSuiteType
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookCheckRunRerequestedFormEncodedType(TypedDict):
    """Check Run Re-Requested Event

    The check_run.rerequested webhook encoded with URL encoding
    """

    payload: str


class WebhookCheckSuiteCompletedType(TypedDict):
    """check_suite completed event"""

    action: Literal["completed"]
    check_suite: WebhookCheckSuiteCompletedPropCheckSuiteType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookCheckSuiteCompletedPropCheckSuiteType(TypedDict):
    """WebhookCheckSuiteCompletedPropCheckSuite

    The [check_suite](https://docs.github.com/rest/checks/suites#get-a-check-suite).
    """

    after: Union[str, None]
    app: WebhookCheckSuiteCompletedPropCheckSuitePropAppType
    before: Union[str, None]
    check_runs_url: str
    conclusion: Union[
        None,
        Literal[
            "success",
            "failure",
            "neutral",
            "cancelled",
            "timed_out",
            "action_required",
            "stale",
            "skipped",
            "startup_failure",
        ],
    ]
    created_at: datetime
    head_branch: Union[str, None]
    head_commit: WebhookCheckSuiteCompletedPropCheckSuitePropHeadCommitType
    head_sha: str
    id: int
    latest_check_runs_count: int
    node_id: str
    pull_requests: List[
        WebhookCheckSuiteCompletedPropCheckSuitePropPullRequestsItemsType
    ]
    rerequestable: NotRequired[bool]
    runs_rerequestable: NotRequired[bool]
    status: Union[
        None, Literal["requested", "in_progress", "completed", "queued", "pending"]
    ]
    updated_at: datetime
    url: str


class WebhookCheckSuiteCompletedPropCheckSuitePropAppType(TypedDict):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None]
    description: Union[str, None]
    events: NotRequired[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "merge_group",
                "pull_request_review_thread",
                "workflow_job",
                "merge_queue_entry",
                "security_and_analysis",
                "projects_v2_item",
                "secret_scanning_alert_location",
            ]
        ]
    ]
    external_url: Union[str, None]
    html_url: str
    id: Union[int, None]
    name: str
    node_id: str
    owner: Union[WebhookCheckSuiteCompletedPropCheckSuitePropAppPropOwnerType, None]
    permissions: NotRequired[
        WebhookCheckSuiteCompletedPropCheckSuitePropAppPropPermissionsType
    ]
    slug: NotRequired[str]
    updated_at: Union[datetime, None]


class WebhookCheckSuiteCompletedPropCheckSuitePropAppPropOwnerType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookCheckSuiteCompletedPropCheckSuitePropAppPropPermissionsType(TypedDict):
    """WebhookCheckSuiteCompletedPropCheckSuitePropAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: NotRequired[Literal["read", "write"]]
    administration: NotRequired[Literal["read", "write"]]
    checks: NotRequired[Literal["read", "write"]]
    content_references: NotRequired[Literal["read", "write"]]
    contents: NotRequired[Literal["read", "write"]]
    deployments: NotRequired[Literal["read", "write"]]
    discussions: NotRequired[Literal["read", "write"]]
    emails: NotRequired[Literal["read", "write"]]
    environments: NotRequired[Literal["read", "write"]]
    issues: NotRequired[Literal["read", "write"]]
    keys: NotRequired[Literal["read", "write"]]
    members: NotRequired[Literal["read", "write"]]
    metadata: NotRequired[Literal["read", "write"]]
    organization_administration: NotRequired[Literal["read", "write"]]
    organization_hooks: NotRequired[Literal["read", "write"]]
    organization_packages: NotRequired[Literal["read", "write"]]
    organization_plan: NotRequired[Literal["read", "write"]]
    organization_projects: NotRequired[Literal["read", "write", "admin"]]
    organization_secrets: NotRequired[Literal["read", "write"]]
    organization_self_hosted_runners: NotRequired[Literal["read", "write"]]
    organization_user_blocking: NotRequired[Literal["read", "write"]]
    packages: NotRequired[Literal["read", "write"]]
    pages: NotRequired[Literal["read", "write"]]
    pull_requests: NotRequired[Literal["read", "write"]]
    repository_hooks: NotRequired[Literal["read", "write"]]
    repository_projects: NotRequired[Literal["read", "write", "admin"]]
    secret_scanning_alerts: NotRequired[Literal["read", "write"]]
    secrets: NotRequired[Literal["read", "write"]]
    security_events: NotRequired[Literal["read", "write"]]
    security_scanning_alert: NotRequired[Literal["read", "write"]]
    single_file: NotRequired[Literal["read", "write"]]
    statuses: NotRequired[Literal["read", "write"]]
    team_discussions: NotRequired[Literal["read", "write"]]
    vulnerability_alerts: NotRequired[Literal["read", "write"]]
    workflows: NotRequired[Literal["read", "write"]]


class WebhookCheckSuiteCompletedPropCheckSuitePropHeadCommitType(TypedDict):
    """SimpleCommit"""

    author: WebhookCheckSuiteCompletedPropCheckSuitePropHeadCommitPropAuthorType
    committer: WebhookCheckSuiteCompletedPropCheckSuitePropHeadCommitPropCommitterType
    id: str
    message: str
    timestamp: str
    tree_id: str


class WebhookCheckSuiteCompletedPropCheckSuitePropHeadCommitPropAuthorType(TypedDict):
    """Committer

    Metaproperties for Git author/committer information.
    """

    date: NotRequired[datetime]
    email: Union[str, None]
    name: str
    username: NotRequired[str]


class WebhookCheckSuiteCompletedPropCheckSuitePropHeadCommitPropCommitterType(
    TypedDict
):
    """Committer

    Metaproperties for Git author/committer information.
    """

    date: NotRequired[datetime]
    email: Union[str, None]
    name: str
    username: NotRequired[str]


class WebhookCheckSuiteCompletedPropCheckSuitePropPullRequestsItemsType(TypedDict):
    """Check Run Pull Request"""

    base: WebhookCheckSuiteCompletedPropCheckSuitePropPullRequestsItemsPropBaseType
    head: WebhookCheckSuiteCompletedPropCheckSuitePropPullRequestsItemsPropHeadType
    id: int
    number: int
    url: str


class WebhookCheckSuiteCompletedPropCheckSuitePropPullRequestsItemsPropBaseType(
    TypedDict
):
    """WebhookCheckSuiteCompletedPropCheckSuitePropPullRequestsItemsPropBase"""

    ref: str
    repo: WebhookCheckSuiteCompletedPropCheckSuitePropPullRequestsItemsPropBasePropRepoType
    sha: str


class WebhookCheckSuiteCompletedPropCheckSuitePropPullRequestsItemsPropBasePropRepoType(
    TypedDict
):
    """Repo Ref"""

    id: int
    name: str
    url: str


class WebhookCheckSuiteCompletedPropCheckSuitePropPullRequestsItemsPropHeadType(
    TypedDict
):
    """WebhookCheckSuiteCompletedPropCheckSuitePropPullRequestsItemsPropHead"""

    ref: str
    repo: WebhookCheckSuiteCompletedPropCheckSuitePropPullRequestsItemsPropHeadPropRepoType
    sha: str


class WebhookCheckSuiteCompletedPropCheckSuitePropPullRequestsItemsPropHeadPropRepoType(
    TypedDict
):
    """Repo Ref"""

    id: int
    name: str
    url: str


class WebhookCheckSuiteRequestedType(TypedDict):
    """check_suite requested event"""

    action: Literal["requested"]
    check_suite: WebhookCheckSuiteRequestedPropCheckSuiteType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookCheckSuiteRequestedPropCheckSuiteType(TypedDict):
    """WebhookCheckSuiteRequestedPropCheckSuite

    The [check_suite](https://docs.github.com/rest/checks/suites#get-a-check-suite).
    """

    after: Union[str, None]
    app: WebhookCheckSuiteRequestedPropCheckSuitePropAppType
    before: Union[str, None]
    check_runs_url: str
    conclusion: Union[
        None,
        Literal[
            "success",
            "failure",
            "neutral",
            "cancelled",
            "timed_out",
            "action_required",
            "stale",
            "skipped",
        ],
    ]
    created_at: datetime
    head_branch: Union[str, None]
    head_commit: WebhookCheckSuiteRequestedPropCheckSuitePropHeadCommitType
    head_sha: str
    id: int
    latest_check_runs_count: int
    node_id: str
    pull_requests: List[
        WebhookCheckSuiteRequestedPropCheckSuitePropPullRequestsItemsType
    ]
    rerequestable: NotRequired[bool]
    runs_rerequestable: NotRequired[bool]
    status: Union[None, Literal["requested", "in_progress", "completed", "queued"]]
    updated_at: datetime
    url: str


class WebhookCheckSuiteRequestedPropCheckSuitePropAppType(TypedDict):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None]
    description: Union[str, None]
    events: NotRequired[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "pull_request_review_thread",
                "workflow_job",
                "merge_queue_entry",
                "security_and_analysis",
                "secret_scanning_alert_location",
                "projects_v2_item",
                "merge_group",
                "repository_import",
            ]
        ]
    ]
    external_url: Union[str, None]
    html_url: str
    id: Union[int, None]
    name: str
    node_id: str
    owner: Union[WebhookCheckSuiteRequestedPropCheckSuitePropAppPropOwnerType, None]
    permissions: NotRequired[
        WebhookCheckSuiteRequestedPropCheckSuitePropAppPropPermissionsType
    ]
    slug: NotRequired[str]
    updated_at: Union[datetime, None]


class WebhookCheckSuiteRequestedPropCheckSuitePropAppPropOwnerType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookCheckSuiteRequestedPropCheckSuitePropAppPropPermissionsType(TypedDict):
    """WebhookCheckSuiteRequestedPropCheckSuitePropAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: NotRequired[Literal["read", "write"]]
    administration: NotRequired[Literal["read", "write"]]
    checks: NotRequired[Literal["read", "write"]]
    content_references: NotRequired[Literal["read", "write"]]
    contents: NotRequired[Literal["read", "write"]]
    deployments: NotRequired[Literal["read", "write"]]
    discussions: NotRequired[Literal["read", "write"]]
    emails: NotRequired[Literal["read", "write"]]
    environments: NotRequired[Literal["read", "write"]]
    issues: NotRequired[Literal["read", "write"]]
    keys: NotRequired[Literal["read", "write"]]
    members: NotRequired[Literal["read", "write"]]
    metadata: NotRequired[Literal["read", "write"]]
    organization_administration: NotRequired[Literal["read", "write"]]
    organization_hooks: NotRequired[Literal["read", "write"]]
    organization_packages: NotRequired[Literal["read", "write"]]
    organization_plan: NotRequired[Literal["read", "write"]]
    organization_projects: NotRequired[Literal["read", "write", "admin"]]
    organization_secrets: NotRequired[Literal["read", "write"]]
    organization_self_hosted_runners: NotRequired[Literal["read", "write"]]
    organization_user_blocking: NotRequired[Literal["read", "write"]]
    packages: NotRequired[Literal["read", "write"]]
    pages: NotRequired[Literal["read", "write"]]
    pull_requests: NotRequired[Literal["read", "write"]]
    repository_hooks: NotRequired[Literal["read", "write"]]
    repository_projects: NotRequired[Literal["read", "write", "admin"]]
    secret_scanning_alerts: NotRequired[Literal["read", "write"]]
    secrets: NotRequired[Literal["read", "write"]]
    security_events: NotRequired[Literal["read", "write"]]
    security_scanning_alert: NotRequired[Literal["read", "write"]]
    single_file: NotRequired[Literal["read", "write"]]
    statuses: NotRequired[Literal["read", "write"]]
    team_discussions: NotRequired[Literal["read", "write"]]
    vulnerability_alerts: NotRequired[Literal["read", "write"]]
    workflows: NotRequired[Literal["read", "write"]]


class WebhookCheckSuiteRequestedPropCheckSuitePropHeadCommitType(TypedDict):
    """SimpleCommit"""

    author: WebhookCheckSuiteRequestedPropCheckSuitePropHeadCommitPropAuthorType
    committer: WebhookCheckSuiteRequestedPropCheckSuitePropHeadCommitPropCommitterType
    id: str
    message: str
    timestamp: str
    tree_id: str


class WebhookCheckSuiteRequestedPropCheckSuitePropHeadCommitPropAuthorType(TypedDict):
    """Committer

    Metaproperties for Git author/committer information.
    """

    date: NotRequired[datetime]
    email: Union[str, None]
    name: str
    username: NotRequired[str]


class WebhookCheckSuiteRequestedPropCheckSuitePropHeadCommitPropCommitterType(
    TypedDict
):
    """Committer

    Metaproperties for Git author/committer information.
    """

    date: NotRequired[datetime]
    email: Union[str, None]
    name: str
    username: NotRequired[str]


class WebhookCheckSuiteRequestedPropCheckSuitePropPullRequestsItemsType(TypedDict):
    """Check Run Pull Request"""

    base: WebhookCheckSuiteRequestedPropCheckSuitePropPullRequestsItemsPropBaseType
    head: WebhookCheckSuiteRequestedPropCheckSuitePropPullRequestsItemsPropHeadType
    id: int
    number: int
    url: str


class WebhookCheckSuiteRequestedPropCheckSuitePropPullRequestsItemsPropBaseType(
    TypedDict
):
    """WebhookCheckSuiteRequestedPropCheckSuitePropPullRequestsItemsPropBase"""

    ref: str
    repo: WebhookCheckSuiteRequestedPropCheckSuitePropPullRequestsItemsPropBasePropRepoType
    sha: str


class WebhookCheckSuiteRequestedPropCheckSuitePropPullRequestsItemsPropBasePropRepoType(
    TypedDict
):
    """Repo Ref"""

    id: int
    name: str
    url: str


class WebhookCheckSuiteRequestedPropCheckSuitePropPullRequestsItemsPropHeadType(
    TypedDict
):
    """WebhookCheckSuiteRequestedPropCheckSuitePropPullRequestsItemsPropHead"""

    ref: str
    repo: WebhookCheckSuiteRequestedPropCheckSuitePropPullRequestsItemsPropHeadPropRepoType
    sha: str


class WebhookCheckSuiteRequestedPropCheckSuitePropPullRequestsItemsPropHeadPropRepoType(
    TypedDict
):
    """Repo Ref"""

    id: int
    name: str
    url: str


class WebhookCheckSuiteRerequestedType(TypedDict):
    """check_suite rerequested event"""

    action: Literal["rerequested"]
    check_suite: WebhookCheckSuiteRerequestedPropCheckSuiteType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookCheckSuiteRerequestedPropCheckSuiteType(TypedDict):
    """WebhookCheckSuiteRerequestedPropCheckSuite

    The [check_suite](https://docs.github.com/rest/checks/suites#get-a-check-suite).
    """

    after: Union[str, None]
    app: WebhookCheckSuiteRerequestedPropCheckSuitePropAppType
    before: Union[str, None]
    check_runs_url: str
    conclusion: Union[
        None,
        Literal[
            "success",
            "failure",
            "neutral",
            "cancelled",
            "timed_out",
            "action_required",
            "stale",
        ],
    ]
    created_at: datetime
    head_branch: Union[str, None]
    head_commit: WebhookCheckSuiteRerequestedPropCheckSuitePropHeadCommitType
    head_sha: str
    id: int
    latest_check_runs_count: int
    node_id: str
    pull_requests: List[
        WebhookCheckSuiteRerequestedPropCheckSuitePropPullRequestsItemsType
    ]
    rerequestable: NotRequired[bool]
    runs_rerequestable: NotRequired[bool]
    status: Union[None, Literal["requested", "in_progress", "completed", "queued"]]
    updated_at: datetime
    url: str


class WebhookCheckSuiteRerequestedPropCheckSuitePropAppType(TypedDict):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None]
    description: Union[str, None]
    events: NotRequired[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "pull_request_review_thread",
                "merge_queue_entry",
                "workflow_job",
            ]
        ]
    ]
    external_url: Union[str, None]
    html_url: str
    id: Union[int, None]
    name: str
    node_id: str
    owner: Union[WebhookCheckSuiteRerequestedPropCheckSuitePropAppPropOwnerType, None]
    permissions: NotRequired[
        WebhookCheckSuiteRerequestedPropCheckSuitePropAppPropPermissionsType
    ]
    slug: NotRequired[str]
    updated_at: Union[datetime, None]


class WebhookCheckSuiteRerequestedPropCheckSuitePropAppPropOwnerType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookCheckSuiteRerequestedPropCheckSuitePropAppPropPermissionsType(TypedDict):
    """WebhookCheckSuiteRerequestedPropCheckSuitePropAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: NotRequired[Literal["read", "write"]]
    administration: NotRequired[Literal["read", "write"]]
    checks: NotRequired[Literal["read", "write"]]
    content_references: NotRequired[Literal["read", "write"]]
    contents: NotRequired[Literal["read", "write"]]
    deployments: NotRequired[Literal["read", "write"]]
    discussions: NotRequired[Literal["read", "write"]]
    emails: NotRequired[Literal["read", "write"]]
    environments: NotRequired[Literal["read", "write"]]
    issues: NotRequired[Literal["read", "write"]]
    keys: NotRequired[Literal["read", "write"]]
    members: NotRequired[Literal["read", "write"]]
    metadata: NotRequired[Literal["read", "write"]]
    organization_administration: NotRequired[Literal["read", "write"]]
    organization_hooks: NotRequired[Literal["read", "write"]]
    organization_packages: NotRequired[Literal["read", "write"]]
    organization_plan: NotRequired[Literal["read", "write"]]
    organization_projects: NotRequired[Literal["read", "write", "admin"]]
    organization_secrets: NotRequired[Literal["read", "write"]]
    organization_self_hosted_runners: NotRequired[Literal["read", "write"]]
    organization_user_blocking: NotRequired[Literal["read", "write"]]
    packages: NotRequired[Literal["read", "write"]]
    pages: NotRequired[Literal["read", "write"]]
    pull_requests: NotRequired[Literal["read", "write"]]
    repository_hooks: NotRequired[Literal["read", "write"]]
    repository_projects: NotRequired[Literal["read", "write", "admin"]]
    secret_scanning_alerts: NotRequired[Literal["read", "write"]]
    secrets: NotRequired[Literal["read", "write"]]
    security_events: NotRequired[Literal["read", "write"]]
    security_scanning_alert: NotRequired[Literal["read", "write"]]
    single_file: NotRequired[Literal["read", "write"]]
    statuses: NotRequired[Literal["read", "write"]]
    team_discussions: NotRequired[Literal["read", "write"]]
    vulnerability_alerts: NotRequired[Literal["read", "write"]]
    workflows: NotRequired[Literal["read", "write"]]


class WebhookCheckSuiteRerequestedPropCheckSuitePropHeadCommitType(TypedDict):
    """SimpleCommit"""

    author: WebhookCheckSuiteRerequestedPropCheckSuitePropHeadCommitPropAuthorType
    committer: WebhookCheckSuiteRerequestedPropCheckSuitePropHeadCommitPropCommitterType
    id: str
    message: str
    timestamp: str
    tree_id: str


class WebhookCheckSuiteRerequestedPropCheckSuitePropHeadCommitPropAuthorType(TypedDict):
    """Committer

    Metaproperties for Git author/committer information.
    """

    date: NotRequired[datetime]
    email: Union[str, None]
    name: str
    username: NotRequired[str]


class WebhookCheckSuiteRerequestedPropCheckSuitePropHeadCommitPropCommitterType(
    TypedDict
):
    """Committer

    Metaproperties for Git author/committer information.
    """

    date: NotRequired[datetime]
    email: Union[str, None]
    name: str
    username: NotRequired[str]


class WebhookCheckSuiteRerequestedPropCheckSuitePropPullRequestsItemsType(TypedDict):
    """Check Run Pull Request"""

    base: WebhookCheckSuiteRerequestedPropCheckSuitePropPullRequestsItemsPropBaseType
    head: WebhookCheckSuiteRerequestedPropCheckSuitePropPullRequestsItemsPropHeadType
    id: int
    number: int
    url: str


class WebhookCheckSuiteRerequestedPropCheckSuitePropPullRequestsItemsPropBaseType(
    TypedDict
):
    """WebhookCheckSuiteRerequestedPropCheckSuitePropPullRequestsItemsPropBase"""

    ref: str
    repo: WebhookCheckSuiteRerequestedPropCheckSuitePropPullRequestsItemsPropBasePropRepoType
    sha: str


class WebhookCheckSuiteRerequestedPropCheckSuitePropPullRequestsItemsPropBasePropRepoType(
    TypedDict
):
    """Repo Ref"""

    id: int
    name: str
    url: str


class WebhookCheckSuiteRerequestedPropCheckSuitePropPullRequestsItemsPropHeadType(
    TypedDict
):
    """WebhookCheckSuiteRerequestedPropCheckSuitePropPullRequestsItemsPropHead"""

    ref: str
    repo: WebhookCheckSuiteRerequestedPropCheckSuitePropPullRequestsItemsPropHeadPropRepoType
    sha: str


class WebhookCheckSuiteRerequestedPropCheckSuitePropPullRequestsItemsPropHeadPropRepoType(
    TypedDict
):
    """Repo Ref"""

    id: int
    name: str
    url: str


class WebhookCodeScanningAlertAppearedInBranchType(TypedDict):
    """code_scanning_alert appeared_in_branch event"""

    action: Literal["appeared_in_branch"]
    alert: WebhookCodeScanningAlertAppearedInBranchPropAlertType
    commit_oid: str
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    ref: str
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookCodeScanningAlertAppearedInBranchPropAlertType(TypedDict):
    """WebhookCodeScanningAlertAppearedInBranchPropAlert

    The code scanning alert involved in the event.
    """

    created_at: datetime
    dismissed_at: Union[datetime, None]
    dismissed_by: Union[
        WebhookCodeScanningAlertAppearedInBranchPropAlertPropDismissedByType, None
    ]
    dismissed_reason: Union[
        None, Literal["false positive", "won't fix", "used in tests"]
    ]
    html_url: str
    most_recent_instance: NotRequired[
        Union[
            WebhookCodeScanningAlertAppearedInBranchPropAlertPropMostRecentInstanceType,
            None,
        ]
    ]
    number: int
    rule: WebhookCodeScanningAlertAppearedInBranchPropAlertPropRuleType
    state: Literal["open", "dismissed", "fixed"]
    tool: WebhookCodeScanningAlertAppearedInBranchPropAlertPropToolType
    url: str


class WebhookCodeScanningAlertAppearedInBranchPropAlertPropDismissedByType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookCodeScanningAlertAppearedInBranchPropAlertPropMostRecentInstancePropLocationType(
    TypedDict
):
    """WebhookCodeScanningAlertAppearedInBranchPropAlertPropMostRecentInstancePropLocat
    ion
    """

    end_column: NotRequired[int]
    end_line: NotRequired[int]
    path: NotRequired[str]
    start_column: NotRequired[int]
    start_line: NotRequired[int]


class WebhookCodeScanningAlertAppearedInBranchPropAlertPropMostRecentInstancePropMessageType(
    TypedDict
):
    """WebhookCodeScanningAlertAppearedInBranchPropAlertPropMostRecentInstancePropMessa
    ge
    """

    text: NotRequired[str]


class WebhookCodeScanningAlertAppearedInBranchPropAlertPropMostRecentInstanceType(
    TypedDict
):
    """Alert Instance"""

    analysis_key: str
    category: NotRequired[str]
    classifications: NotRequired[List[str]]
    commit_sha: NotRequired[str]
    environment: str
    location: NotRequired[
        WebhookCodeScanningAlertAppearedInBranchPropAlertPropMostRecentInstancePropLocationType
    ]
    message: NotRequired[
        WebhookCodeScanningAlertAppearedInBranchPropAlertPropMostRecentInstancePropMessageType
    ]
    ref: str
    state: Literal["open", "dismissed", "fixed"]


class WebhookCodeScanningAlertAppearedInBranchPropAlertPropRuleType(TypedDict):
    """WebhookCodeScanningAlertAppearedInBranchPropAlertPropRule"""

    description: str
    id: str
    severity: Union[None, Literal["none", "note", "warning", "error"]]


class WebhookCodeScanningAlertAppearedInBranchPropAlertPropToolType(TypedDict):
    """WebhookCodeScanningAlertAppearedInBranchPropAlertPropTool"""

    name: str
    version: Union[str, None]


class WebhookCodeScanningAlertClosedByUserType(TypedDict):
    """code_scanning_alert closed_by_user event"""

    action: Literal["closed_by_user"]
    alert: WebhookCodeScanningAlertClosedByUserPropAlertType
    commit_oid: str
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    ref: str
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookCodeScanningAlertClosedByUserPropAlertType(TypedDict):
    """WebhookCodeScanningAlertClosedByUserPropAlert

    The code scanning alert involved in the event.
    """

    created_at: datetime
    dismissed_at: datetime
    dismissed_by: Union[
        WebhookCodeScanningAlertClosedByUserPropAlertPropDismissedByType, None
    ]
    dismissed_reason: Union[
        None, Literal["false positive", "won't fix", "used in tests"]
    ]
    html_url: str
    most_recent_instance: NotRequired[
        Union[
            WebhookCodeScanningAlertClosedByUserPropAlertPropMostRecentInstanceType,
            None,
        ]
    ]
    number: int
    rule: WebhookCodeScanningAlertClosedByUserPropAlertPropRuleType
    state: Literal["dismissed", "fixed"]
    tool: WebhookCodeScanningAlertClosedByUserPropAlertPropToolType
    url: str


class WebhookCodeScanningAlertClosedByUserPropAlertPropDismissedByType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookCodeScanningAlertClosedByUserPropAlertPropMostRecentInstancePropLocationType(
    TypedDict
):
    """WebhookCodeScanningAlertClosedByUserPropAlertPropMostRecentInstancePropLocation"""

    end_column: NotRequired[int]
    end_line: NotRequired[int]
    path: NotRequired[str]
    start_column: NotRequired[int]
    start_line: NotRequired[int]


class WebhookCodeScanningAlertClosedByUserPropAlertPropMostRecentInstancePropMessageType(
    TypedDict
):
    """WebhookCodeScanningAlertClosedByUserPropAlertPropMostRecentInstancePropMessage"""

    text: NotRequired[str]


class WebhookCodeScanningAlertClosedByUserPropAlertPropMostRecentInstanceType(
    TypedDict
):
    """Alert Instance"""

    analysis_key: str
    category: NotRequired[str]
    classifications: NotRequired[List[str]]
    commit_sha: NotRequired[str]
    environment: str
    location: NotRequired[
        WebhookCodeScanningAlertClosedByUserPropAlertPropMostRecentInstancePropLocationType
    ]
    message: NotRequired[
        WebhookCodeScanningAlertClosedByUserPropAlertPropMostRecentInstancePropMessageType
    ]
    ref: str
    state: Literal["open", "dismissed", "fixed"]


class WebhookCodeScanningAlertClosedByUserPropAlertPropRuleType(TypedDict):
    """WebhookCodeScanningAlertClosedByUserPropAlertPropRule"""

    description: str
    full_description: NotRequired[str]
    help_: NotRequired[Union[str, None]]
    help_uri: NotRequired[Union[str, None]]
    id: str
    name: NotRequired[str]
    severity: Union[None, Literal["none", "note", "warning", "error"]]
    tags: NotRequired[Union[List[str], None]]


class WebhookCodeScanningAlertClosedByUserPropAlertPropToolType(TypedDict):
    """WebhookCodeScanningAlertClosedByUserPropAlertPropTool"""

    guid: NotRequired[Union[str, None]]
    name: str
    version: Union[str, None]


class WebhookCodeScanningAlertCreatedType(TypedDict):
    """code_scanning_alert created event"""

    action: Literal["created"]
    alert: WebhookCodeScanningAlertCreatedPropAlertType
    commit_oid: str
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    ref: str
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookCodeScanningAlertCreatedPropAlertType(TypedDict):
    """WebhookCodeScanningAlertCreatedPropAlert

    The code scanning alert involved in the event.
    """

    created_at: Union[datetime, None]
    dismissed_at: None
    dismissed_by: None
    dismissed_comment: NotRequired[Union[str, None]]
    dismissed_reason: None
    fixed_at: NotRequired[None]
    html_url: str
    instances_url: NotRequired[str]
    most_recent_instance: NotRequired[
        Union[WebhookCodeScanningAlertCreatedPropAlertPropMostRecentInstanceType, None]
    ]
    number: int
    rule: WebhookCodeScanningAlertCreatedPropAlertPropRuleType
    state: Literal["open", "dismissed"]
    tool: Union[WebhookCodeScanningAlertCreatedPropAlertPropToolType, None]
    updated_at: NotRequired[Union[str, None]]
    url: str


class WebhookCodeScanningAlertCreatedPropAlertPropMostRecentInstancePropLocationType(
    TypedDict
):
    """WebhookCodeScanningAlertCreatedPropAlertPropMostRecentInstancePropLocation"""

    end_column: NotRequired[int]
    end_line: NotRequired[int]
    path: NotRequired[str]
    start_column: NotRequired[int]
    start_line: NotRequired[int]


class WebhookCodeScanningAlertCreatedPropAlertPropMostRecentInstancePropMessageType(
    TypedDict
):
    """WebhookCodeScanningAlertCreatedPropAlertPropMostRecentInstancePropMessage"""

    text: NotRequired[str]


class WebhookCodeScanningAlertCreatedPropAlertPropMostRecentInstanceType(TypedDict):
    """Alert Instance"""

    analysis_key: str
    category: NotRequired[str]
    classifications: NotRequired[List[str]]
    commit_sha: NotRequired[str]
    environment: str
    location: NotRequired[
        WebhookCodeScanningAlertCreatedPropAlertPropMostRecentInstancePropLocationType
    ]
    message: NotRequired[
        WebhookCodeScanningAlertCreatedPropAlertPropMostRecentInstancePropMessageType
    ]
    ref: str
    state: Literal["open", "dismissed", "fixed"]


class WebhookCodeScanningAlertCreatedPropAlertPropRuleType(TypedDict):
    """WebhookCodeScanningAlertCreatedPropAlertPropRule"""

    description: str
    full_description: NotRequired[str]
    help_: NotRequired[Union[str, None]]
    help_uri: NotRequired[Union[str, None]]
    id: str
    name: NotRequired[str]
    severity: Union[None, Literal["none", "note", "warning", "error"]]
    tags: NotRequired[Union[List[str], None]]


class WebhookCodeScanningAlertCreatedPropAlertPropToolType(TypedDict):
    """WebhookCodeScanningAlertCreatedPropAlertPropTool"""

    guid: NotRequired[Union[str, None]]
    name: str
    version: Union[str, None]


class WebhookCodeScanningAlertFixedType(TypedDict):
    """code_scanning_alert fixed event"""

    action: Literal["fixed"]
    alert: WebhookCodeScanningAlertFixedPropAlertType
    commit_oid: str
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    ref: str
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookCodeScanningAlertFixedPropAlertType(TypedDict):
    """WebhookCodeScanningAlertFixedPropAlert

    The code scanning alert involved in the event.
    """

    created_at: datetime
    dismissed_at: Union[datetime, None]
    dismissed_by: Union[WebhookCodeScanningAlertFixedPropAlertPropDismissedByType, None]
    dismissed_reason: Union[
        None, Literal["false positive", "won't fix", "used in tests"]
    ]
    html_url: str
    instances_url: NotRequired[str]
    most_recent_instance: NotRequired[
        Union[WebhookCodeScanningAlertFixedPropAlertPropMostRecentInstanceType, None]
    ]
    number: int
    rule: WebhookCodeScanningAlertFixedPropAlertPropRuleType
    state: Literal["fixed"]
    tool: WebhookCodeScanningAlertFixedPropAlertPropToolType
    url: str


class WebhookCodeScanningAlertFixedPropAlertPropDismissedByType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookCodeScanningAlertFixedPropAlertPropMostRecentInstancePropLocationType(
    TypedDict
):
    """WebhookCodeScanningAlertFixedPropAlertPropMostRecentInstancePropLocation"""

    end_column: NotRequired[int]
    end_line: NotRequired[int]
    path: NotRequired[str]
    start_column: NotRequired[int]
    start_line: NotRequired[int]


class WebhookCodeScanningAlertFixedPropAlertPropMostRecentInstancePropMessageType(
    TypedDict
):
    """WebhookCodeScanningAlertFixedPropAlertPropMostRecentInstancePropMessage"""

    text: NotRequired[str]


class WebhookCodeScanningAlertFixedPropAlertPropMostRecentInstanceType(TypedDict):
    """Alert Instance"""

    analysis_key: str
    category: NotRequired[str]
    classifications: NotRequired[List[str]]
    commit_sha: NotRequired[str]
    environment: str
    location: NotRequired[
        WebhookCodeScanningAlertFixedPropAlertPropMostRecentInstancePropLocationType
    ]
    message: NotRequired[
        WebhookCodeScanningAlertFixedPropAlertPropMostRecentInstancePropMessageType
    ]
    ref: str
    state: Literal["open", "dismissed", "fixed"]


class WebhookCodeScanningAlertFixedPropAlertPropRuleType(TypedDict):
    """WebhookCodeScanningAlertFixedPropAlertPropRule"""

    description: str
    full_description: NotRequired[str]
    help_: NotRequired[Union[str, None]]
    help_uri: NotRequired[Union[str, None]]
    id: str
    name: NotRequired[str]
    severity: Union[None, Literal["none", "note", "warning", "error"]]
    tags: NotRequired[Union[List[str], None]]


class WebhookCodeScanningAlertFixedPropAlertPropToolType(TypedDict):
    """WebhookCodeScanningAlertFixedPropAlertPropTool"""

    guid: NotRequired[Union[str, None]]
    name: str
    version: Union[str, None]


class WebhookCodeScanningAlertReopenedType(TypedDict):
    """code_scanning_alert reopened event"""

    action: Literal["reopened"]
    alert: Union[WebhookCodeScanningAlertReopenedPropAlertType, None]
    commit_oid: Union[str, None]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    ref: Union[str, None]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookCodeScanningAlertReopenedPropAlertPropDismissedByType(TypedDict):
    """WebhookCodeScanningAlertReopenedPropAlertPropDismissedBy"""


class WebhookCodeScanningAlertReopenedPropAlertPropMostRecentInstancePropLocationType(
    TypedDict
):
    """WebhookCodeScanningAlertReopenedPropAlertPropMostRecentInstancePropLocation"""

    end_column: NotRequired[int]
    end_line: NotRequired[int]
    path: NotRequired[str]
    start_column: NotRequired[int]
    start_line: NotRequired[int]


class WebhookCodeScanningAlertReopenedPropAlertPropMostRecentInstancePropMessageType(
    TypedDict
):
    """WebhookCodeScanningAlertReopenedPropAlertPropMostRecentInstancePropMessage"""

    text: NotRequired[str]


class WebhookCodeScanningAlertReopenedPropAlertPropMostRecentInstanceType(TypedDict):
    """Alert Instance"""

    analysis_key: str
    category: NotRequired[str]
    classifications: NotRequired[List[str]]
    commit_sha: NotRequired[str]
    environment: str
    location: NotRequired[
        WebhookCodeScanningAlertReopenedPropAlertPropMostRecentInstancePropLocationType
    ]
    message: NotRequired[
        WebhookCodeScanningAlertReopenedPropAlertPropMostRecentInstancePropMessageType
    ]
    ref: str
    state: Literal["open", "dismissed", "fixed"]


class WebhookCodeScanningAlertReopenedPropAlertPropRuleType(TypedDict):
    """WebhookCodeScanningAlertReopenedPropAlertPropRule"""

    description: str
    full_description: NotRequired[str]
    help_: NotRequired[Union[str, None]]
    help_uri: NotRequired[Union[str, None]]
    id: str
    name: NotRequired[str]
    severity: Union[None, Literal["none", "note", "warning", "error"]]
    tags: NotRequired[Union[List[str], None]]


class WebhookCodeScanningAlertReopenedPropAlertPropToolType(TypedDict):
    """WebhookCodeScanningAlertReopenedPropAlertPropTool"""

    guid: NotRequired[Union[str, None]]
    name: str
    version: Union[str, None]


class WebhookCodeScanningAlertReopenedPropAlertType(TypedDict):
    """WebhookCodeScanningAlertReopenedPropAlert

    The code scanning alert involved in the event.
    """

    created_at: datetime
    dismissed_at: Union[str, None]
    dismissed_by: Union[
        WebhookCodeScanningAlertReopenedPropAlertPropDismissedByType, None
    ]
    dismissed_reason: Union[str, None]
    html_url: str
    most_recent_instance: NotRequired[
        Union[WebhookCodeScanningAlertReopenedPropAlertPropMostRecentInstanceType, None]
    ]
    number: int
    rule: WebhookCodeScanningAlertReopenedPropAlertPropRuleType
    state: Literal["open", "dismissed", "fixed"]
    tool: WebhookCodeScanningAlertReopenedPropAlertPropToolType
    url: str


class WebhookCodeScanningAlertReopenedByUserType(TypedDict):
    """code_scanning_alert reopened_by_user event"""

    action: Literal["reopened_by_user"]
    alert: WebhookCodeScanningAlertReopenedByUserPropAlertType
    commit_oid: str
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    ref: str
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookCodeScanningAlertReopenedByUserPropAlertType(TypedDict):
    """WebhookCodeScanningAlertReopenedByUserPropAlert

    The code scanning alert involved in the event.
    """

    created_at: datetime
    dismissed_at: None
    dismissed_by: None
    dismissed_reason: None
    html_url: str
    most_recent_instance: NotRequired[
        Union[
            WebhookCodeScanningAlertReopenedByUserPropAlertPropMostRecentInstanceType,
            None,
        ]
    ]
    number: int
    rule: WebhookCodeScanningAlertReopenedByUserPropAlertPropRuleType
    state: Literal["open", "fixed"]
    tool: WebhookCodeScanningAlertReopenedByUserPropAlertPropToolType
    url: str


class WebhookCodeScanningAlertReopenedByUserPropAlertPropMostRecentInstancePropLocationType(
    TypedDict
):
    """WebhookCodeScanningAlertReopenedByUserPropAlertPropMostRecentInstancePropLocatio
    n
    """

    end_column: NotRequired[int]
    end_line: NotRequired[int]
    path: NotRequired[str]
    start_column: NotRequired[int]
    start_line: NotRequired[int]


class WebhookCodeScanningAlertReopenedByUserPropAlertPropMostRecentInstancePropMessageType(
    TypedDict
):
    """WebhookCodeScanningAlertReopenedByUserPropAlertPropMostRecentInstancePropMessage"""

    text: NotRequired[str]


class WebhookCodeScanningAlertReopenedByUserPropAlertPropMostRecentInstanceType(
    TypedDict
):
    """Alert Instance"""

    analysis_key: str
    category: NotRequired[str]
    classifications: NotRequired[List[str]]
    commit_sha: NotRequired[str]
    environment: str
    location: NotRequired[
        WebhookCodeScanningAlertReopenedByUserPropAlertPropMostRecentInstancePropLocationType
    ]
    message: NotRequired[
        WebhookCodeScanningAlertReopenedByUserPropAlertPropMostRecentInstancePropMessageType
    ]
    ref: str
    state: Literal["open", "dismissed", "fixed"]


class WebhookCodeScanningAlertReopenedByUserPropAlertPropRuleType(TypedDict):
    """WebhookCodeScanningAlertReopenedByUserPropAlertPropRule"""

    description: str
    id: str
    severity: Union[None, Literal["none", "note", "warning", "error"]]


class WebhookCodeScanningAlertReopenedByUserPropAlertPropToolType(TypedDict):
    """WebhookCodeScanningAlertReopenedByUserPropAlertPropTool"""

    name: str
    version: Union[str, None]


class WebhookCommitCommentCreatedType(TypedDict):
    """commit_comment created event"""

    action: Literal["created"]
    comment: WebhookCommitCommentCreatedPropCommentType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookCommitCommentCreatedPropCommentType(TypedDict):
    """WebhookCommitCommentCreatedPropComment

    The [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-
    comment) resource.
    """

    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: str
    commit_id: str
    created_at: str
    html_url: str
    id: int
    line: Union[int, None]
    node_id: str
    path: Union[str, None]
    position: Union[int, None]
    reactions: NotRequired[WebhookCommitCommentCreatedPropCommentPropReactionsType]
    updated_at: str
    url: str
    user: Union[WebhookCommitCommentCreatedPropCommentPropUserType, None]


class WebhookCommitCommentCreatedPropCommentPropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookCommitCommentCreatedPropCommentPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookCreateType(TypedDict):
    """create event"""

    description: Union[str, None]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    master_branch: str
    organization: NotRequired[OrganizationSimpleWebhooksType]
    pusher_type: str
    ref: str
    ref_type: Literal["tag", "branch"]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookCustomPropertyCreatedType(TypedDict):
    """custom property created event"""

    action: Literal["created"]
    definition: OrgCustomPropertyType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: OrganizationSimpleWebhooksType
    sender: NotRequired[SimpleUserWebhooksType]


class WebhookCustomPropertyDeletedType(TypedDict):
    """custom property deleted event"""

    action: Literal["deleted"]
    definition: WebhookCustomPropertyDeletedPropDefinitionType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: OrganizationSimpleWebhooksType
    sender: NotRequired[SimpleUserWebhooksType]


class WebhookCustomPropertyDeletedPropDefinitionType(TypedDict):
    """WebhookCustomPropertyDeletedPropDefinition"""

    property_name: str


class WebhookCustomPropertyUpdatedType(TypedDict):
    """custom property updated event"""

    action: Literal["updated"]
    definition: OrgCustomPropertyType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: OrganizationSimpleWebhooksType
    sender: NotRequired[SimpleUserWebhooksType]


class WebhookCustomPropertyValuesUpdatedType(TypedDict):
    """Custom property values updated event"""

    action: Literal["updated"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    repository: RepositoryWebhooksType
    organization: OrganizationSimpleWebhooksType
    sender: NotRequired[SimpleUserWebhooksType]
    new_property_values: List[CustomPropertyValueType]
    old_property_values: List[CustomPropertyValueType]


class WebhookDeleteType(TypedDict):
    """delete event"""

    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    pusher_type: str
    ref: str
    ref_type: Literal["tag", "branch"]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookDependabotAlertAutoDismissedType(TypedDict):
    """Dependabot alert auto-dismissed event"""

    action: Literal["auto_dismissed"]
    alert: DependabotAlertType
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    enterprise: NotRequired[EnterpriseWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookDependabotAlertAutoReopenedType(TypedDict):
    """Dependabot alert auto-reopened event"""

    action: Literal["auto_reopened"]
    alert: DependabotAlertType
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    enterprise: NotRequired[EnterpriseWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookDependabotAlertCreatedType(TypedDict):
    """Dependabot alert created event"""

    action: Literal["created"]
    alert: DependabotAlertType
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    enterprise: NotRequired[EnterpriseWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookDependabotAlertDismissedType(TypedDict):
    """Dependabot alert dismissed event"""

    action: Literal["dismissed"]
    alert: DependabotAlertType
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    enterprise: NotRequired[EnterpriseWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookDependabotAlertFixedType(TypedDict):
    """Dependabot alert fixed event"""

    action: Literal["fixed"]
    alert: DependabotAlertType
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    enterprise: NotRequired[EnterpriseWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookDependabotAlertReintroducedType(TypedDict):
    """Dependabot alert reintroduced event"""

    action: Literal["reintroduced"]
    alert: DependabotAlertType
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    enterprise: NotRequired[EnterpriseWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookDependabotAlertReopenedType(TypedDict):
    """Dependabot alert reopened event"""

    action: Literal["reopened"]
    alert: DependabotAlertType
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    enterprise: NotRequired[EnterpriseWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookDeployKeyCreatedType(TypedDict):
    """deploy_key created event"""

    action: Literal["created"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    key: WebhookDeployKeyCreatedPropKeyType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookDeployKeyCreatedPropKeyType(TypedDict):
    """WebhookDeployKeyCreatedPropKey

    The [`deploy key`](https://docs.github.com/rest/deploy-keys/deploy-keys#get-a-
    deploy-key) resource.
    """

    added_by: NotRequired[Union[str, None]]
    created_at: str
    id: int
    key: str
    last_used: NotRequired[Union[str, None]]
    read_only: bool
    title: str
    url: str
    verified: bool


class WebhookDeployKeyDeletedType(TypedDict):
    """deploy_key deleted event"""

    action: Literal["deleted"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    key: WebhookDeployKeyDeletedPropKeyType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookDeployKeyDeletedPropKeyType(TypedDict):
    """WebhookDeployKeyDeletedPropKey

    The [`deploy key`](https://docs.github.com/rest/deploy-keys/deploy-keys#get-a-
    deploy-key) resource.
    """

    added_by: NotRequired[Union[str, None]]
    created_at: str
    id: int
    key: str
    last_used: NotRequired[Union[str, None]]
    read_only: bool
    title: str
    url: str
    verified: bool


class WebhookDeploymentCreatedType(TypedDict):
    """deployment created event"""

    action: Literal["created"]
    deployment: WebhookDeploymentCreatedPropDeploymentType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType
    workflow: Union[WebhookDeploymentCreatedPropWorkflowType, None]
    workflow_run: Union[WebhookDeploymentCreatedPropWorkflowRunType, None]


class WebhookDeploymentCreatedPropDeploymentType(TypedDict):
    """Deployment

    The [deployment](https://docs.github.com/rest/deployments/deployments#list-
    deployments).
    """

    created_at: str
    creator: Union[WebhookDeploymentCreatedPropDeploymentPropCreatorType, None]
    description: Union[str, None]
    environment: str
    id: int
    node_id: str
    original_environment: str
    payload: Union[WebhookDeploymentCreatedPropDeploymentPropPayloadOneof0Type, str]
    performed_via_github_app: NotRequired[
        Union[WebhookDeploymentCreatedPropDeploymentPropPerformedViaGithubAppType, None]
    ]
    production_environment: NotRequired[bool]
    ref: str
    repository_url: str
    sha: str
    statuses_url: str
    task: str
    transient_environment: NotRequired[bool]
    updated_at: str
    url: str


class WebhookDeploymentCreatedPropDeploymentPropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookDeploymentCreatedPropDeploymentPropPayloadOneof0Type(TypedDict):
    """WebhookDeploymentCreatedPropDeploymentPropPayloadOneof0"""


class WebhookDeploymentCreatedPropDeploymentPropPerformedViaGithubAppPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookDeploymentCreatedPropDeploymentPropPerformedViaGithubAppPropPermissionsType(
    TypedDict
):
    """WebhookDeploymentCreatedPropDeploymentPropPerformedViaGithubAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: NotRequired[Literal["read", "write"]]
    administration: NotRequired[Literal["read", "write"]]
    checks: NotRequired[Literal["read", "write"]]
    content_references: NotRequired[Literal["read", "write"]]
    contents: NotRequired[Literal["read", "write"]]
    deployments: NotRequired[Literal["read", "write"]]
    discussions: NotRequired[Literal["read", "write"]]
    emails: NotRequired[Literal["read", "write"]]
    environments: NotRequired[Literal["read", "write"]]
    issues: NotRequired[Literal["read", "write"]]
    keys: NotRequired[Literal["read", "write"]]
    members: NotRequired[Literal["read", "write"]]
    metadata: NotRequired[Literal["read", "write"]]
    organization_administration: NotRequired[Literal["read", "write"]]
    organization_hooks: NotRequired[Literal["read", "write"]]
    organization_packages: NotRequired[Literal["read", "write"]]
    organization_plan: NotRequired[Literal["read", "write"]]
    organization_projects: NotRequired[Literal["read", "write"]]
    organization_secrets: NotRequired[Literal["read", "write"]]
    organization_self_hosted_runners: NotRequired[Literal["read", "write"]]
    organization_user_blocking: NotRequired[Literal["read", "write"]]
    packages: NotRequired[Literal["read", "write"]]
    pages: NotRequired[Literal["read", "write"]]
    pull_requests: NotRequired[Literal["read", "write"]]
    repository_hooks: NotRequired[Literal["read", "write"]]
    repository_projects: NotRequired[Literal["read", "write"]]
    secret_scanning_alerts: NotRequired[Literal["read", "write"]]
    secrets: NotRequired[Literal["read", "write"]]
    security_events: NotRequired[Literal["read", "write"]]
    security_scanning_alert: NotRequired[Literal["read", "write"]]
    single_file: NotRequired[Literal["read", "write"]]
    statuses: NotRequired[Literal["read", "write"]]
    team_discussions: NotRequired[Literal["read", "write"]]
    vulnerability_alerts: NotRequired[Literal["read", "write"]]
    workflows: NotRequired[Literal["read", "write"]]


class WebhookDeploymentCreatedPropDeploymentPropPerformedViaGithubAppType(TypedDict):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None]
    description: Union[str, None]
    events: NotRequired[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "workflow_job",
                "pull_request_review_thread",
                "merge_queue_entry",
                "secret_scanning_alert_location",
                "merge_group",
            ]
        ]
    ]
    external_url: Union[str, None]
    html_url: str
    id: Union[int, None]
    name: str
    node_id: str
    owner: Union[
        WebhookDeploymentCreatedPropDeploymentPropPerformedViaGithubAppPropOwnerType,
        None,
    ]
    permissions: NotRequired[
        WebhookDeploymentCreatedPropDeploymentPropPerformedViaGithubAppPropPermissionsType
    ]
    slug: NotRequired[str]
    updated_at: Union[datetime, None]


class WebhookDeploymentCreatedPropWorkflowType(TypedDict):
    """Workflow"""

    badge_url: str
    created_at: datetime
    html_url: str
    id: int
    name: str
    node_id: str
    path: str
    state: str
    updated_at: datetime
    url: str


class WebhookDeploymentCreatedPropWorkflowRunPropActorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookDeploymentCreatedPropWorkflowRunPropHeadRepositoryType(TypedDict):
    """WebhookDeploymentCreatedPropWorkflowRunPropHeadRepository"""

    archive_url: NotRequired[str]
    assignees_url: NotRequired[str]
    blobs_url: NotRequired[str]
    branches_url: NotRequired[str]
    collaborators_url: NotRequired[str]
    comments_url: NotRequired[str]
    commits_url: NotRequired[str]
    compare_url: NotRequired[str]
    contents_url: NotRequired[str]
    contributors_url: NotRequired[str]
    deployments_url: NotRequired[str]
    description: NotRequired[None]
    downloads_url: NotRequired[str]
    events_url: NotRequired[str]
    fork: NotRequired[bool]
    forks_url: NotRequired[str]
    full_name: NotRequired[str]
    git_commits_url: NotRequired[str]
    git_refs_url: NotRequired[str]
    git_tags_url: NotRequired[str]
    hooks_url: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    issue_comment_url: NotRequired[str]
    issue_events_url: NotRequired[str]
    issues_url: NotRequired[str]
    keys_url: NotRequired[str]
    labels_url: NotRequired[str]
    languages_url: NotRequired[str]
    merges_url: NotRequired[str]
    milestones_url: NotRequired[str]
    name: NotRequired[str]
    node_id: NotRequired[str]
    notifications_url: NotRequired[str]
    owner: NotRequired[
        WebhookDeploymentCreatedPropWorkflowRunPropHeadRepositoryPropOwnerType
    ]
    private: NotRequired[bool]
    pulls_url: NotRequired[str]
    releases_url: NotRequired[str]
    stargazers_url: NotRequired[str]
    statuses_url: NotRequired[str]
    subscribers_url: NotRequired[str]
    subscription_url: NotRequired[str]
    tags_url: NotRequired[str]
    teams_url: NotRequired[str]
    trees_url: NotRequired[str]
    url: NotRequired[str]


class WebhookDeploymentCreatedPropWorkflowRunPropHeadRepositoryPropOwnerType(TypedDict):
    """WebhookDeploymentCreatedPropWorkflowRunPropHeadRepositoryPropOwner"""

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookDeploymentCreatedPropWorkflowRunPropPullRequestsItemsType(TypedDict):
    """Check Run Pull Request"""

    base: WebhookDeploymentCreatedPropWorkflowRunPropPullRequestsItemsPropBaseType
    head: WebhookDeploymentCreatedPropWorkflowRunPropPullRequestsItemsPropHeadType
    id: int
    number: int
    url: str


class WebhookDeploymentCreatedPropWorkflowRunPropPullRequestsItemsPropBaseType(
    TypedDict
):
    """WebhookDeploymentCreatedPropWorkflowRunPropPullRequestsItemsPropBase"""

    ref: str
    repo: WebhookDeploymentCreatedPropWorkflowRunPropPullRequestsItemsPropBasePropRepoType
    sha: str


class WebhookDeploymentCreatedPropWorkflowRunPropPullRequestsItemsPropBasePropRepoType(
    TypedDict
):
    """Repo Ref"""

    id: int
    name: str
    url: str


class WebhookDeploymentCreatedPropWorkflowRunPropPullRequestsItemsPropHeadType(
    TypedDict
):
    """WebhookDeploymentCreatedPropWorkflowRunPropPullRequestsItemsPropHead"""

    ref: str
    repo: WebhookDeploymentCreatedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepoType
    sha: str


class WebhookDeploymentCreatedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepoType(
    TypedDict
):
    """Repo Ref"""

    id: int
    name: str
    url: str


class WebhookDeploymentCreatedPropWorkflowRunPropReferencedWorkflowsItemsType(
    TypedDict
):
    """WebhookDeploymentCreatedPropWorkflowRunPropReferencedWorkflowsItems"""

    path: str
    ref: NotRequired[str]
    sha: str


class WebhookDeploymentCreatedPropWorkflowRunPropRepositoryType(TypedDict):
    """WebhookDeploymentCreatedPropWorkflowRunPropRepository"""

    archive_url: NotRequired[str]
    assignees_url: NotRequired[str]
    blobs_url: NotRequired[str]
    branches_url: NotRequired[str]
    collaborators_url: NotRequired[str]
    comments_url: NotRequired[str]
    commits_url: NotRequired[str]
    compare_url: NotRequired[str]
    contents_url: NotRequired[str]
    contributors_url: NotRequired[str]
    deployments_url: NotRequired[str]
    description: NotRequired[None]
    downloads_url: NotRequired[str]
    events_url: NotRequired[str]
    fork: NotRequired[bool]
    forks_url: NotRequired[str]
    full_name: NotRequired[str]
    git_commits_url: NotRequired[str]
    git_refs_url: NotRequired[str]
    git_tags_url: NotRequired[str]
    hooks_url: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    issue_comment_url: NotRequired[str]
    issue_events_url: NotRequired[str]
    issues_url: NotRequired[str]
    keys_url: NotRequired[str]
    labels_url: NotRequired[str]
    languages_url: NotRequired[str]
    merges_url: NotRequired[str]
    milestones_url: NotRequired[str]
    name: NotRequired[str]
    node_id: NotRequired[str]
    notifications_url: NotRequired[str]
    owner: NotRequired[
        WebhookDeploymentCreatedPropWorkflowRunPropRepositoryPropOwnerType
    ]
    private: NotRequired[bool]
    pulls_url: NotRequired[str]
    releases_url: NotRequired[str]
    stargazers_url: NotRequired[str]
    statuses_url: NotRequired[str]
    subscribers_url: NotRequired[str]
    subscription_url: NotRequired[str]
    tags_url: NotRequired[str]
    teams_url: NotRequired[str]
    trees_url: NotRequired[str]
    url: NotRequired[str]


class WebhookDeploymentCreatedPropWorkflowRunPropRepositoryPropOwnerType(TypedDict):
    """WebhookDeploymentCreatedPropWorkflowRunPropRepositoryPropOwner"""

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookDeploymentCreatedPropWorkflowRunPropTriggeringActorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookDeploymentCreatedPropWorkflowRunType(TypedDict):
    """Deployment Workflow Run"""

    actor: Union[WebhookDeploymentCreatedPropWorkflowRunPropActorType, None]
    artifacts_url: NotRequired[str]
    cancel_url: NotRequired[str]
    check_suite_id: int
    check_suite_node_id: str
    check_suite_url: NotRequired[str]
    conclusion: Union[
        None,
        Literal[
            "success",
            "failure",
            "neutral",
            "cancelled",
            "timed_out",
            "action_required",
            "stale",
        ],
    ]
    created_at: datetime
    display_title: str
    event: str
    head_branch: str
    head_commit: NotRequired[None]
    head_repository: NotRequired[
        WebhookDeploymentCreatedPropWorkflowRunPropHeadRepositoryType
    ]
    head_sha: str
    html_url: str
    id: int
    jobs_url: NotRequired[str]
    logs_url: NotRequired[str]
    name: str
    node_id: str
    path: str
    previous_attempt_url: NotRequired[None]
    pull_requests: List[
        WebhookDeploymentCreatedPropWorkflowRunPropPullRequestsItemsType
    ]
    referenced_workflows: NotRequired[
        Union[
            List[
                WebhookDeploymentCreatedPropWorkflowRunPropReferencedWorkflowsItemsType
            ],
            None,
        ]
    ]
    repository: NotRequired[WebhookDeploymentCreatedPropWorkflowRunPropRepositoryType]
    rerun_url: NotRequired[str]
    run_attempt: int
    run_number: int
    run_started_at: datetime
    status: Literal[
        "requested", "in_progress", "completed", "queued", "waiting", "pending"
    ]
    triggering_actor: NotRequired[
        Union[WebhookDeploymentCreatedPropWorkflowRunPropTriggeringActorType, None]
    ]
    updated_at: datetime
    url: str
    workflow_id: int
    workflow_url: NotRequired[str]


class WebhookDeploymentProtectionRuleRequestedType(TypedDict):
    """deployment protection rule requested event"""

    action: NotRequired[Literal["requested"]]
    environment: NotRequired[str]
    event: NotRequired[str]
    deployment_callback_url: NotRequired[str]
    deployment: NotRequired[DeploymentType]
    pull_requests: NotRequired[List[PullRequestType]]
    repository: NotRequired[RepositoryWebhooksType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    sender: NotRequired[SimpleUserWebhooksType]


class WebhookDeploymentReviewApprovedType(TypedDict):
    """WebhookDeploymentReviewApproved"""

    action: Literal["approved"]
    approver: NotRequired[WebhookDeploymentReviewApprovedPropApproverType]
    comment: NotRequired[str]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: OrganizationSimpleWebhooksType
    repository: RepositoryWebhooksType
    reviewers: NotRequired[List[WebhookDeploymentReviewApprovedPropReviewersItemsType]]
    sender: SimpleUserWebhooksType
    since: str
    workflow_job_run: NotRequired[WebhookDeploymentReviewApprovedPropWorkflowJobRunType]
    workflow_job_runs: NotRequired[
        List[WebhookDeploymentReviewApprovedPropWorkflowJobRunsItemsType]
    ]
    workflow_run: Union[WebhookDeploymentReviewApprovedPropWorkflowRunType, None]


class WebhookDeploymentReviewApprovedPropApproverType(TypedDict):
    """WebhookDeploymentReviewApprovedPropApprover"""

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookDeploymentReviewApprovedPropReviewersItemsType(TypedDict):
    """WebhookDeploymentReviewApprovedPropReviewersItems"""

    reviewer: NotRequired[
        Union[WebhookDeploymentReviewApprovedPropReviewersItemsPropReviewerType, None]
    ]
    type: NotRequired[Literal["User"]]


class WebhookDeploymentReviewApprovedPropReviewersItemsPropReviewerType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookDeploymentReviewApprovedPropWorkflowJobRunType(TypedDict):
    """WebhookDeploymentReviewApprovedPropWorkflowJobRun"""

    conclusion: None
    created_at: str
    environment: str
    html_url: str
    id: int
    name: None
    status: str
    updated_at: str


class WebhookDeploymentReviewApprovedPropWorkflowJobRunsItemsType(TypedDict):
    """WebhookDeploymentReviewApprovedPropWorkflowJobRunsItems"""

    conclusion: NotRequired[None]
    created_at: NotRequired[str]
    environment: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    name: NotRequired[Union[str, None]]
    status: NotRequired[str]
    updated_at: NotRequired[str]


class WebhookDeploymentReviewApprovedPropWorkflowRunPropActorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookDeploymentReviewApprovedPropWorkflowRunPropHeadCommitType(TypedDict):
    """WebhookDeploymentReviewApprovedPropWorkflowRunPropHeadCommit"""


class WebhookDeploymentReviewApprovedPropWorkflowRunPropHeadRepositoryType(TypedDict):
    """WebhookDeploymentReviewApprovedPropWorkflowRunPropHeadRepository"""

    archive_url: NotRequired[str]
    assignees_url: NotRequired[str]
    blobs_url: NotRequired[str]
    branches_url: NotRequired[str]
    collaborators_url: NotRequired[str]
    comments_url: NotRequired[str]
    commits_url: NotRequired[str]
    compare_url: NotRequired[str]
    contents_url: NotRequired[str]
    contributors_url: NotRequired[str]
    deployments_url: NotRequired[str]
    description: NotRequired[Union[str, None]]
    downloads_url: NotRequired[str]
    events_url: NotRequired[str]
    fork: NotRequired[bool]
    forks_url: NotRequired[str]
    full_name: NotRequired[str]
    git_commits_url: NotRequired[str]
    git_refs_url: NotRequired[str]
    git_tags_url: NotRequired[str]
    hooks_url: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    issue_comment_url: NotRequired[str]
    issue_events_url: NotRequired[str]
    issues_url: NotRequired[str]
    keys_url: NotRequired[str]
    labels_url: NotRequired[str]
    languages_url: NotRequired[str]
    merges_url: NotRequired[str]
    milestones_url: NotRequired[str]
    name: NotRequired[str]
    node_id: NotRequired[str]
    notifications_url: NotRequired[str]
    owner: NotRequired[
        WebhookDeploymentReviewApprovedPropWorkflowRunPropHeadRepositoryPropOwnerType
    ]
    private: NotRequired[bool]
    pulls_url: NotRequired[str]
    releases_url: NotRequired[str]
    stargazers_url: NotRequired[str]
    statuses_url: NotRequired[str]
    subscribers_url: NotRequired[str]
    subscription_url: NotRequired[str]
    tags_url: NotRequired[str]
    teams_url: NotRequired[str]
    trees_url: NotRequired[str]
    url: NotRequired[str]


class WebhookDeploymentReviewApprovedPropWorkflowRunPropHeadRepositoryPropOwnerType(
    TypedDict
):
    """WebhookDeploymentReviewApprovedPropWorkflowRunPropHeadRepositoryPropOwner"""

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookDeploymentReviewApprovedPropWorkflowRunPropPullRequestsItemsType(
    TypedDict
):
    """Check Run Pull Request"""

    base: WebhookDeploymentReviewApprovedPropWorkflowRunPropPullRequestsItemsPropBaseType
    head: WebhookDeploymentReviewApprovedPropWorkflowRunPropPullRequestsItemsPropHeadType
    id: int
    number: int
    url: str


class WebhookDeploymentReviewApprovedPropWorkflowRunPropPullRequestsItemsPropBaseType(
    TypedDict
):
    """WebhookDeploymentReviewApprovedPropWorkflowRunPropPullRequestsItemsPropBase"""

    ref: str
    repo: WebhookDeploymentReviewApprovedPropWorkflowRunPropPullRequestsItemsPropBasePropRepoType
    sha: str


class WebhookDeploymentReviewApprovedPropWorkflowRunPropPullRequestsItemsPropBasePropRepoType(
    TypedDict
):
    """Repo Ref"""

    id: int
    name: str
    url: str


class WebhookDeploymentReviewApprovedPropWorkflowRunPropPullRequestsItemsPropHeadType(
    TypedDict
):
    """WebhookDeploymentReviewApprovedPropWorkflowRunPropPullRequestsItemsPropHead"""

    ref: str
    repo: WebhookDeploymentReviewApprovedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepoType
    sha: str


class WebhookDeploymentReviewApprovedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepoType(
    TypedDict
):
    """Repo Ref"""

    id: int
    name: str
    url: str


class WebhookDeploymentReviewApprovedPropWorkflowRunPropReferencedWorkflowsItemsType(
    TypedDict
):
    """WebhookDeploymentReviewApprovedPropWorkflowRunPropReferencedWorkflowsItems"""

    path: str
    ref: NotRequired[str]
    sha: str


class WebhookDeploymentReviewApprovedPropWorkflowRunPropRepositoryType(TypedDict):
    """WebhookDeploymentReviewApprovedPropWorkflowRunPropRepository"""

    archive_url: NotRequired[str]
    assignees_url: NotRequired[str]
    blobs_url: NotRequired[str]
    branches_url: NotRequired[str]
    collaborators_url: NotRequired[str]
    comments_url: NotRequired[str]
    commits_url: NotRequired[str]
    compare_url: NotRequired[str]
    contents_url: NotRequired[str]
    contributors_url: NotRequired[str]
    deployments_url: NotRequired[str]
    description: NotRequired[Union[str, None]]
    downloads_url: NotRequired[str]
    events_url: NotRequired[str]
    fork: NotRequired[bool]
    forks_url: NotRequired[str]
    full_name: NotRequired[str]
    git_commits_url: NotRequired[str]
    git_refs_url: NotRequired[str]
    git_tags_url: NotRequired[str]
    hooks_url: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    issue_comment_url: NotRequired[str]
    issue_events_url: NotRequired[str]
    issues_url: NotRequired[str]
    keys_url: NotRequired[str]
    labels_url: NotRequired[str]
    languages_url: NotRequired[str]
    merges_url: NotRequired[str]
    milestones_url: NotRequired[str]
    name: NotRequired[str]
    node_id: NotRequired[str]
    notifications_url: NotRequired[str]
    owner: NotRequired[
        WebhookDeploymentReviewApprovedPropWorkflowRunPropRepositoryPropOwnerType
    ]
    private: NotRequired[bool]
    pulls_url: NotRequired[str]
    releases_url: NotRequired[str]
    stargazers_url: NotRequired[str]
    statuses_url: NotRequired[str]
    subscribers_url: NotRequired[str]
    subscription_url: NotRequired[str]
    tags_url: NotRequired[str]
    teams_url: NotRequired[str]
    trees_url: NotRequired[str]
    url: NotRequired[str]


class WebhookDeploymentReviewApprovedPropWorkflowRunPropRepositoryPropOwnerType(
    TypedDict
):
    """WebhookDeploymentReviewApprovedPropWorkflowRunPropRepositoryPropOwner"""

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookDeploymentReviewApprovedPropWorkflowRunPropTriggeringActorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookDeploymentReviewApprovedPropWorkflowRunType(TypedDict):
    """Deployment Workflow Run"""

    actor: Union[WebhookDeploymentReviewApprovedPropWorkflowRunPropActorType, None]
    artifacts_url: NotRequired[str]
    cancel_url: NotRequired[str]
    check_suite_id: int
    check_suite_node_id: str
    check_suite_url: NotRequired[str]
    conclusion: Union[
        None,
        Literal[
            "success",
            "failure",
            "neutral",
            "cancelled",
            "timed_out",
            "action_required",
            "stale",
        ],
    ]
    created_at: datetime
    display_title: str
    event: str
    head_branch: str
    head_commit: NotRequired[
        Union[WebhookDeploymentReviewApprovedPropWorkflowRunPropHeadCommitType, None]
    ]
    head_repository: NotRequired[
        WebhookDeploymentReviewApprovedPropWorkflowRunPropHeadRepositoryType
    ]
    head_sha: str
    html_url: str
    id: int
    jobs_url: NotRequired[str]
    logs_url: NotRequired[str]
    name: str
    node_id: str
    path: str
    previous_attempt_url: NotRequired[Union[str, None]]
    pull_requests: List[
        WebhookDeploymentReviewApprovedPropWorkflowRunPropPullRequestsItemsType
    ]
    referenced_workflows: NotRequired[
        Union[
            List[
                WebhookDeploymentReviewApprovedPropWorkflowRunPropReferencedWorkflowsItemsType
            ],
            None,
        ]
    ]
    repository: NotRequired[
        WebhookDeploymentReviewApprovedPropWorkflowRunPropRepositoryType
    ]
    rerun_url: NotRequired[str]
    run_attempt: int
    run_number: int
    run_started_at: datetime
    status: Literal[
        "requested", "in_progress", "completed", "queued", "waiting", "pending"
    ]
    triggering_actor: Union[
        WebhookDeploymentReviewApprovedPropWorkflowRunPropTriggeringActorType, None
    ]
    updated_at: datetime
    url: str
    workflow_id: int
    workflow_url: NotRequired[str]


class WebhookDeploymentReviewRejectedType(TypedDict):
    """WebhookDeploymentReviewRejected"""

    action: Literal["rejected"]
    approver: NotRequired[WebhookDeploymentReviewRejectedPropApproverType]
    comment: NotRequired[str]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: OrganizationSimpleWebhooksType
    repository: RepositoryWebhooksType
    reviewers: NotRequired[List[WebhookDeploymentReviewRejectedPropReviewersItemsType]]
    sender: SimpleUserWebhooksType
    since: str
    workflow_job_run: NotRequired[WebhookDeploymentReviewRejectedPropWorkflowJobRunType]
    workflow_job_runs: NotRequired[
        List[WebhookDeploymentReviewRejectedPropWorkflowJobRunsItemsType]
    ]
    workflow_run: Union[WebhookDeploymentReviewRejectedPropWorkflowRunType, None]


class WebhookDeploymentReviewRejectedPropApproverType(TypedDict):
    """WebhookDeploymentReviewRejectedPropApprover"""

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookDeploymentReviewRejectedPropReviewersItemsType(TypedDict):
    """WebhookDeploymentReviewRejectedPropReviewersItems"""

    reviewer: NotRequired[
        Union[WebhookDeploymentReviewRejectedPropReviewersItemsPropReviewerType, None]
    ]
    type: NotRequired[Literal["User"]]


class WebhookDeploymentReviewRejectedPropReviewersItemsPropReviewerType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookDeploymentReviewRejectedPropWorkflowJobRunType(TypedDict):
    """WebhookDeploymentReviewRejectedPropWorkflowJobRun"""

    conclusion: None
    created_at: str
    environment: str
    html_url: str
    id: int
    name: None
    status: str
    updated_at: str


class WebhookDeploymentReviewRejectedPropWorkflowJobRunsItemsType(TypedDict):
    """WebhookDeploymentReviewRejectedPropWorkflowJobRunsItems"""

    conclusion: NotRequired[Union[str, None]]
    created_at: NotRequired[str]
    environment: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    name: NotRequired[Union[str, None]]
    status: NotRequired[str]
    updated_at: NotRequired[str]


class WebhookDeploymentReviewRejectedPropWorkflowRunPropActorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookDeploymentReviewRejectedPropWorkflowRunPropHeadCommitType(TypedDict):
    """WebhookDeploymentReviewRejectedPropWorkflowRunPropHeadCommit"""


class WebhookDeploymentReviewRejectedPropWorkflowRunPropHeadRepositoryType(TypedDict):
    """WebhookDeploymentReviewRejectedPropWorkflowRunPropHeadRepository"""

    archive_url: NotRequired[str]
    assignees_url: NotRequired[str]
    blobs_url: NotRequired[str]
    branches_url: NotRequired[str]
    collaborators_url: NotRequired[str]
    comments_url: NotRequired[str]
    commits_url: NotRequired[str]
    compare_url: NotRequired[str]
    contents_url: NotRequired[str]
    contributors_url: NotRequired[str]
    deployments_url: NotRequired[str]
    description: NotRequired[Union[str, None]]
    downloads_url: NotRequired[str]
    events_url: NotRequired[str]
    fork: NotRequired[bool]
    forks_url: NotRequired[str]
    full_name: NotRequired[str]
    git_commits_url: NotRequired[str]
    git_refs_url: NotRequired[str]
    git_tags_url: NotRequired[str]
    hooks_url: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    issue_comment_url: NotRequired[str]
    issue_events_url: NotRequired[str]
    issues_url: NotRequired[str]
    keys_url: NotRequired[str]
    labels_url: NotRequired[str]
    languages_url: NotRequired[str]
    merges_url: NotRequired[str]
    milestones_url: NotRequired[str]
    name: NotRequired[str]
    node_id: NotRequired[str]
    notifications_url: NotRequired[str]
    owner: NotRequired[
        WebhookDeploymentReviewRejectedPropWorkflowRunPropHeadRepositoryPropOwnerType
    ]
    private: NotRequired[bool]
    pulls_url: NotRequired[str]
    releases_url: NotRequired[str]
    stargazers_url: NotRequired[str]
    statuses_url: NotRequired[str]
    subscribers_url: NotRequired[str]
    subscription_url: NotRequired[str]
    tags_url: NotRequired[str]
    teams_url: NotRequired[str]
    trees_url: NotRequired[str]
    url: NotRequired[str]


class WebhookDeploymentReviewRejectedPropWorkflowRunPropHeadRepositoryPropOwnerType(
    TypedDict
):
    """WebhookDeploymentReviewRejectedPropWorkflowRunPropHeadRepositoryPropOwner"""

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookDeploymentReviewRejectedPropWorkflowRunPropPullRequestsItemsType(
    TypedDict
):
    """Check Run Pull Request"""

    base: WebhookDeploymentReviewRejectedPropWorkflowRunPropPullRequestsItemsPropBaseType
    head: WebhookDeploymentReviewRejectedPropWorkflowRunPropPullRequestsItemsPropHeadType
    id: int
    number: int
    url: str


class WebhookDeploymentReviewRejectedPropWorkflowRunPropPullRequestsItemsPropBaseType(
    TypedDict
):
    """WebhookDeploymentReviewRejectedPropWorkflowRunPropPullRequestsItemsPropBase"""

    ref: str
    repo: WebhookDeploymentReviewRejectedPropWorkflowRunPropPullRequestsItemsPropBasePropRepoType
    sha: str


class WebhookDeploymentReviewRejectedPropWorkflowRunPropPullRequestsItemsPropBasePropRepoType(
    TypedDict
):
    """Repo Ref"""

    id: int
    name: str
    url: str


class WebhookDeploymentReviewRejectedPropWorkflowRunPropPullRequestsItemsPropHeadType(
    TypedDict
):
    """WebhookDeploymentReviewRejectedPropWorkflowRunPropPullRequestsItemsPropHead"""

    ref: str
    repo: WebhookDeploymentReviewRejectedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepoType
    sha: str


class WebhookDeploymentReviewRejectedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepoType(
    TypedDict
):
    """Repo Ref"""

    id: int
    name: str
    url: str


class WebhookDeploymentReviewRejectedPropWorkflowRunPropReferencedWorkflowsItemsType(
    TypedDict
):
    """WebhookDeploymentReviewRejectedPropWorkflowRunPropReferencedWorkflowsItems"""

    path: str
    ref: NotRequired[str]
    sha: str


class WebhookDeploymentReviewRejectedPropWorkflowRunPropRepositoryType(TypedDict):
    """WebhookDeploymentReviewRejectedPropWorkflowRunPropRepository"""

    archive_url: NotRequired[str]
    assignees_url: NotRequired[str]
    blobs_url: NotRequired[str]
    branches_url: NotRequired[str]
    collaborators_url: NotRequired[str]
    comments_url: NotRequired[str]
    commits_url: NotRequired[str]
    compare_url: NotRequired[str]
    contents_url: NotRequired[str]
    contributors_url: NotRequired[str]
    deployments_url: NotRequired[str]
    description: NotRequired[Union[str, None]]
    downloads_url: NotRequired[str]
    events_url: NotRequired[str]
    fork: NotRequired[bool]
    forks_url: NotRequired[str]
    full_name: NotRequired[str]
    git_commits_url: NotRequired[str]
    git_refs_url: NotRequired[str]
    git_tags_url: NotRequired[str]
    hooks_url: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    issue_comment_url: NotRequired[str]
    issue_events_url: NotRequired[str]
    issues_url: NotRequired[str]
    keys_url: NotRequired[str]
    labels_url: NotRequired[str]
    languages_url: NotRequired[str]
    merges_url: NotRequired[str]
    milestones_url: NotRequired[str]
    name: NotRequired[str]
    node_id: NotRequired[str]
    notifications_url: NotRequired[str]
    owner: NotRequired[
        WebhookDeploymentReviewRejectedPropWorkflowRunPropRepositoryPropOwnerType
    ]
    private: NotRequired[bool]
    pulls_url: NotRequired[str]
    releases_url: NotRequired[str]
    stargazers_url: NotRequired[str]
    statuses_url: NotRequired[str]
    subscribers_url: NotRequired[str]
    subscription_url: NotRequired[str]
    tags_url: NotRequired[str]
    teams_url: NotRequired[str]
    trees_url: NotRequired[str]
    url: NotRequired[str]


class WebhookDeploymentReviewRejectedPropWorkflowRunPropRepositoryPropOwnerType(
    TypedDict
):
    """WebhookDeploymentReviewRejectedPropWorkflowRunPropRepositoryPropOwner"""

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookDeploymentReviewRejectedPropWorkflowRunPropTriggeringActorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookDeploymentReviewRejectedPropWorkflowRunType(TypedDict):
    """Deployment Workflow Run"""

    actor: Union[WebhookDeploymentReviewRejectedPropWorkflowRunPropActorType, None]
    artifacts_url: NotRequired[str]
    cancel_url: NotRequired[str]
    check_suite_id: int
    check_suite_node_id: str
    check_suite_url: NotRequired[str]
    conclusion: Union[
        None,
        Literal[
            "success",
            "failure",
            "neutral",
            "cancelled",
            "timed_out",
            "action_required",
            "stale",
        ],
    ]
    created_at: datetime
    event: str
    head_branch: str
    head_commit: NotRequired[
        Union[WebhookDeploymentReviewRejectedPropWorkflowRunPropHeadCommitType, None]
    ]
    head_repository: NotRequired[
        WebhookDeploymentReviewRejectedPropWorkflowRunPropHeadRepositoryType
    ]
    head_sha: str
    html_url: str
    id: int
    jobs_url: NotRequired[str]
    logs_url: NotRequired[str]
    name: str
    node_id: str
    path: str
    previous_attempt_url: NotRequired[Union[str, None]]
    pull_requests: List[
        WebhookDeploymentReviewRejectedPropWorkflowRunPropPullRequestsItemsType
    ]
    referenced_workflows: NotRequired[
        Union[
            List[
                WebhookDeploymentReviewRejectedPropWorkflowRunPropReferencedWorkflowsItemsType
            ],
            None,
        ]
    ]
    repository: NotRequired[
        WebhookDeploymentReviewRejectedPropWorkflowRunPropRepositoryType
    ]
    rerun_url: NotRequired[str]
    run_attempt: int
    run_number: int
    run_started_at: datetime
    status: Literal["requested", "in_progress", "completed", "queued", "waiting"]
    triggering_actor: Union[
        WebhookDeploymentReviewRejectedPropWorkflowRunPropTriggeringActorType, None
    ]
    updated_at: datetime
    url: str
    workflow_id: int
    workflow_url: NotRequired[str]
    display_title: str


class WebhookDeploymentReviewRequestedType(TypedDict):
    """WebhookDeploymentReviewRequested"""

    action: Literal["requested"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    environment: str
    installation: NotRequired[SimpleInstallationType]
    organization: OrganizationSimpleWebhooksType
    repository: RepositoryWebhooksType
    requestor: Union[WebhookDeploymentReviewRequestedPropRequestorType, None]
    reviewers: List[WebhookDeploymentReviewRequestedPropReviewersItemsType]
    sender: SimpleUserWebhooksType
    since: str
    workflow_job_run: WebhookDeploymentReviewRequestedPropWorkflowJobRunType
    workflow_run: Union[WebhookDeploymentReviewRequestedPropWorkflowRunType, None]


class WebhookDeploymentReviewRequestedPropRequestorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookDeploymentReviewRequestedPropReviewersItemsType(TypedDict):
    """WebhookDeploymentReviewRequestedPropReviewersItems"""

    reviewer: NotRequired[
        Union[WebhookDeploymentReviewRequestedPropReviewersItemsPropReviewerType, None]
    ]
    type: NotRequired[Literal["User", "Team"]]


class WebhookDeploymentReviewRequestedPropReviewersItemsPropReviewerType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: NotRequired[str]
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookDeploymentReviewRequestedPropWorkflowJobRunType(TypedDict):
    """WebhookDeploymentReviewRequestedPropWorkflowJobRun"""

    conclusion: None
    created_at: str
    environment: str
    html_url: str
    id: int
    name: Union[str, None]
    status: str
    updated_at: str


class WebhookDeploymentReviewRequestedPropWorkflowRunPropActorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookDeploymentReviewRequestedPropWorkflowRunPropHeadCommitType(TypedDict):
    """WebhookDeploymentReviewRequestedPropWorkflowRunPropHeadCommit"""


class WebhookDeploymentReviewRequestedPropWorkflowRunPropHeadRepositoryType(TypedDict):
    """WebhookDeploymentReviewRequestedPropWorkflowRunPropHeadRepository"""

    archive_url: NotRequired[str]
    assignees_url: NotRequired[str]
    blobs_url: NotRequired[str]
    branches_url: NotRequired[str]
    collaborators_url: NotRequired[str]
    comments_url: NotRequired[str]
    commits_url: NotRequired[str]
    compare_url: NotRequired[str]
    contents_url: NotRequired[str]
    contributors_url: NotRequired[str]
    deployments_url: NotRequired[str]
    description: NotRequired[Union[str, None]]
    downloads_url: NotRequired[str]
    events_url: NotRequired[str]
    fork: NotRequired[bool]
    forks_url: NotRequired[str]
    full_name: NotRequired[str]
    git_commits_url: NotRequired[str]
    git_refs_url: NotRequired[str]
    git_tags_url: NotRequired[str]
    hooks_url: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    issue_comment_url: NotRequired[str]
    issue_events_url: NotRequired[str]
    issues_url: NotRequired[str]
    keys_url: NotRequired[str]
    labels_url: NotRequired[str]
    languages_url: NotRequired[str]
    merges_url: NotRequired[str]
    milestones_url: NotRequired[str]
    name: NotRequired[str]
    node_id: NotRequired[str]
    notifications_url: NotRequired[str]
    owner: NotRequired[
        WebhookDeploymentReviewRequestedPropWorkflowRunPropHeadRepositoryPropOwnerType
    ]
    private: NotRequired[bool]
    pulls_url: NotRequired[str]
    releases_url: NotRequired[str]
    stargazers_url: NotRequired[str]
    statuses_url: NotRequired[str]
    subscribers_url: NotRequired[str]
    subscription_url: NotRequired[str]
    tags_url: NotRequired[str]
    teams_url: NotRequired[str]
    trees_url: NotRequired[str]
    url: NotRequired[str]


class WebhookDeploymentReviewRequestedPropWorkflowRunPropHeadRepositoryPropOwnerType(
    TypedDict
):
    """WebhookDeploymentReviewRequestedPropWorkflowRunPropHeadRepositoryPropOwner"""

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookDeploymentReviewRequestedPropWorkflowRunPropPullRequestsItemsType(
    TypedDict
):
    """Check Run Pull Request"""

    base: WebhookDeploymentReviewRequestedPropWorkflowRunPropPullRequestsItemsPropBaseType
    head: WebhookDeploymentReviewRequestedPropWorkflowRunPropPullRequestsItemsPropHeadType
    id: int
    number: int
    url: str


class WebhookDeploymentReviewRequestedPropWorkflowRunPropPullRequestsItemsPropBaseType(
    TypedDict
):
    """WebhookDeploymentReviewRequestedPropWorkflowRunPropPullRequestsItemsPropBase"""

    ref: str
    repo: WebhookDeploymentReviewRequestedPropWorkflowRunPropPullRequestsItemsPropBasePropRepoType
    sha: str


class WebhookDeploymentReviewRequestedPropWorkflowRunPropPullRequestsItemsPropBasePropRepoType(
    TypedDict
):
    """Repo Ref"""

    id: int
    name: str
    url: str


class WebhookDeploymentReviewRequestedPropWorkflowRunPropPullRequestsItemsPropHeadType(
    TypedDict
):
    """WebhookDeploymentReviewRequestedPropWorkflowRunPropPullRequestsItemsPropHead"""

    ref: str
    repo: WebhookDeploymentReviewRequestedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepoType
    sha: str


class WebhookDeploymentReviewRequestedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepoType(
    TypedDict
):
    """Repo Ref"""

    id: int
    name: str
    url: str


class WebhookDeploymentReviewRequestedPropWorkflowRunPropReferencedWorkflowsItemsType(
    TypedDict
):
    """WebhookDeploymentReviewRequestedPropWorkflowRunPropReferencedWorkflowsItems"""

    path: str
    ref: NotRequired[str]
    sha: str


class WebhookDeploymentReviewRequestedPropWorkflowRunPropRepositoryType(TypedDict):
    """WebhookDeploymentReviewRequestedPropWorkflowRunPropRepository"""

    archive_url: NotRequired[str]
    assignees_url: NotRequired[str]
    blobs_url: NotRequired[str]
    branches_url: NotRequired[str]
    collaborators_url: NotRequired[str]
    comments_url: NotRequired[str]
    commits_url: NotRequired[str]
    compare_url: NotRequired[str]
    contents_url: NotRequired[str]
    contributors_url: NotRequired[str]
    deployments_url: NotRequired[str]
    description: NotRequired[Union[str, None]]
    downloads_url: NotRequired[str]
    events_url: NotRequired[str]
    fork: NotRequired[bool]
    forks_url: NotRequired[str]
    full_name: NotRequired[str]
    git_commits_url: NotRequired[str]
    git_refs_url: NotRequired[str]
    git_tags_url: NotRequired[str]
    hooks_url: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    issue_comment_url: NotRequired[str]
    issue_events_url: NotRequired[str]
    issues_url: NotRequired[str]
    keys_url: NotRequired[str]
    labels_url: NotRequired[str]
    languages_url: NotRequired[str]
    merges_url: NotRequired[str]
    milestones_url: NotRequired[str]
    name: NotRequired[str]
    node_id: NotRequired[str]
    notifications_url: NotRequired[str]
    owner: NotRequired[
        WebhookDeploymentReviewRequestedPropWorkflowRunPropRepositoryPropOwnerType
    ]
    private: NotRequired[bool]
    pulls_url: NotRequired[str]
    releases_url: NotRequired[str]
    stargazers_url: NotRequired[str]
    statuses_url: NotRequired[str]
    subscribers_url: NotRequired[str]
    subscription_url: NotRequired[str]
    tags_url: NotRequired[str]
    teams_url: NotRequired[str]
    trees_url: NotRequired[str]
    url: NotRequired[str]


class WebhookDeploymentReviewRequestedPropWorkflowRunPropRepositoryPropOwnerType(
    TypedDict
):
    """WebhookDeploymentReviewRequestedPropWorkflowRunPropRepositoryPropOwner"""

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookDeploymentReviewRequestedPropWorkflowRunPropTriggeringActorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookDeploymentReviewRequestedPropWorkflowRunType(TypedDict):
    """Deployment Workflow Run"""

    actor: Union[WebhookDeploymentReviewRequestedPropWorkflowRunPropActorType, None]
    artifacts_url: NotRequired[str]
    cancel_url: NotRequired[str]
    check_suite_id: int
    check_suite_node_id: str
    check_suite_url: NotRequired[str]
    conclusion: Union[
        None,
        Literal[
            "success",
            "failure",
            "neutral",
            "cancelled",
            "timed_out",
            "action_required",
            "stale",
        ],
    ]
    created_at: datetime
    event: str
    head_branch: str
    head_commit: NotRequired[
        Union[WebhookDeploymentReviewRequestedPropWorkflowRunPropHeadCommitType, None]
    ]
    head_repository: NotRequired[
        WebhookDeploymentReviewRequestedPropWorkflowRunPropHeadRepositoryType
    ]
    head_sha: str
    html_url: str
    id: int
    jobs_url: NotRequired[str]
    logs_url: NotRequired[str]
    name: str
    node_id: str
    path: str
    previous_attempt_url: NotRequired[Union[str, None]]
    pull_requests: List[
        WebhookDeploymentReviewRequestedPropWorkflowRunPropPullRequestsItemsType
    ]
    referenced_workflows: NotRequired[
        Union[
            List[
                WebhookDeploymentReviewRequestedPropWorkflowRunPropReferencedWorkflowsItemsType
            ],
            None,
        ]
    ]
    repository: NotRequired[
        WebhookDeploymentReviewRequestedPropWorkflowRunPropRepositoryType
    ]
    rerun_url: NotRequired[str]
    run_attempt: int
    run_number: int
    run_started_at: datetime
    status: Literal[
        "requested", "in_progress", "completed", "queued", "waiting", "pending"
    ]
    triggering_actor: Union[
        WebhookDeploymentReviewRequestedPropWorkflowRunPropTriggeringActorType, None
    ]
    updated_at: datetime
    url: str
    workflow_id: int
    workflow_url: NotRequired[str]
    display_title: str


class WebhookDeploymentStatusCreatedType(TypedDict):
    """deployment_status created event"""

    action: Literal["created"]
    check_run: NotRequired[Union[WebhookDeploymentStatusCreatedPropCheckRunType, None]]
    deployment: WebhookDeploymentStatusCreatedPropDeploymentType
    deployment_status: WebhookDeploymentStatusCreatedPropDeploymentStatusType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType
    workflow: NotRequired[Union[WebhookDeploymentStatusCreatedPropWorkflowType, None]]
    workflow_run: NotRequired[
        Union[WebhookDeploymentStatusCreatedPropWorkflowRunType, None]
    ]


class WebhookDeploymentStatusCreatedPropCheckRunType(TypedDict):
    """WebhookDeploymentStatusCreatedPropCheckRun"""

    completed_at: Union[datetime, None]
    conclusion: Union[
        None,
        Literal[
            "success",
            "failure",
            "neutral",
            "cancelled",
            "timed_out",
            "action_required",
            "stale",
            "skipped",
        ],
    ]
    details_url: str
    external_id: str
    head_sha: str
    html_url: str
    id: int
    name: str
    node_id: str
    started_at: datetime
    status: Literal["queued", "in_progress", "completed", "waiting", "pending"]
    url: str


class WebhookDeploymentStatusCreatedPropDeploymentType(TypedDict):
    """Deployment

    The [deployment](https://docs.github.com/rest/deployments/deployments#list-
    deployments).
    """

    created_at: str
    creator: Union[WebhookDeploymentStatusCreatedPropDeploymentPropCreatorType, None]
    description: Union[str, None]
    environment: str
    id: int
    node_id: str
    original_environment: str
    payload: Union[
        str, WebhookDeploymentStatusCreatedPropDeploymentPropPayloadOneof1Type, None
    ]
    performed_via_github_app: NotRequired[
        Union[
            WebhookDeploymentStatusCreatedPropDeploymentPropPerformedViaGithubAppType,
            None,
        ]
    ]
    production_environment: NotRequired[bool]
    ref: str
    repository_url: str
    sha: str
    statuses_url: str
    task: str
    transient_environment: NotRequired[bool]
    updated_at: str
    url: str


class WebhookDeploymentStatusCreatedPropDeploymentPropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookDeploymentStatusCreatedPropDeploymentPropPayloadOneof1Type(TypedDict):
    """WebhookDeploymentStatusCreatedPropDeploymentPropPayloadOneof1"""


class WebhookDeploymentStatusCreatedPropDeploymentPropPerformedViaGithubAppPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookDeploymentStatusCreatedPropDeploymentPropPerformedViaGithubAppPropPermissionsType(
    TypedDict
):
    """WebhookDeploymentStatusCreatedPropDeploymentPropPerformedViaGithubAppPropPermiss
    ions

    The set of permissions for the GitHub app
    """

    actions: NotRequired[Literal["read", "write"]]
    administration: NotRequired[Literal["read", "write"]]
    checks: NotRequired[Literal["read", "write"]]
    content_references: NotRequired[Literal["read", "write"]]
    contents: NotRequired[Literal["read", "write"]]
    deployments: NotRequired[Literal["read", "write"]]
    discussions: NotRequired[Literal["read", "write"]]
    emails: NotRequired[Literal["read", "write"]]
    environments: NotRequired[Literal["read", "write"]]
    issues: NotRequired[Literal["read", "write"]]
    keys: NotRequired[Literal["read", "write"]]
    members: NotRequired[Literal["read", "write"]]
    metadata: NotRequired[Literal["read", "write"]]
    organization_administration: NotRequired[Literal["read", "write"]]
    organization_hooks: NotRequired[Literal["read", "write"]]
    organization_packages: NotRequired[Literal["read", "write"]]
    organization_plan: NotRequired[Literal["read", "write"]]
    organization_projects: NotRequired[Literal["read", "write"]]
    organization_secrets: NotRequired[Literal["read", "write"]]
    organization_self_hosted_runners: NotRequired[Literal["read", "write"]]
    organization_user_blocking: NotRequired[Literal["read", "write"]]
    packages: NotRequired[Literal["read", "write"]]
    pages: NotRequired[Literal["read", "write"]]
    pull_requests: NotRequired[Literal["read", "write"]]
    repository_hooks: NotRequired[Literal["read", "write"]]
    repository_projects: NotRequired[Literal["read", "write"]]
    secret_scanning_alerts: NotRequired[Literal["read", "write"]]
    secrets: NotRequired[Literal["read", "write"]]
    security_events: NotRequired[Literal["read", "write"]]
    security_scanning_alert: NotRequired[Literal["read", "write"]]
    single_file: NotRequired[Literal["read", "write"]]
    statuses: NotRequired[Literal["read", "write"]]
    team_discussions: NotRequired[Literal["read", "write"]]
    vulnerability_alerts: NotRequired[Literal["read", "write"]]
    workflows: NotRequired[Literal["read", "write"]]


class WebhookDeploymentStatusCreatedPropDeploymentPropPerformedViaGithubAppType(
    TypedDict
):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None]
    description: Union[str, None]
    events: NotRequired[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "merge_queue_entry",
                "workflow_job",
                "pull_request_review_thread",
                "secret_scanning_alert_location",
                "merge_group",
            ]
        ]
    ]
    external_url: Union[str, None]
    html_url: str
    id: Union[int, None]
    name: str
    node_id: str
    owner: Union[
        WebhookDeploymentStatusCreatedPropDeploymentPropPerformedViaGithubAppPropOwnerType,
        None,
    ]
    permissions: NotRequired[
        WebhookDeploymentStatusCreatedPropDeploymentPropPerformedViaGithubAppPropPermissionsType
    ]
    slug: NotRequired[str]
    updated_at: Union[datetime, None]


class WebhookDeploymentStatusCreatedPropDeploymentStatusType(TypedDict):
    """WebhookDeploymentStatusCreatedPropDeploymentStatus

    The [deployment status](https://docs.github.com/rest/deployments/statuses#list-
    deployment-statuses).
    """

    created_at: str
    creator: Union[
        WebhookDeploymentStatusCreatedPropDeploymentStatusPropCreatorType, None
    ]
    deployment_url: str
    description: str
    environment: str
    environment_url: NotRequired[str]
    id: int
    log_url: NotRequired[str]
    node_id: str
    performed_via_github_app: NotRequired[
        Union[
            WebhookDeploymentStatusCreatedPropDeploymentStatusPropPerformedViaGithubAppType,
            None,
        ]
    ]
    repository_url: str
    state: str
    target_url: str
    updated_at: str
    url: str


class WebhookDeploymentStatusCreatedPropDeploymentStatusPropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookDeploymentStatusCreatedPropDeploymentStatusPropPerformedViaGithubAppPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookDeploymentStatusCreatedPropDeploymentStatusPropPerformedViaGithubAppPropPermissionsType(
    TypedDict
):
    """WebhookDeploymentStatusCreatedPropDeploymentStatusPropPerformedViaGithubAppPropP
    ermissions

    The set of permissions for the GitHub app
    """

    actions: NotRequired[Literal["read", "write"]]
    administration: NotRequired[Literal["read", "write"]]
    checks: NotRequired[Literal["read", "write"]]
    content_references: NotRequired[Literal["read", "write"]]
    contents: NotRequired[Literal["read", "write"]]
    deployments: NotRequired[Literal["read", "write"]]
    discussions: NotRequired[Literal["read", "write"]]
    emails: NotRequired[Literal["read", "write"]]
    environments: NotRequired[Literal["read", "write"]]
    issues: NotRequired[Literal["read", "write"]]
    keys: NotRequired[Literal["read", "write"]]
    members: NotRequired[Literal["read", "write"]]
    metadata: NotRequired[Literal["read", "write"]]
    organization_administration: NotRequired[Literal["read", "write"]]
    organization_hooks: NotRequired[Literal["read", "write"]]
    organization_packages: NotRequired[Literal["read", "write"]]
    organization_plan: NotRequired[Literal["read", "write"]]
    organization_projects: NotRequired[Literal["read", "write"]]
    organization_secrets: NotRequired[Literal["read", "write"]]
    organization_self_hosted_runners: NotRequired[Literal["read", "write"]]
    organization_user_blocking: NotRequired[Literal["read", "write"]]
    packages: NotRequired[Literal["read", "write"]]
    pages: NotRequired[Literal["read", "write"]]
    pull_requests: NotRequired[Literal["read", "write"]]
    repository_hooks: NotRequired[Literal["read", "write"]]
    repository_projects: NotRequired[Literal["read", "write"]]
    secret_scanning_alerts: NotRequired[Literal["read", "write"]]
    secrets: NotRequired[Literal["read", "write"]]
    security_events: NotRequired[Literal["read", "write"]]
    security_scanning_alert: NotRequired[Literal["read", "write"]]
    single_file: NotRequired[Literal["read", "write"]]
    statuses: NotRequired[Literal["read", "write"]]
    team_discussions: NotRequired[Literal["read", "write"]]
    vulnerability_alerts: NotRequired[Literal["read", "write"]]
    workflows: NotRequired[Literal["read", "write"]]


class WebhookDeploymentStatusCreatedPropDeploymentStatusPropPerformedViaGithubAppType(
    TypedDict
):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None]
    description: Union[str, None]
    events: NotRequired[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "pull_request_review_thread",
                "merge_queue_entry",
                "workflow_job",
                "merge_group",
                "secret_scanning_alert_location",
            ]
        ]
    ]
    external_url: Union[str, None]
    html_url: str
    id: Union[int, None]
    name: str
    node_id: str
    owner: Union[
        WebhookDeploymentStatusCreatedPropDeploymentStatusPropPerformedViaGithubAppPropOwnerType,
        None,
    ]
    permissions: NotRequired[
        WebhookDeploymentStatusCreatedPropDeploymentStatusPropPerformedViaGithubAppPropPermissionsType
    ]
    slug: NotRequired[str]
    updated_at: Union[datetime, None]


class WebhookDeploymentStatusCreatedPropWorkflowType(TypedDict):
    """Workflow"""

    badge_url: str
    created_at: datetime
    html_url: str
    id: int
    name: str
    node_id: str
    path: str
    state: str
    updated_at: datetime
    url: str


class WebhookDeploymentStatusCreatedPropWorkflowRunPropActorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookDeploymentStatusCreatedPropWorkflowRunPropHeadRepositoryType(TypedDict):
    """WebhookDeploymentStatusCreatedPropWorkflowRunPropHeadRepository"""

    archive_url: NotRequired[str]
    assignees_url: NotRequired[str]
    blobs_url: NotRequired[str]
    branches_url: NotRequired[str]
    collaborators_url: NotRequired[str]
    comments_url: NotRequired[str]
    commits_url: NotRequired[str]
    compare_url: NotRequired[str]
    contents_url: NotRequired[str]
    contributors_url: NotRequired[str]
    deployments_url: NotRequired[str]
    description: NotRequired[None]
    downloads_url: NotRequired[str]
    events_url: NotRequired[str]
    fork: NotRequired[bool]
    forks_url: NotRequired[str]
    full_name: NotRequired[str]
    git_commits_url: NotRequired[str]
    git_refs_url: NotRequired[str]
    git_tags_url: NotRequired[str]
    hooks_url: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    issue_comment_url: NotRequired[str]
    issue_events_url: NotRequired[str]
    issues_url: NotRequired[str]
    keys_url: NotRequired[str]
    labels_url: NotRequired[str]
    languages_url: NotRequired[str]
    merges_url: NotRequired[str]
    milestones_url: NotRequired[str]
    name: NotRequired[str]
    node_id: NotRequired[str]
    notifications_url: NotRequired[str]
    owner: NotRequired[
        WebhookDeploymentStatusCreatedPropWorkflowRunPropHeadRepositoryPropOwnerType
    ]
    private: NotRequired[bool]
    pulls_url: NotRequired[str]
    releases_url: NotRequired[str]
    stargazers_url: NotRequired[str]
    statuses_url: NotRequired[str]
    subscribers_url: NotRequired[str]
    subscription_url: NotRequired[str]
    tags_url: NotRequired[str]
    teams_url: NotRequired[str]
    trees_url: NotRequired[str]
    url: NotRequired[str]


class WebhookDeploymentStatusCreatedPropWorkflowRunPropHeadRepositoryPropOwnerType(
    TypedDict
):
    """WebhookDeploymentStatusCreatedPropWorkflowRunPropHeadRepositoryPropOwner"""

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookDeploymentStatusCreatedPropWorkflowRunPropPullRequestsItemsType(TypedDict):
    """Check Run Pull Request"""

    base: WebhookDeploymentStatusCreatedPropWorkflowRunPropPullRequestsItemsPropBaseType
    head: WebhookDeploymentStatusCreatedPropWorkflowRunPropPullRequestsItemsPropHeadType
    id: int
    number: int
    url: str


class WebhookDeploymentStatusCreatedPropWorkflowRunPropPullRequestsItemsPropBaseType(
    TypedDict
):
    """WebhookDeploymentStatusCreatedPropWorkflowRunPropPullRequestsItemsPropBase"""

    ref: str
    repo: WebhookDeploymentStatusCreatedPropWorkflowRunPropPullRequestsItemsPropBasePropRepoType
    sha: str


class WebhookDeploymentStatusCreatedPropWorkflowRunPropPullRequestsItemsPropBasePropRepoType(
    TypedDict
):
    """Repo Ref"""

    id: int
    name: str
    url: str


class WebhookDeploymentStatusCreatedPropWorkflowRunPropPullRequestsItemsPropHeadType(
    TypedDict
):
    """WebhookDeploymentStatusCreatedPropWorkflowRunPropPullRequestsItemsPropHead"""

    ref: str
    repo: WebhookDeploymentStatusCreatedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepoType
    sha: str


class WebhookDeploymentStatusCreatedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepoType(
    TypedDict
):
    """Repo Ref"""

    id: int
    name: str
    url: str


class WebhookDeploymentStatusCreatedPropWorkflowRunPropReferencedWorkflowsItemsType(
    TypedDict
):
    """WebhookDeploymentStatusCreatedPropWorkflowRunPropReferencedWorkflowsItems"""

    path: str
    ref: NotRequired[str]
    sha: str


class WebhookDeploymentStatusCreatedPropWorkflowRunPropRepositoryType(TypedDict):
    """WebhookDeploymentStatusCreatedPropWorkflowRunPropRepository"""

    archive_url: NotRequired[str]
    assignees_url: NotRequired[str]
    blobs_url: NotRequired[str]
    branches_url: NotRequired[str]
    collaborators_url: NotRequired[str]
    comments_url: NotRequired[str]
    commits_url: NotRequired[str]
    compare_url: NotRequired[str]
    contents_url: NotRequired[str]
    contributors_url: NotRequired[str]
    deployments_url: NotRequired[str]
    description: NotRequired[None]
    downloads_url: NotRequired[str]
    events_url: NotRequired[str]
    fork: NotRequired[bool]
    forks_url: NotRequired[str]
    full_name: NotRequired[str]
    git_commits_url: NotRequired[str]
    git_refs_url: NotRequired[str]
    git_tags_url: NotRequired[str]
    hooks_url: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    issue_comment_url: NotRequired[str]
    issue_events_url: NotRequired[str]
    issues_url: NotRequired[str]
    keys_url: NotRequired[str]
    labels_url: NotRequired[str]
    languages_url: NotRequired[str]
    merges_url: NotRequired[str]
    milestones_url: NotRequired[str]
    name: NotRequired[str]
    node_id: NotRequired[str]
    notifications_url: NotRequired[str]
    owner: NotRequired[
        WebhookDeploymentStatusCreatedPropWorkflowRunPropRepositoryPropOwnerType
    ]
    private: NotRequired[bool]
    pulls_url: NotRequired[str]
    releases_url: NotRequired[str]
    stargazers_url: NotRequired[str]
    statuses_url: NotRequired[str]
    subscribers_url: NotRequired[str]
    subscription_url: NotRequired[str]
    tags_url: NotRequired[str]
    teams_url: NotRequired[str]
    trees_url: NotRequired[str]
    url: NotRequired[str]


class WebhookDeploymentStatusCreatedPropWorkflowRunPropRepositoryPropOwnerType(
    TypedDict
):
    """WebhookDeploymentStatusCreatedPropWorkflowRunPropRepositoryPropOwner"""

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookDeploymentStatusCreatedPropWorkflowRunPropTriggeringActorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookDeploymentStatusCreatedPropWorkflowRunType(TypedDict):
    """Deployment Workflow Run"""

    actor: Union[WebhookDeploymentStatusCreatedPropWorkflowRunPropActorType, None]
    artifacts_url: NotRequired[str]
    cancel_url: NotRequired[str]
    check_suite_id: int
    check_suite_node_id: str
    check_suite_url: NotRequired[str]
    conclusion: Union[
        None,
        Literal[
            "success",
            "failure",
            "neutral",
            "cancelled",
            "timed_out",
            "action_required",
            "stale",
            "startup_failure",
        ],
    ]
    created_at: datetime
    display_title: str
    event: str
    head_branch: str
    head_commit: NotRequired[None]
    head_repository: NotRequired[
        WebhookDeploymentStatusCreatedPropWorkflowRunPropHeadRepositoryType
    ]
    head_sha: str
    html_url: str
    id: int
    jobs_url: NotRequired[str]
    logs_url: NotRequired[str]
    name: str
    node_id: str
    path: str
    previous_attempt_url: NotRequired[None]
    pull_requests: List[
        WebhookDeploymentStatusCreatedPropWorkflowRunPropPullRequestsItemsType
    ]
    referenced_workflows: NotRequired[
        Union[
            List[
                WebhookDeploymentStatusCreatedPropWorkflowRunPropReferencedWorkflowsItemsType
            ],
            None,
        ]
    ]
    repository: NotRequired[
        WebhookDeploymentStatusCreatedPropWorkflowRunPropRepositoryType
    ]
    rerun_url: NotRequired[str]
    run_attempt: int
    run_number: int
    run_started_at: datetime
    status: Literal[
        "requested", "in_progress", "completed", "queued", "waiting", "pending"
    ]
    triggering_actor: Union[
        WebhookDeploymentStatusCreatedPropWorkflowRunPropTriggeringActorType, None
    ]
    updated_at: datetime
    url: str
    workflow_id: int
    workflow_url: NotRequired[str]


class WebhookDiscussionAnsweredType(TypedDict):
    """discussion answered event"""

    action: Literal["answered"]
    answer: WebhookDiscussionAnsweredPropAnswerType
    discussion: DiscussionType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookDiscussionAnsweredPropAnswerType(TypedDict):
    """WebhookDiscussionAnsweredPropAnswer"""

    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: str
    child_comment_count: int
    created_at: datetime
    discussion_id: int
    html_url: str
    id: int
    node_id: str
    parent_id: None
    reactions: NotRequired[WebhookDiscussionAnsweredPropAnswerPropReactionsType]
    repository_url: str
    updated_at: datetime
    user: Union[WebhookDiscussionAnsweredPropAnswerPropUserType, None]


class WebhookDiscussionAnsweredPropAnswerPropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookDiscussionAnsweredPropAnswerPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookDiscussionCategoryChangedType(TypedDict):
    """discussion category changed event"""

    action: Literal["category_changed"]
    changes: WebhookDiscussionCategoryChangedPropChangesType
    discussion: DiscussionType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookDiscussionCategoryChangedPropChangesType(TypedDict):
    """WebhookDiscussionCategoryChangedPropChanges"""

    category: WebhookDiscussionCategoryChangedPropChangesPropCategoryType


class WebhookDiscussionCategoryChangedPropChangesPropCategoryType(TypedDict):
    """WebhookDiscussionCategoryChangedPropChangesPropCategory"""

    from_: WebhookDiscussionCategoryChangedPropChangesPropCategoryPropFromType


class WebhookDiscussionCategoryChangedPropChangesPropCategoryPropFromType(TypedDict):
    """WebhookDiscussionCategoryChangedPropChangesPropCategoryPropFrom"""

    created_at: datetime
    description: str
    emoji: str
    id: int
    is_answerable: bool
    name: str
    node_id: NotRequired[str]
    repository_id: int
    slug: str
    updated_at: str


class WebhookDiscussionClosedType(TypedDict):
    """discussion closed event"""

    action: Literal["closed"]
    discussion: DiscussionType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookDiscussionCommentCreatedType(TypedDict):
    """discussion_comment created event"""

    action: Literal["created"]
    comment: WebhookDiscussionCommentCreatedPropCommentType
    discussion: DiscussionType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookDiscussionCommentCreatedPropCommentType(TypedDict):
    """WebhookDiscussionCommentCreatedPropComment"""

    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: str
    child_comment_count: int
    created_at: str
    discussion_id: int
    html_url: str
    id: int
    node_id: str
    parent_id: Union[int, None]
    reactions: WebhookDiscussionCommentCreatedPropCommentPropReactionsType
    repository_url: str
    updated_at: str
    user: Union[WebhookDiscussionCommentCreatedPropCommentPropUserType, None]


class WebhookDiscussionCommentCreatedPropCommentPropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookDiscussionCommentCreatedPropCommentPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookDiscussionCommentDeletedType(TypedDict):
    """discussion_comment deleted event"""

    action: Literal["deleted"]
    comment: WebhookDiscussionCommentDeletedPropCommentType
    discussion: DiscussionType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookDiscussionCommentDeletedPropCommentType(TypedDict):
    """WebhookDiscussionCommentDeletedPropComment"""

    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: str
    child_comment_count: int
    created_at: str
    discussion_id: int
    html_url: str
    id: int
    node_id: str
    parent_id: Union[int, None]
    reactions: WebhookDiscussionCommentDeletedPropCommentPropReactionsType
    repository_url: str
    updated_at: str
    user: Union[WebhookDiscussionCommentDeletedPropCommentPropUserType, None]


class WebhookDiscussionCommentDeletedPropCommentPropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookDiscussionCommentDeletedPropCommentPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookDiscussionCommentEditedType(TypedDict):
    """discussion_comment edited event"""

    action: Literal["edited"]
    changes: WebhookDiscussionCommentEditedPropChangesType
    comment: WebhookDiscussionCommentEditedPropCommentType
    discussion: DiscussionType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookDiscussionCommentEditedPropChangesType(TypedDict):
    """WebhookDiscussionCommentEditedPropChanges"""

    body: WebhookDiscussionCommentEditedPropChangesPropBodyType


class WebhookDiscussionCommentEditedPropChangesPropBodyType(TypedDict):
    """WebhookDiscussionCommentEditedPropChangesPropBody"""

    from_: str


class WebhookDiscussionCommentEditedPropCommentType(TypedDict):
    """WebhookDiscussionCommentEditedPropComment"""

    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: str
    child_comment_count: int
    created_at: str
    discussion_id: int
    html_url: str
    id: int
    node_id: str
    parent_id: Union[int, None]
    reactions: WebhookDiscussionCommentEditedPropCommentPropReactionsType
    repository_url: str
    updated_at: str
    user: Union[WebhookDiscussionCommentEditedPropCommentPropUserType, None]


class WebhookDiscussionCommentEditedPropCommentPropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookDiscussionCommentEditedPropCommentPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookDiscussionCreatedType(TypedDict):
    """discussion created event"""

    action: Literal["created"]
    discussion: WebhookDiscussionCreatedPropDiscussionType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookDiscussionCreatedPropDiscussionType(TypedDict):
    """WebhookDiscussionCreatedPropDiscussion"""

    active_lock_reason: Union[None, None]
    answer_chosen_at: Union[None, None]
    answer_chosen_by: Union[None, None]
    answer_html_url: Union[Union[str, None], None]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: Union[Union[str, None], None]
    category: WebhookDiscussionCreatedPropDiscussionMergedCategoryType
    comments: int
    created_at: datetime
    html_url: str
    id: int
    locked: Literal[False]
    node_id: str
    number: int
    reactions: NotRequired[WebhookDiscussionCreatedPropDiscussionMergedReactionsType]
    repository_url: str
    state: Literal["open", "converting", "transferring"]
    timeline_url: NotRequired[str]
    title: str
    updated_at: datetime
    user: WebhookDiscussionCreatedPropDiscussionMergedUserType


class WebhookDiscussionCreatedPropDiscussionAllof0Type(TypedDict):
    """Discussion"""

    active_lock_reason: Union[str, None]
    answer_chosen_at: Union[str, None]
    answer_chosen_by: Union[
        WebhookDiscussionCreatedPropDiscussionAllof0PropAnswerChosenByType, None
    ]
    answer_html_url: Union[str, None]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: Union[str, None]
    category: WebhookDiscussionCreatedPropDiscussionAllof0PropCategoryType
    comments: int
    created_at: datetime
    html_url: str
    id: int
    locked: bool
    node_id: str
    number: int
    reactions: NotRequired[
        WebhookDiscussionCreatedPropDiscussionAllof0PropReactionsType
    ]
    repository_url: str
    state: Literal["open", "locked", "converting", "transferring"]
    timeline_url: NotRequired[str]
    title: str
    updated_at: datetime
    user: Union[WebhookDiscussionCreatedPropDiscussionAllof0PropUserType, None]


class WebhookDiscussionCreatedPropDiscussionAllof0PropAnswerChosenByType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookDiscussionCreatedPropDiscussionAllof0PropCategoryType(TypedDict):
    """WebhookDiscussionCreatedPropDiscussionAllof0PropCategory"""

    created_at: datetime
    description: str
    emoji: str
    id: int
    is_answerable: bool
    name: str
    node_id: NotRequired[str]
    repository_id: int
    slug: str
    updated_at: str


class WebhookDiscussionCreatedPropDiscussionAllof0PropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookDiscussionCreatedPropDiscussionAllof0PropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookDiscussionCreatedPropDiscussionAllof1Type(TypedDict):
    """WebhookDiscussionCreatedPropDiscussionAllof1"""

    active_lock_reason: NotRequired[None]
    answer_chosen_at: None
    answer_chosen_by: None
    answer_html_url: Union[str, None]
    author_association: NotRequired[str]
    body: NotRequired[Union[str, None]]
    category: NotRequired[WebhookDiscussionCreatedPropDiscussionAllof1PropCategoryType]
    comments: NotRequired[int]
    created_at: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    locked: Literal[False]
    node_id: NotRequired[str]
    number: NotRequired[int]
    reactions: NotRequired[
        WebhookDiscussionCreatedPropDiscussionAllof1PropReactionsType
    ]
    repository_url: NotRequired[str]
    state: Literal["open", "converting", "transferring"]
    timeline_url: NotRequired[str]
    title: NotRequired[str]
    updated_at: NotRequired[str]
    user: NotRequired[WebhookDiscussionCreatedPropDiscussionAllof1PropUserType]


class WebhookDiscussionCreatedPropDiscussionAllof1PropCategoryType(TypedDict):
    """WebhookDiscussionCreatedPropDiscussionAllof1PropCategory"""

    created_at: NotRequired[str]
    description: NotRequired[str]
    emoji: NotRequired[str]
    id: NotRequired[int]
    is_answerable: NotRequired[bool]
    name: NotRequired[str]
    node_id: NotRequired[str]
    repository_id: NotRequired[int]
    slug: NotRequired[str]
    updated_at: NotRequired[str]


class WebhookDiscussionCreatedPropDiscussionAllof1PropReactionsType(TypedDict):
    """WebhookDiscussionCreatedPropDiscussionAllof1PropReactions"""

    plus_one: NotRequired[int]
    minus_one: NotRequired[int]
    confused: NotRequired[int]
    eyes: NotRequired[int]
    heart: NotRequired[int]
    hooray: NotRequired[int]
    laugh: NotRequired[int]
    rocket: NotRequired[int]
    total_count: NotRequired[int]
    url: NotRequired[str]


class WebhookDiscussionCreatedPropDiscussionAllof1PropUserType(TypedDict):
    """WebhookDiscussionCreatedPropDiscussionAllof1PropUser"""

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookDiscussionCreatedPropDiscussionMergedCategoryType(TypedDict):
    """WebhookDiscussionCreatedPropDiscussionMergedCategory"""

    created_at: datetime
    description: str
    emoji: str
    id: int
    is_answerable: bool
    name: str
    node_id: NotRequired[str]
    repository_id: int
    slug: str
    updated_at: str


class WebhookDiscussionCreatedPropDiscussionMergedReactionsType(TypedDict):
    """WebhookDiscussionCreatedPropDiscussionMergedReactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookDiscussionCreatedPropDiscussionMergedUserType(TypedDict):
    """WebhookDiscussionCreatedPropDiscussionMergedUser"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookDiscussionDeletedType(TypedDict):
    """discussion deleted event"""

    action: Literal["deleted"]
    discussion: DiscussionType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookDiscussionEditedType(TypedDict):
    """discussion edited event"""

    action: Literal["edited"]
    changes: NotRequired[WebhookDiscussionEditedPropChangesType]
    discussion: DiscussionType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookDiscussionEditedPropChangesType(TypedDict):
    """WebhookDiscussionEditedPropChanges"""

    body: NotRequired[WebhookDiscussionEditedPropChangesPropBodyType]
    title: NotRequired[WebhookDiscussionEditedPropChangesPropTitleType]


class WebhookDiscussionEditedPropChangesPropBodyType(TypedDict):
    """WebhookDiscussionEditedPropChangesPropBody"""

    from_: str


class WebhookDiscussionEditedPropChangesPropTitleType(TypedDict):
    """WebhookDiscussionEditedPropChangesPropTitle"""

    from_: str


class WebhookDiscussionLabeledType(TypedDict):
    """discussion labeled event"""

    action: Literal["labeled"]
    discussion: DiscussionType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    label: WebhookDiscussionLabeledPropLabelType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookDiscussionLabeledPropLabelType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookDiscussionLockedType(TypedDict):
    """discussion locked event"""

    action: Literal["locked"]
    discussion: DiscussionType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookDiscussionPinnedType(TypedDict):
    """discussion pinned event"""

    action: Literal["pinned"]
    discussion: DiscussionType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookDiscussionReopenedType(TypedDict):
    """discussion reopened event"""

    action: Literal["reopened"]
    discussion: DiscussionType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookDiscussionTransferredType(TypedDict):
    """discussion transferred event"""

    action: Literal["transferred"]
    changes: WebhookDiscussionTransferredPropChangesType
    discussion: DiscussionType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookDiscussionTransferredPropChangesType(TypedDict):
    """WebhookDiscussionTransferredPropChanges"""

    new_discussion: DiscussionType
    new_repository: RepositoryWebhooksType


class WebhookDiscussionUnansweredType(TypedDict):
    """discussion unanswered event"""

    action: Literal["unanswered"]
    discussion: DiscussionType
    old_answer: WebhookDiscussionUnansweredPropOldAnswerType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: NotRequired[SimpleUserWebhooksType]


class WebhookDiscussionUnansweredPropOldAnswerType(TypedDict):
    """WebhookDiscussionUnansweredPropOldAnswer"""

    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: str
    child_comment_count: int
    created_at: datetime
    discussion_id: int
    html_url: str
    id: int
    node_id: str
    parent_id: None
    reactions: NotRequired[WebhookDiscussionUnansweredPropOldAnswerPropReactionsType]
    repository_url: str
    updated_at: datetime
    user: Union[WebhookDiscussionUnansweredPropOldAnswerPropUserType, None]


class WebhookDiscussionUnansweredPropOldAnswerPropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookDiscussionUnansweredPropOldAnswerPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookDiscussionUnlabeledType(TypedDict):
    """discussion unlabeled event"""

    action: Literal["unlabeled"]
    discussion: DiscussionType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    label: WebhookDiscussionUnlabeledPropLabelType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookDiscussionUnlabeledPropLabelType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookDiscussionUnlockedType(TypedDict):
    """discussion unlocked event"""

    action: Literal["unlocked"]
    discussion: DiscussionType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookDiscussionUnpinnedType(TypedDict):
    """discussion unpinned event"""

    action: Literal["unpinned"]
    discussion: DiscussionType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookForkType(TypedDict):
    """fork event

    A user forks a repository.
    """

    enterprise: NotRequired[EnterpriseWebhooksType]
    forkee: WebhookForkPropForkeeType
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookForkPropForkeeType(TypedDict):
    """WebhookForkPropForkee

    The created [`repository`](https://docs.github.com/rest/repos/repos#get-a-
    repository) resource.
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: datetime
    custom_properties: NotRequired[WebhookForkPropForkeeAllof0PropCustomPropertiesType]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[Union[str, None], None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: Literal[True]
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    homepage: Union[Union[str, None], None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[None, None]
    languages_url: str
    license_: Union[WebhookForkPropForkeeMergedLicenseType, None]
    master_branch: NotRequired[str]
    merges_url: str
    milestones_url: str
    mirror_url: Union[None, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: WebhookForkPropForkeeMergedOwnerType
    permissions: NotRequired[WebhookForkPropForkeeAllof0PropPermissionsType]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: datetime
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookForkPropForkeeAllof0Type(TypedDict):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    custom_properties: NotRequired[WebhookForkPropForkeeAllof0PropCustomPropertiesType]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[WebhookForkPropForkeeAllof0PropLicenseType, None]
    master_branch: NotRequired[str]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[WebhookForkPropForkeeAllof0PropOwnerType, None]
    permissions: NotRequired[WebhookForkPropForkeeAllof0PropPermissionsType]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookForkPropForkeeAllof0PropCustomPropertiesType(TypedDict):
    """WebhookForkPropForkeeAllof0PropCustomProperties

    The custom properties that were defined for the repository. The keys are the
    custom property names, and the values are the corresponding custom property
    values.
    """


class WebhookForkPropForkeeAllof0PropLicenseType(TypedDict):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookForkPropForkeeAllof0PropOwnerType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookForkPropForkeeAllof0PropPermissionsType(TypedDict):
    """WebhookForkPropForkeeAllof0PropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookForkPropForkeeAllof1Type(TypedDict):
    """WebhookForkPropForkeeAllof1"""

    allow_forking: NotRequired[bool]
    archive_url: NotRequired[str]
    archived: NotRequired[bool]
    assignees_url: NotRequired[str]
    blobs_url: NotRequired[str]
    branches_url: NotRequired[str]
    clone_url: NotRequired[str]
    collaborators_url: NotRequired[str]
    comments_url: NotRequired[str]
    commits_url: NotRequired[str]
    compare_url: NotRequired[str]
    contents_url: NotRequired[str]
    contributors_url: NotRequired[str]
    created_at: NotRequired[str]
    default_branch: NotRequired[str]
    deployments_url: NotRequired[str]
    description: NotRequired[Union[str, None]]
    disabled: NotRequired[bool]
    downloads_url: NotRequired[str]
    events_url: NotRequired[str]
    fork: NotRequired[Literal[True]]
    forks: NotRequired[int]
    forks_count: NotRequired[int]
    forks_url: NotRequired[str]
    full_name: NotRequired[str]
    git_commits_url: NotRequired[str]
    git_refs_url: NotRequired[str]
    git_tags_url: NotRequired[str]
    git_url: NotRequired[str]
    has_downloads: NotRequired[bool]
    has_issues: NotRequired[bool]
    has_pages: NotRequired[bool]
    has_projects: NotRequired[bool]
    has_wiki: NotRequired[bool]
    homepage: NotRequired[Union[str, None]]
    hooks_url: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    is_template: NotRequired[bool]
    issue_comment_url: NotRequired[str]
    issue_events_url: NotRequired[str]
    issues_url: NotRequired[str]
    keys_url: NotRequired[str]
    labels_url: NotRequired[str]
    language: NotRequired[None]
    languages_url: NotRequired[str]
    license_: NotRequired[Union[WebhookForkPropForkeeAllof1PropLicenseType, None]]
    merges_url: NotRequired[str]
    milestones_url: NotRequired[str]
    mirror_url: NotRequired[None]
    name: NotRequired[str]
    node_id: NotRequired[str]
    notifications_url: NotRequired[str]
    open_issues: NotRequired[int]
    open_issues_count: NotRequired[int]
    owner: NotRequired[WebhookForkPropForkeeAllof1PropOwnerType]
    private: NotRequired[bool]
    public: NotRequired[bool]
    pulls_url: NotRequired[str]
    pushed_at: NotRequired[str]
    releases_url: NotRequired[str]
    size: NotRequired[int]
    ssh_url: NotRequired[str]
    stargazers_count: NotRequired[int]
    stargazers_url: NotRequired[str]
    statuses_url: NotRequired[str]
    subscribers_url: NotRequired[str]
    subscription_url: NotRequired[str]
    svn_url: NotRequired[str]
    tags_url: NotRequired[str]
    teams_url: NotRequired[str]
    topics: NotRequired[List[Union[str, None]]]
    trees_url: NotRequired[str]
    updated_at: NotRequired[str]
    url: NotRequired[str]
    visibility: NotRequired[str]
    watchers: NotRequired[int]
    watchers_count: NotRequired[int]


class WebhookForkPropForkeeAllof1PropLicenseType(TypedDict):
    """WebhookForkPropForkeeAllof1PropLicense"""


class WebhookForkPropForkeeAllof1PropOwnerType(TypedDict):
    """WebhookForkPropForkeeAllof1PropOwner"""

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookForkPropForkeeMergedLicenseType(TypedDict):
    """WebhookForkPropForkeeMergedLicense"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookForkPropForkeeMergedOwnerType(TypedDict):
    """WebhookForkPropForkeeMergedOwner"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookGithubAppAuthorizationRevokedType(TypedDict):
    """github_app_authorization revoked event"""

    action: Literal["revoked"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: NotRequired[RepositoryWebhooksType]
    sender: SimpleUserWebhooksType


class WebhookGollumType(TypedDict):
    """gollum event"""

    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    pages: List[WebhookGollumPropPagesItemsType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookGollumPropPagesItemsType(TypedDict):
    """WebhookGollumPropPagesItems"""

    action: Literal["created", "edited"]
    html_url: str
    page_name: str
    sha: str
    summary: Union[str, None]
    title: str


class WebhookInstallationCreatedType(TypedDict):
    """installation created event"""

    action: Literal["created"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: InstallationType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repositories: NotRequired[List[WebhookInstallationCreatedPropRepositoriesItemsType]]
    repository: NotRequired[RepositoryWebhooksType]
    requester: NotRequired[Union[WebhookInstallationCreatedPropRequesterType, None]]
    sender: SimpleUserWebhooksType


class WebhookInstallationCreatedPropRepositoriesItemsType(TypedDict):
    """WebhookInstallationCreatedPropRepositoriesItems"""

    full_name: str
    id: int
    name: str
    node_id: str
    private: bool


class WebhookInstallationCreatedPropRequesterType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookInstallationDeletedType(TypedDict):
    """installation deleted event"""

    action: Literal["deleted"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: InstallationType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repositories: NotRequired[List[WebhookInstallationDeletedPropRepositoriesItemsType]]
    repository: NotRequired[RepositoryWebhooksType]
    requester: NotRequired[None]
    sender: SimpleUserWebhooksType


class WebhookInstallationDeletedPropRepositoriesItemsType(TypedDict):
    """WebhookInstallationDeletedPropRepositoriesItems"""

    full_name: str
    id: int
    name: str
    node_id: str
    private: bool


class WebhookInstallationNewPermissionsAcceptedType(TypedDict):
    """installation new_permissions_accepted event"""

    action: Literal["new_permissions_accepted"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: InstallationType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repositories: NotRequired[
        List[WebhookInstallationNewPermissionsAcceptedPropRepositoriesItemsType]
    ]
    repository: NotRequired[RepositoryWebhooksType]
    requester: NotRequired[None]
    sender: SimpleUserWebhooksType


class WebhookInstallationNewPermissionsAcceptedPropRepositoriesItemsType(TypedDict):
    """WebhookInstallationNewPermissionsAcceptedPropRepositoriesItems"""

    full_name: str
    id: int
    name: str
    node_id: str
    private: bool


class WebhookInstallationRepositoriesAddedType(TypedDict):
    """installation_repositories added event"""

    action: Literal["added"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: InstallationType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repositories_added: List[
        WebhookInstallationRepositoriesAddedPropRepositoriesAddedItemsType
    ]
    repositories_removed: List[
        WebhookInstallationRepositoriesAddedPropRepositoriesRemovedItemsType
    ]
    repository: NotRequired[RepositoryWebhooksType]
    repository_selection: Literal["all", "selected"]
    requester: Union[WebhookInstallationRepositoriesAddedPropRequesterType, None]
    sender: SimpleUserWebhooksType


class WebhookInstallationRepositoriesAddedPropRepositoriesAddedItemsType(TypedDict):
    """WebhookInstallationRepositoriesAddedPropRepositoriesAddedItems"""

    full_name: str
    id: int
    name: str
    node_id: str
    private: bool


class WebhookInstallationRepositoriesAddedPropRepositoriesRemovedItemsType(TypedDict):
    """WebhookInstallationRepositoriesAddedPropRepositoriesRemovedItems"""

    full_name: NotRequired[str]
    id: NotRequired[int]
    name: NotRequired[str]
    node_id: NotRequired[str]
    private: NotRequired[bool]


class WebhookInstallationRepositoriesAddedPropRequesterType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookInstallationRepositoriesRemovedType(TypedDict):
    """installation_repositories removed event"""

    action: Literal["removed"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: InstallationType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repositories_added: List[
        WebhookInstallationRepositoriesRemovedPropRepositoriesAddedItemsType
    ]
    repositories_removed: List[
        WebhookInstallationRepositoriesRemovedPropRepositoriesRemovedItemsType
    ]
    repository: NotRequired[RepositoryWebhooksType]
    repository_selection: Literal["all", "selected"]
    requester: Union[WebhookInstallationRepositoriesRemovedPropRequesterType, None]
    sender: SimpleUserWebhooksType


class WebhookInstallationRepositoriesRemovedPropRepositoriesAddedItemsType(TypedDict):
    """WebhookInstallationRepositoriesRemovedPropRepositoriesAddedItems"""

    full_name: str
    id: int
    name: str
    node_id: str
    private: bool


class WebhookInstallationRepositoriesRemovedPropRepositoriesRemovedItemsType(TypedDict):
    """WebhookInstallationRepositoriesRemovedPropRepositoriesRemovedItems"""

    full_name: str
    id: int
    name: str
    node_id: str
    private: bool


class WebhookInstallationRepositoriesRemovedPropRequesterType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookInstallationSuspendType(TypedDict):
    """installation suspend event"""

    action: Literal["suspend"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: InstallationType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repositories: NotRequired[List[WebhookInstallationSuspendPropRepositoriesItemsType]]
    repository: NotRequired[RepositoryWebhooksType]
    requester: NotRequired[None]
    sender: SimpleUserWebhooksType


class WebhookInstallationSuspendPropRepositoriesItemsType(TypedDict):
    """WebhookInstallationSuspendPropRepositoriesItems"""

    full_name: str
    id: int
    name: str
    node_id: str
    private: bool


class WebhookInstallationTargetRenamedType(TypedDict):
    """WebhookInstallationTargetRenamed"""

    account: WebhookInstallationTargetRenamedPropAccountType
    action: Literal["renamed"]
    changes: WebhookInstallationTargetRenamedPropChangesType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: SimpleInstallationType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: NotRequired[RepositoryWebhooksType]
    sender: NotRequired[SimpleUserWebhooksType]
    target_type: str


class WebhookInstallationTargetRenamedPropAccountType(TypedDict):
    """WebhookInstallationTargetRenamedPropAccount"""

    archived_at: NotRequired[Union[str, None]]
    avatar_url: str
    created_at: NotRequired[str]
    description: NotRequired[None]
    events_url: NotRequired[str]
    followers: NotRequired[int]
    followers_url: NotRequired[str]
    following: NotRequired[int]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    has_organization_projects: NotRequired[bool]
    has_repository_projects: NotRequired[bool]
    hooks_url: NotRequired[str]
    html_url: str
    id: int
    is_verified: NotRequired[bool]
    issues_url: NotRequired[str]
    login: NotRequired[str]
    members_url: NotRequired[str]
    name: NotRequired[str]
    node_id: str
    organizations_url: NotRequired[str]
    public_gists: NotRequired[int]
    public_members_url: NotRequired[str]
    public_repos: NotRequired[int]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    slug: NotRequired[str]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    updated_at: NotRequired[str]
    url: NotRequired[str]
    website_url: NotRequired[None]


class WebhookInstallationTargetRenamedPropChangesType(TypedDict):
    """WebhookInstallationTargetRenamedPropChanges"""

    login: NotRequired[WebhookInstallationTargetRenamedPropChangesPropLoginType]
    slug: NotRequired[WebhookInstallationTargetRenamedPropChangesPropSlugType]


class WebhookInstallationTargetRenamedPropChangesPropLoginType(TypedDict):
    """WebhookInstallationTargetRenamedPropChangesPropLogin"""

    from_: str


class WebhookInstallationTargetRenamedPropChangesPropSlugType(TypedDict):
    """WebhookInstallationTargetRenamedPropChangesPropSlug"""

    from_: str


class WebhookInstallationUnsuspendType(TypedDict):
    """installation unsuspend event"""

    action: Literal["unsuspend"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: InstallationType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repositories: NotRequired[
        List[WebhookInstallationUnsuspendPropRepositoriesItemsType]
    ]
    repository: NotRequired[RepositoryWebhooksType]
    requester: NotRequired[None]
    sender: SimpleUserWebhooksType


class WebhookInstallationUnsuspendPropRepositoriesItemsType(TypedDict):
    """WebhookInstallationUnsuspendPropRepositoriesItems"""

    full_name: str
    id: int
    name: str
    node_id: str
    private: bool


class WebhookIssueCommentCreatedType(TypedDict):
    """issue_comment created event"""

    action: Literal["created"]
    comment: WebhookIssueCommentCreatedPropCommentType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    issue: WebhookIssueCommentCreatedPropIssueType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookIssueCommentCreatedPropCommentType(TypedDict):
    """issue comment

    The [comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment)
    itself.
    """

    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: str
    created_at: datetime
    html_url: str
    id: int
    issue_url: str
    node_id: str
    performed_via_github_app: Union[None, IntegrationType]
    reactions: WebhookIssueCommentCreatedPropCommentPropReactionsType
    updated_at: datetime
    url: str
    user: Union[WebhookIssueCommentCreatedPropCommentPropUserType, None]


class WebhookIssueCommentCreatedPropCommentPropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookIssueCommentCreatedPropCommentPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssueCommentCreatedPropIssueType(TypedDict):
    """WebhookIssueCommentCreatedPropIssue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) the comment
    belongs to.
    """

    active_lock_reason: Union[
        Literal["resolved", "off-topic", "too heated", "spam"], None
    ]
    assignee: Union[
        Union[WebhookIssueCommentCreatedPropIssueAllof0PropAssigneeType, None], None
    ]
    assignees: List[WebhookIssueCommentCreatedPropIssueMergedAssigneesType]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: Union[Union[str, None], None]
    closed_at: Union[datetime, None]
    comments: int
    comments_url: str
    created_at: datetime
    draft: NotRequired[bool]
    events_url: str
    html_url: str
    id: int
    labels: List[WebhookIssueCommentCreatedPropIssueAllof0PropLabelsItemsType]
    labels_url: str
    locked: bool
    milestone: Union[WebhookIssueCommentCreatedPropIssueMergedMilestoneType, None]
    node_id: str
    number: int
    performed_via_github_app: NotRequired[
        Union[WebhookIssueCommentCreatedPropIssueMergedPerformedViaGithubAppType, None]
    ]
    pull_request: NotRequired[
        WebhookIssueCommentCreatedPropIssueAllof0PropPullRequestType
    ]
    reactions: WebhookIssueCommentCreatedPropIssueMergedReactionsType
    repository_url: str
    state: Literal["open", "closed"]
    state_reason: NotRequired[Union[str, None]]
    timeline_url: NotRequired[str]
    title: str
    updated_at: datetime
    url: str
    user: WebhookIssueCommentCreatedPropIssueMergedUserType


class WebhookIssueCommentCreatedPropIssueAllof0Type(TypedDict):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    assignee: NotRequired[
        Union[WebhookIssueCommentCreatedPropIssueAllof0PropAssigneeType, None]
    ]
    assignees: List[
        Union[WebhookIssueCommentCreatedPropIssueAllof0PropAssigneesItemsType, None]
    ]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: Union[str, None]
    closed_at: Union[datetime, None]
    comments: int
    comments_url: str
    created_at: datetime
    draft: NotRequired[bool]
    events_url: str
    html_url: str
    id: int
    labels: NotRequired[
        List[WebhookIssueCommentCreatedPropIssueAllof0PropLabelsItemsType]
    ]
    labels_url: str
    locked: NotRequired[bool]
    milestone: Union[WebhookIssueCommentCreatedPropIssueAllof0PropMilestoneType, None]
    node_id: str
    number: int
    performed_via_github_app: NotRequired[
        Union[
            WebhookIssueCommentCreatedPropIssueAllof0PropPerformedViaGithubAppType, None
        ]
    ]
    pull_request: NotRequired[
        WebhookIssueCommentCreatedPropIssueAllof0PropPullRequestType
    ]
    reactions: WebhookIssueCommentCreatedPropIssueAllof0PropReactionsType
    repository_url: str
    state: NotRequired[Literal["open", "closed"]]
    state_reason: NotRequired[Union[str, None]]
    timeline_url: NotRequired[str]
    title: str
    updated_at: datetime
    url: str
    user: Union[WebhookIssueCommentCreatedPropIssueAllof0PropUserType, None]


class WebhookIssueCommentCreatedPropIssueAllof0PropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssueCommentCreatedPropIssueAllof0PropAssigneesItemsType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssueCommentCreatedPropIssueAllof0PropLabelsItemsType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookIssueCommentCreatedPropIssueAllof0PropMilestonePropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssueCommentCreatedPropIssueAllof0PropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[
        WebhookIssueCommentCreatedPropIssueAllof0PropMilestonePropCreatorType, None
    ]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookIssueCommentCreatedPropIssueAllof0PropPerformedViaGithubAppPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssueCommentCreatedPropIssueAllof0PropPerformedViaGithubAppPropPermissionsType(
    TypedDict
):
    """WebhookIssueCommentCreatedPropIssueAllof0PropPerformedViaGithubAppPropPermission
    s

    The set of permissions for the GitHub app
    """

    actions: NotRequired[Literal["read", "write"]]
    administration: NotRequired[Literal["read", "write"]]
    checks: NotRequired[Literal["read", "write"]]
    content_references: NotRequired[Literal["read", "write"]]
    contents: NotRequired[Literal["read", "write"]]
    deployments: NotRequired[Literal["read", "write"]]
    discussions: NotRequired[Literal["read", "write"]]
    emails: NotRequired[Literal["read", "write"]]
    environments: NotRequired[Literal["read", "write"]]
    issues: NotRequired[Literal["read", "write"]]
    keys: NotRequired[Literal["read", "write"]]
    members: NotRequired[Literal["read", "write"]]
    metadata: NotRequired[Literal["read", "write"]]
    organization_administration: NotRequired[Literal["read", "write"]]
    organization_hooks: NotRequired[Literal["read", "write"]]
    organization_packages: NotRequired[Literal["read", "write"]]
    organization_plan: NotRequired[Literal["read", "write"]]
    organization_projects: NotRequired[Literal["read", "write", "admin"]]
    organization_secrets: NotRequired[Literal["read", "write"]]
    organization_self_hosted_runners: NotRequired[Literal["read", "write"]]
    organization_user_blocking: NotRequired[Literal["read", "write"]]
    packages: NotRequired[Literal["read", "write"]]
    pages: NotRequired[Literal["read", "write"]]
    pull_requests: NotRequired[Literal["read", "write"]]
    repository_hooks: NotRequired[Literal["read", "write"]]
    repository_projects: NotRequired[Literal["read", "write", "admin"]]
    secret_scanning_alerts: NotRequired[Literal["read", "write"]]
    secrets: NotRequired[Literal["read", "write"]]
    security_events: NotRequired[Literal["read", "write"]]
    security_scanning_alert: NotRequired[Literal["read", "write"]]
    single_file: NotRequired[Literal["read", "write"]]
    statuses: NotRequired[Literal["read", "write"]]
    team_discussions: NotRequired[Literal["read", "write"]]
    vulnerability_alerts: NotRequired[Literal["read", "write"]]
    workflows: NotRequired[Literal["read", "write"]]


class WebhookIssueCommentCreatedPropIssueAllof0PropPerformedViaGithubAppType(TypedDict):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None]
    description: Union[str, None]
    events: NotRequired[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "reminder",
                "pull_request_review_thread",
            ]
        ]
    ]
    external_url: Union[str, None]
    html_url: str
    id: Union[int, None]
    name: str
    node_id: str
    owner: Union[
        WebhookIssueCommentCreatedPropIssueAllof0PropPerformedViaGithubAppPropOwnerType,
        None,
    ]
    permissions: NotRequired[
        WebhookIssueCommentCreatedPropIssueAllof0PropPerformedViaGithubAppPropPermissionsType
    ]
    slug: NotRequired[str]
    updated_at: Union[datetime, None]


class WebhookIssueCommentCreatedPropIssueAllof0PropPullRequestType(TypedDict):
    """WebhookIssueCommentCreatedPropIssueAllof0PropPullRequest"""

    diff_url: NotRequired[str]
    html_url: NotRequired[str]
    merged_at: NotRequired[Union[datetime, None]]
    patch_url: NotRequired[str]
    url: NotRequired[str]


class WebhookIssueCommentCreatedPropIssueAllof0PropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookIssueCommentCreatedPropIssueAllof0PropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssueCommentCreatedPropIssueAllof1Type(TypedDict):
    """WebhookIssueCommentCreatedPropIssueAllof1"""

    active_lock_reason: NotRequired[Union[str, None]]
    assignee: Union[WebhookIssueCommentCreatedPropIssueAllof1PropAssigneeType, None]
    assignees: NotRequired[
        List[
            Union[WebhookIssueCommentCreatedPropIssueAllof1PropAssigneesItemsType, None]
        ]
    ]
    author_association: NotRequired[str]
    body: NotRequired[Union[str, None]]
    closed_at: NotRequired[Union[str, None]]
    comments: NotRequired[int]
    comments_url: NotRequired[str]
    created_at: NotRequired[str]
    events_url: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    labels: List[WebhookIssueCommentCreatedPropIssueAllof1PropLabelsItemsType]
    labels_url: NotRequired[str]
    locked: bool
    milestone: NotRequired[
        Union[WebhookIssueCommentCreatedPropIssueAllof1PropMilestoneType, None]
    ]
    node_id: NotRequired[str]
    number: NotRequired[int]
    performed_via_github_app: NotRequired[
        Union[
            WebhookIssueCommentCreatedPropIssueAllof1PropPerformedViaGithubAppType, None
        ]
    ]
    reactions: NotRequired[WebhookIssueCommentCreatedPropIssueAllof1PropReactionsType]
    repository_url: NotRequired[str]
    state: Literal["open", "closed"]
    timeline_url: NotRequired[str]
    title: NotRequired[str]
    updated_at: NotRequired[str]
    url: NotRequired[str]
    user: NotRequired[WebhookIssueCommentCreatedPropIssueAllof1PropUserType]


class WebhookIssueCommentCreatedPropIssueAllof1PropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssueCommentCreatedPropIssueAllof1PropAssigneesItemsType(TypedDict):
    """WebhookIssueCommentCreatedPropIssueAllof1PropAssigneesItems"""


class WebhookIssueCommentCreatedPropIssueAllof1PropLabelsItemsType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookIssueCommentCreatedPropIssueAllof1PropMilestoneType(TypedDict):
    """WebhookIssueCommentCreatedPropIssueAllof1PropMilestone"""


class WebhookIssueCommentCreatedPropIssueAllof1PropPerformedViaGithubAppType(TypedDict):
    """WebhookIssueCommentCreatedPropIssueAllof1PropPerformedViaGithubApp"""


class WebhookIssueCommentCreatedPropIssueAllof1PropReactionsType(TypedDict):
    """WebhookIssueCommentCreatedPropIssueAllof1PropReactions"""

    plus_one: NotRequired[int]
    minus_one: NotRequired[int]
    confused: NotRequired[int]
    eyes: NotRequired[int]
    heart: NotRequired[int]
    hooray: NotRequired[int]
    laugh: NotRequired[int]
    rocket: NotRequired[int]
    total_count: NotRequired[int]
    url: NotRequired[str]


class WebhookIssueCommentCreatedPropIssueAllof1PropUserType(TypedDict):
    """WebhookIssueCommentCreatedPropIssueAllof1PropUser"""

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookIssueCommentCreatedPropIssueMergedAssigneesType(TypedDict):
    """WebhookIssueCommentCreatedPropIssueMergedAssignees"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssueCommentCreatedPropIssueMergedMilestoneType(TypedDict):
    """WebhookIssueCommentCreatedPropIssueMergedMilestone"""

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[
        WebhookIssueCommentCreatedPropIssueAllof0PropMilestonePropCreatorType, None
    ]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookIssueCommentCreatedPropIssueMergedPerformedViaGithubAppType(TypedDict):
    """WebhookIssueCommentCreatedPropIssueMergedPerformedViaGithubApp"""

    created_at: Union[datetime, None]
    description: Union[str, None]
    events: NotRequired[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "reminder",
                "pull_request_review_thread",
            ]
        ]
    ]
    external_url: Union[str, None]
    html_url: str
    id: Union[int, None]
    name: str
    node_id: str
    owner: Union[
        WebhookIssueCommentCreatedPropIssueAllof0PropPerformedViaGithubAppPropOwnerType,
        None,
    ]
    permissions: NotRequired[
        WebhookIssueCommentCreatedPropIssueAllof0PropPerformedViaGithubAppPropPermissionsType
    ]
    slug: NotRequired[str]
    updated_at: Union[datetime, None]


class WebhookIssueCommentCreatedPropIssueMergedReactionsType(TypedDict):
    """WebhookIssueCommentCreatedPropIssueMergedReactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookIssueCommentCreatedPropIssueMergedUserType(TypedDict):
    """WebhookIssueCommentCreatedPropIssueMergedUser"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssueCommentDeletedType(TypedDict):
    """issue_comment deleted event"""

    action: Literal["deleted"]
    comment: WebhookIssueCommentDeletedPropCommentType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    issue: WebhookIssueCommentDeletedPropIssueType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookIssueCommentDeletedPropCommentType(TypedDict):
    """issue comment

    The [comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment)
    itself.
    """

    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: str
    created_at: datetime
    html_url: str
    id: int
    issue_url: str
    node_id: str
    performed_via_github_app: Union[None, IntegrationType]
    reactions: WebhookIssueCommentDeletedPropCommentPropReactionsType
    updated_at: datetime
    url: str
    user: Union[WebhookIssueCommentDeletedPropCommentPropUserType, None]


class WebhookIssueCommentDeletedPropCommentPropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookIssueCommentDeletedPropCommentPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssueCommentDeletedPropIssueType(TypedDict):
    """WebhookIssueCommentDeletedPropIssue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) the comment
    belongs to.
    """

    active_lock_reason: Union[
        Literal["resolved", "off-topic", "too heated", "spam"], None
    ]
    assignee: Union[
        Union[WebhookIssueCommentDeletedPropIssueAllof0PropAssigneeType, None], None
    ]
    assignees: List[WebhookIssueCommentDeletedPropIssueMergedAssigneesType]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: Union[Union[str, None], None]
    closed_at: Union[datetime, None]
    comments: int
    comments_url: str
    created_at: datetime
    draft: NotRequired[bool]
    events_url: str
    html_url: str
    id: int
    labels: List[WebhookIssueCommentDeletedPropIssueAllof0PropLabelsItemsType]
    labels_url: str
    locked: bool
    milestone: Union[WebhookIssueCommentDeletedPropIssueMergedMilestoneType, None]
    node_id: str
    number: int
    performed_via_github_app: NotRequired[
        Union[WebhookIssueCommentDeletedPropIssueMergedPerformedViaGithubAppType, None]
    ]
    pull_request: NotRequired[
        WebhookIssueCommentDeletedPropIssueAllof0PropPullRequestType
    ]
    reactions: WebhookIssueCommentDeletedPropIssueMergedReactionsType
    repository_url: str
    state: Literal["open", "closed"]
    state_reason: NotRequired[Union[str, None]]
    timeline_url: NotRequired[str]
    title: str
    updated_at: datetime
    url: str
    user: WebhookIssueCommentDeletedPropIssueMergedUserType


class WebhookIssueCommentDeletedPropIssueAllof0Type(TypedDict):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    assignee: NotRequired[
        Union[WebhookIssueCommentDeletedPropIssueAllof0PropAssigneeType, None]
    ]
    assignees: List[
        Union[WebhookIssueCommentDeletedPropIssueAllof0PropAssigneesItemsType, None]
    ]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: Union[str, None]
    closed_at: Union[datetime, None]
    comments: int
    comments_url: str
    created_at: datetime
    draft: NotRequired[bool]
    events_url: str
    html_url: str
    id: int
    labels: NotRequired[
        List[WebhookIssueCommentDeletedPropIssueAllof0PropLabelsItemsType]
    ]
    labels_url: str
    locked: NotRequired[bool]
    milestone: Union[WebhookIssueCommentDeletedPropIssueAllof0PropMilestoneType, None]
    node_id: str
    number: int
    performed_via_github_app: NotRequired[
        Union[
            WebhookIssueCommentDeletedPropIssueAllof0PropPerformedViaGithubAppType, None
        ]
    ]
    pull_request: NotRequired[
        WebhookIssueCommentDeletedPropIssueAllof0PropPullRequestType
    ]
    reactions: WebhookIssueCommentDeletedPropIssueAllof0PropReactionsType
    repository_url: str
    state: NotRequired[Literal["open", "closed"]]
    state_reason: NotRequired[Union[str, None]]
    timeline_url: NotRequired[str]
    title: str
    updated_at: datetime
    url: str
    user: Union[WebhookIssueCommentDeletedPropIssueAllof0PropUserType, None]


class WebhookIssueCommentDeletedPropIssueAllof0PropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssueCommentDeletedPropIssueAllof0PropAssigneesItemsType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssueCommentDeletedPropIssueAllof0PropLabelsItemsType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookIssueCommentDeletedPropIssueAllof0PropMilestonePropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssueCommentDeletedPropIssueAllof0PropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[
        WebhookIssueCommentDeletedPropIssueAllof0PropMilestonePropCreatorType, None
    ]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookIssueCommentDeletedPropIssueAllof0PropPerformedViaGithubAppPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssueCommentDeletedPropIssueAllof0PropPerformedViaGithubAppPropPermissionsType(
    TypedDict
):
    """WebhookIssueCommentDeletedPropIssueAllof0PropPerformedViaGithubAppPropPermission
    s

    The set of permissions for the GitHub app
    """

    actions: NotRequired[Literal["read", "write"]]
    administration: NotRequired[Literal["read", "write"]]
    checks: NotRequired[Literal["read", "write"]]
    content_references: NotRequired[Literal["read", "write"]]
    contents: NotRequired[Literal["read", "write"]]
    deployments: NotRequired[Literal["read", "write"]]
    discussions: NotRequired[Literal["read", "write"]]
    emails: NotRequired[Literal["read", "write"]]
    environments: NotRequired[Literal["read", "write"]]
    issues: NotRequired[Literal["read", "write"]]
    keys: NotRequired[Literal["read", "write"]]
    members: NotRequired[Literal["read", "write"]]
    metadata: NotRequired[Literal["read", "write"]]
    organization_administration: NotRequired[Literal["read", "write"]]
    organization_hooks: NotRequired[Literal["read", "write"]]
    organization_packages: NotRequired[Literal["read", "write"]]
    organization_plan: NotRequired[Literal["read", "write"]]
    organization_projects: NotRequired[Literal["read", "write"]]
    organization_secrets: NotRequired[Literal["read", "write"]]
    organization_self_hosted_runners: NotRequired[Literal["read", "write"]]
    organization_user_blocking: NotRequired[Literal["read", "write"]]
    packages: NotRequired[Literal["read", "write"]]
    pages: NotRequired[Literal["read", "write"]]
    pull_requests: NotRequired[Literal["read", "write"]]
    repository_hooks: NotRequired[Literal["read", "write"]]
    repository_projects: NotRequired[Literal["read", "write"]]
    secret_scanning_alerts: NotRequired[Literal["read", "write"]]
    secrets: NotRequired[Literal["read", "write"]]
    security_events: NotRequired[Literal["read", "write"]]
    security_scanning_alert: NotRequired[Literal["read", "write"]]
    single_file: NotRequired[Literal["read", "write"]]
    statuses: NotRequired[Literal["read", "write"]]
    team_discussions: NotRequired[Literal["read", "write"]]
    vulnerability_alerts: NotRequired[Literal["read", "write"]]
    workflows: NotRequired[Literal["read", "write"]]


class WebhookIssueCommentDeletedPropIssueAllof0PropPerformedViaGithubAppType(TypedDict):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None]
    description: Union[str, None]
    events: NotRequired[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
            ]
        ]
    ]
    external_url: Union[str, None]
    html_url: str
    id: Union[int, None]
    name: str
    node_id: str
    owner: Union[
        WebhookIssueCommentDeletedPropIssueAllof0PropPerformedViaGithubAppPropOwnerType,
        None,
    ]
    permissions: NotRequired[
        WebhookIssueCommentDeletedPropIssueAllof0PropPerformedViaGithubAppPropPermissionsType
    ]
    slug: NotRequired[str]
    updated_at: Union[datetime, None]


class WebhookIssueCommentDeletedPropIssueAllof0PropPullRequestType(TypedDict):
    """WebhookIssueCommentDeletedPropIssueAllof0PropPullRequest"""

    diff_url: NotRequired[str]
    html_url: NotRequired[str]
    merged_at: NotRequired[Union[datetime, None]]
    patch_url: NotRequired[str]
    url: NotRequired[str]


class WebhookIssueCommentDeletedPropIssueAllof0PropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookIssueCommentDeletedPropIssueAllof0PropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssueCommentDeletedPropIssueAllof1Type(TypedDict):
    """WebhookIssueCommentDeletedPropIssueAllof1"""

    active_lock_reason: NotRequired[Union[str, None]]
    assignee: Union[WebhookIssueCommentDeletedPropIssueAllof1PropAssigneeType, None]
    assignees: NotRequired[
        List[
            Union[WebhookIssueCommentDeletedPropIssueAllof1PropAssigneesItemsType, None]
        ]
    ]
    author_association: NotRequired[str]
    body: NotRequired[Union[str, None]]
    closed_at: NotRequired[Union[str, None]]
    comments: NotRequired[int]
    comments_url: NotRequired[str]
    created_at: NotRequired[str]
    events_url: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    labels: List[WebhookIssueCommentDeletedPropIssueAllof1PropLabelsItemsType]
    labels_url: NotRequired[str]
    locked: bool
    milestone: NotRequired[
        Union[WebhookIssueCommentDeletedPropIssueAllof1PropMilestoneType, None]
    ]
    node_id: NotRequired[str]
    number: NotRequired[int]
    performed_via_github_app: NotRequired[
        Union[
            WebhookIssueCommentDeletedPropIssueAllof1PropPerformedViaGithubAppType, None
        ]
    ]
    reactions: NotRequired[WebhookIssueCommentDeletedPropIssueAllof1PropReactionsType]
    repository_url: NotRequired[str]
    state: Literal["open", "closed"]
    timeline_url: NotRequired[str]
    title: NotRequired[str]
    updated_at: NotRequired[str]
    url: NotRequired[str]
    user: NotRequired[WebhookIssueCommentDeletedPropIssueAllof1PropUserType]


class WebhookIssueCommentDeletedPropIssueAllof1PropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssueCommentDeletedPropIssueAllof1PropAssigneesItemsType(TypedDict):
    """WebhookIssueCommentDeletedPropIssueAllof1PropAssigneesItems"""


class WebhookIssueCommentDeletedPropIssueAllof1PropLabelsItemsType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookIssueCommentDeletedPropIssueAllof1PropMilestoneType(TypedDict):
    """WebhookIssueCommentDeletedPropIssueAllof1PropMilestone"""


class WebhookIssueCommentDeletedPropIssueAllof1PropPerformedViaGithubAppType(TypedDict):
    """WebhookIssueCommentDeletedPropIssueAllof1PropPerformedViaGithubApp"""


class WebhookIssueCommentDeletedPropIssueAllof1PropReactionsType(TypedDict):
    """WebhookIssueCommentDeletedPropIssueAllof1PropReactions"""

    plus_one: NotRequired[int]
    minus_one: NotRequired[int]
    confused: NotRequired[int]
    eyes: NotRequired[int]
    heart: NotRequired[int]
    hooray: NotRequired[int]
    laugh: NotRequired[int]
    rocket: NotRequired[int]
    total_count: NotRequired[int]
    url: NotRequired[str]


class WebhookIssueCommentDeletedPropIssueAllof1PropUserType(TypedDict):
    """WebhookIssueCommentDeletedPropIssueAllof1PropUser"""

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookIssueCommentDeletedPropIssueMergedAssigneesType(TypedDict):
    """WebhookIssueCommentDeletedPropIssueMergedAssignees"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssueCommentDeletedPropIssueMergedMilestoneType(TypedDict):
    """WebhookIssueCommentDeletedPropIssueMergedMilestone"""

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[
        WebhookIssueCommentDeletedPropIssueAllof0PropMilestonePropCreatorType, None
    ]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookIssueCommentDeletedPropIssueMergedPerformedViaGithubAppType(TypedDict):
    """WebhookIssueCommentDeletedPropIssueMergedPerformedViaGithubApp"""

    created_at: Union[datetime, None]
    description: Union[str, None]
    events: NotRequired[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
            ]
        ]
    ]
    external_url: Union[str, None]
    html_url: str
    id: Union[int, None]
    name: str
    node_id: str
    owner: Union[
        WebhookIssueCommentDeletedPropIssueAllof0PropPerformedViaGithubAppPropOwnerType,
        None,
    ]
    permissions: NotRequired[
        WebhookIssueCommentDeletedPropIssueAllof0PropPerformedViaGithubAppPropPermissionsType
    ]
    slug: NotRequired[str]
    updated_at: Union[datetime, None]


class WebhookIssueCommentDeletedPropIssueMergedReactionsType(TypedDict):
    """WebhookIssueCommentDeletedPropIssueMergedReactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookIssueCommentDeletedPropIssueMergedUserType(TypedDict):
    """WebhookIssueCommentDeletedPropIssueMergedUser"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssueCommentEditedType(TypedDict):
    """issue_comment edited event"""

    action: Literal["edited"]
    changes: WebhookIssueCommentEditedPropChangesType
    comment: WebhookIssueCommentEditedPropCommentType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    issue: WebhookIssueCommentEditedPropIssueType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookIssueCommentEditedPropChangesType(TypedDict):
    """WebhookIssueCommentEditedPropChanges

    The changes to the comment.
    """

    body: NotRequired[WebhookIssueCommentEditedPropChangesPropBodyType]


class WebhookIssueCommentEditedPropChangesPropBodyType(TypedDict):
    """WebhookIssueCommentEditedPropChangesPropBody"""

    from_: str


class WebhookIssueCommentEditedPropCommentType(TypedDict):
    """issue comment

    The [comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment)
    itself.
    """

    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: str
    created_at: datetime
    html_url: str
    id: int
    issue_url: str
    node_id: str
    performed_via_github_app: Union[None, IntegrationType]
    reactions: WebhookIssueCommentEditedPropCommentPropReactionsType
    updated_at: datetime
    url: str
    user: Union[WebhookIssueCommentEditedPropCommentPropUserType, None]


class WebhookIssueCommentEditedPropCommentPropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookIssueCommentEditedPropCommentPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssueCommentEditedPropIssueType(TypedDict):
    """WebhookIssueCommentEditedPropIssue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) the comment
    belongs to.
    """

    active_lock_reason: Union[
        Literal["resolved", "off-topic", "too heated", "spam"], None
    ]
    assignee: Union[
        Union[WebhookIssueCommentEditedPropIssueAllof0PropAssigneeType, None], None
    ]
    assignees: List[WebhookIssueCommentEditedPropIssueMergedAssigneesType]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: Union[Union[str, None], None]
    closed_at: Union[datetime, None]
    comments: int
    comments_url: str
    created_at: datetime
    draft: NotRequired[bool]
    events_url: str
    html_url: str
    id: int
    labels: List[WebhookIssueCommentEditedPropIssueAllof0PropLabelsItemsType]
    labels_url: str
    locked: bool
    milestone: Union[WebhookIssueCommentEditedPropIssueMergedMilestoneType, None]
    node_id: str
    number: int
    performed_via_github_app: NotRequired[
        Union[WebhookIssueCommentEditedPropIssueMergedPerformedViaGithubAppType, None]
    ]
    pull_request: NotRequired[
        WebhookIssueCommentEditedPropIssueAllof0PropPullRequestType
    ]
    reactions: WebhookIssueCommentEditedPropIssueMergedReactionsType
    repository_url: str
    state: Literal["open", "closed"]
    state_reason: NotRequired[Union[str, None]]
    timeline_url: NotRequired[str]
    title: str
    updated_at: datetime
    url: str
    user: WebhookIssueCommentEditedPropIssueMergedUserType


class WebhookIssueCommentEditedPropIssueAllof0Type(TypedDict):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    assignee: NotRequired[
        Union[WebhookIssueCommentEditedPropIssueAllof0PropAssigneeType, None]
    ]
    assignees: List[
        Union[WebhookIssueCommentEditedPropIssueAllof0PropAssigneesItemsType, None]
    ]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: Union[str, None]
    closed_at: Union[datetime, None]
    comments: int
    comments_url: str
    created_at: datetime
    draft: NotRequired[bool]
    events_url: str
    html_url: str
    id: int
    labels: NotRequired[
        List[WebhookIssueCommentEditedPropIssueAllof0PropLabelsItemsType]
    ]
    labels_url: str
    locked: NotRequired[bool]
    milestone: Union[WebhookIssueCommentEditedPropIssueAllof0PropMilestoneType, None]
    node_id: str
    number: int
    performed_via_github_app: NotRequired[
        Union[
            WebhookIssueCommentEditedPropIssueAllof0PropPerformedViaGithubAppType, None
        ]
    ]
    pull_request: NotRequired[
        WebhookIssueCommentEditedPropIssueAllof0PropPullRequestType
    ]
    reactions: WebhookIssueCommentEditedPropIssueAllof0PropReactionsType
    repository_url: str
    state: NotRequired[Literal["open", "closed"]]
    state_reason: NotRequired[Union[str, None]]
    timeline_url: NotRequired[str]
    title: str
    updated_at: datetime
    url: str
    user: Union[WebhookIssueCommentEditedPropIssueAllof0PropUserType, None]


class WebhookIssueCommentEditedPropIssueAllof0PropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssueCommentEditedPropIssueAllof0PropAssigneesItemsType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssueCommentEditedPropIssueAllof0PropLabelsItemsType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookIssueCommentEditedPropIssueAllof0PropMilestonePropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssueCommentEditedPropIssueAllof0PropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[
        WebhookIssueCommentEditedPropIssueAllof0PropMilestonePropCreatorType, None
    ]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookIssueCommentEditedPropIssueAllof0PropPerformedViaGithubAppPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssueCommentEditedPropIssueAllof0PropPerformedViaGithubAppPropPermissionsType(
    TypedDict
):
    """WebhookIssueCommentEditedPropIssueAllof0PropPerformedViaGithubAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: NotRequired[Literal["read", "write"]]
    administration: NotRequired[Literal["read", "write"]]
    checks: NotRequired[Literal["read", "write"]]
    content_references: NotRequired[Literal["read", "write"]]
    contents: NotRequired[Literal["read", "write"]]
    deployments: NotRequired[Literal["read", "write"]]
    discussions: NotRequired[Literal["read", "write"]]
    emails: NotRequired[Literal["read", "write"]]
    environments: NotRequired[Literal["read", "write"]]
    issues: NotRequired[Literal["read", "write"]]
    keys: NotRequired[Literal["read", "write"]]
    members: NotRequired[Literal["read", "write"]]
    metadata: NotRequired[Literal["read", "write"]]
    organization_administration: NotRequired[Literal["read", "write"]]
    organization_hooks: NotRequired[Literal["read", "write"]]
    organization_packages: NotRequired[Literal["read", "write"]]
    organization_plan: NotRequired[Literal["read", "write"]]
    organization_projects: NotRequired[Literal["read", "write", "admin"]]
    organization_secrets: NotRequired[Literal["read", "write"]]
    organization_self_hosted_runners: NotRequired[Literal["read", "write"]]
    organization_user_blocking: NotRequired[Literal["read", "write"]]
    packages: NotRequired[Literal["read", "write"]]
    pages: NotRequired[Literal["read", "write"]]
    pull_requests: NotRequired[Literal["read", "write"]]
    repository_hooks: NotRequired[Literal["read", "write"]]
    repository_projects: NotRequired[Literal["read", "write"]]
    secret_scanning_alerts: NotRequired[Literal["read", "write"]]
    secrets: NotRequired[Literal["read", "write"]]
    security_events: NotRequired[Literal["read", "write"]]
    security_scanning_alert: NotRequired[Literal["read", "write"]]
    single_file: NotRequired[Literal["read", "write"]]
    statuses: NotRequired[Literal["read", "write"]]
    team_discussions: NotRequired[Literal["read", "write"]]
    vulnerability_alerts: NotRequired[Literal["read", "write"]]
    workflows: NotRequired[Literal["read", "write"]]


class WebhookIssueCommentEditedPropIssueAllof0PropPerformedViaGithubAppType(TypedDict):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None]
    description: Union[str, None]
    events: NotRequired[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "reminder",
                "pull_request_review_thread",
            ]
        ]
    ]
    external_url: Union[str, None]
    html_url: str
    id: Union[int, None]
    name: str
    node_id: str
    owner: Union[
        WebhookIssueCommentEditedPropIssueAllof0PropPerformedViaGithubAppPropOwnerType,
        None,
    ]
    permissions: NotRequired[
        WebhookIssueCommentEditedPropIssueAllof0PropPerformedViaGithubAppPropPermissionsType
    ]
    slug: NotRequired[str]
    updated_at: Union[datetime, None]


class WebhookIssueCommentEditedPropIssueAllof0PropPullRequestType(TypedDict):
    """WebhookIssueCommentEditedPropIssueAllof0PropPullRequest"""

    diff_url: NotRequired[str]
    html_url: NotRequired[str]
    merged_at: NotRequired[Union[datetime, None]]
    patch_url: NotRequired[str]
    url: NotRequired[str]


class WebhookIssueCommentEditedPropIssueAllof0PropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookIssueCommentEditedPropIssueAllof0PropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssueCommentEditedPropIssueAllof1Type(TypedDict):
    """WebhookIssueCommentEditedPropIssueAllof1"""

    active_lock_reason: NotRequired[Union[str, None]]
    assignee: Union[WebhookIssueCommentEditedPropIssueAllof1PropAssigneeType, None]
    assignees: NotRequired[
        List[
            Union[WebhookIssueCommentEditedPropIssueAllof1PropAssigneesItemsType, None]
        ]
    ]
    author_association: NotRequired[str]
    body: NotRequired[Union[str, None]]
    closed_at: NotRequired[Union[str, None]]
    comments: NotRequired[int]
    comments_url: NotRequired[str]
    created_at: NotRequired[str]
    events_url: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    labels: List[WebhookIssueCommentEditedPropIssueAllof1PropLabelsItemsType]
    labels_url: NotRequired[str]
    locked: bool
    milestone: NotRequired[
        Union[WebhookIssueCommentEditedPropIssueAllof1PropMilestoneType, None]
    ]
    node_id: NotRequired[str]
    number: NotRequired[int]
    performed_via_github_app: NotRequired[
        Union[
            WebhookIssueCommentEditedPropIssueAllof1PropPerformedViaGithubAppType, None
        ]
    ]
    reactions: NotRequired[WebhookIssueCommentEditedPropIssueAllof1PropReactionsType]
    repository_url: NotRequired[str]
    state: Literal["open", "closed"]
    timeline_url: NotRequired[str]
    title: NotRequired[str]
    updated_at: NotRequired[str]
    url: NotRequired[str]
    user: NotRequired[WebhookIssueCommentEditedPropIssueAllof1PropUserType]


class WebhookIssueCommentEditedPropIssueAllof1PropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssueCommentEditedPropIssueAllof1PropAssigneesItemsType(TypedDict):
    """WebhookIssueCommentEditedPropIssueAllof1PropAssigneesItems"""


class WebhookIssueCommentEditedPropIssueAllof1PropLabelsItemsType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookIssueCommentEditedPropIssueAllof1PropMilestoneType(TypedDict):
    """WebhookIssueCommentEditedPropIssueAllof1PropMilestone"""


class WebhookIssueCommentEditedPropIssueAllof1PropPerformedViaGithubAppType(TypedDict):
    """WebhookIssueCommentEditedPropIssueAllof1PropPerformedViaGithubApp"""


class WebhookIssueCommentEditedPropIssueAllof1PropReactionsType(TypedDict):
    """WebhookIssueCommentEditedPropIssueAllof1PropReactions"""

    plus_one: NotRequired[int]
    minus_one: NotRequired[int]
    confused: NotRequired[int]
    eyes: NotRequired[int]
    heart: NotRequired[int]
    hooray: NotRequired[int]
    laugh: NotRequired[int]
    rocket: NotRequired[int]
    total_count: NotRequired[int]
    url: NotRequired[str]


class WebhookIssueCommentEditedPropIssueAllof1PropUserType(TypedDict):
    """WebhookIssueCommentEditedPropIssueAllof1PropUser"""

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookIssueCommentEditedPropIssueMergedAssigneesType(TypedDict):
    """WebhookIssueCommentEditedPropIssueMergedAssignees"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssueCommentEditedPropIssueMergedMilestoneType(TypedDict):
    """WebhookIssueCommentEditedPropIssueMergedMilestone"""

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[
        WebhookIssueCommentEditedPropIssueAllof0PropMilestonePropCreatorType, None
    ]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookIssueCommentEditedPropIssueMergedPerformedViaGithubAppType(TypedDict):
    """WebhookIssueCommentEditedPropIssueMergedPerformedViaGithubApp"""

    created_at: Union[datetime, None]
    description: Union[str, None]
    events: NotRequired[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "reminder",
                "pull_request_review_thread",
            ]
        ]
    ]
    external_url: Union[str, None]
    html_url: str
    id: Union[int, None]
    name: str
    node_id: str
    owner: Union[
        WebhookIssueCommentEditedPropIssueAllof0PropPerformedViaGithubAppPropOwnerType,
        None,
    ]
    permissions: NotRequired[
        WebhookIssueCommentEditedPropIssueAllof0PropPerformedViaGithubAppPropPermissionsType
    ]
    slug: NotRequired[str]
    updated_at: Union[datetime, None]


class WebhookIssueCommentEditedPropIssueMergedReactionsType(TypedDict):
    """WebhookIssueCommentEditedPropIssueMergedReactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookIssueCommentEditedPropIssueMergedUserType(TypedDict):
    """WebhookIssueCommentEditedPropIssueMergedUser"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesAssignedType(TypedDict):
    """issues assigned event"""

    action: Literal["assigned"]
    assignee: NotRequired[Union[WebhookIssuesAssignedPropAssigneeType, None]]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    issue: WebhookIssuesAssignedPropIssueType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookIssuesAssignedPropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesAssignedPropIssueType(TypedDict):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    assignee: NotRequired[Union[WebhookIssuesAssignedPropIssuePropAssigneeType, None]]
    assignees: List[Union[WebhookIssuesAssignedPropIssuePropAssigneesItemsType, None]]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: Union[str, None]
    closed_at: Union[datetime, None]
    comments: int
    comments_url: str
    created_at: datetime
    draft: NotRequired[bool]
    events_url: str
    html_url: str
    id: int
    labels: NotRequired[List[WebhookIssuesAssignedPropIssuePropLabelsItemsType]]
    labels_url: str
    locked: NotRequired[bool]
    milestone: Union[WebhookIssuesAssignedPropIssuePropMilestoneType, None]
    node_id: str
    number: int
    performed_via_github_app: NotRequired[
        Union[WebhookIssuesAssignedPropIssuePropPerformedViaGithubAppType, None]
    ]
    pull_request: NotRequired[WebhookIssuesAssignedPropIssuePropPullRequestType]
    reactions: WebhookIssuesAssignedPropIssuePropReactionsType
    repository_url: str
    state: NotRequired[Literal["open", "closed"]]
    state_reason: NotRequired[Union[str, None]]
    timeline_url: NotRequired[str]
    title: str
    updated_at: datetime
    url: str
    user: Union[WebhookIssuesAssignedPropIssuePropUserType, None]


class WebhookIssuesAssignedPropIssuePropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesAssignedPropIssuePropAssigneesItemsType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesAssignedPropIssuePropLabelsItemsType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookIssuesAssignedPropIssuePropMilestonePropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesAssignedPropIssuePropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[WebhookIssuesAssignedPropIssuePropMilestonePropCreatorType, None]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookIssuesAssignedPropIssuePropPerformedViaGithubAppPropOwnerType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesAssignedPropIssuePropPerformedViaGithubAppPropPermissionsType(
    TypedDict
):
    """WebhookIssuesAssignedPropIssuePropPerformedViaGithubAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: NotRequired[Literal["read", "write"]]
    administration: NotRequired[Literal["read", "write"]]
    checks: NotRequired[Literal["read", "write"]]
    content_references: NotRequired[Literal["read", "write"]]
    contents: NotRequired[Literal["read", "write"]]
    deployments: NotRequired[Literal["read", "write"]]
    discussions: NotRequired[Literal["read", "write"]]
    emails: NotRequired[Literal["read", "write"]]
    environments: NotRequired[Literal["read", "write"]]
    issues: NotRequired[Literal["read", "write"]]
    keys: NotRequired[Literal["read", "write"]]
    members: NotRequired[Literal["read", "write"]]
    metadata: NotRequired[Literal["read", "write"]]
    organization_administration: NotRequired[Literal["read", "write"]]
    organization_hooks: NotRequired[Literal["read", "write"]]
    organization_packages: NotRequired[Literal["read", "write"]]
    organization_plan: NotRequired[Literal["read", "write"]]
    organization_projects: NotRequired[Literal["read", "write", "admin"]]
    organization_secrets: NotRequired[Literal["read", "write"]]
    organization_self_hosted_runners: NotRequired[Literal["read", "write"]]
    organization_user_blocking: NotRequired[Literal["read", "write"]]
    packages: NotRequired[Literal["read", "write"]]
    pages: NotRequired[Literal["read", "write"]]
    pull_requests: NotRequired[Literal["read", "write"]]
    repository_hooks: NotRequired[Literal["read", "write"]]
    repository_projects: NotRequired[Literal["read", "write"]]
    secret_scanning_alerts: NotRequired[Literal["read", "write"]]
    secrets: NotRequired[Literal["read", "write"]]
    security_events: NotRequired[Literal["read", "write"]]
    security_scanning_alert: NotRequired[Literal["read", "write"]]
    single_file: NotRequired[Literal["read", "write"]]
    statuses: NotRequired[Literal["read", "write"]]
    team_discussions: NotRequired[Literal["read", "write"]]
    vulnerability_alerts: NotRequired[Literal["read", "write"]]
    workflows: NotRequired[Literal["read", "write"]]


class WebhookIssuesAssignedPropIssuePropPerformedViaGithubAppType(TypedDict):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None]
    description: Union[str, None]
    events: NotRequired[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "reminder",
                "pull_request_review_thread",
            ]
        ]
    ]
    external_url: Union[str, None]
    html_url: str
    id: Union[int, None]
    name: str
    node_id: str
    owner: Union[
        WebhookIssuesAssignedPropIssuePropPerformedViaGithubAppPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookIssuesAssignedPropIssuePropPerformedViaGithubAppPropPermissionsType
    ]
    slug: NotRequired[str]
    updated_at: Union[datetime, None]


class WebhookIssuesAssignedPropIssuePropPullRequestType(TypedDict):
    """WebhookIssuesAssignedPropIssuePropPullRequest"""

    diff_url: NotRequired[str]
    html_url: NotRequired[str]
    merged_at: NotRequired[Union[datetime, None]]
    patch_url: NotRequired[str]
    url: NotRequired[str]


class WebhookIssuesAssignedPropIssuePropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookIssuesAssignedPropIssuePropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesClosedType(TypedDict):
    """issues closed event"""

    action: Literal["closed"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    issue: WebhookIssuesClosedPropIssueType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookIssuesClosedPropIssueType(TypedDict):
    """WebhookIssuesClosedPropIssue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        Literal["resolved", "off-topic", "too heated", "spam"], None
    ]
    assignee: NotRequired[Union[WebhookIssuesClosedPropIssueMergedAssigneeType, None]]
    assignees: List[WebhookIssuesClosedPropIssueMergedAssigneesType]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: Union[Union[str, None], None]
    closed_at: Union[datetime, None]
    comments: int
    comments_url: str
    created_at: datetime
    draft: NotRequired[bool]
    events_url: str
    html_url: str
    id: int
    labels: NotRequired[List[WebhookIssuesClosedPropIssueMergedLabelsType]]
    labels_url: str
    locked: NotRequired[bool]
    milestone: Union[WebhookIssuesClosedPropIssueMergedMilestoneType, None]
    node_id: str
    number: int
    performed_via_github_app: NotRequired[
        Union[WebhookIssuesClosedPropIssueMergedPerformedViaGithubAppType, None]
    ]
    pull_request: NotRequired[WebhookIssuesClosedPropIssueAllof0PropPullRequestType]
    reactions: WebhookIssuesClosedPropIssueMergedReactionsType
    repository_url: str
    state: Literal["open", "closed"]
    state_reason: NotRequired[Union[str, None]]
    timeline_url: NotRequired[str]
    title: str
    updated_at: datetime
    url: str
    user: WebhookIssuesClosedPropIssueMergedUserType


class WebhookIssuesClosedPropIssueAllof0Type(TypedDict):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    assignee: NotRequired[
        Union[WebhookIssuesClosedPropIssueAllof0PropAssigneeType, None]
    ]
    assignees: List[
        Union[WebhookIssuesClosedPropIssueAllof0PropAssigneesItemsType, None]
    ]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: Union[str, None]
    closed_at: Union[datetime, None]
    comments: int
    comments_url: str
    created_at: datetime
    draft: NotRequired[bool]
    events_url: str
    html_url: str
    id: int
    labels: NotRequired[List[WebhookIssuesClosedPropIssueAllof0PropLabelsItemsType]]
    labels_url: str
    locked: NotRequired[bool]
    milestone: Union[WebhookIssuesClosedPropIssueAllof0PropMilestoneType, None]
    node_id: str
    number: int
    performed_via_github_app: NotRequired[
        Union[WebhookIssuesClosedPropIssueAllof0PropPerformedViaGithubAppType, None]
    ]
    pull_request: NotRequired[WebhookIssuesClosedPropIssueAllof0PropPullRequestType]
    reactions: WebhookIssuesClosedPropIssueAllof0PropReactionsType
    repository_url: str
    state: NotRequired[Literal["open", "closed"]]
    state_reason: NotRequired[Union[str, None]]
    timeline_url: NotRequired[str]
    title: str
    updated_at: datetime
    url: str
    user: Union[WebhookIssuesClosedPropIssueAllof0PropUserType, None]


class WebhookIssuesClosedPropIssueAllof0PropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesClosedPropIssueAllof0PropAssigneesItemsType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesClosedPropIssueAllof0PropLabelsItemsType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookIssuesClosedPropIssueAllof0PropMilestonePropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesClosedPropIssueAllof0PropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[WebhookIssuesClosedPropIssueAllof0PropMilestonePropCreatorType, None]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookIssuesClosedPropIssueAllof0PropPerformedViaGithubAppPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesClosedPropIssueAllof0PropPerformedViaGithubAppPropPermissionsType(
    TypedDict
):
    """WebhookIssuesClosedPropIssueAllof0PropPerformedViaGithubAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: NotRequired[Literal["read", "write"]]
    administration: NotRequired[Literal["read", "write"]]
    checks: NotRequired[Literal["read", "write"]]
    content_references: NotRequired[Literal["read", "write"]]
    contents: NotRequired[Literal["read", "write"]]
    deployments: NotRequired[Literal["read", "write"]]
    discussions: NotRequired[Literal["read", "write"]]
    emails: NotRequired[Literal["read", "write"]]
    environments: NotRequired[Literal["read", "write"]]
    issues: NotRequired[Literal["read", "write"]]
    keys: NotRequired[Literal["read", "write"]]
    members: NotRequired[Literal["read", "write"]]
    metadata: NotRequired[Literal["read", "write"]]
    organization_administration: NotRequired[Literal["read", "write"]]
    organization_hooks: NotRequired[Literal["read", "write"]]
    organization_packages: NotRequired[Literal["read", "write"]]
    organization_plan: NotRequired[Literal["read", "write"]]
    organization_projects: NotRequired[Literal["read", "write", "admin"]]
    organization_secrets: NotRequired[Literal["read", "write"]]
    organization_self_hosted_runners: NotRequired[Literal["read", "write"]]
    organization_user_blocking: NotRequired[Literal["read", "write"]]
    packages: NotRequired[Literal["read", "write"]]
    pages: NotRequired[Literal["read", "write"]]
    pull_requests: NotRequired[Literal["read", "write"]]
    repository_hooks: NotRequired[Literal["read", "write"]]
    repository_projects: NotRequired[Literal["read", "write"]]
    secret_scanning_alerts: NotRequired[Literal["read", "write"]]
    secrets: NotRequired[Literal["read", "write"]]
    security_events: NotRequired[Literal["read", "write"]]
    security_scanning_alert: NotRequired[Literal["read", "write"]]
    single_file: NotRequired[Literal["read", "write"]]
    statuses: NotRequired[Literal["read", "write"]]
    team_discussions: NotRequired[Literal["read", "write"]]
    vulnerability_alerts: NotRequired[Literal["read", "write"]]
    workflows: NotRequired[Literal["read", "write"]]


class WebhookIssuesClosedPropIssueAllof0PropPerformedViaGithubAppType(TypedDict):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None]
    description: Union[str, None]
    events: NotRequired[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "security_and_analysis",
                "reminder",
                "pull_request_review_thread",
            ]
        ]
    ]
    external_url: Union[str, None]
    html_url: str
    id: Union[int, None]
    name: str
    node_id: str
    owner: Union[
        WebhookIssuesClosedPropIssueAllof0PropPerformedViaGithubAppPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookIssuesClosedPropIssueAllof0PropPerformedViaGithubAppPropPermissionsType
    ]
    slug: NotRequired[str]
    updated_at: Union[datetime, None]


class WebhookIssuesClosedPropIssueAllof0PropPullRequestType(TypedDict):
    """WebhookIssuesClosedPropIssueAllof0PropPullRequest"""

    diff_url: NotRequired[str]
    html_url: NotRequired[str]
    merged_at: NotRequired[Union[datetime, None]]
    patch_url: NotRequired[str]
    url: NotRequired[str]


class WebhookIssuesClosedPropIssueAllof0PropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookIssuesClosedPropIssueAllof0PropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesClosedPropIssueAllof1Type(TypedDict):
    """WebhookIssuesClosedPropIssueAllof1"""

    active_lock_reason: NotRequired[Union[str, None]]
    assignee: NotRequired[
        Union[WebhookIssuesClosedPropIssueAllof1PropAssigneeType, None]
    ]
    assignees: NotRequired[
        List[Union[WebhookIssuesClosedPropIssueAllof1PropAssigneesItemsType, None]]
    ]
    author_association: NotRequired[str]
    body: NotRequired[Union[str, None]]
    closed_at: Union[str, None]
    comments: NotRequired[int]
    comments_url: NotRequired[str]
    created_at: NotRequired[str]
    events_url: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    labels: NotRequired[
        List[Union[WebhookIssuesClosedPropIssueAllof1PropLabelsItemsType, None]]
    ]
    labels_url: NotRequired[str]
    locked: NotRequired[bool]
    milestone: NotRequired[
        Union[WebhookIssuesClosedPropIssueAllof1PropMilestoneType, None]
    ]
    node_id: NotRequired[str]
    number: NotRequired[int]
    performed_via_github_app: NotRequired[
        Union[WebhookIssuesClosedPropIssueAllof1PropPerformedViaGithubAppType, None]
    ]
    reactions: NotRequired[WebhookIssuesClosedPropIssueAllof1PropReactionsType]
    repository_url: NotRequired[str]
    state: Literal["closed", "open"]
    timeline_url: NotRequired[str]
    title: NotRequired[str]
    updated_at: NotRequired[str]
    url: NotRequired[str]
    user: NotRequired[WebhookIssuesClosedPropIssueAllof1PropUserType]


class WebhookIssuesClosedPropIssueAllof1PropAssigneeType(TypedDict):
    """WebhookIssuesClosedPropIssueAllof1PropAssignee"""


class WebhookIssuesClosedPropIssueAllof1PropAssigneesItemsType(TypedDict):
    """WebhookIssuesClosedPropIssueAllof1PropAssigneesItems"""


class WebhookIssuesClosedPropIssueAllof1PropLabelsItemsType(TypedDict):
    """WebhookIssuesClosedPropIssueAllof1PropLabelsItems"""


class WebhookIssuesClosedPropIssueAllof1PropMilestoneType(TypedDict):
    """WebhookIssuesClosedPropIssueAllof1PropMilestone"""


class WebhookIssuesClosedPropIssueAllof1PropPerformedViaGithubAppType(TypedDict):
    """WebhookIssuesClosedPropIssueAllof1PropPerformedViaGithubApp"""


class WebhookIssuesClosedPropIssueAllof1PropReactionsType(TypedDict):
    """WebhookIssuesClosedPropIssueAllof1PropReactions"""

    plus_one: NotRequired[int]
    minus_one: NotRequired[int]
    confused: NotRequired[int]
    eyes: NotRequired[int]
    heart: NotRequired[int]
    hooray: NotRequired[int]
    laugh: NotRequired[int]
    rocket: NotRequired[int]
    total_count: NotRequired[int]
    url: NotRequired[str]


class WebhookIssuesClosedPropIssueAllof1PropUserType(TypedDict):
    """WebhookIssuesClosedPropIssueAllof1PropUser"""

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookIssuesClosedPropIssueMergedAssigneeType(TypedDict):
    """WebhookIssuesClosedPropIssueMergedAssignee"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesClosedPropIssueMergedAssigneesType(TypedDict):
    """WebhookIssuesClosedPropIssueMergedAssignees"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesClosedPropIssueMergedLabelsType(TypedDict):
    """WebhookIssuesClosedPropIssueMergedLabels"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookIssuesClosedPropIssueMergedMilestoneType(TypedDict):
    """WebhookIssuesClosedPropIssueMergedMilestone"""

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[WebhookIssuesClosedPropIssueAllof0PropMilestonePropCreatorType, None]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookIssuesClosedPropIssueMergedPerformedViaGithubAppType(TypedDict):
    """WebhookIssuesClosedPropIssueMergedPerformedViaGithubApp"""

    created_at: Union[datetime, None]
    description: Union[str, None]
    events: NotRequired[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "security_and_analysis",
                "reminder",
                "pull_request_review_thread",
            ]
        ]
    ]
    external_url: Union[str, None]
    html_url: str
    id: Union[int, None]
    name: str
    node_id: str
    owner: Union[
        WebhookIssuesClosedPropIssueAllof0PropPerformedViaGithubAppPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookIssuesClosedPropIssueAllof0PropPerformedViaGithubAppPropPermissionsType
    ]
    slug: NotRequired[str]
    updated_at: Union[datetime, None]


class WebhookIssuesClosedPropIssueMergedReactionsType(TypedDict):
    """WebhookIssuesClosedPropIssueMergedReactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookIssuesClosedPropIssueMergedUserType(TypedDict):
    """WebhookIssuesClosedPropIssueMergedUser"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesDeletedType(TypedDict):
    """issues deleted event"""

    action: Literal["deleted"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    issue: WebhookIssuesDeletedPropIssueType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookIssuesDeletedPropIssueType(TypedDict):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    assignee: NotRequired[Union[WebhookIssuesDeletedPropIssuePropAssigneeType, None]]
    assignees: List[Union[WebhookIssuesDeletedPropIssuePropAssigneesItemsType, None]]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: Union[str, None]
    closed_at: Union[datetime, None]
    comments: int
    comments_url: str
    created_at: datetime
    draft: NotRequired[bool]
    events_url: str
    html_url: str
    id: int
    labels: NotRequired[List[WebhookIssuesDeletedPropIssuePropLabelsItemsType]]
    labels_url: str
    locked: NotRequired[bool]
    milestone: Union[WebhookIssuesDeletedPropIssuePropMilestoneType, None]
    node_id: str
    number: int
    performed_via_github_app: NotRequired[
        Union[WebhookIssuesDeletedPropIssuePropPerformedViaGithubAppType, None]
    ]
    pull_request: NotRequired[WebhookIssuesDeletedPropIssuePropPullRequestType]
    reactions: WebhookIssuesDeletedPropIssuePropReactionsType
    repository_url: str
    state: NotRequired[Literal["open", "closed"]]
    state_reason: NotRequired[Union[str, None]]
    timeline_url: NotRequired[str]
    title: str
    updated_at: datetime
    url: str
    user: Union[WebhookIssuesDeletedPropIssuePropUserType, None]


class WebhookIssuesDeletedPropIssuePropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesDeletedPropIssuePropAssigneesItemsType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesDeletedPropIssuePropLabelsItemsType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookIssuesDeletedPropIssuePropMilestonePropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesDeletedPropIssuePropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[WebhookIssuesDeletedPropIssuePropMilestonePropCreatorType, None]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookIssuesDeletedPropIssuePropPerformedViaGithubAppPropOwnerType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesDeletedPropIssuePropPerformedViaGithubAppPropPermissionsType(
    TypedDict
):
    """WebhookIssuesDeletedPropIssuePropPerformedViaGithubAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: NotRequired[Literal["read", "write"]]
    administration: NotRequired[Literal["read", "write"]]
    checks: NotRequired[Literal["read", "write"]]
    content_references: NotRequired[Literal["read", "write"]]
    contents: NotRequired[Literal["read", "write"]]
    deployments: NotRequired[Literal["read", "write"]]
    discussions: NotRequired[Literal["read", "write"]]
    emails: NotRequired[Literal["read", "write"]]
    environments: NotRequired[Literal["read", "write"]]
    issues: NotRequired[Literal["read", "write"]]
    keys: NotRequired[Literal["read", "write"]]
    members: NotRequired[Literal["read", "write"]]
    metadata: NotRequired[Literal["read", "write"]]
    organization_administration: NotRequired[Literal["read", "write"]]
    organization_hooks: NotRequired[Literal["read", "write"]]
    organization_packages: NotRequired[Literal["read", "write"]]
    organization_plan: NotRequired[Literal["read", "write"]]
    organization_projects: NotRequired[Literal["read", "write"]]
    organization_secrets: NotRequired[Literal["read", "write"]]
    organization_self_hosted_runners: NotRequired[Literal["read", "write"]]
    organization_user_blocking: NotRequired[Literal["read", "write"]]
    packages: NotRequired[Literal["read", "write"]]
    pages: NotRequired[Literal["read", "write"]]
    pull_requests: NotRequired[Literal["read", "write"]]
    repository_hooks: NotRequired[Literal["read", "write"]]
    repository_projects: NotRequired[Literal["read", "write"]]
    secret_scanning_alerts: NotRequired[Literal["read", "write"]]
    secrets: NotRequired[Literal["read", "write"]]
    security_events: NotRequired[Literal["read", "write"]]
    security_scanning_alert: NotRequired[Literal["read", "write"]]
    single_file: NotRequired[Literal["read", "write"]]
    statuses: NotRequired[Literal["read", "write"]]
    team_discussions: NotRequired[Literal["read", "write"]]
    vulnerability_alerts: NotRequired[Literal["read", "write"]]
    workflows: NotRequired[Literal["read", "write"]]


class WebhookIssuesDeletedPropIssuePropPerformedViaGithubAppType(TypedDict):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None]
    description: Union[str, None]
    events: NotRequired[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "reminder",
            ]
        ]
    ]
    external_url: Union[str, None]
    html_url: str
    id: Union[int, None]
    name: str
    node_id: str
    owner: Union[
        WebhookIssuesDeletedPropIssuePropPerformedViaGithubAppPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookIssuesDeletedPropIssuePropPerformedViaGithubAppPropPermissionsType
    ]
    slug: NotRequired[str]
    updated_at: Union[datetime, None]


class WebhookIssuesDeletedPropIssuePropPullRequestType(TypedDict):
    """WebhookIssuesDeletedPropIssuePropPullRequest"""

    diff_url: NotRequired[str]
    html_url: NotRequired[str]
    merged_at: NotRequired[Union[datetime, None]]
    patch_url: NotRequired[str]
    url: NotRequired[str]


class WebhookIssuesDeletedPropIssuePropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookIssuesDeletedPropIssuePropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesDemilestonedType(TypedDict):
    """issues demilestoned event"""

    action: Literal["demilestoned"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    issue: WebhookIssuesDemilestonedPropIssueType
    milestone: NotRequired[WebhookIssuesDemilestonedPropMilestoneType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookIssuesDemilestonedPropIssueType(TypedDict):
    """WebhookIssuesDemilestonedPropIssue"""

    active_lock_reason: Union[
        Literal["resolved", "off-topic", "too heated", "spam"], None
    ]
    assignee: NotRequired[
        Union[WebhookIssuesDemilestonedPropIssueMergedAssigneeType, None]
    ]
    assignees: List[WebhookIssuesDemilestonedPropIssueMergedAssigneesType]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: Union[Union[str, None], None]
    closed_at: Union[datetime, None]
    comments: int
    comments_url: str
    created_at: datetime
    draft: NotRequired[bool]
    events_url: str
    html_url: str
    id: int
    labels: NotRequired[List[WebhookIssuesDemilestonedPropIssueMergedLabelsType]]
    labels_url: str
    locked: NotRequired[bool]
    milestone: Union[
        Union[WebhookIssuesDemilestonedPropIssueAllof0PropMilestoneType, None], None
    ]
    node_id: str
    number: int
    performed_via_github_app: NotRequired[
        Union[WebhookIssuesDemilestonedPropIssueMergedPerformedViaGithubAppType, None]
    ]
    pull_request: NotRequired[
        WebhookIssuesDemilestonedPropIssueAllof0PropPullRequestType
    ]
    reactions: WebhookIssuesDemilestonedPropIssueMergedReactionsType
    repository_url: str
    state: NotRequired[Literal["open", "closed"]]
    state_reason: NotRequired[Union[str, None]]
    timeline_url: NotRequired[str]
    title: str
    updated_at: datetime
    url: str
    user: WebhookIssuesDemilestonedPropIssueMergedUserType


class WebhookIssuesDemilestonedPropIssueAllof0Type(TypedDict):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    assignee: NotRequired[
        Union[WebhookIssuesDemilestonedPropIssueAllof0PropAssigneeType, None]
    ]
    assignees: List[
        Union[WebhookIssuesDemilestonedPropIssueAllof0PropAssigneesItemsType, None]
    ]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: Union[str, None]
    closed_at: Union[datetime, None]
    comments: int
    comments_url: str
    created_at: datetime
    draft: NotRequired[bool]
    events_url: str
    html_url: str
    id: int
    labels: NotRequired[
        List[WebhookIssuesDemilestonedPropIssueAllof0PropLabelsItemsType]
    ]
    labels_url: str
    locked: NotRequired[bool]
    milestone: Union[WebhookIssuesDemilestonedPropIssueAllof0PropMilestoneType, None]
    node_id: str
    number: int
    performed_via_github_app: NotRequired[
        Union[
            WebhookIssuesDemilestonedPropIssueAllof0PropPerformedViaGithubAppType, None
        ]
    ]
    pull_request: NotRequired[
        WebhookIssuesDemilestonedPropIssueAllof0PropPullRequestType
    ]
    reactions: WebhookIssuesDemilestonedPropIssueAllof0PropReactionsType
    repository_url: str
    state: NotRequired[Literal["open", "closed"]]
    state_reason: NotRequired[Union[str, None]]
    timeline_url: NotRequired[str]
    title: str
    updated_at: datetime
    url: str
    user: Union[WebhookIssuesDemilestonedPropIssueAllof0PropUserType, None]


class WebhookIssuesDemilestonedPropIssueAllof0PropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesDemilestonedPropIssueAllof0PropAssigneesItemsType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesDemilestonedPropIssueAllof0PropLabelsItemsType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookIssuesDemilestonedPropIssueAllof0PropMilestonePropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesDemilestonedPropIssueAllof0PropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[
        WebhookIssuesDemilestonedPropIssueAllof0PropMilestonePropCreatorType, None
    ]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookIssuesDemilestonedPropIssueAllof0PropPerformedViaGithubAppPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesDemilestonedPropIssueAllof0PropPerformedViaGithubAppPropPermissionsType(
    TypedDict
):
    """WebhookIssuesDemilestonedPropIssueAllof0PropPerformedViaGithubAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: NotRequired[Literal["read", "write"]]
    administration: NotRequired[Literal["read", "write"]]
    checks: NotRequired[Literal["read", "write"]]
    content_references: NotRequired[Literal["read", "write"]]
    contents: NotRequired[Literal["read", "write"]]
    deployments: NotRequired[Literal["read", "write"]]
    discussions: NotRequired[Literal["read", "write"]]
    emails: NotRequired[Literal["read", "write"]]
    environments: NotRequired[Literal["read", "write"]]
    issues: NotRequired[Literal["read", "write"]]
    keys: NotRequired[Literal["read", "write"]]
    members: NotRequired[Literal["read", "write"]]
    metadata: NotRequired[Literal["read", "write"]]
    organization_administration: NotRequired[Literal["read", "write"]]
    organization_hooks: NotRequired[Literal["read", "write"]]
    organization_packages: NotRequired[Literal["read", "write"]]
    organization_plan: NotRequired[Literal["read", "write"]]
    organization_projects: NotRequired[Literal["read", "write", "admin"]]
    organization_secrets: NotRequired[Literal["read", "write"]]
    organization_self_hosted_runners: NotRequired[Literal["read", "write"]]
    organization_user_blocking: NotRequired[Literal["read", "write"]]
    packages: NotRequired[Literal["read", "write"]]
    pages: NotRequired[Literal["read", "write"]]
    pull_requests: NotRequired[Literal["read", "write"]]
    repository_hooks: NotRequired[Literal["read", "write"]]
    repository_projects: NotRequired[Literal["read", "write"]]
    secret_scanning_alerts: NotRequired[Literal["read", "write"]]
    secrets: NotRequired[Literal["read", "write"]]
    security_events: NotRequired[Literal["read", "write"]]
    security_scanning_alert: NotRequired[Literal["read", "write"]]
    single_file: NotRequired[Literal["read", "write"]]
    statuses: NotRequired[Literal["read", "write"]]
    team_discussions: NotRequired[Literal["read", "write"]]
    vulnerability_alerts: NotRequired[Literal["read", "write"]]
    workflows: NotRequired[Literal["read", "write"]]


class WebhookIssuesDemilestonedPropIssueAllof0PropPerformedViaGithubAppType(TypedDict):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None]
    description: Union[str, None]
    events: NotRequired[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
            ]
        ]
    ]
    external_url: Union[str, None]
    html_url: str
    id: Union[int, None]
    name: str
    node_id: str
    owner: Union[
        WebhookIssuesDemilestonedPropIssueAllof0PropPerformedViaGithubAppPropOwnerType,
        None,
    ]
    permissions: NotRequired[
        WebhookIssuesDemilestonedPropIssueAllof0PropPerformedViaGithubAppPropPermissionsType
    ]
    slug: NotRequired[str]
    updated_at: Union[datetime, None]


class WebhookIssuesDemilestonedPropIssueAllof0PropPullRequestType(TypedDict):
    """WebhookIssuesDemilestonedPropIssueAllof0PropPullRequest"""

    diff_url: NotRequired[str]
    html_url: NotRequired[str]
    merged_at: NotRequired[Union[datetime, None]]
    patch_url: NotRequired[str]
    url: NotRequired[str]


class WebhookIssuesDemilestonedPropIssueAllof0PropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookIssuesDemilestonedPropIssueAllof0PropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesDemilestonedPropIssueAllof1Type(TypedDict):
    """WebhookIssuesDemilestonedPropIssueAllof1"""

    active_lock_reason: NotRequired[Union[str, None]]
    assignee: NotRequired[
        Union[WebhookIssuesDemilestonedPropIssueAllof1PropAssigneeType, None]
    ]
    assignees: NotRequired[
        List[
            Union[WebhookIssuesDemilestonedPropIssueAllof1PropAssigneesItemsType, None]
        ]
    ]
    author_association: NotRequired[str]
    body: NotRequired[Union[str, None]]
    closed_at: NotRequired[Union[str, None]]
    comments: NotRequired[int]
    comments_url: NotRequired[str]
    created_at: NotRequired[str]
    events_url: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    labels: NotRequired[
        List[Union[WebhookIssuesDemilestonedPropIssueAllof1PropLabelsItemsType, None]]
    ]
    labels_url: NotRequired[str]
    locked: NotRequired[bool]
    milestone: Union[WebhookIssuesDemilestonedPropIssueAllof1PropMilestoneType, None]
    node_id: NotRequired[str]
    number: NotRequired[int]
    performed_via_github_app: NotRequired[
        Union[
            WebhookIssuesDemilestonedPropIssueAllof1PropPerformedViaGithubAppType, None
        ]
    ]
    reactions: NotRequired[WebhookIssuesDemilestonedPropIssueAllof1PropReactionsType]
    repository_url: NotRequired[str]
    state: NotRequired[str]
    timeline_url: NotRequired[str]
    title: NotRequired[str]
    updated_at: NotRequired[str]
    url: NotRequired[str]
    user: NotRequired[WebhookIssuesDemilestonedPropIssueAllof1PropUserType]


class WebhookIssuesDemilestonedPropIssueAllof1PropAssigneeType(TypedDict):
    """WebhookIssuesDemilestonedPropIssueAllof1PropAssignee"""


class WebhookIssuesDemilestonedPropIssueAllof1PropAssigneesItemsType(TypedDict):
    """WebhookIssuesDemilestonedPropIssueAllof1PropAssigneesItems"""


class WebhookIssuesDemilestonedPropIssueAllof1PropLabelsItemsType(TypedDict):
    """WebhookIssuesDemilestonedPropIssueAllof1PropLabelsItems"""


class WebhookIssuesDemilestonedPropIssueAllof1PropMilestonePropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesDemilestonedPropIssueAllof1PropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[
        WebhookIssuesDemilestonedPropIssueAllof1PropMilestonePropCreatorType, None
    ]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookIssuesDemilestonedPropIssueAllof1PropPerformedViaGithubAppType(TypedDict):
    """WebhookIssuesDemilestonedPropIssueAllof1PropPerformedViaGithubApp"""


class WebhookIssuesDemilestonedPropIssueAllof1PropReactionsType(TypedDict):
    """WebhookIssuesDemilestonedPropIssueAllof1PropReactions"""

    plus_one: NotRequired[int]
    minus_one: NotRequired[int]
    confused: NotRequired[int]
    eyes: NotRequired[int]
    heart: NotRequired[int]
    hooray: NotRequired[int]
    laugh: NotRequired[int]
    rocket: NotRequired[int]
    total_count: NotRequired[int]
    url: NotRequired[str]


class WebhookIssuesDemilestonedPropIssueAllof1PropUserType(TypedDict):
    """WebhookIssuesDemilestonedPropIssueAllof1PropUser"""

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookIssuesDemilestonedPropIssueMergedAssigneeType(TypedDict):
    """WebhookIssuesDemilestonedPropIssueMergedAssignee"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesDemilestonedPropIssueMergedAssigneesType(TypedDict):
    """WebhookIssuesDemilestonedPropIssueMergedAssignees"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesDemilestonedPropIssueMergedLabelsType(TypedDict):
    """WebhookIssuesDemilestonedPropIssueMergedLabels"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookIssuesDemilestonedPropIssueMergedPerformedViaGithubAppType(TypedDict):
    """WebhookIssuesDemilestonedPropIssueMergedPerformedViaGithubApp"""

    created_at: Union[datetime, None]
    description: Union[str, None]
    events: NotRequired[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
            ]
        ]
    ]
    external_url: Union[str, None]
    html_url: str
    id: Union[int, None]
    name: str
    node_id: str
    owner: Union[
        WebhookIssuesDemilestonedPropIssueAllof0PropPerformedViaGithubAppPropOwnerType,
        None,
    ]
    permissions: NotRequired[
        WebhookIssuesDemilestonedPropIssueAllof0PropPerformedViaGithubAppPropPermissionsType
    ]
    slug: NotRequired[str]
    updated_at: Union[datetime, None]


class WebhookIssuesDemilestonedPropIssueMergedReactionsType(TypedDict):
    """WebhookIssuesDemilestonedPropIssueMergedReactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookIssuesDemilestonedPropIssueMergedUserType(TypedDict):
    """WebhookIssuesDemilestonedPropIssueMergedUser"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesDemilestonedPropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[WebhookIssuesDemilestonedPropMilestonePropCreatorType, None]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookIssuesDemilestonedPropMilestonePropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesEditedType(TypedDict):
    """issues edited event"""

    action: Literal["edited"]
    changes: WebhookIssuesEditedPropChangesType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    issue: WebhookIssuesEditedPropIssueType
    label: NotRequired[WebhookIssuesEditedPropLabelType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookIssuesEditedPropChangesType(TypedDict):
    """WebhookIssuesEditedPropChanges

    The changes to the issue.
    """

    body: NotRequired[WebhookIssuesEditedPropChangesPropBodyType]
    title: NotRequired[WebhookIssuesEditedPropChangesPropTitleType]


class WebhookIssuesEditedPropChangesPropBodyType(TypedDict):
    """WebhookIssuesEditedPropChangesPropBody"""

    from_: str


class WebhookIssuesEditedPropChangesPropTitleType(TypedDict):
    """WebhookIssuesEditedPropChangesPropTitle"""

    from_: str


class WebhookIssuesEditedPropIssueType(TypedDict):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    assignee: NotRequired[Union[WebhookIssuesEditedPropIssuePropAssigneeType, None]]
    assignees: List[Union[WebhookIssuesEditedPropIssuePropAssigneesItemsType, None]]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: Union[str, None]
    closed_at: Union[datetime, None]
    comments: int
    comments_url: str
    created_at: datetime
    draft: NotRequired[bool]
    events_url: str
    html_url: str
    id: int
    labels: NotRequired[List[WebhookIssuesEditedPropIssuePropLabelsItemsType]]
    labels_url: str
    locked: NotRequired[bool]
    milestone: Union[WebhookIssuesEditedPropIssuePropMilestoneType, None]
    node_id: str
    number: int
    performed_via_github_app: NotRequired[
        Union[WebhookIssuesEditedPropIssuePropPerformedViaGithubAppType, None]
    ]
    pull_request: NotRequired[WebhookIssuesEditedPropIssuePropPullRequestType]
    reactions: WebhookIssuesEditedPropIssuePropReactionsType
    repository_url: str
    state: NotRequired[Literal["open", "closed"]]
    state_reason: NotRequired[Union[str, None]]
    timeline_url: NotRequired[str]
    title: str
    updated_at: datetime
    url: str
    user: Union[WebhookIssuesEditedPropIssuePropUserType, None]


class WebhookIssuesEditedPropIssuePropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesEditedPropIssuePropAssigneesItemsType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesEditedPropIssuePropLabelsItemsType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookIssuesEditedPropIssuePropMilestonePropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesEditedPropIssuePropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[WebhookIssuesEditedPropIssuePropMilestonePropCreatorType, None]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookIssuesEditedPropIssuePropPerformedViaGithubAppPropOwnerType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesEditedPropIssuePropPerformedViaGithubAppPropPermissionsType(
    TypedDict
):
    """WebhookIssuesEditedPropIssuePropPerformedViaGithubAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: NotRequired[Literal["read", "write"]]
    administration: NotRequired[Literal["read", "write"]]
    checks: NotRequired[Literal["read", "write"]]
    content_references: NotRequired[Literal["read", "write"]]
    contents: NotRequired[Literal["read", "write"]]
    deployments: NotRequired[Literal["read", "write"]]
    discussions: NotRequired[Literal["read", "write"]]
    emails: NotRequired[Literal["read", "write"]]
    environments: NotRequired[Literal["read", "write"]]
    issues: NotRequired[Literal["read", "write"]]
    keys: NotRequired[Literal["read", "write"]]
    members: NotRequired[Literal["read", "write"]]
    metadata: NotRequired[Literal["read", "write"]]
    organization_administration: NotRequired[Literal["read", "write"]]
    organization_hooks: NotRequired[Literal["read", "write"]]
    organization_packages: NotRequired[Literal["read", "write"]]
    organization_plan: NotRequired[Literal["read", "write"]]
    organization_projects: NotRequired[Literal["read", "write", "admin"]]
    organization_secrets: NotRequired[Literal["read", "write"]]
    organization_self_hosted_runners: NotRequired[Literal["read", "write"]]
    organization_user_blocking: NotRequired[Literal["read", "write"]]
    packages: NotRequired[Literal["read", "write"]]
    pages: NotRequired[Literal["read", "write"]]
    pull_requests: NotRequired[Literal["read", "write"]]
    repository_hooks: NotRequired[Literal["read", "write"]]
    repository_projects: NotRequired[Literal["read", "write"]]
    secret_scanning_alerts: NotRequired[Literal["read", "write"]]
    secrets: NotRequired[Literal["read", "write"]]
    security_events: NotRequired[Literal["read", "write"]]
    security_scanning_alert: NotRequired[Literal["read", "write"]]
    single_file: NotRequired[Literal["read", "write"]]
    statuses: NotRequired[Literal["read", "write"]]
    team_discussions: NotRequired[Literal["read", "write"]]
    vulnerability_alerts: NotRequired[Literal["read", "write"]]
    workflows: NotRequired[Literal["read", "write"]]


class WebhookIssuesEditedPropIssuePropPerformedViaGithubAppType(TypedDict):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None]
    description: Union[str, None]
    events: NotRequired[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "security_and_analysis",
                "pull_request_review_thread",
                "reminder",
            ]
        ]
    ]
    external_url: Union[str, None]
    html_url: str
    id: Union[int, None]
    name: str
    node_id: str
    owner: Union[
        WebhookIssuesEditedPropIssuePropPerformedViaGithubAppPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookIssuesEditedPropIssuePropPerformedViaGithubAppPropPermissionsType
    ]
    slug: NotRequired[str]
    updated_at: Union[datetime, None]


class WebhookIssuesEditedPropIssuePropPullRequestType(TypedDict):
    """WebhookIssuesEditedPropIssuePropPullRequest"""

    diff_url: NotRequired[str]
    html_url: NotRequired[str]
    merged_at: NotRequired[Union[datetime, None]]
    patch_url: NotRequired[str]
    url: NotRequired[str]


class WebhookIssuesEditedPropIssuePropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookIssuesEditedPropIssuePropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesEditedPropLabelType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookIssuesLabeledType(TypedDict):
    """issues labeled event"""

    action: Literal["labeled"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    issue: WebhookIssuesLabeledPropIssueType
    label: NotRequired[WebhookIssuesLabeledPropLabelType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookIssuesLabeledPropIssueType(TypedDict):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    assignee: NotRequired[Union[WebhookIssuesLabeledPropIssuePropAssigneeType, None]]
    assignees: List[Union[WebhookIssuesLabeledPropIssuePropAssigneesItemsType, None]]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: Union[str, None]
    closed_at: Union[datetime, None]
    comments: int
    comments_url: str
    created_at: datetime
    draft: NotRequired[bool]
    events_url: str
    html_url: str
    id: int
    labels: NotRequired[List[WebhookIssuesLabeledPropIssuePropLabelsItemsType]]
    labels_url: str
    locked: NotRequired[bool]
    milestone: Union[WebhookIssuesLabeledPropIssuePropMilestoneType, None]
    node_id: str
    number: int
    performed_via_github_app: NotRequired[
        Union[WebhookIssuesLabeledPropIssuePropPerformedViaGithubAppType, None]
    ]
    pull_request: NotRequired[WebhookIssuesLabeledPropIssuePropPullRequestType]
    reactions: WebhookIssuesLabeledPropIssuePropReactionsType
    repository_url: str
    state: NotRequired[Literal["open", "closed"]]
    state_reason: NotRequired[Union[str, None]]
    timeline_url: NotRequired[str]
    title: str
    updated_at: datetime
    url: str
    user: Union[WebhookIssuesLabeledPropIssuePropUserType, None]


class WebhookIssuesLabeledPropIssuePropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesLabeledPropIssuePropAssigneesItemsType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesLabeledPropIssuePropLabelsItemsType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookIssuesLabeledPropIssuePropMilestonePropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesLabeledPropIssuePropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[WebhookIssuesLabeledPropIssuePropMilestonePropCreatorType, None]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookIssuesLabeledPropIssuePropPerformedViaGithubAppPropOwnerType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesLabeledPropIssuePropPerformedViaGithubAppPropPermissionsType(
    TypedDict
):
    """WebhookIssuesLabeledPropIssuePropPerformedViaGithubAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: NotRequired[Literal["read", "write"]]
    administration: NotRequired[Literal["read", "write"]]
    checks: NotRequired[Literal["read", "write"]]
    content_references: NotRequired[Literal["read", "write"]]
    contents: NotRequired[Literal["read", "write"]]
    deployments: NotRequired[Literal["read", "write"]]
    discussions: NotRequired[Literal["read", "write"]]
    emails: NotRequired[Literal["read", "write"]]
    environments: NotRequired[Literal["read", "write"]]
    issues: NotRequired[Literal["read", "write"]]
    keys: NotRequired[Literal["read", "write"]]
    members: NotRequired[Literal["read", "write"]]
    metadata: NotRequired[Literal["read", "write"]]
    organization_administration: NotRequired[Literal["read", "write"]]
    organization_hooks: NotRequired[Literal["read", "write"]]
    organization_packages: NotRequired[Literal["read", "write"]]
    organization_plan: NotRequired[Literal["read", "write"]]
    organization_projects: NotRequired[Literal["read", "write", "admin"]]
    organization_secrets: NotRequired[Literal["read", "write"]]
    organization_self_hosted_runners: NotRequired[Literal["read", "write"]]
    organization_user_blocking: NotRequired[Literal["read", "write"]]
    packages: NotRequired[Literal["read", "write"]]
    pages: NotRequired[Literal["read", "write"]]
    pull_requests: NotRequired[Literal["read", "write"]]
    repository_hooks: NotRequired[Literal["read", "write"]]
    repository_projects: NotRequired[Literal["read", "write"]]
    secret_scanning_alerts: NotRequired[Literal["read", "write"]]
    secrets: NotRequired[Literal["read", "write"]]
    security_events: NotRequired[Literal["read", "write"]]
    security_scanning_alert: NotRequired[Literal["read", "write"]]
    single_file: NotRequired[Literal["read", "write"]]
    statuses: NotRequired[Literal["read", "write"]]
    team_discussions: NotRequired[Literal["read", "write"]]
    vulnerability_alerts: NotRequired[Literal["read", "write"]]
    workflows: NotRequired[Literal["read", "write"]]


class WebhookIssuesLabeledPropIssuePropPerformedViaGithubAppType(TypedDict):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None]
    description: Union[str, None]
    events: NotRequired[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "pull_request_review_thread",
                "reminder",
            ]
        ]
    ]
    external_url: Union[str, None]
    html_url: str
    id: Union[int, None]
    name: str
    node_id: str
    owner: Union[
        WebhookIssuesLabeledPropIssuePropPerformedViaGithubAppPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookIssuesLabeledPropIssuePropPerformedViaGithubAppPropPermissionsType
    ]
    slug: NotRequired[str]
    updated_at: Union[datetime, None]


class WebhookIssuesLabeledPropIssuePropPullRequestType(TypedDict):
    """WebhookIssuesLabeledPropIssuePropPullRequest"""

    diff_url: NotRequired[str]
    html_url: NotRequired[str]
    merged_at: NotRequired[Union[datetime, None]]
    patch_url: NotRequired[str]
    url: NotRequired[str]


class WebhookIssuesLabeledPropIssuePropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookIssuesLabeledPropIssuePropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesLabeledPropLabelType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookIssuesLockedType(TypedDict):
    """issues locked event"""

    action: Literal["locked"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    issue: WebhookIssuesLockedPropIssueType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookIssuesLockedPropIssueType(TypedDict):
    """WebhookIssuesLockedPropIssue"""

    active_lock_reason: Union[
        Union[None, Literal["resolved", "off-topic", "too heated", "spam"]], None
    ]
    assignee: NotRequired[Union[WebhookIssuesLockedPropIssueMergedAssigneeType, None]]
    assignees: List[WebhookIssuesLockedPropIssueMergedAssigneesType]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: Union[Union[str, None], None]
    closed_at: Union[datetime, None]
    comments: int
    comments_url: str
    created_at: datetime
    draft: NotRequired[bool]
    events_url: str
    html_url: str
    id: int
    labels: NotRequired[List[WebhookIssuesLockedPropIssueMergedLabelsType]]
    labels_url: str
    locked: Literal[True]
    milestone: Union[WebhookIssuesLockedPropIssueMergedMilestoneType, None]
    node_id: str
    number: int
    performed_via_github_app: NotRequired[
        Union[WebhookIssuesLockedPropIssueMergedPerformedViaGithubAppType, None]
    ]
    pull_request: NotRequired[WebhookIssuesLockedPropIssueAllof0PropPullRequestType]
    reactions: WebhookIssuesLockedPropIssueMergedReactionsType
    repository_url: str
    state: NotRequired[Literal["open", "closed"]]
    state_reason: NotRequired[Union[str, None]]
    timeline_url: NotRequired[str]
    title: str
    updated_at: datetime
    url: str
    user: WebhookIssuesLockedPropIssueMergedUserType


class WebhookIssuesLockedPropIssueAllof0Type(TypedDict):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    assignee: NotRequired[
        Union[WebhookIssuesLockedPropIssueAllof0PropAssigneeType, None]
    ]
    assignees: List[
        Union[WebhookIssuesLockedPropIssueAllof0PropAssigneesItemsType, None]
    ]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: Union[str, None]
    closed_at: Union[datetime, None]
    comments: int
    comments_url: str
    created_at: datetime
    draft: NotRequired[bool]
    events_url: str
    html_url: str
    id: int
    labels: NotRequired[List[WebhookIssuesLockedPropIssueAllof0PropLabelsItemsType]]
    labels_url: str
    locked: NotRequired[bool]
    milestone: Union[WebhookIssuesLockedPropIssueAllof0PropMilestoneType, None]
    node_id: str
    number: int
    performed_via_github_app: NotRequired[
        Union[WebhookIssuesLockedPropIssueAllof0PropPerformedViaGithubAppType, None]
    ]
    pull_request: NotRequired[WebhookIssuesLockedPropIssueAllof0PropPullRequestType]
    reactions: WebhookIssuesLockedPropIssueAllof0PropReactionsType
    repository_url: str
    state: NotRequired[Literal["open", "closed"]]
    state_reason: NotRequired[Union[str, None]]
    timeline_url: NotRequired[str]
    title: str
    updated_at: datetime
    url: str
    user: Union[WebhookIssuesLockedPropIssueAllof0PropUserType, None]


class WebhookIssuesLockedPropIssueAllof0PropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesLockedPropIssueAllof0PropAssigneesItemsType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesLockedPropIssueAllof0PropLabelsItemsType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookIssuesLockedPropIssueAllof0PropMilestonePropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesLockedPropIssueAllof0PropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[WebhookIssuesLockedPropIssueAllof0PropMilestonePropCreatorType, None]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookIssuesLockedPropIssueAllof0PropPerformedViaGithubAppPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesLockedPropIssueAllof0PropPerformedViaGithubAppPropPermissionsType(
    TypedDict
):
    """WebhookIssuesLockedPropIssueAllof0PropPerformedViaGithubAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: NotRequired[Literal["read", "write"]]
    administration: NotRequired[Literal["read", "write"]]
    checks: NotRequired[Literal["read", "write"]]
    content_references: NotRequired[Literal["read", "write"]]
    contents: NotRequired[Literal["read", "write"]]
    deployments: NotRequired[Literal["read", "write"]]
    discussions: NotRequired[Literal["read", "write"]]
    emails: NotRequired[Literal["read", "write"]]
    environments: NotRequired[Literal["read", "write"]]
    issues: NotRequired[Literal["read", "write"]]
    keys: NotRequired[Literal["read", "write"]]
    members: NotRequired[Literal["read", "write"]]
    metadata: NotRequired[Literal["read", "write"]]
    organization_administration: NotRequired[Literal["read", "write"]]
    organization_hooks: NotRequired[Literal["read", "write"]]
    organization_packages: NotRequired[Literal["read", "write"]]
    organization_plan: NotRequired[Literal["read", "write"]]
    organization_projects: NotRequired[Literal["read", "write"]]
    organization_secrets: NotRequired[Literal["read", "write"]]
    organization_self_hosted_runners: NotRequired[Literal["read", "write"]]
    organization_user_blocking: NotRequired[Literal["read", "write"]]
    packages: NotRequired[Literal["read", "write"]]
    pages: NotRequired[Literal["read", "write"]]
    pull_requests: NotRequired[Literal["read", "write"]]
    repository_hooks: NotRequired[Literal["read", "write"]]
    repository_projects: NotRequired[Literal["read", "write"]]
    secret_scanning_alerts: NotRequired[Literal["read", "write"]]
    secrets: NotRequired[Literal["read", "write"]]
    security_events: NotRequired[Literal["read", "write"]]
    security_scanning_alert: NotRequired[Literal["read", "write"]]
    single_file: NotRequired[Literal["read", "write"]]
    statuses: NotRequired[Literal["read", "write"]]
    team_discussions: NotRequired[Literal["read", "write"]]
    vulnerability_alerts: NotRequired[Literal["read", "write"]]
    workflows: NotRequired[Literal["read", "write"]]


class WebhookIssuesLockedPropIssueAllof0PropPerformedViaGithubAppType(TypedDict):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None]
    description: Union[str, None]
    events: NotRequired[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "reminder",
                "security_and_analysis",
            ]
        ]
    ]
    external_url: Union[str, None]
    html_url: str
    id: Union[int, None]
    name: str
    node_id: str
    owner: Union[
        WebhookIssuesLockedPropIssueAllof0PropPerformedViaGithubAppPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookIssuesLockedPropIssueAllof0PropPerformedViaGithubAppPropPermissionsType
    ]
    slug: NotRequired[str]
    updated_at: Union[datetime, None]


class WebhookIssuesLockedPropIssueAllof0PropPullRequestType(TypedDict):
    """WebhookIssuesLockedPropIssueAllof0PropPullRequest"""

    diff_url: NotRequired[str]
    html_url: NotRequired[str]
    merged_at: NotRequired[Union[datetime, None]]
    patch_url: NotRequired[str]
    url: NotRequired[str]


class WebhookIssuesLockedPropIssueAllof0PropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookIssuesLockedPropIssueAllof0PropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesLockedPropIssueAllof1Type(TypedDict):
    """WebhookIssuesLockedPropIssueAllof1"""

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    assignee: NotRequired[
        Union[WebhookIssuesLockedPropIssueAllof1PropAssigneeType, None]
    ]
    assignees: NotRequired[
        List[Union[WebhookIssuesLockedPropIssueAllof1PropAssigneesItemsType, None]]
    ]
    author_association: NotRequired[str]
    body: NotRequired[Union[str, None]]
    closed_at: NotRequired[Union[str, None]]
    comments: NotRequired[int]
    comments_url: NotRequired[str]
    created_at: NotRequired[str]
    events_url: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    labels: NotRequired[
        List[Union[WebhookIssuesLockedPropIssueAllof1PropLabelsItemsType, None]]
    ]
    labels_url: NotRequired[str]
    locked: Literal[True]
    milestone: NotRequired[
        Union[WebhookIssuesLockedPropIssueAllof1PropMilestoneType, None]
    ]
    node_id: NotRequired[str]
    number: NotRequired[int]
    performed_via_github_app: NotRequired[
        Union[WebhookIssuesLockedPropIssueAllof1PropPerformedViaGithubAppType, None]
    ]
    reactions: NotRequired[WebhookIssuesLockedPropIssueAllof1PropReactionsType]
    repository_url: NotRequired[str]
    state: NotRequired[str]
    timeline_url: NotRequired[str]
    title: NotRequired[str]
    updated_at: NotRequired[str]
    url: NotRequired[str]
    user: NotRequired[WebhookIssuesLockedPropIssueAllof1PropUserType]


class WebhookIssuesLockedPropIssueAllof1PropAssigneeType(TypedDict):
    """WebhookIssuesLockedPropIssueAllof1PropAssignee"""


class WebhookIssuesLockedPropIssueAllof1PropAssigneesItemsType(TypedDict):
    """WebhookIssuesLockedPropIssueAllof1PropAssigneesItems"""


class WebhookIssuesLockedPropIssueAllof1PropLabelsItemsType(TypedDict):
    """WebhookIssuesLockedPropIssueAllof1PropLabelsItems"""


class WebhookIssuesLockedPropIssueAllof1PropMilestoneType(TypedDict):
    """WebhookIssuesLockedPropIssueAllof1PropMilestone"""


class WebhookIssuesLockedPropIssueAllof1PropPerformedViaGithubAppType(TypedDict):
    """WebhookIssuesLockedPropIssueAllof1PropPerformedViaGithubApp"""


class WebhookIssuesLockedPropIssueAllof1PropReactionsType(TypedDict):
    """WebhookIssuesLockedPropIssueAllof1PropReactions"""

    plus_one: NotRequired[int]
    minus_one: NotRequired[int]
    confused: NotRequired[int]
    eyes: NotRequired[int]
    heart: NotRequired[int]
    hooray: NotRequired[int]
    laugh: NotRequired[int]
    rocket: NotRequired[int]
    total_count: NotRequired[int]
    url: NotRequired[str]


class WebhookIssuesLockedPropIssueAllof1PropUserType(TypedDict):
    """WebhookIssuesLockedPropIssueAllof1PropUser"""

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookIssuesLockedPropIssueMergedAssigneeType(TypedDict):
    """WebhookIssuesLockedPropIssueMergedAssignee"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesLockedPropIssueMergedAssigneesType(TypedDict):
    """WebhookIssuesLockedPropIssueMergedAssignees"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesLockedPropIssueMergedLabelsType(TypedDict):
    """WebhookIssuesLockedPropIssueMergedLabels"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookIssuesLockedPropIssueMergedMilestoneType(TypedDict):
    """WebhookIssuesLockedPropIssueMergedMilestone"""

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[WebhookIssuesLockedPropIssueAllof0PropMilestonePropCreatorType, None]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookIssuesLockedPropIssueMergedPerformedViaGithubAppType(TypedDict):
    """WebhookIssuesLockedPropIssueMergedPerformedViaGithubApp"""

    created_at: Union[datetime, None]
    description: Union[str, None]
    events: NotRequired[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "reminder",
                "security_and_analysis",
            ]
        ]
    ]
    external_url: Union[str, None]
    html_url: str
    id: Union[int, None]
    name: str
    node_id: str
    owner: Union[
        WebhookIssuesLockedPropIssueAllof0PropPerformedViaGithubAppPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookIssuesLockedPropIssueAllof0PropPerformedViaGithubAppPropPermissionsType
    ]
    slug: NotRequired[str]
    updated_at: Union[datetime, None]


class WebhookIssuesLockedPropIssueMergedReactionsType(TypedDict):
    """WebhookIssuesLockedPropIssueMergedReactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookIssuesLockedPropIssueMergedUserType(TypedDict):
    """WebhookIssuesLockedPropIssueMergedUser"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesMilestonedType(TypedDict):
    """issues milestoned event"""

    action: Literal["milestoned"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    issue: WebhookIssuesMilestonedPropIssueType
    milestone: WebhookIssuesMilestonedPropMilestoneType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookIssuesMilestonedPropIssueType(TypedDict):
    """WebhookIssuesMilestonedPropIssue"""

    active_lock_reason: Union[
        Literal["resolved", "off-topic", "too heated", "spam"], None
    ]
    assignee: NotRequired[
        Union[WebhookIssuesMilestonedPropIssueMergedAssigneeType, None]
    ]
    assignees: List[WebhookIssuesMilestonedPropIssueMergedAssigneesType]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: Union[Union[str, None], None]
    closed_at: Union[datetime, None]
    comments: int
    comments_url: str
    created_at: datetime
    draft: NotRequired[bool]
    events_url: str
    html_url: str
    id: int
    labels: NotRequired[List[WebhookIssuesMilestonedPropIssueMergedLabelsType]]
    labels_url: str
    locked: NotRequired[bool]
    milestone: WebhookIssuesMilestonedPropIssueAllof1PropMilestoneType
    node_id: str
    number: int
    performed_via_github_app: NotRequired[
        Union[WebhookIssuesMilestonedPropIssueMergedPerformedViaGithubAppType, None]
    ]
    pull_request: NotRequired[WebhookIssuesMilestonedPropIssueAllof0PropPullRequestType]
    reactions: WebhookIssuesMilestonedPropIssueMergedReactionsType
    repository_url: str
    state: NotRequired[Literal["open", "closed"]]
    state_reason: NotRequired[Union[str, None]]
    timeline_url: NotRequired[str]
    title: str
    updated_at: datetime
    url: str
    user: WebhookIssuesMilestonedPropIssueMergedUserType


class WebhookIssuesMilestonedPropIssueAllof0Type(TypedDict):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    assignee: NotRequired[
        Union[WebhookIssuesMilestonedPropIssueAllof0PropAssigneeType, None]
    ]
    assignees: List[
        Union[WebhookIssuesMilestonedPropIssueAllof0PropAssigneesItemsType, None]
    ]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: Union[str, None]
    closed_at: Union[datetime, None]
    comments: int
    comments_url: str
    created_at: datetime
    draft: NotRequired[bool]
    events_url: str
    html_url: str
    id: int
    labels: NotRequired[List[WebhookIssuesMilestonedPropIssueAllof0PropLabelsItemsType]]
    labels_url: str
    locked: NotRequired[bool]
    milestone: Union[WebhookIssuesMilestonedPropIssueAllof0PropMilestoneType, None]
    node_id: str
    number: int
    performed_via_github_app: NotRequired[
        Union[WebhookIssuesMilestonedPropIssueAllof0PropPerformedViaGithubAppType, None]
    ]
    pull_request: NotRequired[WebhookIssuesMilestonedPropIssueAllof0PropPullRequestType]
    reactions: WebhookIssuesMilestonedPropIssueAllof0PropReactionsType
    repository_url: str
    state: NotRequired[Literal["open", "closed"]]
    state_reason: NotRequired[Union[str, None]]
    timeline_url: NotRequired[str]
    title: str
    updated_at: datetime
    url: str
    user: Union[WebhookIssuesMilestonedPropIssueAllof0PropUserType, None]


class WebhookIssuesMilestonedPropIssueAllof0PropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesMilestonedPropIssueAllof0PropAssigneesItemsType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesMilestonedPropIssueAllof0PropLabelsItemsType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookIssuesMilestonedPropIssueAllof0PropMilestonePropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesMilestonedPropIssueAllof0PropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[
        WebhookIssuesMilestonedPropIssueAllof0PropMilestonePropCreatorType, None
    ]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookIssuesMilestonedPropIssueAllof0PropPerformedViaGithubAppPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesMilestonedPropIssueAllof0PropPerformedViaGithubAppPropPermissionsType(
    TypedDict
):
    """WebhookIssuesMilestonedPropIssueAllof0PropPerformedViaGithubAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: NotRequired[Literal["read", "write"]]
    administration: NotRequired[Literal["read", "write"]]
    checks: NotRequired[Literal["read", "write"]]
    content_references: NotRequired[Literal["read", "write"]]
    contents: NotRequired[Literal["read", "write"]]
    deployments: NotRequired[Literal["read", "write"]]
    discussions: NotRequired[Literal["read", "write"]]
    emails: NotRequired[Literal["read", "write"]]
    environments: NotRequired[Literal["read", "write"]]
    issues: NotRequired[Literal["read", "write"]]
    keys: NotRequired[Literal["read", "write"]]
    members: NotRequired[Literal["read", "write"]]
    metadata: NotRequired[Literal["read", "write"]]
    organization_administration: NotRequired[Literal["read", "write"]]
    organization_hooks: NotRequired[Literal["read", "write"]]
    organization_packages: NotRequired[Literal["read", "write"]]
    organization_plan: NotRequired[Literal["read", "write"]]
    organization_projects: NotRequired[Literal["read", "write", "admin"]]
    organization_secrets: NotRequired[Literal["read", "write"]]
    organization_self_hosted_runners: NotRequired[Literal["read", "write"]]
    organization_user_blocking: NotRequired[Literal["read", "write"]]
    packages: NotRequired[Literal["read", "write"]]
    pages: NotRequired[Literal["read", "write"]]
    pull_requests: NotRequired[Literal["read", "write"]]
    repository_hooks: NotRequired[Literal["read", "write"]]
    repository_projects: NotRequired[Literal["read", "write"]]
    secret_scanning_alerts: NotRequired[Literal["read", "write"]]
    secrets: NotRequired[Literal["read", "write"]]
    security_events: NotRequired[Literal["read", "write"]]
    security_scanning_alert: NotRequired[Literal["read", "write"]]
    single_file: NotRequired[Literal["read", "write"]]
    statuses: NotRequired[Literal["read", "write"]]
    team_discussions: NotRequired[Literal["read", "write"]]
    vulnerability_alerts: NotRequired[Literal["read", "write"]]
    workflows: NotRequired[Literal["read", "write"]]


class WebhookIssuesMilestonedPropIssueAllof0PropPerformedViaGithubAppType(TypedDict):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None]
    description: Union[str, None]
    events: NotRequired[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "reminder",
            ]
        ]
    ]
    external_url: Union[str, None]
    html_url: str
    id: Union[int, None]
    name: str
    node_id: str
    owner: Union[
        WebhookIssuesMilestonedPropIssueAllof0PropPerformedViaGithubAppPropOwnerType,
        None,
    ]
    permissions: NotRequired[
        WebhookIssuesMilestonedPropIssueAllof0PropPerformedViaGithubAppPropPermissionsType
    ]
    slug: NotRequired[str]
    updated_at: Union[datetime, None]


class WebhookIssuesMilestonedPropIssueAllof0PropPullRequestType(TypedDict):
    """WebhookIssuesMilestonedPropIssueAllof0PropPullRequest"""

    diff_url: NotRequired[str]
    html_url: NotRequired[str]
    merged_at: NotRequired[Union[datetime, None]]
    patch_url: NotRequired[str]
    url: NotRequired[str]


class WebhookIssuesMilestonedPropIssueAllof0PropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookIssuesMilestonedPropIssueAllof0PropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesMilestonedPropIssueAllof1Type(TypedDict):
    """WebhookIssuesMilestonedPropIssueAllof1"""

    active_lock_reason: NotRequired[Union[str, None]]
    assignee: NotRequired[
        Union[WebhookIssuesMilestonedPropIssueAllof1PropAssigneeType, None]
    ]
    assignees: NotRequired[
        List[Union[WebhookIssuesMilestonedPropIssueAllof1PropAssigneesItemsType, None]]
    ]
    author_association: NotRequired[str]
    body: NotRequired[Union[str, None]]
    closed_at: NotRequired[Union[str, None]]
    comments: NotRequired[int]
    comments_url: NotRequired[str]
    created_at: NotRequired[str]
    events_url: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    labels: NotRequired[
        List[Union[WebhookIssuesMilestonedPropIssueAllof1PropLabelsItemsType, None]]
    ]
    labels_url: NotRequired[str]
    locked: NotRequired[bool]
    milestone: WebhookIssuesMilestonedPropIssueAllof1PropMilestoneType
    node_id: NotRequired[str]
    number: NotRequired[int]
    performed_via_github_app: NotRequired[
        Union[WebhookIssuesMilestonedPropIssueAllof1PropPerformedViaGithubAppType, None]
    ]
    reactions: NotRequired[WebhookIssuesMilestonedPropIssueAllof1PropReactionsType]
    repository_url: NotRequired[str]
    state: NotRequired[str]
    timeline_url: NotRequired[str]
    title: NotRequired[str]
    updated_at: NotRequired[str]
    url: NotRequired[str]
    user: NotRequired[WebhookIssuesMilestonedPropIssueAllof1PropUserType]


class WebhookIssuesMilestonedPropIssueAllof1PropAssigneeType(TypedDict):
    """WebhookIssuesMilestonedPropIssueAllof1PropAssignee"""


class WebhookIssuesMilestonedPropIssueAllof1PropAssigneesItemsType(TypedDict):
    """WebhookIssuesMilestonedPropIssueAllof1PropAssigneesItems"""


class WebhookIssuesMilestonedPropIssueAllof1PropLabelsItemsType(TypedDict):
    """WebhookIssuesMilestonedPropIssueAllof1PropLabelsItems"""


class WebhookIssuesMilestonedPropIssueAllof1PropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[
        WebhookIssuesMilestonedPropIssueAllof1PropMilestonePropCreatorType, None
    ]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookIssuesMilestonedPropIssueAllof1PropMilestonePropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesMilestonedPropIssueAllof1PropPerformedViaGithubAppType(TypedDict):
    """WebhookIssuesMilestonedPropIssueAllof1PropPerformedViaGithubApp"""


class WebhookIssuesMilestonedPropIssueAllof1PropReactionsType(TypedDict):
    """WebhookIssuesMilestonedPropIssueAllof1PropReactions"""

    plus_one: NotRequired[int]
    minus_one: NotRequired[int]
    confused: NotRequired[int]
    eyes: NotRequired[int]
    heart: NotRequired[int]
    hooray: NotRequired[int]
    laugh: NotRequired[int]
    rocket: NotRequired[int]
    total_count: NotRequired[int]
    url: NotRequired[str]


class WebhookIssuesMilestonedPropIssueAllof1PropUserType(TypedDict):
    """WebhookIssuesMilestonedPropIssueAllof1PropUser"""

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookIssuesMilestonedPropIssueMergedAssigneeType(TypedDict):
    """WebhookIssuesMilestonedPropIssueMergedAssignee"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesMilestonedPropIssueMergedAssigneesType(TypedDict):
    """WebhookIssuesMilestonedPropIssueMergedAssignees"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesMilestonedPropIssueMergedLabelsType(TypedDict):
    """WebhookIssuesMilestonedPropIssueMergedLabels"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookIssuesMilestonedPropIssueMergedPerformedViaGithubAppType(TypedDict):
    """WebhookIssuesMilestonedPropIssueMergedPerformedViaGithubApp"""

    created_at: Union[datetime, None]
    description: Union[str, None]
    events: NotRequired[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "reminder",
            ]
        ]
    ]
    external_url: Union[str, None]
    html_url: str
    id: Union[int, None]
    name: str
    node_id: str
    owner: Union[
        WebhookIssuesMilestonedPropIssueAllof0PropPerformedViaGithubAppPropOwnerType,
        None,
    ]
    permissions: NotRequired[
        WebhookIssuesMilestonedPropIssueAllof0PropPerformedViaGithubAppPropPermissionsType
    ]
    slug: NotRequired[str]
    updated_at: Union[datetime, None]


class WebhookIssuesMilestonedPropIssueMergedReactionsType(TypedDict):
    """WebhookIssuesMilestonedPropIssueMergedReactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookIssuesMilestonedPropIssueMergedUserType(TypedDict):
    """WebhookIssuesMilestonedPropIssueMergedUser"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesMilestonedPropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[WebhookIssuesMilestonedPropMilestonePropCreatorType, None]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookIssuesMilestonedPropMilestonePropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesOpenedType(TypedDict):
    """issues opened event"""

    action: Literal["opened"]
    changes: NotRequired[WebhookIssuesOpenedPropChangesType]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    issue: WebhookIssuesOpenedPropIssueType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookIssuesOpenedPropChangesType(TypedDict):
    """WebhookIssuesOpenedPropChanges"""

    old_issue: Union[WebhookIssuesOpenedPropChangesPropOldIssueType, None]
    old_repository: WebhookIssuesOpenedPropChangesPropOldRepositoryType


class WebhookIssuesOpenedPropChangesPropOldIssuePropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesOpenedPropChangesPropOldIssuePropAssigneesItemsType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesOpenedPropChangesPropOldIssuePropLabelsItemsType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookIssuesOpenedPropChangesPropOldIssuePropMilestonePropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesOpenedPropChangesPropOldIssuePropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[
        WebhookIssuesOpenedPropChangesPropOldIssuePropMilestonePropCreatorType, None
    ]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookIssuesOpenedPropChangesPropOldIssuePropPerformedViaGithubAppPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesOpenedPropChangesPropOldIssuePropPerformedViaGithubAppPropPermissionsType(
    TypedDict
):
    """WebhookIssuesOpenedPropChangesPropOldIssuePropPerformedViaGithubAppPropPermissio
    ns

    The set of permissions for the GitHub app
    """

    actions: NotRequired[Literal["read", "write"]]
    administration: NotRequired[Literal["read", "write"]]
    checks: NotRequired[Literal["read", "write"]]
    content_references: NotRequired[Literal["read", "write"]]
    contents: NotRequired[Literal["read", "write"]]
    deployments: NotRequired[Literal["read", "write"]]
    discussions: NotRequired[Literal["read", "write"]]
    emails: NotRequired[Literal["read", "write"]]
    environments: NotRequired[Literal["read", "write"]]
    issues: NotRequired[Literal["read", "write"]]
    keys: NotRequired[Literal["read", "write"]]
    members: NotRequired[Literal["read", "write"]]
    metadata: NotRequired[Literal["read", "write"]]
    organization_administration: NotRequired[Literal["read", "write"]]
    organization_hooks: NotRequired[Literal["read", "write"]]
    organization_packages: NotRequired[Literal["read", "write"]]
    organization_plan: NotRequired[Literal["read", "write"]]
    organization_projects: NotRequired[Literal["read", "write"]]
    organization_secrets: NotRequired[Literal["read", "write"]]
    organization_self_hosted_runners: NotRequired[Literal["read", "write"]]
    organization_user_blocking: NotRequired[Literal["read", "write"]]
    packages: NotRequired[Literal["read", "write"]]
    pages: NotRequired[Literal["read", "write"]]
    pull_requests: NotRequired[Literal["read", "write"]]
    repository_hooks: NotRequired[Literal["read", "write"]]
    repository_projects: NotRequired[Literal["read", "write"]]
    secret_scanning_alerts: NotRequired[Literal["read", "write"]]
    secrets: NotRequired[Literal["read", "write"]]
    security_events: NotRequired[Literal["read", "write"]]
    security_scanning_alert: NotRequired[Literal["read", "write"]]
    single_file: NotRequired[Literal["read", "write"]]
    statuses: NotRequired[Literal["read", "write"]]
    team_discussions: NotRequired[Literal["read", "write"]]
    vulnerability_alerts: NotRequired[Literal["read", "write"]]
    workflows: NotRequired[Literal["read", "write"]]


class WebhookIssuesOpenedPropChangesPropOldIssuePropPerformedViaGithubAppType(
    TypedDict
):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None]
    description: Union[str, None]
    events: NotRequired[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
            ]
        ]
    ]
    external_url: Union[str, None]
    html_url: str
    id: Union[int, None]
    name: str
    node_id: str
    owner: Union[
        WebhookIssuesOpenedPropChangesPropOldIssuePropPerformedViaGithubAppPropOwnerType,
        None,
    ]
    permissions: NotRequired[
        WebhookIssuesOpenedPropChangesPropOldIssuePropPerformedViaGithubAppPropPermissionsType
    ]
    slug: NotRequired[str]
    updated_at: Union[datetime, None]


class WebhookIssuesOpenedPropChangesPropOldIssuePropPullRequestType(TypedDict):
    """WebhookIssuesOpenedPropChangesPropOldIssuePropPullRequest"""

    diff_url: NotRequired[str]
    html_url: NotRequired[str]
    merged_at: NotRequired[Union[datetime, None]]
    patch_url: NotRequired[str]
    url: NotRequired[str]


class WebhookIssuesOpenedPropChangesPropOldIssuePropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookIssuesOpenedPropChangesPropOldIssuePropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesOpenedPropChangesPropOldIssueType(TypedDict):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    assignee: NotRequired[
        Union[WebhookIssuesOpenedPropChangesPropOldIssuePropAssigneeType, None]
    ]
    assignees: List[
        Union[WebhookIssuesOpenedPropChangesPropOldIssuePropAssigneesItemsType, None]
    ]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: Union[str, None]
    closed_at: Union[datetime, None]
    comments: int
    comments_url: str
    created_at: datetime
    draft: NotRequired[bool]
    events_url: str
    html_url: str
    id: int
    labels: NotRequired[
        List[WebhookIssuesOpenedPropChangesPropOldIssuePropLabelsItemsType]
    ]
    labels_url: str
    locked: NotRequired[bool]
    milestone: Union[WebhookIssuesOpenedPropChangesPropOldIssuePropMilestoneType, None]
    node_id: str
    number: int
    performed_via_github_app: NotRequired[
        Union[
            WebhookIssuesOpenedPropChangesPropOldIssuePropPerformedViaGithubAppType,
            None,
        ]
    ]
    pull_request: NotRequired[
        WebhookIssuesOpenedPropChangesPropOldIssuePropPullRequestType
    ]
    reactions: WebhookIssuesOpenedPropChangesPropOldIssuePropReactionsType
    repository_url: str
    state: NotRequired[Literal["open", "closed"]]
    state_reason: NotRequired[Union[str, None]]
    timeline_url: NotRequired[str]
    title: str
    updated_at: datetime
    url: str
    user: Union[WebhookIssuesOpenedPropChangesPropOldIssuePropUserType, None]


class WebhookIssuesOpenedPropChangesPropOldRepositoryType(TypedDict):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    custom_properties: NotRequired[
        WebhookIssuesOpenedPropChangesPropOldRepositoryPropCustomPropertiesType
    ]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_discussions: NotRequired[bool]
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookIssuesOpenedPropChangesPropOldRepositoryPropLicenseType, None
    ]
    master_branch: NotRequired[str]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[WebhookIssuesOpenedPropChangesPropOldRepositoryPropOwnerType, None]
    permissions: NotRequired[
        WebhookIssuesOpenedPropChangesPropOldRepositoryPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookIssuesOpenedPropChangesPropOldRepositoryPropCustomPropertiesType(
    TypedDict
):
    """WebhookIssuesOpenedPropChangesPropOldRepositoryPropCustomProperties

    The custom properties that were defined for the repository. The keys are the
    custom property names, and the values are the corresponding custom property
    values.
    """


class WebhookIssuesOpenedPropChangesPropOldRepositoryPropLicenseType(TypedDict):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookIssuesOpenedPropChangesPropOldRepositoryPropOwnerType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesOpenedPropChangesPropOldRepositoryPropPermissionsType(TypedDict):
    """WebhookIssuesOpenedPropChangesPropOldRepositoryPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookIssuesOpenedPropIssueType(TypedDict):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    assignee: NotRequired[Union[WebhookIssuesOpenedPropIssuePropAssigneeType, None]]
    assignees: List[Union[WebhookIssuesOpenedPropIssuePropAssigneesItemsType, None]]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: Union[str, None]
    closed_at: Union[datetime, None]
    comments: int
    comments_url: str
    created_at: datetime
    draft: NotRequired[bool]
    events_url: str
    html_url: str
    id: int
    labels: NotRequired[List[WebhookIssuesOpenedPropIssuePropLabelsItemsType]]
    labels_url: str
    locked: NotRequired[bool]
    milestone: Union[WebhookIssuesOpenedPropIssuePropMilestoneType, None]
    node_id: str
    number: int
    performed_via_github_app: NotRequired[
        Union[WebhookIssuesOpenedPropIssuePropPerformedViaGithubAppType, None]
    ]
    pull_request: NotRequired[WebhookIssuesOpenedPropIssuePropPullRequestType]
    reactions: WebhookIssuesOpenedPropIssuePropReactionsType
    repository_url: str
    state: NotRequired[Literal["open", "closed"]]
    state_reason: NotRequired[Union[str, None]]
    timeline_url: NotRequired[str]
    title: str
    updated_at: datetime
    url: str
    user: Union[WebhookIssuesOpenedPropIssuePropUserType, None]


class WebhookIssuesOpenedPropIssuePropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesOpenedPropIssuePropAssigneesItemsType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesOpenedPropIssuePropLabelsItemsType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookIssuesOpenedPropIssuePropMilestonePropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesOpenedPropIssuePropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[WebhookIssuesOpenedPropIssuePropMilestonePropCreatorType, None]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookIssuesOpenedPropIssuePropPerformedViaGithubAppPropOwnerType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesOpenedPropIssuePropPerformedViaGithubAppPropPermissionsType(
    TypedDict
):
    """WebhookIssuesOpenedPropIssuePropPerformedViaGithubAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: NotRequired[Literal["read", "write"]]
    administration: NotRequired[Literal["read", "write"]]
    checks: NotRequired[Literal["read", "write"]]
    content_references: NotRequired[Literal["read", "write"]]
    contents: NotRequired[Literal["read", "write"]]
    deployments: NotRequired[Literal["read", "write"]]
    discussions: NotRequired[Literal["read", "write"]]
    emails: NotRequired[Literal["read", "write"]]
    environments: NotRequired[Literal["read", "write"]]
    issues: NotRequired[Literal["read", "write"]]
    keys: NotRequired[Literal["read", "write"]]
    members: NotRequired[Literal["read", "write"]]
    metadata: NotRequired[Literal["read", "write"]]
    organization_administration: NotRequired[Literal["read", "write"]]
    organization_hooks: NotRequired[Literal["read", "write"]]
    organization_packages: NotRequired[Literal["read", "write"]]
    organization_plan: NotRequired[Literal["read", "write"]]
    organization_projects: NotRequired[Literal["read", "write", "admin"]]
    organization_secrets: NotRequired[Literal["read", "write"]]
    organization_self_hosted_runners: NotRequired[Literal["read", "write"]]
    organization_user_blocking: NotRequired[Literal["read", "write"]]
    packages: NotRequired[Literal["read", "write"]]
    pages: NotRequired[Literal["read", "write"]]
    pull_requests: NotRequired[Literal["read", "write"]]
    repository_hooks: NotRequired[Literal["read", "write"]]
    repository_projects: NotRequired[Literal["read", "write"]]
    secret_scanning_alerts: NotRequired[Literal["read", "write"]]
    secrets: NotRequired[Literal["read", "write"]]
    security_events: NotRequired[Literal["read", "write"]]
    security_scanning_alert: NotRequired[Literal["read", "write"]]
    single_file: NotRequired[Literal["read", "write"]]
    statuses: NotRequired[Literal["read", "write"]]
    team_discussions: NotRequired[Literal["read", "write"]]
    vulnerability_alerts: NotRequired[Literal["read", "write"]]
    workflows: NotRequired[Literal["read", "write"]]


class WebhookIssuesOpenedPropIssuePropPerformedViaGithubAppType(TypedDict):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None]
    description: Union[str, None]
    events: NotRequired[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "security_and_analysis",
                "pull_request_review_thread",
                "reminder",
            ]
        ]
    ]
    external_url: Union[str, None]
    html_url: str
    id: Union[int, None]
    name: str
    node_id: str
    owner: Union[
        WebhookIssuesOpenedPropIssuePropPerformedViaGithubAppPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookIssuesOpenedPropIssuePropPerformedViaGithubAppPropPermissionsType
    ]
    slug: NotRequired[str]
    updated_at: Union[datetime, None]


class WebhookIssuesOpenedPropIssuePropPullRequestType(TypedDict):
    """WebhookIssuesOpenedPropIssuePropPullRequest"""

    diff_url: NotRequired[str]
    html_url: NotRequired[str]
    merged_at: NotRequired[Union[datetime, None]]
    patch_url: NotRequired[str]
    url: NotRequired[str]


class WebhookIssuesOpenedPropIssuePropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookIssuesOpenedPropIssuePropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesPinnedType(TypedDict):
    """issues pinned event"""

    action: Literal["pinned"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    issue: WebhookIssuesPinnedPropIssueType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookIssuesPinnedPropIssueType(TypedDict):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    assignee: NotRequired[Union[WebhookIssuesPinnedPropIssuePropAssigneeType, None]]
    assignees: List[Union[WebhookIssuesPinnedPropIssuePropAssigneesItemsType, None]]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: Union[str, None]
    closed_at: Union[datetime, None]
    comments: int
    comments_url: str
    created_at: datetime
    draft: NotRequired[bool]
    events_url: str
    html_url: str
    id: int
    labels: NotRequired[List[WebhookIssuesPinnedPropIssuePropLabelsItemsType]]
    labels_url: str
    locked: NotRequired[bool]
    milestone: Union[WebhookIssuesPinnedPropIssuePropMilestoneType, None]
    node_id: str
    number: int
    performed_via_github_app: NotRequired[
        Union[WebhookIssuesPinnedPropIssuePropPerformedViaGithubAppType, None]
    ]
    pull_request: NotRequired[WebhookIssuesPinnedPropIssuePropPullRequestType]
    reactions: WebhookIssuesPinnedPropIssuePropReactionsType
    repository_url: str
    state: NotRequired[Literal["open", "closed"]]
    state_reason: NotRequired[Union[str, None]]
    timeline_url: NotRequired[str]
    title: str
    updated_at: datetime
    url: str
    user: Union[WebhookIssuesPinnedPropIssuePropUserType, None]


class WebhookIssuesPinnedPropIssuePropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesPinnedPropIssuePropAssigneesItemsType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesPinnedPropIssuePropLabelsItemsType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookIssuesPinnedPropIssuePropMilestonePropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesPinnedPropIssuePropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[WebhookIssuesPinnedPropIssuePropMilestonePropCreatorType, None]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookIssuesPinnedPropIssuePropPerformedViaGithubAppPropOwnerType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesPinnedPropIssuePropPerformedViaGithubAppPropPermissionsType(
    TypedDict
):
    """WebhookIssuesPinnedPropIssuePropPerformedViaGithubAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: NotRequired[Literal["read", "write"]]
    administration: NotRequired[Literal["read", "write"]]
    checks: NotRequired[Literal["read", "write"]]
    content_references: NotRequired[Literal["read", "write"]]
    contents: NotRequired[Literal["read", "write"]]
    deployments: NotRequired[Literal["read", "write"]]
    discussions: NotRequired[Literal["read", "write"]]
    emails: NotRequired[Literal["read", "write"]]
    environments: NotRequired[Literal["read", "write"]]
    issues: NotRequired[Literal["read", "write"]]
    keys: NotRequired[Literal["read", "write"]]
    members: NotRequired[Literal["read", "write"]]
    metadata: NotRequired[Literal["read", "write"]]
    organization_administration: NotRequired[Literal["read", "write"]]
    organization_hooks: NotRequired[Literal["read", "write"]]
    organization_packages: NotRequired[Literal["read", "write"]]
    organization_plan: NotRequired[Literal["read", "write"]]
    organization_projects: NotRequired[Literal["read", "write"]]
    organization_secrets: NotRequired[Literal["read", "write"]]
    organization_self_hosted_runners: NotRequired[Literal["read", "write"]]
    organization_user_blocking: NotRequired[Literal["read", "write"]]
    packages: NotRequired[Literal["read", "write"]]
    pages: NotRequired[Literal["read", "write"]]
    pull_requests: NotRequired[Literal["read", "write"]]
    repository_hooks: NotRequired[Literal["read", "write"]]
    repository_projects: NotRequired[Literal["read", "write"]]
    secret_scanning_alerts: NotRequired[Literal["read", "write"]]
    secrets: NotRequired[Literal["read", "write"]]
    security_events: NotRequired[Literal["read", "write"]]
    security_scanning_alert: NotRequired[Literal["read", "write"]]
    single_file: NotRequired[Literal["read", "write"]]
    statuses: NotRequired[Literal["read", "write"]]
    team_discussions: NotRequired[Literal["read", "write"]]
    vulnerability_alerts: NotRequired[Literal["read", "write"]]
    workflows: NotRequired[Literal["read", "write"]]


class WebhookIssuesPinnedPropIssuePropPerformedViaGithubAppType(TypedDict):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None]
    description: Union[str, None]
    events: NotRequired[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
            ]
        ]
    ]
    external_url: Union[str, None]
    html_url: str
    id: Union[int, None]
    name: str
    node_id: str
    owner: Union[
        WebhookIssuesPinnedPropIssuePropPerformedViaGithubAppPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookIssuesPinnedPropIssuePropPerformedViaGithubAppPropPermissionsType
    ]
    slug: NotRequired[str]
    updated_at: Union[datetime, None]


class WebhookIssuesPinnedPropIssuePropPullRequestType(TypedDict):
    """WebhookIssuesPinnedPropIssuePropPullRequest"""

    diff_url: NotRequired[str]
    html_url: NotRequired[str]
    merged_at: NotRequired[Union[datetime, None]]
    patch_url: NotRequired[str]
    url: NotRequired[str]


class WebhookIssuesPinnedPropIssuePropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookIssuesPinnedPropIssuePropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesReopenedType(TypedDict):
    """issues reopened event"""

    action: Literal["reopened"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    issue: WebhookIssuesReopenedPropIssueType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookIssuesReopenedPropIssueType(TypedDict):
    """WebhookIssuesReopenedPropIssue"""

    active_lock_reason: Union[
        Literal["resolved", "off-topic", "too heated", "spam"], None
    ]
    assignee: NotRequired[Union[WebhookIssuesReopenedPropIssueMergedAssigneeType, None]]
    assignees: List[WebhookIssuesReopenedPropIssueMergedAssigneesType]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: Union[Union[str, None], None]
    closed_at: Union[datetime, None]
    comments: int
    comments_url: str
    created_at: datetime
    draft: NotRequired[bool]
    events_url: str
    html_url: str
    id: int
    labels: NotRequired[List[WebhookIssuesReopenedPropIssueMergedLabelsType]]
    labels_url: str
    locked: NotRequired[bool]
    milestone: Union[WebhookIssuesReopenedPropIssueMergedMilestoneType, None]
    node_id: str
    number: int
    performed_via_github_app: NotRequired[
        Union[WebhookIssuesReopenedPropIssueMergedPerformedViaGithubAppType, None]
    ]
    pull_request: NotRequired[WebhookIssuesReopenedPropIssueAllof0PropPullRequestType]
    reactions: WebhookIssuesReopenedPropIssueMergedReactionsType
    repository_url: str
    state: Literal["open", "closed"]
    state_reason: NotRequired[Union[str, None]]
    timeline_url: NotRequired[str]
    title: str
    updated_at: datetime
    url: str
    user: WebhookIssuesReopenedPropIssueMergedUserType


class WebhookIssuesReopenedPropIssueAllof0Type(TypedDict):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    assignee: NotRequired[
        Union[WebhookIssuesReopenedPropIssueAllof0PropAssigneeType, None]
    ]
    assignees: List[
        Union[WebhookIssuesReopenedPropIssueAllof0PropAssigneesItemsType, None]
    ]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: Union[str, None]
    closed_at: Union[datetime, None]
    comments: int
    comments_url: str
    created_at: datetime
    draft: NotRequired[bool]
    events_url: str
    html_url: str
    id: int
    labels: NotRequired[List[WebhookIssuesReopenedPropIssueAllof0PropLabelsItemsType]]
    labels_url: str
    locked: NotRequired[bool]
    milestone: Union[WebhookIssuesReopenedPropIssueAllof0PropMilestoneType, None]
    node_id: str
    number: int
    performed_via_github_app: NotRequired[
        Union[WebhookIssuesReopenedPropIssueAllof0PropPerformedViaGithubAppType, None]
    ]
    pull_request: NotRequired[WebhookIssuesReopenedPropIssueAllof0PropPullRequestType]
    reactions: WebhookIssuesReopenedPropIssueAllof0PropReactionsType
    repository_url: str
    state: NotRequired[Literal["open", "closed"]]
    state_reason: NotRequired[Union[str, None]]
    timeline_url: NotRequired[str]
    title: str
    updated_at: datetime
    url: str
    user: Union[WebhookIssuesReopenedPropIssueAllof0PropUserType, None]


class WebhookIssuesReopenedPropIssueAllof0PropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesReopenedPropIssueAllof0PropAssigneesItemsType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesReopenedPropIssueAllof0PropLabelsItemsType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookIssuesReopenedPropIssueAllof0PropMilestonePropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesReopenedPropIssueAllof0PropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[
        WebhookIssuesReopenedPropIssueAllof0PropMilestonePropCreatorType, None
    ]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookIssuesReopenedPropIssueAllof0PropPerformedViaGithubAppPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesReopenedPropIssueAllof0PropPerformedViaGithubAppPropPermissionsType(
    TypedDict
):
    """WebhookIssuesReopenedPropIssueAllof0PropPerformedViaGithubAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: NotRequired[Literal["read", "write"]]
    administration: NotRequired[Literal["read", "write"]]
    checks: NotRequired[Literal["read", "write"]]
    content_references: NotRequired[Literal["read", "write"]]
    contents: NotRequired[Literal["read", "write"]]
    deployments: NotRequired[Literal["read", "write"]]
    discussions: NotRequired[Literal["read", "write"]]
    emails: NotRequired[Literal["read", "write"]]
    environments: NotRequired[Literal["read", "write"]]
    issues: NotRequired[Literal["read", "write"]]
    keys: NotRequired[Literal["read", "write"]]
    members: NotRequired[Literal["read", "write"]]
    metadata: NotRequired[Literal["read", "write"]]
    organization_administration: NotRequired[Literal["read", "write"]]
    organization_hooks: NotRequired[Literal["read", "write"]]
    organization_packages: NotRequired[Literal["read", "write"]]
    organization_plan: NotRequired[Literal["read", "write"]]
    organization_projects: NotRequired[Literal["read", "write", "admin"]]
    organization_secrets: NotRequired[Literal["read", "write"]]
    organization_self_hosted_runners: NotRequired[Literal["read", "write"]]
    organization_user_blocking: NotRequired[Literal["read", "write"]]
    packages: NotRequired[Literal["read", "write"]]
    pages: NotRequired[Literal["read", "write"]]
    pull_requests: NotRequired[Literal["read", "write"]]
    repository_hooks: NotRequired[Literal["read", "write"]]
    repository_projects: NotRequired[Literal["read", "write", "admin"]]
    secret_scanning_alerts: NotRequired[Literal["read", "write"]]
    secrets: NotRequired[Literal["read", "write"]]
    security_events: NotRequired[Literal["read", "write"]]
    security_scanning_alert: NotRequired[Literal["read", "write"]]
    single_file: NotRequired[Literal["read", "write"]]
    statuses: NotRequired[Literal["read", "write"]]
    team_discussions: NotRequired[Literal["read", "write"]]
    vulnerability_alerts: NotRequired[Literal["read", "write"]]
    workflows: NotRequired[Literal["read", "write"]]


class WebhookIssuesReopenedPropIssueAllof0PropPerformedViaGithubAppType(TypedDict):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None]
    description: Union[str, None]
    events: NotRequired[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "pull_request_review_thread",
                "reminder",
            ]
        ]
    ]
    external_url: Union[str, None]
    html_url: str
    id: Union[int, None]
    name: str
    node_id: str
    owner: Union[
        WebhookIssuesReopenedPropIssueAllof0PropPerformedViaGithubAppPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookIssuesReopenedPropIssueAllof0PropPerformedViaGithubAppPropPermissionsType
    ]
    slug: NotRequired[str]
    updated_at: Union[datetime, None]


class WebhookIssuesReopenedPropIssueAllof0PropPullRequestType(TypedDict):
    """WebhookIssuesReopenedPropIssueAllof0PropPullRequest"""

    diff_url: NotRequired[str]
    html_url: NotRequired[str]
    merged_at: NotRequired[Union[datetime, None]]
    patch_url: NotRequired[str]
    url: NotRequired[str]


class WebhookIssuesReopenedPropIssueAllof0PropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookIssuesReopenedPropIssueAllof0PropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesReopenedPropIssueAllof1Type(TypedDict):
    """WebhookIssuesReopenedPropIssueAllof1"""

    active_lock_reason: NotRequired[Union[str, None]]
    assignee: NotRequired[
        Union[WebhookIssuesReopenedPropIssueAllof1PropAssigneeType, None]
    ]
    assignees: NotRequired[
        List[Union[WebhookIssuesReopenedPropIssueAllof1PropAssigneesItemsType, None]]
    ]
    author_association: NotRequired[str]
    body: NotRequired[Union[str, None]]
    closed_at: NotRequired[Union[str, None]]
    comments: NotRequired[int]
    comments_url: NotRequired[str]
    created_at: NotRequired[str]
    events_url: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    labels: NotRequired[
        List[Union[WebhookIssuesReopenedPropIssueAllof1PropLabelsItemsType, None]]
    ]
    labels_url: NotRequired[str]
    locked: NotRequired[bool]
    milestone: NotRequired[
        Union[WebhookIssuesReopenedPropIssueAllof1PropMilestoneType, None]
    ]
    node_id: NotRequired[str]
    number: NotRequired[int]
    performed_via_github_app: NotRequired[
        Union[WebhookIssuesReopenedPropIssueAllof1PropPerformedViaGithubAppType, None]
    ]
    reactions: NotRequired[WebhookIssuesReopenedPropIssueAllof1PropReactionsType]
    repository_url: NotRequired[str]
    state: Literal["open", "closed"]
    timeline_url: NotRequired[str]
    title: NotRequired[str]
    updated_at: NotRequired[str]
    url: NotRequired[str]
    user: NotRequired[WebhookIssuesReopenedPropIssueAllof1PropUserType]


class WebhookIssuesReopenedPropIssueAllof1PropAssigneeType(TypedDict):
    """WebhookIssuesReopenedPropIssueAllof1PropAssignee"""


class WebhookIssuesReopenedPropIssueAllof1PropAssigneesItemsType(TypedDict):
    """WebhookIssuesReopenedPropIssueAllof1PropAssigneesItems"""


class WebhookIssuesReopenedPropIssueAllof1PropLabelsItemsType(TypedDict):
    """WebhookIssuesReopenedPropIssueAllof1PropLabelsItems"""


class WebhookIssuesReopenedPropIssueAllof1PropMilestoneType(TypedDict):
    """WebhookIssuesReopenedPropIssueAllof1PropMilestone"""


class WebhookIssuesReopenedPropIssueAllof1PropPerformedViaGithubAppType(TypedDict):
    """WebhookIssuesReopenedPropIssueAllof1PropPerformedViaGithubApp"""


class WebhookIssuesReopenedPropIssueAllof1PropReactionsType(TypedDict):
    """WebhookIssuesReopenedPropIssueAllof1PropReactions"""

    plus_one: NotRequired[int]
    minus_one: NotRequired[int]
    confused: NotRequired[int]
    eyes: NotRequired[int]
    heart: NotRequired[int]
    hooray: NotRequired[int]
    laugh: NotRequired[int]
    rocket: NotRequired[int]
    total_count: NotRequired[int]
    url: NotRequired[str]


class WebhookIssuesReopenedPropIssueAllof1PropUserType(TypedDict):
    """WebhookIssuesReopenedPropIssueAllof1PropUser"""

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookIssuesReopenedPropIssueMergedAssigneeType(TypedDict):
    """WebhookIssuesReopenedPropIssueMergedAssignee"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesReopenedPropIssueMergedAssigneesType(TypedDict):
    """WebhookIssuesReopenedPropIssueMergedAssignees"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesReopenedPropIssueMergedLabelsType(TypedDict):
    """WebhookIssuesReopenedPropIssueMergedLabels"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookIssuesReopenedPropIssueMergedMilestoneType(TypedDict):
    """WebhookIssuesReopenedPropIssueMergedMilestone"""

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[
        WebhookIssuesReopenedPropIssueAllof0PropMilestonePropCreatorType, None
    ]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookIssuesReopenedPropIssueMergedPerformedViaGithubAppType(TypedDict):
    """WebhookIssuesReopenedPropIssueMergedPerformedViaGithubApp"""

    created_at: Union[datetime, None]
    description: Union[str, None]
    events: NotRequired[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "pull_request_review_thread",
                "reminder",
            ]
        ]
    ]
    external_url: Union[str, None]
    html_url: str
    id: Union[int, None]
    name: str
    node_id: str
    owner: Union[
        WebhookIssuesReopenedPropIssueAllof0PropPerformedViaGithubAppPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookIssuesReopenedPropIssueAllof0PropPerformedViaGithubAppPropPermissionsType
    ]
    slug: NotRequired[str]
    updated_at: Union[datetime, None]


class WebhookIssuesReopenedPropIssueMergedReactionsType(TypedDict):
    """WebhookIssuesReopenedPropIssueMergedReactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookIssuesReopenedPropIssueMergedUserType(TypedDict):
    """WebhookIssuesReopenedPropIssueMergedUser"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesTransferredType(TypedDict):
    """issues transferred event"""

    action: Literal["transferred"]
    changes: WebhookIssuesTransferredPropChangesType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    issue: WebhookIssuesTransferredPropIssueType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookIssuesTransferredPropChangesType(TypedDict):
    """WebhookIssuesTransferredPropChanges"""

    new_issue: WebhookIssuesTransferredPropChangesPropNewIssueType
    new_repository: WebhookIssuesTransferredPropChangesPropNewRepositoryType


class WebhookIssuesTransferredPropChangesPropNewIssueType(TypedDict):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    assignee: NotRequired[
        Union[WebhookIssuesTransferredPropChangesPropNewIssuePropAssigneeType, None]
    ]
    assignees: List[
        Union[
            WebhookIssuesTransferredPropChangesPropNewIssuePropAssigneesItemsType, None
        ]
    ]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: Union[str, None]
    closed_at: Union[datetime, None]
    comments: int
    comments_url: str
    created_at: datetime
    draft: NotRequired[bool]
    events_url: str
    html_url: str
    id: int
    labels: NotRequired[
        List[WebhookIssuesTransferredPropChangesPropNewIssuePropLabelsItemsType]
    ]
    labels_url: str
    locked: NotRequired[bool]
    milestone: Union[
        WebhookIssuesTransferredPropChangesPropNewIssuePropMilestoneType, None
    ]
    node_id: str
    number: int
    performed_via_github_app: NotRequired[
        Union[
            WebhookIssuesTransferredPropChangesPropNewIssuePropPerformedViaGithubAppType,
            None,
        ]
    ]
    pull_request: NotRequired[
        WebhookIssuesTransferredPropChangesPropNewIssuePropPullRequestType
    ]
    reactions: WebhookIssuesTransferredPropChangesPropNewIssuePropReactionsType
    repository_url: str
    state: NotRequired[Literal["open", "closed"]]
    state_reason: NotRequired[Union[str, None]]
    timeline_url: NotRequired[str]
    title: str
    updated_at: datetime
    url: str
    user: Union[WebhookIssuesTransferredPropChangesPropNewIssuePropUserType, None]


class WebhookIssuesTransferredPropChangesPropNewIssuePropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesTransferredPropChangesPropNewIssuePropAssigneesItemsType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesTransferredPropChangesPropNewIssuePropLabelsItemsType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookIssuesTransferredPropChangesPropNewIssuePropMilestonePropCreatorType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesTransferredPropChangesPropNewIssuePropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[
        WebhookIssuesTransferredPropChangesPropNewIssuePropMilestonePropCreatorType,
        None,
    ]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookIssuesTransferredPropChangesPropNewIssuePropPerformedViaGithubAppPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesTransferredPropChangesPropNewIssuePropPerformedViaGithubAppPropPermissionsType(
    TypedDict
):
    """WebhookIssuesTransferredPropChangesPropNewIssuePropPerformedViaGithubAppPropPerm
    issions

    The set of permissions for the GitHub app
    """

    actions: NotRequired[Literal["read", "write"]]
    administration: NotRequired[Literal["read", "write"]]
    checks: NotRequired[Literal["read", "write"]]
    content_references: NotRequired[Literal["read", "write"]]
    contents: NotRequired[Literal["read", "write"]]
    deployments: NotRequired[Literal["read", "write"]]
    discussions: NotRequired[Literal["read", "write"]]
    emails: NotRequired[Literal["read", "write"]]
    environments: NotRequired[Literal["read", "write"]]
    issues: NotRequired[Literal["read", "write"]]
    keys: NotRequired[Literal["read", "write"]]
    members: NotRequired[Literal["read", "write"]]
    metadata: NotRequired[Literal["read", "write"]]
    organization_administration: NotRequired[Literal["read", "write"]]
    organization_hooks: NotRequired[Literal["read", "write"]]
    organization_packages: NotRequired[Literal["read", "write"]]
    organization_plan: NotRequired[Literal["read", "write"]]
    organization_projects: NotRequired[Literal["read", "write"]]
    organization_secrets: NotRequired[Literal["read", "write"]]
    organization_self_hosted_runners: NotRequired[Literal["read", "write"]]
    organization_user_blocking: NotRequired[Literal["read", "write"]]
    packages: NotRequired[Literal["read", "write"]]
    pages: NotRequired[Literal["read", "write"]]
    pull_requests: NotRequired[Literal["read", "write"]]
    repository_hooks: NotRequired[Literal["read", "write"]]
    repository_projects: NotRequired[Literal["read", "write"]]
    secret_scanning_alerts: NotRequired[Literal["read", "write"]]
    secrets: NotRequired[Literal["read", "write"]]
    security_events: NotRequired[Literal["read", "write"]]
    security_scanning_alert: NotRequired[Literal["read", "write"]]
    single_file: NotRequired[Literal["read", "write"]]
    statuses: NotRequired[Literal["read", "write"]]
    team_discussions: NotRequired[Literal["read", "write"]]
    vulnerability_alerts: NotRequired[Literal["read", "write"]]
    workflows: NotRequired[Literal["read", "write"]]


class WebhookIssuesTransferredPropChangesPropNewIssuePropPerformedViaGithubAppType(
    TypedDict
):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None]
    description: Union[str, None]
    events: NotRequired[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
            ]
        ]
    ]
    external_url: Union[str, None]
    html_url: str
    id: Union[int, None]
    name: str
    node_id: str
    owner: Union[
        WebhookIssuesTransferredPropChangesPropNewIssuePropPerformedViaGithubAppPropOwnerType,
        None,
    ]
    permissions: NotRequired[
        WebhookIssuesTransferredPropChangesPropNewIssuePropPerformedViaGithubAppPropPermissionsType
    ]
    slug: NotRequired[str]
    updated_at: Union[datetime, None]


class WebhookIssuesTransferredPropChangesPropNewIssuePropPullRequestType(TypedDict):
    """WebhookIssuesTransferredPropChangesPropNewIssuePropPullRequest"""

    diff_url: NotRequired[str]
    html_url: NotRequired[str]
    merged_at: NotRequired[Union[datetime, None]]
    patch_url: NotRequired[str]
    url: NotRequired[str]


class WebhookIssuesTransferredPropChangesPropNewIssuePropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookIssuesTransferredPropChangesPropNewIssuePropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesTransferredPropChangesPropNewRepositoryType(TypedDict):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    custom_properties: NotRequired[
        WebhookIssuesTransferredPropChangesPropNewRepositoryPropCustomPropertiesType
    ]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookIssuesTransferredPropChangesPropNewRepositoryPropLicenseType, None
    ]
    master_branch: NotRequired[str]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookIssuesTransferredPropChangesPropNewRepositoryPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookIssuesTransferredPropChangesPropNewRepositoryPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookIssuesTransferredPropChangesPropNewRepositoryPropCustomPropertiesType(
    TypedDict
):
    """WebhookIssuesTransferredPropChangesPropNewRepositoryPropCustomProperties

    The custom properties that were defined for the repository. The keys are the
    custom property names, and the values are the corresponding custom property
    values.
    """


class WebhookIssuesTransferredPropChangesPropNewRepositoryPropLicenseType(TypedDict):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookIssuesTransferredPropChangesPropNewRepositoryPropOwnerType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesTransferredPropChangesPropNewRepositoryPropPermissionsType(
    TypedDict
):
    """WebhookIssuesTransferredPropChangesPropNewRepositoryPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookIssuesTransferredPropIssueType(TypedDict):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    assignee: NotRequired[
        Union[WebhookIssuesTransferredPropIssuePropAssigneeType, None]
    ]
    assignees: List[
        Union[WebhookIssuesTransferredPropIssuePropAssigneesItemsType, None]
    ]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: Union[str, None]
    closed_at: Union[datetime, None]
    comments: int
    comments_url: str
    created_at: datetime
    draft: NotRequired[bool]
    events_url: str
    html_url: str
    id: int
    labels: NotRequired[List[WebhookIssuesTransferredPropIssuePropLabelsItemsType]]
    labels_url: str
    locked: NotRequired[bool]
    milestone: Union[WebhookIssuesTransferredPropIssuePropMilestoneType, None]
    node_id: str
    number: int
    performed_via_github_app: NotRequired[
        Union[WebhookIssuesTransferredPropIssuePropPerformedViaGithubAppType, None]
    ]
    pull_request: NotRequired[WebhookIssuesTransferredPropIssuePropPullRequestType]
    reactions: WebhookIssuesTransferredPropIssuePropReactionsType
    repository_url: str
    state: NotRequired[Literal["open", "closed"]]
    state_reason: NotRequired[Union[str, None]]
    timeline_url: NotRequired[str]
    title: str
    updated_at: datetime
    url: str
    user: Union[WebhookIssuesTransferredPropIssuePropUserType, None]


class WebhookIssuesTransferredPropIssuePropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesTransferredPropIssuePropAssigneesItemsType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesTransferredPropIssuePropLabelsItemsType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookIssuesTransferredPropIssuePropMilestonePropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesTransferredPropIssuePropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[WebhookIssuesTransferredPropIssuePropMilestonePropCreatorType, None]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookIssuesTransferredPropIssuePropPerformedViaGithubAppPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesTransferredPropIssuePropPerformedViaGithubAppPropPermissionsType(
    TypedDict
):
    """WebhookIssuesTransferredPropIssuePropPerformedViaGithubAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: NotRequired[Literal["read", "write"]]
    administration: NotRequired[Literal["read", "write"]]
    checks: NotRequired[Literal["read", "write"]]
    content_references: NotRequired[Literal["read", "write"]]
    contents: NotRequired[Literal["read", "write"]]
    deployments: NotRequired[Literal["read", "write"]]
    discussions: NotRequired[Literal["read", "write"]]
    emails: NotRequired[Literal["read", "write"]]
    environments: NotRequired[Literal["read", "write"]]
    issues: NotRequired[Literal["read", "write"]]
    keys: NotRequired[Literal["read", "write"]]
    members: NotRequired[Literal["read", "write"]]
    metadata: NotRequired[Literal["read", "write"]]
    organization_administration: NotRequired[Literal["read", "write"]]
    organization_hooks: NotRequired[Literal["read", "write"]]
    organization_packages: NotRequired[Literal["read", "write"]]
    organization_plan: NotRequired[Literal["read", "write"]]
    organization_projects: NotRequired[Literal["read", "write"]]
    organization_secrets: NotRequired[Literal["read", "write"]]
    organization_self_hosted_runners: NotRequired[Literal["read", "write"]]
    organization_user_blocking: NotRequired[Literal["read", "write"]]
    packages: NotRequired[Literal["read", "write"]]
    pages: NotRequired[Literal["read", "write"]]
    pull_requests: NotRequired[Literal["read", "write"]]
    repository_hooks: NotRequired[Literal["read", "write"]]
    repository_projects: NotRequired[Literal["read", "write"]]
    secret_scanning_alerts: NotRequired[Literal["read", "write"]]
    secrets: NotRequired[Literal["read", "write"]]
    security_events: NotRequired[Literal["read", "write"]]
    security_scanning_alert: NotRequired[Literal["read", "write"]]
    single_file: NotRequired[Literal["read", "write"]]
    statuses: NotRequired[Literal["read", "write"]]
    team_discussions: NotRequired[Literal["read", "write"]]
    vulnerability_alerts: NotRequired[Literal["read", "write"]]
    workflows: NotRequired[Literal["read", "write"]]


class WebhookIssuesTransferredPropIssuePropPerformedViaGithubAppType(TypedDict):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None]
    description: Union[str, None]
    events: NotRequired[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
            ]
        ]
    ]
    external_url: Union[str, None]
    html_url: str
    id: Union[int, None]
    name: str
    node_id: str
    owner: Union[
        WebhookIssuesTransferredPropIssuePropPerformedViaGithubAppPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookIssuesTransferredPropIssuePropPerformedViaGithubAppPropPermissionsType
    ]
    slug: NotRequired[str]
    updated_at: Union[datetime, None]


class WebhookIssuesTransferredPropIssuePropPullRequestType(TypedDict):
    """WebhookIssuesTransferredPropIssuePropPullRequest"""

    diff_url: NotRequired[str]
    html_url: NotRequired[str]
    merged_at: NotRequired[Union[datetime, None]]
    patch_url: NotRequired[str]
    url: NotRequired[str]


class WebhookIssuesTransferredPropIssuePropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookIssuesTransferredPropIssuePropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesUnassignedType(TypedDict):
    """issues unassigned event"""

    action: Literal["unassigned"]
    assignee: NotRequired[Union[WebhookIssuesUnassignedPropAssigneeType, None]]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    issue: WebhookIssuesUnassignedPropIssueType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookIssuesUnassignedPropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesUnassignedPropIssueType(TypedDict):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    assignee: NotRequired[Union[WebhookIssuesUnassignedPropIssuePropAssigneeType, None]]
    assignees: List[Union[WebhookIssuesUnassignedPropIssuePropAssigneesItemsType, None]]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: Union[str, None]
    closed_at: Union[datetime, None]
    comments: int
    comments_url: str
    created_at: datetime
    draft: NotRequired[bool]
    events_url: str
    html_url: str
    id: int
    labels: NotRequired[List[WebhookIssuesUnassignedPropIssuePropLabelsItemsType]]
    labels_url: str
    locked: NotRequired[bool]
    milestone: Union[WebhookIssuesUnassignedPropIssuePropMilestoneType, None]
    node_id: str
    number: int
    performed_via_github_app: NotRequired[
        Union[WebhookIssuesUnassignedPropIssuePropPerformedViaGithubAppType, None]
    ]
    pull_request: NotRequired[WebhookIssuesUnassignedPropIssuePropPullRequestType]
    reactions: WebhookIssuesUnassignedPropIssuePropReactionsType
    repository_url: str
    state: NotRequired[Literal["open", "closed"]]
    state_reason: NotRequired[Union[str, None]]
    timeline_url: NotRequired[str]
    title: str
    updated_at: datetime
    url: str
    user: Union[WebhookIssuesUnassignedPropIssuePropUserType, None]


class WebhookIssuesUnassignedPropIssuePropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesUnassignedPropIssuePropAssigneesItemsType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesUnassignedPropIssuePropLabelsItemsType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookIssuesUnassignedPropIssuePropMilestonePropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesUnassignedPropIssuePropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[WebhookIssuesUnassignedPropIssuePropMilestonePropCreatorType, None]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookIssuesUnassignedPropIssuePropPerformedViaGithubAppPropOwnerType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesUnassignedPropIssuePropPerformedViaGithubAppPropPermissionsType(
    TypedDict
):
    """WebhookIssuesUnassignedPropIssuePropPerformedViaGithubAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: NotRequired[Literal["read", "write"]]
    administration: NotRequired[Literal["read", "write"]]
    checks: NotRequired[Literal["read", "write"]]
    content_references: NotRequired[Literal["read", "write"]]
    contents: NotRequired[Literal["read", "write"]]
    deployments: NotRequired[Literal["read", "write"]]
    discussions: NotRequired[Literal["read", "write"]]
    emails: NotRequired[Literal["read", "write"]]
    environments: NotRequired[Literal["read", "write"]]
    issues: NotRequired[Literal["read", "write"]]
    keys: NotRequired[Literal["read", "write"]]
    members: NotRequired[Literal["read", "write"]]
    metadata: NotRequired[Literal["read", "write"]]
    organization_administration: NotRequired[Literal["read", "write"]]
    organization_hooks: NotRequired[Literal["read", "write"]]
    organization_packages: NotRequired[Literal["read", "write"]]
    organization_plan: NotRequired[Literal["read", "write"]]
    organization_projects: NotRequired[Literal["read", "write", "admin"]]
    organization_secrets: NotRequired[Literal["read", "write"]]
    organization_self_hosted_runners: NotRequired[Literal["read", "write"]]
    organization_user_blocking: NotRequired[Literal["read", "write"]]
    packages: NotRequired[Literal["read", "write"]]
    pages: NotRequired[Literal["read", "write"]]
    pull_requests: NotRequired[Literal["read", "write"]]
    repository_hooks: NotRequired[Literal["read", "write"]]
    repository_projects: NotRequired[Literal["read", "write"]]
    secret_scanning_alerts: NotRequired[Literal["read", "write"]]
    secrets: NotRequired[Literal["read", "write"]]
    security_events: NotRequired[Literal["read", "write"]]
    security_scanning_alert: NotRequired[Literal["read", "write"]]
    single_file: NotRequired[Literal["read", "write"]]
    statuses: NotRequired[Literal["read", "write"]]
    team_discussions: NotRequired[Literal["read", "write"]]
    vulnerability_alerts: NotRequired[Literal["read", "write"]]
    workflows: NotRequired[Literal["read", "write"]]


class WebhookIssuesUnassignedPropIssuePropPerformedViaGithubAppType(TypedDict):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None]
    description: Union[str, None]
    events: NotRequired[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "reminder",
                "pull_request_review_thread",
            ]
        ]
    ]
    external_url: Union[str, None]
    html_url: str
    id: Union[int, None]
    name: str
    node_id: str
    owner: Union[
        WebhookIssuesUnassignedPropIssuePropPerformedViaGithubAppPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookIssuesUnassignedPropIssuePropPerformedViaGithubAppPropPermissionsType
    ]
    slug: NotRequired[str]
    updated_at: Union[datetime, None]


class WebhookIssuesUnassignedPropIssuePropPullRequestType(TypedDict):
    """WebhookIssuesUnassignedPropIssuePropPullRequest"""

    diff_url: NotRequired[str]
    html_url: NotRequired[str]
    merged_at: NotRequired[Union[datetime, None]]
    patch_url: NotRequired[str]
    url: NotRequired[str]


class WebhookIssuesUnassignedPropIssuePropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookIssuesUnassignedPropIssuePropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesUnlabeledType(TypedDict):
    """issues unlabeled event"""

    action: Literal["unlabeled"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    issue: WebhookIssuesUnlabeledPropIssueType
    label: NotRequired[WebhookIssuesUnlabeledPropLabelType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookIssuesUnlabeledPropIssueType(TypedDict):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    assignee: NotRequired[Union[WebhookIssuesUnlabeledPropIssuePropAssigneeType, None]]
    assignees: List[Union[WebhookIssuesUnlabeledPropIssuePropAssigneesItemsType, None]]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: Union[str, None]
    closed_at: Union[datetime, None]
    comments: int
    comments_url: str
    created_at: datetime
    draft: NotRequired[bool]
    events_url: str
    html_url: str
    id: int
    labels: NotRequired[List[WebhookIssuesUnlabeledPropIssuePropLabelsItemsType]]
    labels_url: str
    locked: NotRequired[bool]
    milestone: Union[WebhookIssuesUnlabeledPropIssuePropMilestoneType, None]
    node_id: str
    number: int
    performed_via_github_app: NotRequired[
        Union[WebhookIssuesUnlabeledPropIssuePropPerformedViaGithubAppType, None]
    ]
    pull_request: NotRequired[WebhookIssuesUnlabeledPropIssuePropPullRequestType]
    reactions: WebhookIssuesUnlabeledPropIssuePropReactionsType
    repository_url: str
    state: NotRequired[Literal["open", "closed"]]
    state_reason: NotRequired[Union[str, None]]
    timeline_url: NotRequired[str]
    title: str
    updated_at: datetime
    url: str
    user: Union[WebhookIssuesUnlabeledPropIssuePropUserType, None]


class WebhookIssuesUnlabeledPropIssuePropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesUnlabeledPropIssuePropAssigneesItemsType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesUnlabeledPropIssuePropLabelsItemsType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookIssuesUnlabeledPropIssuePropMilestonePropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesUnlabeledPropIssuePropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[WebhookIssuesUnlabeledPropIssuePropMilestonePropCreatorType, None]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookIssuesUnlabeledPropIssuePropPerformedViaGithubAppPropOwnerType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesUnlabeledPropIssuePropPerformedViaGithubAppPropPermissionsType(
    TypedDict
):
    """WebhookIssuesUnlabeledPropIssuePropPerformedViaGithubAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: NotRequired[Literal["read", "write"]]
    administration: NotRequired[Literal["read", "write"]]
    checks: NotRequired[Literal["read", "write"]]
    content_references: NotRequired[Literal["read", "write"]]
    contents: NotRequired[Literal["read", "write"]]
    deployments: NotRequired[Literal["read", "write"]]
    discussions: NotRequired[Literal["read", "write"]]
    emails: NotRequired[Literal["read", "write"]]
    environments: NotRequired[Literal["read", "write"]]
    issues: NotRequired[Literal["read", "write"]]
    keys: NotRequired[Literal["read", "write"]]
    members: NotRequired[Literal["read", "write"]]
    metadata: NotRequired[Literal["read", "write"]]
    organization_administration: NotRequired[Literal["read", "write"]]
    organization_hooks: NotRequired[Literal["read", "write"]]
    organization_packages: NotRequired[Literal["read", "write"]]
    organization_plan: NotRequired[Literal["read", "write"]]
    organization_projects: NotRequired[Literal["read", "write", "admin"]]
    organization_secrets: NotRequired[Literal["read", "write"]]
    organization_self_hosted_runners: NotRequired[Literal["read", "write"]]
    organization_user_blocking: NotRequired[Literal["read", "write"]]
    packages: NotRequired[Literal["read", "write"]]
    pages: NotRequired[Literal["read", "write"]]
    pull_requests: NotRequired[Literal["read", "write"]]
    repository_hooks: NotRequired[Literal["read", "write"]]
    repository_projects: NotRequired[Literal["read", "write"]]
    secret_scanning_alerts: NotRequired[Literal["read", "write"]]
    secrets: NotRequired[Literal["read", "write"]]
    security_events: NotRequired[Literal["read", "write"]]
    security_scanning_alert: NotRequired[Literal["read", "write"]]
    single_file: NotRequired[Literal["read", "write"]]
    statuses: NotRequired[Literal["read", "write"]]
    team_discussions: NotRequired[Literal["read", "write"]]
    vulnerability_alerts: NotRequired[Literal["read", "write"]]
    workflows: NotRequired[Literal["read", "write"]]


class WebhookIssuesUnlabeledPropIssuePropPerformedViaGithubAppType(TypedDict):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None]
    description: Union[str, None]
    events: NotRequired[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
                "reminder",
                "pull_request_review_thread",
            ]
        ]
    ]
    external_url: Union[str, None]
    html_url: str
    id: Union[int, None]
    name: str
    node_id: str
    owner: Union[
        WebhookIssuesUnlabeledPropIssuePropPerformedViaGithubAppPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookIssuesUnlabeledPropIssuePropPerformedViaGithubAppPropPermissionsType
    ]
    slug: NotRequired[str]
    updated_at: Union[datetime, None]


class WebhookIssuesUnlabeledPropIssuePropPullRequestType(TypedDict):
    """WebhookIssuesUnlabeledPropIssuePropPullRequest"""

    diff_url: NotRequired[str]
    html_url: NotRequired[str]
    merged_at: NotRequired[Union[datetime, None]]
    patch_url: NotRequired[str]
    url: NotRequired[str]


class WebhookIssuesUnlabeledPropIssuePropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookIssuesUnlabeledPropIssuePropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookIssuesUnlabeledPropLabelType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookIssuesUnlockedType(TypedDict):
    """issues unlocked event"""

    action: Literal["unlocked"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    issue: WebhookIssuesUnlockedPropIssueType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookIssuesUnlockedPropIssueType(TypedDict):
    """WebhookIssuesUnlockedPropIssue"""

    active_lock_reason: Union[None, None]
    assignee: NotRequired[Union[WebhookIssuesUnlockedPropIssueMergedAssigneeType, None]]
    assignees: List[WebhookIssuesUnlockedPropIssueMergedAssigneesType]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: Union[Union[str, None], None]
    closed_at: Union[datetime, None]
    comments: int
    comments_url: str
    created_at: datetime
    draft: NotRequired[bool]
    events_url: str
    html_url: str
    id: int
    labels: NotRequired[List[WebhookIssuesUnlockedPropIssueMergedLabelsType]]
    labels_url: str
    locked: Literal[False]
    milestone: Union[WebhookIssuesUnlockedPropIssueMergedMilestoneType, None]
    node_id: str
    number: int
    performed_via_github_app: NotRequired[Union[None, None]]
    pull_request: NotRequired[WebhookIssuesUnlockedPropIssueAllof0PropPullRequestType]
    reactions: WebhookIssuesUnlockedPropIssueMergedReactionsType
    repository_url: str
    state: NotRequired[Literal["open", "closed"]]
    state_reason: NotRequired[Union[str, None]]
    timeline_url: NotRequired[str]
    title: str
    updated_at: datetime
    url: str
    user: WebhookIssuesUnlockedPropIssueMergedUserType


class WebhookIssuesUnlockedPropIssueAllof0Type(TypedDict):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    assignee: NotRequired[
        Union[WebhookIssuesUnlockedPropIssueAllof0PropAssigneeType, None]
    ]
    assignees: List[
        Union[WebhookIssuesUnlockedPropIssueAllof0PropAssigneesItemsType, None]
    ]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: Union[str, None]
    closed_at: Union[datetime, None]
    comments: int
    comments_url: str
    created_at: datetime
    draft: NotRequired[bool]
    events_url: str
    html_url: str
    id: int
    labels: NotRequired[List[WebhookIssuesUnlockedPropIssueAllof0PropLabelsItemsType]]
    labels_url: str
    locked: NotRequired[bool]
    milestone: Union[WebhookIssuesUnlockedPropIssueAllof0PropMilestoneType, None]
    node_id: str
    number: int
    performed_via_github_app: NotRequired[
        Union[WebhookIssuesUnlockedPropIssueAllof0PropPerformedViaGithubAppType, None]
    ]
    pull_request: NotRequired[WebhookIssuesUnlockedPropIssueAllof0PropPullRequestType]
    reactions: WebhookIssuesUnlockedPropIssueAllof0PropReactionsType
    repository_url: str
    state: NotRequired[Literal["open", "closed"]]
    state_reason: NotRequired[Union[str, None]]
    timeline_url: NotRequired[str]
    title: str
    updated_at: datetime
    url: str
    user: Union[WebhookIssuesUnlockedPropIssueAllof0PropUserType, None]


class WebhookIssuesUnlockedPropIssueAllof0PropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesUnlockedPropIssueAllof0PropAssigneesItemsType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesUnlockedPropIssueAllof0PropLabelsItemsType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookIssuesUnlockedPropIssueAllof0PropMilestonePropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesUnlockedPropIssueAllof0PropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[
        WebhookIssuesUnlockedPropIssueAllof0PropMilestonePropCreatorType, None
    ]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookIssuesUnlockedPropIssueAllof0PropPerformedViaGithubAppPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesUnlockedPropIssueAllof0PropPerformedViaGithubAppPropPermissionsType(
    TypedDict
):
    """WebhookIssuesUnlockedPropIssueAllof0PropPerformedViaGithubAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: NotRequired[Literal["read", "write"]]
    administration: NotRequired[Literal["read", "write"]]
    checks: NotRequired[Literal["read", "write"]]
    content_references: NotRequired[Literal["read", "write"]]
    contents: NotRequired[Literal["read", "write"]]
    deployments: NotRequired[Literal["read", "write"]]
    discussions: NotRequired[Literal["read", "write"]]
    emails: NotRequired[Literal["read", "write"]]
    environments: NotRequired[Literal["read", "write"]]
    issues: NotRequired[Literal["read", "write"]]
    keys: NotRequired[Literal["read", "write"]]
    members: NotRequired[Literal["read", "write"]]
    metadata: NotRequired[Literal["read", "write"]]
    organization_administration: NotRequired[Literal["read", "write"]]
    organization_hooks: NotRequired[Literal["read", "write"]]
    organization_packages: NotRequired[Literal["read", "write"]]
    organization_plan: NotRequired[Literal["read", "write"]]
    organization_projects: NotRequired[Literal["read", "write"]]
    organization_secrets: NotRequired[Literal["read", "write"]]
    organization_self_hosted_runners: NotRequired[Literal["read", "write"]]
    organization_user_blocking: NotRequired[Literal["read", "write"]]
    packages: NotRequired[Literal["read", "write"]]
    pages: NotRequired[Literal["read", "write"]]
    pull_requests: NotRequired[Literal["read", "write"]]
    repository_hooks: NotRequired[Literal["read", "write"]]
    repository_projects: NotRequired[Literal["read", "write"]]
    secret_scanning_alerts: NotRequired[Literal["read", "write"]]
    secrets: NotRequired[Literal["read", "write"]]
    security_events: NotRequired[Literal["read", "write"]]
    security_scanning_alert: NotRequired[Literal["read", "write"]]
    single_file: NotRequired[Literal["read", "write"]]
    statuses: NotRequired[Literal["read", "write"]]
    team_discussions: NotRequired[Literal["read", "write"]]
    vulnerability_alerts: NotRequired[Literal["read", "write"]]
    workflows: NotRequired[Literal["read", "write"]]


class WebhookIssuesUnlockedPropIssueAllof0PropPerformedViaGithubAppType(TypedDict):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None]
    description: Union[str, None]
    events: NotRequired[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
            ]
        ]
    ]
    external_url: Union[str, None]
    html_url: str
    id: Union[int, None]
    name: str
    node_id: str
    owner: Union[
        WebhookIssuesUnlockedPropIssueAllof0PropPerformedViaGithubAppPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookIssuesUnlockedPropIssueAllof0PropPerformedViaGithubAppPropPermissionsType
    ]
    slug: NotRequired[str]
    updated_at: Union[datetime, None]


class WebhookIssuesUnlockedPropIssueAllof0PropPullRequestType(TypedDict):
    """WebhookIssuesUnlockedPropIssueAllof0PropPullRequest"""

    diff_url: NotRequired[str]
    html_url: NotRequired[str]
    merged_at: NotRequired[Union[datetime, None]]
    patch_url: NotRequired[str]
    url: NotRequired[str]


class WebhookIssuesUnlockedPropIssueAllof0PropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookIssuesUnlockedPropIssueAllof0PropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesUnlockedPropIssueAllof1Type(TypedDict):
    """WebhookIssuesUnlockedPropIssueAllof1"""

    active_lock_reason: None
    assignee: NotRequired[
        Union[WebhookIssuesUnlockedPropIssueAllof1PropAssigneeType, None]
    ]
    assignees: NotRequired[
        List[Union[WebhookIssuesUnlockedPropIssueAllof1PropAssigneesItemsType, None]]
    ]
    author_association: NotRequired[str]
    body: NotRequired[Union[str, None]]
    closed_at: NotRequired[Union[str, None]]
    comments: NotRequired[int]
    comments_url: NotRequired[str]
    created_at: NotRequired[str]
    events_url: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    labels: NotRequired[
        List[Union[WebhookIssuesUnlockedPropIssueAllof1PropLabelsItemsType, None]]
    ]
    labels_url: NotRequired[str]
    locked: Literal[False]
    milestone: NotRequired[
        Union[WebhookIssuesUnlockedPropIssueAllof1PropMilestoneType, None]
    ]
    node_id: NotRequired[str]
    number: NotRequired[int]
    performed_via_github_app: NotRequired[None]
    reactions: NotRequired[WebhookIssuesUnlockedPropIssueAllof1PropReactionsType]
    repository_url: NotRequired[str]
    state: NotRequired[str]
    timeline_url: NotRequired[str]
    title: NotRequired[str]
    updated_at: NotRequired[str]
    url: NotRequired[str]
    user: NotRequired[WebhookIssuesUnlockedPropIssueAllof1PropUserType]


class WebhookIssuesUnlockedPropIssueAllof1PropAssigneeType(TypedDict):
    """WebhookIssuesUnlockedPropIssueAllof1PropAssignee"""


class WebhookIssuesUnlockedPropIssueAllof1PropAssigneesItemsType(TypedDict):
    """WebhookIssuesUnlockedPropIssueAllof1PropAssigneesItems"""


class WebhookIssuesUnlockedPropIssueAllof1PropLabelsItemsType(TypedDict):
    """WebhookIssuesUnlockedPropIssueAllof1PropLabelsItems"""


class WebhookIssuesUnlockedPropIssueAllof1PropMilestoneType(TypedDict):
    """WebhookIssuesUnlockedPropIssueAllof1PropMilestone"""


class WebhookIssuesUnlockedPropIssueAllof1PropReactionsType(TypedDict):
    """WebhookIssuesUnlockedPropIssueAllof1PropReactions"""

    plus_one: NotRequired[int]
    minus_one: NotRequired[int]
    confused: NotRequired[int]
    eyes: NotRequired[int]
    heart: NotRequired[int]
    hooray: NotRequired[int]
    laugh: NotRequired[int]
    rocket: NotRequired[int]
    total_count: NotRequired[int]
    url: NotRequired[str]


class WebhookIssuesUnlockedPropIssueAllof1PropUserType(TypedDict):
    """WebhookIssuesUnlockedPropIssueAllof1PropUser"""

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookIssuesUnlockedPropIssueMergedAssigneeType(TypedDict):
    """WebhookIssuesUnlockedPropIssueMergedAssignee"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesUnlockedPropIssueMergedAssigneesType(TypedDict):
    """WebhookIssuesUnlockedPropIssueMergedAssignees"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesUnlockedPropIssueMergedLabelsType(TypedDict):
    """WebhookIssuesUnlockedPropIssueMergedLabels"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookIssuesUnlockedPropIssueMergedMilestoneType(TypedDict):
    """WebhookIssuesUnlockedPropIssueMergedMilestone"""

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[
        WebhookIssuesUnlockedPropIssueAllof0PropMilestonePropCreatorType, None
    ]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookIssuesUnlockedPropIssueMergedReactionsType(TypedDict):
    """WebhookIssuesUnlockedPropIssueMergedReactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookIssuesUnlockedPropIssueMergedUserType(TypedDict):
    """WebhookIssuesUnlockedPropIssueMergedUser"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesUnpinnedType(TypedDict):
    """issues unpinned event"""

    action: Literal["unpinned"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    issue: WebhookIssuesUnpinnedPropIssueType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookIssuesUnpinnedPropIssueType(TypedDict):
    """Issue

    The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    """

    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    assignee: NotRequired[Union[WebhookIssuesUnpinnedPropIssuePropAssigneeType, None]]
    assignees: List[Union[WebhookIssuesUnpinnedPropIssuePropAssigneesItemsType, None]]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: Union[str, None]
    closed_at: Union[datetime, None]
    comments: int
    comments_url: str
    created_at: datetime
    draft: NotRequired[bool]
    events_url: str
    html_url: str
    id: int
    labels: NotRequired[List[WebhookIssuesUnpinnedPropIssuePropLabelsItemsType]]
    labels_url: str
    locked: NotRequired[bool]
    milestone: Union[WebhookIssuesUnpinnedPropIssuePropMilestoneType, None]
    node_id: str
    number: int
    performed_via_github_app: NotRequired[
        Union[WebhookIssuesUnpinnedPropIssuePropPerformedViaGithubAppType, None]
    ]
    pull_request: NotRequired[WebhookIssuesUnpinnedPropIssuePropPullRequestType]
    reactions: WebhookIssuesUnpinnedPropIssuePropReactionsType
    repository_url: str
    state: NotRequired[Literal["open", "closed"]]
    state_reason: NotRequired[Union[str, None]]
    timeline_url: NotRequired[str]
    title: str
    updated_at: datetime
    url: str
    user: Union[WebhookIssuesUnpinnedPropIssuePropUserType, None]


class WebhookIssuesUnpinnedPropIssuePropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesUnpinnedPropIssuePropAssigneesItemsType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesUnpinnedPropIssuePropLabelsItemsType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookIssuesUnpinnedPropIssuePropMilestonePropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesUnpinnedPropIssuePropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[WebhookIssuesUnpinnedPropIssuePropMilestonePropCreatorType, None]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookIssuesUnpinnedPropIssuePropPerformedViaGithubAppPropOwnerType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookIssuesUnpinnedPropIssuePropPerformedViaGithubAppPropPermissionsType(
    TypedDict
):
    """WebhookIssuesUnpinnedPropIssuePropPerformedViaGithubAppPropPermissions

    The set of permissions for the GitHub app
    """

    actions: NotRequired[Literal["read", "write"]]
    administration: NotRequired[Literal["read", "write"]]
    checks: NotRequired[Literal["read", "write"]]
    content_references: NotRequired[Literal["read", "write"]]
    contents: NotRequired[Literal["read", "write"]]
    deployments: NotRequired[Literal["read", "write"]]
    discussions: NotRequired[Literal["read", "write"]]
    emails: NotRequired[Literal["read", "write"]]
    environments: NotRequired[Literal["read", "write"]]
    issues: NotRequired[Literal["read", "write"]]
    keys: NotRequired[Literal["read", "write"]]
    members: NotRequired[Literal["read", "write"]]
    metadata: NotRequired[Literal["read", "write"]]
    organization_administration: NotRequired[Literal["read", "write"]]
    organization_hooks: NotRequired[Literal["read", "write"]]
    organization_packages: NotRequired[Literal["read", "write"]]
    organization_plan: NotRequired[Literal["read", "write"]]
    organization_projects: NotRequired[Literal["read", "write"]]
    organization_secrets: NotRequired[Literal["read", "write"]]
    organization_self_hosted_runners: NotRequired[Literal["read", "write"]]
    organization_user_blocking: NotRequired[Literal["read", "write"]]
    packages: NotRequired[Literal["read", "write"]]
    pages: NotRequired[Literal["read", "write"]]
    pull_requests: NotRequired[Literal["read", "write"]]
    repository_hooks: NotRequired[Literal["read", "write"]]
    repository_projects: NotRequired[Literal["read", "write"]]
    secret_scanning_alerts: NotRequired[Literal["read", "write"]]
    secrets: NotRequired[Literal["read", "write"]]
    security_events: NotRequired[Literal["read", "write"]]
    security_scanning_alert: NotRequired[Literal["read", "write"]]
    single_file: NotRequired[Literal["read", "write"]]
    statuses: NotRequired[Literal["read", "write"]]
    team_discussions: NotRequired[Literal["read", "write"]]
    vulnerability_alerts: NotRequired[Literal["read", "write"]]
    workflows: NotRequired[Literal["read", "write"]]


class WebhookIssuesUnpinnedPropIssuePropPerformedViaGithubAppType(TypedDict):
    """App

    GitHub apps are a new way to extend GitHub. They can be installed directly on
    organizations and user accounts and granted access to specific repositories.
    They come with granular permissions and built-in webhooks. GitHub apps are first
    class actors within GitHub.
    """

    created_at: Union[datetime, None]
    description: Union[str, None]
    events: NotRequired[
        List[
            Literal[
                "branch_protection_rule",
                "check_run",
                "check_suite",
                "code_scanning_alert",
                "commit_comment",
                "content_reference",
                "create",
                "delete",
                "deployment",
                "deployment_review",
                "deployment_status",
                "deploy_key",
                "discussion",
                "discussion_comment",
                "fork",
                "gollum",
                "issues",
                "issue_comment",
                "label",
                "member",
                "membership",
                "milestone",
                "organization",
                "org_block",
                "page_build",
                "project",
                "project_card",
                "project_column",
                "public",
                "pull_request",
                "pull_request_review",
                "pull_request_review_comment",
                "push",
                "registry_package",
                "release",
                "repository",
                "repository_dispatch",
                "secret_scanning_alert",
                "star",
                "status",
                "team",
                "team_add",
                "watch",
                "workflow_dispatch",
                "workflow_run",
            ]
        ]
    ]
    external_url: Union[str, None]
    html_url: str
    id: Union[int, None]
    name: str
    node_id: str
    owner: Union[
        WebhookIssuesUnpinnedPropIssuePropPerformedViaGithubAppPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookIssuesUnpinnedPropIssuePropPerformedViaGithubAppPropPermissionsType
    ]
    slug: NotRequired[str]
    updated_at: Union[datetime, None]


class WebhookIssuesUnpinnedPropIssuePropPullRequestType(TypedDict):
    """WebhookIssuesUnpinnedPropIssuePropPullRequest"""

    diff_url: NotRequired[str]
    html_url: NotRequired[str]
    merged_at: NotRequired[Union[datetime, None]]
    patch_url: NotRequired[str]
    url: NotRequired[str]


class WebhookIssuesUnpinnedPropIssuePropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookIssuesUnpinnedPropIssuePropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookLabelCreatedType(TypedDict):
    """label created event"""

    action: Literal["created"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    label: WebhookLabelCreatedPropLabelType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: NotRequired[SimpleUserWebhooksType]


class WebhookLabelCreatedPropLabelType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookLabelDeletedType(TypedDict):
    """label deleted event"""

    action: Literal["deleted"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    label: WebhookLabelDeletedPropLabelType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookLabelDeletedPropLabelType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookLabelEditedType(TypedDict):
    """label edited event"""

    action: Literal["edited"]
    changes: NotRequired[WebhookLabelEditedPropChangesType]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    label: WebhookLabelEditedPropLabelType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookLabelEditedPropChangesType(TypedDict):
    """WebhookLabelEditedPropChanges

    The changes to the label if the action was `edited`.
    """

    color: NotRequired[WebhookLabelEditedPropChangesPropColorType]
    description: NotRequired[WebhookLabelEditedPropChangesPropDescriptionType]
    name: NotRequired[WebhookLabelEditedPropChangesPropNameType]


class WebhookLabelEditedPropChangesPropColorType(TypedDict):
    """WebhookLabelEditedPropChangesPropColor"""

    from_: str


class WebhookLabelEditedPropChangesPropDescriptionType(TypedDict):
    """WebhookLabelEditedPropChangesPropDescription"""

    from_: str


class WebhookLabelEditedPropChangesPropNameType(TypedDict):
    """WebhookLabelEditedPropChangesPropName"""

    from_: str


class WebhookLabelEditedPropLabelType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookMarketplacePurchaseCancelledType(TypedDict):
    """marketplace_purchase cancelled event"""

    action: Literal["cancelled"]
    effective_date: str
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    marketplace_purchase: WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    previous_marketplace_purchase: NotRequired[
        WebhookMarketplacePurchaseCancelledPropPreviousMarketplacePurchaseType
    ]
    repository: NotRequired[RepositoryWebhooksType]
    sender: SimpleUserWebhooksType


class WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseType(TypedDict):
    """WebhookMarketplacePurchaseCancelledPropMarketplacePurchase"""

    account: WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseMergedAccountType
    billing_cycle: str
    free_trial_ends_on: Union[Union[str, None], None]
    next_billing_date: Union[Union[str, None], None]
    on_free_trial: bool
    plan: WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseMergedPlanType
    unit_count: int


class WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof0Type(TypedDict):
    """Marketplace Purchase"""

    account: WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof0PropAccountType
    billing_cycle: str
    free_trial_ends_on: Union[str, None]
    next_billing_date: NotRequired[Union[str, None]]
    on_free_trial: bool
    plan: WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof0PropPlanType
    unit_count: int


class WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof0PropAccountType(
    TypedDict
):
    """WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof0PropAccount"""

    id: int
    login: str
    node_id: str
    organization_billing_email: Union[str, None]
    type: str


class WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof0PropPlanType(
    TypedDict
):
    """WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof0PropPlan"""

    bullets: List[str]
    description: str
    has_free_trial: bool
    id: int
    monthly_price_in_cents: int
    name: str
    price_model: Literal["FREE", "FLAT_RATE", "PER_UNIT"]
    unit_name: Union[str, None]
    yearly_price_in_cents: int


class WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof1Type(TypedDict):
    """WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof1"""

    account: NotRequired[
        WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof1PropAccountType
    ]
    billing_cycle: NotRequired[str]
    free_trial_ends_on: NotRequired[Union[str, None]]
    next_billing_date: Union[str, None]
    on_free_trial: NotRequired[bool]
    plan: NotRequired[
        WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof1PropPlanType
    ]
    unit_count: NotRequired[int]


class WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof1PropAccountType(
    TypedDict
):
    """WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof1PropAccount"""

    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organization_billing_email: NotRequired[Union[str, None]]
    type: NotRequired[str]


class WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof1PropPlanType(
    TypedDict
):
    """WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof1PropPlan"""

    bullets: NotRequired[List[Union[str, None]]]
    description: NotRequired[str]
    has_free_trial: NotRequired[bool]
    id: NotRequired[int]
    monthly_price_in_cents: NotRequired[int]
    name: NotRequired[str]
    price_model: NotRequired[Literal["FREE", "FLAT_RATE", "PER_UNIT"]]
    unit_name: NotRequired[Union[str, None]]
    yearly_price_in_cents: NotRequired[int]


class WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseMergedAccountType(
    TypedDict
):
    """WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseMergedAccount"""

    id: int
    login: str
    node_id: str
    organization_billing_email: Union[Union[str, None], None]
    type: str


class WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseMergedPlanType(
    TypedDict
):
    """WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseMergedPlan"""

    bullets: List[str]
    description: str
    has_free_trial: bool
    id: int
    monthly_price_in_cents: int
    name: str
    price_model: Literal["FREE", "FLAT_RATE", "PER_UNIT"]
    unit_name: Union[Union[str, None], None]
    yearly_price_in_cents: int


class WebhookMarketplacePurchaseCancelledPropPreviousMarketplacePurchaseType(TypedDict):
    """Marketplace Purchase"""

    account: WebhookMarketplacePurchaseCancelledPropPreviousMarketplacePurchasePropAccountType
    billing_cycle: str
    free_trial_ends_on: None
    next_billing_date: NotRequired[Union[str, None]]
    on_free_trial: bool
    plan: WebhookMarketplacePurchaseCancelledPropPreviousMarketplacePurchasePropPlanType
    unit_count: int


class WebhookMarketplacePurchaseCancelledPropPreviousMarketplacePurchasePropAccountType(
    TypedDict
):
    """WebhookMarketplacePurchaseCancelledPropPreviousMarketplacePurchasePropAccount"""

    id: int
    login: str
    node_id: str
    organization_billing_email: Union[str, None]
    type: str


class WebhookMarketplacePurchaseCancelledPropPreviousMarketplacePurchasePropPlanType(
    TypedDict
):
    """WebhookMarketplacePurchaseCancelledPropPreviousMarketplacePurchasePropPlan"""

    bullets: List[str]
    description: str
    has_free_trial: bool
    id: int
    monthly_price_in_cents: int
    name: str
    price_model: Literal["FREE", "FLAT_RATE", "PER_UNIT"]
    unit_name: Union[str, None]
    yearly_price_in_cents: int


class WebhookMarketplacePurchaseChangedType(TypedDict):
    """marketplace_purchase changed event"""

    action: Literal["changed"]
    effective_date: str
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    marketplace_purchase: WebhookMarketplacePurchaseChangedPropMarketplacePurchaseType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    previous_marketplace_purchase: NotRequired[
        WebhookMarketplacePurchaseChangedPropPreviousMarketplacePurchaseType
    ]
    repository: NotRequired[RepositoryWebhooksType]
    sender: SimpleUserWebhooksType


class WebhookMarketplacePurchaseChangedPropMarketplacePurchaseType(TypedDict):
    """WebhookMarketplacePurchaseChangedPropMarketplacePurchase"""

    account: WebhookMarketplacePurchaseChangedPropMarketplacePurchaseMergedAccountType
    billing_cycle: str
    free_trial_ends_on: Union[Union[str, None], None]
    next_billing_date: Union[Union[str, None], None]
    on_free_trial: bool
    plan: WebhookMarketplacePurchaseChangedPropMarketplacePurchaseMergedPlanType
    unit_count: int


class WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof0Type(TypedDict):
    """Marketplace Purchase"""

    account: WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof0PropAccountType
    billing_cycle: str
    free_trial_ends_on: Union[str, None]
    next_billing_date: NotRequired[Union[str, None]]
    on_free_trial: bool
    plan: WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof0PropPlanType
    unit_count: int


class WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof0PropAccountType(
    TypedDict
):
    """WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof0PropAccount"""

    id: int
    login: str
    node_id: str
    organization_billing_email: Union[str, None]
    type: str


class WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof0PropPlanType(
    TypedDict
):
    """WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof0PropPlan"""

    bullets: List[str]
    description: str
    has_free_trial: bool
    id: int
    monthly_price_in_cents: int
    name: str
    price_model: Literal["FREE", "FLAT_RATE", "PER_UNIT"]
    unit_name: Union[str, None]
    yearly_price_in_cents: int


class WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof1Type(TypedDict):
    """WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof1"""

    account: NotRequired[
        WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof1PropAccountType
    ]
    billing_cycle: NotRequired[str]
    free_trial_ends_on: NotRequired[Union[str, None]]
    next_billing_date: Union[str, None]
    on_free_trial: NotRequired[bool]
    plan: NotRequired[
        WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof1PropPlanType
    ]
    unit_count: NotRequired[int]


class WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof1PropAccountType(
    TypedDict
):
    """WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof1PropAccount"""

    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organization_billing_email: NotRequired[Union[str, None]]
    type: NotRequired[str]


class WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof1PropPlanType(
    TypedDict
):
    """WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof1PropPlan"""

    bullets: NotRequired[List[Union[str, None]]]
    description: NotRequired[str]
    has_free_trial: NotRequired[bool]
    id: NotRequired[int]
    monthly_price_in_cents: NotRequired[int]
    name: NotRequired[str]
    price_model: NotRequired[Literal["FREE", "FLAT_RATE", "PER_UNIT"]]
    unit_name: NotRequired[Union[str, None]]
    yearly_price_in_cents: NotRequired[int]


class WebhookMarketplacePurchaseChangedPropMarketplacePurchaseMergedAccountType(
    TypedDict
):
    """WebhookMarketplacePurchaseChangedPropMarketplacePurchaseMergedAccount"""

    id: int
    login: str
    node_id: str
    organization_billing_email: Union[Union[str, None], None]
    type: str


class WebhookMarketplacePurchaseChangedPropMarketplacePurchaseMergedPlanType(TypedDict):
    """WebhookMarketplacePurchaseChangedPropMarketplacePurchaseMergedPlan"""

    bullets: List[str]
    description: str
    has_free_trial: bool
    id: int
    monthly_price_in_cents: int
    name: str
    price_model: Literal["FREE", "FLAT_RATE", "PER_UNIT"]
    unit_name: Union[Union[str, None], None]
    yearly_price_in_cents: int


class WebhookMarketplacePurchaseChangedPropPreviousMarketplacePurchaseType(TypedDict):
    """Marketplace Purchase"""

    account: WebhookMarketplacePurchaseChangedPropPreviousMarketplacePurchasePropAccountType
    billing_cycle: str
    free_trial_ends_on: Union[str, None]
    next_billing_date: NotRequired[Union[str, None]]
    on_free_trial: Union[bool, None]
    plan: WebhookMarketplacePurchaseChangedPropPreviousMarketplacePurchasePropPlanType
    unit_count: int


class WebhookMarketplacePurchaseChangedPropPreviousMarketplacePurchasePropAccountType(
    TypedDict
):
    """WebhookMarketplacePurchaseChangedPropPreviousMarketplacePurchasePropAccount"""

    id: int
    login: str
    node_id: str
    organization_billing_email: Union[str, None]
    type: str


class WebhookMarketplacePurchaseChangedPropPreviousMarketplacePurchasePropPlanType(
    TypedDict
):
    """WebhookMarketplacePurchaseChangedPropPreviousMarketplacePurchasePropPlan"""

    bullets: List[str]
    description: str
    has_free_trial: bool
    id: int
    monthly_price_in_cents: int
    name: str
    price_model: Literal["FREE", "FLAT_RATE", "PER_UNIT"]
    unit_name: Union[str, None]
    yearly_price_in_cents: int


class WebhookMarketplacePurchasePendingChangeType(TypedDict):
    """marketplace_purchase pending_change event"""

    action: Literal["pending_change"]
    effective_date: str
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    marketplace_purchase: WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    previous_marketplace_purchase: NotRequired[
        WebhookMarketplacePurchasePendingChangePropPreviousMarketplacePurchaseType
    ]
    repository: NotRequired[RepositoryWebhooksType]
    sender: SimpleUserWebhooksType


class WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseType(TypedDict):
    """WebhookMarketplacePurchasePendingChangePropMarketplacePurchase"""

    account: WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseMergedAccountType
    billing_cycle: str
    free_trial_ends_on: Union[Union[str, None], None]
    next_billing_date: Union[Union[str, None], None]
    on_free_trial: bool
    plan: WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseMergedPlanType
    unit_count: int


class WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof0Type(
    TypedDict
):
    """Marketplace Purchase"""

    account: WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof0PropAccountType
    billing_cycle: str
    free_trial_ends_on: Union[str, None]
    next_billing_date: NotRequired[Union[str, None]]
    on_free_trial: bool
    plan: WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof0PropPlanType
    unit_count: int


class WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof0PropAccountType(
    TypedDict
):
    """WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof0PropAccount"""

    id: int
    login: str
    node_id: str
    organization_billing_email: Union[str, None]
    type: str


class WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof0PropPlanType(
    TypedDict
):
    """WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof0PropPlan"""

    bullets: List[str]
    description: str
    has_free_trial: bool
    id: int
    monthly_price_in_cents: int
    name: str
    price_model: Literal["FREE", "FLAT_RATE", "PER_UNIT"]
    unit_name: Union[str, None]
    yearly_price_in_cents: int


class WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof1Type(
    TypedDict
):
    """WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof1"""

    account: NotRequired[
        WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof1PropAccountType
    ]
    billing_cycle: NotRequired[str]
    free_trial_ends_on: NotRequired[Union[str, None]]
    next_billing_date: Union[str, None]
    on_free_trial: NotRequired[bool]
    plan: NotRequired[
        WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof1PropPlanType
    ]
    unit_count: NotRequired[int]


class WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof1PropAccountType(
    TypedDict
):
    """WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof1PropAccount"""

    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organization_billing_email: NotRequired[Union[str, None]]
    type: NotRequired[str]


class WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof1PropPlanType(
    TypedDict
):
    """WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof1PropPlan"""

    bullets: NotRequired[List[Union[str, None]]]
    description: NotRequired[str]
    has_free_trial: NotRequired[bool]
    id: NotRequired[int]
    monthly_price_in_cents: NotRequired[int]
    name: NotRequired[str]
    price_model: NotRequired[Literal["FREE", "FLAT_RATE", "PER_UNIT"]]
    unit_name: NotRequired[Union[str, None]]
    yearly_price_in_cents: NotRequired[int]


class WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseMergedAccountType(
    TypedDict
):
    """WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseMergedAccount"""

    id: int
    login: str
    node_id: str
    organization_billing_email: Union[Union[str, None], None]
    type: str


class WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseMergedPlanType(
    TypedDict
):
    """WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseMergedPlan"""

    bullets: List[str]
    description: str
    has_free_trial: bool
    id: int
    monthly_price_in_cents: int
    name: str
    price_model: Literal["FREE", "FLAT_RATE", "PER_UNIT"]
    unit_name: Union[Union[str, None], None]
    yearly_price_in_cents: int


class WebhookMarketplacePurchasePendingChangePropPreviousMarketplacePurchaseType(
    TypedDict
):
    """Marketplace Purchase"""

    account: WebhookMarketplacePurchasePendingChangePropPreviousMarketplacePurchasePropAccountType
    billing_cycle: str
    free_trial_ends_on: Union[str, None]
    next_billing_date: NotRequired[Union[str, None]]
    on_free_trial: bool
    plan: WebhookMarketplacePurchasePendingChangePropPreviousMarketplacePurchasePropPlanType
    unit_count: int


class WebhookMarketplacePurchasePendingChangePropPreviousMarketplacePurchasePropAccountType(
    TypedDict
):
    """WebhookMarketplacePurchasePendingChangePropPreviousMarketplacePurchasePropAccoun
    t
    """

    id: int
    login: str
    node_id: str
    organization_billing_email: Union[str, None]
    type: str


class WebhookMarketplacePurchasePendingChangePropPreviousMarketplacePurchasePropPlanType(
    TypedDict
):
    """WebhookMarketplacePurchasePendingChangePropPreviousMarketplacePurchasePropPlan"""

    bullets: List[str]
    description: str
    has_free_trial: bool
    id: int
    monthly_price_in_cents: int
    name: str
    price_model: Literal["FREE", "FLAT_RATE", "PER_UNIT"]
    unit_name: Union[str, None]
    yearly_price_in_cents: int


class WebhookMarketplacePurchasePendingChangeCancelledType(TypedDict):
    """marketplace_purchase pending_change_cancelled event"""

    action: Literal["pending_change_cancelled"]
    effective_date: str
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    marketplace_purchase: WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchaseType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    previous_marketplace_purchase: NotRequired[
        WebhookMarketplacePurchasePendingChangeCancelledPropPreviousMarketplacePurchaseType
    ]
    repository: NotRequired[RepositoryWebhooksType]
    sender: SimpleUserWebhooksType


class WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchaseType(
    TypedDict
):
    """WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchase"""

    account: WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchaseAllof0PropAccountType
    billing_cycle: str
    free_trial_ends_on: None
    next_billing_date: str
    on_free_trial: bool
    plan: WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchaseAllof0PropPlanType
    unit_count: int


class WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchaseAllof0Type(
    TypedDict
):
    """Marketplace Purchase"""

    account: WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchaseAllof0PropAccountType
    billing_cycle: str
    free_trial_ends_on: None
    next_billing_date: NotRequired[Union[str, None]]
    on_free_trial: bool
    plan: WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchaseAllof0PropPlanType
    unit_count: int


class WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchaseAllof0PropAccountType(
    TypedDict
):
    """WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchaseAllof0Pro
    pAccount
    """

    id: int
    login: str
    node_id: str
    organization_billing_email: Union[str, None]
    type: str


class WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchaseAllof0PropPlanType(
    TypedDict
):
    """WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchaseAllof0Pro
    pPlan
    """

    bullets: List[str]
    description: str
    has_free_trial: bool
    id: int
    monthly_price_in_cents: int
    name: str
    price_model: Literal["FREE", "FLAT_RATE", "PER_UNIT"]
    unit_name: Union[str, None]
    yearly_price_in_cents: int


class WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchaseAllof1Type(
    TypedDict
):
    """WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchaseAllof1"""

    next_billing_date: str


class WebhookMarketplacePurchasePendingChangeCancelledPropPreviousMarketplacePurchaseType(
    TypedDict
):
    """Marketplace Purchase"""

    account: WebhookMarketplacePurchasePendingChangeCancelledPropPreviousMarketplacePurchasePropAccountType
    billing_cycle: str
    free_trial_ends_on: None
    next_billing_date: NotRequired[Union[str, None]]
    on_free_trial: bool
    plan: WebhookMarketplacePurchasePendingChangeCancelledPropPreviousMarketplacePurchasePropPlanType
    unit_count: int


class WebhookMarketplacePurchasePendingChangeCancelledPropPreviousMarketplacePurchasePropAccountType(
    TypedDict
):
    """WebhookMarketplacePurchasePendingChangeCancelledPropPreviousMarketplacePurchaseP
    ropAccount
    """

    id: int
    login: str
    node_id: str
    organization_billing_email: Union[str, None]
    type: str


class WebhookMarketplacePurchasePendingChangeCancelledPropPreviousMarketplacePurchasePropPlanType(
    TypedDict
):
    """WebhookMarketplacePurchasePendingChangeCancelledPropPreviousMarketplacePurchaseP
    ropPlan
    """

    bullets: List[str]
    description: str
    has_free_trial: bool
    id: int
    monthly_price_in_cents: int
    name: str
    price_model: Literal["FREE", "FLAT_RATE", "PER_UNIT"]
    unit_name: Union[str, None]
    yearly_price_in_cents: int


class WebhookMarketplacePurchasePurchasedType(TypedDict):
    """marketplace_purchase purchased event"""

    action: Literal["purchased"]
    effective_date: str
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    marketplace_purchase: WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    previous_marketplace_purchase: NotRequired[
        WebhookMarketplacePurchasePurchasedPropPreviousMarketplacePurchaseType
    ]
    repository: NotRequired[RepositoryWebhooksType]
    sender: SimpleUserWebhooksType


class WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseType(TypedDict):
    """WebhookMarketplacePurchasePurchasedPropMarketplacePurchase"""

    account: WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseMergedAccountType
    billing_cycle: str
    free_trial_ends_on: Union[Union[str, None], None]
    next_billing_date: Union[Union[str, None], None]
    on_free_trial: bool
    plan: WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseMergedPlanType
    unit_count: int


class WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof0Type(TypedDict):
    """Marketplace Purchase"""

    account: WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof0PropAccountType
    billing_cycle: str
    free_trial_ends_on: Union[str, None]
    next_billing_date: NotRequired[Union[str, None]]
    on_free_trial: bool
    plan: WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof0PropPlanType
    unit_count: int


class WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof0PropAccountType(
    TypedDict
):
    """WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof0PropAccount"""

    id: int
    login: str
    node_id: str
    organization_billing_email: Union[str, None]
    type: str


class WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof0PropPlanType(
    TypedDict
):
    """WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof0PropPlan"""

    bullets: List[str]
    description: str
    has_free_trial: bool
    id: int
    monthly_price_in_cents: int
    name: str
    price_model: Literal["FREE", "FLAT_RATE", "PER_UNIT"]
    unit_name: Union[str, None]
    yearly_price_in_cents: int


class WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof1Type(TypedDict):
    """WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof1"""

    account: NotRequired[
        WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof1PropAccountType
    ]
    billing_cycle: NotRequired[str]
    free_trial_ends_on: NotRequired[Union[str, None]]
    next_billing_date: Union[str, None]
    on_free_trial: NotRequired[bool]
    plan: NotRequired[
        WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof1PropPlanType
    ]
    unit_count: NotRequired[int]


class WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof1PropAccountType(
    TypedDict
):
    """WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof1PropAccount"""

    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organization_billing_email: NotRequired[Union[str, None]]
    type: NotRequired[str]


class WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof1PropPlanType(
    TypedDict
):
    """WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof1PropPlan"""

    bullets: NotRequired[List[Union[str, None]]]
    description: NotRequired[str]
    has_free_trial: NotRequired[bool]
    id: NotRequired[int]
    monthly_price_in_cents: NotRequired[int]
    name: NotRequired[str]
    price_model: NotRequired[Literal["FREE", "FLAT_RATE", "PER_UNIT"]]
    unit_name: NotRequired[Union[str, None]]
    yearly_price_in_cents: NotRequired[int]


class WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseMergedAccountType(
    TypedDict
):
    """WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseMergedAccount"""

    id: int
    login: str
    node_id: str
    organization_billing_email: Union[Union[str, None], None]
    type: str


class WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseMergedPlanType(
    TypedDict
):
    """WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseMergedPlan"""

    bullets: List[str]
    description: str
    has_free_trial: bool
    id: int
    monthly_price_in_cents: int
    name: str
    price_model: Literal["FREE", "FLAT_RATE", "PER_UNIT"]
    unit_name: Union[Union[str, None], None]
    yearly_price_in_cents: int


class WebhookMarketplacePurchasePurchasedPropPreviousMarketplacePurchaseType(TypedDict):
    """Marketplace Purchase"""

    account: WebhookMarketplacePurchasePurchasedPropPreviousMarketplacePurchasePropAccountType
    billing_cycle: str
    free_trial_ends_on: None
    next_billing_date: NotRequired[Union[str, None]]
    on_free_trial: bool
    plan: WebhookMarketplacePurchasePurchasedPropPreviousMarketplacePurchasePropPlanType
    unit_count: int


class WebhookMarketplacePurchasePurchasedPropPreviousMarketplacePurchasePropAccountType(
    TypedDict
):
    """WebhookMarketplacePurchasePurchasedPropPreviousMarketplacePurchasePropAccount"""

    id: int
    login: str
    node_id: str
    organization_billing_email: Union[str, None]
    type: str


class WebhookMarketplacePurchasePurchasedPropPreviousMarketplacePurchasePropPlanType(
    TypedDict
):
    """WebhookMarketplacePurchasePurchasedPropPreviousMarketplacePurchasePropPlan"""

    bullets: List[str]
    description: str
    has_free_trial: bool
    id: int
    monthly_price_in_cents: int
    name: str
    price_model: Literal["FREE", "FLAT_RATE", "PER_UNIT"]
    unit_name: Union[str, None]
    yearly_price_in_cents: int


class WebhookMemberAddedType(TypedDict):
    """member added event"""

    action: Literal["added"]
    changes: NotRequired[WebhookMemberAddedPropChangesType]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    member: Union[WebhookMemberAddedPropMemberType, None]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookMemberAddedPropChangesType(TypedDict):
    """WebhookMemberAddedPropChanges"""

    permission: NotRequired[WebhookMemberAddedPropChangesPropPermissionType]


class WebhookMemberAddedPropChangesPropPermissionType(TypedDict):
    """WebhookMemberAddedPropChangesPropPermission"""

    to: Literal["write", "admin", "read"]


class WebhookMemberAddedPropMemberType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookMemberEditedType(TypedDict):
    """member edited event"""

    action: Literal["edited"]
    changes: WebhookMemberEditedPropChangesType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    member: Union[WebhookMemberEditedPropMemberType, None]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookMemberEditedPropChangesType(TypedDict):
    """WebhookMemberEditedPropChanges

    The changes to the collaborator permissions
    """

    old_permission: NotRequired[WebhookMemberEditedPropChangesPropOldPermissionType]
    permission: NotRequired[WebhookMemberEditedPropChangesPropPermissionType]


class WebhookMemberEditedPropChangesPropOldPermissionType(TypedDict):
    """WebhookMemberEditedPropChangesPropOldPermission"""

    from_: str


class WebhookMemberEditedPropChangesPropPermissionType(TypedDict):
    """WebhookMemberEditedPropChangesPropPermission"""

    from_: NotRequired[Union[str, None]]
    to: NotRequired[Union[str, None]]


class WebhookMemberEditedPropMemberType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookMemberRemovedType(TypedDict):
    """member removed event"""

    action: Literal["removed"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    member: Union[WebhookMemberRemovedPropMemberType, None]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookMemberRemovedPropMemberType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookMembershipAddedType(TypedDict):
    """membership added event"""

    action: Literal["added"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    member: Union[WebhookMembershipAddedPropMemberType, None]
    organization: OrganizationSimpleWebhooksType
    repository: NotRequired[RepositoryWebhooksType]
    scope: Literal["team"]
    sender: Union[WebhookMembershipAddedPropSenderType, None]
    team: WebhookMembershipAddedPropTeamType


class WebhookMembershipAddedPropMemberType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookMembershipAddedPropSenderType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookMembershipAddedPropTeamType(TypedDict):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: NotRequired[Union[str, None]]
    html_url: NotRequired[str]
    id: int
    members_url: NotRequired[str]
    name: str
    node_id: NotRequired[str]
    parent: NotRequired[Union[WebhookMembershipAddedPropTeamPropParentType, None]]
    permission: NotRequired[str]
    privacy: NotRequired[Literal["open", "closed", "secret"]]
    notification_setting: NotRequired[
        Literal["notifications_enabled", "notifications_disabled"]
    ]
    repositories_url: NotRequired[str]
    slug: NotRequired[str]
    url: NotRequired[str]


class WebhookMembershipAddedPropTeamPropParentType(TypedDict):
    """WebhookMembershipAddedPropTeamPropParent"""

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    notification_setting: Literal["notifications_enabled", "notifications_disabled"]
    repositories_url: str
    slug: str
    url: str


class WebhookMembershipRemovedType(TypedDict):
    """membership removed event"""

    action: Literal["removed"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    member: Union[WebhookMembershipRemovedPropMemberType, None]
    organization: OrganizationSimpleWebhooksType
    repository: NotRequired[RepositoryWebhooksType]
    scope: Literal["team", "organization"]
    sender: Union[WebhookMembershipRemovedPropSenderType, None]
    team: WebhookMembershipRemovedPropTeamType


class WebhookMembershipRemovedPropMemberType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookMembershipRemovedPropSenderType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookMembershipRemovedPropTeamType(TypedDict):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: NotRequired[Union[str, None]]
    html_url: NotRequired[str]
    id: int
    members_url: NotRequired[str]
    name: str
    node_id: NotRequired[str]
    parent: NotRequired[Union[WebhookMembershipRemovedPropTeamPropParentType, None]]
    permission: NotRequired[str]
    privacy: NotRequired[Literal["open", "closed", "secret"]]
    notification_setting: NotRequired[
        Literal["notifications_enabled", "notifications_disabled"]
    ]
    repositories_url: NotRequired[str]
    slug: NotRequired[str]
    url: NotRequired[str]


class WebhookMembershipRemovedPropTeamPropParentType(TypedDict):
    """WebhookMembershipRemovedPropTeamPropParent"""

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    notification_setting: Literal["notifications_enabled", "notifications_disabled"]
    repositories_url: str
    slug: str
    url: str


class WebhookMergeGroupChecksRequestedType(TypedDict):
    """WebhookMergeGroupChecksRequested"""

    action: Literal["checks_requested"]
    installation: NotRequired[SimpleInstallationType]
    merge_group: MergeGroupType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: NotRequired[RepositoryWebhooksType]
    sender: NotRequired[SimpleUserWebhooksType]


class WebhookMergeGroupDestroyedType(TypedDict):
    """WebhookMergeGroupDestroyed"""

    action: Literal["destroyed"]
    reason: NotRequired[Literal["merged", "invalidated", "dequeued"]]
    installation: NotRequired[SimpleInstallationType]
    merge_group: MergeGroupType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: NotRequired[RepositoryWebhooksType]
    sender: NotRequired[SimpleUserWebhooksType]


class WebhookMetaDeletedType(TypedDict):
    """meta deleted event"""

    action: Literal["deleted"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    hook: WebhookMetaDeletedPropHookType
    hook_id: int
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: NotRequired[Union[None, RepositoryWebhooksType]]
    sender: NotRequired[SimpleUserWebhooksType]


class WebhookMetaDeletedPropHookType(TypedDict):
    """WebhookMetaDeletedPropHook

    The modified webhook. This will contain different keys based on the type of
    webhook it is: repository, organization, business, app, or GitHub Marketplace.
    """

    active: bool
    config: WebhookMetaDeletedPropHookPropConfigType
    created_at: str
    events: List[
        Literal[
            "*",
            "branch_protection_rule",
            "check_run",
            "check_suite",
            "code_scanning_alert",
            "commit_comment",
            "create",
            "delete",
            "deployment",
            "deployment_status",
            "deploy_key",
            "discussion",
            "discussion_comment",
            "fork",
            "gollum",
            "issues",
            "issue_comment",
            "label",
            "member",
            "membership",
            "meta",
            "milestone",
            "organization",
            "org_block",
            "package",
            "page_build",
            "project",
            "project_card",
            "project_column",
            "public",
            "pull_request",
            "pull_request_review",
            "pull_request_review_comment",
            "pull_request_review_thread",
            "push",
            "registry_package",
            "release",
            "repository",
            "repository_import",
            "repository_vulnerability_alert",
            "secret_scanning_alert",
            "secret_scanning_alert_location",
            "security_and_analysis",
            "star",
            "status",
            "team",
            "team_add",
            "watch",
            "workflow_job",
            "workflow_run",
            "repository_dispatch",
            "projects_v2_item",
        ]
    ]
    id: int
    name: str
    type: str
    updated_at: str


class WebhookMetaDeletedPropHookPropConfigType(TypedDict):
    """WebhookMetaDeletedPropHookPropConfig"""

    content_type: Literal["json", "form"]
    insecure_ssl: str
    secret: NotRequired[str]
    url: str


class WebhookMilestoneClosedType(TypedDict):
    """milestone closed event"""

    action: Literal["closed"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    milestone: WebhookMilestoneClosedPropMilestoneType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookMilestoneClosedPropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[WebhookMilestoneClosedPropMilestonePropCreatorType, None]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookMilestoneClosedPropMilestonePropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookMilestoneCreatedType(TypedDict):
    """milestone created event"""

    action: Literal["created"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    milestone: WebhookMilestoneCreatedPropMilestoneType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookMilestoneCreatedPropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[WebhookMilestoneCreatedPropMilestonePropCreatorType, None]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookMilestoneCreatedPropMilestonePropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookMilestoneDeletedType(TypedDict):
    """milestone deleted event"""

    action: Literal["deleted"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    milestone: WebhookMilestoneDeletedPropMilestoneType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookMilestoneDeletedPropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[WebhookMilestoneDeletedPropMilestonePropCreatorType, None]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookMilestoneDeletedPropMilestonePropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookMilestoneEditedType(TypedDict):
    """milestone edited event"""

    action: Literal["edited"]
    changes: WebhookMilestoneEditedPropChangesType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    milestone: WebhookMilestoneEditedPropMilestoneType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookMilestoneEditedPropChangesType(TypedDict):
    """WebhookMilestoneEditedPropChanges

    The changes to the milestone if the action was `edited`.
    """

    description: NotRequired[WebhookMilestoneEditedPropChangesPropDescriptionType]
    due_on: NotRequired[WebhookMilestoneEditedPropChangesPropDueOnType]
    title: NotRequired[WebhookMilestoneEditedPropChangesPropTitleType]


class WebhookMilestoneEditedPropChangesPropDescriptionType(TypedDict):
    """WebhookMilestoneEditedPropChangesPropDescription"""

    from_: str


class WebhookMilestoneEditedPropChangesPropDueOnType(TypedDict):
    """WebhookMilestoneEditedPropChangesPropDueOn"""

    from_: str


class WebhookMilestoneEditedPropChangesPropTitleType(TypedDict):
    """WebhookMilestoneEditedPropChangesPropTitle"""

    from_: str


class WebhookMilestoneEditedPropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[WebhookMilestoneEditedPropMilestonePropCreatorType, None]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookMilestoneEditedPropMilestonePropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookMilestoneOpenedType(TypedDict):
    """milestone opened event"""

    action: Literal["opened"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    milestone: WebhookMilestoneOpenedPropMilestoneType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookMilestoneOpenedPropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[WebhookMilestoneOpenedPropMilestonePropCreatorType, None]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookMilestoneOpenedPropMilestonePropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookOrgBlockBlockedType(TypedDict):
    """org_block blocked event"""

    action: Literal["blocked"]
    blocked_user: Union[WebhookOrgBlockBlockedPropBlockedUserType, None]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: OrganizationSimpleWebhooksType
    repository: NotRequired[RepositoryWebhooksType]
    sender: SimpleUserWebhooksType


class WebhookOrgBlockBlockedPropBlockedUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookOrgBlockUnblockedType(TypedDict):
    """org_block unblocked event"""

    action: Literal["unblocked"]
    blocked_user: Union[WebhookOrgBlockUnblockedPropBlockedUserType, None]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: OrganizationSimpleWebhooksType
    repository: NotRequired[RepositoryWebhooksType]
    sender: SimpleUserWebhooksType


class WebhookOrgBlockUnblockedPropBlockedUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookOrganizationDeletedType(TypedDict):
    """organization deleted event"""

    action: Literal["deleted"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    membership: NotRequired[WebhookOrganizationDeletedPropMembershipType]
    organization: OrganizationSimpleWebhooksType
    repository: NotRequired[RepositoryWebhooksType]
    sender: SimpleUserWebhooksType


class WebhookOrganizationDeletedPropMembershipType(TypedDict):
    """Membership

    The membership between the user and the organization. Not present when the
    action is `member_invited`.
    """

    organization_url: str
    role: str
    state: str
    url: str
    user: Union[WebhookOrganizationDeletedPropMembershipPropUserType, None]


class WebhookOrganizationDeletedPropMembershipPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookOrganizationMemberAddedType(TypedDict):
    """organization member_added event"""

    action: Literal["member_added"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    membership: WebhookOrganizationMemberAddedPropMembershipType
    organization: OrganizationSimpleWebhooksType
    repository: NotRequired[RepositoryWebhooksType]
    sender: SimpleUserWebhooksType


class WebhookOrganizationMemberAddedPropMembershipType(TypedDict):
    """Membership

    The membership between the user and the organization. Not present when the
    action is `member_invited`.
    """

    organization_url: str
    role: str
    state: str
    url: str
    user: Union[WebhookOrganizationMemberAddedPropMembershipPropUserType, None]


class WebhookOrganizationMemberAddedPropMembershipPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookOrganizationMemberInvitedType(TypedDict):
    """organization member_invited event"""

    action: Literal["member_invited"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    invitation: WebhookOrganizationMemberInvitedPropInvitationType
    organization: OrganizationSimpleWebhooksType
    repository: NotRequired[RepositoryWebhooksType]
    sender: SimpleUserWebhooksType
    user: NotRequired[Union[WebhookOrganizationMemberInvitedPropUserType, None]]


class WebhookOrganizationMemberInvitedPropInvitationType(TypedDict):
    """WebhookOrganizationMemberInvitedPropInvitation

    The invitation for the user or email if the action is `member_invited`.
    """

    created_at: datetime
    email: Union[str, None]
    failed_at: Union[datetime, None]
    failed_reason: Union[str, None]
    id: float
    invitation_teams_url: str
    inviter: Union[WebhookOrganizationMemberInvitedPropInvitationPropInviterType, None]
    login: Union[str, None]
    node_id: str
    role: str
    team_count: float
    invitation_source: NotRequired[str]


class WebhookOrganizationMemberInvitedPropInvitationPropInviterType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookOrganizationMemberInvitedPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookOrganizationMemberRemovedType(TypedDict):
    """organization member_removed event"""

    action: Literal["member_removed"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    membership: WebhookOrganizationMemberRemovedPropMembershipType
    organization: OrganizationSimpleWebhooksType
    repository: NotRequired[RepositoryWebhooksType]
    sender: SimpleUserWebhooksType


class WebhookOrganizationMemberRemovedPropMembershipType(TypedDict):
    """Membership

    The membership between the user and the organization. Not present when the
    action is `member_invited`.
    """

    organization_url: str
    role: str
    state: str
    url: str
    user: Union[WebhookOrganizationMemberRemovedPropMembershipPropUserType, None]


class WebhookOrganizationMemberRemovedPropMembershipPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookOrganizationRenamedType(TypedDict):
    """organization renamed event"""

    action: Literal["renamed"]
    changes: NotRequired[WebhookOrganizationRenamedPropChangesType]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    membership: NotRequired[WebhookOrganizationRenamedPropMembershipType]
    organization: OrganizationSimpleWebhooksType
    repository: NotRequired[RepositoryWebhooksType]
    sender: SimpleUserWebhooksType


class WebhookOrganizationRenamedPropChangesType(TypedDict):
    """WebhookOrganizationRenamedPropChanges"""

    login: NotRequired[WebhookOrganizationRenamedPropChangesPropLoginType]


class WebhookOrganizationRenamedPropChangesPropLoginType(TypedDict):
    """WebhookOrganizationRenamedPropChangesPropLogin"""

    from_: NotRequired[str]


class WebhookOrganizationRenamedPropMembershipType(TypedDict):
    """Membership

    The membership between the user and the organization. Not present when the
    action is `member_invited`.
    """

    organization_url: str
    role: str
    state: str
    url: str
    user: Union[WebhookOrganizationRenamedPropMembershipPropUserType, None]


class WebhookOrganizationRenamedPropMembershipPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookRubygemsMetadataType(TypedDict):
    """Ruby Gems metadata"""

    name: NotRequired[str]
    description: NotRequired[str]
    readme: NotRequired[str]
    homepage: NotRequired[str]
    version_info: NotRequired[WebhookRubygemsMetadataPropVersionInfoType]
    platform: NotRequired[str]
    metadata: NotRequired[WebhookRubygemsMetadataPropMetadataType]
    repo: NotRequired[str]
    dependencies: NotRequired[List[WebhookRubygemsMetadataPropDependenciesItemsType]]
    commit_oid: NotRequired[str]


class WebhookRubygemsMetadataPropVersionInfoType(TypedDict):
    """WebhookRubygemsMetadataPropVersionInfo"""

    version: NotRequired[str]


class WebhookRubygemsMetadataPropMetadataType(TypedDict):
    """WebhookRubygemsMetadataPropMetadata"""


class WebhookRubygemsMetadataPropDependenciesItemsType(TypedDict):
    """WebhookRubygemsMetadataPropDependenciesItems"""


class WebhookPackagePublishedType(TypedDict):
    """package published event"""

    action: Literal["published"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    package: WebhookPackagePublishedPropPackageType
    repository: NotRequired[RepositoryWebhooksType]
    sender: SimpleUserWebhooksType


class WebhookPackagePublishedPropPackageType(TypedDict):
    """WebhookPackagePublishedPropPackage

    Information about the package.
    """

    created_at: Union[str, None]
    description: Union[str, None]
    ecosystem: str
    html_url: str
    id: int
    name: str
    namespace: str
    owner: Union[WebhookPackagePublishedPropPackagePropOwnerType, None]
    package_type: str
    package_version: Union[
        WebhookPackagePublishedPropPackagePropPackageVersionType, None
    ]
    registry: Union[WebhookPackagePublishedPropPackagePropRegistryType, None]
    updated_at: Union[str, None]


class WebhookPackagePublishedPropPackagePropOwnerType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPackagePublishedPropPackagePropPackageVersionPropAuthorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPackagePublishedPropPackagePropPackageVersionPropBodyOneof1Type(TypedDict):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropBodyOneof1"""


class WebhookPackagePublishedPropPackagePropPackageVersionPropContainerMetadataPropLabelsType(
    TypedDict
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropContainerMetadataPropLab
    els
    """


class WebhookPackagePublishedPropPackagePropPackageVersionPropContainerMetadataPropManifestType(
    TypedDict
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropContainerMetadataPropMan
    ifest
    """


class WebhookPackagePublishedPropPackagePropPackageVersionPropContainerMetadataPropTagType(
    TypedDict
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropContainerMetadataPropTag"""

    digest: NotRequired[str]
    name: NotRequired[str]


class WebhookPackagePublishedPropPackagePropPackageVersionPropContainerMetadataType(
    TypedDict
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropContainerMetadata"""

    labels: NotRequired[
        Union[
            WebhookPackagePublishedPropPackagePropPackageVersionPropContainerMetadataPropLabelsType,
            None,
        ]
    ]
    manifest: NotRequired[
        Union[
            WebhookPackagePublishedPropPackagePropPackageVersionPropContainerMetadataPropManifestType,
            None,
        ]
    ]
    tag: NotRequired[
        WebhookPackagePublishedPropPackagePropPackageVersionPropContainerMetadataPropTagType
    ]


class WebhookPackagePublishedPropPackagePropPackageVersionPropDockerMetadataItemsType(
    TypedDict
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropDockerMetadataItems"""

    tags: NotRequired[List[str]]


class WebhookPackagePublishedPropPackagePropPackageVersionPropMetadataItemsType(
    TypedDict
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropMetadataItems"""


class WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropAuthorType(
    TypedDict
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropAuthor"""


class WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropBugsType(
    TypedDict
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropBugs"""


class WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropDependenciesType(
    TypedDict
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropDependenc
    ies
    """


class WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropDevDependenciesType(
    TypedDict
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropDevDepend
    encies
    """


class WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropPeerDependenciesType(
    TypedDict
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropPeerDepen
    dencies
    """


class WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropOptionalDependenciesType(
    TypedDict
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropOptionalD
    ependencies
    """


class WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropDistType(
    TypedDict
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropDist"""


class WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropRepositoryType(
    TypedDict
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropRepositor
    y
    """


class WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropScriptsType(
    TypedDict
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropScripts"""


class WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropMaintainersItemsType(
    TypedDict
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropMaintaine
    rsItems
    """


class WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropContributorsItemsType(
    TypedDict
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropContribut
    orsItems
    """


class WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropEnginesType(
    TypedDict
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropEngines"""


class WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropBinType(
    TypedDict
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropBin"""


class WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropManType(
    TypedDict
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropMan"""


class WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropDirectoriesType(
    TypedDict
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropDirectori
    es
    """


class WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataType(
    TypedDict
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadata"""

    name: NotRequired[str]
    version: NotRequired[str]
    npm_user: NotRequired[str]
    author: NotRequired[
        Union[
            WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropAuthorType,
            None,
        ]
    ]
    bugs: NotRequired[
        Union[
            WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropBugsType,
            None,
        ]
    ]
    dependencies: NotRequired[
        WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropDependenciesType
    ]
    dev_dependencies: NotRequired[
        WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropDevDependenciesType
    ]
    peer_dependencies: NotRequired[
        WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropPeerDependenciesType
    ]
    optional_dependencies: NotRequired[
        WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropOptionalDependenciesType
    ]
    description: NotRequired[str]
    dist: NotRequired[
        Union[
            WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropDistType,
            None,
        ]
    ]
    git_head: NotRequired[str]
    homepage: NotRequired[str]
    license_: NotRequired[str]
    main: NotRequired[str]
    repository: NotRequired[
        Union[
            WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropRepositoryType,
            None,
        ]
    ]
    scripts: NotRequired[
        WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropScriptsType
    ]
    id: NotRequired[str]
    node_version: NotRequired[str]
    npm_version: NotRequired[str]
    has_shrinkwrap: NotRequired[bool]
    maintainers: NotRequired[
        List[
            WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropMaintainersItemsType
        ]
    ]
    contributors: NotRequired[
        List[
            WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropContributorsItemsType
        ]
    ]
    engines: NotRequired[
        WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropEnginesType
    ]
    keywords: NotRequired[List[str]]
    files: NotRequired[List[str]]
    bin_: NotRequired[
        WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropBinType
    ]
    man: NotRequired[
        WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropManType
    ]
    directories: NotRequired[
        Union[
            WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropDirectoriesType,
            None,
        ]
    ]
    os: NotRequired[List[str]]
    cpu: NotRequired[List[str]]
    readme: NotRequired[str]
    installation_command: NotRequired[str]
    release_id: NotRequired[int]
    commit_oid: NotRequired[str]
    published_via_actions: NotRequired[bool]
    deleted_by_id: NotRequired[int]


class WebhookPackagePublishedPropPackagePropPackageVersionPropNugetMetadataItemsType(
    TypedDict
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropNugetMetadataItems"""

    id: NotRequired[Union[int, str]]
    name: NotRequired[str]
    value: NotRequired[
        Union[
            bool,
            str,
            int,
            WebhookPackagePublishedPropPackagePropPackageVersionPropNugetMetadataItemsPropValueOneof3Type,
        ]
    ]


class WebhookPackagePublishedPropPackagePropPackageVersionPropNugetMetadataItemsPropValueOneof3Type(
    TypedDict
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropNugetMetadataItemsPropVa
    lueOneof3
    """

    url: NotRequired[str]
    branch: NotRequired[str]
    commit: NotRequired[str]
    type: NotRequired[str]


class WebhookPackagePublishedPropPackagePropPackageVersionPropPackageFilesItemsType(
    TypedDict
):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropPackageFilesItems"""

    content_type: str
    created_at: str
    download_url: str
    id: int
    md5: Union[str, None]
    name: str
    sha1: Union[str, None]
    sha256: Union[str, None]
    size: int
    state: Union[str, None]
    updated_at: str


class WebhookPackagePublishedPropPackagePropPackageVersionPropReleaseType(TypedDict):
    """WebhookPackagePublishedPropPackagePropPackageVersionPropRelease"""

    author: Union[
        WebhookPackagePublishedPropPackagePropPackageVersionPropReleasePropAuthorType,
        None,
    ]
    created_at: str
    draft: bool
    html_url: str
    id: int
    name: Union[str, None]
    prerelease: bool
    published_at: str
    tag_name: str
    target_commitish: str
    url: str


class WebhookPackagePublishedPropPackagePropPackageVersionPropReleasePropAuthorType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPackagePublishedPropPackagePropPackageVersionType(TypedDict):
    """WebhookPackagePublishedPropPackagePropPackageVersion"""

    author: NotRequired[
        Union[WebhookPackagePublishedPropPackagePropPackageVersionPropAuthorType, None]
    ]
    body: NotRequired[
        Union[
            str, WebhookPackagePublishedPropPackagePropPackageVersionPropBodyOneof1Type
        ]
    ]
    body_html: NotRequired[str]
    container_metadata: NotRequired[
        Union[
            WebhookPackagePublishedPropPackagePropPackageVersionPropContainerMetadataType,
            None,
        ]
    ]
    created_at: NotRequired[str]
    description: str
    docker_metadata: NotRequired[
        List[
            WebhookPackagePublishedPropPackagePropPackageVersionPropDockerMetadataItemsType
        ]
    ]
    draft: NotRequired[bool]
    html_url: str
    id: int
    installation_command: str
    manifest: NotRequired[str]
    metadata: List[
        WebhookPackagePublishedPropPackagePropPackageVersionPropMetadataItemsType
    ]
    name: str
    npm_metadata: NotRequired[
        Union[
            WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataType,
            None,
        ]
    ]
    nuget_metadata: NotRequired[
        Union[
            List[
                WebhookPackagePublishedPropPackagePropPackageVersionPropNugetMetadataItemsType
            ],
            None,
        ]
    ]
    package_files: List[
        WebhookPackagePublishedPropPackagePropPackageVersionPropPackageFilesItemsType
    ]
    package_url: NotRequired[str]
    prerelease: NotRequired[bool]
    release: NotRequired[
        WebhookPackagePublishedPropPackagePropPackageVersionPropReleaseType
    ]
    rubygems_metadata: NotRequired[List[WebhookRubygemsMetadataType]]
    source_url: NotRequired[str]
    summary: str
    tag_name: NotRequired[str]
    target_commitish: NotRequired[str]
    target_oid: NotRequired[str]
    updated_at: NotRequired[str]
    version: str


class WebhookPackagePublishedPropPackagePropRegistryType(TypedDict):
    """WebhookPackagePublishedPropPackagePropRegistry"""

    about_url: str
    name: str
    type: str
    url: str
    vendor: str


class WebhookPackageUpdatedType(TypedDict):
    """package updated event"""

    action: Literal["updated"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    package: WebhookPackageUpdatedPropPackageType
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookPackageUpdatedPropPackageType(TypedDict):
    """WebhookPackageUpdatedPropPackage

    Information about the package.
    """

    created_at: str
    description: Union[str, None]
    ecosystem: str
    html_url: str
    id: int
    name: str
    namespace: str
    owner: Union[WebhookPackageUpdatedPropPackagePropOwnerType, None]
    package_type: str
    package_version: WebhookPackageUpdatedPropPackagePropPackageVersionType
    registry: Union[WebhookPackageUpdatedPropPackagePropRegistryType, None]
    updated_at: str


class WebhookPackageUpdatedPropPackagePropOwnerType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPackageUpdatedPropPackagePropPackageVersionType(TypedDict):
    """WebhookPackageUpdatedPropPackagePropPackageVersion"""

    author: Union[
        WebhookPackageUpdatedPropPackagePropPackageVersionPropAuthorType, None
    ]
    body: str
    body_html: str
    created_at: str
    description: str
    docker_metadata: NotRequired[
        List[
            WebhookPackageUpdatedPropPackagePropPackageVersionPropDockerMetadataItemsType
        ]
    ]
    draft: NotRequired[bool]
    html_url: str
    id: int
    installation_command: str
    manifest: NotRequired[str]
    metadata: List[
        WebhookPackageUpdatedPropPackagePropPackageVersionPropMetadataItemsType
    ]
    name: str
    package_files: List[
        WebhookPackageUpdatedPropPackagePropPackageVersionPropPackageFilesItemsType
    ]
    package_url: NotRequired[str]
    prerelease: NotRequired[bool]
    release: NotRequired[
        WebhookPackageUpdatedPropPackagePropPackageVersionPropReleaseType
    ]
    rubygems_metadata: NotRequired[List[WebhookRubygemsMetadataType]]
    source_url: NotRequired[str]
    summary: str
    tag_name: NotRequired[str]
    target_commitish: str
    target_oid: str
    updated_at: str
    version: str


class WebhookPackageUpdatedPropPackagePropPackageVersionPropAuthorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPackageUpdatedPropPackagePropPackageVersionPropDockerMetadataItemsType(
    TypedDict
):
    """WebhookPackageUpdatedPropPackagePropPackageVersionPropDockerMetadataItems"""

    tags: NotRequired[List[str]]


class WebhookPackageUpdatedPropPackagePropPackageVersionPropMetadataItemsType(
    TypedDict
):
    """WebhookPackageUpdatedPropPackagePropPackageVersionPropMetadataItems"""


class WebhookPackageUpdatedPropPackagePropPackageVersionPropPackageFilesItemsType(
    TypedDict
):
    """WebhookPackageUpdatedPropPackagePropPackageVersionPropPackageFilesItems"""

    content_type: str
    created_at: str
    download_url: str
    id: int
    md5: Union[str, None]
    name: str
    sha1: Union[str, None]
    sha256: str
    size: int
    state: str
    updated_at: str


class WebhookPackageUpdatedPropPackagePropPackageVersionPropReleaseType(TypedDict):
    """WebhookPackageUpdatedPropPackagePropPackageVersionPropRelease"""

    author: Union[
        WebhookPackageUpdatedPropPackagePropPackageVersionPropReleasePropAuthorType,
        None,
    ]
    created_at: str
    draft: bool
    html_url: str
    id: int
    name: str
    prerelease: bool
    published_at: str
    tag_name: str
    target_commitish: str
    url: str


class WebhookPackageUpdatedPropPackagePropPackageVersionPropReleasePropAuthorType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPackageUpdatedPropPackagePropRegistryType(TypedDict):
    """WebhookPackageUpdatedPropPackagePropRegistry"""

    about_url: str
    name: str
    type: str
    url: str
    vendor: str


class WebhookPageBuildType(TypedDict):
    """page_build event"""

    build: WebhookPageBuildPropBuildType
    enterprise: NotRequired[EnterpriseWebhooksType]
    id: int
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookPageBuildPropBuildType(TypedDict):
    """WebhookPageBuildPropBuild

    The [List GitHub Pages builds](https://docs.github.com/rest/pages/pages#list-
    github-pages-builds) itself.
    """

    commit: Union[str, None]
    created_at: str
    duration: int
    error: WebhookPageBuildPropBuildPropErrorType
    pusher: Union[WebhookPageBuildPropBuildPropPusherType, None]
    status: str
    updated_at: str
    url: str


class WebhookPageBuildPropBuildPropErrorType(TypedDict):
    """WebhookPageBuildPropBuildPropError"""

    message: Union[str, None]


class WebhookPageBuildPropBuildPropPusherType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPersonalAccessTokenRequestApprovedType(TypedDict):
    """personal_access_token_request approved event"""

    action: Literal["approved"]
    personal_access_token_request: PersonalAccessTokenRequestType
    organization: OrganizationSimpleWebhooksType
    sender: SimpleUserWebhooksType
    installation: SimpleInstallationType


class WebhookPersonalAccessTokenRequestCancelledType(TypedDict):
    """personal_access_token_request cancelled event"""

    action: Literal["cancelled"]
    personal_access_token_request: PersonalAccessTokenRequestType
    organization: OrganizationSimpleWebhooksType
    sender: SimpleUserWebhooksType
    installation: SimpleInstallationType


class WebhookPersonalAccessTokenRequestCreatedType(TypedDict):
    """personal_access_token_request created event"""

    action: Literal["created"]
    personal_access_token_request: PersonalAccessTokenRequestType
    organization: OrganizationSimpleWebhooksType
    sender: SimpleUserWebhooksType
    installation: SimpleInstallationType


class WebhookPersonalAccessTokenRequestDeniedType(TypedDict):
    """personal_access_token_request denied event"""

    action: Literal["denied"]
    personal_access_token_request: PersonalAccessTokenRequestType
    organization: OrganizationSimpleWebhooksType
    sender: SimpleUserWebhooksType
    installation: SimpleInstallationType


class WebhookPingType(TypedDict):
    """WebhookPing"""

    hook: NotRequired[WebhookPingPropHookType]
    hook_id: NotRequired[int]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: NotRequired[RepositoryWebhooksType]
    sender: NotRequired[SimpleUserWebhooksType]
    zen: NotRequired[str]


class WebhookPingPropHookType(TypedDict):
    """Webhook

    The webhook that is being pinged
    """

    active: bool
    app_id: NotRequired[int]
    config: WebhookPingPropHookPropConfigType
    created_at: datetime
    deliveries_url: NotRequired[str]
    events: List[str]
    id: int
    last_response: NotRequired[HookResponseType]
    name: Literal["web"]
    ping_url: NotRequired[str]
    test_url: NotRequired[str]
    type: str
    updated_at: datetime
    url: NotRequired[str]


class WebhookPingPropHookPropConfigType(TypedDict):
    """WebhookPingPropHookPropConfig"""

    content_type: NotRequired[str]
    insecure_ssl: NotRequired[Union[str, float]]
    secret: NotRequired[str]
    url: NotRequired[str]


class WebhookPingFormEncodedType(TypedDict):
    """WebhookPingFormEncoded

    The webhooks ping payload encoded with URL encoding.
    """

    payload: str


class WebhookProjectCardConvertedType(TypedDict):
    """project_card converted event"""

    action: Literal["converted"]
    changes: WebhookProjectCardConvertedPropChangesType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    project_card: WebhookProjectCardConvertedPropProjectCardType
    repository: NotRequired[RepositoryWebhooksType]
    sender: SimpleUserWebhooksType


class WebhookProjectCardConvertedPropChangesType(TypedDict):
    """WebhookProjectCardConvertedPropChanges"""

    note: WebhookProjectCardConvertedPropChangesPropNoteType


class WebhookProjectCardConvertedPropChangesPropNoteType(TypedDict):
    """WebhookProjectCardConvertedPropChangesPropNote"""

    from_: str


class WebhookProjectCardConvertedPropProjectCardType(TypedDict):
    """Project Card"""

    after_id: NotRequired[Union[int, None]]
    archived: bool
    column_id: int
    column_url: str
    content_url: NotRequired[str]
    created_at: datetime
    creator: Union[WebhookProjectCardConvertedPropProjectCardPropCreatorType, None]
    id: int
    node_id: str
    note: Union[str, None]
    project_url: str
    updated_at: datetime
    url: str


class WebhookProjectCardConvertedPropProjectCardPropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookProjectCardCreatedType(TypedDict):
    """project_card created event"""

    action: Literal["created"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    project_card: WebhookProjectCardCreatedPropProjectCardType
    repository: NotRequired[RepositoryWebhooksType]
    sender: SimpleUserWebhooksType


class WebhookProjectCardCreatedPropProjectCardType(TypedDict):
    """Project Card"""

    after_id: NotRequired[Union[int, None]]
    archived: bool
    column_id: int
    column_url: str
    content_url: NotRequired[str]
    created_at: datetime
    creator: Union[WebhookProjectCardCreatedPropProjectCardPropCreatorType, None]
    id: int
    node_id: str
    note: Union[str, None]
    project_url: str
    updated_at: datetime
    url: str


class WebhookProjectCardCreatedPropProjectCardPropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookProjectCardDeletedType(TypedDict):
    """project_card deleted event"""

    action: Literal["deleted"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    project_card: WebhookProjectCardDeletedPropProjectCardType
    repository: NotRequired[Union[None, RepositoryWebhooksType]]
    sender: SimpleUserWebhooksType


class WebhookProjectCardDeletedPropProjectCardType(TypedDict):
    """Project Card"""

    after_id: NotRequired[Union[int, None]]
    archived: bool
    column_id: Union[int, None]
    column_url: str
    content_url: NotRequired[str]
    created_at: datetime
    creator: Union[WebhookProjectCardDeletedPropProjectCardPropCreatorType, None]
    id: int
    node_id: str
    note: Union[str, None]
    project_url: str
    updated_at: datetime
    url: str


class WebhookProjectCardDeletedPropProjectCardPropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookProjectCardEditedType(TypedDict):
    """project_card edited event"""

    action: Literal["edited"]
    changes: WebhookProjectCardEditedPropChangesType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    project_card: WebhookProjectCardEditedPropProjectCardType
    repository: NotRequired[RepositoryWebhooksType]
    sender: SimpleUserWebhooksType


class WebhookProjectCardEditedPropChangesType(TypedDict):
    """WebhookProjectCardEditedPropChanges"""

    note: WebhookProjectCardEditedPropChangesPropNoteType


class WebhookProjectCardEditedPropChangesPropNoteType(TypedDict):
    """WebhookProjectCardEditedPropChangesPropNote"""

    from_: Union[str, None]


class WebhookProjectCardEditedPropProjectCardType(TypedDict):
    """Project Card"""

    after_id: NotRequired[Union[int, None]]
    archived: bool
    column_id: int
    column_url: str
    content_url: NotRequired[str]
    created_at: datetime
    creator: Union[WebhookProjectCardEditedPropProjectCardPropCreatorType, None]
    id: int
    node_id: str
    note: Union[str, None]
    project_url: str
    updated_at: datetime
    url: str


class WebhookProjectCardEditedPropProjectCardPropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookProjectCardMovedType(TypedDict):
    """project_card moved event"""

    action: Literal["moved"]
    changes: NotRequired[WebhookProjectCardMovedPropChangesType]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    project_card: WebhookProjectCardMovedPropProjectCardType
    repository: NotRequired[RepositoryWebhooksType]
    sender: SimpleUserWebhooksType


class WebhookProjectCardMovedPropChangesType(TypedDict):
    """WebhookProjectCardMovedPropChanges"""

    column_id: WebhookProjectCardMovedPropChangesPropColumnIdType


class WebhookProjectCardMovedPropChangesPropColumnIdType(TypedDict):
    """WebhookProjectCardMovedPropChangesPropColumnId"""

    from_: int


class WebhookProjectCardMovedPropProjectCardType(TypedDict):
    """WebhookProjectCardMovedPropProjectCard"""

    after_id: Union[Union[int, None], None]
    archived: bool
    column_id: int
    column_url: str
    content_url: NotRequired[str]
    created_at: datetime
    creator: Union[WebhookProjectCardMovedPropProjectCardMergedCreatorType, None]
    id: int
    node_id: str
    note: Union[Union[str, None], None]
    project_url: str
    updated_at: datetime
    url: str


class WebhookProjectCardMovedPropProjectCardAllof0Type(TypedDict):
    """Project Card"""

    after_id: NotRequired[Union[int, None]]
    archived: bool
    column_id: int
    column_url: str
    content_url: NotRequired[str]
    created_at: datetime
    creator: Union[WebhookProjectCardMovedPropProjectCardAllof0PropCreatorType, None]
    id: int
    node_id: str
    note: Union[str, None]
    project_url: str
    updated_at: datetime
    url: str


class WebhookProjectCardMovedPropProjectCardAllof0PropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookProjectCardMovedPropProjectCardAllof1Type(TypedDict):
    """WebhookProjectCardMovedPropProjectCardAllof1"""

    after_id: Union[int, None]
    archived: NotRequired[bool]
    column_id: NotRequired[int]
    column_url: NotRequired[str]
    created_at: NotRequired[str]
    creator: NotRequired[
        Union[WebhookProjectCardMovedPropProjectCardAllof1PropCreatorType, None]
    ]
    id: NotRequired[int]
    node_id: NotRequired[str]
    note: NotRequired[Union[str, None]]
    project_url: NotRequired[str]
    updated_at: NotRequired[str]
    url: NotRequired[str]


class WebhookProjectCardMovedPropProjectCardAllof1PropCreatorType(TypedDict):
    """WebhookProjectCardMovedPropProjectCardAllof1PropCreator"""

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookProjectCardMovedPropProjectCardMergedCreatorType(TypedDict):
    """WebhookProjectCardMovedPropProjectCardMergedCreator"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookProjectClosedType(TypedDict):
    """project closed event"""

    action: Literal["closed"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    project: WebhookProjectClosedPropProjectType
    repository: NotRequired[RepositoryWebhooksType]
    sender: SimpleUserWebhooksType


class WebhookProjectClosedPropProjectType(TypedDict):
    """Project"""

    body: Union[str, None]
    columns_url: str
    created_at: datetime
    creator: Union[WebhookProjectClosedPropProjectPropCreatorType, None]
    html_url: str
    id: int
    name: str
    node_id: str
    number: int
    owner_url: str
    state: Literal["open", "closed"]
    updated_at: datetime
    url: str


class WebhookProjectClosedPropProjectPropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookProjectColumnCreatedType(TypedDict):
    """project_column created event"""

    action: Literal["created"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    project_column: WebhookProjectColumnCreatedPropProjectColumnType
    repository: NotRequired[RepositoryWebhooksType]
    sender: NotRequired[SimpleUserWebhooksType]


class WebhookProjectColumnCreatedPropProjectColumnType(TypedDict):
    """Project Column"""

    after_id: NotRequired[Union[int, None]]
    cards_url: str
    created_at: datetime
    id: int
    name: str
    node_id: str
    project_url: str
    updated_at: datetime
    url: str


class WebhookProjectColumnDeletedType(TypedDict):
    """project_column deleted event"""

    action: Literal["deleted"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    project_column: WebhookProjectColumnDeletedPropProjectColumnType
    repository: NotRequired[Union[None, RepositoryWebhooksType]]
    sender: NotRequired[SimpleUserWebhooksType]


class WebhookProjectColumnDeletedPropProjectColumnType(TypedDict):
    """Project Column"""

    after_id: NotRequired[Union[int, None]]
    cards_url: str
    created_at: datetime
    id: int
    name: str
    node_id: str
    project_url: str
    updated_at: datetime
    url: str


class WebhookProjectColumnEditedType(TypedDict):
    """project_column edited event"""

    action: Literal["edited"]
    changes: WebhookProjectColumnEditedPropChangesType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    project_column: WebhookProjectColumnEditedPropProjectColumnType
    repository: NotRequired[RepositoryWebhooksType]
    sender: NotRequired[SimpleUserWebhooksType]


class WebhookProjectColumnEditedPropChangesType(TypedDict):
    """WebhookProjectColumnEditedPropChanges"""

    name: NotRequired[WebhookProjectColumnEditedPropChangesPropNameType]


class WebhookProjectColumnEditedPropChangesPropNameType(TypedDict):
    """WebhookProjectColumnEditedPropChangesPropName"""

    from_: str


class WebhookProjectColumnEditedPropProjectColumnType(TypedDict):
    """Project Column"""

    after_id: NotRequired[Union[int, None]]
    cards_url: str
    created_at: datetime
    id: int
    name: str
    node_id: str
    project_url: str
    updated_at: datetime
    url: str


class WebhookProjectColumnMovedType(TypedDict):
    """project_column moved event"""

    action: Literal["moved"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    project_column: WebhookProjectColumnMovedPropProjectColumnType
    repository: NotRequired[RepositoryWebhooksType]
    sender: SimpleUserWebhooksType


class WebhookProjectColumnMovedPropProjectColumnType(TypedDict):
    """Project Column"""

    after_id: NotRequired[Union[int, None]]
    cards_url: str
    created_at: datetime
    id: int
    name: str
    node_id: str
    project_url: str
    updated_at: datetime
    url: str


class WebhookProjectCreatedType(TypedDict):
    """project created event"""

    action: Literal["created"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    project: WebhookProjectCreatedPropProjectType
    repository: NotRequired[RepositoryWebhooksType]
    sender: SimpleUserWebhooksType


class WebhookProjectCreatedPropProjectType(TypedDict):
    """Project"""

    body: Union[str, None]
    columns_url: str
    created_at: datetime
    creator: Union[WebhookProjectCreatedPropProjectPropCreatorType, None]
    html_url: str
    id: int
    name: str
    node_id: str
    number: int
    owner_url: str
    state: Literal["open", "closed"]
    updated_at: datetime
    url: str


class WebhookProjectCreatedPropProjectPropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookProjectDeletedType(TypedDict):
    """project deleted event"""

    action: Literal["deleted"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    project: WebhookProjectDeletedPropProjectType
    repository: NotRequired[Union[None, RepositoryWebhooksType]]
    sender: NotRequired[SimpleUserWebhooksType]


class WebhookProjectDeletedPropProjectType(TypedDict):
    """Project"""

    body: Union[str, None]
    columns_url: str
    created_at: datetime
    creator: Union[WebhookProjectDeletedPropProjectPropCreatorType, None]
    html_url: str
    id: int
    name: str
    node_id: str
    number: int
    owner_url: str
    state: Literal["open", "closed"]
    updated_at: datetime
    url: str


class WebhookProjectDeletedPropProjectPropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookProjectEditedType(TypedDict):
    """project edited event"""

    action: Literal["edited"]
    changes: NotRequired[WebhookProjectEditedPropChangesType]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    project: WebhookProjectEditedPropProjectType
    repository: NotRequired[RepositoryWebhooksType]
    sender: NotRequired[SimpleUserWebhooksType]


class WebhookProjectEditedPropChangesType(TypedDict):
    """WebhookProjectEditedPropChanges

    The changes to the project if the action was `edited`.
    """

    body: NotRequired[WebhookProjectEditedPropChangesPropBodyType]
    name: NotRequired[WebhookProjectEditedPropChangesPropNameType]


class WebhookProjectEditedPropChangesPropBodyType(TypedDict):
    """WebhookProjectEditedPropChangesPropBody"""

    from_: str


class WebhookProjectEditedPropChangesPropNameType(TypedDict):
    """WebhookProjectEditedPropChangesPropName"""

    from_: str


class WebhookProjectEditedPropProjectType(TypedDict):
    """Project"""

    body: Union[str, None]
    columns_url: str
    created_at: datetime
    creator: Union[WebhookProjectEditedPropProjectPropCreatorType, None]
    html_url: str
    id: int
    name: str
    node_id: str
    number: int
    owner_url: str
    state: Literal["open", "closed"]
    updated_at: datetime
    url: str


class WebhookProjectEditedPropProjectPropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookProjectReopenedType(TypedDict):
    """project reopened event"""

    action: Literal["reopened"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    project: WebhookProjectReopenedPropProjectType
    repository: NotRequired[RepositoryWebhooksType]
    sender: SimpleUserWebhooksType


class WebhookProjectReopenedPropProjectType(TypedDict):
    """Project"""

    body: Union[str, None]
    columns_url: str
    created_at: datetime
    creator: Union[WebhookProjectReopenedPropProjectPropCreatorType, None]
    html_url: str
    id: int
    name: str
    node_id: str
    number: int
    owner_url: str
    state: Literal["open", "closed"]
    updated_at: datetime
    url: str


class WebhookProjectReopenedPropProjectPropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookProjectsV2ProjectClosedType(TypedDict):
    """Projects v2 Project Closed Event"""

    action: Literal["closed"]
    installation: NotRequired[SimpleInstallationType]
    organization: OrganizationSimpleWebhooksType
    projects_v2: ProjectsV2Type
    sender: SimpleUserWebhooksType


class WebhookProjectsV2ProjectCreatedType(TypedDict):
    """WebhookProjectsV2ProjectCreated

    A project was created
    """

    action: Literal["created"]
    installation: NotRequired[SimpleInstallationType]
    organization: OrganizationSimpleWebhooksType
    projects_v2: ProjectsV2Type
    sender: SimpleUserWebhooksType


class WebhookProjectsV2ProjectDeletedType(TypedDict):
    """Projects v2 Project Deleted Event"""

    action: Literal["deleted"]
    installation: NotRequired[SimpleInstallationType]
    organization: OrganizationSimpleWebhooksType
    projects_v2: ProjectsV2Type
    sender: SimpleUserWebhooksType


class WebhookProjectsV2ProjectEditedType(TypedDict):
    """Projects v2 Project Edited Event"""

    action: Literal["edited"]
    changes: WebhookProjectsV2ProjectEditedPropChangesType
    installation: NotRequired[SimpleInstallationType]
    organization: OrganizationSimpleWebhooksType
    projects_v2: ProjectsV2Type
    sender: SimpleUserWebhooksType


class WebhookProjectsV2ProjectEditedPropChangesType(TypedDict):
    """WebhookProjectsV2ProjectEditedPropChanges"""

    description: NotRequired[
        WebhookProjectsV2ProjectEditedPropChangesPropDescriptionType
    ]
    public: NotRequired[WebhookProjectsV2ProjectEditedPropChangesPropPublicType]
    short_description: NotRequired[
        WebhookProjectsV2ProjectEditedPropChangesPropShortDescriptionType
    ]
    title: NotRequired[WebhookProjectsV2ProjectEditedPropChangesPropTitleType]


class WebhookProjectsV2ProjectEditedPropChangesPropDescriptionType(TypedDict):
    """WebhookProjectsV2ProjectEditedPropChangesPropDescription"""

    from_: NotRequired[Union[str, None]]
    to: NotRequired[Union[str, None]]


class WebhookProjectsV2ProjectEditedPropChangesPropPublicType(TypedDict):
    """WebhookProjectsV2ProjectEditedPropChangesPropPublic"""

    from_: NotRequired[bool]
    to: NotRequired[bool]


class WebhookProjectsV2ProjectEditedPropChangesPropShortDescriptionType(TypedDict):
    """WebhookProjectsV2ProjectEditedPropChangesPropShortDescription"""

    from_: NotRequired[Union[str, None]]
    to: NotRequired[Union[str, None]]


class WebhookProjectsV2ProjectEditedPropChangesPropTitleType(TypedDict):
    """WebhookProjectsV2ProjectEditedPropChangesPropTitle"""

    from_: NotRequired[str]
    to: NotRequired[str]


class WebhookProjectsV2ItemArchivedType(TypedDict):
    """Projects v2 Item Archived Event"""

    action: Literal["archived"]
    changes: WebhookProjectsV2ItemArchivedPropChangesType
    installation: NotRequired[SimpleInstallationType]
    organization: OrganizationSimpleWebhooksType
    projects_v2_item: ProjectsV2ItemType
    sender: SimpleUserWebhooksType


class WebhookProjectsV2ItemArchivedPropChangesType(TypedDict):
    """WebhookProjectsV2ItemArchivedPropChanges"""

    archived_at: NotRequired[WebhookProjectsV2ItemArchivedPropChangesPropArchivedAtType]


class WebhookProjectsV2ItemArchivedPropChangesPropArchivedAtType(TypedDict):
    """WebhookProjectsV2ItemArchivedPropChangesPropArchivedAt"""

    from_: NotRequired[Union[datetime, None]]
    to: NotRequired[Union[datetime, None]]


class WebhookProjectsV2ItemConvertedType(TypedDict):
    """Projects v2 Item Converted Event"""

    action: Literal["converted"]
    changes: WebhookProjectsV2ItemConvertedPropChangesType
    installation: NotRequired[SimpleInstallationType]
    organization: OrganizationSimpleWebhooksType
    projects_v2_item: ProjectsV2ItemType
    sender: SimpleUserWebhooksType


class WebhookProjectsV2ItemConvertedPropChangesType(TypedDict):
    """WebhookProjectsV2ItemConvertedPropChanges"""

    content_type: NotRequired[
        WebhookProjectsV2ItemConvertedPropChangesPropContentTypeType
    ]


class WebhookProjectsV2ItemConvertedPropChangesPropContentTypeType(TypedDict):
    """WebhookProjectsV2ItemConvertedPropChangesPropContentType"""

    from_: NotRequired[Union[str, None]]
    to: NotRequired[str]


class WebhookProjectsV2ItemCreatedType(TypedDict):
    """Projects v2 Item Created Event"""

    action: Literal["created"]
    installation: NotRequired[SimpleInstallationType]
    organization: OrganizationSimpleWebhooksType
    projects_v2_item: ProjectsV2ItemType
    sender: SimpleUserWebhooksType


class WebhookProjectsV2ItemDeletedType(TypedDict):
    """Projects v2 Item Deleted Event"""

    action: Literal["deleted"]
    installation: NotRequired[SimpleInstallationType]
    organization: OrganizationSimpleWebhooksType
    projects_v2_item: ProjectsV2ItemType
    sender: SimpleUserWebhooksType


class WebhookProjectsV2ItemEditedType(TypedDict):
    """Projects v2 Item Edited Event"""

    action: Literal["edited"]
    changes: NotRequired[
        Union[
            WebhookProjectsV2ItemEditedPropChangesOneof0Type,
            WebhookProjectsV2ItemEditedPropChangesOneof1Type,
        ]
    ]
    installation: NotRequired[SimpleInstallationType]
    organization: OrganizationSimpleWebhooksType
    projects_v2_item: ProjectsV2ItemType
    sender: SimpleUserWebhooksType


class WebhookProjectsV2ItemEditedPropChangesOneof0Type(TypedDict):
    """WebhookProjectsV2ItemEditedPropChangesOneof0"""

    field_value: WebhookProjectsV2ItemEditedPropChangesOneof0PropFieldValueType


class WebhookProjectsV2ItemEditedPropChangesOneof0PropFieldValueType(TypedDict):
    """WebhookProjectsV2ItemEditedPropChangesOneof0PropFieldValue"""

    field_node_id: NotRequired[str]
    field_type: NotRequired[str]


class WebhookProjectsV2ItemEditedPropChangesOneof1Type(TypedDict):
    """WebhookProjectsV2ItemEditedPropChangesOneof1"""

    body: WebhookProjectsV2ItemEditedPropChangesOneof1PropBodyType


class WebhookProjectsV2ItemEditedPropChangesOneof1PropBodyType(TypedDict):
    """WebhookProjectsV2ItemEditedPropChangesOneof1PropBody"""

    from_: NotRequired[Union[str, None]]
    to: NotRequired[Union[str, None]]


class WebhookProjectsV2ItemReorderedType(TypedDict):
    """Projects v2 Item Reordered Event"""

    action: Literal["reordered"]
    changes: WebhookProjectsV2ItemReorderedPropChangesType
    installation: NotRequired[SimpleInstallationType]
    organization: OrganizationSimpleWebhooksType
    projects_v2_item: ProjectsV2ItemType
    sender: SimpleUserWebhooksType


class WebhookProjectsV2ItemReorderedPropChangesType(TypedDict):
    """WebhookProjectsV2ItemReorderedPropChanges"""

    previous_projects_v2_item_node_id: NotRequired[
        WebhookProjectsV2ItemReorderedPropChangesPropPreviousProjectsV2ItemNodeIdType
    ]


class WebhookProjectsV2ItemReorderedPropChangesPropPreviousProjectsV2ItemNodeIdType(
    TypedDict
):
    """WebhookProjectsV2ItemReorderedPropChangesPropPreviousProjectsV2ItemNodeId"""

    from_: NotRequired[Union[str, None]]
    to: NotRequired[Union[str, None]]


class WebhookProjectsV2ItemRestoredType(TypedDict):
    """Projects v2 Item Restored Event"""

    action: Literal["restored"]
    changes: WebhookProjectsV2ItemRestoredPropChangesType
    installation: NotRequired[SimpleInstallationType]
    organization: OrganizationSimpleWebhooksType
    projects_v2_item: ProjectsV2ItemType
    sender: SimpleUserWebhooksType


class WebhookProjectsV2ItemRestoredPropChangesType(TypedDict):
    """WebhookProjectsV2ItemRestoredPropChanges"""

    archived_at: NotRequired[WebhookProjectsV2ItemRestoredPropChangesPropArchivedAtType]


class WebhookProjectsV2ItemRestoredPropChangesPropArchivedAtType(TypedDict):
    """WebhookProjectsV2ItemRestoredPropChangesPropArchivedAt"""

    from_: NotRequired[Union[datetime, None]]
    to: NotRequired[Union[datetime, None]]


class WebhookProjectsV2ProjectReopenedType(TypedDict):
    """Projects v2 Project Reopened Event"""

    action: Literal["reopened"]
    installation: NotRequired[SimpleInstallationType]
    organization: OrganizationSimpleWebhooksType
    projects_v2: ProjectsV2Type
    sender: SimpleUserWebhooksType


class WebhookPublicType(TypedDict):
    """public event"""

    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookPullRequestAssignedType(TypedDict):
    """pull_request assigned event"""

    action: Literal["assigned"]
    assignee: Union[WebhookPullRequestAssignedPropAssigneeType, None]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    number: int
    organization: NotRequired[OrganizationSimpleWebhooksType]
    pull_request: WebhookPullRequestAssignedPropPullRequestType
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookPullRequestAssignedPropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestAssignedPropPullRequestType(TypedDict):
    """Pull Request"""

    links: WebhookPullRequestAssignedPropPullRequestPropLinksType
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    additions: NotRequired[int]
    assignee: Union[WebhookPullRequestAssignedPropPullRequestPropAssigneeType, None]
    assignees: List[
        Union[WebhookPullRequestAssignedPropPullRequestPropAssigneesItemsType, None]
    ]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    auto_merge: Union[WebhookPullRequestAssignedPropPullRequestPropAutoMergeType, None]
    base: WebhookPullRequestAssignedPropPullRequestPropBaseType
    body: Union[str, None]
    changed_files: NotRequired[int]
    closed_at: Union[datetime, None]
    comments: NotRequired[int]
    comments_url: str
    commits: NotRequired[int]
    commits_url: str
    created_at: datetime
    deletions: NotRequired[int]
    diff_url: str
    draft: bool
    head: WebhookPullRequestAssignedPropPullRequestPropHeadType
    html_url: str
    id: int
    issue_url: str
    labels: List[WebhookPullRequestAssignedPropPullRequestPropLabelsItemsType]
    locked: bool
    maintainer_can_modify: NotRequired[bool]
    merge_commit_sha: Union[str, None]
    mergeable: NotRequired[Union[bool, None]]
    mergeable_state: NotRequired[str]
    merged: NotRequired[Union[bool, None]]
    merged_at: Union[datetime, None]
    merged_by: NotRequired[
        Union[WebhookPullRequestAssignedPropPullRequestPropMergedByType, None]
    ]
    milestone: Union[WebhookPullRequestAssignedPropPullRequestPropMilestoneType, None]
    node_id: str
    number: int
    patch_url: str
    rebaseable: NotRequired[Union[bool, None]]
    requested_reviewers: List[
        Union[
            WebhookPullRequestAssignedPropPullRequestPropRequestedReviewersItemsOneof0Type,
            None,
            WebhookPullRequestAssignedPropPullRequestPropRequestedReviewersItemsOneof1Type,
        ]
    ]
    requested_teams: List[
        WebhookPullRequestAssignedPropPullRequestPropRequestedTeamsItemsType
    ]
    review_comment_url: str
    review_comments: NotRequired[int]
    review_comments_url: str
    state: Literal["open", "closed"]
    statuses_url: str
    title: str
    updated_at: datetime
    url: str
    user: Union[WebhookPullRequestAssignedPropPullRequestPropUserType, None]


class WebhookPullRequestAssignedPropPullRequestPropLinksType(TypedDict):
    """WebhookPullRequestAssignedPropPullRequestPropLinks"""

    comments: WebhookPullRequestAssignedPropPullRequestPropLinksPropCommentsType
    commits: WebhookPullRequestAssignedPropPullRequestPropLinksPropCommitsType
    html: WebhookPullRequestAssignedPropPullRequestPropLinksPropHtmlType
    issue: WebhookPullRequestAssignedPropPullRequestPropLinksPropIssueType
    review_comment: WebhookPullRequestAssignedPropPullRequestPropLinksPropReviewCommentType
    review_comments: WebhookPullRequestAssignedPropPullRequestPropLinksPropReviewCommentsType
    self_: WebhookPullRequestAssignedPropPullRequestPropLinksPropSelfType
    statuses: WebhookPullRequestAssignedPropPullRequestPropLinksPropStatusesType


class WebhookPullRequestAssignedPropPullRequestPropLinksPropCommentsType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestAssignedPropPullRequestPropLinksPropCommitsType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestAssignedPropPullRequestPropLinksPropHtmlType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestAssignedPropPullRequestPropLinksPropIssueType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestAssignedPropPullRequestPropLinksPropReviewCommentType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestAssignedPropPullRequestPropLinksPropReviewCommentsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestAssignedPropPullRequestPropLinksPropSelfType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestAssignedPropPullRequestPropLinksPropStatusesType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestAssignedPropPullRequestPropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestAssignedPropPullRequestPropAssigneesItemsType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestAssignedPropPullRequestPropAutoMergePropEnabledByType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestAssignedPropPullRequestPropAutoMergeType(TypedDict):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None]
    commit_title: Union[str, None]
    enabled_by: Union[
        WebhookPullRequestAssignedPropPullRequestPropAutoMergePropEnabledByType, None
    ]
    merge_method: Literal["merge", "squash", "rebase"]


class WebhookPullRequestAssignedPropPullRequestPropBaseType(TypedDict):
    """WebhookPullRequestAssignedPropPullRequestPropBase"""

    label: str
    ref: str
    repo: WebhookPullRequestAssignedPropPullRequestPropBasePropRepoType
    sha: str
    user: Union[WebhookPullRequestAssignedPropPullRequestPropBasePropUserType, None]


class WebhookPullRequestAssignedPropPullRequestPropBasePropRepoType(TypedDict):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestAssignedPropPullRequestPropBasePropRepoPropLicenseType, None
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestAssignedPropPullRequestPropBasePropRepoPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookPullRequestAssignedPropPullRequestPropBasePropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestAssignedPropPullRequestPropBasePropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestAssignedPropPullRequestPropBasePropRepoPropOwnerType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestAssignedPropPullRequestPropBasePropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestAssignedPropPullRequestPropBasePropRepoPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestAssignedPropPullRequestPropBasePropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestAssignedPropPullRequestPropHeadType(TypedDict):
    """WebhookPullRequestAssignedPropPullRequestPropHead"""

    label: Union[str, None]
    ref: str
    repo: Union[WebhookPullRequestAssignedPropPullRequestPropHeadPropRepoType, None]
    sha: str
    user: Union[WebhookPullRequestAssignedPropPullRequestPropHeadPropUserType, None]


class WebhookPullRequestAssignedPropPullRequestPropHeadPropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestAssignedPropPullRequestPropHeadPropRepoPropOwnerType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestAssignedPropPullRequestPropHeadPropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestAssignedPropPullRequestPropHeadPropRepoPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestAssignedPropPullRequestPropHeadPropRepoType(TypedDict):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestAssignedPropPullRequestPropHeadPropRepoPropLicenseType, None
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestAssignedPropPullRequestPropHeadPropRepoPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookPullRequestAssignedPropPullRequestPropHeadPropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestAssignedPropPullRequestPropHeadPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestAssignedPropPullRequestPropLabelsItemsType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookPullRequestAssignedPropPullRequestPropMergedByType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestAssignedPropPullRequestPropMilestonePropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestAssignedPropPullRequestPropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[
        WebhookPullRequestAssignedPropPullRequestPropMilestonePropCreatorType, None
    ]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookPullRequestAssignedPropPullRequestPropRequestedReviewersItemsOneof0Type(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestAssignedPropPullRequestPropRequestedReviewersItemsOneof1Type(
    TypedDict
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    parent: NotRequired[
        Union[
            WebhookPullRequestAssignedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType,
            None,
        ]
    ]
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestAssignedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType(
    TypedDict
):
    """WebhookPullRequestAssignedPropPullRequestPropRequestedReviewersItemsOneof1PropPa
    rent
    """

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestAssignedPropPullRequestPropRequestedTeamsItemsType(TypedDict):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: NotRequired[Union[str, None]]
    html_url: NotRequired[str]
    id: int
    members_url: NotRequired[str]
    name: str
    node_id: NotRequired[str]
    parent: NotRequired[
        Union[
            WebhookPullRequestAssignedPropPullRequestPropRequestedTeamsItemsPropParentType,
            None,
        ]
    ]
    permission: NotRequired[str]
    privacy: NotRequired[Literal["open", "closed", "secret"]]
    repositories_url: NotRequired[str]
    slug: NotRequired[str]
    url: NotRequired[str]


class WebhookPullRequestAssignedPropPullRequestPropRequestedTeamsItemsPropParentType(
    TypedDict
):
    """WebhookPullRequestAssignedPropPullRequestPropRequestedTeamsItemsPropParent"""

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestAssignedPropPullRequestPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestAutoMergeDisabledType(TypedDict):
    """pull_request auto_merge_disabled event"""

    action: Literal["auto_merge_disabled"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    number: int
    organization: NotRequired[OrganizationSimpleWebhooksType]
    pull_request: WebhookPullRequestAutoMergeDisabledPropPullRequestType
    reason: str
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookPullRequestAutoMergeDisabledPropPullRequestType(TypedDict):
    """Pull Request"""

    links: WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksType
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    additions: NotRequired[int]
    assignee: Union[
        WebhookPullRequestAutoMergeDisabledPropPullRequestPropAssigneeType, None
    ]
    assignees: List[
        Union[
            WebhookPullRequestAutoMergeDisabledPropPullRequestPropAssigneesItemsType,
            None,
        ]
    ]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    auto_merge: Union[
        WebhookPullRequestAutoMergeDisabledPropPullRequestPropAutoMergeType, None
    ]
    base: WebhookPullRequestAutoMergeDisabledPropPullRequestPropBaseType
    body: Union[str, None]
    changed_files: NotRequired[int]
    closed_at: Union[datetime, None]
    comments: NotRequired[int]
    comments_url: str
    commits: NotRequired[int]
    commits_url: str
    created_at: datetime
    deletions: NotRequired[int]
    diff_url: str
    draft: bool
    head: WebhookPullRequestAutoMergeDisabledPropPullRequestPropHeadType
    html_url: str
    id: int
    issue_url: str
    labels: List[WebhookPullRequestAutoMergeDisabledPropPullRequestPropLabelsItemsType]
    locked: bool
    maintainer_can_modify: NotRequired[bool]
    merge_commit_sha: Union[str, None]
    mergeable: NotRequired[Union[bool, None]]
    mergeable_state: NotRequired[str]
    merged: NotRequired[Union[bool, None]]
    merged_at: Union[datetime, None]
    merged_by: NotRequired[
        Union[WebhookPullRequestAutoMergeDisabledPropPullRequestPropMergedByType, None]
    ]
    milestone: Union[
        WebhookPullRequestAutoMergeDisabledPropPullRequestPropMilestoneType, None
    ]
    node_id: str
    number: int
    patch_url: str
    rebaseable: NotRequired[Union[bool, None]]
    requested_reviewers: List[
        Union[
            WebhookPullRequestAutoMergeDisabledPropPullRequestPropRequestedReviewersItemsOneof0Type,
            None,
            WebhookPullRequestAutoMergeDisabledPropPullRequestPropRequestedReviewersItemsOneof1Type,
        ]
    ]
    requested_teams: List[
        WebhookPullRequestAutoMergeDisabledPropPullRequestPropRequestedTeamsItemsType
    ]
    review_comment_url: str
    review_comments: NotRequired[int]
    review_comments_url: str
    state: Literal["open", "closed"]
    statuses_url: str
    title: str
    updated_at: datetime
    url: str
    user: Union[WebhookPullRequestAutoMergeDisabledPropPullRequestPropUserType, None]


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksType(TypedDict):
    """WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinks"""

    comments: WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropCommentsType
    commits: WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropCommitsType
    html: WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropHtmlType
    issue: WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropIssueType
    review_comment: WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropReviewCommentType
    review_comments: WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropReviewCommentsType
    self_: WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropSelfType
    statuses: WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropStatusesType


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropCommentsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropCommitsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropHtmlType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropIssueType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropReviewCommentType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropReviewCommentsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropSelfType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropStatusesType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropAssigneesItemsType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropAutoMergePropEnabledByType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropAutoMergeType(TypedDict):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None]
    commit_title: Union[str, None]
    enabled_by: Union[
        WebhookPullRequestAutoMergeDisabledPropPullRequestPropAutoMergePropEnabledByType,
        None,
    ]
    merge_method: Literal["merge", "squash", "rebase"]


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropBaseType(TypedDict):
    """WebhookPullRequestAutoMergeDisabledPropPullRequestPropBase"""

    label: str
    ref: str
    repo: WebhookPullRequestAutoMergeDisabledPropPullRequestPropBasePropRepoType
    sha: str
    user: Union[
        WebhookPullRequestAutoMergeDisabledPropPullRequestPropBasePropUserType, None
    ]


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropBasePropRepoType(TypedDict):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_discussions: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestAutoMergeDisabledPropPullRequestPropBasePropRepoPropLicenseType,
        None,
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestAutoMergeDisabledPropPullRequestPropBasePropRepoPropOwnerType,
        None,
    ]
    permissions: NotRequired[
        WebhookPullRequestAutoMergeDisabledPropPullRequestPropBasePropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropBasePropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropBasePropRepoPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropBasePropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestAutoMergeDisabledPropPullRequestPropBasePropRepoPropPermission
    s
    """

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropBasePropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropHeadType(TypedDict):
    """WebhookPullRequestAutoMergeDisabledPropPullRequestPropHead"""

    label: str
    ref: str
    repo: WebhookPullRequestAutoMergeDisabledPropPullRequestPropHeadPropRepoType
    sha: str
    user: Union[
        WebhookPullRequestAutoMergeDisabledPropPullRequestPropHeadPropUserType, None
    ]


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropHeadPropRepoType(TypedDict):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestAutoMergeDisabledPropPullRequestPropHeadPropRepoPropLicenseType,
        None,
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestAutoMergeDisabledPropPullRequestPropHeadPropRepoPropOwnerType,
        None,
    ]
    permissions: NotRequired[
        WebhookPullRequestAutoMergeDisabledPropPullRequestPropHeadPropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropHeadPropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropHeadPropRepoPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropHeadPropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestAutoMergeDisabledPropPullRequestPropHeadPropRepoPropPermission
    s
    """

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropHeadPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropLabelsItemsType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropMergedByType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropMilestonePropCreatorType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[
        WebhookPullRequestAutoMergeDisabledPropPullRequestPropMilestonePropCreatorType,
        None,
    ]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropRequestedReviewersItemsOneof0Type(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropRequestedReviewersItemsOneof1Type(
    TypedDict
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    parent: NotRequired[
        Union[
            WebhookPullRequestAutoMergeDisabledPropPullRequestPropRequestedReviewersItemsOneof1PropParentType,
            None,
        ]
    ]
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropRequestedReviewersItemsOneof1PropParentType(
    TypedDict
):
    """WebhookPullRequestAutoMergeDisabledPropPullRequestPropRequestedReviewersItemsOne
    of1PropParent
    """

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropRequestedTeamsItemsType(
    TypedDict
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: NotRequired[Union[str, None]]
    html_url: NotRequired[str]
    id: int
    members_url: NotRequired[str]
    name: str
    node_id: NotRequired[str]
    parent: NotRequired[
        Union[
            WebhookPullRequestAutoMergeDisabledPropPullRequestPropRequestedTeamsItemsPropParentType,
            None,
        ]
    ]
    permission: NotRequired[str]
    privacy: NotRequired[Literal["open", "closed", "secret"]]
    repositories_url: NotRequired[str]
    slug: NotRequired[str]
    url: NotRequired[str]


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropRequestedTeamsItemsPropParentType(
    TypedDict
):
    """WebhookPullRequestAutoMergeDisabledPropPullRequestPropRequestedTeamsItemsPropPar
    ent
    """

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestAutoMergeDisabledPropPullRequestPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestAutoMergeEnabledType(TypedDict):
    """pull_request auto_merge_enabled event"""

    action: Literal["auto_merge_enabled"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    number: int
    organization: NotRequired[OrganizationSimpleWebhooksType]
    pull_request: WebhookPullRequestAutoMergeEnabledPropPullRequestType
    reason: NotRequired[str]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookPullRequestAutoMergeEnabledPropPullRequestType(TypedDict):
    """Pull Request"""

    links: WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksType
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    additions: NotRequired[int]
    assignee: Union[
        WebhookPullRequestAutoMergeEnabledPropPullRequestPropAssigneeType, None
    ]
    assignees: List[
        Union[
            WebhookPullRequestAutoMergeEnabledPropPullRequestPropAssigneesItemsType,
            None,
        ]
    ]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    auto_merge: Union[
        WebhookPullRequestAutoMergeEnabledPropPullRequestPropAutoMergeType, None
    ]
    base: WebhookPullRequestAutoMergeEnabledPropPullRequestPropBaseType
    body: Union[str, None]
    changed_files: NotRequired[int]
    closed_at: Union[datetime, None]
    comments: NotRequired[int]
    comments_url: str
    commits: NotRequired[int]
    commits_url: str
    created_at: datetime
    deletions: NotRequired[int]
    diff_url: str
    draft: bool
    head: WebhookPullRequestAutoMergeEnabledPropPullRequestPropHeadType
    html_url: str
    id: int
    issue_url: str
    labels: List[WebhookPullRequestAutoMergeEnabledPropPullRequestPropLabelsItemsType]
    locked: bool
    maintainer_can_modify: NotRequired[bool]
    merge_commit_sha: Union[str, None]
    mergeable: NotRequired[Union[bool, None]]
    mergeable_state: NotRequired[str]
    merged: NotRequired[Union[bool, None]]
    merged_at: Union[datetime, None]
    merged_by: NotRequired[
        Union[WebhookPullRequestAutoMergeEnabledPropPullRequestPropMergedByType, None]
    ]
    milestone: Union[
        WebhookPullRequestAutoMergeEnabledPropPullRequestPropMilestoneType, None
    ]
    node_id: str
    number: int
    patch_url: str
    rebaseable: NotRequired[Union[bool, None]]
    requested_reviewers: List[
        Union[
            WebhookPullRequestAutoMergeEnabledPropPullRequestPropRequestedReviewersItemsOneof0Type,
            None,
            WebhookPullRequestAutoMergeEnabledPropPullRequestPropRequestedReviewersItemsOneof1Type,
        ]
    ]
    requested_teams: List[
        WebhookPullRequestAutoMergeEnabledPropPullRequestPropRequestedTeamsItemsType
    ]
    review_comment_url: str
    review_comments: NotRequired[int]
    review_comments_url: str
    state: Literal["open", "closed"]
    statuses_url: str
    title: str
    updated_at: datetime
    url: str
    user: Union[WebhookPullRequestAutoMergeEnabledPropPullRequestPropUserType, None]


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksType(TypedDict):
    """WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinks"""

    comments: WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropCommentsType
    commits: WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropCommitsType
    html: WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropHtmlType
    issue: WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropIssueType
    review_comment: WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropReviewCommentType
    review_comments: WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropReviewCommentsType
    self_: WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropSelfType
    statuses: WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropStatusesType


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropCommentsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropCommitsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropHtmlType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropIssueType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropReviewCommentType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropReviewCommentsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropSelfType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropStatusesType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropAssigneesItemsType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropAutoMergePropEnabledByType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropAutoMergeType(TypedDict):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None]
    commit_title: Union[str, None]
    enabled_by: Union[
        WebhookPullRequestAutoMergeEnabledPropPullRequestPropAutoMergePropEnabledByType,
        None,
    ]
    merge_method: Literal["merge", "squash", "rebase"]


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropBaseType(TypedDict):
    """WebhookPullRequestAutoMergeEnabledPropPullRequestPropBase"""

    label: str
    ref: str
    repo: WebhookPullRequestAutoMergeEnabledPropPullRequestPropBasePropRepoType
    sha: str
    user: Union[
        WebhookPullRequestAutoMergeEnabledPropPullRequestPropBasePropUserType, None
    ]


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropBasePropRepoType(TypedDict):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestAutoMergeEnabledPropPullRequestPropBasePropRepoPropLicenseType,
        None,
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestAutoMergeEnabledPropPullRequestPropBasePropRepoPropOwnerType,
        None,
    ]
    permissions: NotRequired[
        WebhookPullRequestAutoMergeEnabledPropPullRequestPropBasePropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropBasePropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropBasePropRepoPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropBasePropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestAutoMergeEnabledPropPullRequestPropBasePropRepoPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropBasePropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropHeadType(TypedDict):
    """WebhookPullRequestAutoMergeEnabledPropPullRequestPropHead"""

    label: str
    ref: str
    repo: WebhookPullRequestAutoMergeEnabledPropPullRequestPropHeadPropRepoType
    sha: str
    user: Union[
        WebhookPullRequestAutoMergeEnabledPropPullRequestPropHeadPropUserType, None
    ]


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropHeadPropRepoType(TypedDict):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestAutoMergeEnabledPropPullRequestPropHeadPropRepoPropLicenseType,
        None,
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestAutoMergeEnabledPropPullRequestPropHeadPropRepoPropOwnerType,
        None,
    ]
    permissions: NotRequired[
        WebhookPullRequestAutoMergeEnabledPropPullRequestPropHeadPropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropHeadPropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropHeadPropRepoPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropHeadPropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestAutoMergeEnabledPropPullRequestPropHeadPropRepoPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropHeadPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropLabelsItemsType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropMergedByType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropMilestonePropCreatorType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[
        WebhookPullRequestAutoMergeEnabledPropPullRequestPropMilestonePropCreatorType,
        None,
    ]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropRequestedReviewersItemsOneof0Type(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropRequestedReviewersItemsOneof1Type(
    TypedDict
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    parent: NotRequired[
        Union[
            WebhookPullRequestAutoMergeEnabledPropPullRequestPropRequestedReviewersItemsOneof1PropParentType,
            None,
        ]
    ]
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropRequestedReviewersItemsOneof1PropParentType(
    TypedDict
):
    """WebhookPullRequestAutoMergeEnabledPropPullRequestPropRequestedReviewersItemsOneo
    f1PropParent
    """

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropRequestedTeamsItemsType(
    TypedDict
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: NotRequired[Union[str, None]]
    html_url: NotRequired[str]
    id: int
    members_url: NotRequired[str]
    name: str
    node_id: NotRequired[str]
    parent: NotRequired[
        Union[
            WebhookPullRequestAutoMergeEnabledPropPullRequestPropRequestedTeamsItemsPropParentType,
            None,
        ]
    ]
    permission: NotRequired[str]
    privacy: NotRequired[Literal["open", "closed", "secret"]]
    repositories_url: NotRequired[str]
    slug: NotRequired[str]
    url: NotRequired[str]


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropRequestedTeamsItemsPropParentType(
    TypedDict
):
    """WebhookPullRequestAutoMergeEnabledPropPullRequestPropRequestedTeamsItemsPropPare
    nt
    """

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestAutoMergeEnabledPropPullRequestPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestClosedType(TypedDict):
    """pull_request closed event"""

    action: Literal["closed"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    number: int
    organization: NotRequired[OrganizationSimpleWebhooksType]
    pull_request: WebhookPullRequestClosedPropPullRequestType
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookPullRequestClosedPropPullRequestType(TypedDict):
    """WebhookPullRequestClosedPropPullRequest"""

    url: str
    id: int
    node_id: str
    html_url: str
    diff_url: str
    patch_url: str
    issue_url: str
    commits_url: str
    review_comments_url: str
    review_comment_url: str
    comments_url: str
    statuses_url: str
    number: int
    state: Literal["open", "closed"]
    locked: bool
    title: str
    user: SimpleUserType
    body: Union[str, None]
    labels: List[PullRequestPropLabelsItemsType]
    milestone: Union[None, MilestoneType]
    active_lock_reason: NotRequired[Union[str, None]]
    created_at: datetime
    updated_at: datetime
    closed_at: Union[datetime, None]
    merged_at: Union[datetime, None]
    merge_commit_sha: Union[str, None]
    assignee: Union[None, SimpleUserType]
    assignees: NotRequired[Union[List[SimpleUserType], None]]
    requested_reviewers: NotRequired[Union[List[SimpleUserType], None]]
    requested_teams: NotRequired[Union[List[TeamSimpleType], None]]
    head: PullRequestPropHeadType
    base: PullRequestPropBaseType
    links: PullRequestPropLinksType
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    auto_merge: Union[AutoMergeType, None]
    draft: NotRequired[bool]
    merged: bool
    mergeable: Union[bool, None]
    rebaseable: NotRequired[Union[bool, None]]
    mergeable_state: str
    merged_by: Union[None, SimpleUserType]
    comments: int
    review_comments: int
    maintainer_can_modify: bool
    commits: int
    additions: int
    deletions: int
    changed_files: int
    allow_auto_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    delete_branch_on_merge: NotRequired[bool]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    use_squash_pr_title_as_default: NotRequired[bool]


class WebhookPullRequestClosedPropPullRequestAllof1Type(TypedDict):
    """WebhookPullRequestClosedPropPullRequestAllof1"""

    allow_auto_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    delete_branch_on_merge: NotRequired[bool]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    use_squash_pr_title_as_default: NotRequired[bool]


class WebhookPullRequestConvertedToDraftType(TypedDict):
    """pull_request converted_to_draft event"""

    action: Literal["converted_to_draft"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    number: int
    organization: NotRequired[OrganizationSimpleWebhooksType]
    pull_request: WebhookPullRequestConvertedToDraftPropPullRequestType
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookPullRequestConvertedToDraftPropPullRequestType(TypedDict):
    """WebhookPullRequestConvertedToDraftPropPullRequest"""

    url: str
    id: int
    node_id: str
    html_url: str
    diff_url: str
    patch_url: str
    issue_url: str
    commits_url: str
    review_comments_url: str
    review_comment_url: str
    comments_url: str
    statuses_url: str
    number: int
    state: Literal["open", "closed"]
    locked: bool
    title: str
    user: SimpleUserType
    body: Union[str, None]
    labels: List[PullRequestPropLabelsItemsType]
    milestone: Union[None, MilestoneType]
    active_lock_reason: NotRequired[Union[str, None]]
    created_at: datetime
    updated_at: datetime
    closed_at: Union[datetime, None]
    merged_at: Union[datetime, None]
    merge_commit_sha: Union[str, None]
    assignee: Union[None, SimpleUserType]
    assignees: NotRequired[Union[List[SimpleUserType], None]]
    requested_reviewers: NotRequired[Union[List[SimpleUserType], None]]
    requested_teams: NotRequired[Union[List[TeamSimpleType], None]]
    head: PullRequestPropHeadType
    base: PullRequestPropBaseType
    links: PullRequestPropLinksType
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    auto_merge: Union[AutoMergeType, None]
    draft: NotRequired[bool]
    merged: bool
    mergeable: Union[bool, None]
    rebaseable: NotRequired[Union[bool, None]]
    mergeable_state: str
    merged_by: Union[None, SimpleUserType]
    comments: int
    review_comments: int
    maintainer_can_modify: bool
    commits: int
    additions: int
    deletions: int
    changed_files: int
    allow_auto_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    delete_branch_on_merge: NotRequired[bool]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    use_squash_pr_title_as_default: NotRequired[bool]


class WebhookPullRequestConvertedToDraftPropPullRequestAllof1Type(TypedDict):
    """WebhookPullRequestConvertedToDraftPropPullRequestAllof1"""

    allow_auto_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    delete_branch_on_merge: NotRequired[bool]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    use_squash_pr_title_as_default: NotRequired[bool]


class WebhookPullRequestDemilestonedType(TypedDict):
    """pull_request demilestoned event"""

    action: Literal["demilestoned"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    milestone: NotRequired[MilestoneType]
    number: int
    organization: NotRequired[OrganizationSimpleWebhooksType]
    pull_request: WebhookPullRequestDemilestonedPropPullRequestType
    repository: RepositoryWebhooksType
    sender: NotRequired[SimpleUserWebhooksType]


class WebhookPullRequestDemilestonedPropPullRequestType(TypedDict):
    """Pull Request"""

    links: WebhookPullRequestDemilestonedPropPullRequestPropLinksType
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    additions: NotRequired[int]
    assignee: Union[WebhookPullRequestDemilestonedPropPullRequestPropAssigneeType, None]
    assignees: List[
        Union[WebhookPullRequestDemilestonedPropPullRequestPropAssigneesItemsType, None]
    ]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    auto_merge: Union[
        WebhookPullRequestDemilestonedPropPullRequestPropAutoMergeType, None
    ]
    base: WebhookPullRequestDemilestonedPropPullRequestPropBaseType
    body: Union[str, None]
    changed_files: NotRequired[int]
    closed_at: Union[datetime, None]
    comments: NotRequired[int]
    comments_url: str
    commits: NotRequired[int]
    commits_url: str
    created_at: datetime
    deletions: NotRequired[int]
    diff_url: str
    draft: bool
    head: WebhookPullRequestDemilestonedPropPullRequestPropHeadType
    html_url: str
    id: int
    issue_url: str
    labels: List[WebhookPullRequestDemilestonedPropPullRequestPropLabelsItemsType]
    locked: bool
    maintainer_can_modify: NotRequired[bool]
    merge_commit_sha: Union[str, None]
    mergeable: NotRequired[Union[bool, None]]
    mergeable_state: NotRequired[str]
    merged: NotRequired[Union[bool, None]]
    merged_at: Union[datetime, None]
    merged_by: NotRequired[
        Union[WebhookPullRequestDemilestonedPropPullRequestPropMergedByType, None]
    ]
    milestone: Union[
        WebhookPullRequestDemilestonedPropPullRequestPropMilestoneType, None
    ]
    node_id: str
    number: int
    patch_url: str
    rebaseable: NotRequired[Union[bool, None]]
    requested_reviewers: List[
        Union[
            WebhookPullRequestDemilestonedPropPullRequestPropRequestedReviewersItemsOneof0Type,
            None,
            WebhookPullRequestDemilestonedPropPullRequestPropRequestedReviewersItemsOneof1Type,
        ]
    ]
    requested_teams: List[
        WebhookPullRequestDemilestonedPropPullRequestPropRequestedTeamsItemsType
    ]
    review_comment_url: str
    review_comments: NotRequired[int]
    review_comments_url: str
    state: Literal["open", "closed"]
    statuses_url: str
    title: str
    updated_at: datetime
    url: str
    user: Union[WebhookPullRequestDemilestonedPropPullRequestPropUserType, None]


class WebhookPullRequestDemilestonedPropPullRequestPropLinksType(TypedDict):
    """WebhookPullRequestDemilestonedPropPullRequestPropLinks"""

    comments: WebhookPullRequestDemilestonedPropPullRequestPropLinksPropCommentsType
    commits: WebhookPullRequestDemilestonedPropPullRequestPropLinksPropCommitsType
    html: WebhookPullRequestDemilestonedPropPullRequestPropLinksPropHtmlType
    issue: WebhookPullRequestDemilestonedPropPullRequestPropLinksPropIssueType
    review_comment: WebhookPullRequestDemilestonedPropPullRequestPropLinksPropReviewCommentType
    review_comments: WebhookPullRequestDemilestonedPropPullRequestPropLinksPropReviewCommentsType
    self_: WebhookPullRequestDemilestonedPropPullRequestPropLinksPropSelfType
    statuses: WebhookPullRequestDemilestonedPropPullRequestPropLinksPropStatusesType


class WebhookPullRequestDemilestonedPropPullRequestPropLinksPropCommentsType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestDemilestonedPropPullRequestPropLinksPropCommitsType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestDemilestonedPropPullRequestPropLinksPropHtmlType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestDemilestonedPropPullRequestPropLinksPropIssueType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestDemilestonedPropPullRequestPropLinksPropReviewCommentType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestDemilestonedPropPullRequestPropLinksPropReviewCommentsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestDemilestonedPropPullRequestPropLinksPropSelfType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestDemilestonedPropPullRequestPropLinksPropStatusesType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestDemilestonedPropPullRequestPropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestDemilestonedPropPullRequestPropAssigneesItemsType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestDemilestonedPropPullRequestPropAutoMergePropEnabledByType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestDemilestonedPropPullRequestPropAutoMergeType(TypedDict):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None]
    commit_title: Union[str, None]
    enabled_by: Union[
        WebhookPullRequestDemilestonedPropPullRequestPropAutoMergePropEnabledByType,
        None,
    ]
    merge_method: Literal["merge", "squash", "rebase"]


class WebhookPullRequestDemilestonedPropPullRequestPropBaseType(TypedDict):
    """WebhookPullRequestDemilestonedPropPullRequestPropBase"""

    label: str
    ref: str
    repo: WebhookPullRequestDemilestonedPropPullRequestPropBasePropRepoType
    sha: str
    user: Union[WebhookPullRequestDemilestonedPropPullRequestPropBasePropUserType, None]


class WebhookPullRequestDemilestonedPropPullRequestPropBasePropRepoType(TypedDict):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestDemilestonedPropPullRequestPropBasePropRepoPropLicenseType,
        None,
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestDemilestonedPropPullRequestPropBasePropRepoPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookPullRequestDemilestonedPropPullRequestPropBasePropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestDemilestonedPropPullRequestPropBasePropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestDemilestonedPropPullRequestPropBasePropRepoPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestDemilestonedPropPullRequestPropBasePropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestDemilestonedPropPullRequestPropBasePropRepoPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestDemilestonedPropPullRequestPropBasePropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestDemilestonedPropPullRequestPropHeadType(TypedDict):
    """WebhookPullRequestDemilestonedPropPullRequestPropHead"""

    label: str
    ref: str
    repo: WebhookPullRequestDemilestonedPropPullRequestPropHeadPropRepoType
    sha: str
    user: Union[WebhookPullRequestDemilestonedPropPullRequestPropHeadPropUserType, None]


class WebhookPullRequestDemilestonedPropPullRequestPropHeadPropRepoType(TypedDict):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestDemilestonedPropPullRequestPropHeadPropRepoPropLicenseType,
        None,
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestDemilestonedPropPullRequestPropHeadPropRepoPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookPullRequestDemilestonedPropPullRequestPropHeadPropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestDemilestonedPropPullRequestPropHeadPropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestDemilestonedPropPullRequestPropHeadPropRepoPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestDemilestonedPropPullRequestPropHeadPropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestDemilestonedPropPullRequestPropHeadPropRepoPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestDemilestonedPropPullRequestPropHeadPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestDemilestonedPropPullRequestPropLabelsItemsType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookPullRequestDemilestonedPropPullRequestPropMergedByType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestDemilestonedPropPullRequestPropMilestonePropCreatorType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestDemilestonedPropPullRequestPropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[
        WebhookPullRequestDemilestonedPropPullRequestPropMilestonePropCreatorType, None
    ]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookPullRequestDemilestonedPropPullRequestPropRequestedReviewersItemsOneof0Type(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestDemilestonedPropPullRequestPropRequestedReviewersItemsOneof1Type(
    TypedDict
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: NotRequired[Union[str, None]]
    html_url: NotRequired[str]
    id: int
    members_url: NotRequired[str]
    name: str
    node_id: NotRequired[str]
    parent: NotRequired[
        Union[
            WebhookPullRequestDemilestonedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType,
            None,
        ]
    ]
    permission: NotRequired[str]
    privacy: NotRequired[Literal["open", "closed", "secret"]]
    repositories_url: NotRequired[str]
    slug: NotRequired[str]
    url: NotRequired[str]


class WebhookPullRequestDemilestonedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType(
    TypedDict
):
    """WebhookPullRequestDemilestonedPropPullRequestPropRequestedReviewersItemsOneof1Pr
    opParent
    """

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestDemilestonedPropPullRequestPropRequestedTeamsItemsType(
    TypedDict
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: NotRequired[Union[str, None]]
    html_url: NotRequired[str]
    id: int
    members_url: NotRequired[str]
    name: str
    node_id: NotRequired[str]
    parent: NotRequired[
        Union[
            WebhookPullRequestDemilestonedPropPullRequestPropRequestedTeamsItemsPropParentType,
            None,
        ]
    ]
    permission: NotRequired[str]
    privacy: NotRequired[Literal["open", "closed", "secret"]]
    repositories_url: NotRequired[str]
    slug: NotRequired[str]
    url: NotRequired[str]


class WebhookPullRequestDemilestonedPropPullRequestPropRequestedTeamsItemsPropParentType(
    TypedDict
):
    """WebhookPullRequestDemilestonedPropPullRequestPropRequestedTeamsItemsPropParent"""

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestDemilestonedPropPullRequestPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestDequeuedType(TypedDict):
    """pull_request dequeued event"""

    action: Literal["dequeued"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    number: int
    organization: NotRequired[OrganizationSimpleWebhooksType]
    pull_request: WebhookPullRequestDequeuedPropPullRequestType
    reason: str
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookPullRequestDequeuedPropPullRequestType(TypedDict):
    """Pull Request"""

    links: WebhookPullRequestDequeuedPropPullRequestPropLinksType
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    additions: NotRequired[int]
    assignee: Union[WebhookPullRequestDequeuedPropPullRequestPropAssigneeType, None]
    assignees: List[
        Union[WebhookPullRequestDequeuedPropPullRequestPropAssigneesItemsType, None]
    ]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    auto_merge: Union[WebhookPullRequestDequeuedPropPullRequestPropAutoMergeType, None]
    base: WebhookPullRequestDequeuedPropPullRequestPropBaseType
    body: Union[str, None]
    changed_files: NotRequired[int]
    closed_at: Union[datetime, None]
    comments: NotRequired[int]
    comments_url: str
    commits: NotRequired[int]
    commits_url: str
    created_at: datetime
    deletions: NotRequired[int]
    diff_url: str
    draft: bool
    head: WebhookPullRequestDequeuedPropPullRequestPropHeadType
    html_url: str
    id: int
    issue_url: str
    labels: List[WebhookPullRequestDequeuedPropPullRequestPropLabelsItemsType]
    locked: bool
    maintainer_can_modify: NotRequired[bool]
    merge_commit_sha: Union[str, None]
    mergeable: NotRequired[Union[bool, None]]
    mergeable_state: NotRequired[str]
    merged: NotRequired[Union[bool, None]]
    merged_at: Union[datetime, None]
    merged_by: NotRequired[
        Union[WebhookPullRequestDequeuedPropPullRequestPropMergedByType, None]
    ]
    milestone: Union[WebhookPullRequestDequeuedPropPullRequestPropMilestoneType, None]
    node_id: str
    number: int
    patch_url: str
    rebaseable: NotRequired[Union[bool, None]]
    requested_reviewers: List[
        Union[
            WebhookPullRequestDequeuedPropPullRequestPropRequestedReviewersItemsOneof0Type,
            None,
            WebhookPullRequestDequeuedPropPullRequestPropRequestedReviewersItemsOneof1Type,
        ]
    ]
    requested_teams: List[
        WebhookPullRequestDequeuedPropPullRequestPropRequestedTeamsItemsType
    ]
    review_comment_url: str
    review_comments: NotRequired[int]
    review_comments_url: str
    state: Literal["open", "closed"]
    statuses_url: str
    title: str
    updated_at: datetime
    url: str
    user: Union[WebhookPullRequestDequeuedPropPullRequestPropUserType, None]


class WebhookPullRequestDequeuedPropPullRequestPropLinksType(TypedDict):
    """WebhookPullRequestDequeuedPropPullRequestPropLinks"""

    comments: WebhookPullRequestDequeuedPropPullRequestPropLinksPropCommentsType
    commits: WebhookPullRequestDequeuedPropPullRequestPropLinksPropCommitsType
    html: WebhookPullRequestDequeuedPropPullRequestPropLinksPropHtmlType
    issue: WebhookPullRequestDequeuedPropPullRequestPropLinksPropIssueType
    review_comment: WebhookPullRequestDequeuedPropPullRequestPropLinksPropReviewCommentType
    review_comments: WebhookPullRequestDequeuedPropPullRequestPropLinksPropReviewCommentsType
    self_: WebhookPullRequestDequeuedPropPullRequestPropLinksPropSelfType
    statuses: WebhookPullRequestDequeuedPropPullRequestPropLinksPropStatusesType


class WebhookPullRequestDequeuedPropPullRequestPropLinksPropCommentsType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestDequeuedPropPullRequestPropLinksPropCommitsType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestDequeuedPropPullRequestPropLinksPropHtmlType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestDequeuedPropPullRequestPropLinksPropIssueType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestDequeuedPropPullRequestPropLinksPropReviewCommentType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestDequeuedPropPullRequestPropLinksPropReviewCommentsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestDequeuedPropPullRequestPropLinksPropSelfType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestDequeuedPropPullRequestPropLinksPropStatusesType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestDequeuedPropPullRequestPropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestDequeuedPropPullRequestPropAssigneesItemsType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestDequeuedPropPullRequestPropAutoMergePropEnabledByType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestDequeuedPropPullRequestPropAutoMergeType(TypedDict):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None]
    commit_title: Union[str, None]
    enabled_by: Union[
        WebhookPullRequestDequeuedPropPullRequestPropAutoMergePropEnabledByType, None
    ]
    merge_method: Literal["merge", "squash", "rebase"]


class WebhookPullRequestDequeuedPropPullRequestPropBaseType(TypedDict):
    """WebhookPullRequestDequeuedPropPullRequestPropBase"""

    label: str
    ref: str
    repo: WebhookPullRequestDequeuedPropPullRequestPropBasePropRepoType
    sha: str
    user: Union[WebhookPullRequestDequeuedPropPullRequestPropBasePropUserType, None]


class WebhookPullRequestDequeuedPropPullRequestPropBasePropRepoType(TypedDict):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestDequeuedPropPullRequestPropBasePropRepoPropLicenseType, None
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestDequeuedPropPullRequestPropBasePropRepoPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookPullRequestDequeuedPropPullRequestPropBasePropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestDequeuedPropPullRequestPropBasePropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestDequeuedPropPullRequestPropBasePropRepoPropOwnerType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestDequeuedPropPullRequestPropBasePropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestDequeuedPropPullRequestPropBasePropRepoPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestDequeuedPropPullRequestPropBasePropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestDequeuedPropPullRequestPropHeadType(TypedDict):
    """WebhookPullRequestDequeuedPropPullRequestPropHead"""

    label: str
    ref: str
    repo: WebhookPullRequestDequeuedPropPullRequestPropHeadPropRepoType
    sha: str
    user: Union[WebhookPullRequestDequeuedPropPullRequestPropHeadPropUserType, None]


class WebhookPullRequestDequeuedPropPullRequestPropHeadPropRepoType(TypedDict):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestDequeuedPropPullRequestPropHeadPropRepoPropLicenseType, None
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestDequeuedPropPullRequestPropHeadPropRepoPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookPullRequestDequeuedPropPullRequestPropHeadPropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestDequeuedPropPullRequestPropHeadPropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestDequeuedPropPullRequestPropHeadPropRepoPropOwnerType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestDequeuedPropPullRequestPropHeadPropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestDequeuedPropPullRequestPropHeadPropRepoPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestDequeuedPropPullRequestPropHeadPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestDequeuedPropPullRequestPropLabelsItemsType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookPullRequestDequeuedPropPullRequestPropMergedByType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestDequeuedPropPullRequestPropMilestonePropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestDequeuedPropPullRequestPropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[
        WebhookPullRequestDequeuedPropPullRequestPropMilestonePropCreatorType, None
    ]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookPullRequestDequeuedPropPullRequestPropRequestedReviewersItemsOneof0Type(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestDequeuedPropPullRequestPropRequestedReviewersItemsOneof1Type(
    TypedDict
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: NotRequired[Union[str, None]]
    html_url: NotRequired[str]
    id: int
    members_url: NotRequired[str]
    name: str
    node_id: NotRequired[str]
    parent: NotRequired[
        Union[
            WebhookPullRequestDequeuedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType,
            None,
        ]
    ]
    permission: NotRequired[str]
    privacy: NotRequired[Literal["open", "closed", "secret"]]
    repositories_url: NotRequired[str]
    slug: NotRequired[str]
    url: NotRequired[str]


class WebhookPullRequestDequeuedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType(
    TypedDict
):
    """WebhookPullRequestDequeuedPropPullRequestPropRequestedReviewersItemsOneof1PropPa
    rent
    """

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestDequeuedPropPullRequestPropRequestedTeamsItemsType(TypedDict):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: NotRequired[Union[str, None]]
    html_url: NotRequired[str]
    id: int
    members_url: NotRequired[str]
    name: str
    node_id: NotRequired[str]
    parent: NotRequired[
        Union[
            WebhookPullRequestDequeuedPropPullRequestPropRequestedTeamsItemsPropParentType,
            None,
        ]
    ]
    permission: NotRequired[str]
    privacy: NotRequired[Literal["open", "closed", "secret"]]
    repositories_url: NotRequired[str]
    slug: NotRequired[str]
    url: NotRequired[str]


class WebhookPullRequestDequeuedPropPullRequestPropRequestedTeamsItemsPropParentType(
    TypedDict
):
    """WebhookPullRequestDequeuedPropPullRequestPropRequestedTeamsItemsPropParent"""

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestDequeuedPropPullRequestPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestEditedType(TypedDict):
    """pull_request edited event"""

    action: Literal["edited"]
    changes: WebhookPullRequestEditedPropChangesType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    number: int
    organization: NotRequired[OrganizationSimpleWebhooksType]
    pull_request: WebhookPullRequestEditedPropPullRequestType
    repository: RepositoryWebhooksType
    sender: NotRequired[SimpleUserWebhooksType]


class WebhookPullRequestEditedPropChangesType(TypedDict):
    """WebhookPullRequestEditedPropChanges

    The changes to the comment if the action was `edited`.
    """

    base: NotRequired[WebhookPullRequestEditedPropChangesPropBaseType]
    body: NotRequired[WebhookPullRequestEditedPropChangesPropBodyType]
    title: NotRequired[WebhookPullRequestEditedPropChangesPropTitleType]


class WebhookPullRequestEditedPropChangesPropBaseType(TypedDict):
    """WebhookPullRequestEditedPropChangesPropBase"""

    ref: WebhookPullRequestEditedPropChangesPropBasePropRefType
    sha: WebhookPullRequestEditedPropChangesPropBasePropShaType


class WebhookPullRequestEditedPropChangesPropBasePropRefType(TypedDict):
    """WebhookPullRequestEditedPropChangesPropBasePropRef"""

    from_: str


class WebhookPullRequestEditedPropChangesPropBasePropShaType(TypedDict):
    """WebhookPullRequestEditedPropChangesPropBasePropSha"""

    from_: str


class WebhookPullRequestEditedPropChangesPropBodyType(TypedDict):
    """WebhookPullRequestEditedPropChangesPropBody"""

    from_: str


class WebhookPullRequestEditedPropChangesPropTitleType(TypedDict):
    """WebhookPullRequestEditedPropChangesPropTitle"""

    from_: str


class WebhookPullRequestEditedPropPullRequestType(TypedDict):
    """WebhookPullRequestEditedPropPullRequest"""

    url: str
    id: int
    node_id: str
    html_url: str
    diff_url: str
    patch_url: str
    issue_url: str
    commits_url: str
    review_comments_url: str
    review_comment_url: str
    comments_url: str
    statuses_url: str
    number: int
    state: Literal["open", "closed"]
    locked: bool
    title: str
    user: SimpleUserType
    body: Union[str, None]
    labels: List[PullRequestPropLabelsItemsType]
    milestone: Union[None, MilestoneType]
    active_lock_reason: NotRequired[Union[str, None]]
    created_at: datetime
    updated_at: datetime
    closed_at: Union[datetime, None]
    merged_at: Union[datetime, None]
    merge_commit_sha: Union[str, None]
    assignee: Union[None, SimpleUserType]
    assignees: NotRequired[Union[List[SimpleUserType], None]]
    requested_reviewers: NotRequired[Union[List[SimpleUserType], None]]
    requested_teams: NotRequired[Union[List[TeamSimpleType], None]]
    head: PullRequestPropHeadType
    base: PullRequestPropBaseType
    links: PullRequestPropLinksType
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    auto_merge: Union[AutoMergeType, None]
    draft: NotRequired[bool]
    merged: bool
    mergeable: Union[bool, None]
    rebaseable: NotRequired[Union[bool, None]]
    mergeable_state: str
    merged_by: Union[None, SimpleUserType]
    comments: int
    review_comments: int
    maintainer_can_modify: bool
    commits: int
    additions: int
    deletions: int
    changed_files: int
    allow_auto_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    delete_branch_on_merge: NotRequired[bool]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    use_squash_pr_title_as_default: NotRequired[bool]


class WebhookPullRequestEditedPropPullRequestAllof1Type(TypedDict):
    """WebhookPullRequestEditedPropPullRequestAllof1"""

    allow_auto_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    delete_branch_on_merge: NotRequired[bool]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    use_squash_pr_title_as_default: NotRequired[bool]


class WebhookPullRequestEnqueuedType(TypedDict):
    """pull_request enqueued event"""

    action: Literal["enqueued"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    number: int
    organization: NotRequired[OrganizationSimpleWebhooksType]
    pull_request: WebhookPullRequestEnqueuedPropPullRequestType
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookPullRequestEnqueuedPropPullRequestType(TypedDict):
    """Pull Request"""

    links: WebhookPullRequestEnqueuedPropPullRequestPropLinksType
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    additions: NotRequired[int]
    assignee: Union[WebhookPullRequestEnqueuedPropPullRequestPropAssigneeType, None]
    assignees: List[
        Union[WebhookPullRequestEnqueuedPropPullRequestPropAssigneesItemsType, None]
    ]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    auto_merge: Union[WebhookPullRequestEnqueuedPropPullRequestPropAutoMergeType, None]
    base: WebhookPullRequestEnqueuedPropPullRequestPropBaseType
    body: Union[str, None]
    changed_files: NotRequired[int]
    closed_at: Union[datetime, None]
    comments: NotRequired[int]
    comments_url: str
    commits: NotRequired[int]
    commits_url: str
    created_at: datetime
    deletions: NotRequired[int]
    diff_url: str
    draft: bool
    head: WebhookPullRequestEnqueuedPropPullRequestPropHeadType
    html_url: str
    id: int
    issue_url: str
    labels: List[WebhookPullRequestEnqueuedPropPullRequestPropLabelsItemsType]
    locked: bool
    maintainer_can_modify: NotRequired[bool]
    merge_commit_sha: Union[str, None]
    mergeable: NotRequired[Union[bool, None]]
    mergeable_state: NotRequired[str]
    merged: NotRequired[Union[bool, None]]
    merged_at: Union[datetime, None]
    merged_by: NotRequired[
        Union[WebhookPullRequestEnqueuedPropPullRequestPropMergedByType, None]
    ]
    milestone: Union[WebhookPullRequestEnqueuedPropPullRequestPropMilestoneType, None]
    node_id: str
    number: int
    patch_url: str
    rebaseable: NotRequired[Union[bool, None]]
    requested_reviewers: List[
        Union[
            WebhookPullRequestEnqueuedPropPullRequestPropRequestedReviewersItemsOneof0Type,
            None,
            WebhookPullRequestEnqueuedPropPullRequestPropRequestedReviewersItemsOneof1Type,
        ]
    ]
    requested_teams: List[
        WebhookPullRequestEnqueuedPropPullRequestPropRequestedTeamsItemsType
    ]
    review_comment_url: str
    review_comments: NotRequired[int]
    review_comments_url: str
    state: Literal["open", "closed"]
    statuses_url: str
    title: str
    updated_at: datetime
    url: str
    user: Union[WebhookPullRequestEnqueuedPropPullRequestPropUserType, None]


class WebhookPullRequestEnqueuedPropPullRequestPropLinksType(TypedDict):
    """WebhookPullRequestEnqueuedPropPullRequestPropLinks"""

    comments: WebhookPullRequestEnqueuedPropPullRequestPropLinksPropCommentsType
    commits: WebhookPullRequestEnqueuedPropPullRequestPropLinksPropCommitsType
    html: WebhookPullRequestEnqueuedPropPullRequestPropLinksPropHtmlType
    issue: WebhookPullRequestEnqueuedPropPullRequestPropLinksPropIssueType
    review_comment: WebhookPullRequestEnqueuedPropPullRequestPropLinksPropReviewCommentType
    review_comments: WebhookPullRequestEnqueuedPropPullRequestPropLinksPropReviewCommentsType
    self_: WebhookPullRequestEnqueuedPropPullRequestPropLinksPropSelfType
    statuses: WebhookPullRequestEnqueuedPropPullRequestPropLinksPropStatusesType


class WebhookPullRequestEnqueuedPropPullRequestPropLinksPropCommentsType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestEnqueuedPropPullRequestPropLinksPropCommitsType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestEnqueuedPropPullRequestPropLinksPropHtmlType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestEnqueuedPropPullRequestPropLinksPropIssueType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestEnqueuedPropPullRequestPropLinksPropReviewCommentType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestEnqueuedPropPullRequestPropLinksPropReviewCommentsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestEnqueuedPropPullRequestPropLinksPropSelfType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestEnqueuedPropPullRequestPropLinksPropStatusesType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestEnqueuedPropPullRequestPropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestEnqueuedPropPullRequestPropAssigneesItemsType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestEnqueuedPropPullRequestPropAutoMergePropEnabledByType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestEnqueuedPropPullRequestPropAutoMergeType(TypedDict):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None]
    commit_title: Union[str, None]
    enabled_by: Union[
        WebhookPullRequestEnqueuedPropPullRequestPropAutoMergePropEnabledByType, None
    ]
    merge_method: Literal["merge", "squash", "rebase"]


class WebhookPullRequestEnqueuedPropPullRequestPropBaseType(TypedDict):
    """WebhookPullRequestEnqueuedPropPullRequestPropBase"""

    label: str
    ref: str
    repo: WebhookPullRequestEnqueuedPropPullRequestPropBasePropRepoType
    sha: str
    user: Union[WebhookPullRequestEnqueuedPropPullRequestPropBasePropUserType, None]


class WebhookPullRequestEnqueuedPropPullRequestPropBasePropRepoType(TypedDict):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestEnqueuedPropPullRequestPropBasePropRepoPropLicenseType, None
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestEnqueuedPropPullRequestPropBasePropRepoPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookPullRequestEnqueuedPropPullRequestPropBasePropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestEnqueuedPropPullRequestPropBasePropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestEnqueuedPropPullRequestPropBasePropRepoPropOwnerType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestEnqueuedPropPullRequestPropBasePropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestEnqueuedPropPullRequestPropBasePropRepoPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestEnqueuedPropPullRequestPropBasePropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestEnqueuedPropPullRequestPropHeadType(TypedDict):
    """WebhookPullRequestEnqueuedPropPullRequestPropHead"""

    label: str
    ref: str
    repo: WebhookPullRequestEnqueuedPropPullRequestPropHeadPropRepoType
    sha: str
    user: Union[WebhookPullRequestEnqueuedPropPullRequestPropHeadPropUserType, None]


class WebhookPullRequestEnqueuedPropPullRequestPropHeadPropRepoType(TypedDict):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestEnqueuedPropPullRequestPropHeadPropRepoPropLicenseType, None
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestEnqueuedPropPullRequestPropHeadPropRepoPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookPullRequestEnqueuedPropPullRequestPropHeadPropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestEnqueuedPropPullRequestPropHeadPropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestEnqueuedPropPullRequestPropHeadPropRepoPropOwnerType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestEnqueuedPropPullRequestPropHeadPropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestEnqueuedPropPullRequestPropHeadPropRepoPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestEnqueuedPropPullRequestPropHeadPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestEnqueuedPropPullRequestPropLabelsItemsType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookPullRequestEnqueuedPropPullRequestPropMergedByType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestEnqueuedPropPullRequestPropMilestonePropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestEnqueuedPropPullRequestPropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[
        WebhookPullRequestEnqueuedPropPullRequestPropMilestonePropCreatorType, None
    ]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookPullRequestEnqueuedPropPullRequestPropRequestedReviewersItemsOneof0Type(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestEnqueuedPropPullRequestPropRequestedReviewersItemsOneof1Type(
    TypedDict
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: NotRequired[Union[str, None]]
    html_url: NotRequired[str]
    id: int
    members_url: NotRequired[str]
    name: str
    node_id: NotRequired[str]
    parent: NotRequired[
        Union[
            WebhookPullRequestEnqueuedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType,
            None,
        ]
    ]
    permission: NotRequired[str]
    privacy: NotRequired[Literal["open", "closed", "secret"]]
    repositories_url: NotRequired[str]
    slug: NotRequired[str]
    url: NotRequired[str]


class WebhookPullRequestEnqueuedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType(
    TypedDict
):
    """WebhookPullRequestEnqueuedPropPullRequestPropRequestedReviewersItemsOneof1PropPa
    rent
    """

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestEnqueuedPropPullRequestPropRequestedTeamsItemsType(TypedDict):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: NotRequired[Union[str, None]]
    html_url: NotRequired[str]
    id: int
    members_url: NotRequired[str]
    name: str
    node_id: NotRequired[str]
    parent: NotRequired[
        Union[
            WebhookPullRequestEnqueuedPropPullRequestPropRequestedTeamsItemsPropParentType,
            None,
        ]
    ]
    permission: NotRequired[str]
    privacy: NotRequired[Literal["open", "closed", "secret"]]
    repositories_url: NotRequired[str]
    slug: NotRequired[str]
    url: NotRequired[str]


class WebhookPullRequestEnqueuedPropPullRequestPropRequestedTeamsItemsPropParentType(
    TypedDict
):
    """WebhookPullRequestEnqueuedPropPullRequestPropRequestedTeamsItemsPropParent"""

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestEnqueuedPropPullRequestPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestLabeledType(TypedDict):
    """pull_request labeled event"""

    action: Literal["labeled"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    label: NotRequired[WebhookPullRequestLabeledPropLabelType]
    number: int
    organization: NotRequired[OrganizationSimpleWebhooksType]
    pull_request: WebhookPullRequestLabeledPropPullRequestType
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookPullRequestLabeledPropLabelType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookPullRequestLabeledPropPullRequestType(TypedDict):
    """Pull Request"""

    links: WebhookPullRequestLabeledPropPullRequestPropLinksType
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    additions: NotRequired[int]
    assignee: Union[WebhookPullRequestLabeledPropPullRequestPropAssigneeType, None]
    assignees: List[
        Union[WebhookPullRequestLabeledPropPullRequestPropAssigneesItemsType, None]
    ]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    auto_merge: Union[WebhookPullRequestLabeledPropPullRequestPropAutoMergeType, None]
    base: WebhookPullRequestLabeledPropPullRequestPropBaseType
    body: Union[str, None]
    changed_files: NotRequired[int]
    closed_at: Union[datetime, None]
    comments: NotRequired[int]
    comments_url: str
    commits: NotRequired[int]
    commits_url: str
    created_at: datetime
    deletions: NotRequired[int]
    diff_url: str
    draft: bool
    head: WebhookPullRequestLabeledPropPullRequestPropHeadType
    html_url: str
    id: int
    issue_url: str
    labels: List[WebhookPullRequestLabeledPropPullRequestPropLabelsItemsType]
    locked: bool
    maintainer_can_modify: NotRequired[bool]
    merge_commit_sha: Union[str, None]
    mergeable: NotRequired[Union[bool, None]]
    mergeable_state: NotRequired[str]
    merged: NotRequired[Union[bool, None]]
    merged_at: Union[datetime, None]
    merged_by: NotRequired[
        Union[WebhookPullRequestLabeledPropPullRequestPropMergedByType, None]
    ]
    milestone: Union[WebhookPullRequestLabeledPropPullRequestPropMilestoneType, None]
    node_id: str
    number: int
    patch_url: str
    rebaseable: NotRequired[Union[bool, None]]
    requested_reviewers: List[
        Union[
            WebhookPullRequestLabeledPropPullRequestPropRequestedReviewersItemsOneof0Type,
            None,
            WebhookPullRequestLabeledPropPullRequestPropRequestedReviewersItemsOneof1Type,
        ]
    ]
    requested_teams: List[
        WebhookPullRequestLabeledPropPullRequestPropRequestedTeamsItemsType
    ]
    review_comment_url: str
    review_comments: NotRequired[int]
    review_comments_url: str
    state: Literal["open", "closed"]
    statuses_url: str
    title: str
    updated_at: datetime
    url: str
    user: Union[WebhookPullRequestLabeledPropPullRequestPropUserType, None]


class WebhookPullRequestLabeledPropPullRequestPropLinksType(TypedDict):
    """WebhookPullRequestLabeledPropPullRequestPropLinks"""

    comments: WebhookPullRequestLabeledPropPullRequestPropLinksPropCommentsType
    commits: WebhookPullRequestLabeledPropPullRequestPropLinksPropCommitsType
    html: WebhookPullRequestLabeledPropPullRequestPropLinksPropHtmlType
    issue: WebhookPullRequestLabeledPropPullRequestPropLinksPropIssueType
    review_comment: WebhookPullRequestLabeledPropPullRequestPropLinksPropReviewCommentType
    review_comments: WebhookPullRequestLabeledPropPullRequestPropLinksPropReviewCommentsType
    self_: WebhookPullRequestLabeledPropPullRequestPropLinksPropSelfType
    statuses: WebhookPullRequestLabeledPropPullRequestPropLinksPropStatusesType


class WebhookPullRequestLabeledPropPullRequestPropLinksPropCommentsType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestLabeledPropPullRequestPropLinksPropCommitsType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestLabeledPropPullRequestPropLinksPropHtmlType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestLabeledPropPullRequestPropLinksPropIssueType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestLabeledPropPullRequestPropLinksPropReviewCommentType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestLabeledPropPullRequestPropLinksPropReviewCommentsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestLabeledPropPullRequestPropLinksPropSelfType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestLabeledPropPullRequestPropLinksPropStatusesType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestLabeledPropPullRequestPropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestLabeledPropPullRequestPropAssigneesItemsType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestLabeledPropPullRequestPropAutoMergePropEnabledByType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestLabeledPropPullRequestPropAutoMergeType(TypedDict):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None]
    commit_title: Union[str, None]
    enabled_by: Union[
        WebhookPullRequestLabeledPropPullRequestPropAutoMergePropEnabledByType, None
    ]
    merge_method: Literal["merge", "squash", "rebase"]


class WebhookPullRequestLabeledPropPullRequestPropBaseType(TypedDict):
    """WebhookPullRequestLabeledPropPullRequestPropBase"""

    label: str
    ref: str
    repo: WebhookPullRequestLabeledPropPullRequestPropBasePropRepoType
    sha: str
    user: Union[WebhookPullRequestLabeledPropPullRequestPropBasePropUserType, None]


class WebhookPullRequestLabeledPropPullRequestPropBasePropRepoType(TypedDict):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestLabeledPropPullRequestPropBasePropRepoPropLicenseType, None
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestLabeledPropPullRequestPropBasePropRepoPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookPullRequestLabeledPropPullRequestPropBasePropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestLabeledPropPullRequestPropBasePropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestLabeledPropPullRequestPropBasePropRepoPropOwnerType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestLabeledPropPullRequestPropBasePropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestLabeledPropPullRequestPropBasePropRepoPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestLabeledPropPullRequestPropBasePropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestLabeledPropPullRequestPropHeadType(TypedDict):
    """WebhookPullRequestLabeledPropPullRequestPropHead"""

    label: Union[str, None]
    ref: str
    repo: Union[WebhookPullRequestLabeledPropPullRequestPropHeadPropRepoType, None]
    sha: str
    user: Union[WebhookPullRequestLabeledPropPullRequestPropHeadPropUserType, None]


class WebhookPullRequestLabeledPropPullRequestPropHeadPropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestLabeledPropPullRequestPropHeadPropRepoPropOwnerType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestLabeledPropPullRequestPropHeadPropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestLabeledPropPullRequestPropHeadPropRepoPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestLabeledPropPullRequestPropHeadPropRepoType(TypedDict):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestLabeledPropPullRequestPropHeadPropRepoPropLicenseType, None
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestLabeledPropPullRequestPropHeadPropRepoPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookPullRequestLabeledPropPullRequestPropHeadPropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestLabeledPropPullRequestPropHeadPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestLabeledPropPullRequestPropLabelsItemsType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookPullRequestLabeledPropPullRequestPropMergedByType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestLabeledPropPullRequestPropMilestonePropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestLabeledPropPullRequestPropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[
        WebhookPullRequestLabeledPropPullRequestPropMilestonePropCreatorType, None
    ]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookPullRequestLabeledPropPullRequestPropRequestedReviewersItemsOneof0Type(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestLabeledPropPullRequestPropRequestedReviewersItemsOneof1Type(
    TypedDict
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    parent: NotRequired[
        Union[
            WebhookPullRequestLabeledPropPullRequestPropRequestedReviewersItemsOneof1PropParentType,
            None,
        ]
    ]
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestLabeledPropPullRequestPropRequestedReviewersItemsOneof1PropParentType(
    TypedDict
):
    """WebhookPullRequestLabeledPropPullRequestPropRequestedReviewersItemsOneof1PropPar
    ent
    """

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestLabeledPropPullRequestPropRequestedTeamsItemsType(TypedDict):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: NotRequired[Union[str, None]]
    html_url: NotRequired[str]
    id: int
    members_url: NotRequired[str]
    name: str
    node_id: NotRequired[str]
    parent: NotRequired[
        Union[
            WebhookPullRequestLabeledPropPullRequestPropRequestedTeamsItemsPropParentType,
            None,
        ]
    ]
    permission: NotRequired[str]
    privacy: NotRequired[Literal["open", "closed", "secret"]]
    repositories_url: NotRequired[str]
    slug: NotRequired[str]
    url: NotRequired[str]


class WebhookPullRequestLabeledPropPullRequestPropRequestedTeamsItemsPropParentType(
    TypedDict
):
    """WebhookPullRequestLabeledPropPullRequestPropRequestedTeamsItemsPropParent"""

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestLabeledPropPullRequestPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestLockedType(TypedDict):
    """pull_request locked event"""

    action: Literal["locked"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    number: int
    organization: NotRequired[OrganizationSimpleWebhooksType]
    pull_request: WebhookPullRequestLockedPropPullRequestType
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookPullRequestLockedPropPullRequestType(TypedDict):
    """Pull Request"""

    links: WebhookPullRequestLockedPropPullRequestPropLinksType
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    additions: NotRequired[int]
    assignee: Union[WebhookPullRequestLockedPropPullRequestPropAssigneeType, None]
    assignees: List[
        Union[WebhookPullRequestLockedPropPullRequestPropAssigneesItemsType, None]
    ]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    auto_merge: Union[WebhookPullRequestLockedPropPullRequestPropAutoMergeType, None]
    base: WebhookPullRequestLockedPropPullRequestPropBaseType
    body: Union[str, None]
    changed_files: NotRequired[int]
    closed_at: Union[datetime, None]
    comments: NotRequired[int]
    comments_url: str
    commits: NotRequired[int]
    commits_url: str
    created_at: datetime
    deletions: NotRequired[int]
    diff_url: str
    draft: bool
    head: WebhookPullRequestLockedPropPullRequestPropHeadType
    html_url: str
    id: int
    issue_url: str
    labels: List[WebhookPullRequestLockedPropPullRequestPropLabelsItemsType]
    locked: bool
    maintainer_can_modify: NotRequired[bool]
    merge_commit_sha: Union[str, None]
    mergeable: NotRequired[Union[bool, None]]
    mergeable_state: NotRequired[str]
    merged: NotRequired[Union[bool, None]]
    merged_at: Union[datetime, None]
    merged_by: NotRequired[
        Union[WebhookPullRequestLockedPropPullRequestPropMergedByType, None]
    ]
    milestone: Union[WebhookPullRequestLockedPropPullRequestPropMilestoneType, None]
    node_id: str
    number: int
    patch_url: str
    rebaseable: NotRequired[Union[bool, None]]
    requested_reviewers: List[
        Union[
            WebhookPullRequestLockedPropPullRequestPropRequestedReviewersItemsOneof0Type,
            None,
            WebhookPullRequestLockedPropPullRequestPropRequestedReviewersItemsOneof1Type,
        ]
    ]
    requested_teams: List[
        WebhookPullRequestLockedPropPullRequestPropRequestedTeamsItemsType
    ]
    review_comment_url: str
    review_comments: NotRequired[int]
    review_comments_url: str
    state: Literal["open", "closed"]
    statuses_url: str
    title: str
    updated_at: datetime
    url: str
    user: Union[WebhookPullRequestLockedPropPullRequestPropUserType, None]


class WebhookPullRequestLockedPropPullRequestPropLinksType(TypedDict):
    """WebhookPullRequestLockedPropPullRequestPropLinks"""

    comments: WebhookPullRequestLockedPropPullRequestPropLinksPropCommentsType
    commits: WebhookPullRequestLockedPropPullRequestPropLinksPropCommitsType
    html: WebhookPullRequestLockedPropPullRequestPropLinksPropHtmlType
    issue: WebhookPullRequestLockedPropPullRequestPropLinksPropIssueType
    review_comment: WebhookPullRequestLockedPropPullRequestPropLinksPropReviewCommentType
    review_comments: WebhookPullRequestLockedPropPullRequestPropLinksPropReviewCommentsType
    self_: WebhookPullRequestLockedPropPullRequestPropLinksPropSelfType
    statuses: WebhookPullRequestLockedPropPullRequestPropLinksPropStatusesType


class WebhookPullRequestLockedPropPullRequestPropLinksPropCommentsType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestLockedPropPullRequestPropLinksPropCommitsType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestLockedPropPullRequestPropLinksPropHtmlType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestLockedPropPullRequestPropLinksPropIssueType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestLockedPropPullRequestPropLinksPropReviewCommentType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestLockedPropPullRequestPropLinksPropReviewCommentsType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestLockedPropPullRequestPropLinksPropSelfType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestLockedPropPullRequestPropLinksPropStatusesType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestLockedPropPullRequestPropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestLockedPropPullRequestPropAssigneesItemsType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestLockedPropPullRequestPropAutoMergePropEnabledByType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestLockedPropPullRequestPropAutoMergeType(TypedDict):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None]
    commit_title: Union[str, None]
    enabled_by: Union[
        WebhookPullRequestLockedPropPullRequestPropAutoMergePropEnabledByType, None
    ]
    merge_method: Literal["merge", "squash", "rebase"]


class WebhookPullRequestLockedPropPullRequestPropBaseType(TypedDict):
    """WebhookPullRequestLockedPropPullRequestPropBase"""

    label: str
    ref: str
    repo: WebhookPullRequestLockedPropPullRequestPropBasePropRepoType
    sha: str
    user: Union[WebhookPullRequestLockedPropPullRequestPropBasePropUserType, None]


class WebhookPullRequestLockedPropPullRequestPropBasePropRepoType(TypedDict):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestLockedPropPullRequestPropBasePropRepoPropLicenseType, None
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestLockedPropPullRequestPropBasePropRepoPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookPullRequestLockedPropPullRequestPropBasePropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestLockedPropPullRequestPropBasePropRepoPropLicenseType(TypedDict):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestLockedPropPullRequestPropBasePropRepoPropOwnerType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestLockedPropPullRequestPropBasePropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestLockedPropPullRequestPropBasePropRepoPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestLockedPropPullRequestPropBasePropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestLockedPropPullRequestPropHeadType(TypedDict):
    """WebhookPullRequestLockedPropPullRequestPropHead"""

    label: Union[str, None]
    ref: str
    repo: Union[WebhookPullRequestLockedPropPullRequestPropHeadPropRepoType, None]
    sha: str
    user: Union[WebhookPullRequestLockedPropPullRequestPropHeadPropUserType, None]


class WebhookPullRequestLockedPropPullRequestPropHeadPropRepoPropLicenseType(TypedDict):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestLockedPropPullRequestPropHeadPropRepoPropOwnerType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestLockedPropPullRequestPropHeadPropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestLockedPropPullRequestPropHeadPropRepoPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestLockedPropPullRequestPropHeadPropRepoType(TypedDict):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestLockedPropPullRequestPropHeadPropRepoPropLicenseType, None
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestLockedPropPullRequestPropHeadPropRepoPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookPullRequestLockedPropPullRequestPropHeadPropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestLockedPropPullRequestPropHeadPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestLockedPropPullRequestPropLabelsItemsType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookPullRequestLockedPropPullRequestPropMergedByType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestLockedPropPullRequestPropMilestonePropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestLockedPropPullRequestPropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[
        WebhookPullRequestLockedPropPullRequestPropMilestonePropCreatorType, None
    ]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookPullRequestLockedPropPullRequestPropRequestedReviewersItemsOneof0Type(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestLockedPropPullRequestPropRequestedReviewersItemsOneof1Type(
    TypedDict
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    parent: NotRequired[
        Union[
            WebhookPullRequestLockedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType,
            None,
        ]
    ]
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestLockedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType(
    TypedDict
):
    """WebhookPullRequestLockedPropPullRequestPropRequestedReviewersItemsOneof1PropPare
    nt
    """

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestLockedPropPullRequestPropRequestedTeamsItemsType(TypedDict):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: NotRequired[Union[str, None]]
    html_url: NotRequired[str]
    id: int
    members_url: NotRequired[str]
    name: str
    node_id: NotRequired[str]
    parent: NotRequired[
        Union[
            WebhookPullRequestLockedPropPullRequestPropRequestedTeamsItemsPropParentType,
            None,
        ]
    ]
    permission: NotRequired[str]
    privacy: NotRequired[Literal["open", "closed", "secret"]]
    repositories_url: NotRequired[str]
    slug: NotRequired[str]
    url: NotRequired[str]


class WebhookPullRequestLockedPropPullRequestPropRequestedTeamsItemsPropParentType(
    TypedDict
):
    """WebhookPullRequestLockedPropPullRequestPropRequestedTeamsItemsPropParent"""

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestLockedPropPullRequestPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestMilestonedType(TypedDict):
    """pull_request milestoned event"""

    action: Literal["milestoned"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    milestone: NotRequired[MilestoneType]
    number: int
    organization: NotRequired[OrganizationSimpleWebhooksType]
    pull_request: WebhookPullRequestMilestonedPropPullRequestType
    repository: RepositoryWebhooksType
    sender: NotRequired[SimpleUserWebhooksType]


class WebhookPullRequestMilestonedPropPullRequestType(TypedDict):
    """Pull Request"""

    links: WebhookPullRequestMilestonedPropPullRequestPropLinksType
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    additions: NotRequired[int]
    assignee: Union[WebhookPullRequestMilestonedPropPullRequestPropAssigneeType, None]
    assignees: List[
        Union[WebhookPullRequestMilestonedPropPullRequestPropAssigneesItemsType, None]
    ]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    auto_merge: Union[
        WebhookPullRequestMilestonedPropPullRequestPropAutoMergeType, None
    ]
    base: WebhookPullRequestMilestonedPropPullRequestPropBaseType
    body: Union[str, None]
    changed_files: NotRequired[int]
    closed_at: Union[datetime, None]
    comments: NotRequired[int]
    comments_url: str
    commits: NotRequired[int]
    commits_url: str
    created_at: datetime
    deletions: NotRequired[int]
    diff_url: str
    draft: bool
    head: WebhookPullRequestMilestonedPropPullRequestPropHeadType
    html_url: str
    id: int
    issue_url: str
    labels: List[WebhookPullRequestMilestonedPropPullRequestPropLabelsItemsType]
    locked: bool
    maintainer_can_modify: NotRequired[bool]
    merge_commit_sha: Union[str, None]
    mergeable: NotRequired[Union[bool, None]]
    mergeable_state: NotRequired[str]
    merged: NotRequired[Union[bool, None]]
    merged_at: Union[datetime, None]
    merged_by: NotRequired[
        Union[WebhookPullRequestMilestonedPropPullRequestPropMergedByType, None]
    ]
    milestone: Union[WebhookPullRequestMilestonedPropPullRequestPropMilestoneType, None]
    node_id: str
    number: int
    patch_url: str
    rebaseable: NotRequired[Union[bool, None]]
    requested_reviewers: List[
        Union[
            WebhookPullRequestMilestonedPropPullRequestPropRequestedReviewersItemsOneof0Type,
            None,
            WebhookPullRequestMilestonedPropPullRequestPropRequestedReviewersItemsOneof1Type,
        ]
    ]
    requested_teams: List[
        WebhookPullRequestMilestonedPropPullRequestPropRequestedTeamsItemsType
    ]
    review_comment_url: str
    review_comments: NotRequired[int]
    review_comments_url: str
    state: Literal["open", "closed"]
    statuses_url: str
    title: str
    updated_at: datetime
    url: str
    user: Union[WebhookPullRequestMilestonedPropPullRequestPropUserType, None]


class WebhookPullRequestMilestonedPropPullRequestPropLinksType(TypedDict):
    """WebhookPullRequestMilestonedPropPullRequestPropLinks"""

    comments: WebhookPullRequestMilestonedPropPullRequestPropLinksPropCommentsType
    commits: WebhookPullRequestMilestonedPropPullRequestPropLinksPropCommitsType
    html: WebhookPullRequestMilestonedPropPullRequestPropLinksPropHtmlType
    issue: WebhookPullRequestMilestonedPropPullRequestPropLinksPropIssueType
    review_comment: WebhookPullRequestMilestonedPropPullRequestPropLinksPropReviewCommentType
    review_comments: WebhookPullRequestMilestonedPropPullRequestPropLinksPropReviewCommentsType
    self_: WebhookPullRequestMilestonedPropPullRequestPropLinksPropSelfType
    statuses: WebhookPullRequestMilestonedPropPullRequestPropLinksPropStatusesType


class WebhookPullRequestMilestonedPropPullRequestPropLinksPropCommentsType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestMilestonedPropPullRequestPropLinksPropCommitsType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestMilestonedPropPullRequestPropLinksPropHtmlType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestMilestonedPropPullRequestPropLinksPropIssueType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestMilestonedPropPullRequestPropLinksPropReviewCommentType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestMilestonedPropPullRequestPropLinksPropReviewCommentsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestMilestonedPropPullRequestPropLinksPropSelfType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestMilestonedPropPullRequestPropLinksPropStatusesType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestMilestonedPropPullRequestPropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestMilestonedPropPullRequestPropAssigneesItemsType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestMilestonedPropPullRequestPropAutoMergePropEnabledByType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestMilestonedPropPullRequestPropAutoMergeType(TypedDict):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None]
    commit_title: Union[str, None]
    enabled_by: Union[
        WebhookPullRequestMilestonedPropPullRequestPropAutoMergePropEnabledByType, None
    ]
    merge_method: Literal["merge", "squash", "rebase"]


class WebhookPullRequestMilestonedPropPullRequestPropBaseType(TypedDict):
    """WebhookPullRequestMilestonedPropPullRequestPropBase"""

    label: str
    ref: str
    repo: WebhookPullRequestMilestonedPropPullRequestPropBasePropRepoType
    sha: str
    user: Union[WebhookPullRequestMilestonedPropPullRequestPropBasePropUserType, None]


class WebhookPullRequestMilestonedPropPullRequestPropBasePropRepoType(TypedDict):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestMilestonedPropPullRequestPropBasePropRepoPropLicenseType, None
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestMilestonedPropPullRequestPropBasePropRepoPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookPullRequestMilestonedPropPullRequestPropBasePropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestMilestonedPropPullRequestPropBasePropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestMilestonedPropPullRequestPropBasePropRepoPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestMilestonedPropPullRequestPropBasePropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestMilestonedPropPullRequestPropBasePropRepoPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestMilestonedPropPullRequestPropBasePropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestMilestonedPropPullRequestPropHeadType(TypedDict):
    """WebhookPullRequestMilestonedPropPullRequestPropHead"""

    label: str
    ref: str
    repo: WebhookPullRequestMilestonedPropPullRequestPropHeadPropRepoType
    sha: str
    user: Union[WebhookPullRequestMilestonedPropPullRequestPropHeadPropUserType, None]


class WebhookPullRequestMilestonedPropPullRequestPropHeadPropRepoType(TypedDict):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestMilestonedPropPullRequestPropHeadPropRepoPropLicenseType, None
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestMilestonedPropPullRequestPropHeadPropRepoPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookPullRequestMilestonedPropPullRequestPropHeadPropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestMilestonedPropPullRequestPropHeadPropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestMilestonedPropPullRequestPropHeadPropRepoPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestMilestonedPropPullRequestPropHeadPropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestMilestonedPropPullRequestPropHeadPropRepoPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestMilestonedPropPullRequestPropHeadPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestMilestonedPropPullRequestPropLabelsItemsType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookPullRequestMilestonedPropPullRequestPropMergedByType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestMilestonedPropPullRequestPropMilestonePropCreatorType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestMilestonedPropPullRequestPropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[
        WebhookPullRequestMilestonedPropPullRequestPropMilestonePropCreatorType, None
    ]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookPullRequestMilestonedPropPullRequestPropRequestedReviewersItemsOneof0Type(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestMilestonedPropPullRequestPropRequestedReviewersItemsOneof1Type(
    TypedDict
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: NotRequired[Union[str, None]]
    html_url: NotRequired[str]
    id: int
    members_url: NotRequired[str]
    name: str
    node_id: NotRequired[str]
    parent: NotRequired[
        Union[
            WebhookPullRequestMilestonedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType,
            None,
        ]
    ]
    permission: NotRequired[str]
    privacy: NotRequired[Literal["open", "closed", "secret"]]
    repositories_url: NotRequired[str]
    slug: NotRequired[str]
    url: NotRequired[str]


class WebhookPullRequestMilestonedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType(
    TypedDict
):
    """WebhookPullRequestMilestonedPropPullRequestPropRequestedReviewersItemsOneof1Prop
    Parent
    """

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestMilestonedPropPullRequestPropRequestedTeamsItemsType(TypedDict):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: NotRequired[Union[str, None]]
    html_url: NotRequired[str]
    id: int
    members_url: NotRequired[str]
    name: str
    node_id: NotRequired[str]
    parent: NotRequired[
        Union[
            WebhookPullRequestMilestonedPropPullRequestPropRequestedTeamsItemsPropParentType,
            None,
        ]
    ]
    permission: NotRequired[str]
    privacy: NotRequired[Literal["open", "closed", "secret"]]
    repositories_url: NotRequired[str]
    slug: NotRequired[str]
    url: NotRequired[str]


class WebhookPullRequestMilestonedPropPullRequestPropRequestedTeamsItemsPropParentType(
    TypedDict
):
    """WebhookPullRequestMilestonedPropPullRequestPropRequestedTeamsItemsPropParent"""

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestMilestonedPropPullRequestPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestOpenedType(TypedDict):
    """pull_request opened event"""

    action: Literal["opened"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    number: int
    organization: NotRequired[OrganizationSimpleWebhooksType]
    pull_request: WebhookPullRequestOpenedPropPullRequestType
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookPullRequestOpenedPropPullRequestType(TypedDict):
    """WebhookPullRequestOpenedPropPullRequest"""

    url: str
    id: int
    node_id: str
    html_url: str
    diff_url: str
    patch_url: str
    issue_url: str
    commits_url: str
    review_comments_url: str
    review_comment_url: str
    comments_url: str
    statuses_url: str
    number: int
    state: Literal["open", "closed"]
    locked: bool
    title: str
    user: SimpleUserType
    body: Union[str, None]
    labels: List[PullRequestPropLabelsItemsType]
    milestone: Union[None, MilestoneType]
    active_lock_reason: NotRequired[Union[str, None]]
    created_at: datetime
    updated_at: datetime
    closed_at: Union[datetime, None]
    merged_at: Union[datetime, None]
    merge_commit_sha: Union[str, None]
    assignee: Union[None, SimpleUserType]
    assignees: NotRequired[Union[List[SimpleUserType], None]]
    requested_reviewers: NotRequired[Union[List[SimpleUserType], None]]
    requested_teams: NotRequired[Union[List[TeamSimpleType], None]]
    head: PullRequestPropHeadType
    base: PullRequestPropBaseType
    links: PullRequestPropLinksType
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    auto_merge: Union[AutoMergeType, None]
    draft: NotRequired[bool]
    merged: bool
    mergeable: Union[bool, None]
    rebaseable: NotRequired[Union[bool, None]]
    mergeable_state: str
    merged_by: Union[None, SimpleUserType]
    comments: int
    review_comments: int
    maintainer_can_modify: bool
    commits: int
    additions: int
    deletions: int
    changed_files: int
    allow_auto_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    delete_branch_on_merge: NotRequired[bool]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    use_squash_pr_title_as_default: NotRequired[bool]


class WebhookPullRequestOpenedPropPullRequestAllof1Type(TypedDict):
    """WebhookPullRequestOpenedPropPullRequestAllof1"""

    allow_auto_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    delete_branch_on_merge: NotRequired[bool]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    use_squash_pr_title_as_default: NotRequired[bool]


class WebhookPullRequestReadyForReviewType(TypedDict):
    """pull_request ready_for_review event"""

    action: Literal["ready_for_review"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    number: int
    organization: NotRequired[OrganizationSimpleWebhooksType]
    pull_request: WebhookPullRequestReadyForReviewPropPullRequestType
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookPullRequestReadyForReviewPropPullRequestType(TypedDict):
    """WebhookPullRequestReadyForReviewPropPullRequest"""

    url: str
    id: int
    node_id: str
    html_url: str
    diff_url: str
    patch_url: str
    issue_url: str
    commits_url: str
    review_comments_url: str
    review_comment_url: str
    comments_url: str
    statuses_url: str
    number: int
    state: Literal["open", "closed"]
    locked: bool
    title: str
    user: SimpleUserType
    body: Union[str, None]
    labels: List[PullRequestPropLabelsItemsType]
    milestone: Union[None, MilestoneType]
    active_lock_reason: NotRequired[Union[str, None]]
    created_at: datetime
    updated_at: datetime
    closed_at: Union[datetime, None]
    merged_at: Union[datetime, None]
    merge_commit_sha: Union[str, None]
    assignee: Union[None, SimpleUserType]
    assignees: NotRequired[Union[List[SimpleUserType], None]]
    requested_reviewers: NotRequired[Union[List[SimpleUserType], None]]
    requested_teams: NotRequired[Union[List[TeamSimpleType], None]]
    head: PullRequestPropHeadType
    base: PullRequestPropBaseType
    links: PullRequestPropLinksType
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    auto_merge: Union[AutoMergeType, None]
    draft: NotRequired[bool]
    merged: bool
    mergeable: Union[bool, None]
    rebaseable: NotRequired[Union[bool, None]]
    mergeable_state: str
    merged_by: Union[None, SimpleUserType]
    comments: int
    review_comments: int
    maintainer_can_modify: bool
    commits: int
    additions: int
    deletions: int
    changed_files: int
    allow_auto_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    delete_branch_on_merge: NotRequired[bool]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    use_squash_pr_title_as_default: NotRequired[bool]


class WebhookPullRequestReadyForReviewPropPullRequestAllof1Type(TypedDict):
    """WebhookPullRequestReadyForReviewPropPullRequestAllof1"""

    allow_auto_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    delete_branch_on_merge: NotRequired[bool]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    use_squash_pr_title_as_default: NotRequired[bool]


class WebhookPullRequestReopenedType(TypedDict):
    """pull_request reopened event"""

    action: Literal["reopened"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    number: int
    organization: NotRequired[OrganizationSimpleWebhooksType]
    pull_request: WebhookPullRequestReopenedPropPullRequestType
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookPullRequestReopenedPropPullRequestType(TypedDict):
    """WebhookPullRequestReopenedPropPullRequest"""

    url: str
    id: int
    node_id: str
    html_url: str
    diff_url: str
    patch_url: str
    issue_url: str
    commits_url: str
    review_comments_url: str
    review_comment_url: str
    comments_url: str
    statuses_url: str
    number: int
    state: Literal["open", "closed"]
    locked: bool
    title: str
    user: SimpleUserType
    body: Union[str, None]
    labels: List[PullRequestPropLabelsItemsType]
    milestone: Union[None, MilestoneType]
    active_lock_reason: NotRequired[Union[str, None]]
    created_at: datetime
    updated_at: datetime
    closed_at: Union[datetime, None]
    merged_at: Union[datetime, None]
    merge_commit_sha: Union[str, None]
    assignee: Union[None, SimpleUserType]
    assignees: NotRequired[Union[List[SimpleUserType], None]]
    requested_reviewers: NotRequired[Union[List[SimpleUserType], None]]
    requested_teams: NotRequired[Union[List[TeamSimpleType], None]]
    head: PullRequestPropHeadType
    base: PullRequestPropBaseType
    links: PullRequestPropLinksType
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    auto_merge: Union[AutoMergeType, None]
    draft: NotRequired[bool]
    merged: bool
    mergeable: Union[bool, None]
    rebaseable: NotRequired[Union[bool, None]]
    mergeable_state: str
    merged_by: Union[None, SimpleUserType]
    comments: int
    review_comments: int
    maintainer_can_modify: bool
    commits: int
    additions: int
    deletions: int
    changed_files: int
    allow_auto_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    delete_branch_on_merge: NotRequired[bool]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    use_squash_pr_title_as_default: NotRequired[bool]


class WebhookPullRequestReopenedPropPullRequestAllof1Type(TypedDict):
    """WebhookPullRequestReopenedPropPullRequestAllof1"""

    allow_auto_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    delete_branch_on_merge: NotRequired[bool]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    use_squash_pr_title_as_default: NotRequired[bool]


class WebhookPullRequestReviewCommentCreatedType(TypedDict):
    """pull_request_review_comment created event"""

    action: Literal["created"]
    comment: WebhookPullRequestReviewCommentCreatedPropCommentType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    pull_request: WebhookPullRequestReviewCommentCreatedPropPullRequestType
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookPullRequestReviewCommentCreatedPropCommentType(TypedDict):
    """Pull Request Review Comment

    The [comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-
    for-a-pull-request) itself.
    """

    links: WebhookPullRequestReviewCommentCreatedPropCommentPropLinksType
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: str
    commit_id: str
    created_at: datetime
    diff_hunk: str
    html_url: str
    id: int
    in_reply_to_id: NotRequired[int]
    line: Union[int, None]
    node_id: str
    original_commit_id: str
    original_line: Union[int, None]
    original_position: int
    original_start_line: Union[int, None]
    path: str
    position: Union[int, None]
    pull_request_review_id: Union[int, None]
    pull_request_url: str
    reactions: WebhookPullRequestReviewCommentCreatedPropCommentPropReactionsType
    side: Literal["LEFT", "RIGHT"]
    start_line: Union[int, None]
    start_side: Union[None, Literal["LEFT", "RIGHT"]]
    subject_type: NotRequired[Literal["line", "file"]]
    updated_at: datetime
    url: str
    user: Union[WebhookPullRequestReviewCommentCreatedPropCommentPropUserType, None]


class WebhookPullRequestReviewCommentCreatedPropCommentPropLinksType(TypedDict):
    """WebhookPullRequestReviewCommentCreatedPropCommentPropLinks"""

    html: WebhookPullRequestReviewCommentCreatedPropCommentPropLinksPropHtmlType
    pull_request: WebhookPullRequestReviewCommentCreatedPropCommentPropLinksPropPullRequestType
    self_: WebhookPullRequestReviewCommentCreatedPropCommentPropLinksPropSelfType


class WebhookPullRequestReviewCommentCreatedPropCommentPropLinksPropHtmlType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestReviewCommentCreatedPropCommentPropLinksPropPullRequestType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewCommentCreatedPropCommentPropLinksPropSelfType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestReviewCommentCreatedPropCommentPropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookPullRequestReviewCommentCreatedPropCommentPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewCommentCreatedPropPullRequestType(TypedDict):
    """WebhookPullRequestReviewCommentCreatedPropPullRequest"""

    links: WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksType
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    assignee: Union[
        WebhookPullRequestReviewCommentCreatedPropPullRequestPropAssigneeType, None
    ]
    assignees: List[
        Union[
            WebhookPullRequestReviewCommentCreatedPropPullRequestPropAssigneesItemsType,
            None,
        ]
    ]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    auto_merge: NotRequired[
        Union[
            WebhookPullRequestReviewCommentCreatedPropPullRequestPropAutoMergeType, None
        ]
    ]
    base: WebhookPullRequestReviewCommentCreatedPropPullRequestPropBaseType
    body: Union[str, None]
    closed_at: Union[str, None]
    comments_url: str
    commits_url: str
    created_at: str
    diff_url: str
    draft: NotRequired[bool]
    head: WebhookPullRequestReviewCommentCreatedPropPullRequestPropHeadType
    html_url: str
    id: int
    issue_url: str
    labels: List[
        WebhookPullRequestReviewCommentCreatedPropPullRequestPropLabelsItemsType
    ]
    locked: bool
    merge_commit_sha: Union[str, None]
    merged_at: Union[str, None]
    milestone: Union[
        WebhookPullRequestReviewCommentCreatedPropPullRequestPropMilestoneType, None
    ]
    node_id: str
    number: int
    patch_url: str
    requested_reviewers: List[
        Union[
            WebhookPullRequestReviewCommentCreatedPropPullRequestPropRequestedReviewersItemsOneof0Type,
            None,
            WebhookPullRequestReviewCommentCreatedPropPullRequestPropRequestedReviewersItemsOneof1Type,
        ]
    ]
    requested_teams: List[
        WebhookPullRequestReviewCommentCreatedPropPullRequestPropRequestedTeamsItemsType
    ]
    review_comment_url: str
    review_comments_url: str
    state: Literal["open", "closed"]
    statuses_url: str
    title: str
    updated_at: str
    url: str
    user: Union[WebhookPullRequestReviewCommentCreatedPropPullRequestPropUserType, None]


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksType(TypedDict):
    """WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinks"""

    comments: WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropCommentsType
    commits: WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropCommitsType
    html: WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropHtmlType
    issue: WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropIssueType
    review_comment: WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropReviewCommentType
    review_comments: WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropReviewCommentsType
    self_: WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropSelfType
    statuses: WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropStatusesType


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropCommentsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropCommitsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropHtmlType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropIssueType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropReviewCommentType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropReviewCommentsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropSelfType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropStatusesType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropAssigneesItemsType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropAutoMergePropEnabledByType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropAutoMergeType(TypedDict):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None]
    commit_title: Union[str, None]
    enabled_by: Union[
        WebhookPullRequestReviewCommentCreatedPropPullRequestPropAutoMergePropEnabledByType,
        None,
    ]
    merge_method: Literal["merge", "squash", "rebase"]


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropBaseType(TypedDict):
    """WebhookPullRequestReviewCommentCreatedPropPullRequestPropBase"""

    label: str
    ref: str
    repo: WebhookPullRequestReviewCommentCreatedPropPullRequestPropBasePropRepoType
    sha: str
    user: Union[
        WebhookPullRequestReviewCommentCreatedPropPullRequestPropBasePropUserType, None
    ]


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropBasePropRepoType(
    TypedDict
):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestReviewCommentCreatedPropPullRequestPropBasePropRepoPropLicenseType,
        None,
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestReviewCommentCreatedPropPullRequestPropBasePropRepoPropOwnerType,
        None,
    ]
    permissions: NotRequired[
        WebhookPullRequestReviewCommentCreatedPropPullRequestPropBasePropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropBasePropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropBasePropRepoPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropBasePropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestReviewCommentCreatedPropPullRequestPropBasePropRepoPropPermiss
    ions
    """

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropBasePropUserType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropHeadType(TypedDict):
    """WebhookPullRequestReviewCommentCreatedPropPullRequestPropHead"""

    label: str
    ref: str
    repo: Union[
        WebhookPullRequestReviewCommentCreatedPropPullRequestPropHeadPropRepoType, None
    ]
    sha: str
    user: Union[
        WebhookPullRequestReviewCommentCreatedPropPullRequestPropHeadPropUserType, None
    ]


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropHeadPropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropHeadPropRepoPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropHeadPropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestReviewCommentCreatedPropPullRequestPropHeadPropRepoPropPermiss
    ions
    """

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropHeadPropRepoType(
    TypedDict
):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: NotRequired[bool]
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestReviewCommentCreatedPropPullRequestPropHeadPropRepoPropLicenseType,
        None,
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestReviewCommentCreatedPropPullRequestPropHeadPropRepoPropOwnerType,
        None,
    ]
    permissions: NotRequired[
        WebhookPullRequestReviewCommentCreatedPropPullRequestPropHeadPropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropHeadPropUserType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropLabelsItemsType(
    TypedDict
):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropMilestonePropCreatorType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[
        WebhookPullRequestReviewCommentCreatedPropPullRequestPropMilestonePropCreatorType,
        None,
    ]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropRequestedReviewersItemsOneof0Type(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropRequestedReviewersItemsOneof1Type(
    TypedDict
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    parent: NotRequired[
        Union[
            WebhookPullRequestReviewCommentCreatedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType,
            None,
        ]
    ]
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType(
    TypedDict
):
    """WebhookPullRequestReviewCommentCreatedPropPullRequestPropRequestedReviewersItems
    Oneof1PropParent
    """

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropRequestedTeamsItemsType(
    TypedDict
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: NotRequired[Union[str, None]]
    html_url: NotRequired[str]
    id: int
    members_url: NotRequired[str]
    name: str
    node_id: NotRequired[str]
    parent: NotRequired[
        Union[
            WebhookPullRequestReviewCommentCreatedPropPullRequestPropRequestedTeamsItemsPropParentType,
            None,
        ]
    ]
    permission: NotRequired[str]
    privacy: NotRequired[Literal["open", "closed", "secret"]]
    repositories_url: NotRequired[str]
    slug: NotRequired[str]
    url: NotRequired[str]


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropRequestedTeamsItemsPropParentType(
    TypedDict
):
    """WebhookPullRequestReviewCommentCreatedPropPullRequestPropRequestedTeamsItemsProp
    Parent
    """

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestReviewCommentCreatedPropPullRequestPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestReviewCommentDeletedType(TypedDict):
    """pull_request_review_comment deleted event"""

    action: Literal["deleted"]
    comment: WebhookPullRequestReviewCommentDeletedPropCommentType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    pull_request: WebhookPullRequestReviewCommentDeletedPropPullRequestType
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookPullRequestReviewCommentDeletedPropCommentType(TypedDict):
    """Pull Request Review Comment

    The [comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-
    for-a-pull-request) itself.
    """

    links: WebhookPullRequestReviewCommentDeletedPropCommentPropLinksType
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: str
    commit_id: str
    created_at: datetime
    diff_hunk: str
    html_url: str
    id: int
    in_reply_to_id: NotRequired[int]
    line: Union[int, None]
    node_id: str
    original_commit_id: str
    original_line: int
    original_position: int
    original_start_line: Union[int, None]
    path: str
    position: Union[int, None]
    pull_request_review_id: Union[int, None]
    pull_request_url: str
    reactions: WebhookPullRequestReviewCommentDeletedPropCommentPropReactionsType
    side: Literal["LEFT", "RIGHT"]
    start_line: Union[int, None]
    start_side: Union[None, Literal["LEFT", "RIGHT"]]
    subject_type: NotRequired[Literal["line", "file"]]
    updated_at: datetime
    url: str
    user: Union[WebhookPullRequestReviewCommentDeletedPropCommentPropUserType, None]


class WebhookPullRequestReviewCommentDeletedPropCommentPropLinksType(TypedDict):
    """WebhookPullRequestReviewCommentDeletedPropCommentPropLinks"""

    html: WebhookPullRequestReviewCommentDeletedPropCommentPropLinksPropHtmlType
    pull_request: WebhookPullRequestReviewCommentDeletedPropCommentPropLinksPropPullRequestType
    self_: WebhookPullRequestReviewCommentDeletedPropCommentPropLinksPropSelfType


class WebhookPullRequestReviewCommentDeletedPropCommentPropLinksPropHtmlType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestReviewCommentDeletedPropCommentPropLinksPropPullRequestType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewCommentDeletedPropCommentPropLinksPropSelfType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestReviewCommentDeletedPropCommentPropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookPullRequestReviewCommentDeletedPropCommentPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewCommentDeletedPropPullRequestType(TypedDict):
    """WebhookPullRequestReviewCommentDeletedPropPullRequest"""

    links: WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksType
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    assignee: Union[
        WebhookPullRequestReviewCommentDeletedPropPullRequestPropAssigneeType, None
    ]
    assignees: List[
        Union[
            WebhookPullRequestReviewCommentDeletedPropPullRequestPropAssigneesItemsType,
            None,
        ]
    ]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    auto_merge: NotRequired[
        Union[
            WebhookPullRequestReviewCommentDeletedPropPullRequestPropAutoMergeType, None
        ]
    ]
    base: WebhookPullRequestReviewCommentDeletedPropPullRequestPropBaseType
    body: Union[str, None]
    closed_at: Union[str, None]
    comments_url: str
    commits_url: str
    created_at: str
    diff_url: str
    draft: NotRequired[bool]
    head: WebhookPullRequestReviewCommentDeletedPropPullRequestPropHeadType
    html_url: str
    id: int
    issue_url: str
    labels: List[
        WebhookPullRequestReviewCommentDeletedPropPullRequestPropLabelsItemsType
    ]
    locked: bool
    merge_commit_sha: Union[str, None]
    merged_at: Union[str, None]
    milestone: Union[
        WebhookPullRequestReviewCommentDeletedPropPullRequestPropMilestoneType, None
    ]
    node_id: str
    number: int
    patch_url: str
    requested_reviewers: List[
        Union[
            WebhookPullRequestReviewCommentDeletedPropPullRequestPropRequestedReviewersItemsOneof0Type,
            None,
            WebhookPullRequestReviewCommentDeletedPropPullRequestPropRequestedReviewersItemsOneof1Type,
        ]
    ]
    requested_teams: List[
        WebhookPullRequestReviewCommentDeletedPropPullRequestPropRequestedTeamsItemsType
    ]
    review_comment_url: str
    review_comments_url: str
    state: Literal["open", "closed"]
    statuses_url: str
    title: str
    updated_at: str
    url: str
    user: Union[WebhookPullRequestReviewCommentDeletedPropPullRequestPropUserType, None]


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksType(TypedDict):
    """WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinks"""

    comments: WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropCommentsType
    commits: WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropCommitsType
    html: WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropHtmlType
    issue: WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropIssueType
    review_comment: WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropReviewCommentType
    review_comments: WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropReviewCommentsType
    self_: WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropSelfType
    statuses: WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropStatusesType


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropCommentsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropCommitsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropHtmlType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropIssueType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropReviewCommentType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropReviewCommentsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropSelfType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropStatusesType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropAssigneesItemsType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropAutoMergePropEnabledByType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropAutoMergeType(TypedDict):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None]
    commit_title: Union[str, None]
    enabled_by: Union[
        WebhookPullRequestReviewCommentDeletedPropPullRequestPropAutoMergePropEnabledByType,
        None,
    ]
    merge_method: Literal["merge", "squash", "rebase"]


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropBaseType(TypedDict):
    """WebhookPullRequestReviewCommentDeletedPropPullRequestPropBase"""

    label: str
    ref: str
    repo: WebhookPullRequestReviewCommentDeletedPropPullRequestPropBasePropRepoType
    sha: str
    user: Union[
        WebhookPullRequestReviewCommentDeletedPropPullRequestPropBasePropUserType, None
    ]


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropBasePropRepoType(
    TypedDict
):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestReviewCommentDeletedPropPullRequestPropBasePropRepoPropLicenseType,
        None,
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestReviewCommentDeletedPropPullRequestPropBasePropRepoPropOwnerType,
        None,
    ]
    permissions: NotRequired[
        WebhookPullRequestReviewCommentDeletedPropPullRequestPropBasePropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropBasePropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropBasePropRepoPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropBasePropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestReviewCommentDeletedPropPullRequestPropBasePropRepoPropPermiss
    ions
    """

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropBasePropUserType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropHeadType(TypedDict):
    """WebhookPullRequestReviewCommentDeletedPropPullRequestPropHead"""

    label: str
    ref: str
    repo: Union[
        WebhookPullRequestReviewCommentDeletedPropPullRequestPropHeadPropRepoType, None
    ]
    sha: str
    user: Union[
        WebhookPullRequestReviewCommentDeletedPropPullRequestPropHeadPropUserType, None
    ]


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropHeadPropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropHeadPropRepoPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropHeadPropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestReviewCommentDeletedPropPullRequestPropHeadPropRepoPropPermiss
    ions
    """

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropHeadPropRepoType(
    TypedDict
):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestReviewCommentDeletedPropPullRequestPropHeadPropRepoPropLicenseType,
        None,
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestReviewCommentDeletedPropPullRequestPropHeadPropRepoPropOwnerType,
        None,
    ]
    permissions: NotRequired[
        WebhookPullRequestReviewCommentDeletedPropPullRequestPropHeadPropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropHeadPropUserType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropLabelsItemsType(
    TypedDict
):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropMilestonePropCreatorType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[
        WebhookPullRequestReviewCommentDeletedPropPullRequestPropMilestonePropCreatorType,
        None,
    ]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropRequestedReviewersItemsOneof0Type(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropRequestedReviewersItemsOneof1Type(
    TypedDict
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: NotRequired[Union[str, None]]
    html_url: NotRequired[str]
    id: int
    members_url: NotRequired[str]
    name: str
    node_id: NotRequired[str]
    parent: NotRequired[
        Union[
            WebhookPullRequestReviewCommentDeletedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType,
            None,
        ]
    ]
    permission: NotRequired[str]
    privacy: NotRequired[Literal["open", "closed", "secret"]]
    repositories_url: NotRequired[str]
    slug: NotRequired[str]
    url: NotRequired[str]


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType(
    TypedDict
):
    """WebhookPullRequestReviewCommentDeletedPropPullRequestPropRequestedReviewersItems
    Oneof1PropParent
    """

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropRequestedTeamsItemsType(
    TypedDict
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: NotRequired[Union[str, None]]
    html_url: NotRequired[str]
    id: int
    members_url: NotRequired[str]
    name: str
    node_id: NotRequired[str]
    parent: NotRequired[
        Union[
            WebhookPullRequestReviewCommentDeletedPropPullRequestPropRequestedTeamsItemsPropParentType,
            None,
        ]
    ]
    permission: NotRequired[str]
    privacy: NotRequired[Literal["open", "closed", "secret"]]
    repositories_url: NotRequired[str]
    slug: NotRequired[str]
    url: NotRequired[str]


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropRequestedTeamsItemsPropParentType(
    TypedDict
):
    """WebhookPullRequestReviewCommentDeletedPropPullRequestPropRequestedTeamsItemsProp
    Parent
    """

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestReviewCommentDeletedPropPullRequestPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestReviewCommentEditedType(TypedDict):
    """pull_request_review_comment edited event"""

    action: Literal["edited"]
    changes: WebhookPullRequestReviewCommentEditedPropChangesType
    comment: WebhookPullRequestReviewCommentEditedPropCommentType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    pull_request: WebhookPullRequestReviewCommentEditedPropPullRequestType
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookPullRequestReviewCommentEditedPropChangesType(TypedDict):
    """WebhookPullRequestReviewCommentEditedPropChanges

    The changes to the comment.
    """

    body: NotRequired[WebhookPullRequestReviewCommentEditedPropChangesPropBodyType]


class WebhookPullRequestReviewCommentEditedPropChangesPropBodyType(TypedDict):
    """WebhookPullRequestReviewCommentEditedPropChangesPropBody"""

    from_: str


class WebhookPullRequestReviewCommentEditedPropCommentType(TypedDict):
    """Pull Request Review Comment

    The [comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-
    for-a-pull-request) itself.
    """

    links: WebhookPullRequestReviewCommentEditedPropCommentPropLinksType
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: str
    commit_id: str
    created_at: datetime
    diff_hunk: str
    html_url: str
    id: int
    in_reply_to_id: NotRequired[int]
    line: Union[int, None]
    node_id: str
    original_commit_id: str
    original_line: int
    original_position: int
    original_start_line: Union[int, None]
    path: str
    position: Union[int, None]
    pull_request_review_id: Union[int, None]
    pull_request_url: str
    reactions: WebhookPullRequestReviewCommentEditedPropCommentPropReactionsType
    side: Literal["LEFT", "RIGHT"]
    start_line: Union[int, None]
    start_side: Union[None, Literal["LEFT", "RIGHT"]]
    subject_type: NotRequired[Literal["line", "file"]]
    updated_at: datetime
    url: str
    user: Union[WebhookPullRequestReviewCommentEditedPropCommentPropUserType, None]


class WebhookPullRequestReviewCommentEditedPropCommentPropLinksType(TypedDict):
    """WebhookPullRequestReviewCommentEditedPropCommentPropLinks"""

    html: WebhookPullRequestReviewCommentEditedPropCommentPropLinksPropHtmlType
    pull_request: WebhookPullRequestReviewCommentEditedPropCommentPropLinksPropPullRequestType
    self_: WebhookPullRequestReviewCommentEditedPropCommentPropLinksPropSelfType


class WebhookPullRequestReviewCommentEditedPropCommentPropLinksPropHtmlType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestReviewCommentEditedPropCommentPropLinksPropPullRequestType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewCommentEditedPropCommentPropLinksPropSelfType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestReviewCommentEditedPropCommentPropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookPullRequestReviewCommentEditedPropCommentPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewCommentEditedPropPullRequestType(TypedDict):
    """WebhookPullRequestReviewCommentEditedPropPullRequest"""

    links: WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksType
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    assignee: Union[
        WebhookPullRequestReviewCommentEditedPropPullRequestPropAssigneeType, None
    ]
    assignees: List[
        Union[
            WebhookPullRequestReviewCommentEditedPropPullRequestPropAssigneesItemsType,
            None,
        ]
    ]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    auto_merge: NotRequired[
        Union[
            WebhookPullRequestReviewCommentEditedPropPullRequestPropAutoMergeType, None
        ]
    ]
    base: WebhookPullRequestReviewCommentEditedPropPullRequestPropBaseType
    body: Union[str, None]
    closed_at: Union[str, None]
    comments_url: str
    commits_url: str
    created_at: str
    diff_url: str
    draft: NotRequired[bool]
    head: WebhookPullRequestReviewCommentEditedPropPullRequestPropHeadType
    html_url: str
    id: int
    issue_url: str
    labels: List[
        WebhookPullRequestReviewCommentEditedPropPullRequestPropLabelsItemsType
    ]
    locked: bool
    merge_commit_sha: Union[str, None]
    merged_at: Union[str, None]
    milestone: Union[
        WebhookPullRequestReviewCommentEditedPropPullRequestPropMilestoneType, None
    ]
    node_id: str
    number: int
    patch_url: str
    requested_reviewers: List[
        Union[
            WebhookPullRequestReviewCommentEditedPropPullRequestPropRequestedReviewersItemsOneof0Type,
            None,
            WebhookPullRequestReviewCommentEditedPropPullRequestPropRequestedReviewersItemsOneof1Type,
        ]
    ]
    requested_teams: List[
        WebhookPullRequestReviewCommentEditedPropPullRequestPropRequestedTeamsItemsType
    ]
    review_comment_url: str
    review_comments_url: str
    state: Literal["open", "closed"]
    statuses_url: str
    title: str
    updated_at: str
    url: str
    user: Union[WebhookPullRequestReviewCommentEditedPropPullRequestPropUserType, None]


class WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksType(TypedDict):
    """WebhookPullRequestReviewCommentEditedPropPullRequestPropLinks"""

    comments: WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropCommentsType
    commits: WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropCommitsType
    html: WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropHtmlType
    issue: WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropIssueType
    review_comment: WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropReviewCommentType
    review_comments: WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropReviewCommentsType
    self_: WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropSelfType
    statuses: WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropStatusesType


class WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropCommentsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropCommitsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropHtmlType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropIssueType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropReviewCommentType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropReviewCommentsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropSelfType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropStatusesType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewCommentEditedPropPullRequestPropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewCommentEditedPropPullRequestPropAssigneesItemsType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewCommentEditedPropPullRequestPropAutoMergePropEnabledByType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewCommentEditedPropPullRequestPropAutoMergeType(TypedDict):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None]
    commit_title: Union[str, None]
    enabled_by: Union[
        WebhookPullRequestReviewCommentEditedPropPullRequestPropAutoMergePropEnabledByType,
        None,
    ]
    merge_method: Literal["merge", "squash", "rebase"]


class WebhookPullRequestReviewCommentEditedPropPullRequestPropBaseType(TypedDict):
    """WebhookPullRequestReviewCommentEditedPropPullRequestPropBase"""

    label: str
    ref: str
    repo: WebhookPullRequestReviewCommentEditedPropPullRequestPropBasePropRepoType
    sha: str
    user: Union[
        WebhookPullRequestReviewCommentEditedPropPullRequestPropBasePropUserType, None
    ]


class WebhookPullRequestReviewCommentEditedPropPullRequestPropBasePropRepoType(
    TypedDict
):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestReviewCommentEditedPropPullRequestPropBasePropRepoPropLicenseType,
        None,
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestReviewCommentEditedPropPullRequestPropBasePropRepoPropOwnerType,
        None,
    ]
    permissions: NotRequired[
        WebhookPullRequestReviewCommentEditedPropPullRequestPropBasePropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestReviewCommentEditedPropPullRequestPropBasePropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestReviewCommentEditedPropPullRequestPropBasePropRepoPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewCommentEditedPropPullRequestPropBasePropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestReviewCommentEditedPropPullRequestPropBasePropRepoPropPermissi
    ons
    """

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestReviewCommentEditedPropPullRequestPropBasePropUserType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewCommentEditedPropPullRequestPropHeadType(TypedDict):
    """WebhookPullRequestReviewCommentEditedPropPullRequestPropHead"""

    label: str
    ref: str
    repo: Union[
        WebhookPullRequestReviewCommentEditedPropPullRequestPropHeadPropRepoType, None
    ]
    sha: str
    user: Union[
        WebhookPullRequestReviewCommentEditedPropPullRequestPropHeadPropUserType, None
    ]


class WebhookPullRequestReviewCommentEditedPropPullRequestPropHeadPropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestReviewCommentEditedPropPullRequestPropHeadPropRepoPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewCommentEditedPropPullRequestPropHeadPropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestReviewCommentEditedPropPullRequestPropHeadPropRepoPropPermissi
    ons
    """

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestReviewCommentEditedPropPullRequestPropHeadPropRepoType(
    TypedDict
):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestReviewCommentEditedPropPullRequestPropHeadPropRepoPropLicenseType,
        None,
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestReviewCommentEditedPropPullRequestPropHeadPropRepoPropOwnerType,
        None,
    ]
    permissions: NotRequired[
        WebhookPullRequestReviewCommentEditedPropPullRequestPropHeadPropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestReviewCommentEditedPropPullRequestPropHeadPropUserType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewCommentEditedPropPullRequestPropLabelsItemsType(
    TypedDict
):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookPullRequestReviewCommentEditedPropPullRequestPropMilestonePropCreatorType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestReviewCommentEditedPropPullRequestPropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[
        WebhookPullRequestReviewCommentEditedPropPullRequestPropMilestonePropCreatorType,
        None,
    ]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookPullRequestReviewCommentEditedPropPullRequestPropRequestedReviewersItemsOneof0Type(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewCommentEditedPropPullRequestPropRequestedReviewersItemsOneof1Type(
    TypedDict
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: NotRequired[Union[str, None]]
    html_url: NotRequired[str]
    id: int
    members_url: NotRequired[str]
    name: str
    node_id: NotRequired[str]
    parent: NotRequired[
        Union[
            WebhookPullRequestReviewCommentEditedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType,
            None,
        ]
    ]
    permission: NotRequired[str]
    privacy: NotRequired[Literal["open", "closed", "secret"]]
    repositories_url: NotRequired[str]
    slug: NotRequired[str]
    url: NotRequired[str]


class WebhookPullRequestReviewCommentEditedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType(
    TypedDict
):
    """WebhookPullRequestReviewCommentEditedPropPullRequestPropRequestedReviewersItemsO
    neof1PropParent
    """

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestReviewCommentEditedPropPullRequestPropRequestedTeamsItemsType(
    TypedDict
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: NotRequired[Union[str, None]]
    html_url: NotRequired[str]
    id: int
    members_url: NotRequired[str]
    name: str
    node_id: NotRequired[str]
    parent: NotRequired[
        Union[
            WebhookPullRequestReviewCommentEditedPropPullRequestPropRequestedTeamsItemsPropParentType,
            None,
        ]
    ]
    permission: NotRequired[str]
    privacy: NotRequired[Literal["open", "closed", "secret"]]
    repositories_url: NotRequired[str]
    slug: NotRequired[str]
    url: NotRequired[str]


class WebhookPullRequestReviewCommentEditedPropPullRequestPropRequestedTeamsItemsPropParentType(
    TypedDict
):
    """WebhookPullRequestReviewCommentEditedPropPullRequestPropRequestedTeamsItemsPropP
    arent
    """

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestReviewCommentEditedPropPullRequestPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestReviewDismissedType(TypedDict):
    """pull_request_review dismissed event"""

    action: Literal["dismissed"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    pull_request: WebhookPullRequestReviewDismissedPropPullRequestType
    repository: RepositoryWebhooksType
    review: WebhookPullRequestReviewDismissedPropReviewType
    sender: SimpleUserWebhooksType


class WebhookPullRequestReviewDismissedPropPullRequestType(TypedDict):
    """Simple Pull Request"""

    links: WebhookPullRequestReviewDismissedPropPullRequestPropLinksType
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    assignee: Union[
        WebhookPullRequestReviewDismissedPropPullRequestPropAssigneeType, None
    ]
    assignees: List[
        Union[
            WebhookPullRequestReviewDismissedPropPullRequestPropAssigneesItemsType, None
        ]
    ]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    auto_merge: Union[
        WebhookPullRequestReviewDismissedPropPullRequestPropAutoMergeType, None
    ]
    base: WebhookPullRequestReviewDismissedPropPullRequestPropBaseType
    body: Union[str, None]
    closed_at: Union[str, None]
    comments_url: str
    commits_url: str
    created_at: str
    diff_url: str
    draft: bool
    head: WebhookPullRequestReviewDismissedPropPullRequestPropHeadType
    html_url: str
    id: int
    issue_url: str
    labels: List[WebhookPullRequestReviewDismissedPropPullRequestPropLabelsItemsType]
    locked: bool
    merge_commit_sha: Union[str, None]
    merged_at: Union[str, None]
    milestone: Union[
        WebhookPullRequestReviewDismissedPropPullRequestPropMilestoneType, None
    ]
    node_id: str
    number: int
    patch_url: str
    requested_reviewers: List[
        Union[
            WebhookPullRequestReviewDismissedPropPullRequestPropRequestedReviewersItemsOneof0Type,
            None,
            WebhookPullRequestReviewDismissedPropPullRequestPropRequestedReviewersItemsOneof1Type,
        ]
    ]
    requested_teams: List[
        WebhookPullRequestReviewDismissedPropPullRequestPropRequestedTeamsItemsType
    ]
    review_comment_url: str
    review_comments_url: str
    state: Literal["open", "closed"]
    statuses_url: str
    title: str
    updated_at: str
    url: str
    user: Union[WebhookPullRequestReviewDismissedPropPullRequestPropUserType, None]


class WebhookPullRequestReviewDismissedPropPullRequestPropLinksType(TypedDict):
    """WebhookPullRequestReviewDismissedPropPullRequestPropLinks"""

    comments: WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropCommentsType
    commits: WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropCommitsType
    html: WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropHtmlType
    issue: WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropIssueType
    review_comment: WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropReviewCommentType
    review_comments: WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropReviewCommentsType
    self_: WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropSelfType
    statuses: WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropStatusesType


class WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropCommentsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropCommitsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropHtmlType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropIssueType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropReviewCommentType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropReviewCommentsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropSelfType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropStatusesType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewDismissedPropPullRequestPropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestReviewDismissedPropPullRequestPropAssigneesItemsType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestReviewDismissedPropPullRequestPropAutoMergePropEnabledByType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewDismissedPropPullRequestPropAutoMergeType(TypedDict):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None]
    commit_title: Union[str, None]
    enabled_by: Union[
        WebhookPullRequestReviewDismissedPropPullRequestPropAutoMergePropEnabledByType,
        None,
    ]
    merge_method: Literal["merge", "squash", "rebase"]


class WebhookPullRequestReviewDismissedPropPullRequestPropBaseType(TypedDict):
    """WebhookPullRequestReviewDismissedPropPullRequestPropBase"""

    label: str
    ref: str
    repo: WebhookPullRequestReviewDismissedPropPullRequestPropBasePropRepoType
    sha: str
    user: Union[
        WebhookPullRequestReviewDismissedPropPullRequestPropBasePropUserType, None
    ]


class WebhookPullRequestReviewDismissedPropPullRequestPropBasePropRepoType(TypedDict):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestReviewDismissedPropPullRequestPropBasePropRepoPropLicenseType,
        None,
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestReviewDismissedPropPullRequestPropBasePropRepoPropOwnerType,
        None,
    ]
    permissions: NotRequired[
        WebhookPullRequestReviewDismissedPropPullRequestPropBasePropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestReviewDismissedPropPullRequestPropBasePropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestReviewDismissedPropPullRequestPropBasePropRepoPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewDismissedPropPullRequestPropBasePropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestReviewDismissedPropPullRequestPropBasePropRepoPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestReviewDismissedPropPullRequestPropBasePropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewDismissedPropPullRequestPropHeadType(TypedDict):
    """WebhookPullRequestReviewDismissedPropPullRequestPropHead"""

    label: str
    ref: str
    repo: Union[
        WebhookPullRequestReviewDismissedPropPullRequestPropHeadPropRepoType, None
    ]
    sha: str
    user: Union[
        WebhookPullRequestReviewDismissedPropPullRequestPropHeadPropUserType, None
    ]


class WebhookPullRequestReviewDismissedPropPullRequestPropHeadPropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestReviewDismissedPropPullRequestPropHeadPropRepoPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewDismissedPropPullRequestPropHeadPropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestReviewDismissedPropPullRequestPropHeadPropRepoPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestReviewDismissedPropPullRequestPropHeadPropRepoType(TypedDict):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestReviewDismissedPropPullRequestPropHeadPropRepoPropLicenseType,
        None,
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestReviewDismissedPropPullRequestPropHeadPropRepoPropOwnerType,
        None,
    ]
    permissions: NotRequired[
        WebhookPullRequestReviewDismissedPropPullRequestPropHeadPropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestReviewDismissedPropPullRequestPropHeadPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewDismissedPropPullRequestPropLabelsItemsType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookPullRequestReviewDismissedPropPullRequestPropMilestonePropCreatorType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewDismissedPropPullRequestPropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[
        WebhookPullRequestReviewDismissedPropPullRequestPropMilestonePropCreatorType,
        None,
    ]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookPullRequestReviewDismissedPropPullRequestPropRequestedReviewersItemsOneof0Type(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestReviewDismissedPropPullRequestPropRequestedReviewersItemsOneof1Type(
    TypedDict
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    parent: NotRequired[
        Union[
            WebhookPullRequestReviewDismissedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType,
            None,
        ]
    ]
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestReviewDismissedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType(
    TypedDict
):
    """WebhookPullRequestReviewDismissedPropPullRequestPropRequestedReviewersItemsOneof
    1PropParent
    """

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestReviewDismissedPropPullRequestPropRequestedTeamsItemsType(
    TypedDict
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: NotRequired[Union[str, None]]
    html_url: NotRequired[str]
    id: int
    members_url: NotRequired[str]
    name: str
    node_id: NotRequired[str]
    parent: NotRequired[
        Union[
            WebhookPullRequestReviewDismissedPropPullRequestPropRequestedTeamsItemsPropParentType,
            None,
        ]
    ]
    permission: NotRequired[str]
    privacy: NotRequired[Literal["open", "closed", "secret"]]
    repositories_url: NotRequired[str]
    slug: NotRequired[str]
    url: NotRequired[str]


class WebhookPullRequestReviewDismissedPropPullRequestPropRequestedTeamsItemsPropParentType(
    TypedDict
):
    """WebhookPullRequestReviewDismissedPropPullRequestPropRequestedTeamsItemsPropParen
    t
    """

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestReviewDismissedPropPullRequestPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestReviewDismissedPropReviewType(TypedDict):
    """WebhookPullRequestReviewDismissedPropReview

    The review that was affected.
    """

    links: WebhookPullRequestReviewDismissedPropReviewPropLinksType
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: Union[str, None]
    commit_id: str
    html_url: str
    id: int
    node_id: str
    pull_request_url: str
    state: Literal["dismissed", "approved", "changes_requested"]
    submitted_at: datetime
    user: Union[WebhookPullRequestReviewDismissedPropReviewPropUserType, None]


class WebhookPullRequestReviewDismissedPropReviewPropLinksType(TypedDict):
    """WebhookPullRequestReviewDismissedPropReviewPropLinks"""

    html: WebhookPullRequestReviewDismissedPropReviewPropLinksPropHtmlType
    pull_request: WebhookPullRequestReviewDismissedPropReviewPropLinksPropPullRequestType


class WebhookPullRequestReviewDismissedPropReviewPropLinksPropHtmlType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestReviewDismissedPropReviewPropLinksPropPullRequestType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewDismissedPropReviewPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestReviewEditedType(TypedDict):
    """pull_request_review edited event"""

    action: Literal["edited"]
    changes: WebhookPullRequestReviewEditedPropChangesType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    pull_request: WebhookPullRequestReviewEditedPropPullRequestType
    repository: RepositoryWebhooksType
    review: WebhookPullRequestReviewEditedPropReviewType
    sender: SimpleUserWebhooksType


class WebhookPullRequestReviewEditedPropChangesType(TypedDict):
    """WebhookPullRequestReviewEditedPropChanges"""

    body: NotRequired[WebhookPullRequestReviewEditedPropChangesPropBodyType]


class WebhookPullRequestReviewEditedPropChangesPropBodyType(TypedDict):
    """WebhookPullRequestReviewEditedPropChangesPropBody"""

    from_: str


class WebhookPullRequestReviewEditedPropPullRequestType(TypedDict):
    """Simple Pull Request"""

    links: WebhookPullRequestReviewEditedPropPullRequestPropLinksType
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    assignee: Union[WebhookPullRequestReviewEditedPropPullRequestPropAssigneeType, None]
    assignees: List[
        Union[WebhookPullRequestReviewEditedPropPullRequestPropAssigneesItemsType, None]
    ]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    auto_merge: Union[
        WebhookPullRequestReviewEditedPropPullRequestPropAutoMergeType, None
    ]
    base: WebhookPullRequestReviewEditedPropPullRequestPropBaseType
    body: Union[str, None]
    closed_at: Union[str, None]
    comments_url: str
    commits_url: str
    created_at: str
    diff_url: str
    draft: bool
    head: WebhookPullRequestReviewEditedPropPullRequestPropHeadType
    html_url: str
    id: int
    issue_url: str
    labels: List[WebhookPullRequestReviewEditedPropPullRequestPropLabelsItemsType]
    locked: bool
    merge_commit_sha: Union[str, None]
    merged_at: Union[str, None]
    milestone: Union[
        WebhookPullRequestReviewEditedPropPullRequestPropMilestoneType, None
    ]
    node_id: str
    number: int
    patch_url: str
    requested_reviewers: List[
        Union[
            WebhookPullRequestReviewEditedPropPullRequestPropRequestedReviewersItemsOneof0Type,
            None,
            WebhookPullRequestReviewEditedPropPullRequestPropRequestedReviewersItemsOneof1Type,
        ]
    ]
    requested_teams: List[
        WebhookPullRequestReviewEditedPropPullRequestPropRequestedTeamsItemsType
    ]
    review_comment_url: str
    review_comments_url: str
    state: Literal["open", "closed"]
    statuses_url: str
    title: str
    updated_at: str
    url: str
    user: Union[WebhookPullRequestReviewEditedPropPullRequestPropUserType, None]


class WebhookPullRequestReviewEditedPropPullRequestPropLinksType(TypedDict):
    """WebhookPullRequestReviewEditedPropPullRequestPropLinks"""

    comments: WebhookPullRequestReviewEditedPropPullRequestPropLinksPropCommentsType
    commits: WebhookPullRequestReviewEditedPropPullRequestPropLinksPropCommitsType
    html: WebhookPullRequestReviewEditedPropPullRequestPropLinksPropHtmlType
    issue: WebhookPullRequestReviewEditedPropPullRequestPropLinksPropIssueType
    review_comment: WebhookPullRequestReviewEditedPropPullRequestPropLinksPropReviewCommentType
    review_comments: WebhookPullRequestReviewEditedPropPullRequestPropLinksPropReviewCommentsType
    self_: WebhookPullRequestReviewEditedPropPullRequestPropLinksPropSelfType
    statuses: WebhookPullRequestReviewEditedPropPullRequestPropLinksPropStatusesType


class WebhookPullRequestReviewEditedPropPullRequestPropLinksPropCommentsType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestReviewEditedPropPullRequestPropLinksPropCommitsType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestReviewEditedPropPullRequestPropLinksPropHtmlType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestReviewEditedPropPullRequestPropLinksPropIssueType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestReviewEditedPropPullRequestPropLinksPropReviewCommentType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewEditedPropPullRequestPropLinksPropReviewCommentsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewEditedPropPullRequestPropLinksPropSelfType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestReviewEditedPropPullRequestPropLinksPropStatusesType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestReviewEditedPropPullRequestPropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestReviewEditedPropPullRequestPropAssigneesItemsType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestReviewEditedPropPullRequestPropAutoMergePropEnabledByType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewEditedPropPullRequestPropAutoMergeType(TypedDict):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None]
    commit_title: Union[str, None]
    enabled_by: Union[
        WebhookPullRequestReviewEditedPropPullRequestPropAutoMergePropEnabledByType,
        None,
    ]
    merge_method: Literal["merge", "squash", "rebase"]


class WebhookPullRequestReviewEditedPropPullRequestPropBaseType(TypedDict):
    """WebhookPullRequestReviewEditedPropPullRequestPropBase"""

    label: str
    ref: str
    repo: WebhookPullRequestReviewEditedPropPullRequestPropBasePropRepoType
    sha: str
    user: Union[WebhookPullRequestReviewEditedPropPullRequestPropBasePropUserType, None]


class WebhookPullRequestReviewEditedPropPullRequestPropBasePropRepoType(TypedDict):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestReviewEditedPropPullRequestPropBasePropRepoPropLicenseType,
        None,
    ]
    master_branch: NotRequired[str]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestReviewEditedPropPullRequestPropBasePropRepoPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookPullRequestReviewEditedPropPullRequestPropBasePropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int


class WebhookPullRequestReviewEditedPropPullRequestPropBasePropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestReviewEditedPropPullRequestPropBasePropRepoPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewEditedPropPullRequestPropBasePropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestReviewEditedPropPullRequestPropBasePropRepoPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestReviewEditedPropPullRequestPropBasePropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewEditedPropPullRequestPropHeadType(TypedDict):
    """WebhookPullRequestReviewEditedPropPullRequestPropHead"""

    label: str
    ref: str
    repo: Union[WebhookPullRequestReviewEditedPropPullRequestPropHeadPropRepoType, None]
    sha: str
    user: Union[WebhookPullRequestReviewEditedPropPullRequestPropHeadPropUserType, None]


class WebhookPullRequestReviewEditedPropPullRequestPropHeadPropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestReviewEditedPropPullRequestPropHeadPropRepoPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewEditedPropPullRequestPropHeadPropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestReviewEditedPropPullRequestPropHeadPropRepoPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestReviewEditedPropPullRequestPropHeadPropRepoType(TypedDict):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestReviewEditedPropPullRequestPropHeadPropRepoPropLicenseType,
        None,
    ]
    master_branch: NotRequired[str]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestReviewEditedPropPullRequestPropHeadPropRepoPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookPullRequestReviewEditedPropPullRequestPropHeadPropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int


class WebhookPullRequestReviewEditedPropPullRequestPropHeadPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewEditedPropPullRequestPropLabelsItemsType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookPullRequestReviewEditedPropPullRequestPropMilestonePropCreatorType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestReviewEditedPropPullRequestPropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[
        WebhookPullRequestReviewEditedPropPullRequestPropMilestonePropCreatorType, None
    ]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookPullRequestReviewEditedPropPullRequestPropRequestedReviewersItemsOneof0Type(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestReviewEditedPropPullRequestPropRequestedReviewersItemsOneof1Type(
    TypedDict
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    parent: NotRequired[
        Union[
            WebhookPullRequestReviewEditedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType,
            None,
        ]
    ]
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestReviewEditedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType(
    TypedDict
):
    """WebhookPullRequestReviewEditedPropPullRequestPropRequestedReviewersItemsOneof1Pr
    opParent
    """

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestReviewEditedPropPullRequestPropRequestedTeamsItemsType(
    TypedDict
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: NotRequired[Union[str, None]]
    html_url: NotRequired[str]
    id: int
    members_url: NotRequired[str]
    name: str
    node_id: NotRequired[str]
    parent: NotRequired[
        Union[
            WebhookPullRequestReviewEditedPropPullRequestPropRequestedTeamsItemsPropParentType,
            None,
        ]
    ]
    permission: NotRequired[str]
    privacy: NotRequired[Literal["open", "closed", "secret"]]
    repositories_url: NotRequired[str]
    slug: NotRequired[str]
    url: NotRequired[str]


class WebhookPullRequestReviewEditedPropPullRequestPropRequestedTeamsItemsPropParentType(
    TypedDict
):
    """WebhookPullRequestReviewEditedPropPullRequestPropRequestedTeamsItemsPropParent"""

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestReviewEditedPropPullRequestPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestReviewEditedPropReviewType(TypedDict):
    """WebhookPullRequestReviewEditedPropReview

    The review that was affected.
    """

    links: WebhookPullRequestReviewEditedPropReviewPropLinksType
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: Union[str, None]
    commit_id: str
    html_url: str
    id: int
    node_id: str
    pull_request_url: str
    state: str
    submitted_at: Union[datetime, None]
    user: Union[WebhookPullRequestReviewEditedPropReviewPropUserType, None]


class WebhookPullRequestReviewEditedPropReviewPropLinksType(TypedDict):
    """WebhookPullRequestReviewEditedPropReviewPropLinks"""

    html: WebhookPullRequestReviewEditedPropReviewPropLinksPropHtmlType
    pull_request: WebhookPullRequestReviewEditedPropReviewPropLinksPropPullRequestType


class WebhookPullRequestReviewEditedPropReviewPropLinksPropHtmlType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestReviewEditedPropReviewPropLinksPropPullRequestType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestReviewEditedPropReviewPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestRemovedOneof0Type(TypedDict):
    """WebhookPullRequestReviewRequestRemovedOneof0"""

    action: Literal["review_request_removed"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    number: int
    organization: NotRequired[OrganizationSimpleWebhooksType]
    pull_request: WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestType
    repository: RepositoryWebhooksType
    requested_reviewer: Union[
        WebhookPullRequestReviewRequestRemovedOneof0PropRequestedReviewerType, None
    ]
    sender: SimpleUserWebhooksType


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestType(TypedDict):
    """Pull Request"""

    links: WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksType
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    additions: NotRequired[int]
    assignee: Union[
        WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropAssigneeType,
        None,
    ]
    assignees: List[
        Union[
            WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropAssigneesItemsType,
            None,
        ]
    ]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    auto_merge: Union[
        WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropAutoMergeType,
        None,
    ]
    base: WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBaseType
    body: Union[str, None]
    changed_files: NotRequired[int]
    closed_at: Union[datetime, None]
    comments: NotRequired[int]
    comments_url: str
    commits: NotRequired[int]
    commits_url: str
    created_at: datetime
    deletions: NotRequired[int]
    diff_url: str
    draft: bool
    head: WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHeadType
    html_url: str
    id: int
    issue_url: str
    labels: List[
        WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLabelsItemsType
    ]
    locked: bool
    maintainer_can_modify: NotRequired[bool]
    merge_commit_sha: Union[str, None]
    mergeable: NotRequired[Union[bool, None]]
    mergeable_state: NotRequired[str]
    merged: NotRequired[Union[bool, None]]
    merged_at: Union[datetime, None]
    merged_by: NotRequired[
        Union[
            WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropMergedByType,
            None,
        ]
    ]
    milestone: Union[
        WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropMilestoneType,
        None,
    ]
    node_id: str
    number: int
    patch_url: str
    rebaseable: NotRequired[Union[bool, None]]
    requested_reviewers: List[
        Union[
            WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropRequestedReviewersItemsOneof0Type,
            None,
            WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropRequestedReviewersItemsOneof1Type,
        ]
    ]
    requested_teams: List[
        WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropRequestedTeamsItemsType
    ]
    review_comment_url: str
    review_comments: NotRequired[int]
    review_comments_url: str
    state: Literal["open", "closed"]
    statuses_url: str
    title: str
    updated_at: datetime
    url: str
    user: Union[
        WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropUserType, None
    ]


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksType(
    TypedDict
):
    """WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinks"""

    comments: WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropCommentsType
    commits: WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropCommitsType
    html: WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropHtmlType
    issue: WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropIssueType
    review_comment: WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropReviewCommentType
    review_comments: WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropReviewCommentsType
    self_: WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropSelfType
    statuses: WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropStatusesType


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropCommentsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropCommitsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropHtmlType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropIssueType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropReviewCommentType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropReviewCommentsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropSelfType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropStatusesType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropAssigneeType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropAssigneesItemsType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropAutoMergePropEnabledByType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropAutoMergeType(
    TypedDict
):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None]
    commit_title: Union[str, None]
    enabled_by: Union[
        WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropAutoMergePropEnabledByType,
        None,
    ]
    merge_method: Literal["merge", "squash", "rebase"]


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBaseType(
    TypedDict
):
    """WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBase"""

    label: str
    ref: str
    repo: WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBasePropRepoType
    sha: str
    user: Union[
        WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBasePropUserType,
        None,
    ]


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBasePropRepoType(
    TypedDict
):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBasePropRepoPropLicenseType,
        None,
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBasePropRepoPropOwnerType,
        None,
    ]
    permissions: NotRequired[
        WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBasePropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBasePropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBasePropRepoPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBasePropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBasePropRepoPropP
    ermissions
    """

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBasePropUserType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHeadType(
    TypedDict
):
    """WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHead"""

    label: str
    ref: str
    repo: WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHeadPropRepoType
    sha: str
    user: Union[
        WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHeadPropUserType,
        None,
    ]


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHeadPropRepoType(
    TypedDict
):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHeadPropRepoPropLicenseType,
        None,
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHeadPropRepoPropOwnerType,
        None,
    ]
    permissions: NotRequired[
        WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHeadPropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHeadPropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHeadPropRepoPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHeadPropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHeadPropRepoPropP
    ermissions
    """

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHeadPropUserType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLabelsItemsType(
    TypedDict
):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropMergedByType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropMilestonePropCreatorType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropMilestoneType(
    TypedDict
):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[
        WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropMilestonePropCreatorType,
        None,
    ]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropRequestedReviewersItemsOneof0Type(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropRequestedReviewersItemsOneof1Type(
    TypedDict
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    parent: NotRequired[
        Union[
            WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropRequestedReviewersItemsOneof1PropParentType,
            None,
        ]
    ]
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropRequestedReviewersItemsOneof1PropParentType(
    TypedDict
):
    """WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropRequestedReviewer
    sItemsOneof1PropParent
    """

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropRequestedTeamsItemsType(
    TypedDict
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    parent: NotRequired[
        Union[
            WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropRequestedTeamsItemsPropParentType,
            None,
        ]
    ]
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropRequestedTeamsItemsPropParentType(
    TypedDict
):
    """WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropRequestedTeamsIte
    msPropParent
    """

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropUserType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestRemovedOneof0PropRequestedReviewerType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestRemovedOneof1Type(TypedDict):
    """WebhookPullRequestReviewRequestRemovedOneof1"""

    action: Literal["review_request_removed"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    number: int
    organization: NotRequired[OrganizationSimpleWebhooksType]
    pull_request: WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestType
    repository: RepositoryWebhooksType
    requested_team: WebhookPullRequestReviewRequestRemovedOneof1PropRequestedTeamType
    sender: SimpleUserWebhooksType


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestType(TypedDict):
    """Pull Request"""

    links: WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksType
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    additions: NotRequired[int]
    assignee: Union[
        WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropAssigneeType,
        None,
    ]
    assignees: List[
        Union[
            WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropAssigneesItemsType,
            None,
        ]
    ]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    auto_merge: Union[
        WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropAutoMergeType,
        None,
    ]
    base: WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBaseType
    body: Union[str, None]
    changed_files: NotRequired[int]
    closed_at: Union[datetime, None]
    comments: NotRequired[int]
    comments_url: str
    commits: NotRequired[int]
    commits_url: str
    created_at: datetime
    deletions: NotRequired[int]
    diff_url: str
    draft: bool
    head: WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHeadType
    html_url: str
    id: int
    issue_url: str
    labels: List[
        WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLabelsItemsType
    ]
    locked: bool
    maintainer_can_modify: NotRequired[bool]
    merge_commit_sha: Union[str, None]
    mergeable: NotRequired[Union[bool, None]]
    mergeable_state: NotRequired[str]
    merged: NotRequired[Union[bool, None]]
    merged_at: Union[datetime, None]
    merged_by: NotRequired[
        Union[
            WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropMergedByType,
            None,
        ]
    ]
    milestone: Union[
        WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropMilestoneType,
        None,
    ]
    node_id: str
    number: int
    patch_url: str
    rebaseable: NotRequired[Union[bool, None]]
    requested_reviewers: List[
        Union[
            WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropRequestedReviewersItemsOneof0Type,
            None,
            WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropRequestedReviewersItemsOneof1Type,
        ]
    ]
    requested_teams: List[
        WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropRequestedTeamsItemsType
    ]
    review_comment_url: str
    review_comments: NotRequired[int]
    review_comments_url: str
    state: Literal["open", "closed"]
    statuses_url: str
    title: str
    updated_at: datetime
    url: str
    user: Union[
        WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropUserType, None
    ]


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksType(
    TypedDict
):
    """WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinks"""

    comments: WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropCommentsType
    commits: WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropCommitsType
    html: WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropHtmlType
    issue: WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropIssueType
    review_comment: WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropReviewCommentType
    review_comments: WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropReviewCommentsType
    self_: WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropSelfType
    statuses: WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropStatusesType


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropCommentsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropCommitsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropHtmlType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropIssueType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropReviewCommentType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropReviewCommentsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropSelfType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropStatusesType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropAssigneeType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropAssigneesItemsType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropAutoMergePropEnabledByType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropAutoMergeType(
    TypedDict
):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None]
    commit_title: Union[str, None]
    enabled_by: Union[
        WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropAutoMergePropEnabledByType,
        None,
    ]
    merge_method: Literal["merge", "squash", "rebase"]


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBaseType(
    TypedDict
):
    """WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBase"""

    label: str
    ref: str
    repo: WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBasePropRepoType
    sha: str
    user: Union[
        WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBasePropUserType,
        None,
    ]


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBasePropRepoType(
    TypedDict
):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBasePropRepoPropLicenseType,
        None,
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBasePropRepoPropOwnerType,
        None,
    ]
    permissions: NotRequired[
        WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBasePropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBasePropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBasePropRepoPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBasePropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBasePropRepoPropP
    ermissions
    """

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBasePropUserType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHeadType(
    TypedDict
):
    """WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHead"""

    label: str
    ref: str
    repo: WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHeadPropRepoType
    sha: str
    user: Union[
        WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHeadPropUserType,
        None,
    ]


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHeadPropRepoType(
    TypedDict
):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHeadPropRepoPropLicenseType,
        None,
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHeadPropRepoPropOwnerType,
        None,
    ]
    permissions: NotRequired[
        WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHeadPropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHeadPropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHeadPropRepoPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHeadPropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHeadPropRepoPropP
    ermissions
    """

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHeadPropUserType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLabelsItemsType(
    TypedDict
):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropMergedByType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropMilestonePropCreatorType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropMilestoneType(
    TypedDict
):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[
        WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropMilestonePropCreatorType,
        None,
    ]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropRequestedReviewersItemsOneof0Type(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropRequestedReviewersItemsOneof1Type(
    TypedDict
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    parent: NotRequired[
        Union[
            WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropRequestedReviewersItemsOneof1PropParentType,
            None,
        ]
    ]
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropRequestedReviewersItemsOneof1PropParentType(
    TypedDict
):
    """WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropRequestedReviewer
    sItemsOneof1PropParent
    """

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropRequestedTeamsItemsType(
    TypedDict
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    parent: NotRequired[
        Union[
            WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropRequestedTeamsItemsPropParentType,
            None,
        ]
    ]
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropRequestedTeamsItemsPropParentType(
    TypedDict
):
    """WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropRequestedTeamsIte
    msPropParent
    """

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropUserType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestRemovedOneof1PropRequestedTeamType(TypedDict):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    parent: NotRequired[
        Union[
            WebhookPullRequestReviewRequestRemovedOneof1PropRequestedTeamPropParentType,
            None,
        ]
    ]
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestReviewRequestRemovedOneof1PropRequestedTeamPropParentType(
    TypedDict
):
    """WebhookPullRequestReviewRequestRemovedOneof1PropRequestedTeamPropParent"""

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestReviewRequestedOneof0Type(TypedDict):
    """WebhookPullRequestReviewRequestedOneof0"""

    action: Literal["review_requested"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    number: int
    organization: NotRequired[OrganizationSimpleWebhooksType]
    pull_request: WebhookPullRequestReviewRequestedOneof0PropPullRequestType
    repository: RepositoryWebhooksType
    requested_reviewer: Union[
        WebhookPullRequestReviewRequestedOneof0PropRequestedReviewerType, None
    ]
    sender: SimpleUserWebhooksType


class WebhookPullRequestReviewRequestedOneof0PropPullRequestType(TypedDict):
    """Pull Request"""

    links: WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksType
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    additions: NotRequired[int]
    assignee: Union[
        WebhookPullRequestReviewRequestedOneof0PropPullRequestPropAssigneeType, None
    ]
    assignees: List[
        Union[
            WebhookPullRequestReviewRequestedOneof0PropPullRequestPropAssigneesItemsType,
            None,
        ]
    ]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    auto_merge: Union[
        WebhookPullRequestReviewRequestedOneof0PropPullRequestPropAutoMergeType, None
    ]
    base: WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBaseType
    body: Union[str, None]
    changed_files: NotRequired[int]
    closed_at: Union[datetime, None]
    comments: NotRequired[int]
    comments_url: str
    commits: NotRequired[int]
    commits_url: str
    created_at: datetime
    deletions: NotRequired[int]
    diff_url: str
    draft: bool
    head: WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHeadType
    html_url: str
    id: int
    issue_url: str
    labels: List[
        WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLabelsItemsType
    ]
    locked: bool
    maintainer_can_modify: NotRequired[bool]
    merge_commit_sha: Union[str, None]
    mergeable: NotRequired[Union[bool, None]]
    mergeable_state: NotRequired[str]
    merged: NotRequired[Union[bool, None]]
    merged_at: Union[datetime, None]
    merged_by: NotRequired[
        Union[
            WebhookPullRequestReviewRequestedOneof0PropPullRequestPropMergedByType, None
        ]
    ]
    milestone: Union[
        WebhookPullRequestReviewRequestedOneof0PropPullRequestPropMilestoneType, None
    ]
    node_id: str
    number: int
    patch_url: str
    rebaseable: NotRequired[Union[bool, None]]
    requested_reviewers: List[
        Union[
            WebhookPullRequestReviewRequestedOneof0PropPullRequestPropRequestedReviewersItemsOneof0Type,
            None,
            WebhookPullRequestReviewRequestedOneof0PropPullRequestPropRequestedReviewersItemsOneof1Type,
        ]
    ]
    requested_teams: List[
        WebhookPullRequestReviewRequestedOneof0PropPullRequestPropRequestedTeamsItemsType
    ]
    review_comment_url: str
    review_comments: NotRequired[int]
    review_comments_url: str
    state: Literal["open", "closed"]
    statuses_url: str
    title: str
    updated_at: datetime
    url: str
    user: Union[
        WebhookPullRequestReviewRequestedOneof0PropPullRequestPropUserType, None
    ]


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksType(TypedDict):
    """WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinks"""

    comments: WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropCommentsType
    commits: WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropCommitsType
    html: WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropHtmlType
    issue: WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropIssueType
    review_comment: WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropReviewCommentType
    review_comments: WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropReviewCommentsType
    self_: WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropSelfType
    statuses: WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropStatusesType


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropCommentsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropCommitsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropHtmlType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropIssueType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropReviewCommentType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropReviewCommentsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropSelfType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropStatusesType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropAssigneesItemsType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropAutoMergePropEnabledByType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropAutoMergeType(
    TypedDict
):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None]
    commit_title: Union[str, None]
    enabled_by: Union[
        WebhookPullRequestReviewRequestedOneof0PropPullRequestPropAutoMergePropEnabledByType,
        None,
    ]
    merge_method: Literal["merge", "squash", "rebase"]


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBaseType(TypedDict):
    """WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBase"""

    label: str
    ref: str
    repo: WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBasePropRepoType
    sha: str
    user: Union[
        WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBasePropUserType, None
    ]


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBasePropRepoType(
    TypedDict
):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBasePropRepoPropLicenseType,
        None,
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBasePropRepoPropOwnerType,
        None,
    ]
    permissions: NotRequired[
        WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBasePropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBasePropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBasePropRepoPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBasePropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBasePropRepoPropPermis
    sions
    """

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBasePropUserType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHeadType(TypedDict):
    """WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHead"""

    label: str
    ref: str
    repo: WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHeadPropRepoType
    sha: str
    user: Union[
        WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHeadPropUserType, None
    ]


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHeadPropRepoType(
    TypedDict
):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHeadPropRepoPropLicenseType,
        None,
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHeadPropRepoPropOwnerType,
        None,
    ]
    permissions: NotRequired[
        WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHeadPropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHeadPropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHeadPropRepoPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHeadPropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHeadPropRepoPropPermis
    sions
    """

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHeadPropUserType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLabelsItemsType(
    TypedDict
):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropMergedByType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropMilestonePropCreatorType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropMilestoneType(
    TypedDict
):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[
        WebhookPullRequestReviewRequestedOneof0PropPullRequestPropMilestonePropCreatorType,
        None,
    ]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropRequestedReviewersItemsOneof0Type(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropRequestedReviewersItemsOneof1Type(
    TypedDict
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    parent: NotRequired[
        Union[
            WebhookPullRequestReviewRequestedOneof0PropPullRequestPropRequestedReviewersItemsOneof1PropParentType,
            None,
        ]
    ]
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropRequestedReviewersItemsOneof1PropParentType(
    TypedDict
):
    """WebhookPullRequestReviewRequestedOneof0PropPullRequestPropRequestedReviewersItem
    sOneof1PropParent
    """

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropRequestedTeamsItemsType(
    TypedDict
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: NotRequired[Union[str, None]]
    html_url: NotRequired[str]
    id: int
    members_url: NotRequired[str]
    name: str
    node_id: NotRequired[str]
    parent: NotRequired[
        Union[
            WebhookPullRequestReviewRequestedOneof0PropPullRequestPropRequestedTeamsItemsPropParentType,
            None,
        ]
    ]
    permission: NotRequired[str]
    privacy: NotRequired[Literal["open", "closed", "secret"]]
    repositories_url: NotRequired[str]
    slug: NotRequired[str]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropRequestedTeamsItemsPropParentType(
    TypedDict
):
    """WebhookPullRequestReviewRequestedOneof0PropPullRequestPropRequestedTeamsItemsPro
    pParent
    """

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestReviewRequestedOneof0PropPullRequestPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestedOneof0PropRequestedReviewerType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestedOneof1Type(TypedDict):
    """WebhookPullRequestReviewRequestedOneof1"""

    action: Literal["review_requested"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    number: int
    organization: NotRequired[OrganizationSimpleWebhooksType]
    pull_request: WebhookPullRequestReviewRequestedOneof1PropPullRequestType
    repository: RepositoryWebhooksType
    requested_team: WebhookPullRequestReviewRequestedOneof1PropRequestedTeamType
    sender: SimpleUserWebhooksType


class WebhookPullRequestReviewRequestedOneof1PropPullRequestType(TypedDict):
    """Pull Request"""

    links: WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksType
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    additions: NotRequired[int]
    assignee: Union[
        WebhookPullRequestReviewRequestedOneof1PropPullRequestPropAssigneeType, None
    ]
    assignees: List[
        Union[
            WebhookPullRequestReviewRequestedOneof1PropPullRequestPropAssigneesItemsType,
            None,
        ]
    ]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    auto_merge: Union[
        WebhookPullRequestReviewRequestedOneof1PropPullRequestPropAutoMergeType, None
    ]
    base: WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBaseType
    body: Union[str, None]
    changed_files: NotRequired[int]
    closed_at: Union[datetime, None]
    comments: NotRequired[int]
    comments_url: str
    commits: NotRequired[int]
    commits_url: str
    created_at: datetime
    deletions: NotRequired[int]
    diff_url: str
    draft: bool
    head: WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHeadType
    html_url: str
    id: int
    issue_url: str
    labels: List[
        WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLabelsItemsType
    ]
    locked: bool
    maintainer_can_modify: NotRequired[bool]
    merge_commit_sha: Union[str, None]
    mergeable: NotRequired[Union[bool, None]]
    mergeable_state: NotRequired[str]
    merged: NotRequired[Union[bool, None]]
    merged_at: Union[datetime, None]
    merged_by: NotRequired[
        Union[
            WebhookPullRequestReviewRequestedOneof1PropPullRequestPropMergedByType, None
        ]
    ]
    milestone: Union[
        WebhookPullRequestReviewRequestedOneof1PropPullRequestPropMilestoneType, None
    ]
    node_id: str
    number: int
    patch_url: str
    rebaseable: NotRequired[Union[bool, None]]
    requested_reviewers: List[
        Union[
            WebhookPullRequestReviewRequestedOneof1PropPullRequestPropRequestedReviewersItemsOneof0Type,
            None,
            WebhookPullRequestReviewRequestedOneof1PropPullRequestPropRequestedReviewersItemsOneof1Type,
        ]
    ]
    requested_teams: List[
        WebhookPullRequestReviewRequestedOneof1PropPullRequestPropRequestedTeamsItemsType
    ]
    review_comment_url: str
    review_comments: NotRequired[int]
    review_comments_url: str
    state: Literal["open", "closed"]
    statuses_url: str
    title: str
    updated_at: datetime
    url: str
    user: Union[
        WebhookPullRequestReviewRequestedOneof1PropPullRequestPropUserType, None
    ]


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksType(TypedDict):
    """WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinks"""

    comments: WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropCommentsType
    commits: WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropCommitsType
    html: WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropHtmlType
    issue: WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropIssueType
    review_comment: WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropReviewCommentType
    review_comments: WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropReviewCommentsType
    self_: WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropSelfType
    statuses: WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropStatusesType


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropCommentsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropCommitsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropHtmlType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropIssueType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropReviewCommentType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropReviewCommentsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropSelfType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropStatusesType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropAssigneesItemsType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropAutoMergePropEnabledByType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropAutoMergeType(
    TypedDict
):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None]
    commit_title: Union[str, None]
    enabled_by: Union[
        WebhookPullRequestReviewRequestedOneof1PropPullRequestPropAutoMergePropEnabledByType,
        None,
    ]
    merge_method: Literal["merge", "squash", "rebase"]


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBaseType(TypedDict):
    """WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBase"""

    label: str
    ref: str
    repo: WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBasePropRepoType
    sha: str
    user: Union[
        WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBasePropUserType, None
    ]


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBasePropRepoType(
    TypedDict
):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBasePropRepoPropLicenseType,
        None,
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBasePropRepoPropOwnerType,
        None,
    ]
    permissions: NotRequired[
        WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBasePropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBasePropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBasePropRepoPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBasePropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBasePropRepoPropPermis
    sions
    """

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBasePropUserType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHeadType(TypedDict):
    """WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHead"""

    label: str
    ref: str
    repo: WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHeadPropRepoType
    sha: str
    user: Union[
        WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHeadPropUserType, None
    ]


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHeadPropRepoType(
    TypedDict
):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHeadPropRepoPropLicenseType,
        None,
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHeadPropRepoPropOwnerType,
        None,
    ]
    permissions: NotRequired[
        WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHeadPropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHeadPropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHeadPropRepoPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHeadPropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHeadPropRepoPropPermis
    sions
    """

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHeadPropUserType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLabelsItemsType(
    TypedDict
):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropMergedByType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropMilestonePropCreatorType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropMilestoneType(
    TypedDict
):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[
        WebhookPullRequestReviewRequestedOneof1PropPullRequestPropMilestonePropCreatorType,
        None,
    ]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropRequestedReviewersItemsOneof0Type(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropRequestedReviewersItemsOneof1Type(
    TypedDict
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: NotRequired[Union[str, None]]
    html_url: NotRequired[str]
    id: int
    members_url: NotRequired[str]
    name: str
    node_id: NotRequired[str]
    parent: NotRequired[
        Union[
            WebhookPullRequestReviewRequestedOneof1PropPullRequestPropRequestedReviewersItemsOneof1PropParentType,
            None,
        ]
    ]
    permission: NotRequired[str]
    privacy: NotRequired[Literal["open", "closed", "secret"]]
    repositories_url: NotRequired[str]
    slug: NotRequired[str]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropRequestedReviewersItemsOneof1PropParentType(
    TypedDict
):
    """WebhookPullRequestReviewRequestedOneof1PropPullRequestPropRequestedReviewersItem
    sOneof1PropParent
    """

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropRequestedTeamsItemsType(
    TypedDict
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: NotRequired[Union[str, None]]
    html_url: NotRequired[str]
    id: int
    members_url: NotRequired[str]
    name: str
    node_id: NotRequired[str]
    parent: NotRequired[
        Union[
            WebhookPullRequestReviewRequestedOneof1PropPullRequestPropRequestedTeamsItemsPropParentType,
            None,
        ]
    ]
    permission: NotRequired[str]
    privacy: NotRequired[Literal["open", "closed", "secret"]]
    repositories_url: NotRequired[str]
    slug: NotRequired[str]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropRequestedTeamsItemsPropParentType(
    TypedDict
):
    """WebhookPullRequestReviewRequestedOneof1PropPullRequestPropRequestedTeamsItemsPro
    pParent
    """

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestReviewRequestedOneof1PropPullRequestPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestedOneof1PropRequestedTeamType(TypedDict):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: NotRequired[Union[str, None]]
    html_url: NotRequired[str]
    id: int
    members_url: NotRequired[str]
    name: str
    node_id: NotRequired[str]
    parent: NotRequired[
        Union[
            WebhookPullRequestReviewRequestedOneof1PropRequestedTeamPropParentType, None
        ]
    ]
    permission: NotRequired[str]
    privacy: NotRequired[Literal["open", "closed", "secret"]]
    repositories_url: NotRequired[str]
    slug: NotRequired[str]
    url: NotRequired[str]


class WebhookPullRequestReviewRequestedOneof1PropRequestedTeamPropParentType(TypedDict):
    """WebhookPullRequestReviewRequestedOneof1PropRequestedTeamPropParent"""

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestReviewSubmittedType(TypedDict):
    """pull_request_review submitted event"""

    action: Literal["submitted"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    pull_request: WebhookPullRequestReviewSubmittedPropPullRequestType
    repository: RepositoryWebhooksType
    review: WebhookPullRequestReviewSubmittedPropReviewType
    sender: SimpleUserWebhooksType


class WebhookPullRequestReviewSubmittedPropPullRequestType(TypedDict):
    """Simple Pull Request"""

    links: WebhookPullRequestReviewSubmittedPropPullRequestPropLinksType
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    assignee: Union[
        WebhookPullRequestReviewSubmittedPropPullRequestPropAssigneeType, None
    ]
    assignees: List[
        Union[
            WebhookPullRequestReviewSubmittedPropPullRequestPropAssigneesItemsType, None
        ]
    ]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    auto_merge: Union[
        WebhookPullRequestReviewSubmittedPropPullRequestPropAutoMergeType, None
    ]
    base: WebhookPullRequestReviewSubmittedPropPullRequestPropBaseType
    body: Union[str, None]
    closed_at: Union[str, None]
    comments_url: str
    commits_url: str
    created_at: str
    diff_url: str
    draft: bool
    head: WebhookPullRequestReviewSubmittedPropPullRequestPropHeadType
    html_url: str
    id: int
    issue_url: str
    labels: List[WebhookPullRequestReviewSubmittedPropPullRequestPropLabelsItemsType]
    locked: bool
    merge_commit_sha: Union[str, None]
    merged_at: Union[str, None]
    milestone: Union[
        WebhookPullRequestReviewSubmittedPropPullRequestPropMilestoneType, None
    ]
    node_id: str
    number: int
    patch_url: str
    requested_reviewers: List[
        Union[
            WebhookPullRequestReviewSubmittedPropPullRequestPropRequestedReviewersItemsOneof0Type,
            None,
            WebhookPullRequestReviewSubmittedPropPullRequestPropRequestedReviewersItemsOneof1Type,
        ]
    ]
    requested_teams: List[
        WebhookPullRequestReviewSubmittedPropPullRequestPropRequestedTeamsItemsType
    ]
    review_comment_url: str
    review_comments_url: str
    state: Literal["open", "closed"]
    statuses_url: str
    title: str
    updated_at: str
    url: str
    user: Union[WebhookPullRequestReviewSubmittedPropPullRequestPropUserType, None]


class WebhookPullRequestReviewSubmittedPropPullRequestPropLinksType(TypedDict):
    """WebhookPullRequestReviewSubmittedPropPullRequestPropLinks"""

    comments: WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropCommentsType
    commits: WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropCommitsType
    html: WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropHtmlType
    issue: WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropIssueType
    review_comment: WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropReviewCommentType
    review_comments: WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropReviewCommentsType
    self_: WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropSelfType
    statuses: WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropStatusesType


class WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropCommentsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropCommitsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropHtmlType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropIssueType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropReviewCommentType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropReviewCommentsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropSelfType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropStatusesType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewSubmittedPropPullRequestPropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestReviewSubmittedPropPullRequestPropAssigneesItemsType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestReviewSubmittedPropPullRequestPropAutoMergePropEnabledByType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewSubmittedPropPullRequestPropAutoMergeType(TypedDict):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None]
    commit_title: Union[str, None]
    enabled_by: Union[
        WebhookPullRequestReviewSubmittedPropPullRequestPropAutoMergePropEnabledByType,
        None,
    ]
    merge_method: Literal["merge", "squash", "rebase"]


class WebhookPullRequestReviewSubmittedPropPullRequestPropBaseType(TypedDict):
    """WebhookPullRequestReviewSubmittedPropPullRequestPropBase"""

    label: str
    ref: str
    repo: WebhookPullRequestReviewSubmittedPropPullRequestPropBasePropRepoType
    sha: str
    user: Union[
        WebhookPullRequestReviewSubmittedPropPullRequestPropBasePropUserType, None
    ]


class WebhookPullRequestReviewSubmittedPropPullRequestPropBasePropRepoType(TypedDict):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestReviewSubmittedPropPullRequestPropBasePropRepoPropLicenseType,
        None,
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestReviewSubmittedPropPullRequestPropBasePropRepoPropOwnerType,
        None,
    ]
    permissions: NotRequired[
        WebhookPullRequestReviewSubmittedPropPullRequestPropBasePropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestReviewSubmittedPropPullRequestPropBasePropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestReviewSubmittedPropPullRequestPropBasePropRepoPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewSubmittedPropPullRequestPropBasePropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestReviewSubmittedPropPullRequestPropBasePropRepoPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestReviewSubmittedPropPullRequestPropBasePropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewSubmittedPropPullRequestPropHeadType(TypedDict):
    """WebhookPullRequestReviewSubmittedPropPullRequestPropHead"""

    label: Union[str, None]
    ref: str
    repo: Union[
        WebhookPullRequestReviewSubmittedPropPullRequestPropHeadPropRepoType, None
    ]
    sha: str
    user: Union[
        WebhookPullRequestReviewSubmittedPropPullRequestPropHeadPropUserType, None
    ]


class WebhookPullRequestReviewSubmittedPropPullRequestPropHeadPropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestReviewSubmittedPropPullRequestPropHeadPropRepoPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewSubmittedPropPullRequestPropHeadPropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestReviewSubmittedPropPullRequestPropHeadPropRepoPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestReviewSubmittedPropPullRequestPropHeadPropRepoType(TypedDict):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestReviewSubmittedPropPullRequestPropHeadPropRepoPropLicenseType,
        None,
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestReviewSubmittedPropPullRequestPropHeadPropRepoPropOwnerType,
        None,
    ]
    permissions: NotRequired[
        WebhookPullRequestReviewSubmittedPropPullRequestPropHeadPropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestReviewSubmittedPropPullRequestPropHeadPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewSubmittedPropPullRequestPropLabelsItemsType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookPullRequestReviewSubmittedPropPullRequestPropMilestonePropCreatorType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestReviewSubmittedPropPullRequestPropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[
        WebhookPullRequestReviewSubmittedPropPullRequestPropMilestonePropCreatorType,
        None,
    ]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookPullRequestReviewSubmittedPropPullRequestPropRequestedReviewersItemsOneof0Type(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestReviewSubmittedPropPullRequestPropRequestedReviewersItemsOneof1Type(
    TypedDict
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    parent: NotRequired[
        Union[
            WebhookPullRequestReviewSubmittedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType,
            None,
        ]
    ]
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestReviewSubmittedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType(
    TypedDict
):
    """WebhookPullRequestReviewSubmittedPropPullRequestPropRequestedReviewersItemsOneof
    1PropParent
    """

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestReviewSubmittedPropPullRequestPropRequestedTeamsItemsType(
    TypedDict
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: NotRequired[Union[str, None]]
    html_url: NotRequired[str]
    id: int
    members_url: NotRequired[str]
    name: str
    node_id: NotRequired[str]
    parent: NotRequired[
        Union[
            WebhookPullRequestReviewSubmittedPropPullRequestPropRequestedTeamsItemsPropParentType,
            None,
        ]
    ]
    permission: NotRequired[str]
    privacy: NotRequired[Literal["open", "closed", "secret"]]
    repositories_url: NotRequired[str]
    slug: NotRequired[str]
    url: NotRequired[str]


class WebhookPullRequestReviewSubmittedPropPullRequestPropRequestedTeamsItemsPropParentType(
    TypedDict
):
    """WebhookPullRequestReviewSubmittedPropPullRequestPropRequestedTeamsItemsPropParen
    t
    """

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestReviewSubmittedPropPullRequestPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestReviewSubmittedPropReviewType(TypedDict):
    """WebhookPullRequestReviewSubmittedPropReview

    The review that was affected.
    """

    links: WebhookPullRequestReviewSubmittedPropReviewPropLinksType
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: Union[str, None]
    commit_id: str
    html_url: str
    id: int
    node_id: str
    pull_request_url: str
    state: str
    submitted_at: Union[datetime, None]
    user: Union[WebhookPullRequestReviewSubmittedPropReviewPropUserType, None]


class WebhookPullRequestReviewSubmittedPropReviewPropLinksType(TypedDict):
    """WebhookPullRequestReviewSubmittedPropReviewPropLinks"""

    html: WebhookPullRequestReviewSubmittedPropReviewPropLinksPropHtmlType
    pull_request: WebhookPullRequestReviewSubmittedPropReviewPropLinksPropPullRequestType


class WebhookPullRequestReviewSubmittedPropReviewPropLinksPropHtmlType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestReviewSubmittedPropReviewPropLinksPropPullRequestType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewSubmittedPropReviewPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewThreadResolvedType(TypedDict):
    """pull_request_review_thread resolved event"""

    action: Literal["resolved"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    pull_request: WebhookPullRequestReviewThreadResolvedPropPullRequestType
    repository: RepositoryWebhooksType
    sender: NotRequired[SimpleUserWebhooksType]
    thread: WebhookPullRequestReviewThreadResolvedPropThreadType


class WebhookPullRequestReviewThreadResolvedPropPullRequestType(TypedDict):
    """Simple Pull Request"""

    links: WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksType
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    assignee: Union[
        WebhookPullRequestReviewThreadResolvedPropPullRequestPropAssigneeType, None
    ]
    assignees: List[
        Union[
            WebhookPullRequestReviewThreadResolvedPropPullRequestPropAssigneesItemsType,
            None,
        ]
    ]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    auto_merge: Union[
        WebhookPullRequestReviewThreadResolvedPropPullRequestPropAutoMergeType, None
    ]
    base: WebhookPullRequestReviewThreadResolvedPropPullRequestPropBaseType
    body: Union[str, None]
    closed_at: Union[str, None]
    comments_url: str
    commits_url: str
    created_at: str
    diff_url: str
    draft: bool
    head: WebhookPullRequestReviewThreadResolvedPropPullRequestPropHeadType
    html_url: str
    id: int
    issue_url: str
    labels: List[
        WebhookPullRequestReviewThreadResolvedPropPullRequestPropLabelsItemsType
    ]
    locked: bool
    merge_commit_sha: Union[str, None]
    merged_at: Union[str, None]
    milestone: Union[
        WebhookPullRequestReviewThreadResolvedPropPullRequestPropMilestoneType, None
    ]
    node_id: str
    number: int
    patch_url: str
    requested_reviewers: List[
        Union[
            WebhookPullRequestReviewThreadResolvedPropPullRequestPropRequestedReviewersItemsOneof0Type,
            None,
            WebhookPullRequestReviewThreadResolvedPropPullRequestPropRequestedReviewersItemsOneof1Type,
        ]
    ]
    requested_teams: List[
        WebhookPullRequestReviewThreadResolvedPropPullRequestPropRequestedTeamsItemsType
    ]
    review_comment_url: str
    review_comments_url: str
    state: Literal["open", "closed"]
    statuses_url: str
    title: str
    updated_at: str
    url: str
    user: Union[WebhookPullRequestReviewThreadResolvedPropPullRequestPropUserType, None]


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksType(TypedDict):
    """WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinks"""

    comments: WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropCommentsType
    commits: WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropCommitsType
    html: WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropHtmlType
    issue: WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropIssueType
    review_comment: WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropReviewCommentType
    review_comments: WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropReviewCommentsType
    self_: WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropSelfType
    statuses: WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropStatusesType


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropCommentsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropCommitsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropHtmlType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropIssueType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropReviewCommentType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropReviewCommentsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropSelfType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropStatusesType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropAssigneesItemsType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropAutoMergePropEnabledByType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropAutoMergeType(TypedDict):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None]
    commit_title: Union[str, None]
    enabled_by: Union[
        WebhookPullRequestReviewThreadResolvedPropPullRequestPropAutoMergePropEnabledByType,
        None,
    ]
    merge_method: Literal["merge", "squash", "rebase"]


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropBaseType(TypedDict):
    """WebhookPullRequestReviewThreadResolvedPropPullRequestPropBase"""

    label: str
    ref: str
    repo: WebhookPullRequestReviewThreadResolvedPropPullRequestPropBasePropRepoType
    sha: str
    user: Union[
        WebhookPullRequestReviewThreadResolvedPropPullRequestPropBasePropUserType, None
    ]


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropBasePropRepoType(
    TypedDict
):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestReviewThreadResolvedPropPullRequestPropBasePropRepoPropLicenseType,
        None,
    ]
    master_branch: NotRequired[str]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestReviewThreadResolvedPropPullRequestPropBasePropRepoPropOwnerType,
        None,
    ]
    permissions: NotRequired[
        WebhookPullRequestReviewThreadResolvedPropPullRequestPropBasePropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropBasePropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropBasePropRepoPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropBasePropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestReviewThreadResolvedPropPullRequestPropBasePropRepoPropPermiss
    ions
    """

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropBasePropUserType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropHeadType(TypedDict):
    """WebhookPullRequestReviewThreadResolvedPropPullRequestPropHead"""

    label: Union[str, None]
    ref: str
    repo: Union[
        WebhookPullRequestReviewThreadResolvedPropPullRequestPropHeadPropRepoType, None
    ]
    sha: str
    user: Union[
        WebhookPullRequestReviewThreadResolvedPropPullRequestPropHeadPropUserType, None
    ]


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropHeadPropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropHeadPropRepoPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropHeadPropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestReviewThreadResolvedPropPullRequestPropHeadPropRepoPropPermiss
    ions
    """

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropHeadPropRepoType(
    TypedDict
):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestReviewThreadResolvedPropPullRequestPropHeadPropRepoPropLicenseType,
        None,
    ]
    master_branch: NotRequired[str]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestReviewThreadResolvedPropPullRequestPropHeadPropRepoPropOwnerType,
        None,
    ]
    permissions: NotRequired[
        WebhookPullRequestReviewThreadResolvedPropPullRequestPropHeadPropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropHeadPropUserType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropLabelsItemsType(
    TypedDict
):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropMilestonePropCreatorType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[
        WebhookPullRequestReviewThreadResolvedPropPullRequestPropMilestonePropCreatorType,
        None,
    ]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropRequestedReviewersItemsOneof0Type(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropRequestedReviewersItemsOneof1Type(
    TypedDict
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    parent: NotRequired[
        Union[
            WebhookPullRequestReviewThreadResolvedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType,
            None,
        ]
    ]
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType(
    TypedDict
):
    """WebhookPullRequestReviewThreadResolvedPropPullRequestPropRequestedReviewersItems
    Oneof1PropParent
    """

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropRequestedTeamsItemsType(
    TypedDict
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: NotRequired[Union[str, None]]
    html_url: NotRequired[str]
    id: int
    members_url: NotRequired[str]
    name: str
    node_id: NotRequired[str]
    parent: NotRequired[
        Union[
            WebhookPullRequestReviewThreadResolvedPropPullRequestPropRequestedTeamsItemsPropParentType,
            None,
        ]
    ]
    permission: NotRequired[str]
    privacy: NotRequired[Literal["open", "closed", "secret"]]
    repositories_url: NotRequired[str]
    slug: NotRequired[str]
    url: NotRequired[str]


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropRequestedTeamsItemsPropParentType(
    TypedDict
):
    """WebhookPullRequestReviewThreadResolvedPropPullRequestPropRequestedTeamsItemsProp
    Parent
    """

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestReviewThreadResolvedPropPullRequestPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestReviewThreadResolvedPropThreadType(TypedDict):
    """WebhookPullRequestReviewThreadResolvedPropThread"""

    comments: List[
        WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsType
    ]
    node_id: str


class WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsType(TypedDict):
    """Pull Request Review Comment

    The [comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-
    for-a-pull-request) itself.
    """

    links: WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropLinksType
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: str
    commit_id: str
    created_at: datetime
    diff_hunk: str
    html_url: str
    id: int
    in_reply_to_id: NotRequired[int]
    line: Union[int, None]
    node_id: str
    original_commit_id: str
    original_line: Union[int, None]
    original_position: int
    original_start_line: Union[int, None]
    path: str
    position: Union[int, None]
    pull_request_review_id: Union[int, None]
    pull_request_url: str
    reactions: WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropReactionsType
    side: Literal["LEFT", "RIGHT"]
    start_line: Union[int, None]
    start_side: Union[None, Literal["LEFT", "RIGHT"]]
    subject_type: NotRequired[Literal["line", "file"]]
    updated_at: datetime
    url: str
    user: Union[
        WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropUserType,
        None,
    ]


class WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropLinksType(
    TypedDict
):
    """WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropLinks"""

    html: WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropLinksPropHtmlType
    pull_request: WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropLinksPropPullRequestType
    self_: WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropLinksPropSelfType


class WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropLinksPropHtmlType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropLinksPropPullRequestType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropLinksPropSelfType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropReactionsType(
    TypedDict
):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropUserType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestReviewThreadUnresolvedType(TypedDict):
    """pull_request_review_thread unresolved event"""

    action: Literal["unresolved"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    pull_request: WebhookPullRequestReviewThreadUnresolvedPropPullRequestType
    repository: RepositoryWebhooksType
    sender: NotRequired[SimpleUserWebhooksType]
    thread: WebhookPullRequestReviewThreadUnresolvedPropThreadType


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestType(TypedDict):
    """Simple Pull Request"""

    links: WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksType
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    assignee: Union[
        WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropAssigneeType, None
    ]
    assignees: List[
        Union[
            WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropAssigneesItemsType,
            None,
        ]
    ]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    auto_merge: Union[
        WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropAutoMergeType, None
    ]
    base: WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBaseType
    body: Union[str, None]
    closed_at: Union[str, None]
    comments_url: str
    commits_url: str
    created_at: str
    diff_url: str
    draft: bool
    head: WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHeadType
    html_url: str
    id: int
    issue_url: str
    labels: List[
        WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLabelsItemsType
    ]
    locked: bool
    merge_commit_sha: Union[str, None]
    merged_at: Union[str, None]
    milestone: Union[
        WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropMilestoneType, None
    ]
    node_id: str
    number: int
    patch_url: str
    requested_reviewers: List[
        Union[
            WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropRequestedReviewersItemsOneof0Type,
            None,
            WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropRequestedReviewersItemsOneof1Type,
        ]
    ]
    requested_teams: List[
        WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropRequestedTeamsItemsType
    ]
    review_comment_url: str
    review_comments_url: str
    state: Literal["open", "closed"]
    statuses_url: str
    title: str
    updated_at: str
    url: str
    user: Union[
        WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropUserType, None
    ]


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksType(TypedDict):
    """WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinks"""

    comments: WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropCommentsType
    commits: WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropCommitsType
    html: WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropHtmlType
    issue: WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropIssueType
    review_comment: WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropReviewCommentType
    review_comments: WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropReviewCommentsType
    self_: WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropSelfType
    statuses: WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropStatusesType


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropCommentsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropCommitsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropHtmlType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropIssueType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropReviewCommentType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropReviewCommentsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropSelfType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropStatusesType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropAssigneeType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropAssigneesItemsType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropAutoMergePropEnabledByType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropAutoMergeType(
    TypedDict
):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None]
    commit_title: str
    enabled_by: Union[
        WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropAutoMergePropEnabledByType,
        None,
    ]
    merge_method: Literal["merge", "squash", "rebase"]


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBaseType(TypedDict):
    """WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBase"""

    label: str
    ref: str
    repo: WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBasePropRepoType
    sha: str
    user: Union[
        WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBasePropUserType,
        None,
    ]


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBasePropRepoType(
    TypedDict
):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBasePropRepoPropLicenseType,
        None,
    ]
    master_branch: NotRequired[str]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBasePropRepoPropOwnerType,
        None,
    ]
    permissions: NotRequired[
        WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBasePropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBasePropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBasePropRepoPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBasePropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBasePropRepoPropPermi
    ssions
    """

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBasePropUserType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHeadType(TypedDict):
    """WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHead"""

    label: str
    ref: str
    repo: WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHeadPropRepoType
    sha: str
    user: Union[
        WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHeadPropUserType,
        None,
    ]


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHeadPropRepoType(
    TypedDict
):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHeadPropRepoPropLicenseType,
        None,
    ]
    master_branch: NotRequired[str]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHeadPropRepoPropOwnerType,
        None,
    ]
    permissions: NotRequired[
        WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHeadPropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHeadPropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHeadPropRepoPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHeadPropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHeadPropRepoPropPermi
    ssions
    """

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHeadPropUserType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLabelsItemsType(
    TypedDict
):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropMilestonePropCreatorType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropMilestoneType(
    TypedDict
):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[
        WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropMilestonePropCreatorType,
        None,
    ]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropRequestedReviewersItemsOneof0Type(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropRequestedReviewersItemsOneof1Type(
    TypedDict
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: NotRequired[Union[str, None]]
    html_url: NotRequired[str]
    id: int
    members_url: NotRequired[str]
    name: str
    node_id: NotRequired[str]
    parent: NotRequired[
        Union[
            WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType,
            None,
        ]
    ]
    permission: NotRequired[str]
    privacy: NotRequired[Literal["open", "closed", "secret"]]
    repositories_url: NotRequired[str]
    slug: NotRequired[str]
    url: NotRequired[str]


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType(
    TypedDict
):
    """WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropRequestedReviewersIte
    msOneof1PropParent
    """

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropRequestedTeamsItemsType(
    TypedDict
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: NotRequired[Union[str, None]]
    html_url: NotRequired[str]
    id: int
    members_url: NotRequired[str]
    name: str
    node_id: NotRequired[str]
    parent: NotRequired[
        Union[
            WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropRequestedTeamsItemsPropParentType,
            None,
        ]
    ]
    permission: NotRequired[str]
    privacy: NotRequired[Literal["open", "closed", "secret"]]
    repositories_url: NotRequired[str]
    slug: NotRequired[str]
    url: NotRequired[str]


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropRequestedTeamsItemsPropParentType(
    TypedDict
):
    """WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropRequestedTeamsItemsPr
    opParent
    """

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestReviewThreadUnresolvedPropThreadType(TypedDict):
    """WebhookPullRequestReviewThreadUnresolvedPropThread"""

    comments: List[
        WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsType
    ]
    node_id: str


class WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsType(
    TypedDict
):
    """Pull Request Review Comment

    The [comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-
    for-a-pull-request) itself.
    """

    links: WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropLinksType
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    body: str
    commit_id: str
    created_at: datetime
    diff_hunk: str
    html_url: str
    id: int
    in_reply_to_id: NotRequired[int]
    line: Union[int, None]
    node_id: str
    original_commit_id: str
    original_line: int
    original_position: int
    original_start_line: Union[int, None]
    path: str
    position: Union[int, None]
    pull_request_review_id: Union[int, None]
    pull_request_url: str
    reactions: WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropReactionsType
    side: Literal["LEFT", "RIGHT"]
    start_line: Union[int, None]
    start_side: Union[None, Literal["LEFT", "RIGHT"]]
    subject_type: NotRequired[Literal["line", "file"]]
    updated_at: datetime
    url: str
    user: Union[
        WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropUserType,
        None,
    ]


class WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropLinksType(
    TypedDict
):
    """WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropLinks"""

    html: WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropLinksPropHtmlType
    pull_request: WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropLinksPropPullRequestType
    self_: WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropLinksPropSelfType


class WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropLinksPropHtmlType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropLinksPropPullRequestType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropLinksPropSelfType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropReactionsType(
    TypedDict
):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropUserType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestSynchronizeType(TypedDict):
    """pull_request synchronize event"""

    action: Literal["synchronize"]
    after: str
    before: str
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    number: int
    organization: NotRequired[OrganizationSimpleWebhooksType]
    pull_request: WebhookPullRequestSynchronizePropPullRequestType
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookPullRequestSynchronizePropPullRequestType(TypedDict):
    """Pull Request"""

    links: WebhookPullRequestSynchronizePropPullRequestPropLinksType
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    additions: NotRequired[int]
    assignee: Union[WebhookPullRequestSynchronizePropPullRequestPropAssigneeType, None]
    assignees: List[
        Union[WebhookPullRequestSynchronizePropPullRequestPropAssigneesItemsType, None]
    ]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    auto_merge: Union[
        WebhookPullRequestSynchronizePropPullRequestPropAutoMergeType, None
    ]
    base: WebhookPullRequestSynchronizePropPullRequestPropBaseType
    body: Union[str, None]
    changed_files: NotRequired[int]
    closed_at: Union[datetime, None]
    comments: NotRequired[int]
    comments_url: str
    commits: NotRequired[int]
    commits_url: str
    created_at: datetime
    deletions: NotRequired[int]
    diff_url: str
    draft: bool
    head: WebhookPullRequestSynchronizePropPullRequestPropHeadType
    html_url: str
    id: int
    issue_url: str
    labels: List[WebhookPullRequestSynchronizePropPullRequestPropLabelsItemsType]
    locked: bool
    maintainer_can_modify: NotRequired[bool]
    merge_commit_sha: Union[str, None]
    mergeable: NotRequired[Union[bool, None]]
    mergeable_state: NotRequired[str]
    merged: NotRequired[Union[bool, None]]
    merged_at: Union[datetime, None]
    merged_by: NotRequired[
        Union[WebhookPullRequestSynchronizePropPullRequestPropMergedByType, None]
    ]
    milestone: Union[
        WebhookPullRequestSynchronizePropPullRequestPropMilestoneType, None
    ]
    node_id: str
    number: int
    patch_url: str
    rebaseable: NotRequired[Union[bool, None]]
    requested_reviewers: List[
        Union[
            WebhookPullRequestSynchronizePropPullRequestPropRequestedReviewersItemsOneof0Type,
            None,
            WebhookPullRequestSynchronizePropPullRequestPropRequestedReviewersItemsOneof1Type,
        ]
    ]
    requested_teams: List[
        WebhookPullRequestSynchronizePropPullRequestPropRequestedTeamsItemsType
    ]
    review_comment_url: str
    review_comments: NotRequired[int]
    review_comments_url: str
    state: Literal["open", "closed"]
    statuses_url: str
    title: str
    updated_at: datetime
    url: str
    user: Union[WebhookPullRequestSynchronizePropPullRequestPropUserType, None]


class WebhookPullRequestSynchronizePropPullRequestPropLinksType(TypedDict):
    """WebhookPullRequestSynchronizePropPullRequestPropLinks"""

    comments: WebhookPullRequestSynchronizePropPullRequestPropLinksPropCommentsType
    commits: WebhookPullRequestSynchronizePropPullRequestPropLinksPropCommitsType
    html: WebhookPullRequestSynchronizePropPullRequestPropLinksPropHtmlType
    issue: WebhookPullRequestSynchronizePropPullRequestPropLinksPropIssueType
    review_comment: WebhookPullRequestSynchronizePropPullRequestPropLinksPropReviewCommentType
    review_comments: WebhookPullRequestSynchronizePropPullRequestPropLinksPropReviewCommentsType
    self_: WebhookPullRequestSynchronizePropPullRequestPropLinksPropSelfType
    statuses: WebhookPullRequestSynchronizePropPullRequestPropLinksPropStatusesType


class WebhookPullRequestSynchronizePropPullRequestPropLinksPropCommentsType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestSynchronizePropPullRequestPropLinksPropCommitsType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestSynchronizePropPullRequestPropLinksPropHtmlType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestSynchronizePropPullRequestPropLinksPropIssueType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestSynchronizePropPullRequestPropLinksPropReviewCommentType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestSynchronizePropPullRequestPropLinksPropReviewCommentsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestSynchronizePropPullRequestPropLinksPropSelfType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestSynchronizePropPullRequestPropLinksPropStatusesType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestSynchronizePropPullRequestPropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestSynchronizePropPullRequestPropAssigneesItemsType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestSynchronizePropPullRequestPropAutoMergePropEnabledByType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestSynchronizePropPullRequestPropAutoMergeType(TypedDict):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None]
    commit_title: Union[str, None]
    enabled_by: Union[
        WebhookPullRequestSynchronizePropPullRequestPropAutoMergePropEnabledByType, None
    ]
    merge_method: Literal["merge", "squash", "rebase"]


class WebhookPullRequestSynchronizePropPullRequestPropBaseType(TypedDict):
    """WebhookPullRequestSynchronizePropPullRequestPropBase"""

    label: str
    ref: str
    repo: WebhookPullRequestSynchronizePropPullRequestPropBasePropRepoType
    sha: str
    user: Union[WebhookPullRequestSynchronizePropPullRequestPropBasePropUserType, None]


class WebhookPullRequestSynchronizePropPullRequestPropBasePropRepoType(TypedDict):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestSynchronizePropPullRequestPropBasePropRepoPropLicenseType,
        None,
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestSynchronizePropPullRequestPropBasePropRepoPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookPullRequestSynchronizePropPullRequestPropBasePropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestSynchronizePropPullRequestPropBasePropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestSynchronizePropPullRequestPropBasePropRepoPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestSynchronizePropPullRequestPropBasePropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestSynchronizePropPullRequestPropBasePropRepoPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestSynchronizePropPullRequestPropBasePropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestSynchronizePropPullRequestPropHeadType(TypedDict):
    """WebhookPullRequestSynchronizePropPullRequestPropHead"""

    label: str
    ref: str
    repo: WebhookPullRequestSynchronizePropPullRequestPropHeadPropRepoType
    sha: str
    user: Union[WebhookPullRequestSynchronizePropPullRequestPropHeadPropUserType, None]


class WebhookPullRequestSynchronizePropPullRequestPropHeadPropRepoType(TypedDict):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestSynchronizePropPullRequestPropHeadPropRepoPropLicenseType,
        None,
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestSynchronizePropPullRequestPropHeadPropRepoPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookPullRequestSynchronizePropPullRequestPropHeadPropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestSynchronizePropPullRequestPropHeadPropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestSynchronizePropPullRequestPropHeadPropRepoPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestSynchronizePropPullRequestPropHeadPropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestSynchronizePropPullRequestPropHeadPropRepoPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestSynchronizePropPullRequestPropHeadPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestSynchronizePropPullRequestPropLabelsItemsType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookPullRequestSynchronizePropPullRequestPropMergedByType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestSynchronizePropPullRequestPropMilestonePropCreatorType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestSynchronizePropPullRequestPropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[
        WebhookPullRequestSynchronizePropPullRequestPropMilestonePropCreatorType, None
    ]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookPullRequestSynchronizePropPullRequestPropRequestedReviewersItemsOneof0Type(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestSynchronizePropPullRequestPropRequestedReviewersItemsOneof1Type(
    TypedDict
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    parent: NotRequired[
        Union[
            WebhookPullRequestSynchronizePropPullRequestPropRequestedReviewersItemsOneof1PropParentType,
            None,
        ]
    ]
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestSynchronizePropPullRequestPropRequestedReviewersItemsOneof1PropParentType(
    TypedDict
):
    """WebhookPullRequestSynchronizePropPullRequestPropRequestedReviewersItemsOneof1Pro
    pParent
    """

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestSynchronizePropPullRequestPropRequestedTeamsItemsType(
    TypedDict
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: NotRequired[Union[str, None]]
    html_url: NotRequired[str]
    id: int
    members_url: NotRequired[str]
    name: str
    node_id: NotRequired[str]
    parent: NotRequired[
        Union[
            WebhookPullRequestSynchronizePropPullRequestPropRequestedTeamsItemsPropParentType,
            None,
        ]
    ]
    permission: NotRequired[str]
    privacy: NotRequired[Literal["open", "closed", "secret"]]
    repositories_url: NotRequired[str]
    slug: NotRequired[str]
    url: NotRequired[str]


class WebhookPullRequestSynchronizePropPullRequestPropRequestedTeamsItemsPropParentType(
    TypedDict
):
    """WebhookPullRequestSynchronizePropPullRequestPropRequestedTeamsItemsPropParent"""

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestSynchronizePropPullRequestPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestUnassignedType(TypedDict):
    """pull_request unassigned event"""

    action: Literal["unassigned"]
    assignee: NotRequired[Union[WebhookPullRequestUnassignedPropAssigneeType, None]]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    number: int
    organization: NotRequired[OrganizationSimpleWebhooksType]
    pull_request: WebhookPullRequestUnassignedPropPullRequestType
    repository: RepositoryWebhooksType
    sender: NotRequired[SimpleUserWebhooksType]


class WebhookPullRequestUnassignedPropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestUnassignedPropPullRequestType(TypedDict):
    """Pull Request"""

    links: WebhookPullRequestUnassignedPropPullRequestPropLinksType
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    additions: NotRequired[int]
    assignee: Union[WebhookPullRequestUnassignedPropPullRequestPropAssigneeType, None]
    assignees: List[
        Union[WebhookPullRequestUnassignedPropPullRequestPropAssigneesItemsType, None]
    ]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    auto_merge: Union[
        WebhookPullRequestUnassignedPropPullRequestPropAutoMergeType, None
    ]
    base: WebhookPullRequestUnassignedPropPullRequestPropBaseType
    body: Union[str, None]
    changed_files: NotRequired[int]
    closed_at: Union[datetime, None]
    comments: NotRequired[int]
    comments_url: str
    commits: NotRequired[int]
    commits_url: str
    created_at: datetime
    deletions: NotRequired[int]
    diff_url: str
    draft: bool
    head: WebhookPullRequestUnassignedPropPullRequestPropHeadType
    html_url: str
    id: int
    issue_url: str
    labels: List[WebhookPullRequestUnassignedPropPullRequestPropLabelsItemsType]
    locked: bool
    maintainer_can_modify: NotRequired[bool]
    merge_commit_sha: Union[str, None]
    mergeable: NotRequired[Union[bool, None]]
    mergeable_state: NotRequired[str]
    merged: NotRequired[Union[bool, None]]
    merged_at: Union[datetime, None]
    merged_by: NotRequired[
        Union[WebhookPullRequestUnassignedPropPullRequestPropMergedByType, None]
    ]
    milestone: Union[WebhookPullRequestUnassignedPropPullRequestPropMilestoneType, None]
    node_id: str
    number: int
    patch_url: str
    rebaseable: NotRequired[Union[bool, None]]
    requested_reviewers: List[
        Union[
            WebhookPullRequestUnassignedPropPullRequestPropRequestedReviewersItemsOneof0Type,
            None,
            WebhookPullRequestUnassignedPropPullRequestPropRequestedReviewersItemsOneof1Type,
        ]
    ]
    requested_teams: List[
        WebhookPullRequestUnassignedPropPullRequestPropRequestedTeamsItemsType
    ]
    review_comment_url: str
    review_comments: NotRequired[int]
    review_comments_url: str
    state: Literal["open", "closed"]
    statuses_url: str
    title: str
    updated_at: datetime
    url: str
    user: Union[WebhookPullRequestUnassignedPropPullRequestPropUserType, None]


class WebhookPullRequestUnassignedPropPullRequestPropLinksType(TypedDict):
    """WebhookPullRequestUnassignedPropPullRequestPropLinks"""

    comments: WebhookPullRequestUnassignedPropPullRequestPropLinksPropCommentsType
    commits: WebhookPullRequestUnassignedPropPullRequestPropLinksPropCommitsType
    html: WebhookPullRequestUnassignedPropPullRequestPropLinksPropHtmlType
    issue: WebhookPullRequestUnassignedPropPullRequestPropLinksPropIssueType
    review_comment: WebhookPullRequestUnassignedPropPullRequestPropLinksPropReviewCommentType
    review_comments: WebhookPullRequestUnassignedPropPullRequestPropLinksPropReviewCommentsType
    self_: WebhookPullRequestUnassignedPropPullRequestPropLinksPropSelfType
    statuses: WebhookPullRequestUnassignedPropPullRequestPropLinksPropStatusesType


class WebhookPullRequestUnassignedPropPullRequestPropLinksPropCommentsType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestUnassignedPropPullRequestPropLinksPropCommitsType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestUnassignedPropPullRequestPropLinksPropHtmlType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestUnassignedPropPullRequestPropLinksPropIssueType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestUnassignedPropPullRequestPropLinksPropReviewCommentType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestUnassignedPropPullRequestPropLinksPropReviewCommentsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestUnassignedPropPullRequestPropLinksPropSelfType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestUnassignedPropPullRequestPropLinksPropStatusesType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestUnassignedPropPullRequestPropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestUnassignedPropPullRequestPropAssigneesItemsType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestUnassignedPropPullRequestPropAutoMergePropEnabledByType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestUnassignedPropPullRequestPropAutoMergeType(TypedDict):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None]
    commit_title: Union[str, None]
    enabled_by: Union[
        WebhookPullRequestUnassignedPropPullRequestPropAutoMergePropEnabledByType, None
    ]
    merge_method: Literal["merge", "squash", "rebase"]


class WebhookPullRequestUnassignedPropPullRequestPropBaseType(TypedDict):
    """WebhookPullRequestUnassignedPropPullRequestPropBase"""

    label: Union[str, None]
    ref: str
    repo: WebhookPullRequestUnassignedPropPullRequestPropBasePropRepoType
    sha: str
    user: Union[WebhookPullRequestUnassignedPropPullRequestPropBasePropUserType, None]


class WebhookPullRequestUnassignedPropPullRequestPropBasePropRepoType(TypedDict):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestUnassignedPropPullRequestPropBasePropRepoPropLicenseType, None
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestUnassignedPropPullRequestPropBasePropRepoPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookPullRequestUnassignedPropPullRequestPropBasePropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestUnassignedPropPullRequestPropBasePropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestUnassignedPropPullRequestPropBasePropRepoPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestUnassignedPropPullRequestPropBasePropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestUnassignedPropPullRequestPropBasePropRepoPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestUnassignedPropPullRequestPropBasePropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestUnassignedPropPullRequestPropHeadType(TypedDict):
    """WebhookPullRequestUnassignedPropPullRequestPropHead"""

    label: Union[str, None]
    ref: str
    repo: Union[WebhookPullRequestUnassignedPropPullRequestPropHeadPropRepoType, None]
    sha: str
    user: Union[WebhookPullRequestUnassignedPropPullRequestPropHeadPropUserType, None]


class WebhookPullRequestUnassignedPropPullRequestPropHeadPropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestUnassignedPropPullRequestPropHeadPropRepoPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestUnassignedPropPullRequestPropHeadPropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestUnassignedPropPullRequestPropHeadPropRepoPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestUnassignedPropPullRequestPropHeadPropRepoType(TypedDict):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestUnassignedPropPullRequestPropHeadPropRepoPropLicenseType, None
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestUnassignedPropPullRequestPropHeadPropRepoPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookPullRequestUnassignedPropPullRequestPropHeadPropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestUnassignedPropPullRequestPropHeadPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestUnassignedPropPullRequestPropLabelsItemsType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookPullRequestUnassignedPropPullRequestPropMergedByType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestUnassignedPropPullRequestPropMilestonePropCreatorType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestUnassignedPropPullRequestPropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[
        WebhookPullRequestUnassignedPropPullRequestPropMilestonePropCreatorType, None
    ]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookPullRequestUnassignedPropPullRequestPropRequestedReviewersItemsOneof0Type(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestUnassignedPropPullRequestPropRequestedReviewersItemsOneof1Type(
    TypedDict
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    parent: NotRequired[
        Union[
            WebhookPullRequestUnassignedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType,
            None,
        ]
    ]
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestUnassignedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType(
    TypedDict
):
    """WebhookPullRequestUnassignedPropPullRequestPropRequestedReviewersItemsOneof1Prop
    Parent
    """

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestUnassignedPropPullRequestPropRequestedTeamsItemsType(TypedDict):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: NotRequired[Union[str, None]]
    html_url: NotRequired[str]
    id: int
    members_url: NotRequired[str]
    name: str
    node_id: NotRequired[str]
    parent: NotRequired[
        Union[
            WebhookPullRequestUnassignedPropPullRequestPropRequestedTeamsItemsPropParentType,
            None,
        ]
    ]
    permission: NotRequired[str]
    privacy: NotRequired[Literal["open", "closed", "secret"]]
    repositories_url: NotRequired[str]
    slug: NotRequired[str]
    url: NotRequired[str]


class WebhookPullRequestUnassignedPropPullRequestPropRequestedTeamsItemsPropParentType(
    TypedDict
):
    """WebhookPullRequestUnassignedPropPullRequestPropRequestedTeamsItemsPropParent"""

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestUnassignedPropPullRequestPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestUnlabeledType(TypedDict):
    """pull_request unlabeled event"""

    action: Literal["unlabeled"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    label: NotRequired[WebhookPullRequestUnlabeledPropLabelType]
    number: int
    organization: NotRequired[OrganizationSimpleWebhooksType]
    pull_request: WebhookPullRequestUnlabeledPropPullRequestType
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookPullRequestUnlabeledPropLabelType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookPullRequestUnlabeledPropPullRequestType(TypedDict):
    """Pull Request"""

    links: WebhookPullRequestUnlabeledPropPullRequestPropLinksType
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    additions: NotRequired[int]
    assignee: Union[WebhookPullRequestUnlabeledPropPullRequestPropAssigneeType, None]
    assignees: List[
        Union[WebhookPullRequestUnlabeledPropPullRequestPropAssigneesItemsType, None]
    ]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    auto_merge: Union[WebhookPullRequestUnlabeledPropPullRequestPropAutoMergeType, None]
    base: WebhookPullRequestUnlabeledPropPullRequestPropBaseType
    body: Union[str, None]
    changed_files: NotRequired[int]
    closed_at: Union[datetime, None]
    comments: NotRequired[int]
    comments_url: str
    commits: NotRequired[int]
    commits_url: str
    created_at: datetime
    deletions: NotRequired[int]
    diff_url: str
    draft: bool
    head: WebhookPullRequestUnlabeledPropPullRequestPropHeadType
    html_url: str
    id: int
    issue_url: str
    labels: List[WebhookPullRequestUnlabeledPropPullRequestPropLabelsItemsType]
    locked: bool
    maintainer_can_modify: NotRequired[bool]
    merge_commit_sha: Union[str, None]
    mergeable: NotRequired[Union[bool, None]]
    mergeable_state: NotRequired[str]
    merged: NotRequired[Union[bool, None]]
    merged_at: Union[datetime, None]
    merged_by: NotRequired[
        Union[WebhookPullRequestUnlabeledPropPullRequestPropMergedByType, None]
    ]
    milestone: Union[WebhookPullRequestUnlabeledPropPullRequestPropMilestoneType, None]
    node_id: str
    number: int
    patch_url: str
    rebaseable: NotRequired[Union[bool, None]]
    requested_reviewers: List[
        Union[
            WebhookPullRequestUnlabeledPropPullRequestPropRequestedReviewersItemsOneof0Type,
            None,
            WebhookPullRequestUnlabeledPropPullRequestPropRequestedReviewersItemsOneof1Type,
        ]
    ]
    requested_teams: List[
        WebhookPullRequestUnlabeledPropPullRequestPropRequestedTeamsItemsType
    ]
    review_comment_url: str
    review_comments: NotRequired[int]
    review_comments_url: str
    state: Literal["open", "closed"]
    statuses_url: str
    title: str
    updated_at: datetime
    url: str
    user: Union[WebhookPullRequestUnlabeledPropPullRequestPropUserType, None]


class WebhookPullRequestUnlabeledPropPullRequestPropLinksType(TypedDict):
    """WebhookPullRequestUnlabeledPropPullRequestPropLinks"""

    comments: WebhookPullRequestUnlabeledPropPullRequestPropLinksPropCommentsType
    commits: WebhookPullRequestUnlabeledPropPullRequestPropLinksPropCommitsType
    html: WebhookPullRequestUnlabeledPropPullRequestPropLinksPropHtmlType
    issue: WebhookPullRequestUnlabeledPropPullRequestPropLinksPropIssueType
    review_comment: WebhookPullRequestUnlabeledPropPullRequestPropLinksPropReviewCommentType
    review_comments: WebhookPullRequestUnlabeledPropPullRequestPropLinksPropReviewCommentsType
    self_: WebhookPullRequestUnlabeledPropPullRequestPropLinksPropSelfType
    statuses: WebhookPullRequestUnlabeledPropPullRequestPropLinksPropStatusesType


class WebhookPullRequestUnlabeledPropPullRequestPropLinksPropCommentsType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestUnlabeledPropPullRequestPropLinksPropCommitsType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestUnlabeledPropPullRequestPropLinksPropHtmlType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestUnlabeledPropPullRequestPropLinksPropIssueType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestUnlabeledPropPullRequestPropLinksPropReviewCommentType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestUnlabeledPropPullRequestPropLinksPropReviewCommentsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestUnlabeledPropPullRequestPropLinksPropSelfType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestUnlabeledPropPullRequestPropLinksPropStatusesType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestUnlabeledPropPullRequestPropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestUnlabeledPropPullRequestPropAssigneesItemsType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestUnlabeledPropPullRequestPropAutoMergePropEnabledByType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestUnlabeledPropPullRequestPropAutoMergeType(TypedDict):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None]
    commit_title: Union[str, None]
    enabled_by: Union[
        WebhookPullRequestUnlabeledPropPullRequestPropAutoMergePropEnabledByType, None
    ]
    merge_method: Literal["merge", "squash", "rebase"]


class WebhookPullRequestUnlabeledPropPullRequestPropBaseType(TypedDict):
    """WebhookPullRequestUnlabeledPropPullRequestPropBase"""

    label: str
    ref: str
    repo: WebhookPullRequestUnlabeledPropPullRequestPropBasePropRepoType
    sha: str
    user: Union[WebhookPullRequestUnlabeledPropPullRequestPropBasePropUserType, None]


class WebhookPullRequestUnlabeledPropPullRequestPropBasePropRepoType(TypedDict):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestUnlabeledPropPullRequestPropBasePropRepoPropLicenseType, None
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestUnlabeledPropPullRequestPropBasePropRepoPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookPullRequestUnlabeledPropPullRequestPropBasePropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestUnlabeledPropPullRequestPropBasePropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestUnlabeledPropPullRequestPropBasePropRepoPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestUnlabeledPropPullRequestPropBasePropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestUnlabeledPropPullRequestPropBasePropRepoPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestUnlabeledPropPullRequestPropBasePropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestUnlabeledPropPullRequestPropHeadType(TypedDict):
    """WebhookPullRequestUnlabeledPropPullRequestPropHead"""

    label: Union[str, None]
    ref: str
    repo: Union[WebhookPullRequestUnlabeledPropPullRequestPropHeadPropRepoType, None]
    sha: str
    user: Union[WebhookPullRequestUnlabeledPropPullRequestPropHeadPropUserType, None]


class WebhookPullRequestUnlabeledPropPullRequestPropHeadPropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestUnlabeledPropPullRequestPropHeadPropRepoPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestUnlabeledPropPullRequestPropHeadPropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestUnlabeledPropPullRequestPropHeadPropRepoPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestUnlabeledPropPullRequestPropHeadPropRepoType(TypedDict):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestUnlabeledPropPullRequestPropHeadPropRepoPropLicenseType, None
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestUnlabeledPropPullRequestPropHeadPropRepoPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookPullRequestUnlabeledPropPullRequestPropHeadPropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestUnlabeledPropPullRequestPropHeadPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestUnlabeledPropPullRequestPropLabelsItemsType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookPullRequestUnlabeledPropPullRequestPropMergedByType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestUnlabeledPropPullRequestPropMilestonePropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestUnlabeledPropPullRequestPropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[
        WebhookPullRequestUnlabeledPropPullRequestPropMilestonePropCreatorType, None
    ]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookPullRequestUnlabeledPropPullRequestPropRequestedReviewersItemsOneof0Type(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestUnlabeledPropPullRequestPropRequestedReviewersItemsOneof1Type(
    TypedDict
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    parent: NotRequired[
        Union[
            WebhookPullRequestUnlabeledPropPullRequestPropRequestedReviewersItemsOneof1PropParentType,
            None,
        ]
    ]
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestUnlabeledPropPullRequestPropRequestedReviewersItemsOneof1PropParentType(
    TypedDict
):
    """WebhookPullRequestUnlabeledPropPullRequestPropRequestedReviewersItemsOneof1PropP
    arent
    """

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestUnlabeledPropPullRequestPropRequestedTeamsItemsType(TypedDict):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: NotRequired[Union[str, None]]
    html_url: NotRequired[str]
    id: int
    members_url: NotRequired[str]
    name: str
    node_id: NotRequired[str]
    parent: NotRequired[
        Union[
            WebhookPullRequestUnlabeledPropPullRequestPropRequestedTeamsItemsPropParentType,
            None,
        ]
    ]
    permission: NotRequired[str]
    privacy: NotRequired[Literal["open", "closed", "secret"]]
    repositories_url: NotRequired[str]
    slug: NotRequired[str]
    url: NotRequired[str]


class WebhookPullRequestUnlabeledPropPullRequestPropRequestedTeamsItemsPropParentType(
    TypedDict
):
    """WebhookPullRequestUnlabeledPropPullRequestPropRequestedTeamsItemsPropParent"""

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestUnlabeledPropPullRequestPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization", "Mannequin"]]
    url: NotRequired[str]


class WebhookPullRequestUnlockedType(TypedDict):
    """pull_request unlocked event"""

    action: Literal["unlocked"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    number: int
    organization: NotRequired[OrganizationSimpleWebhooksType]
    pull_request: WebhookPullRequestUnlockedPropPullRequestType
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookPullRequestUnlockedPropPullRequestType(TypedDict):
    """Pull Request"""

    links: WebhookPullRequestUnlockedPropPullRequestPropLinksType
    active_lock_reason: Union[
        None, Literal["resolved", "off-topic", "too heated", "spam"]
    ]
    additions: NotRequired[int]
    assignee: Union[WebhookPullRequestUnlockedPropPullRequestPropAssigneeType, None]
    assignees: List[
        Union[WebhookPullRequestUnlockedPropPullRequestPropAssigneesItemsType, None]
    ]
    author_association: Literal[
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
    ]
    auto_merge: Union[WebhookPullRequestUnlockedPropPullRequestPropAutoMergeType, None]
    base: WebhookPullRequestUnlockedPropPullRequestPropBaseType
    body: Union[str, None]
    changed_files: NotRequired[int]
    closed_at: Union[datetime, None]
    comments: NotRequired[int]
    comments_url: str
    commits: NotRequired[int]
    commits_url: str
    created_at: datetime
    deletions: NotRequired[int]
    diff_url: str
    draft: bool
    head: WebhookPullRequestUnlockedPropPullRequestPropHeadType
    html_url: str
    id: int
    issue_url: str
    labels: List[WebhookPullRequestUnlockedPropPullRequestPropLabelsItemsType]
    locked: bool
    maintainer_can_modify: NotRequired[bool]
    merge_commit_sha: Union[str, None]
    mergeable: NotRequired[Union[bool, None]]
    mergeable_state: NotRequired[str]
    merged: NotRequired[Union[bool, None]]
    merged_at: Union[datetime, None]
    merged_by: NotRequired[
        Union[WebhookPullRequestUnlockedPropPullRequestPropMergedByType, None]
    ]
    milestone: Union[WebhookPullRequestUnlockedPropPullRequestPropMilestoneType, None]
    node_id: str
    number: int
    patch_url: str
    rebaseable: NotRequired[Union[bool, None]]
    requested_reviewers: List[
        Union[
            WebhookPullRequestUnlockedPropPullRequestPropRequestedReviewersItemsOneof0Type,
            None,
            WebhookPullRequestUnlockedPropPullRequestPropRequestedReviewersItemsOneof1Type,
        ]
    ]
    requested_teams: List[
        WebhookPullRequestUnlockedPropPullRequestPropRequestedTeamsItemsType
    ]
    review_comment_url: str
    review_comments: NotRequired[int]
    review_comments_url: str
    state: Literal["open", "closed"]
    statuses_url: str
    title: str
    updated_at: datetime
    url: str
    user: Union[WebhookPullRequestUnlockedPropPullRequestPropUserType, None]


class WebhookPullRequestUnlockedPropPullRequestPropLinksType(TypedDict):
    """WebhookPullRequestUnlockedPropPullRequestPropLinks"""

    comments: WebhookPullRequestUnlockedPropPullRequestPropLinksPropCommentsType
    commits: WebhookPullRequestUnlockedPropPullRequestPropLinksPropCommitsType
    html: WebhookPullRequestUnlockedPropPullRequestPropLinksPropHtmlType
    issue: WebhookPullRequestUnlockedPropPullRequestPropLinksPropIssueType
    review_comment: WebhookPullRequestUnlockedPropPullRequestPropLinksPropReviewCommentType
    review_comments: WebhookPullRequestUnlockedPropPullRequestPropLinksPropReviewCommentsType
    self_: WebhookPullRequestUnlockedPropPullRequestPropLinksPropSelfType
    statuses: WebhookPullRequestUnlockedPropPullRequestPropLinksPropStatusesType


class WebhookPullRequestUnlockedPropPullRequestPropLinksPropCommentsType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestUnlockedPropPullRequestPropLinksPropCommitsType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestUnlockedPropPullRequestPropLinksPropHtmlType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestUnlockedPropPullRequestPropLinksPropIssueType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestUnlockedPropPullRequestPropLinksPropReviewCommentType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestUnlockedPropPullRequestPropLinksPropReviewCommentsType(
    TypedDict
):
    """Link"""

    href: str


class WebhookPullRequestUnlockedPropPullRequestPropLinksPropSelfType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestUnlockedPropPullRequestPropLinksPropStatusesType(TypedDict):
    """Link"""

    href: str


class WebhookPullRequestUnlockedPropPullRequestPropAssigneeType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestUnlockedPropPullRequestPropAssigneesItemsType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestUnlockedPropPullRequestPropAutoMergePropEnabledByType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestUnlockedPropPullRequestPropAutoMergeType(TypedDict):
    """PullRequestAutoMerge

    The status of auto merging a pull request.
    """

    commit_message: Union[str, None]
    commit_title: str
    enabled_by: Union[
        WebhookPullRequestUnlockedPropPullRequestPropAutoMergePropEnabledByType, None
    ]
    merge_method: Literal["merge", "squash", "rebase"]


class WebhookPullRequestUnlockedPropPullRequestPropBaseType(TypedDict):
    """WebhookPullRequestUnlockedPropPullRequestPropBase"""

    label: str
    ref: str
    repo: WebhookPullRequestUnlockedPropPullRequestPropBasePropRepoType
    sha: str
    user: Union[WebhookPullRequestUnlockedPropPullRequestPropBasePropUserType, None]


class WebhookPullRequestUnlockedPropPullRequestPropBasePropRepoType(TypedDict):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestUnlockedPropPullRequestPropBasePropRepoPropLicenseType, None
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestUnlockedPropPullRequestPropBasePropRepoPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookPullRequestUnlockedPropPullRequestPropBasePropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestUnlockedPropPullRequestPropBasePropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestUnlockedPropPullRequestPropBasePropRepoPropOwnerType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestUnlockedPropPullRequestPropBasePropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestUnlockedPropPullRequestPropBasePropRepoPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestUnlockedPropPullRequestPropBasePropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestUnlockedPropPullRequestPropHeadType(TypedDict):
    """WebhookPullRequestUnlockedPropPullRequestPropHead"""

    label: str
    ref: str
    repo: Union[WebhookPullRequestUnlockedPropPullRequestPropHeadPropRepoType, None]
    sha: str
    user: Union[WebhookPullRequestUnlockedPropPullRequestPropHeadPropUserType, None]


class WebhookPullRequestUnlockedPropPullRequestPropHeadPropRepoPropLicenseType(
    TypedDict
):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPullRequestUnlockedPropPullRequestPropHeadPropRepoPropOwnerType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestUnlockedPropPullRequestPropHeadPropRepoPropPermissionsType(
    TypedDict
):
    """WebhookPullRequestUnlockedPropPullRequestPropHeadPropRepoPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookPullRequestUnlockedPropPullRequestPropHeadPropRepoType(TypedDict):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[
        WebhookPullRequestUnlockedPropPullRequestPropHeadPropRepoPropLicenseType, None
    ]
    master_branch: NotRequired[str]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[
        WebhookPullRequestUnlockedPropPullRequestPropHeadPropRepoPropOwnerType, None
    ]
    permissions: NotRequired[
        WebhookPullRequestUnlockedPropPullRequestPropHeadPropRepoPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    use_squash_pr_title_as_default: NotRequired[bool]
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPullRequestUnlockedPropPullRequestPropHeadPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestUnlockedPropPullRequestPropLabelsItemsType(TypedDict):
    """Label"""

    color: str
    default: bool
    description: Union[str, None]
    id: int
    name: str
    node_id: str
    url: str


class WebhookPullRequestUnlockedPropPullRequestPropMergedByType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestUnlockedPropPullRequestPropMilestonePropCreatorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestUnlockedPropPullRequestPropMilestoneType(TypedDict):
    """Milestone

    A collection of related issues and pull requests.
    """

    closed_at: Union[datetime, None]
    closed_issues: int
    created_at: datetime
    creator: Union[
        WebhookPullRequestUnlockedPropPullRequestPropMilestonePropCreatorType, None
    ]
    description: Union[str, None]
    due_on: Union[datetime, None]
    html_url: str
    id: int
    labels_url: str
    node_id: str
    number: int
    open_issues: int
    state: Literal["open", "closed"]
    title: str
    updated_at: datetime
    url: str


class WebhookPullRequestUnlockedPropPullRequestPropRequestedReviewersItemsOneof0Type(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPullRequestUnlockedPropPullRequestPropRequestedReviewersItemsOneof1Type(
    TypedDict
):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: NotRequired[Union[str, None]]
    html_url: NotRequired[str]
    id: int
    members_url: NotRequired[str]
    name: str
    node_id: NotRequired[str]
    parent: NotRequired[
        Union[
            WebhookPullRequestUnlockedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType,
            None,
        ]
    ]
    permission: NotRequired[str]
    privacy: NotRequired[Literal["open", "closed", "secret"]]
    repositories_url: NotRequired[str]
    slug: NotRequired[str]
    url: NotRequired[str]


class WebhookPullRequestUnlockedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType(
    TypedDict
):
    """WebhookPullRequestUnlockedPropPullRequestPropRequestedReviewersItemsOneof1PropPa
    rent
    """

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestUnlockedPropPullRequestPropRequestedTeamsItemsType(TypedDict):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: NotRequired[Union[str, None]]
    html_url: NotRequired[str]
    id: int
    members_url: NotRequired[str]
    name: str
    node_id: NotRequired[str]
    parent: NotRequired[
        Union[
            WebhookPullRequestUnlockedPropPullRequestPropRequestedTeamsItemsPropParentType,
            None,
        ]
    ]
    permission: NotRequired[str]
    privacy: NotRequired[Literal["open", "closed", "secret"]]
    repositories_url: NotRequired[str]
    slug: NotRequired[str]
    url: NotRequired[str]


class WebhookPullRequestUnlockedPropPullRequestPropRequestedTeamsItemsPropParentType(
    TypedDict
):
    """WebhookPullRequestUnlockedPropPullRequestPropRequestedTeamsItemsPropParent"""

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    repositories_url: str
    slug: str
    url: str


class WebhookPullRequestUnlockedPropPullRequestPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPushType(TypedDict):
    """push event"""

    after: str
    base_ref: Union[str, None]
    before: str
    commits: List[WebhookPushPropCommitsItemsType]
    compare: str
    created: bool
    deleted: bool
    enterprise: NotRequired[EnterpriseWebhooksType]
    forced: bool
    head_commit: Union[WebhookPushPropHeadCommitType, None]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    pusher: WebhookPushPropPusherType
    ref: str
    repository: WebhookPushPropRepositoryType
    sender: NotRequired[SimpleUserWebhooksType]


class WebhookPushPropCommitsItemsType(TypedDict):
    """Commit"""

    added: NotRequired[List[str]]
    author: WebhookPushPropCommitsItemsPropAuthorType
    committer: WebhookPushPropCommitsItemsPropCommitterType
    distinct: bool
    id: str
    message: str
    modified: NotRequired[List[str]]
    removed: NotRequired[List[str]]
    timestamp: datetime
    tree_id: str
    url: str


class WebhookPushPropCommitsItemsPropAuthorType(TypedDict):
    """Committer

    Metaproperties for Git author/committer information.
    """

    date: NotRequired[datetime]
    email: Union[str, None]
    name: str
    username: NotRequired[str]


class WebhookPushPropCommitsItemsPropCommitterType(TypedDict):
    """Committer

    Metaproperties for Git author/committer information.
    """

    date: NotRequired[datetime]
    email: Union[str, None]
    name: str
    username: NotRequired[str]


class WebhookPushPropHeadCommitPropAuthorType(TypedDict):
    """Committer

    Metaproperties for Git author/committer information.
    """

    date: NotRequired[datetime]
    email: Union[str, None]
    name: str
    username: NotRequired[str]


class WebhookPushPropHeadCommitPropCommitterType(TypedDict):
    """Committer

    Metaproperties for Git author/committer information.
    """

    date: NotRequired[datetime]
    email: Union[str, None]
    name: str
    username: NotRequired[str]


class WebhookPushPropHeadCommitType(TypedDict):
    """Commit"""

    added: NotRequired[List[str]]
    author: WebhookPushPropHeadCommitPropAuthorType
    committer: WebhookPushPropHeadCommitPropCommitterType
    distinct: bool
    id: str
    message: str
    modified: NotRequired[List[str]]
    removed: NotRequired[List[str]]
    timestamp: datetime
    tree_id: str
    url: str


class WebhookPushPropPusherType(TypedDict):
    """Committer

    Metaproperties for Git author/committer information.
    """

    date: NotRequired[datetime]
    email: NotRequired[Union[str, None]]
    name: str
    username: NotRequired[str]


class WebhookPushPropRepositoryType(TypedDict):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    custom_properties: NotRequired[WebhookPushPropRepositoryPropCustomPropertiesType]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    has_discussions: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[WebhookPushPropRepositoryPropLicenseType, None]
    master_branch: NotRequired[str]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[WebhookPushPropRepositoryPropOwnerType, None]
    permissions: NotRequired[WebhookPushPropRepositoryPropPermissionsType]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int
    web_commit_signoff_required: NotRequired[bool]


class WebhookPushPropRepositoryPropCustomPropertiesType(TypedDict):
    """WebhookPushPropRepositoryPropCustomProperties

    The custom properties that were defined for the repository. The keys are the
    custom property names, and the values are the corresponding custom property
    values.
    """


class WebhookPushPropRepositoryPropLicenseType(TypedDict):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookPushPropRepositoryPropOwnerType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookPushPropRepositoryPropPermissionsType(TypedDict):
    """WebhookPushPropRepositoryPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookRegistryPackagePublishedType(TypedDict):
    """WebhookRegistryPackagePublished"""

    action: Literal["published"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    registry_package: WebhookRegistryPackagePublishedPropRegistryPackageType
    repository: NotRequired[RepositoryWebhooksType]
    sender: SimpleUserWebhooksType


class WebhookRegistryPackagePublishedPropRegistryPackageType(TypedDict):
    """WebhookRegistryPackagePublishedPropRegistryPackage"""

    created_at: Union[str, None]
    description: Union[str, None]
    ecosystem: str
    html_url: str
    id: int
    name: str
    namespace: str
    owner: WebhookRegistryPackagePublishedPropRegistryPackagePropOwnerType
    package_type: str
    package_version: Union[
        WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionType, None
    ]
    registry: Union[
        WebhookRegistryPackagePublishedPropRegistryPackagePropRegistryType, None
    ]
    updated_at: Union[str, None]


class WebhookRegistryPackagePublishedPropRegistryPackagePropOwnerType(TypedDict):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropOwner"""

    avatar_url: str
    events_url: str
    followers_url: str
    following_url: str
    gists_url: str
    gravatar_id: str
    html_url: str
    id: int
    login: str
    node_id: str
    organizations_url: str
    received_events_url: str
    repos_url: str
    site_admin: bool
    starred_url: str
    subscriptions_url: str
    type: str
    url: str


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropAuthorType(
    TypedDict
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropAuthor"""

    avatar_url: str
    events_url: str
    followers_url: str
    following_url: str
    gists_url: str
    gravatar_id: str
    html_url: str
    id: int
    login: str
    node_id: str
    organizations_url: str
    received_events_url: str
    repos_url: str
    site_admin: bool
    starred_url: str
    subscriptions_url: str
    type: str
    url: str


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropBodyOneof1Type(
    TypedDict
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropBodyOneo
    f1
    """


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropContainerMetadataType(
    TypedDict
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropContaine
    rMetadata
    """

    labels: NotRequired[
        Union[
            WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropContainerMetadataPropLabelsType,
            None,
        ]
    ]
    manifest: NotRequired[
        Union[
            WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropContainerMetadataPropManifestType,
            None,
        ]
    ]
    tag: NotRequired[
        WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropContainerMetadataPropTagType
    ]


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropContainerMetadataPropLabelsType(
    TypedDict
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropContaine
    rMetadataPropLabels
    """


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropContainerMetadataPropManifestType(
    TypedDict
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropContaine
    rMetadataPropManifest
    """


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropContainerMetadataPropTagType(
    TypedDict
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropContaine
    rMetadataPropTag
    """

    digest: NotRequired[str]
    name: NotRequired[str]


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropDockerMetadataItemsType(
    TypedDict
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropDockerMe
    tadataItems
    """

    tags: NotRequired[List[str]]


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropMetadataItemsType(
    TypedDict
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropMetadata
    Items
    """


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropAuthorOneof1Type(
    TypedDict
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetad
    ataPropAuthorOneof1
    """


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropBugsOneof1Type(
    TypedDict
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetad
    ataPropBugsOneof1
    """


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropDependenciesType(
    TypedDict
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetad
    ataPropDependencies
    """


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropDevDependenciesType(
    TypedDict
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetad
    ataPropDevDependencies
    """


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropPeerDependenciesType(
    TypedDict
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetad
    ataPropPeerDependencies
    """


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropOptionalDependenciesType(
    TypedDict
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetad
    ataPropOptionalDependencies
    """


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropDistOneof1Type(
    TypedDict
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetad
    ataPropDistOneof1
    """


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropRepositoryOneof1Type(
    TypedDict
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetad
    ataPropRepositoryOneof1
    """


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropScriptsType(
    TypedDict
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetad
    ataPropScripts
    """


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropEnginesType(
    TypedDict
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetad
    ataPropEngines
    """


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropBinType(
    TypedDict
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetad
    ataPropBin
    """


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropManType(
    TypedDict
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetad
    ataPropMan
    """


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropDirectoriesOneof1Type(
    TypedDict
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetad
    ataPropDirectoriesOneof1
    """


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataType(
    TypedDict
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetad
    ata
    """

    name: NotRequired[str]
    version: NotRequired[str]
    npm_user: NotRequired[str]
    author: NotRequired[
        Union[
            str,
            WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropAuthorOneof1Type,
            None,
        ]
    ]
    bugs: NotRequired[
        Union[
            str,
            WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropBugsOneof1Type,
            None,
        ]
    ]
    dependencies: NotRequired[
        WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropDependenciesType
    ]
    dev_dependencies: NotRequired[
        WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropDevDependenciesType
    ]
    peer_dependencies: NotRequired[
        WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropPeerDependenciesType
    ]
    optional_dependencies: NotRequired[
        WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropOptionalDependenciesType
    ]
    description: NotRequired[str]
    dist: NotRequired[
        Union[
            str,
            WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropDistOneof1Type,
            None,
        ]
    ]
    git_head: NotRequired[str]
    homepage: NotRequired[str]
    license_: NotRequired[str]
    main: NotRequired[str]
    repository: NotRequired[
        Union[
            str,
            WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropRepositoryOneof1Type,
            None,
        ]
    ]
    scripts: NotRequired[
        WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropScriptsType
    ]
    id: NotRequired[str]
    node_version: NotRequired[str]
    npm_version: NotRequired[str]
    has_shrinkwrap: NotRequired[bool]
    maintainers: NotRequired[List[str]]
    contributors: NotRequired[List[str]]
    engines: NotRequired[
        WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropEnginesType
    ]
    keywords: NotRequired[List[str]]
    files: NotRequired[List[str]]
    bin_: NotRequired[
        WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropBinType
    ]
    man: NotRequired[
        WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropManType
    ]
    directories: NotRequired[
        Union[
            str,
            WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropDirectoriesOneof1Type,
            None,
        ]
    ]
    os: NotRequired[List[str]]
    cpu: NotRequired[List[str]]
    readme: NotRequired[str]
    installation_command: NotRequired[str]
    release_id: NotRequired[int]
    commit_oid: NotRequired[str]
    published_via_actions: NotRequired[bool]
    deleted_by_id: NotRequired[int]


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNugetMetadataItemsType(
    TypedDict
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNugetMet
    adataItems
    """

    id: NotRequired[
        Union[
            str,
            WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNugetMetadataItemsPropIdOneof1Type,
            int,
            None,
        ]
    ]
    name: NotRequired[str]
    value: NotRequired[
        Union[
            bool,
            str,
            int,
            WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNugetMetadataItemsPropValueOneof3Type,
        ]
    ]


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNugetMetadataItemsPropIdOneof1Type(
    TypedDict
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNugetMet
    adataItemsPropIdOneof1
    """


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNugetMetadataItemsPropValueOneof3Type(
    TypedDict
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNugetMet
    adataItemsPropValueOneof3
    """

    url: NotRequired[str]
    branch: NotRequired[str]
    commit: NotRequired[str]
    type: NotRequired[str]


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropPackageFilesItemsType(
    TypedDict
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropPackageF
    ilesItems
    """

    content_type: str
    created_at: str
    download_url: str
    id: int
    md5: Union[str, None]
    name: str
    sha1: Union[str, None]
    sha256: Union[str, None]
    size: int
    state: Union[str, None]
    updated_at: str


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropReleaseType(
    TypedDict
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropRelease"""

    author: NotRequired[
        WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropReleasePropAuthorType
    ]
    created_at: NotRequired[str]
    draft: NotRequired[bool]
    html_url: NotRequired[str]
    id: NotRequired[int]
    name: NotRequired[Union[str, None]]
    prerelease: NotRequired[bool]
    published_at: NotRequired[str]
    tag_name: NotRequired[str]
    target_commitish: NotRequired[str]
    url: NotRequired[str]


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropReleasePropAuthorType(
    TypedDict
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropReleaseP
    ropAuthor
    """

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionType(
    TypedDict
):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersion"""

    author: NotRequired[
        WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropAuthorType
    ]
    body: NotRequired[
        Union[
            str,
            WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropBodyOneof1Type,
        ]
    ]
    body_html: NotRequired[str]
    container_metadata: NotRequired[
        WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropContainerMetadataType
    ]
    created_at: NotRequired[str]
    description: str
    docker_metadata: NotRequired[
        List[
            WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropDockerMetadataItemsType
        ]
    ]
    draft: NotRequired[bool]
    html_url: str
    id: int
    installation_command: str
    manifest: NotRequired[str]
    metadata: List[
        WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropMetadataItemsType
    ]
    name: str
    npm_metadata: NotRequired[
        Union[
            WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataType,
            None,
        ]
    ]
    nuget_metadata: NotRequired[
        Union[
            List[
                WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNugetMetadataItemsType
            ],
            None,
        ]
    ]
    package_files: List[
        WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropPackageFilesItemsType
    ]
    package_url: str
    prerelease: NotRequired[bool]
    release: NotRequired[
        WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropReleaseType
    ]
    rubygems_metadata: NotRequired[List[WebhookRubygemsMetadataType]]
    summary: str
    tag_name: NotRequired[str]
    target_commitish: NotRequired[str]
    target_oid: NotRequired[str]
    updated_at: NotRequired[str]
    version: str


class WebhookRegistryPackagePublishedPropRegistryPackagePropRegistryType(TypedDict):
    """WebhookRegistryPackagePublishedPropRegistryPackagePropRegistry"""

    about_url: NotRequired[str]
    name: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]
    vendor: NotRequired[str]


class WebhookRegistryPackageUpdatedType(TypedDict):
    """WebhookRegistryPackageUpdated"""

    action: Literal["updated"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    registry_package: WebhookRegistryPackageUpdatedPropRegistryPackageType
    repository: NotRequired[RepositoryWebhooksType]
    sender: SimpleUserWebhooksType


class WebhookRegistryPackageUpdatedPropRegistryPackageType(TypedDict):
    """WebhookRegistryPackageUpdatedPropRegistryPackage"""

    created_at: str
    description: None
    ecosystem: str
    html_url: str
    id: int
    name: str
    namespace: str
    owner: WebhookRegistryPackageUpdatedPropRegistryPackagePropOwnerType
    package_type: str
    package_version: WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionType
    registry: Union[
        WebhookRegistryPackageUpdatedPropRegistryPackagePropRegistryType, None
    ]
    updated_at: str


class WebhookRegistryPackageUpdatedPropRegistryPackagePropOwnerType(TypedDict):
    """WebhookRegistryPackageUpdatedPropRegistryPackagePropOwner"""

    avatar_url: str
    events_url: str
    followers_url: str
    following_url: str
    gists_url: str
    gravatar_id: str
    html_url: str
    id: int
    login: str
    node_id: str
    organizations_url: str
    received_events_url: str
    repos_url: str
    site_admin: bool
    starred_url: str
    subscriptions_url: str
    type: str
    url: str


class WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionType(TypedDict):
    """WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersion"""

    author: WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropAuthorType
    body: str
    body_html: str
    created_at: str
    description: str
    docker_metadata: NotRequired[
        List[
            Union[
                WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropDockerMetadataItemsType,
                None,
            ]
        ]
    ]
    draft: NotRequired[bool]
    html_url: str
    id: int
    installation_command: str
    manifest: NotRequired[str]
    metadata: List[
        WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropMetadataItemsType
    ]
    name: str
    package_files: List[
        WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropPackageFilesItemsType
    ]
    package_url: str
    prerelease: NotRequired[bool]
    release: NotRequired[
        WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropReleaseType
    ]
    rubygems_metadata: NotRequired[List[WebhookRubygemsMetadataType]]
    summary: str
    tag_name: NotRequired[str]
    target_commitish: str
    target_oid: str
    updated_at: str
    version: str


class WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropAuthorType(
    TypedDict
):
    """WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropAuthor"""

    avatar_url: str
    events_url: str
    followers_url: str
    following_url: str
    gists_url: str
    gravatar_id: str
    html_url: str
    id: int
    login: str
    node_id: str
    organizations_url: str
    received_events_url: str
    repos_url: str
    site_admin: bool
    starred_url: str
    subscriptions_url: str
    type: str
    url: str


class WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropDockerMetadataItemsType(
    TypedDict
):
    """WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropDockerMeta
    dataItems
    """

    tags: NotRequired[List[str]]


class WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropMetadataItemsType(
    TypedDict
):
    """WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropMetadataIt
    ems
    """


class WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropPackageFilesItemsType(
    TypedDict
):
    """WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropPackageFil
    esItems
    """

    content_type: NotRequired[str]
    created_at: NotRequired[str]
    download_url: NotRequired[str]
    id: NotRequired[int]
    md5: NotRequired[Union[str, None]]
    name: NotRequired[str]
    sha1: NotRequired[Union[str, None]]
    sha256: NotRequired[str]
    size: NotRequired[int]
    state: NotRequired[str]
    updated_at: NotRequired[str]


class WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropReleaseType(
    TypedDict
):
    """WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropRelease"""

    author: WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropReleasePropAuthorType
    created_at: str
    draft: bool
    html_url: str
    id: int
    name: str
    prerelease: bool
    published_at: str
    tag_name: str
    target_commitish: str
    url: str


class WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropReleasePropAuthorType(
    TypedDict
):
    """WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropReleasePro
    pAuthor
    """

    avatar_url: str
    events_url: str
    followers_url: str
    following_url: str
    gists_url: str
    gravatar_id: str
    html_url: str
    id: int
    login: str
    node_id: str
    organizations_url: str
    received_events_url: str
    repos_url: str
    site_admin: bool
    starred_url: str
    subscriptions_url: str
    type: str
    url: str


class WebhookRegistryPackageUpdatedPropRegistryPackagePropRegistryType(TypedDict):
    """WebhookRegistryPackageUpdatedPropRegistryPackagePropRegistry"""


class WebhookReleaseCreatedType(TypedDict):
    """release created event"""

    action: Literal["created"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    release: WebhookReleaseCreatedPropReleaseType
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookReleaseCreatedPropReleaseType(TypedDict):
    """Release

    The [release](https://docs.github.com/rest/releases/releases/#get-a-release)
    object.
    """

    assets: List[WebhookReleaseCreatedPropReleasePropAssetsItemsType]
    assets_url: str
    author: Union[WebhookReleaseCreatedPropReleasePropAuthorType, None]
    body: Union[str, None]
    created_at: Union[datetime, None]
    discussion_url: NotRequired[str]
    draft: bool
    html_url: str
    id: int
    name: Union[str, None]
    node_id: str
    prerelease: bool
    published_at: Union[datetime, None]
    reactions: NotRequired[WebhookReleaseCreatedPropReleasePropReactionsType]
    tag_name: str
    tarball_url: Union[str, None]
    target_commitish: str
    upload_url: str
    url: str
    zipball_url: Union[str, None]


class WebhookReleaseCreatedPropReleasePropAssetsItemsType(TypedDict):
    """Release Asset

    Data related to a release.
    """

    browser_download_url: str
    content_type: str
    created_at: datetime
    download_count: int
    id: int
    label: Union[str, None]
    name: str
    node_id: str
    size: int
    state: Literal["uploaded"]
    updated_at: datetime
    uploader: NotRequired[
        Union[WebhookReleaseCreatedPropReleasePropAssetsItemsPropUploaderType, None]
    ]
    url: str


class WebhookReleaseCreatedPropReleasePropAssetsItemsPropUploaderType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookReleaseCreatedPropReleasePropAuthorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookReleaseCreatedPropReleasePropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookReleaseDeletedType(TypedDict):
    """release deleted event"""

    action: Literal["deleted"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    release: WebhookReleaseDeletedPropReleaseType
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookReleaseDeletedPropReleaseType(TypedDict):
    """Release

    The [release](https://docs.github.com/rest/releases/releases/#get-a-release)
    object.
    """

    assets: List[WebhookReleaseDeletedPropReleasePropAssetsItemsType]
    assets_url: str
    author: Union[WebhookReleaseDeletedPropReleasePropAuthorType, None]
    body: Union[str, None]
    created_at: Union[datetime, None]
    discussion_url: NotRequired[str]
    draft: bool
    html_url: str
    id: int
    name: Union[str, None]
    node_id: str
    prerelease: bool
    published_at: Union[datetime, None]
    reactions: NotRequired[WebhookReleaseDeletedPropReleasePropReactionsType]
    tag_name: str
    tarball_url: Union[str, None]
    target_commitish: str
    upload_url: str
    url: str
    zipball_url: Union[str, None]


class WebhookReleaseDeletedPropReleasePropAssetsItemsType(TypedDict):
    """Release Asset

    Data related to a release.
    """

    browser_download_url: str
    content_type: str
    created_at: datetime
    download_count: int
    id: int
    label: Union[str, None]
    name: str
    node_id: str
    size: int
    state: Literal["uploaded"]
    updated_at: datetime
    uploader: NotRequired[
        Union[WebhookReleaseDeletedPropReleasePropAssetsItemsPropUploaderType, None]
    ]
    url: str


class WebhookReleaseDeletedPropReleasePropAssetsItemsPropUploaderType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookReleaseDeletedPropReleasePropAuthorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookReleaseDeletedPropReleasePropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookReleaseEditedType(TypedDict):
    """release edited event"""

    action: Literal["edited"]
    changes: WebhookReleaseEditedPropChangesType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    release: WebhookReleaseEditedPropReleaseType
    repository: RepositoryWebhooksType
    sender: NotRequired[SimpleUserWebhooksType]


class WebhookReleaseEditedPropChangesType(TypedDict):
    """WebhookReleaseEditedPropChanges"""

    body: NotRequired[WebhookReleaseEditedPropChangesPropBodyType]
    name: NotRequired[WebhookReleaseEditedPropChangesPropNameType]
    make_latest: NotRequired[WebhookReleaseEditedPropChangesPropMakeLatestType]


class WebhookReleaseEditedPropChangesPropBodyType(TypedDict):
    """WebhookReleaseEditedPropChangesPropBody"""

    from_: str


class WebhookReleaseEditedPropChangesPropNameType(TypedDict):
    """WebhookReleaseEditedPropChangesPropName"""

    from_: str


class WebhookReleaseEditedPropChangesPropMakeLatestType(TypedDict):
    """WebhookReleaseEditedPropChangesPropMakeLatest"""

    to: bool


class WebhookReleaseEditedPropReleaseType(TypedDict):
    """Release

    The [release](https://docs.github.com/rest/releases/releases/#get-a-release)
    object.
    """

    assets: List[WebhookReleaseEditedPropReleasePropAssetsItemsType]
    assets_url: str
    author: Union[WebhookReleaseEditedPropReleasePropAuthorType, None]
    body: Union[str, None]
    created_at: Union[datetime, None]
    discussion_url: NotRequired[str]
    draft: bool
    html_url: str
    id: int
    name: Union[str, None]
    node_id: str
    prerelease: bool
    published_at: Union[datetime, None]
    reactions: NotRequired[WebhookReleaseEditedPropReleasePropReactionsType]
    tag_name: str
    tarball_url: Union[str, None]
    target_commitish: str
    upload_url: str
    url: str
    zipball_url: Union[str, None]


class WebhookReleaseEditedPropReleasePropAssetsItemsType(TypedDict):
    """Release Asset

    Data related to a release.
    """

    browser_download_url: str
    content_type: str
    created_at: datetime
    download_count: int
    id: int
    label: Union[str, None]
    name: str
    node_id: str
    size: int
    state: Literal["uploaded"]
    updated_at: datetime
    uploader: NotRequired[
        Union[WebhookReleaseEditedPropReleasePropAssetsItemsPropUploaderType, None]
    ]
    url: str


class WebhookReleaseEditedPropReleasePropAssetsItemsPropUploaderType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookReleaseEditedPropReleasePropAuthorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookReleaseEditedPropReleasePropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookReleasePrereleasedType(TypedDict):
    """release prereleased event"""

    action: Literal["prereleased"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    release: WebhookReleasePrereleasedPropReleaseType
    repository: RepositoryWebhooksType
    sender: NotRequired[SimpleUserWebhooksType]


class WebhookReleasePrereleasedPropReleaseType(TypedDict):
    """WebhookReleasePrereleasedPropRelease"""

    assets: List[WebhookReleasePrereleasedPropReleaseMergedAssetsType]
    assets_url: str
    author: WebhookReleasePrereleasedPropReleaseMergedAuthorType
    body: Union[Union[str, None], None]
    created_at: datetime
    discussion_url: NotRequired[str]
    draft: bool
    html_url: str
    id: int
    name: Union[Union[str, None], None]
    node_id: str
    prerelease: Literal[True]
    published_at: Union[datetime, None]
    reactions: NotRequired[WebhookReleasePrereleasedPropReleaseAllof0PropReactionsType]
    tag_name: str
    tarball_url: Union[Union[str, None], None]
    target_commitish: str
    upload_url: str
    url: str
    zipball_url: Union[Union[str, None], None]


class WebhookReleasePrereleasedPropReleaseAllof0Type(TypedDict):
    """Release

    The [release](https://docs.github.com/rest/releases/releases/#get-a-release)
    object.
    """

    assets: List[WebhookReleasePrereleasedPropReleaseAllof0PropAssetsItemsType]
    assets_url: str
    author: Union[WebhookReleasePrereleasedPropReleaseAllof0PropAuthorType, None]
    body: Union[str, None]
    created_at: Union[datetime, None]
    discussion_url: NotRequired[str]
    draft: bool
    html_url: str
    id: int
    name: Union[str, None]
    node_id: str
    prerelease: bool
    published_at: Union[datetime, None]
    reactions: NotRequired[WebhookReleasePrereleasedPropReleaseAllof0PropReactionsType]
    tag_name: str
    tarball_url: Union[str, None]
    target_commitish: str
    upload_url: str
    url: str
    zipball_url: Union[str, None]


class WebhookReleasePrereleasedPropReleaseAllof0PropAssetsItemsType(TypedDict):
    """Release Asset

    Data related to a release.
    """

    browser_download_url: str
    content_type: str
    created_at: datetime
    download_count: int
    id: int
    label: Union[str, None]
    name: str
    node_id: str
    size: int
    state: Literal["uploaded"]
    updated_at: datetime
    uploader: NotRequired[
        Union[
            WebhookReleasePrereleasedPropReleaseAllof0PropAssetsItemsPropUploaderType,
            None,
        ]
    ]
    url: str


class WebhookReleasePrereleasedPropReleaseAllof0PropAssetsItemsPropUploaderType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookReleasePrereleasedPropReleaseAllof0PropAuthorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookReleasePrereleasedPropReleaseAllof0PropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookReleasePrereleasedPropReleaseAllof1Type(TypedDict):
    """WebhookReleasePrereleasedPropReleaseAllof1"""

    assets: NotRequired[
        List[Union[WebhookReleasePrereleasedPropReleaseAllof1PropAssetsItemsType, None]]
    ]
    assets_url: NotRequired[str]
    author: NotRequired[WebhookReleasePrereleasedPropReleaseAllof1PropAuthorType]
    body: NotRequired[Union[str, None]]
    created_at: NotRequired[str]
    draft: NotRequired[bool]
    html_url: NotRequired[str]
    id: NotRequired[int]
    name: NotRequired[Union[str, None]]
    node_id: NotRequired[str]
    prerelease: Literal[True]
    published_at: NotRequired[Union[str, None]]
    tag_name: NotRequired[str]
    tarball_url: NotRequired[Union[str, None]]
    target_commitish: NotRequired[str]
    upload_url: NotRequired[str]
    url: NotRequired[str]
    zipball_url: NotRequired[Union[str, None]]


class WebhookReleasePrereleasedPropReleaseAllof1PropAssetsItemsType(TypedDict):
    """WebhookReleasePrereleasedPropReleaseAllof1PropAssetsItems"""


class WebhookReleasePrereleasedPropReleaseAllof1PropAuthorType(TypedDict):
    """WebhookReleasePrereleasedPropReleaseAllof1PropAuthor"""

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookReleasePrereleasedPropReleaseMergedAssetsType(TypedDict):
    """WebhookReleasePrereleasedPropReleaseMergedAssets"""

    browser_download_url: str
    content_type: str
    created_at: datetime
    download_count: int
    id: int
    label: Union[str, None]
    name: str
    node_id: str
    size: int
    state: Literal["uploaded"]
    updated_at: datetime
    uploader: NotRequired[
        Union[
            WebhookReleasePrereleasedPropReleaseAllof0PropAssetsItemsPropUploaderType,
            None,
        ]
    ]
    url: str


class WebhookReleasePrereleasedPropReleaseMergedAuthorType(TypedDict):
    """WebhookReleasePrereleasedPropReleaseMergedAuthor"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookReleasePublishedType(TypedDict):
    """release published event"""

    action: Literal["published"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    release: WebhookReleasePublishedPropReleaseType
    repository: RepositoryWebhooksType
    sender: NotRequired[SimpleUserWebhooksType]


class WebhookReleasePublishedPropReleaseType(TypedDict):
    """WebhookReleasePublishedPropRelease"""

    assets: List[WebhookReleasePublishedPropReleaseMergedAssetsType]
    assets_url: str
    author: WebhookReleasePublishedPropReleaseMergedAuthorType
    body: Union[Union[str, None], None]
    created_at: datetime
    discussion_url: NotRequired[str]
    draft: bool
    html_url: str
    id: int
    name: Union[Union[str, None], None]
    node_id: str
    prerelease: bool
    published_at: Union[Union[datetime, None], None]
    reactions: NotRequired[WebhookReleasePublishedPropReleaseAllof0PropReactionsType]
    tag_name: str
    tarball_url: Union[Union[str, None], None]
    target_commitish: str
    upload_url: str
    url: str
    zipball_url: Union[Union[str, None], None]


class WebhookReleasePublishedPropReleaseAllof0Type(TypedDict):
    """Release

    The [release](https://docs.github.com/rest/releases/releases/#get-a-release)
    object.
    """

    assets: List[WebhookReleasePublishedPropReleaseAllof0PropAssetsItemsType]
    assets_url: str
    author: Union[WebhookReleasePublishedPropReleaseAllof0PropAuthorType, None]
    body: Union[str, None]
    created_at: Union[datetime, None]
    discussion_url: NotRequired[str]
    draft: bool
    html_url: str
    id: int
    name: Union[str, None]
    node_id: str
    prerelease: bool
    published_at: Union[datetime, None]
    reactions: NotRequired[WebhookReleasePublishedPropReleaseAllof0PropReactionsType]
    tag_name: str
    tarball_url: Union[str, None]
    target_commitish: str
    upload_url: str
    url: str
    zipball_url: Union[str, None]


class WebhookReleasePublishedPropReleaseAllof0PropAssetsItemsType(TypedDict):
    """Release Asset

    Data related to a release.
    """

    browser_download_url: str
    content_type: str
    created_at: datetime
    download_count: int
    id: int
    label: Union[str, None]
    name: str
    node_id: str
    size: int
    state: Literal["uploaded"]
    updated_at: datetime
    uploader: NotRequired[
        Union[
            WebhookReleasePublishedPropReleaseAllof0PropAssetsItemsPropUploaderType,
            None,
        ]
    ]
    url: str


class WebhookReleasePublishedPropReleaseAllof0PropAssetsItemsPropUploaderType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookReleasePublishedPropReleaseAllof0PropAuthorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookReleasePublishedPropReleaseAllof0PropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookReleasePublishedPropReleaseAllof1Type(TypedDict):
    """WebhookReleasePublishedPropReleaseAllof1"""

    assets: NotRequired[
        List[Union[WebhookReleasePublishedPropReleaseAllof1PropAssetsItemsType, None]]
    ]
    assets_url: NotRequired[str]
    author: NotRequired[WebhookReleasePublishedPropReleaseAllof1PropAuthorType]
    body: NotRequired[Union[str, None]]
    created_at: NotRequired[str]
    draft: NotRequired[bool]
    html_url: NotRequired[str]
    id: NotRequired[int]
    name: NotRequired[Union[str, None]]
    node_id: NotRequired[str]
    prerelease: NotRequired[bool]
    published_at: Union[datetime, None]
    tag_name: NotRequired[str]
    tarball_url: NotRequired[Union[str, None]]
    target_commitish: NotRequired[str]
    upload_url: NotRequired[str]
    url: NotRequired[str]
    zipball_url: NotRequired[Union[str, None]]


class WebhookReleasePublishedPropReleaseAllof1PropAssetsItemsType(TypedDict):
    """WebhookReleasePublishedPropReleaseAllof1PropAssetsItems"""


class WebhookReleasePublishedPropReleaseAllof1PropAuthorType(TypedDict):
    """WebhookReleasePublishedPropReleaseAllof1PropAuthor"""

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookReleasePublishedPropReleaseMergedAssetsType(TypedDict):
    """WebhookReleasePublishedPropReleaseMergedAssets"""

    browser_download_url: str
    content_type: str
    created_at: datetime
    download_count: int
    id: int
    label: Union[str, None]
    name: str
    node_id: str
    size: int
    state: Literal["uploaded"]
    updated_at: datetime
    uploader: NotRequired[
        Union[
            WebhookReleasePublishedPropReleaseAllof0PropAssetsItemsPropUploaderType,
            None,
        ]
    ]
    url: str


class WebhookReleasePublishedPropReleaseMergedAuthorType(TypedDict):
    """WebhookReleasePublishedPropReleaseMergedAuthor"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookReleaseReleasedType(TypedDict):
    """release released event"""

    action: Literal["released"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    release: WebhookReleaseReleasedPropReleaseType
    repository: RepositoryWebhooksType
    sender: NotRequired[SimpleUserWebhooksType]


class WebhookReleaseReleasedPropReleaseType(TypedDict):
    """Release

    The [release](https://docs.github.com/rest/releases/releases/#get-a-release)
    object.
    """

    assets: List[WebhookReleaseReleasedPropReleasePropAssetsItemsType]
    assets_url: str
    author: Union[WebhookReleaseReleasedPropReleasePropAuthorType, None]
    body: Union[str, None]
    created_at: Union[datetime, None]
    discussion_url: NotRequired[str]
    draft: bool
    html_url: str
    id: int
    name: Union[str, None]
    node_id: str
    prerelease: bool
    published_at: Union[datetime, None]
    reactions: NotRequired[WebhookReleaseReleasedPropReleasePropReactionsType]
    tag_name: str
    tarball_url: Union[str, None]
    target_commitish: str
    upload_url: str
    url: str
    zipball_url: Union[str, None]


class WebhookReleaseReleasedPropReleasePropAssetsItemsType(TypedDict):
    """Release Asset

    Data related to a release.
    """

    browser_download_url: str
    content_type: str
    created_at: datetime
    download_count: int
    id: int
    label: Union[str, None]
    name: str
    node_id: str
    size: int
    state: Literal["uploaded"]
    updated_at: datetime
    uploader: NotRequired[
        Union[WebhookReleaseReleasedPropReleasePropAssetsItemsPropUploaderType, None]
    ]
    url: str


class WebhookReleaseReleasedPropReleasePropAssetsItemsPropUploaderType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookReleaseReleasedPropReleasePropAuthorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookReleaseReleasedPropReleasePropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookReleaseUnpublishedType(TypedDict):
    """release unpublished event"""

    action: Literal["unpublished"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    release: WebhookReleaseUnpublishedPropReleaseType
    repository: RepositoryWebhooksType
    sender: NotRequired[SimpleUserWebhooksType]


class WebhookReleaseUnpublishedPropReleaseType(TypedDict):
    """WebhookReleaseUnpublishedPropRelease"""

    assets: List[WebhookReleaseUnpublishedPropReleaseMergedAssetsType]
    assets_url: str
    author: WebhookReleaseUnpublishedPropReleaseMergedAuthorType
    body: Union[Union[str, None], None]
    created_at: datetime
    discussion_url: NotRequired[str]
    draft: bool
    html_url: str
    id: int
    name: Union[Union[str, None], None]
    node_id: str
    prerelease: bool
    published_at: Union[datetime, None]
    reactions: NotRequired[WebhookReleaseUnpublishedPropReleaseAllof0PropReactionsType]
    tag_name: str
    tarball_url: Union[Union[str, None], None]
    target_commitish: str
    upload_url: str
    url: str
    zipball_url: Union[Union[str, None], None]


class WebhookReleaseUnpublishedPropReleaseAllof0Type(TypedDict):
    """Release

    The [release](https://docs.github.com/rest/releases/releases/#get-a-release)
    object.
    """

    assets: List[WebhookReleaseUnpublishedPropReleaseAllof0PropAssetsItemsType]
    assets_url: str
    author: Union[WebhookReleaseUnpublishedPropReleaseAllof0PropAuthorType, None]
    body: Union[str, None]
    created_at: Union[datetime, None]
    discussion_url: NotRequired[str]
    draft: bool
    html_url: str
    id: int
    name: Union[str, None]
    node_id: str
    prerelease: bool
    published_at: Union[datetime, None]
    reactions: NotRequired[WebhookReleaseUnpublishedPropReleaseAllof0PropReactionsType]
    tag_name: str
    tarball_url: Union[str, None]
    target_commitish: str
    upload_url: str
    url: str
    zipball_url: Union[str, None]


class WebhookReleaseUnpublishedPropReleaseAllof0PropAssetsItemsType(TypedDict):
    """Release Asset

    Data related to a release.
    """

    browser_download_url: str
    content_type: str
    created_at: datetime
    download_count: int
    id: int
    label: Union[str, None]
    name: str
    node_id: str
    size: int
    state: Literal["uploaded"]
    updated_at: datetime
    uploader: NotRequired[
        Union[
            WebhookReleaseUnpublishedPropReleaseAllof0PropAssetsItemsPropUploaderType,
            None,
        ]
    ]
    url: str


class WebhookReleaseUnpublishedPropReleaseAllof0PropAssetsItemsPropUploaderType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookReleaseUnpublishedPropReleaseAllof0PropAuthorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookReleaseUnpublishedPropReleaseAllof0PropReactionsType(TypedDict):
    """Reactions"""

    plus_one: int
    minus_one: int
    confused: int
    eyes: int
    heart: int
    hooray: int
    laugh: int
    rocket: int
    total_count: int
    url: str


class WebhookReleaseUnpublishedPropReleaseAllof1Type(TypedDict):
    """WebhookReleaseUnpublishedPropReleaseAllof1"""

    assets: NotRequired[
        List[Union[WebhookReleaseUnpublishedPropReleaseAllof1PropAssetsItemsType, None]]
    ]
    assets_url: NotRequired[str]
    author: NotRequired[WebhookReleaseUnpublishedPropReleaseAllof1PropAuthorType]
    body: NotRequired[Union[str, None]]
    created_at: NotRequired[str]
    draft: NotRequired[bool]
    html_url: NotRequired[str]
    id: NotRequired[int]
    name: NotRequired[Union[str, None]]
    node_id: NotRequired[str]
    prerelease: NotRequired[bool]
    published_at: Union[str, None]
    tag_name: NotRequired[str]
    tarball_url: NotRequired[Union[str, None]]
    target_commitish: NotRequired[str]
    upload_url: NotRequired[str]
    url: NotRequired[str]
    zipball_url: NotRequired[Union[str, None]]


class WebhookReleaseUnpublishedPropReleaseAllof1PropAssetsItemsType(TypedDict):
    """WebhookReleaseUnpublishedPropReleaseAllof1PropAssetsItems"""


class WebhookReleaseUnpublishedPropReleaseAllof1PropAuthorType(TypedDict):
    """WebhookReleaseUnpublishedPropReleaseAllof1PropAuthor"""

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookReleaseUnpublishedPropReleaseMergedAssetsType(TypedDict):
    """WebhookReleaseUnpublishedPropReleaseMergedAssets"""

    browser_download_url: str
    content_type: str
    created_at: datetime
    download_count: int
    id: int
    label: Union[str, None]
    name: str
    node_id: str
    size: int
    state: Literal["uploaded"]
    updated_at: datetime
    uploader: NotRequired[
        Union[
            WebhookReleaseUnpublishedPropReleaseAllof0PropAssetsItemsPropUploaderType,
            None,
        ]
    ]
    url: str


class WebhookReleaseUnpublishedPropReleaseMergedAuthorType(TypedDict):
    """WebhookReleaseUnpublishedPropReleaseMergedAuthor"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookRepositoryAdvisoryPublishedType(TypedDict):
    """Repository advisory published event"""

    action: Literal["published"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    repository_advisory: RepositoryAdvisoryType
    sender: NotRequired[SimpleUserWebhooksType]


class WebhookRepositoryAdvisoryReportedType(TypedDict):
    """Repository advisory reported event"""

    action: Literal["reported"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    repository_advisory: RepositoryAdvisoryType
    sender: NotRequired[SimpleUserWebhooksType]


class WebhookRepositoryArchivedType(TypedDict):
    """repository archived event"""

    action: Literal["archived"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookRepositoryCreatedType(TypedDict):
    """repository created event"""

    action: Literal["created"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookRepositoryDeletedType(TypedDict):
    """repository deleted event"""

    action: Literal["deleted"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookRepositoryDispatchSampleType(TypedDict):
    """repository_dispatch event"""

    action: Literal["sample.collected"]
    branch: str
    client_payload: Union[WebhookRepositoryDispatchSamplePropClientPayloadType, None]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: SimpleInstallationType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookRepositoryDispatchSamplePropClientPayloadType(TypedDict):
    """WebhookRepositoryDispatchSamplePropClientPayload"""


class WebhookRepositoryEditedType(TypedDict):
    """repository edited event"""

    action: Literal["edited"]
    changes: WebhookRepositoryEditedPropChangesType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookRepositoryEditedPropChangesType(TypedDict):
    """WebhookRepositoryEditedPropChanges"""

    default_branch: NotRequired[WebhookRepositoryEditedPropChangesPropDefaultBranchType]
    description: NotRequired[WebhookRepositoryEditedPropChangesPropDescriptionType]
    homepage: NotRequired[WebhookRepositoryEditedPropChangesPropHomepageType]
    topics: NotRequired[WebhookRepositoryEditedPropChangesPropTopicsType]


class WebhookRepositoryEditedPropChangesPropDefaultBranchType(TypedDict):
    """WebhookRepositoryEditedPropChangesPropDefaultBranch"""

    from_: str


class WebhookRepositoryEditedPropChangesPropDescriptionType(TypedDict):
    """WebhookRepositoryEditedPropChangesPropDescription"""

    from_: Union[str, None]


class WebhookRepositoryEditedPropChangesPropHomepageType(TypedDict):
    """WebhookRepositoryEditedPropChangesPropHomepage"""

    from_: Union[str, None]


class WebhookRepositoryEditedPropChangesPropTopicsType(TypedDict):
    """WebhookRepositoryEditedPropChangesPropTopics"""

    from_: NotRequired[Union[List[str], None]]


class WebhookRepositoryImportType(TypedDict):
    """repository_import event"""

    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType
    status: Literal["success", "cancelled", "failure"]


class WebhookRepositoryPrivatizedType(TypedDict):
    """repository privatized event"""

    action: Literal["privatized"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookRepositoryPublicizedType(TypedDict):
    """repository publicized event"""

    action: Literal["publicized"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookRepositoryRenamedType(TypedDict):
    """repository renamed event"""

    action: Literal["renamed"]
    changes: WebhookRepositoryRenamedPropChangesType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookRepositoryRenamedPropChangesType(TypedDict):
    """WebhookRepositoryRenamedPropChanges"""

    repository: WebhookRepositoryRenamedPropChangesPropRepositoryType


class WebhookRepositoryRenamedPropChangesPropRepositoryType(TypedDict):
    """WebhookRepositoryRenamedPropChangesPropRepository"""

    name: WebhookRepositoryRenamedPropChangesPropRepositoryPropNameType


class WebhookRepositoryRenamedPropChangesPropRepositoryPropNameType(TypedDict):
    """WebhookRepositoryRenamedPropChangesPropRepositoryPropName"""

    from_: str


class WebhookRepositoryRulesetCreatedType(TypedDict):
    """repository ruleset created event"""

    action: Literal["created"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: NotRequired[RepositoryWebhooksType]
    repository_ruleset: RepositoryRulesetType
    sender: SimpleUserWebhooksType


class WebhookRepositoryRulesetDeletedType(TypedDict):
    """repository ruleset deleted event"""

    action: Literal["deleted"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: NotRequired[RepositoryWebhooksType]
    repository_ruleset: RepositoryRulesetType
    sender: SimpleUserWebhooksType


class WebhookRepositoryRulesetEditedType(TypedDict):
    """repository ruleset edited event"""

    action: Literal["edited"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: NotRequired[RepositoryWebhooksType]
    repository_ruleset: RepositoryRulesetType
    changes: NotRequired[WebhookRepositoryRulesetEditedPropChangesType]
    sender: SimpleUserWebhooksType


class WebhookRepositoryRulesetEditedPropChangesType(TypedDict):
    """WebhookRepositoryRulesetEditedPropChanges"""

    name: NotRequired[WebhookRepositoryRulesetEditedPropChangesPropNameType]
    enforcement: NotRequired[
        WebhookRepositoryRulesetEditedPropChangesPropEnforcementType
    ]
    conditions: NotRequired[WebhookRepositoryRulesetEditedPropChangesPropConditionsType]
    rules: NotRequired[WebhookRepositoryRulesetEditedPropChangesPropRulesType]


class WebhookRepositoryRulesetEditedPropChangesPropNameType(TypedDict):
    """WebhookRepositoryRulesetEditedPropChangesPropName"""

    from_: NotRequired[str]


class WebhookRepositoryRulesetEditedPropChangesPropEnforcementType(TypedDict):
    """WebhookRepositoryRulesetEditedPropChangesPropEnforcement"""

    from_: NotRequired[str]


class WebhookRepositoryRulesetEditedPropChangesPropConditionsType(TypedDict):
    """WebhookRepositoryRulesetEditedPropChangesPropConditions"""

    added: NotRequired[List[RepositoryRulesetConditionsType]]
    deleted: NotRequired[List[RepositoryRulesetConditionsType]]
    updated: NotRequired[
        List[
            WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsType
        ]
    ]


class WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsType(
    TypedDict
):
    """WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItems"""

    condition: NotRequired[RepositoryRulesetConditionsType]
    changes: NotRequired[
        WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChangesType
    ]


class WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChangesType(
    TypedDict
):
    """WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChang
    es
    """

    condition_type: NotRequired[
        WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChangesPropConditionTypeType
    ]
    target: NotRequired[
        WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChangesPropTargetType
    ]
    include: NotRequired[
        WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChangesPropIncludeType
    ]
    exclude: NotRequired[
        WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChangesPropExcludeType
    ]


class WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChangesPropConditionTypeType(
    TypedDict
):
    """WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChang
    esPropConditionType
    """

    from_: NotRequired[str]


class WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChangesPropTargetType(
    TypedDict
):
    """WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChang
    esPropTarget
    """

    from_: NotRequired[str]


class WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChangesPropIncludeType(
    TypedDict
):
    """WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChang
    esPropInclude
    """

    from_: NotRequired[List[str]]


class WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChangesPropExcludeType(
    TypedDict
):
    """WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChang
    esPropExclude
    """

    from_: NotRequired[List[str]]


class WebhookRepositoryRulesetEditedPropChangesPropRulesType(TypedDict):
    """WebhookRepositoryRulesetEditedPropChangesPropRules"""

    added: NotRequired[
        List[
            Union[
                RepositoryRuleCreationType,
                RepositoryRuleUpdateType,
                RepositoryRuleDeletionType,
                RepositoryRuleRequiredLinearHistoryType,
                RepositoryRuleRequiredDeploymentsType,
                RepositoryRuleRequiredSignaturesType,
                RepositoryRulePullRequestType,
                RepositoryRuleRequiredStatusChecksType,
                RepositoryRuleNonFastForwardType,
                RepositoryRuleCommitMessagePatternType,
                RepositoryRuleCommitAuthorEmailPatternType,
                RepositoryRuleCommitterEmailPatternType,
                RepositoryRuleBranchNamePatternType,
                RepositoryRuleTagNamePatternType,
                RepositoryRuleWorkflowsType,
            ]
        ]
    ]
    deleted: NotRequired[
        List[
            Union[
                RepositoryRuleCreationType,
                RepositoryRuleUpdateType,
                RepositoryRuleDeletionType,
                RepositoryRuleRequiredLinearHistoryType,
                RepositoryRuleRequiredDeploymentsType,
                RepositoryRuleRequiredSignaturesType,
                RepositoryRulePullRequestType,
                RepositoryRuleRequiredStatusChecksType,
                RepositoryRuleNonFastForwardType,
                RepositoryRuleCommitMessagePatternType,
                RepositoryRuleCommitAuthorEmailPatternType,
                RepositoryRuleCommitterEmailPatternType,
                RepositoryRuleBranchNamePatternType,
                RepositoryRuleTagNamePatternType,
                RepositoryRuleWorkflowsType,
            ]
        ]
    ]
    updated: NotRequired[
        List[WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItemsType]
    ]


class WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItemsType(TypedDict):
    """WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItems"""

    rule: NotRequired[
        Union[
            RepositoryRuleCreationType,
            RepositoryRuleUpdateType,
            RepositoryRuleDeletionType,
            RepositoryRuleRequiredLinearHistoryType,
            RepositoryRuleRequiredDeploymentsType,
            RepositoryRuleRequiredSignaturesType,
            RepositoryRulePullRequestType,
            RepositoryRuleRequiredStatusChecksType,
            RepositoryRuleNonFastForwardType,
            RepositoryRuleCommitMessagePatternType,
            RepositoryRuleCommitAuthorEmailPatternType,
            RepositoryRuleCommitterEmailPatternType,
            RepositoryRuleBranchNamePatternType,
            RepositoryRuleTagNamePatternType,
            RepositoryRuleWorkflowsType,
        ]
    ]
    changes: NotRequired[
        WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItemsPropChangesType
    ]


class WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItemsPropChangesType(
    TypedDict
):
    """WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItemsPropChanges"""

    configuration: NotRequired[
        WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItemsPropChangesPropConfigurationType
    ]
    rule_type: NotRequired[
        WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItemsPropChangesPropRuleTypeType
    ]
    pattern: NotRequired[
        WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItemsPropChangesPropPatternType
    ]


class WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItemsPropChangesPropConfigurationType(
    TypedDict
):
    """WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItemsPropChangesPro
    pConfiguration
    """

    from_: NotRequired[str]


class WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItemsPropChangesPropRuleTypeType(
    TypedDict
):
    """WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItemsPropChangesPro
    pRuleType
    """

    from_: NotRequired[str]


class WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItemsPropChangesPropPatternType(
    TypedDict
):
    """WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItemsPropChangesPro
    pPattern
    """

    from_: NotRequired[str]


class WebhookRepositoryTransferredType(TypedDict):
    """repository transferred event"""

    action: Literal["transferred"]
    changes: WebhookRepositoryTransferredPropChangesType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookRepositoryTransferredPropChangesType(TypedDict):
    """WebhookRepositoryTransferredPropChanges"""

    owner: WebhookRepositoryTransferredPropChangesPropOwnerType


class WebhookRepositoryTransferredPropChangesPropOwnerType(TypedDict):
    """WebhookRepositoryTransferredPropChangesPropOwner"""

    from_: WebhookRepositoryTransferredPropChangesPropOwnerPropFromType


class WebhookRepositoryTransferredPropChangesPropOwnerPropFromType(TypedDict):
    """WebhookRepositoryTransferredPropChangesPropOwnerPropFrom"""

    organization: NotRequired[
        WebhookRepositoryTransferredPropChangesPropOwnerPropFromPropOrganizationType
    ]
    user: NotRequired[
        Union[
            WebhookRepositoryTransferredPropChangesPropOwnerPropFromPropUserType, None
        ]
    ]


class WebhookRepositoryTransferredPropChangesPropOwnerPropFromPropOrganizationType(
    TypedDict
):
    """Organization"""

    avatar_url: str
    description: Union[str, None]
    events_url: str
    hooks_url: str
    html_url: NotRequired[str]
    id: int
    issues_url: str
    login: str
    members_url: str
    node_id: str
    public_members_url: str
    repos_url: str
    url: str


class WebhookRepositoryTransferredPropChangesPropOwnerPropFromPropUserType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookRepositoryUnarchivedType(TypedDict):
    """repository unarchived event"""

    action: Literal["unarchived"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookRepositoryVulnerabilityAlertCreateType(TypedDict):
    """repository_vulnerability_alert create event"""

    action: Literal["create"]
    alert: WebhookRepositoryVulnerabilityAlertCreatePropAlertType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookRepositoryVulnerabilityAlertCreatePropAlertType(TypedDict):
    """WebhookRepositoryVulnerabilityAlertCreatePropAlert"""

    affected_package_name: str
    affected_range: str
    created_at: str
    dismiss_reason: NotRequired[str]
    dismissed_at: NotRequired[str]
    dismisser: NotRequired[
        Union[
            WebhookRepositoryVulnerabilityAlertCreatePropAlertAllof0PropDismisserType,
            None,
        ]
    ]
    external_identifier: str
    external_reference: Union[Union[str, None], None]
    fix_reason: NotRequired[str]
    fixed_at: NotRequired[datetime]
    fixed_in: NotRequired[str]
    ghsa_id: str
    id: int
    node_id: str
    number: int
    severity: str
    state: Literal["open"]


class WebhookRepositoryVulnerabilityAlertCreatePropAlertAllof0Type(TypedDict):
    """Repository Vulnerability Alert Alert

    The security alert of the vulnerable dependency.
    """

    affected_package_name: str
    affected_range: str
    created_at: str
    dismiss_reason: NotRequired[str]
    dismissed_at: NotRequired[str]
    dismisser: NotRequired[
        Union[
            WebhookRepositoryVulnerabilityAlertCreatePropAlertAllof0PropDismisserType,
            None,
        ]
    ]
    external_identifier: str
    external_reference: Union[str, None]
    fix_reason: NotRequired[str]
    fixed_at: NotRequired[datetime]
    fixed_in: NotRequired[str]
    ghsa_id: str
    id: int
    node_id: str
    number: int
    severity: str
    state: Literal["open", "dismissed", "fixed"]


class WebhookRepositoryVulnerabilityAlertCreatePropAlertAllof0PropDismisserType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookRepositoryVulnerabilityAlertCreatePropAlertAllof1Type(TypedDict):
    """WebhookRepositoryVulnerabilityAlertCreatePropAlertAllof1"""

    affected_package_name: NotRequired[str]
    affected_range: NotRequired[str]
    created_at: NotRequired[str]
    external_identifier: NotRequired[str]
    external_reference: NotRequired[Union[str, None]]
    fixed_in: NotRequired[str]
    ghsa_id: NotRequired[str]
    id: NotRequired[int]
    node_id: NotRequired[str]
    number: NotRequired[int]
    severity: NotRequired[str]
    state: Literal["open"]


class WebhookRepositoryVulnerabilityAlertDismissType(TypedDict):
    """repository_vulnerability_alert dismiss event"""

    action: Literal["dismiss"]
    alert: WebhookRepositoryVulnerabilityAlertDismissPropAlertType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookRepositoryVulnerabilityAlertDismissPropAlertType(TypedDict):
    """WebhookRepositoryVulnerabilityAlertDismissPropAlert"""

    affected_package_name: str
    affected_range: str
    created_at: str
    dismiss_comment: NotRequired[Union[Union[str, None], None]]
    dismiss_reason: str
    dismissed_at: str
    dismisser: Union[
        Union[
            WebhookRepositoryVulnerabilityAlertDismissPropAlertAllof0PropDismisserType,
            None,
        ],
        None,
    ]
    external_identifier: str
    external_reference: Union[Union[str, None], None]
    fix_reason: NotRequired[str]
    fixed_at: NotRequired[datetime]
    fixed_in: NotRequired[str]
    ghsa_id: str
    id: int
    node_id: str
    number: int
    severity: str
    state: Literal["dismissed"]


class WebhookRepositoryVulnerabilityAlertDismissPropAlertAllof0Type(TypedDict):
    """Repository Vulnerability Alert Alert

    The security alert of the vulnerable dependency.
    """

    affected_package_name: str
    affected_range: str
    created_at: str
    dismiss_comment: NotRequired[Union[str, None]]
    dismiss_reason: NotRequired[str]
    dismissed_at: NotRequired[str]
    dismisser: NotRequired[
        Union[
            WebhookRepositoryVulnerabilityAlertDismissPropAlertAllof0PropDismisserType,
            None,
        ]
    ]
    external_identifier: str
    external_reference: Union[str, None]
    fix_reason: NotRequired[str]
    fixed_at: NotRequired[datetime]
    fixed_in: NotRequired[str]
    ghsa_id: str
    id: int
    node_id: str
    number: int
    severity: str
    state: Literal["open", "dismissed", "fixed"]


class WebhookRepositoryVulnerabilityAlertDismissPropAlertAllof0PropDismisserType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookRepositoryVulnerabilityAlertDismissPropAlertAllof1Type(TypedDict):
    """WebhookRepositoryVulnerabilityAlertDismissPropAlertAllof1"""

    affected_package_name: NotRequired[str]
    affected_range: NotRequired[str]
    created_at: NotRequired[str]
    dismiss_comment: NotRequired[Union[str, None]]
    dismiss_reason: str
    dismissed_at: str
    dismisser: Union[
        WebhookRepositoryVulnerabilityAlertDismissPropAlertAllof1PropDismisserType, None
    ]
    external_identifier: NotRequired[str]
    external_reference: NotRequired[Union[str, None]]
    fixed_in: NotRequired[str]
    ghsa_id: NotRequired[str]
    id: NotRequired[int]
    node_id: NotRequired[str]
    number: NotRequired[int]
    severity: NotRequired[str]
    state: Literal["dismissed"]


class WebhookRepositoryVulnerabilityAlertDismissPropAlertAllof1PropDismisserType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookRepositoryVulnerabilityAlertReopenType(TypedDict):
    """repository_vulnerability_alert reopen event"""

    action: Literal["reopen"]
    alert: WebhookRepositoryVulnerabilityAlertReopenPropAlertType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookRepositoryVulnerabilityAlertReopenPropAlertType(TypedDict):
    """WebhookRepositoryVulnerabilityAlertReopenPropAlert"""

    affected_package_name: str
    affected_range: str
    created_at: str
    dismiss_reason: NotRequired[str]
    dismissed_at: NotRequired[str]
    dismisser: NotRequired[
        Union[
            WebhookRepositoryVulnerabilityAlertReopenPropAlertAllof0PropDismisserType,
            None,
        ]
    ]
    external_identifier: str
    external_reference: Union[Union[str, None], None]
    fix_reason: NotRequired[str]
    fixed_at: NotRequired[datetime]
    fixed_in: NotRequired[str]
    ghsa_id: str
    id: int
    node_id: str
    number: int
    severity: str
    state: Literal["open"]


class WebhookRepositoryVulnerabilityAlertReopenPropAlertAllof0Type(TypedDict):
    """Repository Vulnerability Alert Alert

    The security alert of the vulnerable dependency.
    """

    affected_package_name: str
    affected_range: str
    created_at: str
    dismiss_reason: NotRequired[str]
    dismissed_at: NotRequired[str]
    dismisser: NotRequired[
        Union[
            WebhookRepositoryVulnerabilityAlertReopenPropAlertAllof0PropDismisserType,
            None,
        ]
    ]
    external_identifier: str
    external_reference: Union[str, None]
    fix_reason: NotRequired[str]
    fixed_at: NotRequired[datetime]
    fixed_in: NotRequired[str]
    ghsa_id: str
    id: int
    node_id: str
    number: int
    severity: str
    state: Literal["open", "dismissed", "fixed"]


class WebhookRepositoryVulnerabilityAlertReopenPropAlertAllof0PropDismisserType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookRepositoryVulnerabilityAlertReopenPropAlertAllof1Type(TypedDict):
    """WebhookRepositoryVulnerabilityAlertReopenPropAlertAllof1"""

    affected_package_name: NotRequired[str]
    affected_range: NotRequired[str]
    created_at: NotRequired[str]
    external_identifier: NotRequired[str]
    external_reference: NotRequired[Union[str, None]]
    fixed_in: NotRequired[str]
    ghsa_id: NotRequired[str]
    id: NotRequired[int]
    node_id: NotRequired[str]
    number: NotRequired[int]
    severity: NotRequired[str]
    state: Literal["open"]


class WebhookRepositoryVulnerabilityAlertResolveType(TypedDict):
    """repository_vulnerability_alert resolve event"""

    action: Literal["resolve"]
    alert: WebhookRepositoryVulnerabilityAlertResolvePropAlertType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookRepositoryVulnerabilityAlertResolvePropAlertType(TypedDict):
    """WebhookRepositoryVulnerabilityAlertResolvePropAlert"""

    affected_package_name: str
    affected_range: str
    created_at: str
    dismiss_reason: NotRequired[str]
    dismissed_at: NotRequired[str]
    dismisser: NotRequired[
        Union[
            WebhookRepositoryVulnerabilityAlertResolvePropAlertAllof0PropDismisserType,
            None,
        ]
    ]
    external_identifier: str
    external_reference: Union[Union[str, None], None]
    fix_reason: NotRequired[str]
    fixed_at: NotRequired[datetime]
    fixed_in: NotRequired[str]
    ghsa_id: str
    id: int
    node_id: str
    number: int
    severity: str
    state: Literal["fixed", "open"]


class WebhookRepositoryVulnerabilityAlertResolvePropAlertAllof0Type(TypedDict):
    """Repository Vulnerability Alert Alert

    The security alert of the vulnerable dependency.
    """

    affected_package_name: str
    affected_range: str
    created_at: str
    dismiss_reason: NotRequired[str]
    dismissed_at: NotRequired[str]
    dismisser: NotRequired[
        Union[
            WebhookRepositoryVulnerabilityAlertResolvePropAlertAllof0PropDismisserType,
            None,
        ]
    ]
    external_identifier: str
    external_reference: Union[str, None]
    fix_reason: NotRequired[str]
    fixed_at: NotRequired[datetime]
    fixed_in: NotRequired[str]
    ghsa_id: str
    id: int
    node_id: str
    number: int
    severity: str
    state: Literal["open", "dismissed", "fixed"]


class WebhookRepositoryVulnerabilityAlertResolvePropAlertAllof0PropDismisserType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookRepositoryVulnerabilityAlertResolvePropAlertAllof1Type(TypedDict):
    """WebhookRepositoryVulnerabilityAlertResolvePropAlertAllof1"""

    affected_package_name: NotRequired[str]
    affected_range: NotRequired[str]
    created_at: NotRequired[str]
    external_identifier: NotRequired[str]
    external_reference: NotRequired[Union[str, None]]
    fix_reason: NotRequired[str]
    fixed_at: NotRequired[datetime]
    fixed_in: NotRequired[str]
    ghsa_id: NotRequired[str]
    id: NotRequired[int]
    node_id: NotRequired[str]
    number: NotRequired[int]
    severity: NotRequired[str]
    state: Literal["fixed", "open"]


class WebhookSecretScanningAlertCreatedType(TypedDict):
    """secret_scanning_alert created event"""

    action: Literal["created"]
    alert: SecretScanningAlertWebhookType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: NotRequired[SimpleUserWebhooksType]


class WebhookSecretScanningAlertLocationCreatedType(TypedDict):
    """Secret Scanning Alert Location Created Event"""

    action: NotRequired[Literal["created"]]
    alert: SecretScanningAlertWebhookType
    installation: NotRequired[SimpleInstallationType]
    location: SecretScanningLocationType
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookSecretScanningAlertLocationCreatedFormEncodedType(TypedDict):
    """Secret Scanning Alert Location Created Event"""

    payload: str


class WebhookSecretScanningAlertReopenedType(TypedDict):
    """secret_scanning_alert reopened event"""

    action: Literal["reopened"]
    alert: SecretScanningAlertWebhookType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: NotRequired[SimpleUserWebhooksType]


class WebhookSecretScanningAlertResolvedType(TypedDict):
    """secret_scanning_alert resolved event"""

    action: Literal["resolved"]
    alert: SecretScanningAlertWebhookType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: NotRequired[SimpleUserWebhooksType]


class WebhookSecretScanningAlertRevokedType(TypedDict):
    """secret_scanning_alert revoked event"""

    action: Literal["revoked"]
    alert: SecretScanningAlertWebhookType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: NotRequired[SimpleUserWebhooksType]


class WebhookSecurityAdvisoryPublishedType(TypedDict):
    """security_advisory published event"""

    action: Literal["published"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: NotRequired[RepositoryWebhooksType]
    security_advisory: WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryType
    sender: NotRequired[SimpleUserWebhooksType]


class WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryType(TypedDict):
    """WebhookSecurityAdvisoryPublishedPropSecurityAdvisory

    The details of the security advisory, including summary, description, and
    severity.
    """

    cvss: WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropCvssType
    cwes: List[WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropCwesItemsType]
    description: str
    ghsa_id: str
    identifiers: List[
        WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropIdentifiersItemsType
    ]
    published_at: str
    references: List[
        WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropReferencesItemsType
    ]
    severity: str
    summary: str
    updated_at: str
    vulnerabilities: List[
        WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropVulnerabilitiesItemsType
    ]
    withdrawn_at: Union[str, None]


class WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropCvssType(TypedDict):
    """WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropCvss"""

    score: float
    vector_string: Union[str, None]


class WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropCwesItemsType(TypedDict):
    """WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropCwesItems"""

    cwe_id: str
    name: str


class WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropIdentifiersItemsType(
    TypedDict
):
    """WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropIdentifiersItems"""

    type: str
    value: str


class WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropReferencesItemsType(
    TypedDict
):
    """WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropReferencesItems"""

    url: str


class WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropVulnerabilitiesItemsType(
    TypedDict
):
    """WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropVulnerabilitiesItems"""

    first_patched_version: Union[
        WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropVulnerabilitiesItemsPropFirstPatchedVersionType,
        None,
    ]
    package: WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropVulnerabilitiesItemsPropPackageType
    severity: str
    vulnerable_version_range: str


class WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropVulnerabilitiesItemsPropFirstPatchedVersionType(
    TypedDict
):
    """WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropVulnerabilitiesItemsProp
    FirstPatchedVersion
    """

    identifier: str


class WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropVulnerabilitiesItemsPropPackageType(
    TypedDict
):
    """WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropVulnerabilitiesItemsProp
    Package
    """

    ecosystem: str
    name: str


class WebhookSecurityAdvisoryUpdatedType(TypedDict):
    """security_advisory updated event"""

    action: Literal["updated"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: NotRequired[RepositoryWebhooksType]
    security_advisory: WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryType
    sender: NotRequired[SimpleUserWebhooksType]


class WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryType(TypedDict):
    """WebhookSecurityAdvisoryUpdatedPropSecurityAdvisory

    The details of the security advisory, including summary, description, and
    severity.
    """

    cvss: WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropCvssType
    cwes: List[WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropCwesItemsType]
    description: str
    ghsa_id: str
    identifiers: List[
        WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropIdentifiersItemsType
    ]
    published_at: str
    references: List[
        WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropReferencesItemsType
    ]
    severity: str
    summary: str
    updated_at: str
    vulnerabilities: List[
        WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropVulnerabilitiesItemsType
    ]
    withdrawn_at: Union[str, None]


class WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropCvssType(TypedDict):
    """WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropCvss"""

    score: float
    vector_string: Union[str, None]


class WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropCwesItemsType(TypedDict):
    """WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropCwesItems"""

    cwe_id: str
    name: str


class WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropIdentifiersItemsType(
    TypedDict
):
    """WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropIdentifiersItems"""

    type: str
    value: str


class WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropReferencesItemsType(
    TypedDict
):
    """WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropReferencesItems"""

    url: str


class WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropVulnerabilitiesItemsType(
    TypedDict
):
    """WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropVulnerabilitiesItems"""

    first_patched_version: Union[
        WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropVulnerabilitiesItemsPropFirstPatchedVersionType,
        None,
    ]
    package: WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropVulnerabilitiesItemsPropPackageType
    severity: str
    vulnerable_version_range: str


class WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropVulnerabilitiesItemsPropFirstPatchedVersionType(
    TypedDict
):
    """WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropVulnerabilitiesItemsPropFi
    rstPatchedVersion
    """

    identifier: str


class WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropVulnerabilitiesItemsPropPackageType(
    TypedDict
):
    """WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropVulnerabilitiesItemsPropPa
    ckage
    """

    ecosystem: str
    name: str


class WebhookSecurityAdvisoryWithdrawnType(TypedDict):
    """security_advisory withdrawn event"""

    action: Literal["withdrawn"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: NotRequired[RepositoryWebhooksType]
    security_advisory: WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryType
    sender: NotRequired[SimpleUserWebhooksType]


class WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryType(TypedDict):
    """WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisory

    The details of the security advisory, including summary, description, and
    severity.
    """

    cvss: WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropCvssType
    cwes: List[WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropCwesItemsType]
    description: str
    ghsa_id: str
    identifiers: List[
        WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropIdentifiersItemsType
    ]
    published_at: str
    references: List[
        WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropReferencesItemsType
    ]
    severity: str
    summary: str
    updated_at: str
    vulnerabilities: List[
        WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropVulnerabilitiesItemsType
    ]
    withdrawn_at: str


class WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropCvssType(TypedDict):
    """WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropCvss"""

    score: float
    vector_string: Union[str, None]


class WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropCwesItemsType(TypedDict):
    """WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropCwesItems"""

    cwe_id: str
    name: str


class WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropIdentifiersItemsType(
    TypedDict
):
    """WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropIdentifiersItems"""

    type: str
    value: str


class WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropReferencesItemsType(
    TypedDict
):
    """WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropReferencesItems"""

    url: str


class WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropVulnerabilitiesItemsType(
    TypedDict
):
    """WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropVulnerabilitiesItems"""

    first_patched_version: Union[
        WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropVulnerabilitiesItemsPropFirstPatchedVersionType,
        None,
    ]
    package: WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropVulnerabilitiesItemsPropPackageType
    severity: str
    vulnerable_version_range: str


class WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropVulnerabilitiesItemsPropFirstPatchedVersionType(
    TypedDict
):
    """WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropVulnerabilitiesItemsProp
    FirstPatchedVersion
    """

    identifier: str


class WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropVulnerabilitiesItemsPropPackageType(
    TypedDict
):
    """WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropVulnerabilitiesItemsProp
    Package
    """

    ecosystem: str
    name: str


class WebhookSecurityAndAnalysisType(TypedDict):
    """security_and_analysis event"""

    changes: WebhookSecurityAndAnalysisPropChangesType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: FullRepositoryType
    sender: NotRequired[SimpleUserWebhooksType]


class WebhookSecurityAndAnalysisPropChangesType(TypedDict):
    """WebhookSecurityAndAnalysisPropChanges"""

    from_: NotRequired[WebhookSecurityAndAnalysisPropChangesPropFromType]


class WebhookSecurityAndAnalysisPropChangesPropFromType(TypedDict):
    """WebhookSecurityAndAnalysisPropChangesPropFrom"""

    security_and_analysis: NotRequired[Union[SecurityAndAnalysisType, None]]


class WebhookSponsorshipCancelledType(TypedDict):
    """sponsorship cancelled event"""

    action: Literal["cancelled"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: NotRequired[RepositoryWebhooksType]
    sender: SimpleUserWebhooksType
    sponsorship: WebhookSponsorshipCancelledPropSponsorshipType


class WebhookSponsorshipCancelledPropSponsorshipType(TypedDict):
    """WebhookSponsorshipCancelledPropSponsorship"""

    created_at: str
    maintainer: NotRequired[
        WebhookSponsorshipCancelledPropSponsorshipPropMaintainerType
    ]
    node_id: str
    privacy_level: str
    sponsor: Union[WebhookSponsorshipCancelledPropSponsorshipPropSponsorType, None]
    sponsorable: Union[
        WebhookSponsorshipCancelledPropSponsorshipPropSponsorableType, None
    ]
    tier: WebhookSponsorshipCancelledPropSponsorshipPropTierType


class WebhookSponsorshipCancelledPropSponsorshipPropMaintainerType(TypedDict):
    """WebhookSponsorshipCancelledPropSponsorshipPropMaintainer"""

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookSponsorshipCancelledPropSponsorshipPropSponsorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookSponsorshipCancelledPropSponsorshipPropSponsorableType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookSponsorshipCancelledPropSponsorshipPropTierType(TypedDict):
    """Sponsorship Tier

    The `tier_changed` and `pending_tier_change` will include the original tier
    before the change or pending change. For more information, see the pending tier
    change payload.
    """

    created_at: str
    description: str
    is_custom_ammount: NotRequired[bool]
    is_custom_amount: NotRequired[bool]
    is_one_time: bool
    monthly_price_in_cents: int
    monthly_price_in_dollars: int
    name: str
    node_id: str


class WebhookSponsorshipCreatedType(TypedDict):
    """sponsorship created event"""

    action: Literal["created"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: NotRequired[RepositoryWebhooksType]
    sender: SimpleUserWebhooksType
    sponsorship: WebhookSponsorshipCreatedPropSponsorshipType


class WebhookSponsorshipCreatedPropSponsorshipType(TypedDict):
    """WebhookSponsorshipCreatedPropSponsorship"""

    created_at: str
    maintainer: NotRequired[WebhookSponsorshipCreatedPropSponsorshipPropMaintainerType]
    node_id: str
    privacy_level: str
    sponsor: Union[WebhookSponsorshipCreatedPropSponsorshipPropSponsorType, None]
    sponsorable: Union[
        WebhookSponsorshipCreatedPropSponsorshipPropSponsorableType, None
    ]
    tier: WebhookSponsorshipCreatedPropSponsorshipPropTierType


class WebhookSponsorshipCreatedPropSponsorshipPropMaintainerType(TypedDict):
    """WebhookSponsorshipCreatedPropSponsorshipPropMaintainer"""

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookSponsorshipCreatedPropSponsorshipPropSponsorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookSponsorshipCreatedPropSponsorshipPropSponsorableType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookSponsorshipCreatedPropSponsorshipPropTierType(TypedDict):
    """Sponsorship Tier

    The `tier_changed` and `pending_tier_change` will include the original tier
    before the change or pending change. For more information, see the pending tier
    change payload.
    """

    created_at: str
    description: str
    is_custom_ammount: NotRequired[bool]
    is_custom_amount: NotRequired[bool]
    is_one_time: bool
    monthly_price_in_cents: int
    monthly_price_in_dollars: int
    name: str
    node_id: str


class WebhookSponsorshipEditedType(TypedDict):
    """sponsorship edited event"""

    action: Literal["edited"]
    changes: WebhookSponsorshipEditedPropChangesType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: NotRequired[RepositoryWebhooksType]
    sender: SimpleUserWebhooksType
    sponsorship: WebhookSponsorshipEditedPropSponsorshipType


class WebhookSponsorshipEditedPropChangesType(TypedDict):
    """WebhookSponsorshipEditedPropChanges"""

    privacy_level: NotRequired[WebhookSponsorshipEditedPropChangesPropPrivacyLevelType]


class WebhookSponsorshipEditedPropChangesPropPrivacyLevelType(TypedDict):
    """WebhookSponsorshipEditedPropChangesPropPrivacyLevel"""

    from_: str


class WebhookSponsorshipEditedPropSponsorshipType(TypedDict):
    """WebhookSponsorshipEditedPropSponsorship"""

    created_at: str
    maintainer: NotRequired[WebhookSponsorshipEditedPropSponsorshipPropMaintainerType]
    node_id: str
    privacy_level: str
    sponsor: Union[WebhookSponsorshipEditedPropSponsorshipPropSponsorType, None]
    sponsorable: Union[WebhookSponsorshipEditedPropSponsorshipPropSponsorableType, None]
    tier: WebhookSponsorshipEditedPropSponsorshipPropTierType


class WebhookSponsorshipEditedPropSponsorshipPropMaintainerType(TypedDict):
    """WebhookSponsorshipEditedPropSponsorshipPropMaintainer"""

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookSponsorshipEditedPropSponsorshipPropSponsorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookSponsorshipEditedPropSponsorshipPropSponsorableType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookSponsorshipEditedPropSponsorshipPropTierType(TypedDict):
    """Sponsorship Tier

    The `tier_changed` and `pending_tier_change` will include the original tier
    before the change or pending change. For more information, see the pending tier
    change payload.
    """

    created_at: str
    description: str
    is_custom_ammount: NotRequired[bool]
    is_custom_amount: NotRequired[bool]
    is_one_time: bool
    monthly_price_in_cents: int
    monthly_price_in_dollars: int
    name: str
    node_id: str


class WebhookSponsorshipPendingCancellationType(TypedDict):
    """sponsorship pending_cancellation event"""

    action: Literal["pending_cancellation"]
    effective_date: NotRequired[str]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: NotRequired[RepositoryWebhooksType]
    sender: SimpleUserWebhooksType
    sponsorship: WebhookSponsorshipPendingCancellationPropSponsorshipType


class WebhookSponsorshipPendingCancellationPropSponsorshipType(TypedDict):
    """WebhookSponsorshipPendingCancellationPropSponsorship"""

    created_at: str
    maintainer: NotRequired[
        WebhookSponsorshipPendingCancellationPropSponsorshipPropMaintainerType
    ]
    node_id: str
    privacy_level: str
    sponsor: Union[
        WebhookSponsorshipPendingCancellationPropSponsorshipPropSponsorType, None
    ]
    sponsorable: Union[
        WebhookSponsorshipPendingCancellationPropSponsorshipPropSponsorableType, None
    ]
    tier: WebhookSponsorshipPendingCancellationPropSponsorshipPropTierType


class WebhookSponsorshipPendingCancellationPropSponsorshipPropMaintainerType(TypedDict):
    """WebhookSponsorshipPendingCancellationPropSponsorshipPropMaintainer"""

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookSponsorshipPendingCancellationPropSponsorshipPropSponsorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookSponsorshipPendingCancellationPropSponsorshipPropSponsorableType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookSponsorshipPendingCancellationPropSponsorshipPropTierType(TypedDict):
    """Sponsorship Tier

    The `tier_changed` and `pending_tier_change` will include the original tier
    before the change or pending change. For more information, see the pending tier
    change payload.
    """

    created_at: str
    description: str
    is_custom_ammount: NotRequired[bool]
    is_custom_amount: NotRequired[bool]
    is_one_time: bool
    monthly_price_in_cents: int
    monthly_price_in_dollars: int
    name: str
    node_id: str


class WebhookSponsorshipPendingTierChangeType(TypedDict):
    """sponsorship pending_tier_change event"""

    action: Literal["pending_tier_change"]
    changes: WebhookSponsorshipPendingTierChangePropChangesType
    effective_date: NotRequired[str]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: NotRequired[RepositoryWebhooksType]
    sender: SimpleUserWebhooksType
    sponsorship: WebhookSponsorshipPendingTierChangePropSponsorshipType


class WebhookSponsorshipPendingTierChangePropChangesType(TypedDict):
    """WebhookSponsorshipPendingTierChangePropChanges"""

    tier: WebhookSponsorshipPendingTierChangePropChangesPropTierType


class WebhookSponsorshipPendingTierChangePropChangesPropTierType(TypedDict):
    """WebhookSponsorshipPendingTierChangePropChangesPropTier"""

    from_: WebhookSponsorshipPendingTierChangePropChangesPropTierPropFromType


class WebhookSponsorshipPendingTierChangePropChangesPropTierPropFromType(TypedDict):
    """Sponsorship Tier

    The `tier_changed` and `pending_tier_change` will include the original tier
    before the change or pending change. For more information, see the pending tier
    change payload.
    """

    created_at: str
    description: str
    is_custom_ammount: NotRequired[bool]
    is_custom_amount: NotRequired[bool]
    is_one_time: bool
    monthly_price_in_cents: int
    monthly_price_in_dollars: int
    name: str
    node_id: str


class WebhookSponsorshipPendingTierChangePropSponsorshipType(TypedDict):
    """WebhookSponsorshipPendingTierChangePropSponsorship"""

    created_at: str
    maintainer: NotRequired[
        WebhookSponsorshipPendingTierChangePropSponsorshipPropMaintainerType
    ]
    node_id: str
    privacy_level: str
    sponsor: Union[
        WebhookSponsorshipPendingTierChangePropSponsorshipPropSponsorType, None
    ]
    sponsorable: Union[
        WebhookSponsorshipPendingTierChangePropSponsorshipPropSponsorableType, None
    ]
    tier: WebhookSponsorshipPendingTierChangePropSponsorshipPropTierType


class WebhookSponsorshipPendingTierChangePropSponsorshipPropMaintainerType(TypedDict):
    """WebhookSponsorshipPendingTierChangePropSponsorshipPropMaintainer"""

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookSponsorshipPendingTierChangePropSponsorshipPropSponsorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookSponsorshipPendingTierChangePropSponsorshipPropSponsorableType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookSponsorshipPendingTierChangePropSponsorshipPropTierType(TypedDict):
    """Sponsorship Tier

    The `tier_changed` and `pending_tier_change` will include the original tier
    before the change or pending change. For more information, see the pending tier
    change payload.
    """

    created_at: str
    description: str
    is_custom_ammount: NotRequired[bool]
    is_custom_amount: NotRequired[bool]
    is_one_time: bool
    monthly_price_in_cents: int
    monthly_price_in_dollars: int
    name: str
    node_id: str


class WebhookSponsorshipTierChangedType(TypedDict):
    """sponsorship tier_changed event"""

    action: Literal["tier_changed"]
    changes: WebhookSponsorshipTierChangedPropChangesType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: NotRequired[RepositoryWebhooksType]
    sender: SimpleUserWebhooksType
    sponsorship: WebhookSponsorshipTierChangedPropSponsorshipType


class WebhookSponsorshipTierChangedPropChangesType(TypedDict):
    """WebhookSponsorshipTierChangedPropChanges"""

    tier: WebhookSponsorshipTierChangedPropChangesPropTierType


class WebhookSponsorshipTierChangedPropChangesPropTierType(TypedDict):
    """WebhookSponsorshipTierChangedPropChangesPropTier"""

    from_: WebhookSponsorshipTierChangedPropChangesPropTierPropFromType


class WebhookSponsorshipTierChangedPropChangesPropTierPropFromType(TypedDict):
    """Sponsorship Tier

    The `tier_changed` and `pending_tier_change` will include the original tier
    before the change or pending change. For more information, see the pending tier
    change payload.
    """

    created_at: str
    description: str
    is_custom_ammount: NotRequired[bool]
    is_custom_amount: NotRequired[bool]
    is_one_time: bool
    monthly_price_in_cents: int
    monthly_price_in_dollars: int
    name: str
    node_id: str


class WebhookSponsorshipTierChangedPropSponsorshipType(TypedDict):
    """WebhookSponsorshipTierChangedPropSponsorship"""

    created_at: str
    maintainer: NotRequired[
        WebhookSponsorshipTierChangedPropSponsorshipPropMaintainerType
    ]
    node_id: str
    privacy_level: str
    sponsor: Union[WebhookSponsorshipTierChangedPropSponsorshipPropSponsorType, None]
    sponsorable: Union[
        WebhookSponsorshipTierChangedPropSponsorshipPropSponsorableType, None
    ]
    tier: WebhookSponsorshipTierChangedPropSponsorshipPropTierType


class WebhookSponsorshipTierChangedPropSponsorshipPropMaintainerType(TypedDict):
    """WebhookSponsorshipTierChangedPropSponsorshipPropMaintainer"""

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookSponsorshipTierChangedPropSponsorshipPropSponsorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookSponsorshipTierChangedPropSponsorshipPropSponsorableType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookSponsorshipTierChangedPropSponsorshipPropTierType(TypedDict):
    """Sponsorship Tier

    The `tier_changed` and `pending_tier_change` will include the original tier
    before the change or pending change. For more information, see the pending tier
    change payload.
    """

    created_at: str
    description: str
    is_custom_ammount: NotRequired[bool]
    is_custom_amount: NotRequired[bool]
    is_one_time: bool
    monthly_price_in_cents: int
    monthly_price_in_dollars: int
    name: str
    node_id: str


class WebhookStarCreatedType(TypedDict):
    """star created event"""

    action: Literal["created"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType
    starred_at: Union[str, None]


class WebhookStarDeletedType(TypedDict):
    """star deleted event"""

    action: Literal["deleted"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType
    starred_at: None


class WebhookStatusType(TypedDict):
    """status event"""

    avatar_url: NotRequired[Union[str, None]]
    branches: List[WebhookStatusPropBranchesItemsType]
    commit: WebhookStatusPropCommitType
    context: str
    created_at: str
    description: Union[str, None]
    enterprise: NotRequired[EnterpriseWebhooksType]
    id: int
    installation: NotRequired[SimpleInstallationType]
    name: str
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType
    sha: str
    state: Literal["pending", "success", "failure", "error"]
    target_url: Union[str, None]
    updated_at: str


class WebhookStatusPropBranchesItemsType(TypedDict):
    """WebhookStatusPropBranchesItems"""

    commit: WebhookStatusPropBranchesItemsPropCommitType
    name: str
    protected: bool


class WebhookStatusPropBranchesItemsPropCommitType(TypedDict):
    """WebhookStatusPropBranchesItemsPropCommit"""

    sha: Union[str, None]
    url: Union[str, None]


class WebhookStatusPropCommitType(TypedDict):
    """WebhookStatusPropCommit"""

    author: Union[WebhookStatusPropCommitPropAuthorType, None]
    comments_url: str
    commit: WebhookStatusPropCommitPropCommitType
    committer: Union[WebhookStatusPropCommitPropCommitterType, None]
    html_url: str
    node_id: str
    parents: List[WebhookStatusPropCommitPropParentsItemsType]
    sha: str
    url: str


class WebhookStatusPropCommitPropAuthorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookStatusPropCommitPropCommitType(TypedDict):
    """WebhookStatusPropCommitPropCommit"""

    author: WebhookStatusPropCommitPropCommitPropAuthorType
    comment_count: int
    committer: WebhookStatusPropCommitPropCommitPropCommitterType
    message: str
    tree: WebhookStatusPropCommitPropCommitPropTreeType
    url: str
    verification: WebhookStatusPropCommitPropCommitPropVerificationType


class WebhookStatusPropCommitPropCommitPropAuthorType(TypedDict):
    """WebhookStatusPropCommitPropCommitPropAuthor"""

    date: datetime
    email: str
    name: str
    username: NotRequired[str]


class WebhookStatusPropCommitPropCommitPropAuthorAllof0Type(TypedDict):
    """Committer

    Metaproperties for Git author/committer information.
    """

    date: NotRequired[datetime]
    email: Union[str, None]
    name: str
    username: NotRequired[str]


class WebhookStatusPropCommitPropCommitPropAuthorAllof1Type(TypedDict):
    """WebhookStatusPropCommitPropCommitPropAuthorAllof1"""

    date: str
    email: NotRequired[str]
    name: NotRequired[str]


class WebhookStatusPropCommitPropCommitPropCommitterType(TypedDict):
    """WebhookStatusPropCommitPropCommitPropCommitter"""

    date: datetime
    email: str
    name: str
    username: NotRequired[str]


class WebhookStatusPropCommitPropCommitPropCommitterAllof0Type(TypedDict):
    """Committer

    Metaproperties for Git author/committer information.
    """

    date: NotRequired[datetime]
    email: Union[str, None]
    name: str
    username: NotRequired[str]


class WebhookStatusPropCommitPropCommitPropCommitterAllof1Type(TypedDict):
    """WebhookStatusPropCommitPropCommitPropCommitterAllof1"""

    date: str
    email: NotRequired[str]
    name: NotRequired[str]


class WebhookStatusPropCommitPropCommitPropTreeType(TypedDict):
    """WebhookStatusPropCommitPropCommitPropTree"""

    sha: str
    url: str


class WebhookStatusPropCommitPropCommitPropVerificationType(TypedDict):
    """WebhookStatusPropCommitPropCommitPropVerification"""

    payload: Union[str, None]
    reason: Literal[
        "expired_key",
        "not_signing_key",
        "gpgverify_error",
        "gpgverify_unavailable",
        "unsigned",
        "unknown_signature_type",
        "no_user",
        "unverified_email",
        "bad_email",
        "unknown_key",
        "malformed_signature",
        "invalid",
        "valid",
        "bad_cert",
        "ocsp_pending",
    ]
    signature: Union[str, None]
    verified: bool


class WebhookStatusPropCommitPropCommitterType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookStatusPropCommitPropParentsItemsType(TypedDict):
    """WebhookStatusPropCommitPropParentsItems"""

    html_url: str
    sha: str
    url: str


class WebhookTeamAddType(TypedDict):
    """team_add event"""

    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType
    team: WebhookTeamAddPropTeamType


class WebhookTeamAddPropTeamType(TypedDict):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: NotRequired[Union[str, None]]
    html_url: NotRequired[str]
    id: int
    members_url: NotRequired[str]
    name: str
    node_id: NotRequired[str]
    parent: NotRequired[Union[WebhookTeamAddPropTeamPropParentType, None]]
    permission: NotRequired[str]
    privacy: NotRequired[Literal["open", "closed", "secret"]]
    notification_setting: NotRequired[
        Literal["notifications_enabled", "notifications_disabled"]
    ]
    repositories_url: NotRequired[str]
    slug: NotRequired[str]
    url: NotRequired[str]


class WebhookTeamAddPropTeamPropParentType(TypedDict):
    """WebhookTeamAddPropTeamPropParent"""

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    notification_setting: Literal["notifications_enabled", "notifications_disabled"]
    repositories_url: str
    slug: str
    url: str


class WebhookTeamAddedToRepositoryType(TypedDict):
    """team added_to_repository event"""

    action: Literal["added_to_repository"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: OrganizationSimpleWebhooksType
    repository: NotRequired[WebhookTeamAddedToRepositoryPropRepositoryType]
    sender: NotRequired[SimpleUserWebhooksType]
    team: WebhookTeamAddedToRepositoryPropTeamType


class WebhookTeamAddedToRepositoryPropRepositoryType(TypedDict):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    custom_properties: NotRequired[
        WebhookTeamAddedToRepositoryPropRepositoryPropCustomPropertiesType
    ]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[WebhookTeamAddedToRepositoryPropRepositoryPropLicenseType, None]
    master_branch: NotRequired[str]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[WebhookTeamAddedToRepositoryPropRepositoryPropOwnerType, None]
    permissions: NotRequired[
        WebhookTeamAddedToRepositoryPropRepositoryPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int


class WebhookTeamAddedToRepositoryPropRepositoryPropCustomPropertiesType(TypedDict):
    """WebhookTeamAddedToRepositoryPropRepositoryPropCustomProperties

    The custom properties that were defined for the repository. The keys are the
    custom property names, and the values are the corresponding custom property
    values.
    """


class WebhookTeamAddedToRepositoryPropRepositoryPropLicenseType(TypedDict):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookTeamAddedToRepositoryPropRepositoryPropOwnerType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookTeamAddedToRepositoryPropRepositoryPropPermissionsType(TypedDict):
    """WebhookTeamAddedToRepositoryPropRepositoryPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookTeamAddedToRepositoryPropTeamType(TypedDict):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: NotRequired[Union[str, None]]
    html_url: NotRequired[str]
    id: int
    members_url: NotRequired[str]
    name: str
    node_id: NotRequired[str]
    parent: NotRequired[Union[WebhookTeamAddedToRepositoryPropTeamPropParentType, None]]
    permission: NotRequired[str]
    privacy: NotRequired[Literal["open", "closed", "secret"]]
    notification_setting: NotRequired[
        Literal["notifications_enabled", "notifications_disabled"]
    ]
    repositories_url: NotRequired[str]
    slug: NotRequired[str]
    url: NotRequired[str]


class WebhookTeamAddedToRepositoryPropTeamPropParentType(TypedDict):
    """WebhookTeamAddedToRepositoryPropTeamPropParent"""

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    notification_setting: Literal["notifications_enabled", "notifications_disabled"]
    repositories_url: str
    slug: str
    url: str


class WebhookTeamCreatedType(TypedDict):
    """team created event"""

    action: Literal["created"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: OrganizationSimpleWebhooksType
    repository: NotRequired[WebhookTeamCreatedPropRepositoryType]
    sender: SimpleUserWebhooksType
    team: WebhookTeamCreatedPropTeamType


class WebhookTeamCreatedPropRepositoryType(TypedDict):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    custom_properties: NotRequired[
        WebhookTeamCreatedPropRepositoryPropCustomPropertiesType
    ]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[WebhookTeamCreatedPropRepositoryPropLicenseType, None]
    master_branch: NotRequired[str]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[WebhookTeamCreatedPropRepositoryPropOwnerType, None]
    permissions: NotRequired[WebhookTeamCreatedPropRepositoryPropPermissionsType]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int


class WebhookTeamCreatedPropRepositoryPropCustomPropertiesType(TypedDict):
    """WebhookTeamCreatedPropRepositoryPropCustomProperties

    The custom properties that were defined for the repository. The keys are the
    custom property names, and the values are the corresponding custom property
    values.
    """


class WebhookTeamCreatedPropRepositoryPropLicenseType(TypedDict):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookTeamCreatedPropRepositoryPropOwnerType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookTeamCreatedPropRepositoryPropPermissionsType(TypedDict):
    """WebhookTeamCreatedPropRepositoryPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookTeamCreatedPropTeamType(TypedDict):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: NotRequired[Union[str, None]]
    html_url: NotRequired[str]
    id: int
    members_url: NotRequired[str]
    name: str
    node_id: NotRequired[str]
    parent: NotRequired[Union[WebhookTeamCreatedPropTeamPropParentType, None]]
    permission: NotRequired[str]
    privacy: NotRequired[Literal["open", "closed", "secret"]]
    notification_setting: NotRequired[
        Literal["notifications_enabled", "notifications_disabled"]
    ]
    repositories_url: NotRequired[str]
    slug: NotRequired[str]
    url: NotRequired[str]


class WebhookTeamCreatedPropTeamPropParentType(TypedDict):
    """WebhookTeamCreatedPropTeamPropParent"""

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    notification_setting: Literal["notifications_enabled", "notifications_disabled"]
    repositories_url: str
    slug: str
    url: str


class WebhookTeamDeletedType(TypedDict):
    """team deleted event"""

    action: Literal["deleted"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: OrganizationSimpleWebhooksType
    repository: NotRequired[WebhookTeamDeletedPropRepositoryType]
    sender: NotRequired[SimpleUserWebhooksType]
    team: WebhookTeamDeletedPropTeamType


class WebhookTeamDeletedPropRepositoryType(TypedDict):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    custom_properties: NotRequired[
        WebhookTeamDeletedPropRepositoryPropCustomPropertiesType
    ]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[WebhookTeamDeletedPropRepositoryPropLicenseType, None]
    master_branch: NotRequired[str]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[WebhookTeamDeletedPropRepositoryPropOwnerType, None]
    permissions: NotRequired[WebhookTeamDeletedPropRepositoryPropPermissionsType]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int


class WebhookTeamDeletedPropRepositoryPropCustomPropertiesType(TypedDict):
    """WebhookTeamDeletedPropRepositoryPropCustomProperties

    The custom properties that were defined for the repository. The keys are the
    custom property names, and the values are the corresponding custom property
    values.
    """


class WebhookTeamDeletedPropRepositoryPropLicenseType(TypedDict):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookTeamDeletedPropRepositoryPropOwnerType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookTeamDeletedPropRepositoryPropPermissionsType(TypedDict):
    """WebhookTeamDeletedPropRepositoryPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookTeamDeletedPropTeamType(TypedDict):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: NotRequired[Union[str, None]]
    html_url: NotRequired[str]
    id: int
    members_url: NotRequired[str]
    name: str
    node_id: NotRequired[str]
    parent: NotRequired[Union[WebhookTeamDeletedPropTeamPropParentType, None]]
    permission: NotRequired[str]
    privacy: NotRequired[Literal["open", "closed", "secret"]]
    notification_setting: NotRequired[
        Literal["notifications_enabled", "notifications_disabled"]
    ]
    repositories_url: NotRequired[str]
    slug: NotRequired[str]
    url: NotRequired[str]


class WebhookTeamDeletedPropTeamPropParentType(TypedDict):
    """WebhookTeamDeletedPropTeamPropParent"""

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    notification_setting: Literal["notifications_enabled", "notifications_disabled"]
    repositories_url: str
    slug: str
    url: str


class WebhookTeamEditedType(TypedDict):
    """team edited event"""

    action: Literal["edited"]
    changes: WebhookTeamEditedPropChangesType
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: OrganizationSimpleWebhooksType
    repository: NotRequired[WebhookTeamEditedPropRepositoryType]
    sender: SimpleUserWebhooksType
    team: WebhookTeamEditedPropTeamType


class WebhookTeamEditedPropChangesType(TypedDict):
    """WebhookTeamEditedPropChanges

    The changes to the team if the action was `edited`.
    """

    description: NotRequired[WebhookTeamEditedPropChangesPropDescriptionType]
    name: NotRequired[WebhookTeamEditedPropChangesPropNameType]
    privacy: NotRequired[WebhookTeamEditedPropChangesPropPrivacyType]
    notification_setting: NotRequired[
        WebhookTeamEditedPropChangesPropNotificationSettingType
    ]
    repository: NotRequired[WebhookTeamEditedPropChangesPropRepositoryType]


class WebhookTeamEditedPropChangesPropDescriptionType(TypedDict):
    """WebhookTeamEditedPropChangesPropDescription"""

    from_: str


class WebhookTeamEditedPropChangesPropNameType(TypedDict):
    """WebhookTeamEditedPropChangesPropName"""

    from_: str


class WebhookTeamEditedPropChangesPropPrivacyType(TypedDict):
    """WebhookTeamEditedPropChangesPropPrivacy"""

    from_: str


class WebhookTeamEditedPropChangesPropNotificationSettingType(TypedDict):
    """WebhookTeamEditedPropChangesPropNotificationSetting"""

    from_: str


class WebhookTeamEditedPropChangesPropRepositoryType(TypedDict):
    """WebhookTeamEditedPropChangesPropRepository"""

    permissions: WebhookTeamEditedPropChangesPropRepositoryPropPermissionsType


class WebhookTeamEditedPropChangesPropRepositoryPropPermissionsType(TypedDict):
    """WebhookTeamEditedPropChangesPropRepositoryPropPermissions"""

    from_: WebhookTeamEditedPropChangesPropRepositoryPropPermissionsPropFromType


class WebhookTeamEditedPropChangesPropRepositoryPropPermissionsPropFromType(TypedDict):
    """WebhookTeamEditedPropChangesPropRepositoryPropPermissionsPropFrom"""

    admin: NotRequired[bool]
    pull: NotRequired[bool]
    push: NotRequired[bool]


class WebhookTeamEditedPropRepositoryType(TypedDict):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    custom_properties: NotRequired[
        WebhookTeamEditedPropRepositoryPropCustomPropertiesType
    ]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[WebhookTeamEditedPropRepositoryPropLicenseType, None]
    master_branch: NotRequired[str]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[WebhookTeamEditedPropRepositoryPropOwnerType, None]
    permissions: NotRequired[WebhookTeamEditedPropRepositoryPropPermissionsType]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int


class WebhookTeamEditedPropRepositoryPropCustomPropertiesType(TypedDict):
    """WebhookTeamEditedPropRepositoryPropCustomProperties

    The custom properties that were defined for the repository. The keys are the
    custom property names, and the values are the corresponding custom property
    values.
    """


class WebhookTeamEditedPropRepositoryPropLicenseType(TypedDict):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookTeamEditedPropRepositoryPropOwnerType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookTeamEditedPropRepositoryPropPermissionsType(TypedDict):
    """WebhookTeamEditedPropRepositoryPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookTeamEditedPropTeamType(TypedDict):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: NotRequired[Union[str, None]]
    html_url: NotRequired[str]
    id: int
    members_url: NotRequired[str]
    name: str
    node_id: NotRequired[str]
    parent: NotRequired[Union[WebhookTeamEditedPropTeamPropParentType, None]]
    permission: NotRequired[str]
    privacy: NotRequired[Literal["open", "closed", "secret"]]
    notification_setting: NotRequired[
        Literal["notifications_enabled", "notifications_disabled"]
    ]
    repositories_url: NotRequired[str]
    slug: NotRequired[str]
    url: NotRequired[str]


class WebhookTeamEditedPropTeamPropParentType(TypedDict):
    """WebhookTeamEditedPropTeamPropParent"""

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    notification_setting: Literal["notifications_enabled", "notifications_disabled"]
    repositories_url: str
    slug: str
    url: str


class WebhookTeamRemovedFromRepositoryType(TypedDict):
    """team removed_from_repository event"""

    action: Literal["removed_from_repository"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: OrganizationSimpleWebhooksType
    repository: NotRequired[WebhookTeamRemovedFromRepositoryPropRepositoryType]
    sender: SimpleUserWebhooksType
    team: WebhookTeamRemovedFromRepositoryPropTeamType


class WebhookTeamRemovedFromRepositoryPropRepositoryType(TypedDict):
    """Repository

    A git repository
    """

    allow_auto_merge: NotRequired[bool]
    allow_forking: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_squash_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    archive_url: str
    archived: bool
    assignees_url: str
    blobs_url: str
    branches_url: str
    clone_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    created_at: Union[int, datetime]
    custom_properties: NotRequired[
        WebhookTeamRemovedFromRepositoryPropRepositoryPropCustomPropertiesType
    ]
    default_branch: str
    delete_branch_on_merge: NotRequired[bool]
    deployments_url: str
    description: Union[str, None]
    disabled: NotRequired[bool]
    downloads_url: str
    events_url: str
    fork: bool
    forks: int
    forks_count: int
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_pages: bool
    has_projects: bool
    has_wiki: bool
    homepage: Union[str, None]
    hooks_url: str
    html_url: str
    id: int
    is_template: NotRequired[bool]
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    language: Union[str, None]
    languages_url: str
    license_: Union[WebhookTeamRemovedFromRepositoryPropRepositoryPropLicenseType, None]
    master_branch: NotRequired[str]
    merges_url: str
    milestones_url: str
    mirror_url: Union[str, None]
    name: str
    node_id: str
    notifications_url: str
    open_issues: int
    open_issues_count: int
    organization: NotRequired[str]
    owner: Union[WebhookTeamRemovedFromRepositoryPropRepositoryPropOwnerType, None]
    permissions: NotRequired[
        WebhookTeamRemovedFromRepositoryPropRepositoryPropPermissionsType
    ]
    private: bool
    public: NotRequired[bool]
    pulls_url: str
    pushed_at: Union[int, datetime, None]
    releases_url: str
    role_name: NotRequired[Union[str, None]]
    size: int
    ssh_url: str
    stargazers: NotRequired[int]
    stargazers_count: int
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    svn_url: str
    tags_url: str
    teams_url: str
    topics: List[str]
    trees_url: str
    updated_at: datetime
    url: str
    visibility: Literal["public", "private", "internal"]
    watchers: int
    watchers_count: int


class WebhookTeamRemovedFromRepositoryPropRepositoryPropCustomPropertiesType(TypedDict):
    """WebhookTeamRemovedFromRepositoryPropRepositoryPropCustomProperties

    The custom properties that were defined for the repository. The keys are the
    custom property names, and the values are the corresponding custom property
    values.
    """


class WebhookTeamRemovedFromRepositoryPropRepositoryPropLicenseType(TypedDict):
    """License"""

    key: str
    name: str
    node_id: str
    spdx_id: str
    url: Union[str, None]


class WebhookTeamRemovedFromRepositoryPropRepositoryPropOwnerType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookTeamRemovedFromRepositoryPropRepositoryPropPermissionsType(TypedDict):
    """WebhookTeamRemovedFromRepositoryPropRepositoryPropPermissions"""

    admin: bool
    maintain: NotRequired[bool]
    pull: bool
    push: bool
    triage: NotRequired[bool]


class WebhookTeamRemovedFromRepositoryPropTeamType(TypedDict):
    """Team

    Groups of organization members that gives permissions on specified repositories.
    """

    deleted: NotRequired[bool]
    description: NotRequired[Union[str, None]]
    html_url: NotRequired[str]
    id: int
    members_url: NotRequired[str]
    name: str
    node_id: NotRequired[str]
    parent: NotRequired[
        Union[WebhookTeamRemovedFromRepositoryPropTeamPropParentType, None]
    ]
    permission: NotRequired[str]
    privacy: NotRequired[Literal["open", "closed", "secret"]]
    notification_setting: NotRequired[
        Literal["notifications_enabled", "notifications_disabled"]
    ]
    repositories_url: NotRequired[str]
    slug: NotRequired[str]
    url: NotRequired[str]


class WebhookTeamRemovedFromRepositoryPropTeamPropParentType(TypedDict):
    """WebhookTeamRemovedFromRepositoryPropTeamPropParent"""

    description: Union[str, None]
    html_url: str
    id: int
    members_url: str
    name: str
    node_id: str
    permission: str
    privacy: Literal["open", "closed", "secret"]
    notification_setting: Literal["notifications_enabled", "notifications_disabled"]
    repositories_url: str
    slug: str
    url: str


class WebhookWatchStartedType(TypedDict):
    """watch started event"""

    action: Literal["started"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType


class WebhookWorkflowDispatchType(TypedDict):
    """workflow_dispatch event"""

    enterprise: NotRequired[EnterpriseWebhooksType]
    inputs: Union[WebhookWorkflowDispatchPropInputsType, None]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    ref: str
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType
    workflow: str


class WebhookWorkflowDispatchPropInputsType(TypedDict):
    """WebhookWorkflowDispatchPropInputs"""


class WebhookWorkflowJobCompletedType(TypedDict):
    """workflow_job completed event"""

    action: Literal["completed"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType
    workflow_job: WebhookWorkflowJobCompletedPropWorkflowJobType
    deployment: NotRequired[DeploymentType]


class WebhookWorkflowJobCompletedPropWorkflowJobType(TypedDict):
    """WebhookWorkflowJobCompletedPropWorkflowJob"""

    check_run_url: str
    completed_at: str
    conclusion: Literal[
        "success",
        "failure",
        "skipped",
        "cancelled",
        "action_required",
        "neutral",
        "timed_out",
    ]
    created_at: str
    head_sha: str
    html_url: str
    id: int
    labels: List[str]
    name: str
    node_id: str
    run_attempt: int
    run_id: int
    run_url: str
    runner_group_id: Union[Union[int, None], None]
    runner_group_name: Union[Union[str, None], None]
    runner_id: Union[Union[int, None], None]
    runner_name: Union[Union[str, None], None]
    started_at: str
    status: Literal["queued", "in_progress", "completed", "waiting"]
    head_branch: Union[Union[str, None], None]
    workflow_name: Union[Union[str, None], None]
    steps: List[WebhookWorkflowJobCompletedPropWorkflowJobMergedStepsType]
    url: str


class WebhookWorkflowJobCompletedPropWorkflowJobAllof0Type(TypedDict):
    """Workflow Job

    The workflow job. Many `workflow_job` keys, such as `head_sha`, `conclusion`,
    and `started_at` are the same as those in a [`check_run`](#check_run) object.
    """

    check_run_url: str
    completed_at: Union[str, None]
    conclusion: Union[
        None,
        Literal[
            "success",
            "failure",
            "skipped",
            "cancelled",
            "action_required",
            "neutral",
            "timed_out",
        ],
    ]
    created_at: str
    head_sha: str
    html_url: str
    id: int
    labels: List[str]
    name: str
    node_id: str
    run_attempt: int
    run_id: int
    run_url: str
    runner_group_id: Union[int, None]
    runner_group_name: Union[str, None]
    runner_id: Union[int, None]
    runner_name: Union[str, None]
    started_at: str
    status: Literal["queued", "in_progress", "completed", "waiting"]
    head_branch: Union[str, None]
    workflow_name: Union[str, None]
    steps: List[WebhookWorkflowJobCompletedPropWorkflowJobAllof0PropStepsItemsType]
    url: str


class WebhookWorkflowJobCompletedPropWorkflowJobAllof0PropStepsItemsType(TypedDict):
    """Workflow Step"""

    completed_at: Union[str, None]
    conclusion: Union[None, Literal["failure", "skipped", "success", "cancelled"]]
    name: str
    number: int
    started_at: Union[str, None]
    status: Literal["in_progress", "completed", "queued"]


class WebhookWorkflowJobCompletedPropWorkflowJobAllof1Type(TypedDict):
    """WebhookWorkflowJobCompletedPropWorkflowJobAllof1"""

    check_run_url: NotRequired[str]
    completed_at: NotRequired[str]
    conclusion: Literal[
        "success",
        "failure",
        "skipped",
        "cancelled",
        "action_required",
        "neutral",
        "timed_out",
    ]
    created_at: NotRequired[str]
    head_sha: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    labels: NotRequired[List[Union[str, None]]]
    name: NotRequired[str]
    node_id: NotRequired[str]
    run_attempt: NotRequired[int]
    run_id: NotRequired[int]
    run_url: NotRequired[str]
    runner_group_id: NotRequired[Union[int, None]]
    runner_group_name: NotRequired[Union[str, None]]
    runner_id: NotRequired[Union[int, None]]
    runner_name: NotRequired[Union[str, None]]
    started_at: NotRequired[str]
    status: NotRequired[str]
    head_branch: NotRequired[Union[str, None]]
    workflow_name: NotRequired[Union[str, None]]
    steps: NotRequired[
        List[
            Union[
                WebhookWorkflowJobCompletedPropWorkflowJobAllof1PropStepsItemsType, None
            ]
        ]
    ]
    url: NotRequired[str]


class WebhookWorkflowJobCompletedPropWorkflowJobAllof1PropStepsItemsType(TypedDict):
    """WebhookWorkflowJobCompletedPropWorkflowJobAllof1PropStepsItems"""


class WebhookWorkflowJobCompletedPropWorkflowJobMergedStepsType(TypedDict):
    """WebhookWorkflowJobCompletedPropWorkflowJobMergedSteps"""

    completed_at: Union[str, None]
    conclusion: Union[None, Literal["failure", "skipped", "success", "cancelled"]]
    name: str
    number: int
    started_at: Union[str, None]
    status: Literal["in_progress", "completed", "queued"]


class WebhookWorkflowJobInProgressType(TypedDict):
    """workflow_job in_progress event"""

    action: Literal["in_progress"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType
    workflow_job: WebhookWorkflowJobInProgressPropWorkflowJobType
    deployment: NotRequired[DeploymentType]


class WebhookWorkflowJobInProgressPropWorkflowJobType(TypedDict):
    """WebhookWorkflowJobInProgressPropWorkflowJob"""

    check_run_url: str
    completed_at: Union[Union[str, None], None]
    conclusion: Union[Literal["success", "failure", "cancelled", "neutral"], None]
    created_at: str
    head_sha: str
    html_url: str
    id: int
    labels: List[str]
    name: str
    node_id: str
    run_attempt: int
    run_id: int
    run_url: str
    runner_group_id: Union[Union[int, None], None]
    runner_group_name: Union[Union[str, None], None]
    runner_id: Union[Union[int, None], None]
    runner_name: Union[Union[str, None], None]
    started_at: str
    status: Literal["queued", "in_progress", "completed"]
    head_branch: Union[Union[str, None], None]
    workflow_name: Union[Union[str, None], None]
    steps: List[WebhookWorkflowJobInProgressPropWorkflowJobMergedStepsType]
    url: str


class WebhookWorkflowJobInProgressPropWorkflowJobAllof0Type(TypedDict):
    """Workflow Job

    The workflow job. Many `workflow_job` keys, such as `head_sha`, `conclusion`,
    and `started_at` are the same as those in a [`check_run`](#check_run) object.
    """

    check_run_url: str
    completed_at: Union[str, None]
    conclusion: Union[None, Literal["success", "failure", "cancelled", "neutral"]]
    created_at: str
    head_sha: str
    html_url: str
    id: int
    labels: List[str]
    name: str
    node_id: str
    run_attempt: int
    run_id: int
    run_url: str
    runner_group_id: Union[int, None]
    runner_group_name: Union[str, None]
    runner_id: Union[int, None]
    runner_name: Union[str, None]
    started_at: str
    status: Literal["queued", "in_progress", "completed"]
    head_branch: Union[str, None]
    workflow_name: Union[str, None]
    steps: List[WebhookWorkflowJobInProgressPropWorkflowJobAllof0PropStepsItemsType]
    url: str


class WebhookWorkflowJobInProgressPropWorkflowJobAllof0PropStepsItemsType(TypedDict):
    """Workflow Step"""

    completed_at: Union[str, None]
    conclusion: Union[None, Literal["failure", "skipped", "success", "cancelled"]]
    name: str
    number: int
    started_at: Union[str, None]
    status: Literal["in_progress", "completed", "queued", "pending"]


class WebhookWorkflowJobInProgressPropWorkflowJobAllof1Type(TypedDict):
    """WebhookWorkflowJobInProgressPropWorkflowJobAllof1"""

    check_run_url: NotRequired[str]
    completed_at: NotRequired[Union[str, None]]
    conclusion: NotRequired[Union[str, None]]
    created_at: NotRequired[str]
    head_sha: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    labels: NotRequired[List[str]]
    name: NotRequired[str]
    node_id: NotRequired[str]
    run_attempt: NotRequired[int]
    run_id: NotRequired[int]
    run_url: NotRequired[str]
    runner_group_id: NotRequired[Union[int, None]]
    runner_group_name: NotRequired[Union[str, None]]
    runner_id: NotRequired[Union[int, None]]
    runner_name: NotRequired[Union[str, None]]
    started_at: NotRequired[str]
    status: Literal["in_progress", "completed", "queued"]
    head_branch: NotRequired[Union[str, None]]
    workflow_name: NotRequired[Union[str, None]]
    steps: List[WebhookWorkflowJobInProgressPropWorkflowJobAllof1PropStepsItemsType]
    url: NotRequired[str]


class WebhookWorkflowJobInProgressPropWorkflowJobAllof1PropStepsItemsType(TypedDict):
    """Workflow Step"""

    completed_at: Union[str, None]
    conclusion: Union[str, None]
    name: str
    number: int
    started_at: Union[str, None]
    status: Literal["in_progress", "completed", "pending", "queued"]


class WebhookWorkflowJobInProgressPropWorkflowJobMergedStepsType(TypedDict):
    """WebhookWorkflowJobInProgressPropWorkflowJobMergedSteps"""

    completed_at: Union[Union[str, None], None]
    conclusion: Union[Literal["failure", "skipped", "success", "cancelled"], None]
    name: str
    number: int
    started_at: Union[Union[str, None], None]
    status: Literal["in_progress", "completed", "queued", "pending"]


class WebhookWorkflowJobQueuedType(TypedDict):
    """workflow_job queued event"""

    action: Literal["queued"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType
    workflow_job: WebhookWorkflowJobQueuedPropWorkflowJobType
    deployment: NotRequired[DeploymentType]


class WebhookWorkflowJobQueuedPropWorkflowJobType(TypedDict):
    """WebhookWorkflowJobQueuedPropWorkflowJob"""

    check_run_url: str
    completed_at: Union[str, None]
    conclusion: Union[str, None]
    created_at: str
    head_sha: str
    html_url: str
    id: int
    labels: List[str]
    name: str
    node_id: str
    run_attempt: int
    run_id: int
    run_url: str
    runner_group_id: Union[int, None]
    runner_group_name: Union[str, None]
    runner_id: Union[int, None]
    runner_name: Union[str, None]
    started_at: datetime
    status: Literal["queued", "in_progress", "completed", "waiting"]
    head_branch: Union[str, None]
    workflow_name: Union[str, None]
    steps: List[WebhookWorkflowJobQueuedPropWorkflowJobPropStepsItemsType]
    url: str


class WebhookWorkflowJobQueuedPropWorkflowJobPropStepsItemsType(TypedDict):
    """Workflow Step"""

    completed_at: Union[str, None]
    conclusion: Union[None, Literal["failure", "skipped", "success", "cancelled"]]
    name: str
    number: int
    started_at: Union[str, None]
    status: Literal["completed", "in_progress", "queued", "pending"]


class WebhookWorkflowJobWaitingType(TypedDict):
    """workflow_job waiting event"""

    action: Literal["waiting"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType
    workflow_job: WebhookWorkflowJobWaitingPropWorkflowJobType
    deployment: NotRequired[DeploymentType]


class WebhookWorkflowJobWaitingPropWorkflowJobType(TypedDict):
    """WebhookWorkflowJobWaitingPropWorkflowJob"""

    check_run_url: str
    completed_at: Union[str, None]
    conclusion: Union[str, None]
    created_at: str
    head_sha: str
    html_url: str
    id: int
    labels: List[str]
    name: str
    node_id: str
    run_attempt: int
    run_id: int
    run_url: str
    runner_group_id: Union[int, None]
    runner_group_name: Union[str, None]
    runner_id: Union[int, None]
    runner_name: Union[str, None]
    started_at: datetime
    head_branch: Union[str, None]
    workflow_name: Union[str, None]
    status: Literal["queued", "in_progress", "completed", "waiting"]
    steps: List[WebhookWorkflowJobWaitingPropWorkflowJobPropStepsItemsType]
    url: str


class WebhookWorkflowJobWaitingPropWorkflowJobPropStepsItemsType(TypedDict):
    """Workflow Step"""

    completed_at: Union[str, None]
    conclusion: Union[None, Literal["failure", "skipped", "success", "cancelled"]]
    name: str
    number: int
    started_at: Union[str, None]
    status: Literal["completed", "in_progress", "queued", "pending", "waiting"]


class WebhookWorkflowRunCompletedType(TypedDict):
    """workflow_run completed event"""

    action: Literal["completed"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType
    workflow: Union[WebhookWorkflowRunCompletedPropWorkflowType, None]
    workflow_run: WebhookWorkflowRunCompletedPropWorkflowRunType


class WebhookWorkflowRunCompletedPropWorkflowType(TypedDict):
    """Workflow"""

    badge_url: str
    created_at: datetime
    html_url: str
    id: int
    name: str
    node_id: str
    path: str
    state: str
    updated_at: datetime
    url: str


class WebhookWorkflowRunCompletedPropWorkflowRunType(TypedDict):
    """WebhookWorkflowRunCompletedPropWorkflowRun"""

    actor: WebhookWorkflowRunCompletedPropWorkflowRunMergedActorType
    artifacts_url: str
    cancel_url: str
    check_suite_id: int
    check_suite_node_id: str
    check_suite_url: str
    conclusion: Literal[
        "success",
        "failure",
        "neutral",
        "cancelled",
        "timed_out",
        "action_required",
        "stale",
        "skipped",
    ]
    created_at: datetime
    event: str
    head_branch: Union[Union[str, None], None]
    head_commit: WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadCommitType
    head_repository: WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadRepositoryType
    head_sha: str
    html_url: str
    id: int
    jobs_url: str
    logs_url: str
    name: Union[Union[str, None], None]
    node_id: str
    path: str
    previous_attempt_url: Union[Union[str, None], None]
    pull_requests: List[
        WebhookWorkflowRunCompletedPropWorkflowRunMergedPullRequestsType
    ]
    referenced_workflows: NotRequired[
        Union[
            Union[
                List[
                    WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropReferencedWorkflowsItemsType
                ],
                None,
            ],
            None,
        ]
    ]
    repository: WebhookWorkflowRunCompletedPropWorkflowRunMergedRepositoryType
    rerun_url: str
    run_attempt: int
    run_number: int
    run_started_at: datetime
    status: Literal[
        "requested", "in_progress", "completed", "queued", "pending", "waiting"
    ]
    triggering_actor: Union[
        WebhookWorkflowRunCompletedPropWorkflowRunMergedTriggeringActorType, None
    ]
    updated_at: datetime
    url: str
    workflow_id: int
    workflow_url: str


class WebhookWorkflowRunCompletedPropWorkflowRunAllof0Type(TypedDict):
    """Workflow Run"""

    actor: Union[WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropActorType, None]
    artifacts_url: str
    cancel_url: str
    check_suite_id: int
    check_suite_node_id: str
    check_suite_url: str
    conclusion: Union[
        None,
        Literal[
            "success",
            "failure",
            "neutral",
            "cancelled",
            "timed_out",
            "action_required",
            "stale",
            "skipped",
        ],
    ]
    created_at: datetime
    event: str
    head_branch: Union[str, None]
    head_commit: WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropHeadCommitType
    head_repository: WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropHeadRepositoryType
    head_sha: str
    html_url: str
    id: int
    jobs_url: str
    logs_url: str
    name: Union[str, None]
    node_id: str
    path: str
    previous_attempt_url: Union[str, None]
    pull_requests: List[
        WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItemsType
    ]
    referenced_workflows: NotRequired[
        Union[
            List[
                WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropReferencedWorkflowsItemsType
            ],
            None,
        ]
    ]
    repository: WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropRepositoryType
    rerun_url: str
    run_attempt: int
    run_number: int
    run_started_at: datetime
    status: Literal[
        "requested", "in_progress", "completed", "queued", "pending", "waiting"
    ]
    triggering_actor: Union[
        WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropTriggeringActorType, None
    ]
    updated_at: datetime
    url: str
    workflow_id: int
    workflow_url: str


class WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropActorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropHeadCommitType(TypedDict):
    """SimpleCommit"""

    author: WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropHeadCommitPropAuthorType
    committer: WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropHeadCommitPropCommitterType
    id: str
    message: str
    timestamp: str
    tree_id: str


class WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropHeadCommitPropAuthorType(
    TypedDict
):
    """Committer

    Metaproperties for Git author/committer information.
    """

    date: NotRequired[datetime]
    email: Union[str, None]
    name: str
    username: NotRequired[str]


class WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropHeadCommitPropCommitterType(
    TypedDict
):
    """Committer

    Metaproperties for Git author/committer information.
    """

    date: NotRequired[datetime]
    email: Union[str, None]
    name: str
    username: NotRequired[str]


class WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropHeadRepositoryType(TypedDict):
    """Repository Lite"""

    archive_url: str
    assignees_url: str
    blobs_url: str
    branches_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    deployments_url: str
    description: Union[str, None]
    downloads_url: str
    events_url: str
    fork: bool
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    hooks_url: str
    html_url: str
    id: int
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    languages_url: str
    merges_url: str
    milestones_url: str
    name: str
    node_id: str
    notifications_url: str
    owner: Union[
        WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropHeadRepositoryPropOwnerType,
        None,
    ]
    private: bool
    pulls_url: str
    releases_url: str
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    tags_url: str
    teams_url: str
    trees_url: str
    url: str


class WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropHeadRepositoryPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItemsType(
    TypedDict
):
    """WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItems"""

    base: WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItemsPropBaseType
    head: WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItemsPropHeadType
    id: float
    number: float
    url: str


class WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItemsPropBaseType(
    TypedDict
):
    """WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItemsPropBase"""

    ref: str
    repo: WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItemsPropBasePropRepoType
    sha: str


class WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItemsPropBasePropRepoType(
    TypedDict
):
    """Repo Ref"""

    id: int
    name: str
    url: str


class WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItemsPropHeadType(
    TypedDict
):
    """WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItemsPropHead"""

    ref: str
    repo: WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItemsPropHeadPropRepoType
    sha: str


class WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItemsPropHeadPropRepoType(
    TypedDict
):
    """Repo Ref"""

    id: int
    name: str
    url: str


class WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropReferencedWorkflowsItemsType(
    TypedDict
):
    """WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropReferencedWorkflowsItems"""

    path: str
    ref: NotRequired[str]
    sha: str


class WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropRepositoryType(TypedDict):
    """Repository Lite"""

    archive_url: str
    assignees_url: str
    blobs_url: str
    branches_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    deployments_url: str
    description: Union[str, None]
    downloads_url: str
    events_url: str
    fork: bool
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    hooks_url: str
    html_url: str
    id: int
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    languages_url: str
    merges_url: str
    milestones_url: str
    name: str
    node_id: str
    notifications_url: str
    owner: Union[
        WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropRepositoryPropOwnerType,
        None,
    ]
    private: bool
    pulls_url: str
    releases_url: str
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    tags_url: str
    teams_url: str
    trees_url: str
    url: str


class WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropRepositoryPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropTriggeringActorType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookWorkflowRunCompletedPropWorkflowRunAllof1Type(TypedDict):
    """WebhookWorkflowRunCompletedPropWorkflowRunAllof1"""

    actor: NotRequired[WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropActorType]
    artifacts_url: NotRequired[str]
    cancel_url: NotRequired[str]
    check_suite_id: NotRequired[int]
    check_suite_node_id: NotRequired[str]
    check_suite_url: NotRequired[str]
    conclusion: Literal[
        "success",
        "failure",
        "neutral",
        "cancelled",
        "timed_out",
        "action_required",
        "stale",
        "skipped",
    ]
    created_at: NotRequired[str]
    event: NotRequired[str]
    head_branch: NotRequired[Union[str, None]]
    head_commit: NotRequired[
        WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadCommitType
    ]
    head_repository: NotRequired[
        WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadRepositoryType
    ]
    head_sha: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    jobs_url: NotRequired[str]
    logs_url: NotRequired[str]
    name: NotRequired[Union[str, None]]
    node_id: NotRequired[str]
    path: NotRequired[str]
    previous_attempt_url: NotRequired[Union[str, None]]
    pull_requests: NotRequired[
        List[
            Union[
                WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropPullRequestsItemsType,
                None,
            ]
        ]
    ]
    referenced_workflows: NotRequired[
        Union[
            List[
                WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropReferencedWorkflowsItemsType
            ],
            None,
        ]
    ]
    repository: NotRequired[
        WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropRepositoryType
    ]
    rerun_url: NotRequired[str]
    run_attempt: NotRequired[int]
    run_number: NotRequired[int]
    run_started_at: NotRequired[str]
    status: NotRequired[str]
    triggering_actor: NotRequired[
        Union[
            WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropTriggeringActorType,
            None,
        ]
    ]
    updated_at: NotRequired[str]
    url: NotRequired[str]
    workflow_id: NotRequired[int]
    workflow_url: NotRequired[str]


class WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropActorType(TypedDict):
    """WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropActor"""

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadCommitType(TypedDict):
    """WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadCommit"""

    author: NotRequired[
        WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadCommitPropAuthorType
    ]
    committer: NotRequired[
        WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadCommitPropCommitterType
    ]
    id: NotRequired[str]
    message: NotRequired[str]
    timestamp: NotRequired[str]
    tree_id: NotRequired[str]


class WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadCommitPropAuthorType(
    TypedDict
):
    """WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadCommitPropAuthor"""

    email: NotRequired[str]
    name: NotRequired[str]


class WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadCommitPropCommitterType(
    TypedDict
):
    """WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadCommitPropCommitter"""

    email: NotRequired[str]
    name: NotRequired[str]


class WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadRepositoryType(TypedDict):
    """WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadRepository"""

    archive_url: NotRequired[str]
    assignees_url: NotRequired[str]
    blobs_url: NotRequired[str]
    branches_url: NotRequired[str]
    collaborators_url: NotRequired[str]
    comments_url: NotRequired[str]
    commits_url: NotRequired[str]
    compare_url: NotRequired[str]
    contents_url: NotRequired[str]
    contributors_url: NotRequired[str]
    deployments_url: NotRequired[str]
    description: NotRequired[Union[str, None]]
    downloads_url: NotRequired[str]
    events_url: NotRequired[str]
    fork: NotRequired[bool]
    forks_url: NotRequired[str]
    full_name: NotRequired[str]
    git_commits_url: NotRequired[str]
    git_refs_url: NotRequired[str]
    git_tags_url: NotRequired[str]
    hooks_url: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    issue_comment_url: NotRequired[str]
    issue_events_url: NotRequired[str]
    issues_url: NotRequired[str]
    keys_url: NotRequired[str]
    labels_url: NotRequired[str]
    languages_url: NotRequired[str]
    merges_url: NotRequired[str]
    milestones_url: NotRequired[str]
    name: NotRequired[str]
    node_id: NotRequired[str]
    notifications_url: NotRequired[str]
    owner: NotRequired[
        WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadRepositoryPropOwnerType
    ]
    private: NotRequired[bool]
    pulls_url: NotRequired[str]
    releases_url: NotRequired[str]
    stargazers_url: NotRequired[str]
    statuses_url: NotRequired[str]
    subscribers_url: NotRequired[str]
    subscription_url: NotRequired[str]
    tags_url: NotRequired[str]
    teams_url: NotRequired[str]
    trees_url: NotRequired[str]
    url: NotRequired[str]


class WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadRepositoryPropOwnerType(
    TypedDict
):
    """WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadRepositoryPropOwner"""

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropPullRequestsItemsType(
    TypedDict
):
    """WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropPullRequestsItems"""


class WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropReferencedWorkflowsItemsType(
    TypedDict
):
    """WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropReferencedWorkflowsItems"""

    path: str
    ref: NotRequired[str]
    sha: str


class WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropRepositoryType(TypedDict):
    """WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropRepository"""

    archive_url: NotRequired[str]
    assignees_url: NotRequired[str]
    blobs_url: NotRequired[str]
    branches_url: NotRequired[str]
    collaborators_url: NotRequired[str]
    comments_url: NotRequired[str]
    commits_url: NotRequired[str]
    compare_url: NotRequired[str]
    contents_url: NotRequired[str]
    contributors_url: NotRequired[str]
    deployments_url: NotRequired[str]
    description: NotRequired[Union[str, None]]
    downloads_url: NotRequired[str]
    events_url: NotRequired[str]
    fork: NotRequired[bool]
    forks_url: NotRequired[str]
    full_name: NotRequired[str]
    git_commits_url: NotRequired[str]
    git_refs_url: NotRequired[str]
    git_tags_url: NotRequired[str]
    hooks_url: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    issue_comment_url: NotRequired[str]
    issue_events_url: NotRequired[str]
    issues_url: NotRequired[str]
    keys_url: NotRequired[str]
    labels_url: NotRequired[str]
    languages_url: NotRequired[str]
    merges_url: NotRequired[str]
    milestones_url: NotRequired[str]
    name: NotRequired[str]
    node_id: NotRequired[str]
    notifications_url: NotRequired[str]
    owner: NotRequired[
        WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropRepositoryPropOwnerType
    ]
    private: NotRequired[bool]
    pulls_url: NotRequired[str]
    releases_url: NotRequired[str]
    stargazers_url: NotRequired[str]
    statuses_url: NotRequired[str]
    subscribers_url: NotRequired[str]
    subscription_url: NotRequired[str]
    tags_url: NotRequired[str]
    teams_url: NotRequired[str]
    trees_url: NotRequired[str]
    url: NotRequired[str]


class WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropRepositoryPropOwnerType(
    TypedDict
):
    """WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropRepositoryPropOwner"""

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropTriggeringActorType(
    TypedDict
):
    """WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropTriggeringActor"""

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookWorkflowRunCompletedPropWorkflowRunMergedActorType(TypedDict):
    """WebhookWorkflowRunCompletedPropWorkflowRunMergedActor"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadCommitPropAuthorType(
    TypedDict
):
    """WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadCommitPropAuthor"""

    date: NotRequired[datetime]
    email: str
    name: str
    username: NotRequired[str]


class WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadCommitPropCommitterType(
    TypedDict
):
    """WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadCommitPropCommitter"""

    date: NotRequired[datetime]
    email: str
    name: str
    username: NotRequired[str]


class WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadCommitType(TypedDict):
    """WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadCommit"""

    author: WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadCommitPropAuthorType
    committer: WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadCommitPropCommitterType
    id: str
    message: str
    timestamp: str
    tree_id: str


class WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadRepositoryPropOwnerType(
    TypedDict
):
    """WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadRepositoryPropOwner"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadRepositoryType(TypedDict):
    """WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadRepository"""

    archive_url: str
    assignees_url: str
    blobs_url: str
    branches_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    deployments_url: str
    description: Union[Union[str, None], None]
    downloads_url: str
    events_url: str
    fork: bool
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    hooks_url: str
    html_url: str
    id: int
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    languages_url: str
    merges_url: str
    milestones_url: str
    name: str
    node_id: str
    notifications_url: str
    owner: WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadRepositoryPropOwnerType
    private: bool
    pulls_url: str
    releases_url: str
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    tags_url: str
    teams_url: str
    trees_url: str
    url: str


class WebhookWorkflowRunCompletedPropWorkflowRunMergedPullRequestsType(TypedDict):
    """WebhookWorkflowRunCompletedPropWorkflowRunMergedPullRequests"""

    base: WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItemsPropBaseType
    head: WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItemsPropHeadType
    id: float
    number: float
    url: str


class WebhookWorkflowRunCompletedPropWorkflowRunMergedRepositoryPropOwnerType(
    TypedDict
):
    """WebhookWorkflowRunCompletedPropWorkflowRunMergedRepositoryPropOwner"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookWorkflowRunCompletedPropWorkflowRunMergedRepositoryType(TypedDict):
    """WebhookWorkflowRunCompletedPropWorkflowRunMergedRepository"""

    archive_url: str
    assignees_url: str
    blobs_url: str
    branches_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    deployments_url: str
    description: Union[Union[str, None], None]
    downloads_url: str
    events_url: str
    fork: bool
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    hooks_url: str
    html_url: str
    id: int
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    languages_url: str
    merges_url: str
    milestones_url: str
    name: str
    node_id: str
    notifications_url: str
    owner: WebhookWorkflowRunCompletedPropWorkflowRunMergedRepositoryPropOwnerType
    private: bool
    pulls_url: str
    releases_url: str
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    tags_url: str
    teams_url: str
    trees_url: str
    url: str


class WebhookWorkflowRunCompletedPropWorkflowRunMergedTriggeringActorType(TypedDict):
    """WebhookWorkflowRunCompletedPropWorkflowRunMergedTriggeringActor"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookWorkflowRunInProgressType(TypedDict):
    """workflow_run in_progress event"""

    action: Literal["in_progress"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType
    workflow: Union[WebhookWorkflowRunInProgressPropWorkflowType, None]
    workflow_run: WebhookWorkflowRunInProgressPropWorkflowRunType


class WebhookWorkflowRunInProgressPropWorkflowType(TypedDict):
    """Workflow"""

    badge_url: str
    created_at: datetime
    html_url: str
    id: int
    name: str
    node_id: str
    path: str
    state: str
    updated_at: datetime
    url: str


class WebhookWorkflowRunInProgressPropWorkflowRunType(TypedDict):
    """WebhookWorkflowRunInProgressPropWorkflowRun"""

    actor: WebhookWorkflowRunInProgressPropWorkflowRunMergedActorType
    artifacts_url: str
    cancel_url: str
    check_suite_id: int
    check_suite_node_id: str
    check_suite_url: str
    conclusion: Union[
        Literal[
            "success",
            "failure",
            "neutral",
            "cancelled",
            "timed_out",
            "action_required",
            "stale",
            "skipped",
        ],
        None,
    ]
    created_at: datetime
    event: str
    head_branch: Union[Union[str, None], None]
    head_commit: WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadCommitType
    head_repository: WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadRepositoryType
    head_sha: str
    html_url: str
    id: int
    jobs_url: str
    logs_url: str
    name: Union[Union[str, None], None]
    node_id: str
    path: str
    previous_attempt_url: Union[Union[str, None], None]
    pull_requests: List[
        WebhookWorkflowRunInProgressPropWorkflowRunMergedPullRequestsType
    ]
    referenced_workflows: NotRequired[
        Union[
            Union[
                List[
                    WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropReferencedWorkflowsItemsType
                ],
                None,
            ],
            None,
        ]
    ]
    repository: WebhookWorkflowRunInProgressPropWorkflowRunMergedRepositoryType
    rerun_url: str
    run_attempt: int
    run_number: int
    run_started_at: datetime
    status: Literal["requested", "in_progress", "completed", "queued", "pending"]
    triggering_actor: WebhookWorkflowRunInProgressPropWorkflowRunMergedTriggeringActorType
    updated_at: datetime
    url: str
    workflow_id: int
    workflow_url: str


class WebhookWorkflowRunInProgressPropWorkflowRunAllof0Type(TypedDict):
    """Workflow Run"""

    actor: Union[WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropActorType, None]
    artifacts_url: str
    cancel_url: str
    check_suite_id: int
    check_suite_node_id: str
    check_suite_url: str
    conclusion: Union[
        None,
        Literal[
            "success",
            "failure",
            "neutral",
            "cancelled",
            "timed_out",
            "action_required",
            "stale",
            "skipped",
        ],
    ]
    created_at: datetime
    event: str
    head_branch: Union[str, None]
    head_commit: WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropHeadCommitType
    head_repository: WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropHeadRepositoryType
    head_sha: str
    html_url: str
    id: int
    jobs_url: str
    logs_url: str
    name: Union[str, None]
    node_id: str
    path: str
    previous_attempt_url: Union[str, None]
    pull_requests: List[
        WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItemsType
    ]
    referenced_workflows: NotRequired[
        Union[
            List[
                WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropReferencedWorkflowsItemsType
            ],
            None,
        ]
    ]
    repository: WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropRepositoryType
    rerun_url: str
    run_attempt: int
    run_number: int
    run_started_at: datetime
    status: Literal["requested", "in_progress", "completed", "queued", "pending"]
    triggering_actor: Union[
        WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropTriggeringActorType, None
    ]
    updated_at: datetime
    url: str
    workflow_id: int
    workflow_url: str


class WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropActorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropHeadCommitType(TypedDict):
    """SimpleCommit"""

    author: WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropHeadCommitPropAuthorType
    committer: WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropHeadCommitPropCommitterType
    id: str
    message: str
    timestamp: str
    tree_id: str


class WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropHeadCommitPropAuthorType(
    TypedDict
):
    """Committer

    Metaproperties for Git author/committer information.
    """

    date: NotRequired[datetime]
    email: Union[str, None]
    name: str
    username: NotRequired[str]


class WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropHeadCommitPropCommitterType(
    TypedDict
):
    """Committer

    Metaproperties for Git author/committer information.
    """

    date: NotRequired[datetime]
    email: Union[str, None]
    name: str
    username: NotRequired[str]


class WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropHeadRepositoryType(
    TypedDict
):
    """Repository Lite"""

    archive_url: str
    assignees_url: str
    blobs_url: str
    branches_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    deployments_url: str
    description: Union[str, None]
    downloads_url: str
    events_url: str
    fork: bool
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    hooks_url: str
    html_url: str
    id: int
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    languages_url: str
    merges_url: str
    milestones_url: str
    name: str
    node_id: str
    notifications_url: str
    owner: Union[
        WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropHeadRepositoryPropOwnerType,
        None,
    ]
    private: bool
    pulls_url: str
    releases_url: str
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    tags_url: str
    teams_url: str
    trees_url: str
    url: str


class WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropHeadRepositoryPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItemsType(
    TypedDict
):
    """WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItems"""

    base: WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItemsPropBaseType
    head: WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItemsPropHeadType
    id: float
    number: float
    url: str


class WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItemsPropBaseType(
    TypedDict
):
    """WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItemsPropBase"""

    ref: str
    repo: WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItemsPropBasePropRepoType
    sha: str


class WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItemsPropBasePropRepoType(
    TypedDict
):
    """Repo Ref"""

    id: int
    name: str
    url: str


class WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItemsPropHeadType(
    TypedDict
):
    """WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItemsPropHead"""

    ref: str
    repo: WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItemsPropHeadPropRepoType
    sha: str


class WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItemsPropHeadPropRepoType(
    TypedDict
):
    """Repo Ref"""

    id: int
    name: str
    url: str


class WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropReferencedWorkflowsItemsType(
    TypedDict
):
    """WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropReferencedWorkflowsItems"""

    path: str
    ref: NotRequired[str]
    sha: str


class WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropRepositoryType(TypedDict):
    """Repository Lite"""

    archive_url: str
    assignees_url: str
    blobs_url: str
    branches_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    deployments_url: str
    description: Union[str, None]
    downloads_url: str
    events_url: str
    fork: bool
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    hooks_url: str
    html_url: str
    id: int
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    languages_url: str
    merges_url: str
    milestones_url: str
    name: str
    node_id: str
    notifications_url: str
    owner: Union[
        WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropRepositoryPropOwnerType,
        None,
    ]
    private: bool
    pulls_url: str
    releases_url: str
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    tags_url: str
    teams_url: str
    trees_url: str
    url: str


class WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropRepositoryPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropTriggeringActorType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookWorkflowRunInProgressPropWorkflowRunAllof1Type(TypedDict):
    """WebhookWorkflowRunInProgressPropWorkflowRunAllof1"""

    actor: NotRequired[WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropActorType]
    artifacts_url: NotRequired[str]
    cancel_url: NotRequired[str]
    check_suite_id: NotRequired[int]
    check_suite_node_id: NotRequired[str]
    check_suite_url: NotRequired[str]
    conclusion: Union[
        None,
        Literal[
            "success",
            "failure",
            "neutral",
            "cancelled",
            "timed_out",
            "action_required",
            "skipped",
            "stale",
        ],
    ]
    created_at: NotRequired[str]
    event: NotRequired[str]
    head_branch: NotRequired[Union[str, None]]
    head_commit: NotRequired[
        WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadCommitType
    ]
    head_repository: NotRequired[
        WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadRepositoryType
    ]
    head_sha: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    jobs_url: NotRequired[str]
    logs_url: NotRequired[str]
    name: NotRequired[Union[str, None]]
    node_id: NotRequired[str]
    path: NotRequired[str]
    previous_attempt_url: NotRequired[Union[str, None]]
    pull_requests: NotRequired[
        List[
            Union[
                WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropPullRequestsItemsType,
                None,
            ]
        ]
    ]
    referenced_workflows: NotRequired[
        Union[
            List[
                WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropReferencedWorkflowsItemsType
            ],
            None,
        ]
    ]
    repository: NotRequired[
        WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropRepositoryType
    ]
    rerun_url: NotRequired[str]
    run_attempt: NotRequired[int]
    run_number: NotRequired[int]
    run_started_at: NotRequired[str]
    status: NotRequired[str]
    triggering_actor: NotRequired[
        WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropTriggeringActorType
    ]
    updated_at: NotRequired[str]
    url: NotRequired[str]
    workflow_id: NotRequired[int]
    workflow_url: NotRequired[str]


class WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropActorType(TypedDict):
    """WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropActor"""

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadCommitType(TypedDict):
    """WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadCommit"""

    author: NotRequired[
        WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadCommitPropAuthorType
    ]
    committer: NotRequired[
        WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadCommitPropCommitterType
    ]
    id: NotRequired[str]
    message: NotRequired[str]
    timestamp: NotRequired[str]
    tree_id: NotRequired[str]


class WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadCommitPropAuthorType(
    TypedDict
):
    """WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadCommitPropAuthor"""

    email: NotRequired[str]
    name: NotRequired[str]


class WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadCommitPropCommitterType(
    TypedDict
):
    """WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadCommitPropCommitter"""

    email: NotRequired[str]
    name: NotRequired[str]


class WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadRepositoryType(
    TypedDict
):
    """WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadRepository"""

    archive_url: NotRequired[str]
    assignees_url: NotRequired[str]
    blobs_url: NotRequired[str]
    branches_url: NotRequired[str]
    collaborators_url: NotRequired[str]
    comments_url: NotRequired[str]
    commits_url: NotRequired[str]
    compare_url: NotRequired[str]
    contents_url: NotRequired[str]
    contributors_url: NotRequired[str]
    deployments_url: NotRequired[str]
    description: NotRequired[Union[str, None]]
    downloads_url: NotRequired[str]
    events_url: NotRequired[str]
    fork: NotRequired[bool]
    forks_url: NotRequired[str]
    full_name: NotRequired[str]
    git_commits_url: NotRequired[str]
    git_refs_url: NotRequired[str]
    git_tags_url: NotRequired[str]
    hooks_url: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    issue_comment_url: NotRequired[str]
    issue_events_url: NotRequired[str]
    issues_url: NotRequired[str]
    keys_url: NotRequired[str]
    labels_url: NotRequired[str]
    languages_url: NotRequired[str]
    merges_url: NotRequired[str]
    milestones_url: NotRequired[str]
    name: NotRequired[Union[str, None]]
    node_id: NotRequired[str]
    notifications_url: NotRequired[str]
    owner: NotRequired[
        WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadRepositoryPropOwnerType
    ]
    private: NotRequired[bool]
    pulls_url: NotRequired[str]
    releases_url: NotRequired[str]
    stargazers_url: NotRequired[str]
    statuses_url: NotRequired[str]
    subscribers_url: NotRequired[str]
    subscription_url: NotRequired[str]
    tags_url: NotRequired[str]
    teams_url: NotRequired[str]
    trees_url: NotRequired[str]
    url: NotRequired[str]


class WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadRepositoryPropOwnerType(
    TypedDict
):
    """WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadRepositoryPropOwner"""

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropPullRequestsItemsType(
    TypedDict
):
    """WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropPullRequestsItems"""


class WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropReferencedWorkflowsItemsType(
    TypedDict
):
    """WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropReferencedWorkflowsItems"""

    path: str
    ref: NotRequired[str]
    sha: str


class WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropRepositoryType(TypedDict):
    """WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropRepository"""

    archive_url: NotRequired[str]
    assignees_url: NotRequired[str]
    blobs_url: NotRequired[str]
    branches_url: NotRequired[str]
    collaborators_url: NotRequired[str]
    comments_url: NotRequired[str]
    commits_url: NotRequired[str]
    compare_url: NotRequired[str]
    contents_url: NotRequired[str]
    contributors_url: NotRequired[str]
    deployments_url: NotRequired[str]
    description: NotRequired[Union[str, None]]
    downloads_url: NotRequired[str]
    events_url: NotRequired[str]
    fork: NotRequired[bool]
    forks_url: NotRequired[str]
    full_name: NotRequired[str]
    git_commits_url: NotRequired[str]
    git_refs_url: NotRequired[str]
    git_tags_url: NotRequired[str]
    hooks_url: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    issue_comment_url: NotRequired[str]
    issue_events_url: NotRequired[str]
    issues_url: NotRequired[str]
    keys_url: NotRequired[str]
    labels_url: NotRequired[str]
    languages_url: NotRequired[str]
    merges_url: NotRequired[str]
    milestones_url: NotRequired[str]
    name: NotRequired[str]
    node_id: NotRequired[str]
    notifications_url: NotRequired[str]
    owner: NotRequired[
        WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropRepositoryPropOwnerType
    ]
    private: NotRequired[bool]
    pulls_url: NotRequired[str]
    releases_url: NotRequired[str]
    stargazers_url: NotRequired[str]
    statuses_url: NotRequired[str]
    subscribers_url: NotRequired[str]
    subscription_url: NotRequired[str]
    tags_url: NotRequired[str]
    teams_url: NotRequired[str]
    trees_url: NotRequired[str]
    url: NotRequired[str]


class WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropRepositoryPropOwnerType(
    TypedDict
):
    """WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropRepositoryPropOwner"""

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropTriggeringActorType(
    TypedDict
):
    """WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropTriggeringActor"""

    avatar_url: NotRequired[str]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: NotRequired[int]
    login: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[str]
    url: NotRequired[str]


class WebhookWorkflowRunInProgressPropWorkflowRunMergedActorType(TypedDict):
    """WebhookWorkflowRunInProgressPropWorkflowRunMergedActor"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadCommitPropAuthorType(
    TypedDict
):
    """WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadCommitPropAuthor"""

    date: NotRequired[datetime]
    email: str
    name: str
    username: NotRequired[str]


class WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadCommitPropCommitterType(
    TypedDict
):
    """WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadCommitPropCommitter"""

    date: NotRequired[datetime]
    email: str
    name: str
    username: NotRequired[str]


class WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadCommitType(TypedDict):
    """WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadCommit"""

    author: WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadCommitPropAuthorType
    committer: WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadCommitPropCommitterType
    id: str
    message: str
    timestamp: str
    tree_id: str


class WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadRepositoryPropOwnerType(
    TypedDict
):
    """WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadRepositoryPropOwner"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadRepositoryType(TypedDict):
    """WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadRepository"""

    archive_url: str
    assignees_url: str
    blobs_url: str
    branches_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    deployments_url: str
    description: Union[Union[str, None], None]
    downloads_url: str
    events_url: str
    fork: bool
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    hooks_url: str
    html_url: str
    id: int
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    languages_url: str
    merges_url: str
    milestones_url: str
    name: str
    node_id: str
    notifications_url: str
    owner: WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadRepositoryPropOwnerType
    private: bool
    pulls_url: str
    releases_url: str
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    tags_url: str
    teams_url: str
    trees_url: str
    url: str


class WebhookWorkflowRunInProgressPropWorkflowRunMergedPullRequestsType(TypedDict):
    """WebhookWorkflowRunInProgressPropWorkflowRunMergedPullRequests"""

    base: WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItemsPropBaseType
    head: WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItemsPropHeadType
    id: float
    number: float
    url: str


class WebhookWorkflowRunInProgressPropWorkflowRunMergedRepositoryPropOwnerType(
    TypedDict
):
    """WebhookWorkflowRunInProgressPropWorkflowRunMergedRepositoryPropOwner"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookWorkflowRunInProgressPropWorkflowRunMergedRepositoryType(TypedDict):
    """WebhookWorkflowRunInProgressPropWorkflowRunMergedRepository"""

    archive_url: str
    assignees_url: str
    blobs_url: str
    branches_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    deployments_url: str
    description: Union[Union[str, None], None]
    downloads_url: str
    events_url: str
    fork: bool
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    hooks_url: str
    html_url: str
    id: int
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    languages_url: str
    merges_url: str
    milestones_url: str
    name: str
    node_id: str
    notifications_url: str
    owner: WebhookWorkflowRunInProgressPropWorkflowRunMergedRepositoryPropOwnerType
    private: bool
    pulls_url: str
    releases_url: str
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    tags_url: str
    teams_url: str
    trees_url: str
    url: str


class WebhookWorkflowRunInProgressPropWorkflowRunMergedTriggeringActorType(TypedDict):
    """WebhookWorkflowRunInProgressPropWorkflowRunMergedTriggeringActor"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookWorkflowRunRequestedType(TypedDict):
    """workflow_run requested event"""

    action: Literal["requested"]
    enterprise: NotRequired[EnterpriseWebhooksType]
    installation: NotRequired[SimpleInstallationType]
    organization: NotRequired[OrganizationSimpleWebhooksType]
    repository: RepositoryWebhooksType
    sender: SimpleUserWebhooksType
    workflow: Union[WebhookWorkflowRunRequestedPropWorkflowType, None]
    workflow_run: WebhookWorkflowRunRequestedPropWorkflowRunType


class WebhookWorkflowRunRequestedPropWorkflowType(TypedDict):
    """Workflow"""

    badge_url: str
    created_at: datetime
    html_url: str
    id: int
    name: str
    node_id: str
    path: str
    state: str
    updated_at: datetime
    url: str


class WebhookWorkflowRunRequestedPropWorkflowRunType(TypedDict):
    """Workflow Run"""

    actor: Union[WebhookWorkflowRunRequestedPropWorkflowRunPropActorType, None]
    artifacts_url: str
    cancel_url: str
    check_suite_id: int
    check_suite_node_id: str
    check_suite_url: str
    conclusion: Union[
        None,
        Literal[
            "success",
            "failure",
            "neutral",
            "cancelled",
            "timed_out",
            "action_required",
            "stale",
            "skipped",
            "startup_failure",
        ],
    ]
    created_at: datetime
    event: str
    head_branch: Union[str, None]
    head_commit: WebhookWorkflowRunRequestedPropWorkflowRunPropHeadCommitType
    head_repository: WebhookWorkflowRunRequestedPropWorkflowRunPropHeadRepositoryType
    head_sha: str
    html_url: str
    id: int
    jobs_url: str
    logs_url: str
    name: Union[str, None]
    node_id: str
    path: str
    previous_attempt_url: Union[str, None]
    pull_requests: List[
        WebhookWorkflowRunRequestedPropWorkflowRunPropPullRequestsItemsType
    ]
    referenced_workflows: NotRequired[
        Union[
            List[
                WebhookWorkflowRunRequestedPropWorkflowRunPropReferencedWorkflowsItemsType
            ],
            None,
        ]
    ]
    repository: WebhookWorkflowRunRequestedPropWorkflowRunPropRepositoryType
    rerun_url: str
    run_attempt: int
    run_number: int
    run_started_at: datetime
    status: Literal[
        "requested", "in_progress", "completed", "queued", "pending", "waiting"
    ]
    triggering_actor: Union[
        WebhookWorkflowRunRequestedPropWorkflowRunPropTriggeringActorType, None
    ]
    updated_at: datetime
    url: str
    workflow_id: int
    workflow_url: str
    display_title: str


class WebhookWorkflowRunRequestedPropWorkflowRunPropActorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookWorkflowRunRequestedPropWorkflowRunPropHeadCommitType(TypedDict):
    """SimpleCommit"""

    author: WebhookWorkflowRunRequestedPropWorkflowRunPropHeadCommitPropAuthorType
    committer: WebhookWorkflowRunRequestedPropWorkflowRunPropHeadCommitPropCommitterType
    id: str
    message: str
    timestamp: str
    tree_id: str


class WebhookWorkflowRunRequestedPropWorkflowRunPropHeadCommitPropAuthorType(TypedDict):
    """Committer

    Metaproperties for Git author/committer information.
    """

    date: NotRequired[datetime]
    email: Union[str, None]
    name: str
    username: NotRequired[str]


class WebhookWorkflowRunRequestedPropWorkflowRunPropHeadCommitPropCommitterType(
    TypedDict
):
    """Committer

    Metaproperties for Git author/committer information.
    """

    date: NotRequired[datetime]
    email: Union[str, None]
    name: str
    username: NotRequired[str]


class WebhookWorkflowRunRequestedPropWorkflowRunPropHeadRepositoryType(TypedDict):
    """Repository Lite"""

    archive_url: str
    assignees_url: str
    blobs_url: str
    branches_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    deployments_url: str
    description: Union[str, None]
    downloads_url: str
    events_url: str
    fork: bool
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    hooks_url: str
    html_url: str
    id: int
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    languages_url: str
    merges_url: str
    milestones_url: str
    name: str
    node_id: str
    notifications_url: str
    owner: Union[
        WebhookWorkflowRunRequestedPropWorkflowRunPropHeadRepositoryPropOwnerType, None
    ]
    private: bool
    pulls_url: str
    releases_url: str
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    tags_url: str
    teams_url: str
    trees_url: str
    url: str


class WebhookWorkflowRunRequestedPropWorkflowRunPropHeadRepositoryPropOwnerType(
    TypedDict
):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookWorkflowRunRequestedPropWorkflowRunPropPullRequestsItemsType(TypedDict):
    """WebhookWorkflowRunRequestedPropWorkflowRunPropPullRequestsItems"""

    base: WebhookWorkflowRunRequestedPropWorkflowRunPropPullRequestsItemsPropBaseType
    head: WebhookWorkflowRunRequestedPropWorkflowRunPropPullRequestsItemsPropHeadType
    id: float
    number: float
    url: str


class WebhookWorkflowRunRequestedPropWorkflowRunPropPullRequestsItemsPropBaseType(
    TypedDict
):
    """WebhookWorkflowRunRequestedPropWorkflowRunPropPullRequestsItemsPropBase"""

    ref: str
    repo: WebhookWorkflowRunRequestedPropWorkflowRunPropPullRequestsItemsPropBasePropRepoType
    sha: str


class WebhookWorkflowRunRequestedPropWorkflowRunPropPullRequestsItemsPropBasePropRepoType(
    TypedDict
):
    """Repo Ref"""

    id: int
    name: str
    url: str


class WebhookWorkflowRunRequestedPropWorkflowRunPropPullRequestsItemsPropHeadType(
    TypedDict
):
    """WebhookWorkflowRunRequestedPropWorkflowRunPropPullRequestsItemsPropHead"""

    ref: str
    repo: WebhookWorkflowRunRequestedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepoType
    sha: str


class WebhookWorkflowRunRequestedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepoType(
    TypedDict
):
    """Repo Ref"""

    id: int
    name: str
    url: str


class WebhookWorkflowRunRequestedPropWorkflowRunPropReferencedWorkflowsItemsType(
    TypedDict
):
    """WebhookWorkflowRunRequestedPropWorkflowRunPropReferencedWorkflowsItems"""

    path: str
    ref: NotRequired[str]
    sha: str


class WebhookWorkflowRunRequestedPropWorkflowRunPropRepositoryType(TypedDict):
    """Repository Lite"""

    archive_url: str
    assignees_url: str
    blobs_url: str
    branches_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: str
    deployments_url: str
    description: Union[str, None]
    downloads_url: str
    events_url: str
    fork: bool
    forks_url: str
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    hooks_url: str
    html_url: str
    id: int
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    languages_url: str
    merges_url: str
    milestones_url: str
    name: str
    node_id: str
    notifications_url: str
    owner: Union[
        WebhookWorkflowRunRequestedPropWorkflowRunPropRepositoryPropOwnerType, None
    ]
    private: bool
    pulls_url: str
    releases_url: str
    stargazers_url: str
    statuses_url: str
    subscribers_url: str
    subscription_url: str
    tags_url: str
    teams_url: str
    trees_url: str
    url: str


class WebhookWorkflowRunRequestedPropWorkflowRunPropRepositoryPropOwnerType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class WebhookWorkflowRunRequestedPropWorkflowRunPropTriggeringActorType(TypedDict):
    """User"""

    avatar_url: NotRequired[str]
    deleted: NotRequired[bool]
    email: NotRequired[Union[str, None]]
    events_url: NotRequired[str]
    followers_url: NotRequired[str]
    following_url: NotRequired[str]
    gists_url: NotRequired[str]
    gravatar_id: NotRequired[str]
    html_url: NotRequired[str]
    id: int
    login: str
    name: NotRequired[str]
    node_id: NotRequired[str]
    organizations_url: NotRequired[str]
    received_events_url: NotRequired[str]
    repos_url: NotRequired[str]
    site_admin: NotRequired[bool]
    starred_url: NotRequired[str]
    subscriptions_url: NotRequired[str]
    type: NotRequired[Literal["Bot", "User", "Organization"]]
    url: NotRequired[str]


class AppManifestsCodeConversionsPostResponse201Type(TypedDict):
    """AppManifestsCodeConversionsPostResponse201"""

    id: int
    slug: NotRequired[str]
    node_id: str
    owner: Union[None, SimpleUserType]
    name: str
    description: Union[str, None]
    external_url: str
    html_url: str
    created_at: datetime
    updated_at: datetime
    permissions: IntegrationPropPermissionsType
    events: List[str]
    installations_count: NotRequired[int]
    client_id: str
    client_secret: str
    webhook_secret: Union[Union[str, None], None]
    pem: str


class AppManifestsCodeConversionsPostResponse201Allof1Type(TypedDict):
    """AppManifestsCodeConversionsPostResponse201Allof1"""

    client_id: str
    client_secret: str
    webhook_secret: Union[str, None]
    pem: str


class AppHookConfigPatchBodyType(TypedDict):
    """AppHookConfigPatchBody"""

    url: NotRequired[str]
    content_type: NotRequired[str]
    secret: NotRequired[str]
    insecure_ssl: NotRequired[Union[str, float]]


class AppHookDeliveriesDeliveryIdAttemptsPostResponse202Type(TypedDict):
    """AppHookDeliveriesDeliveryIdAttemptsPostResponse202"""


class AppInstallationsInstallationIdAccessTokensPostBodyType(TypedDict):
    """AppInstallationsInstallationIdAccessTokensPostBody"""

    repositories: NotRequired[List[str]]
    repository_ids: NotRequired[List[int]]
    permissions: NotRequired[AppPermissionsType]


class ApplicationsClientIdGrantDeleteBodyType(TypedDict):
    """ApplicationsClientIdGrantDeleteBody"""

    access_token: str


class ApplicationsClientIdTokenPostBodyType(TypedDict):
    """ApplicationsClientIdTokenPostBody"""

    access_token: str


class ApplicationsClientIdTokenDeleteBodyType(TypedDict):
    """ApplicationsClientIdTokenDeleteBody"""

    access_token: str


class ApplicationsClientIdTokenPatchBodyType(TypedDict):
    """ApplicationsClientIdTokenPatchBody"""

    access_token: str


class ApplicationsClientIdTokenScopedPostBodyType(TypedDict):
    """ApplicationsClientIdTokenScopedPostBody"""

    access_token: str
    target: NotRequired[str]
    target_id: NotRequired[int]
    repositories: NotRequired[List[str]]
    repository_ids: NotRequired[List[int]]
    permissions: NotRequired[AppPermissionsType]


class EmojisGetResponse200Type(TypedDict):
    """EmojisGetResponse200"""


class EnterprisesEnterpriseSecretScanningAlertsGetResponse503Type(TypedDict):
    """EnterprisesEnterpriseSecretScanningAlertsGetResponse503"""

    code: NotRequired[str]
    message: NotRequired[str]
    documentation_url: NotRequired[str]


class GistsPostBodyType(TypedDict):
    """GistsPostBody"""

    description: NotRequired[str]
    files: GistsPostBodyPropFilesType
    public: NotRequired[Union[bool, Literal["true", "false"]]]


class GistsPostBodyPropFilesType(TypedDict):
    """GistsPostBodyPropFiles

    Names and content for the files that make up the gist

    Examples:
        {'hello.rb': {'content': 'puts "Hello, World!"'}}
    """


class GistsGistIdGetResponse403Type(TypedDict):
    """GistsGistIdGetResponse403"""

    block: NotRequired[GistsGistIdGetResponse403PropBlockType]
    message: NotRequired[str]
    documentation_url: NotRequired[str]


class GistsGistIdGetResponse403PropBlockType(TypedDict):
    """GistsGistIdGetResponse403PropBlock"""

    reason: NotRequired[str]
    created_at: NotRequired[str]
    html_url: NotRequired[Union[str, None]]


class GistsGistIdPatchBodyPropFilesType(TypedDict):
    """GistsGistIdPatchBodyPropFiles

    The gist files to be updated, renamed, or deleted. Each `key` must match the
    current filename
    (including extension) of the targeted gist file. For example: `hello.py`.

    To delete a file, set the whole file to null. For example: `hello.py : null`.
    The file will also be
    deleted if the specified object does not contain at least one of `content` or
    `filename`.

    Examples:
        {'hello.rb': {'content': 'blah', 'filename': 'goodbye.rb'}}
    """


class GistsGistIdPatchBodyType(TypedDict):
    """GistsGistIdPatchBody"""

    description: NotRequired[str]
    files: NotRequired[GistsGistIdPatchBodyPropFilesType]


class GistsGistIdCommentsPostBodyType(TypedDict):
    """GistsGistIdCommentsPostBody"""

    body: str


class GistsGistIdCommentsCommentIdPatchBodyType(TypedDict):
    """GistsGistIdCommentsCommentIdPatchBody"""

    body: str


class GistsGistIdStarGetResponse404Type(TypedDict):
    """GistsGistIdStarGetResponse404"""


class InstallationRepositoriesGetResponse200Type(TypedDict):
    """InstallationRepositoriesGetResponse200"""

    total_count: int
    repositories: List[RepositoryType]
    repository_selection: NotRequired[str]


class MarkdownPostBodyType(TypedDict):
    """MarkdownPostBody"""

    text: str
    mode: NotRequired[Literal["markdown", "gfm"]]
    context: NotRequired[str]


class NotificationsPutBodyType(TypedDict):
    """NotificationsPutBody"""

    last_read_at: NotRequired[datetime]
    read: NotRequired[bool]


class NotificationsPutResponse202Type(TypedDict):
    """NotificationsPutResponse202"""

    message: NotRequired[str]


class NotificationsThreadsThreadIdSubscriptionPutBodyType(TypedDict):
    """NotificationsThreadsThreadIdSubscriptionPutBody"""

    ignored: NotRequired[bool]


class OrgsOrgPatchBodyType(TypedDict):
    """OrgsOrgPatchBody"""

    billing_email: NotRequired[str]
    company: NotRequired[str]
    email: NotRequired[str]
    twitter_username: NotRequired[str]
    location: NotRequired[str]
    name: NotRequired[str]
    description: NotRequired[str]
    has_organization_projects: NotRequired[bool]
    has_repository_projects: NotRequired[bool]
    default_repository_permission: NotRequired[
        Literal["read", "write", "admin", "none"]
    ]
    members_can_create_repositories: NotRequired[bool]
    members_can_create_internal_repositories: NotRequired[bool]
    members_can_create_private_repositories: NotRequired[bool]
    members_can_create_public_repositories: NotRequired[bool]
    members_allowed_repository_creation_type: NotRequired[
        Literal["all", "private", "none"]
    ]
    members_can_create_pages: NotRequired[bool]
    members_can_create_public_pages: NotRequired[bool]
    members_can_create_private_pages: NotRequired[bool]
    members_can_fork_private_repositories: NotRequired[bool]
    web_commit_signoff_required: NotRequired[bool]
    blog: NotRequired[str]
    advanced_security_enabled_for_new_repositories: NotRequired[bool]
    dependabot_alerts_enabled_for_new_repositories: NotRequired[bool]
    dependabot_security_updates_enabled_for_new_repositories: NotRequired[bool]
    dependency_graph_enabled_for_new_repositories: NotRequired[bool]
    secret_scanning_enabled_for_new_repositories: NotRequired[bool]
    secret_scanning_push_protection_enabled_for_new_repositories: NotRequired[bool]
    secret_scanning_push_protection_custom_link_enabled: NotRequired[bool]
    secret_scanning_push_protection_custom_link: NotRequired[str]


class OrgsOrgActionsCacheUsageByRepositoryGetResponse200Type(TypedDict):
    """OrgsOrgActionsCacheUsageByRepositoryGetResponse200"""

    total_count: int
    repository_cache_usages: List[ActionsCacheUsageByRepositoryType]


class OrgsOrgActionsPermissionsPutBodyType(TypedDict):
    """OrgsOrgActionsPermissionsPutBody"""

    enabled_repositories: Literal["all", "none", "selected"]
    allowed_actions: NotRequired[Literal["all", "local_only", "selected"]]


class OrgsOrgActionsPermissionsRepositoriesGetResponse200Type(TypedDict):
    """OrgsOrgActionsPermissionsRepositoriesGetResponse200"""

    total_count: float
    repositories: List[RepositoryType]


class OrgsOrgActionsPermissionsRepositoriesPutBodyType(TypedDict):
    """OrgsOrgActionsPermissionsRepositoriesPutBody"""

    selected_repository_ids: List[int]


class OrgsOrgActionsRunnersGetResponse200Type(TypedDict):
    """OrgsOrgActionsRunnersGetResponse200"""

    total_count: int
    runners: List[RunnerType]


class OrgsOrgActionsRunnersGenerateJitconfigPostBodyType(TypedDict):
    """OrgsOrgActionsRunnersGenerateJitconfigPostBody"""

    name: str
    runner_group_id: int
    labels: List[str]
    work_folder: NotRequired[str]


class OrgsOrgActionsRunnersGenerateJitconfigPostResponse201Type(TypedDict):
    """OrgsOrgActionsRunnersGenerateJitconfigPostResponse201"""

    runner: RunnerType
    encoded_jit_config: str


class OrgsOrgActionsRunnersRunnerIdLabelsGetResponse200Type(TypedDict):
    """OrgsOrgActionsRunnersRunnerIdLabelsGetResponse200"""

    total_count: int
    labels: List[RunnerLabelType]


class OrgsOrgActionsRunnersRunnerIdLabelsPutBodyType(TypedDict):
    """OrgsOrgActionsRunnersRunnerIdLabelsPutBody"""

    labels: List[str]


class OrgsOrgActionsRunnersRunnerIdLabelsPostBodyType(TypedDict):
    """OrgsOrgActionsRunnersRunnerIdLabelsPostBody"""

    labels: List[str]


class OrgsOrgActionsRunnersRunnerIdLabelsDeleteResponse200Type(TypedDict):
    """OrgsOrgActionsRunnersRunnerIdLabelsDeleteResponse200"""

    total_count: int
    labels: List[RunnerLabelType]


class OrgsOrgActionsSecretsGetResponse200Type(TypedDict):
    """OrgsOrgActionsSecretsGetResponse200"""

    total_count: int
    secrets: List[OrganizationActionsSecretType]


class OrgsOrgActionsSecretsSecretNamePutBodyType(TypedDict):
    """OrgsOrgActionsSecretsSecretNamePutBody"""

    encrypted_value: NotRequired[str]
    key_id: NotRequired[str]
    visibility: Literal["all", "private", "selected"]
    selected_repository_ids: NotRequired[List[int]]


class OrgsOrgActionsSecretsSecretNameRepositoriesGetResponse200Type(TypedDict):
    """OrgsOrgActionsSecretsSecretNameRepositoriesGetResponse200"""

    total_count: int
    repositories: List[MinimalRepositoryType]


class OrgsOrgActionsSecretsSecretNameRepositoriesPutBodyType(TypedDict):
    """OrgsOrgActionsSecretsSecretNameRepositoriesPutBody"""

    selected_repository_ids: List[int]


class OrgsOrgActionsVariablesGetResponse200Type(TypedDict):
    """OrgsOrgActionsVariablesGetResponse200"""

    total_count: int
    variables: List[OrganizationActionsVariableType]


class OrgsOrgActionsVariablesPostBodyType(TypedDict):
    """OrgsOrgActionsVariablesPostBody"""

    name: str
    value: str
    visibility: Literal["all", "private", "selected"]
    selected_repository_ids: NotRequired[List[int]]


class OrgsOrgActionsVariablesNamePatchBodyType(TypedDict):
    """OrgsOrgActionsVariablesNamePatchBody"""

    name: NotRequired[str]
    value: NotRequired[str]
    visibility: NotRequired[Literal["all", "private", "selected"]]
    selected_repository_ids: NotRequired[List[int]]


class OrgsOrgActionsVariablesNameRepositoriesGetResponse200Type(TypedDict):
    """OrgsOrgActionsVariablesNameRepositoriesGetResponse200"""

    total_count: int
    repositories: List[MinimalRepositoryType]


class OrgsOrgActionsVariablesNameRepositoriesPutBodyType(TypedDict):
    """OrgsOrgActionsVariablesNameRepositoriesPutBody"""

    selected_repository_ids: List[int]


class OrgsOrgCodespacesGetResponse200Type(TypedDict):
    """OrgsOrgCodespacesGetResponse200"""

    total_count: int
    codespaces: List[CodespaceType]


class OrgsOrgCodespacesAccessPutBodyType(TypedDict):
    """OrgsOrgCodespacesAccessPutBody"""

    visibility: Literal[
        "disabled",
        "selected_members",
        "all_members",
        "all_members_and_outside_collaborators",
    ]
    selected_usernames: NotRequired[List[str]]


class OrgsOrgCodespacesAccessSelectedUsersPostBodyType(TypedDict):
    """OrgsOrgCodespacesAccessSelectedUsersPostBody"""

    selected_usernames: List[str]


class OrgsOrgCodespacesAccessSelectedUsersDeleteBodyType(TypedDict):
    """OrgsOrgCodespacesAccessSelectedUsersDeleteBody"""

    selected_usernames: List[str]


class OrgsOrgCodespacesSecretsGetResponse200Type(TypedDict):
    """OrgsOrgCodespacesSecretsGetResponse200"""

    total_count: int
    secrets: List[CodespacesOrgSecretType]


class OrgsOrgCodespacesSecretsSecretNamePutBodyType(TypedDict):
    """OrgsOrgCodespacesSecretsSecretNamePutBody"""

    encrypted_value: NotRequired[str]
    key_id: NotRequired[str]
    visibility: Literal["all", "private", "selected"]
    selected_repository_ids: NotRequired[List[int]]


class OrgsOrgCodespacesSecretsSecretNameRepositoriesGetResponse200Type(TypedDict):
    """OrgsOrgCodespacesSecretsSecretNameRepositoriesGetResponse200"""

    total_count: int
    repositories: List[MinimalRepositoryType]


class OrgsOrgCodespacesSecretsSecretNameRepositoriesPutBodyType(TypedDict):
    """OrgsOrgCodespacesSecretsSecretNameRepositoriesPutBody"""

    selected_repository_ids: List[int]


class OrgsOrgCopilotBillingSeatsGetResponse200Type(TypedDict):
    """OrgsOrgCopilotBillingSeatsGetResponse200"""

    total_seats: NotRequired[int]
    seats: NotRequired[List[CopilotSeatDetailsType]]


class OrgsOrgCopilotBillingSelectedTeamsPostBodyType(TypedDict):
    """OrgsOrgCopilotBillingSelectedTeamsPostBody"""

    selected_teams: List[str]


class OrgsOrgCopilotBillingSelectedTeamsPostResponse201Type(TypedDict):
    """OrgsOrgCopilotBillingSelectedTeamsPostResponse201

    The total number of seat assignments created.
    """

    seats_created: int


class OrgsOrgCopilotBillingSelectedTeamsDeleteBodyType(TypedDict):
    """OrgsOrgCopilotBillingSelectedTeamsDeleteBody"""

    selected_teams: List[str]


class OrgsOrgCopilotBillingSelectedTeamsDeleteResponse200Type(TypedDict):
    """OrgsOrgCopilotBillingSelectedTeamsDeleteResponse200

    The total number of seat assignments cancelled.
    """

    seats_cancelled: int


class OrgsOrgCopilotBillingSelectedUsersPostBodyType(TypedDict):
    """OrgsOrgCopilotBillingSelectedUsersPostBody"""

    selected_usernames: List[str]


class OrgsOrgCopilotBillingSelectedUsersPostResponse201Type(TypedDict):
    """OrgsOrgCopilotBillingSelectedUsersPostResponse201

    The total number of seat assignments created.
    """

    seats_created: int


class OrgsOrgCopilotBillingSelectedUsersDeleteBodyType(TypedDict):
    """OrgsOrgCopilotBillingSelectedUsersDeleteBody"""

    selected_usernames: List[str]


class OrgsOrgCopilotBillingSelectedUsersDeleteResponse200Type(TypedDict):
    """OrgsOrgCopilotBillingSelectedUsersDeleteResponse200

    The total number of seat assignments cancelled.
    """

    seats_cancelled: int


class OrgsOrgDependabotSecretsGetResponse200Type(TypedDict):
    """OrgsOrgDependabotSecretsGetResponse200"""

    total_count: int
    secrets: List[OrganizationDependabotSecretType]


class OrgsOrgDependabotSecretsSecretNamePutBodyType(TypedDict):
    """OrgsOrgDependabotSecretsSecretNamePutBody"""

    encrypted_value: NotRequired[str]
    key_id: NotRequired[str]
    visibility: Literal["all", "private", "selected"]
    selected_repository_ids: NotRequired[List[str]]


class OrgsOrgDependabotSecretsSecretNameRepositoriesGetResponse200Type(TypedDict):
    """OrgsOrgDependabotSecretsSecretNameRepositoriesGetResponse200"""

    total_count: int
    repositories: List[MinimalRepositoryType]


class OrgsOrgDependabotSecretsSecretNameRepositoriesPutBodyType(TypedDict):
    """OrgsOrgDependabotSecretsSecretNameRepositoriesPutBody"""

    selected_repository_ids: List[int]


class OrgsOrgHooksPostBodyType(TypedDict):
    """OrgsOrgHooksPostBody"""

    name: str
    config: OrgsOrgHooksPostBodyPropConfigType
    events: NotRequired[List[str]]
    active: NotRequired[bool]


class OrgsOrgHooksPostBodyPropConfigType(TypedDict):
    """OrgsOrgHooksPostBodyPropConfig

    Key/value pairs to provide settings for this webhook.
    """

    url: str
    content_type: NotRequired[str]
    secret: NotRequired[str]
    insecure_ssl: NotRequired[Union[str, float]]
    username: NotRequired[str]
    password: NotRequired[str]


class OrgsOrgHooksHookIdPatchBodyType(TypedDict):
    """OrgsOrgHooksHookIdPatchBody"""

    config: NotRequired[OrgsOrgHooksHookIdPatchBodyPropConfigType]
    events: NotRequired[List[str]]
    active: NotRequired[bool]
    name: NotRequired[str]


class OrgsOrgHooksHookIdPatchBodyPropConfigType(TypedDict):
    """OrgsOrgHooksHookIdPatchBodyPropConfig

    Key/value pairs to provide settings for this webhook.
    """

    url: str
    content_type: NotRequired[str]
    secret: NotRequired[str]
    insecure_ssl: NotRequired[Union[str, float]]


class OrgsOrgHooksHookIdConfigPatchBodyType(TypedDict):
    """OrgsOrgHooksHookIdConfigPatchBody"""

    url: NotRequired[str]
    content_type: NotRequired[str]
    secret: NotRequired[str]
    insecure_ssl: NotRequired[Union[str, float]]


class OrgsOrgInstallationsGetResponse200Type(TypedDict):
    """OrgsOrgInstallationsGetResponse200"""

    total_count: int
    installations: List[InstallationType]


class OrgsOrgInteractionLimitsGetResponse200Anyof1Type(TypedDict):
    """OrgsOrgInteractionLimitsGetResponse200Anyof1"""


class OrgsOrgInvitationsPostBodyType(TypedDict):
    """OrgsOrgInvitationsPostBody"""

    invitee_id: NotRequired[int]
    email: NotRequired[str]
    role: NotRequired[Literal["admin", "direct_member", "billing_manager", "reinstate"]]
    team_ids: NotRequired[List[int]]


class OrgsOrgMembersUsernameCodespacesGetResponse200Type(TypedDict):
    """OrgsOrgMembersUsernameCodespacesGetResponse200"""

    total_count: int
    codespaces: List[CodespaceType]


class OrgsOrgMembershipsUsernamePutBodyType(TypedDict):
    """OrgsOrgMembershipsUsernamePutBody"""

    role: NotRequired[Literal["admin", "member"]]


class OrgsOrgMigrationsPostBodyType(TypedDict):
    """OrgsOrgMigrationsPostBody"""

    repositories: List[str]
    lock_repositories: NotRequired[bool]
    exclude_metadata: NotRequired[bool]
    exclude_git_data: NotRequired[bool]
    exclude_attachments: NotRequired[bool]
    exclude_releases: NotRequired[bool]
    exclude_owner_projects: NotRequired[bool]
    org_metadata_only: NotRequired[bool]
    exclude: NotRequired[List[Literal["repositories"]]]


class OrgsOrgOrganizationRolesGetResponse200Type(TypedDict):
    """OrgsOrgOrganizationRolesGetResponse200"""

    total_count: NotRequired[int]
    roles: NotRequired[List[OrganizationRoleType]]


class OrgsOrgOrganizationRolesPostBodyType(TypedDict):
    """OrgsOrgOrganizationRolesPostBody"""

    name: str
    description: NotRequired[str]
    permissions: List[str]


class OrgsOrgOrganizationRolesRoleIdPatchBodyType(TypedDict):
    """OrgsOrgOrganizationRolesRoleIdPatchBody"""

    name: NotRequired[str]
    description: NotRequired[str]
    permissions: NotRequired[List[str]]


class OrgsOrgOutsideCollaboratorsUsernamePutBodyType(TypedDict):
    """OrgsOrgOutsideCollaboratorsUsernamePutBody"""

    async_: NotRequired[bool]


class OrgsOrgOutsideCollaboratorsUsernamePutResponse202Type(TypedDict):
    """OrgsOrgOutsideCollaboratorsUsernamePutResponse202"""


class OrgsOrgOutsideCollaboratorsUsernameDeleteResponse422Type(TypedDict):
    """OrgsOrgOutsideCollaboratorsUsernameDeleteResponse422"""

    message: NotRequired[str]
    documentation_url: NotRequired[str]


class OrgsOrgPersonalAccessTokenRequestsPostBodyType(TypedDict):
    """OrgsOrgPersonalAccessTokenRequestsPostBody"""

    pat_request_ids: NotRequired[List[int]]
    action: Literal["approve", "deny"]
    reason: NotRequired[Union[str, None]]


class OrgsOrgPersonalAccessTokenRequestsPatRequestIdPostBodyType(TypedDict):
    """OrgsOrgPersonalAccessTokenRequestsPatRequestIdPostBody"""

    action: Literal["approve", "deny"]
    reason: NotRequired[Union[str, None]]


class OrgsOrgPersonalAccessTokensPostBodyType(TypedDict):
    """OrgsOrgPersonalAccessTokensPostBody"""

    action: Literal["revoke"]
    pat_ids: List[int]


class OrgsOrgPersonalAccessTokensPatIdPostBodyType(TypedDict):
    """OrgsOrgPersonalAccessTokensPatIdPostBody"""

    action: Literal["revoke"]


class OrgsOrgProjectsPostBodyType(TypedDict):
    """OrgsOrgProjectsPostBody"""

    name: str
    body: NotRequired[str]


class OrgsOrgPropertiesSchemaPatchBodyType(TypedDict):
    """OrgsOrgPropertiesSchemaPatchBody"""

    properties: List[OrgCustomPropertyType]


class OrgsOrgPropertiesSchemaCustomPropertyNamePutBodyType(TypedDict):
    """OrgsOrgPropertiesSchemaCustomPropertyNamePutBody"""

    value_type: Literal["string", "single_select"]
    required: NotRequired[bool]
    default_value: NotRequired[Union[str, None]]
    description: NotRequired[Union[str, None]]
    allowed_values: NotRequired[Union[List[str], None]]


class OrgsOrgPropertiesValuesPatchBodyType(TypedDict):
    """OrgsOrgPropertiesValuesPatchBody"""

    repository_names: List[str]
    properties: List[CustomPropertyValueType]


class OrgsOrgReposPostBodyType(TypedDict):
    """OrgsOrgReposPostBody"""

    name: str
    description: NotRequired[str]
    homepage: NotRequired[str]
    private: NotRequired[bool]
    visibility: NotRequired[Literal["public", "private"]]
    has_issues: NotRequired[bool]
    has_projects: NotRequired[bool]
    has_wiki: NotRequired[bool]
    has_downloads: NotRequired[bool]
    is_template: NotRequired[bool]
    team_id: NotRequired[int]
    auto_init: NotRequired[bool]
    gitignore_template: NotRequired[str]
    license_template: NotRequired[str]
    allow_squash_merge: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_auto_merge: NotRequired[bool]
    delete_branch_on_merge: NotRequired[bool]
    use_squash_pr_title_as_default: NotRequired[bool]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    custom_properties: NotRequired[OrgsOrgReposPostBodyPropCustomPropertiesType]


class OrgsOrgReposPostBodyPropCustomPropertiesType(TypedDict):
    """OrgsOrgReposPostBodyPropCustomProperties

    The custom properties for the new repository. The keys are the custom property
    names, and the values are the corresponding custom property values.
    """


class OrgsOrgRulesetsPostBodyType(TypedDict):
    """OrgsOrgRulesetsPostBody"""

    name: str
    target: NotRequired[Literal["branch", "tag"]]
    enforcement: Literal["disabled", "active", "evaluate"]
    bypass_actors: NotRequired[List[RepositoryRulesetBypassActorType]]
    conditions: NotRequired[
        Union[OrgRulesetConditionsOneof0Type, OrgRulesetConditionsOneof1Type]
    ]
    rules: NotRequired[
        List[
            Union[
                RepositoryRuleCreationType,
                RepositoryRuleUpdateType,
                RepositoryRuleDeletionType,
                RepositoryRuleRequiredLinearHistoryType,
                RepositoryRuleRequiredDeploymentsType,
                RepositoryRuleRequiredSignaturesType,
                RepositoryRulePullRequestType,
                RepositoryRuleRequiredStatusChecksType,
                RepositoryRuleNonFastForwardType,
                RepositoryRuleCommitMessagePatternType,
                RepositoryRuleCommitAuthorEmailPatternType,
                RepositoryRuleCommitterEmailPatternType,
                RepositoryRuleBranchNamePatternType,
                RepositoryRuleTagNamePatternType,
                RepositoryRuleWorkflowsType,
            ]
        ]
    ]


class OrgsOrgRulesetsRulesetIdPutBodyType(TypedDict):
    """OrgsOrgRulesetsRulesetIdPutBody"""

    name: NotRequired[str]
    target: NotRequired[Literal["branch", "tag"]]
    enforcement: NotRequired[Literal["disabled", "active", "evaluate"]]
    bypass_actors: NotRequired[List[RepositoryRulesetBypassActorType]]
    conditions: NotRequired[
        Union[OrgRulesetConditionsOneof0Type, OrgRulesetConditionsOneof1Type]
    ]
    rules: NotRequired[
        List[
            Union[
                RepositoryRuleCreationType,
                RepositoryRuleUpdateType,
                RepositoryRuleDeletionType,
                RepositoryRuleRequiredLinearHistoryType,
                RepositoryRuleRequiredDeploymentsType,
                RepositoryRuleRequiredSignaturesType,
                RepositoryRulePullRequestType,
                RepositoryRuleRequiredStatusChecksType,
                RepositoryRuleNonFastForwardType,
                RepositoryRuleCommitMessagePatternType,
                RepositoryRuleCommitAuthorEmailPatternType,
                RepositoryRuleCommitterEmailPatternType,
                RepositoryRuleBranchNamePatternType,
                RepositoryRuleTagNamePatternType,
                RepositoryRuleWorkflowsType,
            ]
        ]
    ]


class OrgsOrgTeamsPostBodyType(TypedDict):
    """OrgsOrgTeamsPostBody"""

    name: str
    description: NotRequired[str]
    maintainers: NotRequired[List[str]]
    repo_names: NotRequired[List[str]]
    privacy: NotRequired[Literal["secret", "closed"]]
    notification_setting: NotRequired[
        Literal["notifications_enabled", "notifications_disabled"]
    ]
    permission: NotRequired[Literal["pull", "push"]]
    parent_team_id: NotRequired[int]


class OrgsOrgTeamsTeamSlugPatchBodyType(TypedDict):
    """OrgsOrgTeamsTeamSlugPatchBody"""

    name: NotRequired[str]
    description: NotRequired[str]
    privacy: NotRequired[Literal["secret", "closed"]]
    notification_setting: NotRequired[
        Literal["notifications_enabled", "notifications_disabled"]
    ]
    permission: NotRequired[Literal["pull", "push", "admin"]]
    parent_team_id: NotRequired[Union[int, None]]


class OrgsOrgTeamsTeamSlugDiscussionsPostBodyType(TypedDict):
    """OrgsOrgTeamsTeamSlugDiscussionsPostBody"""

    title: str
    body: str
    private: NotRequired[bool]


class OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberPatchBodyType(TypedDict):
    """OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberPatchBody"""

    title: NotRequired[str]
    body: NotRequired[str]


class OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsPostBodyType(TypedDict):
    """OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsPostBody"""

    body: str


class OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsCommentNumberPatchBodyType(
    TypedDict
):
    """OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsCommentNumberPatchBody"""

    body: str


class OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsCommentNumberReactionsPostBodyType(
    TypedDict
):
    """OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsCommentNumberReactionsPos
    tBody
    """

    content: Literal[
        "+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"
    ]


class OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberReactionsPostBodyType(TypedDict):
    """OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberReactionsPostBody"""

    content: Literal[
        "+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"
    ]


class OrgsOrgTeamsTeamSlugMembershipsUsernamePutBodyType(TypedDict):
    """OrgsOrgTeamsTeamSlugMembershipsUsernamePutBody"""

    role: NotRequired[Literal["member", "maintainer"]]


class OrgsOrgTeamsTeamSlugProjectsProjectIdPutBodyType(TypedDict):
    """OrgsOrgTeamsTeamSlugProjectsProjectIdPutBody"""

    permission: NotRequired[Literal["read", "write", "admin"]]


class OrgsOrgTeamsTeamSlugProjectsProjectIdPutResponse403Type(TypedDict):
    """OrgsOrgTeamsTeamSlugProjectsProjectIdPutResponse403"""

    message: NotRequired[str]
    documentation_url: NotRequired[str]


class OrgsOrgTeamsTeamSlugReposOwnerRepoPutBodyType(TypedDict):
    """OrgsOrgTeamsTeamSlugReposOwnerRepoPutBody"""

    permission: NotRequired[str]


class OrgsOrgSecurityProductEnablementPostBodyType(TypedDict):
    """OrgsOrgSecurityProductEnablementPostBody"""

    query_suite: NotRequired[Literal["default", "extended"]]


class ProjectsColumnsCardsCardIdDeleteResponse403Type(TypedDict):
    """ProjectsColumnsCardsCardIdDeleteResponse403"""

    message: NotRequired[str]
    documentation_url: NotRequired[str]
    errors: NotRequired[List[str]]


class ProjectsColumnsCardsCardIdPatchBodyType(TypedDict):
    """ProjectsColumnsCardsCardIdPatchBody"""

    note: NotRequired[Union[str, None]]
    archived: NotRequired[bool]


class ProjectsColumnsCardsCardIdMovesPostBodyType(TypedDict):
    """ProjectsColumnsCardsCardIdMovesPostBody"""

    position: str
    column_id: NotRequired[int]


class ProjectsColumnsCardsCardIdMovesPostResponse201Type(TypedDict):
    """ProjectsColumnsCardsCardIdMovesPostResponse201"""


class ProjectsColumnsCardsCardIdMovesPostResponse403Type(TypedDict):
    """ProjectsColumnsCardsCardIdMovesPostResponse403"""

    message: NotRequired[str]
    documentation_url: NotRequired[str]
    errors: NotRequired[
        List[ProjectsColumnsCardsCardIdMovesPostResponse403PropErrorsItemsType]
    ]


class ProjectsColumnsCardsCardIdMovesPostResponse403PropErrorsItemsType(TypedDict):
    """ProjectsColumnsCardsCardIdMovesPostResponse403PropErrorsItems"""

    code: NotRequired[str]
    message: NotRequired[str]
    resource: NotRequired[str]
    field: NotRequired[str]


class ProjectsColumnsCardsCardIdMovesPostResponse503Type(TypedDict):
    """ProjectsColumnsCardsCardIdMovesPostResponse503"""

    code: NotRequired[str]
    message: NotRequired[str]
    documentation_url: NotRequired[str]
    errors: NotRequired[
        List[ProjectsColumnsCardsCardIdMovesPostResponse503PropErrorsItemsType]
    ]


class ProjectsColumnsCardsCardIdMovesPostResponse503PropErrorsItemsType(TypedDict):
    """ProjectsColumnsCardsCardIdMovesPostResponse503PropErrorsItems"""

    code: NotRequired[str]
    message: NotRequired[str]


class ProjectsColumnsColumnIdPatchBodyType(TypedDict):
    """ProjectsColumnsColumnIdPatchBody"""

    name: str


class ProjectsColumnsColumnIdCardsPostBodyOneof0Type(TypedDict):
    """ProjectsColumnsColumnIdCardsPostBodyOneof0"""

    note: Union[str, None]


class ProjectsColumnsColumnIdCardsPostBodyOneof1Type(TypedDict):
    """ProjectsColumnsColumnIdCardsPostBodyOneof1"""

    content_id: int
    content_type: str


class ProjectsColumnsColumnIdCardsPostResponse503Type(TypedDict):
    """ProjectsColumnsColumnIdCardsPostResponse503"""

    code: NotRequired[str]
    message: NotRequired[str]
    documentation_url: NotRequired[str]
    errors: NotRequired[
        List[ProjectsColumnsColumnIdCardsPostResponse503PropErrorsItemsType]
    ]


class ProjectsColumnsColumnIdCardsPostResponse503PropErrorsItemsType(TypedDict):
    """ProjectsColumnsColumnIdCardsPostResponse503PropErrorsItems"""

    code: NotRequired[str]
    message: NotRequired[str]


class ProjectsColumnsColumnIdMovesPostBodyType(TypedDict):
    """ProjectsColumnsColumnIdMovesPostBody"""

    position: str


class ProjectsColumnsColumnIdMovesPostResponse201Type(TypedDict):
    """ProjectsColumnsColumnIdMovesPostResponse201"""


class ProjectsProjectIdDeleteResponse403Type(TypedDict):
    """ProjectsProjectIdDeleteResponse403"""

    message: NotRequired[str]
    documentation_url: NotRequired[str]
    errors: NotRequired[List[str]]


class ProjectsProjectIdPatchBodyType(TypedDict):
    """ProjectsProjectIdPatchBody"""

    name: NotRequired[str]
    body: NotRequired[Union[str, None]]
    state: NotRequired[str]
    organization_permission: NotRequired[Literal["read", "write", "admin", "none"]]
    private: NotRequired[bool]


class ProjectsProjectIdPatchResponse403Type(TypedDict):
    """ProjectsProjectIdPatchResponse403"""

    message: NotRequired[str]
    documentation_url: NotRequired[str]
    errors: NotRequired[List[str]]


class ProjectsProjectIdCollaboratorsUsernamePutBodyType(TypedDict):
    """ProjectsProjectIdCollaboratorsUsernamePutBody"""

    permission: NotRequired[Literal["read", "write", "admin"]]


class ProjectsProjectIdColumnsPostBodyType(TypedDict):
    """ProjectsProjectIdColumnsPostBody"""

    name: str


class ReposOwnerRepoDeleteResponse403Type(TypedDict):
    """ReposOwnerRepoDeleteResponse403"""

    message: NotRequired[str]
    documentation_url: NotRequired[str]


class ReposOwnerRepoPatchBodyType(TypedDict):
    """ReposOwnerRepoPatchBody"""

    name: NotRequired[str]
    description: NotRequired[str]
    homepage: NotRequired[str]
    private: NotRequired[bool]
    visibility: NotRequired[Literal["public", "private"]]
    security_and_analysis: NotRequired[
        Union[ReposOwnerRepoPatchBodyPropSecurityAndAnalysisType, None]
    ]
    has_issues: NotRequired[bool]
    has_projects: NotRequired[bool]
    has_wiki: NotRequired[bool]
    is_template: NotRequired[bool]
    default_branch: NotRequired[str]
    allow_squash_merge: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_auto_merge: NotRequired[bool]
    delete_branch_on_merge: NotRequired[bool]
    allow_update_branch: NotRequired[bool]
    use_squash_pr_title_as_default: NotRequired[bool]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    archived: NotRequired[bool]
    allow_forking: NotRequired[bool]
    web_commit_signoff_required: NotRequired[bool]


class ReposOwnerRepoPatchBodyPropSecurityAndAnalysisPropAdvancedSecurityType(TypedDict):
    """ReposOwnerRepoPatchBodyPropSecurityAndAnalysisPropAdvancedSecurity

    Use the `status` property to enable or disable GitHub Advanced Security for this
    repository. For more information, see "[About GitHub Advanced
    Security](/github/getting-started-with-github/learning-about-github/about-
    github-advanced-security)."
    """

    status: NotRequired[str]


class ReposOwnerRepoPatchBodyPropSecurityAndAnalysisPropSecretScanningType(TypedDict):
    """ReposOwnerRepoPatchBodyPropSecurityAndAnalysisPropSecretScanning

    Use the `status` property to enable or disable secret scanning for this
    repository. For more information, see "[About secret scanning](/code-
    security/secret-security/about-secret-scanning)."
    """

    status: NotRequired[str]


class ReposOwnerRepoPatchBodyPropSecurityAndAnalysisPropSecretScanningPushProtectionType(
    TypedDict
):
    """ReposOwnerRepoPatchBodyPropSecurityAndAnalysisPropSecretScanningPushProtection

    Use the `status` property to enable or disable secret scanning push protection
    for this repository. For more information, see "[Protecting pushes with secret
    scanning](/code-security/secret-scanning/protecting-pushes-with-secret-
    scanning)."
    """

    status: NotRequired[str]


class ReposOwnerRepoPatchBodyPropSecurityAndAnalysisType(TypedDict):
    """ReposOwnerRepoPatchBodyPropSecurityAndAnalysis

    Specify which security and analysis features to enable or disable for the
    repository.

    To use this parameter, you must have admin permissions for the repository or be
    an owner or security manager for the organization that owns the repository. For
    more information, see "[Managing security managers in your
    organization](https://docs.github.com/organizations/managing-peoples-access-to-
    your-organization-with-roles/managing-security-managers-in-your-organization)."

    For example, to enable GitHub Advanced Security, use this data in the body of
    the `PATCH` request:
    `{ "security_and_analysis": {"advanced_security": { "status": "enabled" } } }`.

    You can check which security and analysis features are currently enabled by
    using a `GET /repos/{owner}/{repo}` request.
    """

    advanced_security: NotRequired[
        ReposOwnerRepoPatchBodyPropSecurityAndAnalysisPropAdvancedSecurityType
    ]
    secret_scanning: NotRequired[
        ReposOwnerRepoPatchBodyPropSecurityAndAnalysisPropSecretScanningType
    ]
    secret_scanning_push_protection: NotRequired[
        ReposOwnerRepoPatchBodyPropSecurityAndAnalysisPropSecretScanningPushProtectionType
    ]


class ReposOwnerRepoActionsArtifactsGetResponse200Type(TypedDict):
    """ReposOwnerRepoActionsArtifactsGetResponse200"""

    total_count: int
    artifacts: List[ArtifactType]


class ReposOwnerRepoActionsJobsJobIdRerunPostBodyType(TypedDict):
    """ReposOwnerRepoActionsJobsJobIdRerunPostBody"""

    enable_debug_logging: NotRequired[bool]


class ReposOwnerRepoActionsOidcCustomizationSubPutBodyType(TypedDict):
    """Actions OIDC subject customization for a repository

    Actions OIDC subject customization for a repository
    """

    use_default: bool
    include_claim_keys: NotRequired[List[str]]


class ReposOwnerRepoActionsOrganizationSecretsGetResponse200Type(TypedDict):
    """ReposOwnerRepoActionsOrganizationSecretsGetResponse200"""

    total_count: int
    secrets: List[ActionsSecretType]


class ReposOwnerRepoActionsOrganizationVariablesGetResponse200Type(TypedDict):
    """ReposOwnerRepoActionsOrganizationVariablesGetResponse200"""

    total_count: int
    variables: List[ActionsVariableType]


class ReposOwnerRepoActionsPermissionsPutBodyType(TypedDict):
    """ReposOwnerRepoActionsPermissionsPutBody"""

    enabled: bool
    allowed_actions: NotRequired[Literal["all", "local_only", "selected"]]


class ReposOwnerRepoActionsRunnersGetResponse200Type(TypedDict):
    """ReposOwnerRepoActionsRunnersGetResponse200"""

    total_count: int
    runners: List[RunnerType]


class ReposOwnerRepoActionsRunnersGenerateJitconfigPostBodyType(TypedDict):
    """ReposOwnerRepoActionsRunnersGenerateJitconfigPostBody"""

    name: str
    runner_group_id: int
    labels: List[str]
    work_folder: NotRequired[str]


class ReposOwnerRepoActionsRunnersRunnerIdLabelsPutBodyType(TypedDict):
    """ReposOwnerRepoActionsRunnersRunnerIdLabelsPutBody"""

    labels: List[str]


class ReposOwnerRepoActionsRunnersRunnerIdLabelsPostBodyType(TypedDict):
    """ReposOwnerRepoActionsRunnersRunnerIdLabelsPostBody"""

    labels: List[str]


class ReposOwnerRepoActionsRunsGetResponse200Type(TypedDict):
    """ReposOwnerRepoActionsRunsGetResponse200"""

    total_count: int
    workflow_runs: List[WorkflowRunType]


class ReposOwnerRepoActionsRunsRunIdArtifactsGetResponse200Type(TypedDict):
    """ReposOwnerRepoActionsRunsRunIdArtifactsGetResponse200"""

    total_count: int
    artifacts: List[ArtifactType]


class ReposOwnerRepoActionsRunsRunIdAttemptsAttemptNumberJobsGetResponse200Type(
    TypedDict
):
    """ReposOwnerRepoActionsRunsRunIdAttemptsAttemptNumberJobsGetResponse200"""

    total_count: int
    jobs: List[JobType]


class ReposOwnerRepoActionsRunsRunIdJobsGetResponse200Type(TypedDict):
    """ReposOwnerRepoActionsRunsRunIdJobsGetResponse200"""

    total_count: int
    jobs: List[JobType]


class ReposOwnerRepoActionsRunsRunIdPendingDeploymentsPostBodyType(TypedDict):
    """ReposOwnerRepoActionsRunsRunIdPendingDeploymentsPostBody"""

    environment_ids: List[int]
    state: Literal["approved", "rejected"]
    comment: str


class ReposOwnerRepoActionsRunsRunIdRerunPostBodyType(TypedDict):
    """ReposOwnerRepoActionsRunsRunIdRerunPostBody"""

    enable_debug_logging: NotRequired[bool]


class ReposOwnerRepoActionsRunsRunIdRerunFailedJobsPostBodyType(TypedDict):
    """ReposOwnerRepoActionsRunsRunIdRerunFailedJobsPostBody"""

    enable_debug_logging: NotRequired[bool]


class ReposOwnerRepoActionsSecretsGetResponse200Type(TypedDict):
    """ReposOwnerRepoActionsSecretsGetResponse200"""

    total_count: int
    secrets: List[ActionsSecretType]


class ReposOwnerRepoActionsSecretsSecretNamePutBodyType(TypedDict):
    """ReposOwnerRepoActionsSecretsSecretNamePutBody"""

    encrypted_value: NotRequired[str]
    key_id: NotRequired[str]


class ReposOwnerRepoActionsVariablesGetResponse200Type(TypedDict):
    """ReposOwnerRepoActionsVariablesGetResponse200"""

    total_count: int
    variables: List[ActionsVariableType]


class ReposOwnerRepoActionsVariablesPostBodyType(TypedDict):
    """ReposOwnerRepoActionsVariablesPostBody"""

    name: str
    value: str


class ReposOwnerRepoActionsVariablesNamePatchBodyType(TypedDict):
    """ReposOwnerRepoActionsVariablesNamePatchBody"""

    name: NotRequired[str]
    value: NotRequired[str]


class ReposOwnerRepoActionsWorkflowsGetResponse200Type(TypedDict):
    """ReposOwnerRepoActionsWorkflowsGetResponse200"""

    total_count: int
    workflows: List[WorkflowType]


class ReposOwnerRepoActionsWorkflowsWorkflowIdDispatchesPostBodyType(TypedDict):
    """ReposOwnerRepoActionsWorkflowsWorkflowIdDispatchesPostBody"""

    ref: str
    inputs: NotRequired[
        ReposOwnerRepoActionsWorkflowsWorkflowIdDispatchesPostBodyPropInputsType
    ]


class ReposOwnerRepoActionsWorkflowsWorkflowIdDispatchesPostBodyPropInputsType(
    TypedDict
):
    """ReposOwnerRepoActionsWorkflowsWorkflowIdDispatchesPostBodyPropInputs

    Input keys and values configured in the workflow file. The maximum number of
    properties is 10. Any default properties configured in the workflow file will be
    used when `inputs` are omitted.
    """


class ReposOwnerRepoActionsWorkflowsWorkflowIdRunsGetResponse200Type(TypedDict):
    """ReposOwnerRepoActionsWorkflowsWorkflowIdRunsGetResponse200"""

    total_count: int
    workflow_runs: List[WorkflowRunType]


class ReposOwnerRepoAutolinksPostBodyType(TypedDict):
    """ReposOwnerRepoAutolinksPostBody"""

    key_prefix: str
    url_template: str
    is_alphanumeric: NotRequired[bool]


class ReposOwnerRepoBranchesBranchProtectionPutBodyType(TypedDict):
    """ReposOwnerRepoBranchesBranchProtectionPutBody"""

    required_status_checks: Union[
        ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredStatusChecksType, None
    ]
    enforce_admins: Union[bool, None]
    required_pull_request_reviews: Union[
        ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredPullRequestReviewsType,
        None,
    ]
    restrictions: Union[
        ReposOwnerRepoBranchesBranchProtectionPutBodyPropRestrictionsType, None
    ]
    required_linear_history: NotRequired[bool]
    allow_force_pushes: NotRequired[Union[bool, None]]
    allow_deletions: NotRequired[bool]
    block_creations: NotRequired[bool]
    required_conversation_resolution: NotRequired[bool]
    lock_branch: NotRequired[bool]
    allow_fork_syncing: NotRequired[bool]


class ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredStatusChecksPropChecksItemsType(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredStatusChecksPropChecksI
    tems
    """

    context: str
    app_id: NotRequired[int]


class ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredStatusChecksType(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredStatusChecks

    Require status checks to pass before merging. Set to `null` to disable.
    """

    strict: bool
    contexts: List[str]
    checks: NotRequired[
        List[
            ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredStatusChecksPropChecksItemsType
        ]
    ]


class ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredPullRequestReviewsPropDismissalRestrictionsType(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredPullRequestReviewsPropD
    ismissalRestrictions

    Specify which users, teams, and apps can dismiss pull request reviews. Pass an
    empty `dismissal_restrictions` object to disable. User and team
    `dismissal_restrictions` are only available for organization-owned repositories.
    Omit this parameter for personal repositories.
    """

    users: NotRequired[List[str]]
    teams: NotRequired[List[str]]
    apps: NotRequired[List[str]]


class ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredPullRequestReviewsPropBypassPullRequestAllowancesType(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredPullRequestReviewsPropB
    ypassPullRequestAllowances

    Allow specific users, teams, or apps to bypass pull request requirements.
    """

    users: NotRequired[List[str]]
    teams: NotRequired[List[str]]
    apps: NotRequired[List[str]]


class ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredPullRequestReviewsType(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredPullRequestReviews

    Require at least one approving review on a pull request, before merging. Set to
    `null` to disable.
    """

    dismissal_restrictions: NotRequired[
        ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredPullRequestReviewsPropDismissalRestrictionsType
    ]
    dismiss_stale_reviews: NotRequired[bool]
    require_code_owner_reviews: NotRequired[bool]
    required_approving_review_count: NotRequired[int]
    require_last_push_approval: NotRequired[bool]
    bypass_pull_request_allowances: NotRequired[
        ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredPullRequestReviewsPropBypassPullRequestAllowancesType
    ]


class ReposOwnerRepoBranchesBranchProtectionPutBodyPropRestrictionsType(TypedDict):
    """ReposOwnerRepoBranchesBranchProtectionPutBodyPropRestrictions

    Restrict who can push to the protected branch. User, app, and team
    `restrictions` are only available for organization-owned repositories. Set to
    `null` to disable.
    """

    users: List[str]
    teams: List[str]
    apps: NotRequired[List[str]]


class ReposOwnerRepoBranchesBranchProtectionRequiredPullRequestReviewsPatchBodyType(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionRequiredPullRequestReviewsPatchBody"""

    dismissal_restrictions: NotRequired[
        ReposOwnerRepoBranchesBranchProtectionRequiredPullRequestReviewsPatchBodyPropDismissalRestrictionsType
    ]
    dismiss_stale_reviews: NotRequired[bool]
    require_code_owner_reviews: NotRequired[bool]
    required_approving_review_count: NotRequired[int]
    require_last_push_approval: NotRequired[bool]
    bypass_pull_request_allowances: NotRequired[
        ReposOwnerRepoBranchesBranchProtectionRequiredPullRequestReviewsPatchBodyPropBypassPullRequestAllowancesType
    ]


class ReposOwnerRepoBranchesBranchProtectionRequiredPullRequestReviewsPatchBodyPropDismissalRestrictionsType(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionRequiredPullRequestReviewsPatchBodyPropDis
    missalRestrictions

    Specify which users, teams, and apps can dismiss pull request reviews. Pass an
    empty `dismissal_restrictions` object to disable. User and team
    `dismissal_restrictions` are only available for organization-owned repositories.
    Omit this parameter for personal repositories.
    """

    users: NotRequired[List[str]]
    teams: NotRequired[List[str]]
    apps: NotRequired[List[str]]


class ReposOwnerRepoBranchesBranchProtectionRequiredPullRequestReviewsPatchBodyPropBypassPullRequestAllowancesType(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionRequiredPullRequestReviewsPatchBodyPropByp
    assPullRequestAllowances

    Allow specific users, teams, or apps to bypass pull request requirements.
    """

    users: NotRequired[List[str]]
    teams: NotRequired[List[str]]
    apps: NotRequired[List[str]]


class ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksPatchBodyType(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksPatchBody"""

    strict: NotRequired[bool]
    contexts: NotRequired[List[str]]
    checks: NotRequired[
        List[
            ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksPatchBodyPropChecksItemsType
        ]
    ]


class ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksPatchBodyPropChecksItemsType(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksPatchBodyPropChecksIte
    ms
    """

    context: str
    app_id: NotRequired[int]


class ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsPutBodyOneof0Type(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsPutBodyOneof0

    Examples:
        {'contexts': ['contexts']}
    """

    contexts: List[str]


class ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsPostBodyOneof0Type(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsPostBodyOneof0

    Examples:
        {'contexts': ['contexts']}
    """

    contexts: List[str]


class ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsDeleteBodyOneof0Type(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsDeleteBodyOneo
    f0

    Examples:
        {'contexts': ['contexts']}
    """

    contexts: List[str]


class ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsPutBodyOneof0Type(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsPutBodyOneof0

    Examples:
        {'apps': ['my-app']}
    """

    apps: List[str]


class ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsPostBodyOneof0Type(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsPostBodyOneof0

    Examples:
        {'apps': ['my-app']}
    """

    apps: List[str]


class ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsDeleteBodyOneof0Type(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsDeleteBodyOneof0

    Examples:
        {'apps': ['my-app']}
    """

    apps: List[str]


class ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsPutBodyOneof0Type(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsPutBodyOneof0

    Examples:
        {'teams': ['justice-league']}
    """

    teams: List[str]


class ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsPostBodyOneof0Type(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsPostBodyOneof0

    Examples:
        {'teams': ['my-team']}
    """

    teams: List[str]


class ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsDeleteBodyOneof0Type(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsDeleteBodyOneof0

    Examples:
        {'teams': ['my-team']}
    """

    teams: List[str]


class ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersPutBodyOneof0Type(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersPutBodyOneof0

    Examples:
        {'users': ['mona']}
    """

    users: List[str]


class ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersPostBodyOneof0Type(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersPostBodyOneof0

    Examples:
        {'users': ['mona']}
    """

    users: List[str]


class ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersDeleteBodyOneof0Type(
    TypedDict
):
    """ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersDeleteBodyOneof0

    Examples:
        {'users': ['mona']}
    """

    users: List[str]


class ReposOwnerRepoBranchesBranchRenamePostBodyType(TypedDict):
    """ReposOwnerRepoBranchesBranchRenamePostBody"""

    new_name: str


class ReposOwnerRepoCheckRunsPostBodyPropOutputType(TypedDict):
    """ReposOwnerRepoCheckRunsPostBodyPropOutput

    Check runs can accept a variety of data in the `output` object, including a
    `title` and `summary` and can optionally provide descriptive details about the
    run.
    """

    title: str
    summary: str
    text: NotRequired[str]
    annotations: NotRequired[
        List[ReposOwnerRepoCheckRunsPostBodyPropOutputPropAnnotationsItemsType]
    ]
    images: NotRequired[
        List[ReposOwnerRepoCheckRunsPostBodyPropOutputPropImagesItemsType]
    ]


class ReposOwnerRepoCheckRunsPostBodyPropOutputPropAnnotationsItemsType(TypedDict):
    """ReposOwnerRepoCheckRunsPostBodyPropOutputPropAnnotationsItems"""

    path: str
    start_line: int
    end_line: int
    start_column: NotRequired[int]
    end_column: NotRequired[int]
    annotation_level: Literal["notice", "warning", "failure"]
    message: str
    title: NotRequired[str]
    raw_details: NotRequired[str]


class ReposOwnerRepoCheckRunsPostBodyPropOutputPropImagesItemsType(TypedDict):
    """ReposOwnerRepoCheckRunsPostBodyPropOutputPropImagesItems"""

    alt: str
    image_url: str
    caption: NotRequired[str]


class ReposOwnerRepoCheckRunsPostBodyPropActionsItemsType(TypedDict):
    """ReposOwnerRepoCheckRunsPostBodyPropActionsItems"""

    label: str
    description: str
    identifier: str


class ReposOwnerRepoCheckRunsPostBodyOneof0Type(TypedDict):
    """ReposOwnerRepoCheckRunsPostBodyOneof0"""

    name: str
    head_sha: str
    details_url: NotRequired[str]
    external_id: NotRequired[str]
    status: Literal["completed"]
    started_at: NotRequired[datetime]
    conclusion: Literal[
        "action_required",
        "cancelled",
        "failure",
        "neutral",
        "success",
        "skipped",
        "stale",
        "timed_out",
    ]
    completed_at: NotRequired[datetime]
    output: NotRequired[ReposOwnerRepoCheckRunsPostBodyPropOutputType]
    actions: NotRequired[List[ReposOwnerRepoCheckRunsPostBodyPropActionsItemsType]]


class ReposOwnerRepoCheckRunsPostBodyOneof1Type(TypedDict):
    """ReposOwnerRepoCheckRunsPostBodyOneof1"""

    name: str
    head_sha: str
    details_url: NotRequired[str]
    external_id: NotRequired[str]
    status: NotRequired[Literal["queued", "in_progress"]]
    started_at: NotRequired[datetime]
    conclusion: NotRequired[
        Literal[
            "action_required",
            "cancelled",
            "failure",
            "neutral",
            "success",
            "skipped",
            "stale",
            "timed_out",
        ]
    ]
    completed_at: NotRequired[datetime]
    output: NotRequired[ReposOwnerRepoCheckRunsPostBodyPropOutputType]
    actions: NotRequired[List[ReposOwnerRepoCheckRunsPostBodyPropActionsItemsType]]


class ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutputType(TypedDict):
    """ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutput

    Check runs can accept a variety of data in the `output` object, including a
    `title` and `summary` and can optionally provide descriptive details about the
    run.
    """

    title: NotRequired[str]
    summary: str
    text: NotRequired[str]
    annotations: NotRequired[
        List[
            ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutputPropAnnotationsItemsType
        ]
    ]
    images: NotRequired[
        List[ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutputPropImagesItemsType]
    ]


class ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutputPropAnnotationsItemsType(
    TypedDict
):
    """ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutputPropAnnotationsItems"""

    path: str
    start_line: int
    end_line: int
    start_column: NotRequired[int]
    end_column: NotRequired[int]
    annotation_level: Literal["notice", "warning", "failure"]
    message: str
    title: NotRequired[str]
    raw_details: NotRequired[str]


class ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutputPropImagesItemsType(
    TypedDict
):
    """ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutputPropImagesItems"""

    alt: str
    image_url: str
    caption: NotRequired[str]


class ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropActionsItemsType(TypedDict):
    """ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropActionsItems"""

    label: str
    description: str
    identifier: str


class ReposOwnerRepoCheckRunsCheckRunIdPatchBodyAnyof0Type(TypedDict):
    """ReposOwnerRepoCheckRunsCheckRunIdPatchBodyAnyof0"""

    name: NotRequired[str]
    details_url: NotRequired[str]
    external_id: NotRequired[str]
    started_at: NotRequired[datetime]
    status: NotRequired[Literal["completed"]]
    conclusion: Literal[
        "action_required",
        "cancelled",
        "failure",
        "neutral",
        "success",
        "skipped",
        "stale",
        "timed_out",
    ]
    completed_at: NotRequired[datetime]
    output: NotRequired[ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutputType]
    actions: NotRequired[
        List[ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropActionsItemsType]
    ]


class ReposOwnerRepoCheckRunsCheckRunIdPatchBodyAnyof1Type(TypedDict):
    """ReposOwnerRepoCheckRunsCheckRunIdPatchBodyAnyof1"""

    name: NotRequired[str]
    details_url: NotRequired[str]
    external_id: NotRequired[str]
    started_at: NotRequired[datetime]
    status: NotRequired[Literal["queued", "in_progress"]]
    conclusion: NotRequired[
        Literal[
            "action_required",
            "cancelled",
            "failure",
            "neutral",
            "success",
            "skipped",
            "stale",
            "timed_out",
        ]
    ]
    completed_at: NotRequired[datetime]
    output: NotRequired[ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutputType]
    actions: NotRequired[
        List[ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropActionsItemsType]
    ]


class ReposOwnerRepoCheckSuitesPostBodyType(TypedDict):
    """ReposOwnerRepoCheckSuitesPostBody"""

    head_sha: str


class ReposOwnerRepoCheckSuitesPreferencesPatchBodyType(TypedDict):
    """ReposOwnerRepoCheckSuitesPreferencesPatchBody"""

    auto_trigger_checks: NotRequired[
        List[
            ReposOwnerRepoCheckSuitesPreferencesPatchBodyPropAutoTriggerChecksItemsType
        ]
    ]


class ReposOwnerRepoCheckSuitesPreferencesPatchBodyPropAutoTriggerChecksItemsType(
    TypedDict
):
    """ReposOwnerRepoCheckSuitesPreferencesPatchBodyPropAutoTriggerChecksItems"""

    app_id: int
    setting: bool


class ReposOwnerRepoCheckSuitesCheckSuiteIdCheckRunsGetResponse200Type(TypedDict):
    """ReposOwnerRepoCheckSuitesCheckSuiteIdCheckRunsGetResponse200"""

    total_count: int
    check_runs: List[CheckRunType]


class ReposOwnerRepoCodeScanningAlertsAlertNumberPatchBodyType(TypedDict):
    """ReposOwnerRepoCodeScanningAlertsAlertNumberPatchBody"""

    state: Literal["open", "dismissed"]
    dismissed_reason: NotRequired[
        Union[None, Literal["false positive", "won't fix", "used in tests"]]
    ]
    dismissed_comment: NotRequired[Union[str, None]]


class ReposOwnerRepoCodeScanningSarifsPostBodyType(TypedDict):
    """ReposOwnerRepoCodeScanningSarifsPostBody"""

    commit_sha: str
    ref: str
    sarif: str
    checkout_uri: NotRequired[str]
    started_at: NotRequired[datetime]
    tool_name: NotRequired[str]
    validate_: NotRequired[bool]


class ReposOwnerRepoCodespacesGetResponse200Type(TypedDict):
    """ReposOwnerRepoCodespacesGetResponse200"""

    total_count: int
    codespaces: List[CodespaceType]


class ReposOwnerRepoCodespacesPostBodyType(TypedDict):
    """ReposOwnerRepoCodespacesPostBody"""

    ref: NotRequired[str]
    location: NotRequired[str]
    geo: NotRequired[Literal["EuropeWest", "SoutheastAsia", "UsEast", "UsWest"]]
    client_ip: NotRequired[str]
    machine: NotRequired[str]
    devcontainer_path: NotRequired[str]
    multi_repo_permissions_opt_out: NotRequired[bool]
    working_directory: NotRequired[str]
    idle_timeout_minutes: NotRequired[int]
    display_name: NotRequired[str]
    retention_period_minutes: NotRequired[int]


class ReposOwnerRepoCodespacesDevcontainersGetResponse200Type(TypedDict):
    """ReposOwnerRepoCodespacesDevcontainersGetResponse200"""

    total_count: int
    devcontainers: List[
        ReposOwnerRepoCodespacesDevcontainersGetResponse200PropDevcontainersItemsType
    ]


class ReposOwnerRepoCodespacesDevcontainersGetResponse200PropDevcontainersItemsType(
    TypedDict
):
    """ReposOwnerRepoCodespacesDevcontainersGetResponse200PropDevcontainersItems"""

    path: str
    name: NotRequired[str]
    display_name: NotRequired[str]


class ReposOwnerRepoCodespacesMachinesGetResponse200Type(TypedDict):
    """ReposOwnerRepoCodespacesMachinesGetResponse200"""

    total_count: int
    machines: List[CodespaceMachineType]


class ReposOwnerRepoCodespacesNewGetResponse200Type(TypedDict):
    """ReposOwnerRepoCodespacesNewGetResponse200"""

    billable_owner: NotRequired[SimpleUserType]
    defaults: NotRequired[ReposOwnerRepoCodespacesNewGetResponse200PropDefaultsType]


class ReposOwnerRepoCodespacesNewGetResponse200PropDefaultsType(TypedDict):
    """ReposOwnerRepoCodespacesNewGetResponse200PropDefaults"""

    location: str
    devcontainer_path: Union[str, None]


class ReposOwnerRepoCodespacesSecretsGetResponse200Type(TypedDict):
    """ReposOwnerRepoCodespacesSecretsGetResponse200"""

    total_count: int
    secrets: List[RepoCodespacesSecretType]


class ReposOwnerRepoCodespacesSecretsSecretNamePutBodyType(TypedDict):
    """ReposOwnerRepoCodespacesSecretsSecretNamePutBody"""

    encrypted_value: NotRequired[str]
    key_id: NotRequired[str]


class ReposOwnerRepoCollaboratorsUsernamePutBodyType(TypedDict):
    """ReposOwnerRepoCollaboratorsUsernamePutBody"""

    permission: NotRequired[str]


class ReposOwnerRepoCommentsCommentIdPatchBodyType(TypedDict):
    """ReposOwnerRepoCommentsCommentIdPatchBody"""

    body: str


class ReposOwnerRepoCommentsCommentIdReactionsPostBodyType(TypedDict):
    """ReposOwnerRepoCommentsCommentIdReactionsPostBody"""

    content: Literal[
        "+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"
    ]


class ReposOwnerRepoCommitsCommitShaCommentsPostBodyType(TypedDict):
    """ReposOwnerRepoCommitsCommitShaCommentsPostBody"""

    body: str
    path: NotRequired[str]
    position: NotRequired[int]
    line: NotRequired[int]


class ReposOwnerRepoCommitsRefCheckRunsGetResponse200Type(TypedDict):
    """ReposOwnerRepoCommitsRefCheckRunsGetResponse200"""

    total_count: int
    check_runs: List[CheckRunType]


class ReposOwnerRepoCommitsRefCheckSuitesGetResponse200Type(TypedDict):
    """ReposOwnerRepoCommitsRefCheckSuitesGetResponse200"""

    total_count: int
    check_suites: List[CheckSuiteType]


class ReposOwnerRepoContentsPathPutBodyType(TypedDict):
    """ReposOwnerRepoContentsPathPutBody"""

    message: str
    content: str
    sha: NotRequired[str]
    branch: NotRequired[str]
    committer: NotRequired[ReposOwnerRepoContentsPathPutBodyPropCommitterType]
    author: NotRequired[ReposOwnerRepoContentsPathPutBodyPropAuthorType]


class ReposOwnerRepoContentsPathPutBodyPropCommitterType(TypedDict):
    """ReposOwnerRepoContentsPathPutBodyPropCommitter

    The person that committed the file. Default: the authenticated user.
    """

    name: str
    email: str
    date: NotRequired[str]


class ReposOwnerRepoContentsPathPutBodyPropAuthorType(TypedDict):
    """ReposOwnerRepoContentsPathPutBodyPropAuthor

    The author of the file. Default: The `committer` or the authenticated user if
    you omit `committer`.
    """

    name: str
    email: str
    date: NotRequired[str]


class ReposOwnerRepoContentsPathDeleteBodyType(TypedDict):
    """ReposOwnerRepoContentsPathDeleteBody"""

    message: str
    sha: str
    branch: NotRequired[str]
    committer: NotRequired[ReposOwnerRepoContentsPathDeleteBodyPropCommitterType]
    author: NotRequired[ReposOwnerRepoContentsPathDeleteBodyPropAuthorType]


class ReposOwnerRepoContentsPathDeleteBodyPropCommitterType(TypedDict):
    """ReposOwnerRepoContentsPathDeleteBodyPropCommitter

    object containing information about the committer.
    """

    name: NotRequired[str]
    email: NotRequired[str]


class ReposOwnerRepoContentsPathDeleteBodyPropAuthorType(TypedDict):
    """ReposOwnerRepoContentsPathDeleteBodyPropAuthor

    object containing information about the author.
    """

    name: NotRequired[str]
    email: NotRequired[str]


class ReposOwnerRepoDependabotAlertsAlertNumberPatchBodyType(TypedDict):
    """ReposOwnerRepoDependabotAlertsAlertNumberPatchBody"""

    state: Literal["dismissed", "open"]
    dismissed_reason: NotRequired[
        Literal[
            "fix_started", "inaccurate", "no_bandwidth", "not_used", "tolerable_risk"
        ]
    ]
    dismissed_comment: NotRequired[str]


class ReposOwnerRepoDependabotSecretsGetResponse200Type(TypedDict):
    """ReposOwnerRepoDependabotSecretsGetResponse200"""

    total_count: int
    secrets: List[DependabotSecretType]


class ReposOwnerRepoDependabotSecretsSecretNamePutBodyType(TypedDict):
    """ReposOwnerRepoDependabotSecretsSecretNamePutBody"""

    encrypted_value: NotRequired[str]
    key_id: NotRequired[str]


class ReposOwnerRepoDependencyGraphSnapshotsPostResponse201Type(TypedDict):
    """ReposOwnerRepoDependencyGraphSnapshotsPostResponse201"""

    id: int
    created_at: str
    result: str
    message: str


class ReposOwnerRepoDeploymentsPostBodyType(TypedDict):
    """ReposOwnerRepoDeploymentsPostBody"""

    ref: str
    task: NotRequired[str]
    auto_merge: NotRequired[bool]
    required_contexts: NotRequired[List[str]]
    payload: NotRequired[
        Union[ReposOwnerRepoDeploymentsPostBodyPropPayloadOneof0Type, str]
    ]
    environment: NotRequired[str]
    description: NotRequired[Union[str, None]]
    transient_environment: NotRequired[bool]
    production_environment: NotRequired[bool]


class ReposOwnerRepoDeploymentsPostBodyPropPayloadOneof0Type(TypedDict):
    """ReposOwnerRepoDeploymentsPostBodyPropPayloadOneof0"""


class ReposOwnerRepoDeploymentsPostResponse202Type(TypedDict):
    """ReposOwnerRepoDeploymentsPostResponse202"""

    message: NotRequired[str]


class ReposOwnerRepoDeploymentsDeploymentIdStatusesPostBodyType(TypedDict):
    """ReposOwnerRepoDeploymentsDeploymentIdStatusesPostBody"""

    state: Literal[
        "error", "failure", "inactive", "in_progress", "queued", "pending", "success"
    ]
    target_url: NotRequired[str]
    log_url: NotRequired[str]
    description: NotRequired[str]
    environment: NotRequired[str]
    environment_url: NotRequired[str]
    auto_inactive: NotRequired[bool]


class ReposOwnerRepoDispatchesPostBodyType(TypedDict):
    """ReposOwnerRepoDispatchesPostBody"""

    event_type: str
    client_payload: NotRequired[ReposOwnerRepoDispatchesPostBodyPropClientPayloadType]


class ReposOwnerRepoDispatchesPostBodyPropClientPayloadType(TypedDict):
    """ReposOwnerRepoDispatchesPostBodyPropClientPayload

    JSON payload with extra information about the webhook event that your action or
    workflow may use. The maximum number of top-level properties is 10.
    """


class ReposOwnerRepoEnvironmentsGetResponse200Type(TypedDict):
    """ReposOwnerRepoEnvironmentsGetResponse200"""

    total_count: NotRequired[int]
    environments: NotRequired[List[EnvironmentType]]


class ReposOwnerRepoEnvironmentsEnvironmentNamePutBodyPropReviewersItemsType(TypedDict):
    """ReposOwnerRepoEnvironmentsEnvironmentNamePutBodyPropReviewersItems"""

    type: NotRequired[Literal["User", "Team"]]
    id: NotRequired[int]


class ReposOwnerRepoEnvironmentsEnvironmentNamePutBodyType(TypedDict):
    """ReposOwnerRepoEnvironmentsEnvironmentNamePutBody"""

    wait_timer: NotRequired[int]
    prevent_self_review: NotRequired[bool]
    reviewers: NotRequired[
        Union[
            List[
                ReposOwnerRepoEnvironmentsEnvironmentNamePutBodyPropReviewersItemsType
            ],
            None,
        ]
    ]
    deployment_branch_policy: NotRequired[
        Union[DeploymentBranchPolicySettingsType, None]
    ]


class ReposOwnerRepoEnvironmentsEnvironmentNameDeploymentBranchPoliciesGetResponse200Type(
    TypedDict
):
    """ReposOwnerRepoEnvironmentsEnvironmentNameDeploymentBranchPoliciesGetResponse200"""

    total_count: int
    branch_policies: List[DeploymentBranchPolicyType]


class ReposOwnerRepoEnvironmentsEnvironmentNameDeploymentProtectionRulesGetResponse200Type(
    TypedDict
):
    """ReposOwnerRepoEnvironmentsEnvironmentNameDeploymentProtectionRulesGetResponse200

    Examples:
        {'$ref': '#/components/examples/deployment-protection-rules'}
    """

    total_count: NotRequired[int]
    custom_deployment_protection_rules: NotRequired[List[DeploymentProtectionRuleType]]


class ReposOwnerRepoEnvironmentsEnvironmentNameDeploymentProtectionRulesPostBodyType(
    TypedDict
):
    """ReposOwnerRepoEnvironmentsEnvironmentNameDeploymentProtectionRulesPostBody"""

    integration_id: NotRequired[int]


class ReposOwnerRepoEnvironmentsEnvironmentNameDeploymentProtectionRulesAppsGetResponse200Type(
    TypedDict
):
    """ReposOwnerRepoEnvironmentsEnvironmentNameDeploymentProtectionRulesAppsGetRespons
    e200
    """

    total_count: NotRequired[int]
    available_custom_deployment_protection_rule_integrations: NotRequired[
        List[CustomDeploymentRuleAppType]
    ]


class ReposOwnerRepoForksPostBodyType(TypedDict):
    """ReposOwnerRepoForksPostBody"""

    organization: NotRequired[str]
    name: NotRequired[str]
    default_branch_only: NotRequired[bool]


class ReposOwnerRepoGitBlobsPostBodyType(TypedDict):
    """ReposOwnerRepoGitBlobsPostBody"""

    content: str
    encoding: NotRequired[str]


class ReposOwnerRepoGitCommitsPostBodyType(TypedDict):
    """ReposOwnerRepoGitCommitsPostBody"""

    message: str
    tree: str
    parents: NotRequired[List[str]]
    author: NotRequired[ReposOwnerRepoGitCommitsPostBodyPropAuthorType]
    committer: NotRequired[ReposOwnerRepoGitCommitsPostBodyPropCommitterType]
    signature: NotRequired[str]


class ReposOwnerRepoGitCommitsPostBodyPropAuthorType(TypedDict):
    """ReposOwnerRepoGitCommitsPostBodyPropAuthor

    Information about the author of the commit. By default, the `author` will be the
    authenticated user and the current date. See the `author` and `committer` object
    below for details.
    """

    name: str
    email: str
    date: NotRequired[datetime]


class ReposOwnerRepoGitCommitsPostBodyPropCommitterType(TypedDict):
    """ReposOwnerRepoGitCommitsPostBodyPropCommitter

    Information about the person who is making the commit. By default, `committer`
    will use the information set in `author`. See the `author` and `committer`
    object below for details.
    """

    name: NotRequired[str]
    email: NotRequired[str]
    date: NotRequired[datetime]


class ReposOwnerRepoGitRefsPostBodyType(TypedDict):
    """ReposOwnerRepoGitRefsPostBody"""

    ref: str
    sha: str


class ReposOwnerRepoGitRefsRefPatchBodyType(TypedDict):
    """ReposOwnerRepoGitRefsRefPatchBody"""

    sha: str
    force: NotRequired[bool]


class ReposOwnerRepoGitTagsPostBodyType(TypedDict):
    """ReposOwnerRepoGitTagsPostBody"""

    tag: str
    message: str
    object_: str
    type: Literal["commit", "tree", "blob"]
    tagger: NotRequired[ReposOwnerRepoGitTagsPostBodyPropTaggerType]


class ReposOwnerRepoGitTagsPostBodyPropTaggerType(TypedDict):
    """ReposOwnerRepoGitTagsPostBodyPropTagger

    An object with information about the individual creating the tag.
    """

    name: str
    email: str
    date: NotRequired[datetime]


class ReposOwnerRepoGitTreesPostBodyType(TypedDict):
    """ReposOwnerRepoGitTreesPostBody"""

    tree: List[ReposOwnerRepoGitTreesPostBodyPropTreeItemsType]
    base_tree: NotRequired[str]


class ReposOwnerRepoGitTreesPostBodyPropTreeItemsType(TypedDict):
    """ReposOwnerRepoGitTreesPostBodyPropTreeItems"""

    path: NotRequired[str]
    mode: NotRequired[Literal["100644", "100755", "040000", "160000", "120000"]]
    type: NotRequired[Literal["blob", "tree", "commit"]]
    sha: NotRequired[Union[str, None]]
    content: NotRequired[str]


class ReposOwnerRepoHooksPostBodyPropConfigType(TypedDict):
    """ReposOwnerRepoHooksPostBodyPropConfig

    Key/value pairs to provide settings for this webhook.
    """

    url: NotRequired[str]
    content_type: NotRequired[str]
    secret: NotRequired[str]
    insecure_ssl: NotRequired[Union[str, float]]
    token: NotRequired[str]
    digest: NotRequired[str]


class ReposOwnerRepoHooksPostBodyType(TypedDict):
    """ReposOwnerRepoHooksPostBody"""

    name: NotRequired[str]
    config: NotRequired[ReposOwnerRepoHooksPostBodyPropConfigType]
    events: NotRequired[List[str]]
    active: NotRequired[bool]


class ReposOwnerRepoHooksHookIdPatchBodyType(TypedDict):
    """ReposOwnerRepoHooksHookIdPatchBody"""

    config: NotRequired[ReposOwnerRepoHooksHookIdPatchBodyPropConfigType]
    events: NotRequired[List[str]]
    add_events: NotRequired[List[str]]
    remove_events: NotRequired[List[str]]
    active: NotRequired[bool]


class ReposOwnerRepoHooksHookIdPatchBodyPropConfigType(TypedDict):
    """ReposOwnerRepoHooksHookIdPatchBodyPropConfig

    Key/value pairs to provide settings for this webhook.
    """

    url: str
    content_type: NotRequired[str]
    secret: NotRequired[str]
    insecure_ssl: NotRequired[Union[str, float]]
    address: NotRequired[str]
    room: NotRequired[str]


class ReposOwnerRepoHooksHookIdConfigPatchBodyType(TypedDict):
    """ReposOwnerRepoHooksHookIdConfigPatchBody"""

    url: NotRequired[str]
    content_type: NotRequired[str]
    secret: NotRequired[str]
    insecure_ssl: NotRequired[Union[str, float]]


class ReposOwnerRepoImportPutBodyType(TypedDict):
    """ReposOwnerRepoImportPutBody"""

    vcs_url: str
    vcs: NotRequired[Literal["subversion", "git", "mercurial", "tfvc"]]
    vcs_username: NotRequired[str]
    vcs_password: NotRequired[str]
    tfvc_project: NotRequired[str]


class ReposOwnerRepoImportPatchBodyType(TypedDict):
    """ReposOwnerRepoImportPatchBody"""

    vcs_username: NotRequired[str]
    vcs_password: NotRequired[str]
    vcs: NotRequired[Literal["subversion", "tfvc", "git", "mercurial"]]
    tfvc_project: NotRequired[str]


class ReposOwnerRepoImportAuthorsAuthorIdPatchBodyType(TypedDict):
    """ReposOwnerRepoImportAuthorsAuthorIdPatchBody"""

    email: NotRequired[str]
    name: NotRequired[str]


class ReposOwnerRepoImportLfsPatchBodyType(TypedDict):
    """ReposOwnerRepoImportLfsPatchBody"""

    use_lfs: Literal["opt_in", "opt_out"]


class ReposOwnerRepoInteractionLimitsGetResponse200Anyof1Type(TypedDict):
    """ReposOwnerRepoInteractionLimitsGetResponse200Anyof1"""


class ReposOwnerRepoInvitationsInvitationIdPatchBodyType(TypedDict):
    """ReposOwnerRepoInvitationsInvitationIdPatchBody"""

    permissions: NotRequired[Literal["read", "write", "maintain", "triage", "admin"]]


class ReposOwnerRepoIssuesPostBodyType(TypedDict):
    """ReposOwnerRepoIssuesPostBody"""

    title: Union[str, int]
    body: NotRequired[str]
    assignee: NotRequired[Union[str, None]]
    milestone: NotRequired[Union[str, int, None]]
    labels: NotRequired[
        List[Union[str, ReposOwnerRepoIssuesPostBodyPropLabelsItemsOneof1Type]]
    ]
    assignees: NotRequired[List[str]]


class ReposOwnerRepoIssuesPostBodyPropLabelsItemsOneof1Type(TypedDict):
    """ReposOwnerRepoIssuesPostBodyPropLabelsItemsOneof1"""

    id: NotRequired[int]
    name: NotRequired[str]
    description: NotRequired[Union[str, None]]
    color: NotRequired[Union[str, None]]


class ReposOwnerRepoIssuesCommentsCommentIdPatchBodyType(TypedDict):
    """ReposOwnerRepoIssuesCommentsCommentIdPatchBody"""

    body: str


class ReposOwnerRepoIssuesCommentsCommentIdReactionsPostBodyType(TypedDict):
    """ReposOwnerRepoIssuesCommentsCommentIdReactionsPostBody"""

    content: Literal[
        "+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"
    ]


class ReposOwnerRepoIssuesIssueNumberPatchBodyType(TypedDict):
    """ReposOwnerRepoIssuesIssueNumberPatchBody"""

    title: NotRequired[Union[str, int, None]]
    body: NotRequired[Union[str, None]]
    assignee: NotRequired[Union[str, None]]
    state: NotRequired[Literal["open", "closed"]]
    state_reason: NotRequired[
        Union[None, Literal["completed", "not_planned", "reopened"]]
    ]
    milestone: NotRequired[Union[str, int, None]]
    labels: NotRequired[
        List[
            Union[
                str, ReposOwnerRepoIssuesIssueNumberPatchBodyPropLabelsItemsOneof1Type
            ]
        ]
    ]
    assignees: NotRequired[List[str]]


class ReposOwnerRepoIssuesIssueNumberPatchBodyPropLabelsItemsOneof1Type(TypedDict):
    """ReposOwnerRepoIssuesIssueNumberPatchBodyPropLabelsItemsOneof1"""

    id: NotRequired[int]
    name: NotRequired[str]
    description: NotRequired[Union[str, None]]
    color: NotRequired[Union[str, None]]


class ReposOwnerRepoIssuesIssueNumberAssigneesPostBodyType(TypedDict):
    """ReposOwnerRepoIssuesIssueNumberAssigneesPostBody"""

    assignees: NotRequired[List[str]]


class ReposOwnerRepoIssuesIssueNumberAssigneesDeleteBodyType(TypedDict):
    """ReposOwnerRepoIssuesIssueNumberAssigneesDeleteBody"""

    assignees: NotRequired[List[str]]


class ReposOwnerRepoIssuesIssueNumberCommentsPostBodyType(TypedDict):
    """ReposOwnerRepoIssuesIssueNumberCommentsPostBody"""

    body: str


class ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof0Type(TypedDict):
    """ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof0"""

    labels: NotRequired[List[str]]


class ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof2Type(TypedDict):
    """ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof2"""

    labels: NotRequired[
        List[ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof2PropLabelsItemsType]
    ]


class ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof2PropLabelsItemsType(TypedDict):
    """ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof2PropLabelsItems"""

    name: str


class ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof3ItemsType(TypedDict):
    """ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof3Items"""

    name: str


class ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof0Type(TypedDict):
    """ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof0"""

    labels: NotRequired[List[str]]


class ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof2Type(TypedDict):
    """ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof2"""

    labels: NotRequired[
        List[ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof2PropLabelsItemsType]
    ]


class ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof2PropLabelsItemsType(TypedDict):
    """ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof2PropLabelsItems"""

    name: str


class ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof3ItemsType(TypedDict):
    """ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof3Items"""

    name: str


class ReposOwnerRepoIssuesIssueNumberLockPutBodyType(TypedDict):
    """ReposOwnerRepoIssuesIssueNumberLockPutBody"""

    lock_reason: NotRequired[Literal["off-topic", "too heated", "resolved", "spam"]]


class ReposOwnerRepoIssuesIssueNumberReactionsPostBodyType(TypedDict):
    """ReposOwnerRepoIssuesIssueNumberReactionsPostBody"""

    content: Literal[
        "+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"
    ]


class ReposOwnerRepoKeysPostBodyType(TypedDict):
    """ReposOwnerRepoKeysPostBody"""

    title: NotRequired[str]
    key: str
    read_only: NotRequired[bool]


class ReposOwnerRepoLabelsPostBodyType(TypedDict):
    """ReposOwnerRepoLabelsPostBody"""

    name: str
    color: NotRequired[str]
    description: NotRequired[str]


class ReposOwnerRepoLabelsNamePatchBodyType(TypedDict):
    """ReposOwnerRepoLabelsNamePatchBody"""

    new_name: NotRequired[str]
    color: NotRequired[str]
    description: NotRequired[str]


class ReposOwnerRepoMergeUpstreamPostBodyType(TypedDict):
    """ReposOwnerRepoMergeUpstreamPostBody"""

    branch: str


class ReposOwnerRepoMergesPostBodyType(TypedDict):
    """ReposOwnerRepoMergesPostBody"""

    base: str
    head: str
    commit_message: NotRequired[str]


class ReposOwnerRepoMilestonesPostBodyType(TypedDict):
    """ReposOwnerRepoMilestonesPostBody"""

    title: str
    state: NotRequired[Literal["open", "closed"]]
    description: NotRequired[str]
    due_on: NotRequired[datetime]


class ReposOwnerRepoMilestonesMilestoneNumberPatchBodyType(TypedDict):
    """ReposOwnerRepoMilestonesMilestoneNumberPatchBody"""

    title: NotRequired[str]
    state: NotRequired[Literal["open", "closed"]]
    description: NotRequired[str]
    due_on: NotRequired[datetime]


class ReposOwnerRepoNotificationsPutBodyType(TypedDict):
    """ReposOwnerRepoNotificationsPutBody"""

    last_read_at: NotRequired[datetime]


class ReposOwnerRepoNotificationsPutResponse202Type(TypedDict):
    """ReposOwnerRepoNotificationsPutResponse202"""

    message: NotRequired[str]
    url: NotRequired[str]


class ReposOwnerRepoPagesPutBodyPropSourceAnyof1Type(TypedDict):
    """ReposOwnerRepoPagesPutBodyPropSourceAnyof1

    Update the source for the repository. Must include the branch name and path.
    """

    branch: str
    path: Literal["/", "/docs"]


class ReposOwnerRepoPagesPutBodyAnyof0Type(TypedDict):
    """ReposOwnerRepoPagesPutBodyAnyof0"""

    cname: NotRequired[Union[str, None]]
    https_enforced: NotRequired[bool]
    build_type: Literal["legacy", "workflow"]
    source: NotRequired[
        Union[
            Literal["gh-pages", "master", "master /docs"],
            ReposOwnerRepoPagesPutBodyPropSourceAnyof1Type,
        ]
    ]


class ReposOwnerRepoPagesPutBodyAnyof1Type(TypedDict):
    """ReposOwnerRepoPagesPutBodyAnyof1"""

    cname: NotRequired[Union[str, None]]
    https_enforced: NotRequired[bool]
    build_type: NotRequired[Literal["legacy", "workflow"]]
    source: Union[
        Literal["gh-pages", "master", "master /docs"],
        ReposOwnerRepoPagesPutBodyPropSourceAnyof1Type,
    ]


class ReposOwnerRepoPagesPutBodyAnyof2Type(TypedDict):
    """ReposOwnerRepoPagesPutBodyAnyof2"""

    cname: Union[str, None]
    https_enforced: NotRequired[bool]
    build_type: NotRequired[Literal["legacy", "workflow"]]
    source: NotRequired[
        Union[
            Literal["gh-pages", "master", "master /docs"],
            ReposOwnerRepoPagesPutBodyPropSourceAnyof1Type,
        ]
    ]


class ReposOwnerRepoPagesPutBodyAnyof3Type(TypedDict):
    """ReposOwnerRepoPagesPutBodyAnyof3"""

    cname: NotRequired[Union[str, None]]
    https_enforced: NotRequired[bool]
    build_type: NotRequired[Literal["legacy", "workflow"]]
    source: NotRequired[
        Union[
            Literal["gh-pages", "master", "master /docs"],
            ReposOwnerRepoPagesPutBodyPropSourceAnyof1Type,
        ]
    ]


class ReposOwnerRepoPagesPutBodyAnyof4Type(TypedDict):
    """ReposOwnerRepoPagesPutBodyAnyof4"""

    cname: NotRequired[Union[str, None]]
    https_enforced: bool
    build_type: NotRequired[Literal["legacy", "workflow"]]
    source: NotRequired[
        Union[
            Literal["gh-pages", "master", "master /docs"],
            ReposOwnerRepoPagesPutBodyPropSourceAnyof1Type,
        ]
    ]


class ReposOwnerRepoPagesPostBodyPropSourceType(TypedDict):
    """ReposOwnerRepoPagesPostBodyPropSource

    The source branch and directory used to publish your Pages site.
    """

    branch: str
    path: NotRequired[Literal["/", "/docs"]]


class ReposOwnerRepoPagesPostBodyAnyof0Type(TypedDict):
    """ReposOwnerRepoPagesPostBodyAnyof0"""

    build_type: NotRequired[Literal["legacy", "workflow"]]
    source: ReposOwnerRepoPagesPostBodyPropSourceType


class ReposOwnerRepoPagesPostBodyAnyof1Type(TypedDict):
    """ReposOwnerRepoPagesPostBodyAnyof1"""

    build_type: Literal["legacy", "workflow"]
    source: NotRequired[ReposOwnerRepoPagesPostBodyPropSourceType]


class ReposOwnerRepoPagesDeploymentPostBodyType(TypedDict):
    """ReposOwnerRepoPagesDeploymentPostBody

    The object used to create GitHub Pages deployment
    """

    artifact_url: str
    environment: NotRequired[str]
    pages_build_version: str
    oidc_token: str


class ReposOwnerRepoProjectsPostBodyType(TypedDict):
    """ReposOwnerRepoProjectsPostBody"""

    name: str
    body: NotRequired[str]


class ReposOwnerRepoPullsPostBodyType(TypedDict):
    """ReposOwnerRepoPullsPostBody"""

    title: NotRequired[str]
    head: str
    head_repo: NotRequired[str]
    base: str
    body: NotRequired[str]
    maintainer_can_modify: NotRequired[bool]
    draft: NotRequired[bool]
    issue: NotRequired[int]


class ReposOwnerRepoPullsCommentsCommentIdPatchBodyType(TypedDict):
    """ReposOwnerRepoPullsCommentsCommentIdPatchBody"""

    body: str


class ReposOwnerRepoPullsCommentsCommentIdReactionsPostBodyType(TypedDict):
    """ReposOwnerRepoPullsCommentsCommentIdReactionsPostBody"""

    content: Literal[
        "+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"
    ]


class ReposOwnerRepoPullsPullNumberPatchBodyType(TypedDict):
    """ReposOwnerRepoPullsPullNumberPatchBody"""

    title: NotRequired[str]
    body: NotRequired[str]
    state: NotRequired[Literal["open", "closed"]]
    base: NotRequired[str]
    maintainer_can_modify: NotRequired[bool]


class ReposOwnerRepoPullsPullNumberCodespacesPostBodyType(TypedDict):
    """ReposOwnerRepoPullsPullNumberCodespacesPostBody"""

    location: NotRequired[str]
    geo: NotRequired[Literal["EuropeWest", "SoutheastAsia", "UsEast", "UsWest"]]
    client_ip: NotRequired[str]
    machine: NotRequired[str]
    devcontainer_path: NotRequired[str]
    multi_repo_permissions_opt_out: NotRequired[bool]
    working_directory: NotRequired[str]
    idle_timeout_minutes: NotRequired[int]
    display_name: NotRequired[str]
    retention_period_minutes: NotRequired[int]


class ReposOwnerRepoPullsPullNumberCommentsPostBodyType(TypedDict):
    """ReposOwnerRepoPullsPullNumberCommentsPostBody"""

    body: str
    commit_id: str
    path: str
    position: NotRequired[int]
    side: NotRequired[Literal["LEFT", "RIGHT"]]
    line: NotRequired[int]
    start_line: NotRequired[int]
    start_side: NotRequired[Literal["LEFT", "RIGHT", "side"]]
    in_reply_to: NotRequired[int]
    subject_type: NotRequired[Literal["line", "file"]]


class ReposOwnerRepoPullsPullNumberCommentsCommentIdRepliesPostBodyType(TypedDict):
    """ReposOwnerRepoPullsPullNumberCommentsCommentIdRepliesPostBody"""

    body: str


class ReposOwnerRepoPullsPullNumberMergePutBodyType(TypedDict):
    """ReposOwnerRepoPullsPullNumberMergePutBody"""

    commit_title: NotRequired[str]
    commit_message: NotRequired[str]
    sha: NotRequired[str]
    merge_method: NotRequired[Literal["merge", "squash", "rebase"]]


class ReposOwnerRepoPullsPullNumberMergePutResponse405Type(TypedDict):
    """ReposOwnerRepoPullsPullNumberMergePutResponse405"""

    message: NotRequired[str]
    documentation_url: NotRequired[str]


class ReposOwnerRepoPullsPullNumberMergePutResponse409Type(TypedDict):
    """ReposOwnerRepoPullsPullNumberMergePutResponse409"""

    message: NotRequired[str]
    documentation_url: NotRequired[str]


class ReposOwnerRepoPullsPullNumberRequestedReviewersPostBodyAnyof0Type(TypedDict):
    """ReposOwnerRepoPullsPullNumberRequestedReviewersPostBodyAnyof0"""

    reviewers: List[str]
    team_reviewers: NotRequired[List[str]]


class ReposOwnerRepoPullsPullNumberRequestedReviewersPostBodyAnyof1Type(TypedDict):
    """ReposOwnerRepoPullsPullNumberRequestedReviewersPostBodyAnyof1"""

    reviewers: NotRequired[List[str]]
    team_reviewers: List[str]


class ReposOwnerRepoPullsPullNumberRequestedReviewersDeleteBodyType(TypedDict):
    """ReposOwnerRepoPullsPullNumberRequestedReviewersDeleteBody"""

    reviewers: List[str]
    team_reviewers: NotRequired[List[str]]


class ReposOwnerRepoPullsPullNumberReviewsPostBodyType(TypedDict):
    """ReposOwnerRepoPullsPullNumberReviewsPostBody"""

    commit_id: NotRequired[str]
    body: NotRequired[str]
    event: NotRequired[Literal["APPROVE", "REQUEST_CHANGES", "COMMENT"]]
    comments: NotRequired[
        List[ReposOwnerRepoPullsPullNumberReviewsPostBodyPropCommentsItemsType]
    ]


class ReposOwnerRepoPullsPullNumberReviewsPostBodyPropCommentsItemsType(TypedDict):
    """ReposOwnerRepoPullsPullNumberReviewsPostBodyPropCommentsItems"""

    path: str
    position: NotRequired[int]
    body: str
    line: NotRequired[int]
    side: NotRequired[str]
    start_line: NotRequired[int]
    start_side: NotRequired[str]


class ReposOwnerRepoPullsPullNumberReviewsReviewIdPutBodyType(TypedDict):
    """ReposOwnerRepoPullsPullNumberReviewsReviewIdPutBody"""

    body: str


class ReposOwnerRepoPullsPullNumberReviewsReviewIdDismissalsPutBodyType(TypedDict):
    """ReposOwnerRepoPullsPullNumberReviewsReviewIdDismissalsPutBody"""

    message: str
    event: NotRequired[Literal["DISMISS"]]


class ReposOwnerRepoPullsPullNumberReviewsReviewIdEventsPostBodyType(TypedDict):
    """ReposOwnerRepoPullsPullNumberReviewsReviewIdEventsPostBody"""

    body: NotRequired[str]
    event: Literal["APPROVE", "REQUEST_CHANGES", "COMMENT"]


class ReposOwnerRepoPullsPullNumberUpdateBranchPutBodyType(TypedDict):
    """ReposOwnerRepoPullsPullNumberUpdateBranchPutBody"""

    expected_head_sha: NotRequired[str]


class ReposOwnerRepoPullsPullNumberUpdateBranchPutResponse202Type(TypedDict):
    """ReposOwnerRepoPullsPullNumberUpdateBranchPutResponse202"""

    message: NotRequired[str]
    url: NotRequired[str]


class ReposOwnerRepoReleasesPostBodyType(TypedDict):
    """ReposOwnerRepoReleasesPostBody"""

    tag_name: str
    target_commitish: NotRequired[str]
    name: NotRequired[str]
    body: NotRequired[str]
    draft: NotRequired[bool]
    prerelease: NotRequired[bool]
    discussion_category_name: NotRequired[str]
    generate_release_notes: NotRequired[bool]
    make_latest: NotRequired[Literal["true", "false", "legacy"]]


class ReposOwnerRepoReleasesAssetsAssetIdPatchBodyType(TypedDict):
    """ReposOwnerRepoReleasesAssetsAssetIdPatchBody"""

    name: NotRequired[str]
    label: NotRequired[str]
    state: NotRequired[str]


class ReposOwnerRepoReleasesGenerateNotesPostBodyType(TypedDict):
    """ReposOwnerRepoReleasesGenerateNotesPostBody"""

    tag_name: str
    target_commitish: NotRequired[str]
    previous_tag_name: NotRequired[str]
    configuration_file_path: NotRequired[str]


class ReposOwnerRepoReleasesReleaseIdPatchBodyType(TypedDict):
    """ReposOwnerRepoReleasesReleaseIdPatchBody"""

    tag_name: NotRequired[str]
    target_commitish: NotRequired[str]
    name: NotRequired[str]
    body: NotRequired[str]
    draft: NotRequired[bool]
    prerelease: NotRequired[bool]
    make_latest: NotRequired[Literal["true", "false", "legacy"]]
    discussion_category_name: NotRequired[str]


class ReposOwnerRepoReleasesReleaseIdReactionsPostBodyType(TypedDict):
    """ReposOwnerRepoReleasesReleaseIdReactionsPostBody"""

    content: Literal["+1", "laugh", "heart", "hooray", "rocket", "eyes"]


class ReposOwnerRepoRulesetsPostBodyType(TypedDict):
    """ReposOwnerRepoRulesetsPostBody"""

    name: str
    target: NotRequired[Literal["branch", "tag"]]
    enforcement: Literal["disabled", "active", "evaluate"]
    bypass_actors: NotRequired[List[RepositoryRulesetBypassActorType]]
    conditions: NotRequired[RepositoryRulesetConditionsType]
    rules: NotRequired[
        List[
            Union[
                RepositoryRuleCreationType,
                RepositoryRuleUpdateType,
                RepositoryRuleDeletionType,
                RepositoryRuleRequiredLinearHistoryType,
                RepositoryRuleRequiredDeploymentsType,
                RepositoryRuleRequiredSignaturesType,
                RepositoryRulePullRequestType,
                RepositoryRuleRequiredStatusChecksType,
                RepositoryRuleNonFastForwardType,
                RepositoryRuleCommitMessagePatternType,
                RepositoryRuleCommitAuthorEmailPatternType,
                RepositoryRuleCommitterEmailPatternType,
                RepositoryRuleBranchNamePatternType,
                RepositoryRuleTagNamePatternType,
                RepositoryRuleWorkflowsType,
            ]
        ]
    ]


class ReposOwnerRepoRulesetsRulesetIdPutBodyType(TypedDict):
    """ReposOwnerRepoRulesetsRulesetIdPutBody"""

    name: NotRequired[str]
    target: NotRequired[Literal["branch", "tag"]]
    enforcement: NotRequired[Literal["disabled", "active", "evaluate"]]
    bypass_actors: NotRequired[List[RepositoryRulesetBypassActorType]]
    conditions: NotRequired[RepositoryRulesetConditionsType]
    rules: NotRequired[
        List[
            Union[
                RepositoryRuleCreationType,
                RepositoryRuleUpdateType,
                RepositoryRuleDeletionType,
                RepositoryRuleRequiredLinearHistoryType,
                RepositoryRuleRequiredDeploymentsType,
                RepositoryRuleRequiredSignaturesType,
                RepositoryRulePullRequestType,
                RepositoryRuleRequiredStatusChecksType,
                RepositoryRuleNonFastForwardType,
                RepositoryRuleCommitMessagePatternType,
                RepositoryRuleCommitAuthorEmailPatternType,
                RepositoryRuleCommitterEmailPatternType,
                RepositoryRuleBranchNamePatternType,
                RepositoryRuleTagNamePatternType,
                RepositoryRuleWorkflowsType,
            ]
        ]
    ]


class ReposOwnerRepoSecretScanningAlertsAlertNumberPatchBodyType(TypedDict):
    """ReposOwnerRepoSecretScanningAlertsAlertNumberPatchBody"""

    state: Literal["open", "resolved"]
    resolution: NotRequired[
        Union[None, Literal["false_positive", "wont_fix", "revoked", "used_in_tests"]]
    ]
    resolution_comment: NotRequired[Union[str, None]]


class ReposOwnerRepoStatusesShaPostBodyType(TypedDict):
    """ReposOwnerRepoStatusesShaPostBody"""

    state: Literal["error", "failure", "pending", "success"]
    target_url: NotRequired[Union[str, None]]
    description: NotRequired[Union[str, None]]
    context: NotRequired[str]


class ReposOwnerRepoSubscriptionPutBodyType(TypedDict):
    """ReposOwnerRepoSubscriptionPutBody"""

    subscribed: NotRequired[bool]
    ignored: NotRequired[bool]


class ReposOwnerRepoTagsProtectionPostBodyType(TypedDict):
    """ReposOwnerRepoTagsProtectionPostBody"""

    pattern: str


class ReposOwnerRepoTopicsPutBodyType(TypedDict):
    """ReposOwnerRepoTopicsPutBody"""

    names: List[str]


class ReposOwnerRepoTransferPostBodyType(TypedDict):
    """ReposOwnerRepoTransferPostBody"""

    new_owner: str
    new_name: NotRequired[str]
    team_ids: NotRequired[List[int]]


class ReposTemplateOwnerTemplateRepoGeneratePostBodyType(TypedDict):
    """ReposTemplateOwnerTemplateRepoGeneratePostBody"""

    owner: NotRequired[str]
    name: str
    description: NotRequired[str]
    include_all_branches: NotRequired[bool]
    private: NotRequired[bool]


class RepositoriesRepositoryIdEnvironmentsEnvironmentNameSecretsGetResponse200Type(
    TypedDict
):
    """RepositoriesRepositoryIdEnvironmentsEnvironmentNameSecretsGetResponse200"""

    total_count: int
    secrets: List[ActionsSecretType]


class RepositoriesRepositoryIdEnvironmentsEnvironmentNameSecretsSecretNamePutBodyType(
    TypedDict
):
    """RepositoriesRepositoryIdEnvironmentsEnvironmentNameSecretsSecretNamePutBody"""

    encrypted_value: str
    key_id: str


class RepositoriesRepositoryIdEnvironmentsEnvironmentNameVariablesGetResponse200Type(
    TypedDict
):
    """RepositoriesRepositoryIdEnvironmentsEnvironmentNameVariablesGetResponse200"""

    total_count: int
    variables: List[ActionsVariableType]


class RepositoriesRepositoryIdEnvironmentsEnvironmentNameVariablesPostBodyType(
    TypedDict
):
    """RepositoriesRepositoryIdEnvironmentsEnvironmentNameVariablesPostBody"""

    name: str
    value: str


class RepositoriesRepositoryIdEnvironmentsEnvironmentNameVariablesNamePatchBodyType(
    TypedDict
):
    """RepositoriesRepositoryIdEnvironmentsEnvironmentNameVariablesNamePatchBody"""

    name: NotRequired[str]
    value: NotRequired[str]


class SearchCodeGetResponse200Type(TypedDict):
    """SearchCodeGetResponse200"""

    total_count: int
    incomplete_results: bool
    items: List[CodeSearchResultItemType]


class SearchCommitsGetResponse200Type(TypedDict):
    """SearchCommitsGetResponse200"""

    total_count: int
    incomplete_results: bool
    items: List[CommitSearchResultItemType]


class SearchIssuesGetResponse200Type(TypedDict):
    """SearchIssuesGetResponse200"""

    total_count: int
    incomplete_results: bool
    items: List[IssueSearchResultItemType]


class SearchLabelsGetResponse200Type(TypedDict):
    """SearchLabelsGetResponse200"""

    total_count: int
    incomplete_results: bool
    items: List[LabelSearchResultItemType]


class SearchRepositoriesGetResponse200Type(TypedDict):
    """SearchRepositoriesGetResponse200"""

    total_count: int
    incomplete_results: bool
    items: List[RepoSearchResultItemType]


class SearchTopicsGetResponse200Type(TypedDict):
    """SearchTopicsGetResponse200"""

    total_count: int
    incomplete_results: bool
    items: List[TopicSearchResultItemType]


class SearchUsersGetResponse200Type(TypedDict):
    """SearchUsersGetResponse200"""

    total_count: int
    incomplete_results: bool
    items: List[UserSearchResultItemType]


class TeamsTeamIdPatchBodyType(TypedDict):
    """TeamsTeamIdPatchBody"""

    name: str
    description: NotRequired[str]
    privacy: NotRequired[Literal["secret", "closed"]]
    notification_setting: NotRequired[
        Literal["notifications_enabled", "notifications_disabled"]
    ]
    permission: NotRequired[Literal["pull", "push", "admin"]]
    parent_team_id: NotRequired[Union[int, None]]


class TeamsTeamIdDiscussionsPostBodyType(TypedDict):
    """TeamsTeamIdDiscussionsPostBody"""

    title: str
    body: str
    private: NotRequired[bool]


class TeamsTeamIdDiscussionsDiscussionNumberPatchBodyType(TypedDict):
    """TeamsTeamIdDiscussionsDiscussionNumberPatchBody"""

    title: NotRequired[str]
    body: NotRequired[str]


class TeamsTeamIdDiscussionsDiscussionNumberCommentsPostBodyType(TypedDict):
    """TeamsTeamIdDiscussionsDiscussionNumberCommentsPostBody"""

    body: str


class TeamsTeamIdDiscussionsDiscussionNumberCommentsCommentNumberPatchBodyType(
    TypedDict
):
    """TeamsTeamIdDiscussionsDiscussionNumberCommentsCommentNumberPatchBody"""

    body: str


class TeamsTeamIdDiscussionsDiscussionNumberCommentsCommentNumberReactionsPostBodyType(
    TypedDict
):
    """TeamsTeamIdDiscussionsDiscussionNumberCommentsCommentNumberReactionsPostBody"""

    content: Literal[
        "+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"
    ]


class TeamsTeamIdDiscussionsDiscussionNumberReactionsPostBodyType(TypedDict):
    """TeamsTeamIdDiscussionsDiscussionNumberReactionsPostBody"""

    content: Literal[
        "+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"
    ]


class TeamsTeamIdMembershipsUsernamePutBodyType(TypedDict):
    """TeamsTeamIdMembershipsUsernamePutBody"""

    role: NotRequired[Literal["member", "maintainer"]]


class TeamsTeamIdProjectsProjectIdPutBodyType(TypedDict):
    """TeamsTeamIdProjectsProjectIdPutBody"""

    permission: NotRequired[Literal["read", "write", "admin"]]


class TeamsTeamIdProjectsProjectIdPutResponse403Type(TypedDict):
    """TeamsTeamIdProjectsProjectIdPutResponse403"""

    message: NotRequired[str]
    documentation_url: NotRequired[str]


class TeamsTeamIdReposOwnerRepoPutBodyType(TypedDict):
    """TeamsTeamIdReposOwnerRepoPutBody"""

    permission: NotRequired[Literal["pull", "push", "admin"]]


class UserPatchBodyType(TypedDict):
    """UserPatchBody"""

    name: NotRequired[str]
    email: NotRequired[str]
    blog: NotRequired[str]
    twitter_username: NotRequired[Union[str, None]]
    company: NotRequired[str]
    location: NotRequired[str]
    hireable: NotRequired[bool]
    bio: NotRequired[str]


class UserCodespacesGetResponse200Type(TypedDict):
    """UserCodespacesGetResponse200"""

    total_count: int
    codespaces: List[CodespaceType]


class UserCodespacesPostBodyOneof0Type(TypedDict):
    """UserCodespacesPostBodyOneof0"""

    repository_id: int
    ref: NotRequired[str]
    location: NotRequired[str]
    geo: NotRequired[Literal["EuropeWest", "SoutheastAsia", "UsEast", "UsWest"]]
    client_ip: NotRequired[str]
    machine: NotRequired[str]
    devcontainer_path: NotRequired[str]
    multi_repo_permissions_opt_out: NotRequired[bool]
    working_directory: NotRequired[str]
    idle_timeout_minutes: NotRequired[int]
    display_name: NotRequired[str]
    retention_period_minutes: NotRequired[int]


class UserCodespacesPostBodyOneof1Type(TypedDict):
    """UserCodespacesPostBodyOneof1"""

    pull_request: UserCodespacesPostBodyOneof1PropPullRequestType
    location: NotRequired[str]
    geo: NotRequired[Literal["EuropeWest", "SoutheastAsia", "UsEast", "UsWest"]]
    machine: NotRequired[str]
    devcontainer_path: NotRequired[str]
    working_directory: NotRequired[str]
    idle_timeout_minutes: NotRequired[int]


class UserCodespacesPostBodyOneof1PropPullRequestType(TypedDict):
    """UserCodespacesPostBodyOneof1PropPullRequest

    Pull request number for this codespace
    """

    pull_request_number: int
    repository_id: int


class UserCodespacesSecretsGetResponse200Type(TypedDict):
    """UserCodespacesSecretsGetResponse200"""

    total_count: int
    secrets: List[CodespacesSecretType]


class UserCodespacesSecretsSecretNamePutBodyType(TypedDict):
    """UserCodespacesSecretsSecretNamePutBody"""

    encrypted_value: NotRequired[str]
    key_id: str
    selected_repository_ids: NotRequired[List[Union[int, str]]]


class UserCodespacesSecretsSecretNameRepositoriesGetResponse200Type(TypedDict):
    """UserCodespacesSecretsSecretNameRepositoriesGetResponse200"""

    total_count: int
    repositories: List[MinimalRepositoryType]


class UserCodespacesSecretsSecretNameRepositoriesPutBodyType(TypedDict):
    """UserCodespacesSecretsSecretNameRepositoriesPutBody"""

    selected_repository_ids: List[int]


class UserCodespacesCodespaceNamePatchBodyType(TypedDict):
    """UserCodespacesCodespaceNamePatchBody"""

    machine: NotRequired[str]
    display_name: NotRequired[str]
    recent_folders: NotRequired[List[str]]


class UserCodespacesCodespaceNameMachinesGetResponse200Type(TypedDict):
    """UserCodespacesCodespaceNameMachinesGetResponse200"""

    total_count: int
    machines: List[CodespaceMachineType]


class UserCodespacesCodespaceNamePublishPostBodyType(TypedDict):
    """UserCodespacesCodespaceNamePublishPostBody"""

    name: NotRequired[str]
    private: NotRequired[bool]


class UserEmailVisibilityPatchBodyType(TypedDict):
    """UserEmailVisibilityPatchBody"""

    visibility: Literal["public", "private"]


class UserEmailsPostBodyOneof0Type(TypedDict):
    """UserEmailsPostBodyOneof0

    Examples:
        {'emails': ['octocat@github.com', 'mona@github.com']}
    """

    emails: List[str]


class UserEmailsDeleteBodyOneof0Type(TypedDict):
    """UserEmailsDeleteBodyOneof0

    Deletes one or more email addresses from your GitHub account. Must contain at
    least one email address. **Note:** Alternatively, you can pass a single email
    address or an `array` of emails addresses directly, but we recommend that you
    pass an object using the `emails` key.

    Examples:
        {'emails': ['octocat@github.com', 'mona@github.com']}
    """

    emails: List[str]


class UserGpgKeysPostBodyType(TypedDict):
    """UserGpgKeysPostBody"""

    name: NotRequired[str]
    armored_public_key: str


class UserInstallationsGetResponse200Type(TypedDict):
    """UserInstallationsGetResponse200"""

    total_count: int
    installations: List[InstallationType]


class UserInstallationsInstallationIdRepositoriesGetResponse200Type(TypedDict):
    """UserInstallationsInstallationIdRepositoriesGetResponse200"""

    total_count: int
    repository_selection: NotRequired[str]
    repositories: List[RepositoryType]


class UserInteractionLimitsGetResponse200Anyof1Type(TypedDict):
    """UserInteractionLimitsGetResponse200Anyof1"""


class UserKeysPostBodyType(TypedDict):
    """UserKeysPostBody"""

    title: NotRequired[str]
    key: str


class UserMembershipsOrgsOrgPatchBodyType(TypedDict):
    """UserMembershipsOrgsOrgPatchBody"""

    state: Literal["active"]


class UserMigrationsPostBodyType(TypedDict):
    """UserMigrationsPostBody"""

    lock_repositories: NotRequired[bool]
    exclude_metadata: NotRequired[bool]
    exclude_git_data: NotRequired[bool]
    exclude_attachments: NotRequired[bool]
    exclude_releases: NotRequired[bool]
    exclude_owner_projects: NotRequired[bool]
    org_metadata_only: NotRequired[bool]
    exclude: NotRequired[List[Literal["repositories"]]]
    repositories: List[str]


class UserProjectsPostBodyType(TypedDict):
    """UserProjectsPostBody"""

    name: str
    body: NotRequired[Union[str, None]]


class UserReposPostBodyType(TypedDict):
    """UserReposPostBody"""

    name: str
    description: NotRequired[str]
    homepage: NotRequired[str]
    private: NotRequired[bool]
    has_issues: NotRequired[bool]
    has_projects: NotRequired[bool]
    has_wiki: NotRequired[bool]
    has_discussions: NotRequired[bool]
    team_id: NotRequired[int]
    auto_init: NotRequired[bool]
    gitignore_template: NotRequired[str]
    license_template: NotRequired[str]
    allow_squash_merge: NotRequired[bool]
    allow_merge_commit: NotRequired[bool]
    allow_rebase_merge: NotRequired[bool]
    allow_auto_merge: NotRequired[bool]
    delete_branch_on_merge: NotRequired[bool]
    squash_merge_commit_title: NotRequired[Literal["PR_TITLE", "COMMIT_OR_PR_TITLE"]]
    squash_merge_commit_message: NotRequired[
        Literal["PR_BODY", "COMMIT_MESSAGES", "BLANK"]
    ]
    merge_commit_title: NotRequired[Literal["PR_TITLE", "MERGE_MESSAGE"]]
    merge_commit_message: NotRequired[Literal["PR_BODY", "PR_TITLE", "BLANK"]]
    has_downloads: NotRequired[bool]
    is_template: NotRequired[bool]


class UserSocialAccountsPostBodyType(TypedDict):
    """UserSocialAccountsPostBody

    Examples:
        {'account_urls': ['https://www.linkedin.com/company/github/',
    'https://twitter.com/github']}
    """

    account_urls: List[str]


class UserSocialAccountsDeleteBodyType(TypedDict):
    """UserSocialAccountsDeleteBody

    Examples:
        {'account_urls': ['https://www.linkedin.com/company/github/',
    'https://twitter.com/github']}
    """

    account_urls: List[str]


class UserSshSigningKeysPostBodyType(TypedDict):
    """UserSshSigningKeysPostBody"""

    title: NotRequired[str]
    key: str


__all__ = (
    "RootType",
    "SimpleUserType",
    "GlobalAdvisoryType",
    "GlobalAdvisoryPropIdentifiersItemsType",
    "GlobalAdvisoryPropVulnerabilitiesItemsType",
    "GlobalAdvisoryPropVulnerabilitiesItemsPropPackageType",
    "GlobalAdvisoryPropCvssType",
    "GlobalAdvisoryPropCwesItemsType",
    "GlobalAdvisoryPropCreditsItemsType",
    "BasicErrorType",
    "ValidationErrorSimpleType",
    "IntegrationType",
    "IntegrationPropPermissionsType",
    "WebhookConfigType",
    "HookDeliveryItemType",
    "ScimErrorType",
    "ValidationErrorType",
    "ValidationErrorPropErrorsItemsType",
    "HookDeliveryType",
    "HookDeliveryPropRequestType",
    "HookDeliveryPropRequestPropHeadersType",
    "HookDeliveryPropRequestPropPayloadType",
    "HookDeliveryPropResponseType",
    "HookDeliveryPropResponsePropHeadersType",
    "EnterpriseType",
    "IntegrationInstallationRequestType",
    "AppPermissionsType",
    "InstallationType",
    "LicenseSimpleType",
    "RepositoryType",
    "RepositoryPropPermissionsType",
    "RepositoryPropTemplateRepositoryPropOwnerType",
    "RepositoryPropTemplateRepositoryPropPermissionsType",
    "RepositoryPropTemplateRepositoryType",
    "InstallationTokenType",
    "ScopedInstallationType",
    "AuthorizationType",
    "AuthorizationPropAppType",
    "SimpleClassroomRepositoryType",
    "SimpleClassroomOrganizationType",
    "ClassroomType",
    "ClassroomAssignmentType",
    "SimpleClassroomUserType",
    "SimpleClassroomType",
    "SimpleClassroomAssignmentType",
    "ClassroomAcceptedAssignmentType",
    "ClassroomAssignmentGradeType",
    "CodeOfConductType",
    "DependabotAlertPackageType",
    "DependabotAlertSecurityVulnerabilityType",
    "DependabotAlertSecurityVulnerabilityPropFirstPatchedVersionType",
    "DependabotAlertSecurityAdvisoryType",
    "DependabotAlertSecurityAdvisoryPropCvssType",
    "DependabotAlertSecurityAdvisoryPropCwesItemsType",
    "DependabotAlertSecurityAdvisoryPropIdentifiersItemsType",
    "DependabotAlertSecurityAdvisoryPropReferencesItemsType",
    "SimpleRepositoryType",
    "DependabotAlertWithRepositoryType",
    "DependabotAlertWithRepositoryPropDependencyType",
    "OrganizationSecretScanningAlertType",
    "ActorType",
    "MilestoneType",
    "ReactionRollupType",
    "IssueType",
    "IssuePropLabelsItemsOneof1Type",
    "IssuePropPullRequestType",
    "IssueCommentType",
    "EventType",
    "EventPropRepoType",
    "EventPropPayloadType",
    "EventPropPayloadPropPagesItemsType",
    "LinkWithTypeType",
    "FeedType",
    "FeedPropLinksType",
    "BaseGistType",
    "BaseGistPropFilesType",
    "PublicUserType",
    "PublicUserPropPlanType",
    "GistHistoryType",
    "GistHistoryPropChangeStatusType",
    "GistSimpleType",
    "GistSimplePropForksItemsType",
    "GistSimplePropForkOfPropFilesType",
    "GistSimplePropForkOfType",
    "GistSimplePropFilesType",
    "GistCommentType",
    "GistCommitType",
    "GistCommitPropChangeStatusType",
    "GitignoreTemplateType",
    "LicenseType",
    "MarketplaceListingPlanType",
    "MarketplacePurchaseType",
    "MarketplacePurchasePropMarketplacePendingChangeType",
    "MarketplacePurchasePropMarketplacePurchaseType",
    "ApiOverviewType",
    "ApiOverviewPropSshKeyFingerprintsType",
    "ApiOverviewPropDomainsType",
    "SecurityAndAnalysisPropAdvancedSecurityType",
    "SecurityAndAnalysisPropDependabotSecurityUpdatesType",
    "SecurityAndAnalysisPropSecretScanningType",
    "SecurityAndAnalysisPropSecretScanningPushProtectionType",
    "SecurityAndAnalysisType",
    "MinimalRepositoryType",
    "MinimalRepositoryPropPermissionsType",
    "MinimalRepositoryPropLicenseType",
    "ThreadType",
    "ThreadPropSubjectType",
    "ThreadSubscriptionType",
    "OrganizationSimpleType",
    "OrganizationFullType",
    "OrganizationFullPropPlanType",
    "ActionsCacheUsageOrgEnterpriseType",
    "ActionsCacheUsageByRepositoryType",
    "OidcCustomSubType",
    "EmptyObjectType",
    "ActionsOrganizationPermissionsType",
    "SelectedActionsType",
    "ActionsGetDefaultWorkflowPermissionsType",
    "ActionsSetDefaultWorkflowPermissionsType",
    "RunnerLabelType",
    "RunnerType",
    "RunnerApplicationType",
    "AuthenticationTokenType",
    "AuthenticationTokenPropPermissionsType",
    "OrganizationActionsSecretType",
    "ActionsPublicKeyType",
    "OrganizationActionsVariableType",
    "CodeScanningAlertRuleSummaryType",
    "CodeScanningAnalysisToolType",
    "CodeScanningAlertLocationType",
    "CodeScanningAlertInstanceType",
    "CodeScanningAlertInstancePropMessageType",
    "CodeScanningOrganizationAlertItemsType",
    "CodespaceMachineType",
    "CodespaceType",
    "CodespacePropGitStatusType",
    "CodespacePropRuntimeConstraintsType",
    "CodespacesOrgSecretType",
    "CodespacesPublicKeyType",
    "CopilotSeatBreakdownType",
    "CopilotOrganizationDetailsType",
    "TeamSimpleType",
    "TeamType",
    "TeamPropPermissionsType",
    "OrganizationType",
    "OrganizationPropPlanType",
    "CopilotSeatDetailsType",
    "OrganizationDependabotSecretType",
    "DependabotPublicKeyType",
    "PackageType",
    "OrganizationInvitationType",
    "OrgHookType",
    "OrgHookPropConfigType",
    "InteractionLimitResponseType",
    "InteractionLimitType",
    "OrgMembershipType",
    "OrgMembershipPropPermissionsType",
    "MigrationType",
    "OrganizationFineGrainedPermissionType",
    "OrganizationRoleType",
    "PackageVersionType",
    "PackageVersionPropMetadataType",
    "PackageVersionPropMetadataPropContainerType",
    "PackageVersionPropMetadataPropDockerType",
    "OrganizationProgrammaticAccessGrantRequestType",
    "OrganizationProgrammaticAccessGrantRequestPropPermissionsType",
    "OrganizationProgrammaticAccessGrantRequestPropPermissionsPropOrganizationType",
    "OrganizationProgrammaticAccessGrantRequestPropPermissionsPropRepositoryType",
    "OrganizationProgrammaticAccessGrantRequestPropPermissionsPropOtherType",
    "OrganizationProgrammaticAccessGrantType",
    "OrganizationProgrammaticAccessGrantPropPermissionsType",
    "OrganizationProgrammaticAccessGrantPropPermissionsPropOrganizationType",
    "OrganizationProgrammaticAccessGrantPropPermissionsPropRepositoryType",
    "OrganizationProgrammaticAccessGrantPropPermissionsPropOtherType",
    "ProjectType",
    "OrgCustomPropertyType",
    "CustomPropertyValueType",
    "OrgRepoCustomPropertyValuesType",
    "CodeOfConductSimpleType",
    "FullRepositoryType",
    "FullRepositoryPropPermissionsType",
    "RepositoryRulesetBypassActorType",
    "RepositoryRulesetConditionsType",
    "RepositoryRulesetConditionsPropRefNameType",
    "RepositoryRulesetConditionsRepositoryNameTargetType",
    "RepositoryRulesetConditionsRepositoryNameTargetPropRepositoryNameType",
    "RepositoryRulesetConditionsRepositoryIdTargetType",
    "RepositoryRulesetConditionsRepositoryIdTargetPropRepositoryIdType",
    "OrgRulesetConditionsOneof0Type",
    "OrgRulesetConditionsOneof1Type",
    "RepositoryRuleCreationType",
    "RepositoryRuleUpdateType",
    "RepositoryRuleUpdatePropParametersType",
    "RepositoryRuleDeletionType",
    "RepositoryRuleRequiredLinearHistoryType",
    "RepositoryRuleRequiredDeploymentsType",
    "RepositoryRuleRequiredDeploymentsPropParametersType",
    "RepositoryRuleRequiredSignaturesType",
    "RepositoryRulePullRequestType",
    "RepositoryRulePullRequestPropParametersType",
    "RepositoryRuleParamsStatusCheckConfigurationType",
    "RepositoryRuleRequiredStatusChecksType",
    "RepositoryRuleRequiredStatusChecksPropParametersType",
    "RepositoryRuleNonFastForwardType",
    "RepositoryRuleCommitMessagePatternType",
    "RepositoryRuleCommitMessagePatternPropParametersType",
    "RepositoryRuleCommitAuthorEmailPatternType",
    "RepositoryRuleCommitAuthorEmailPatternPropParametersType",
    "RepositoryRuleCommitterEmailPatternType",
    "RepositoryRuleCommitterEmailPatternPropParametersType",
    "RepositoryRuleBranchNamePatternType",
    "RepositoryRuleBranchNamePatternPropParametersType",
    "RepositoryRuleTagNamePatternType",
    "RepositoryRuleTagNamePatternPropParametersType",
    "RepositoryRuleParamsWorkflowFileReferenceType",
    "RepositoryRuleWorkflowsType",
    "RepositoryRuleWorkflowsPropParametersType",
    "RepositoryRulesetType",
    "RepositoryRulesetPropLinksType",
    "RepositoryRulesetPropLinksPropSelfType",
    "RepositoryRulesetPropLinksPropHtmlType",
    "RuleSuitesItemsType",
    "RuleSuiteType",
    "RuleSuitePropRuleEvaluationsItemsType",
    "RuleSuitePropRuleEvaluationsItemsPropRuleSourceType",
    "RepositoryAdvisoryVulnerabilityType",
    "RepositoryAdvisoryVulnerabilityPropPackageType",
    "RepositoryAdvisoryCreditType",
    "RepositoryAdvisoryType",
    "RepositoryAdvisoryPropIdentifiersItemsType",
    "RepositoryAdvisoryPropSubmissionType",
    "RepositoryAdvisoryPropCvssType",
    "RepositoryAdvisoryPropCwesItemsType",
    "RepositoryAdvisoryPropCreditsItemsType",
    "ActionsBillingUsageType",
    "ActionsBillingUsagePropMinutesUsedBreakdownType",
    "PackagesBillingUsageType",
    "CombinedBillingUsageType",
    "TeamOrganizationType",
    "TeamOrganizationPropPlanType",
    "TeamFullType",
    "TeamDiscussionType",
    "TeamDiscussionCommentType",
    "ReactionType",
    "TeamMembershipType",
    "TeamProjectType",
    "TeamProjectPropPermissionsType",
    "TeamRepositoryType",
    "TeamRepositoryPropPermissionsType",
    "ProjectCardType",
    "ProjectColumnType",
    "ProjectCollaboratorPermissionType",
    "RateLimitType",
    "RateLimitOverviewType",
    "RateLimitOverviewPropResourcesType",
    "ArtifactType",
    "ArtifactPropWorkflowRunType",
    "ActionsCacheListType",
    "ActionsCacheListPropActionsCachesItemsType",
    "JobType",
    "JobPropStepsItemsType",
    "OidcCustomSubRepoType",
    "ActionsSecretType",
    "ActionsVariableType",
    "ActionsRepositoryPermissionsType",
    "ActionsWorkflowAccessToRepositoryType",
    "ReferencedWorkflowType",
    "PullRequestMinimalType",
    "PullRequestMinimalPropHeadType",
    "PullRequestMinimalPropHeadPropRepoType",
    "PullRequestMinimalPropBaseType",
    "PullRequestMinimalPropBasePropRepoType",
    "SimpleCommitType",
    "SimpleCommitPropAuthorType",
    "SimpleCommitPropCommitterType",
    "WorkflowRunType",
    "EnvironmentApprovalsType",
    "EnvironmentApprovalsPropEnvironmentsItemsType",
    "ReviewCustomGatesCommentRequiredType",
    "ReviewCustomGatesStateRequiredType",
    "PendingDeploymentType",
    "PendingDeploymentPropEnvironmentType",
    "PendingDeploymentPropReviewersItemsType",
    "DeploymentType",
    "DeploymentPropPayloadOneof0Type",
    "WorkflowRunUsageType",
    "WorkflowRunUsagePropBillableType",
    "WorkflowRunUsagePropBillablePropUbuntuType",
    "WorkflowRunUsagePropBillablePropUbuntuPropJobRunsItemsType",
    "WorkflowRunUsagePropBillablePropMacosType",
    "WorkflowRunUsagePropBillablePropMacosPropJobRunsItemsType",
    "WorkflowRunUsagePropBillablePropWindowsType",
    "WorkflowRunUsagePropBillablePropWindowsPropJobRunsItemsType",
    "WorkflowType",
    "WorkflowUsageType",
    "WorkflowUsagePropBillableType",
    "WorkflowUsagePropBillablePropUbuntuType",
    "WorkflowUsagePropBillablePropMacosType",
    "WorkflowUsagePropBillablePropWindowsType",
    "ActivityType",
    "AutolinkType",
    "CheckAutomatedSecurityFixesType",
    "ProtectedBranchRequiredStatusCheckType",
    "ProtectedBranchRequiredStatusCheckPropChecksItemsType",
    "ProtectedBranchAdminEnforcedType",
    "ProtectedBranchPullRequestReviewType",
    "ProtectedBranchPullRequestReviewPropDismissalRestrictionsType",
    "ProtectedBranchPullRequestReviewPropBypassPullRequestAllowancesType",
    "BranchRestrictionPolicyType",
    "BranchRestrictionPolicyPropUsersItemsType",
    "BranchRestrictionPolicyPropTeamsItemsType",
    "BranchRestrictionPolicyPropAppsItemsType",
    "BranchRestrictionPolicyPropAppsItemsPropOwnerType",
    "BranchRestrictionPolicyPropAppsItemsPropPermissionsType",
    "BranchProtectionType",
    "BranchProtectionPropRequiredLinearHistoryType",
    "BranchProtectionPropAllowForcePushesType",
    "BranchProtectionPropAllowDeletionsType",
    "BranchProtectionPropBlockCreationsType",
    "BranchProtectionPropRequiredConversationResolutionType",
    "BranchProtectionPropRequiredSignaturesType",
    "BranchProtectionPropLockBranchType",
    "BranchProtectionPropAllowForkSyncingType",
    "ShortBranchType",
    "ShortBranchPropCommitType",
    "GitUserType",
    "VerificationType",
    "DiffEntryType",
    "CommitType",
    "CommitPropCommitType",
    "CommitPropCommitPropTreeType",
    "CommitPropParentsItemsType",
    "CommitPropStatsType",
    "BranchWithProtectionType",
    "BranchWithProtectionPropLinksType",
    "StatusCheckPolicyType",
    "StatusCheckPolicyPropChecksItemsType",
    "ProtectedBranchType",
    "ProtectedBranchPropRequiredPullRequestReviewsType",
    "ProtectedBranchPropRequiredPullRequestReviewsPropDismissalRestrictionsType",
    "ProtectedBranchPropRequiredPullRequestReviewsPropBypassPullRequestAllowancesType",
    "ProtectedBranchPropRequiredSignaturesType",
    "ProtectedBranchPropEnforceAdminsType",
    "ProtectedBranchPropRequiredLinearHistoryType",
    "ProtectedBranchPropAllowForcePushesType",
    "ProtectedBranchPropAllowDeletionsType",
    "ProtectedBranchPropRequiredConversationResolutionType",
    "ProtectedBranchPropBlockCreationsType",
    "ProtectedBranchPropLockBranchType",
    "ProtectedBranchPropAllowForkSyncingType",
    "DeploymentSimpleType",
    "CheckRunType",
    "CheckRunPropOutputType",
    "CheckRunPropCheckSuiteType",
    "CheckAnnotationType",
    "CheckSuiteType",
    "CheckSuitePreferenceType",
    "CheckSuitePreferencePropPreferencesType",
    "CheckSuitePreferencePropPreferencesPropAutoTriggerChecksItemsType",
    "CodeScanningAlertItemsType",
    "CodeScanningAlertRuleType",
    "CodeScanningAlertType",
    "CodeScanningAnalysisType",
    "CodeScanningAnalysisDeletionType",
    "CodeScanningCodeqlDatabaseType",
    "CodeScanningDefaultSetupType",
    "CodeScanningDefaultSetupUpdateType",
    "CodeScanningDefaultSetupUpdateResponseType",
    "CodeScanningSarifsReceiptType",
    "CodeScanningSarifsStatusType",
    "CodeownersErrorsType",
    "CodeownersErrorsPropErrorsItemsType",
    "CodespacesPermissionsCheckForDevcontainerType",
    "RepoCodespacesSecretType",
    "CollaboratorType",
    "CollaboratorPropPermissionsType",
    "RepositoryInvitationType",
    "RepositoryCollaboratorPermissionType",
    "CommitCommentType",
    "BranchShortType",
    "BranchShortPropCommitType",
    "LinkType",
    "AutoMergeType",
    "PullRequestSimpleType",
    "PullRequestSimplePropLabelsItemsType",
    "PullRequestSimplePropHeadType",
    "PullRequestSimplePropBaseType",
    "PullRequestSimplePropLinksType",
    "SimpleCommitStatusType",
    "CombinedCommitStatusType",
    "StatusType",
    "CommunityHealthFileType",
    "CommunityProfileType",
    "CommunityProfilePropFilesType",
    "CommitComparisonType",
    "ContentTreeType",
    "ContentTreePropEntriesItemsType",
    "ContentTreePropEntriesItemsPropLinksType",
    "ContentTreePropLinksType",
    "ContentDirectoryItemsType",
    "ContentDirectoryItemsPropLinksType",
    "ContentFileType",
    "ContentFilePropLinksType",
    "ContentSymlinkType",
    "ContentSymlinkPropLinksType",
    "ContentSubmoduleType",
    "ContentSubmodulePropLinksType",
    "FileCommitType",
    "FileCommitPropContentPropLinksType",
    "FileCommitPropContentType",
    "FileCommitPropCommitType",
    "FileCommitPropCommitPropAuthorType",
    "FileCommitPropCommitPropCommitterType",
    "FileCommitPropCommitPropTreeType",
    "FileCommitPropCommitPropParentsItemsType",
    "FileCommitPropCommitPropVerificationType",
    "ContributorType",
    "DependabotAlertType",
    "DependabotAlertPropDependencyType",
    "DependabotSecretType",
    "DependencyGraphDiffItemsType",
    "DependencyGraphDiffItemsPropVulnerabilitiesItemsType",
    "DependencyGraphSpdxSbomType",
    "DependencyGraphSpdxSbomPropSbomType",
    "DependencyGraphSpdxSbomPropSbomPropCreationInfoType",
    "DependencyGraphSpdxSbomPropSbomPropPackagesItemsType",
    "DependencyGraphSpdxSbomPropSbomPropPackagesItemsPropExternalRefsItemsType",
    "MetadataType",
    "DependencyType",
    "ManifestType",
    "ManifestPropFileType",
    "ManifestPropResolvedType",
    "SnapshotType",
    "SnapshotPropJobType",
    "SnapshotPropDetectorType",
    "SnapshotPropManifestsType",
    "DeploymentStatusType",
    "DeploymentBranchPolicySettingsType",
    "EnvironmentType",
    "EnvironmentPropProtectionRulesItemsAnyof0Type",
    "EnvironmentPropProtectionRulesItemsAnyof1Type",
    "EnvironmentPropProtectionRulesItemsAnyof1PropReviewersItemsType",
    "EnvironmentPropProtectionRulesItemsAnyof2Type",
    "DeploymentBranchPolicyType",
    "DeploymentBranchPolicyNamePatternWithTypeType",
    "DeploymentBranchPolicyNamePatternType",
    "CustomDeploymentRuleAppType",
    "DeploymentProtectionRuleType",
    "ShortBlobType",
    "BlobType",
    "GitCommitType",
    "GitCommitPropAuthorType",
    "GitCommitPropCommitterType",
    "GitCommitPropTreeType",
    "GitCommitPropParentsItemsType",
    "GitCommitPropVerificationType",
    "GitRefType",
    "GitRefPropObjectType",
    "GitTagType",
    "GitTagPropTaggerType",
    "GitTagPropObjectType",
    "GitTreeType",
    "GitTreePropTreeItemsType",
    "HookResponseType",
    "HookType",
    "HookPropConfigType",
    "ImportType",
    "ImportPropProjectChoicesItemsType",
    "PorterAuthorType",
    "PorterLargeFileType",
    "IssueEventLabelType",
    "IssueEventDismissedReviewType",
    "IssueEventMilestoneType",
    "IssueEventProjectCardType",
    "IssueEventRenameType",
    "IssueEventType",
    "LabeledIssueEventType",
    "LabeledIssueEventPropLabelType",
    "UnlabeledIssueEventType",
    "UnlabeledIssueEventPropLabelType",
    "AssignedIssueEventType",
    "UnassignedIssueEventType",
    "MilestonedIssueEventType",
    "MilestonedIssueEventPropMilestoneType",
    "DemilestonedIssueEventType",
    "DemilestonedIssueEventPropMilestoneType",
    "RenamedIssueEventType",
    "RenamedIssueEventPropRenameType",
    "ReviewRequestedIssueEventType",
    "ReviewRequestRemovedIssueEventType",
    "ReviewDismissedIssueEventType",
    "ReviewDismissedIssueEventPropDismissedReviewType",
    "LockedIssueEventType",
    "AddedToProjectIssueEventType",
    "AddedToProjectIssueEventPropProjectCardType",
    "MovedColumnInProjectIssueEventType",
    "MovedColumnInProjectIssueEventPropProjectCardType",
    "RemovedFromProjectIssueEventType",
    "RemovedFromProjectIssueEventPropProjectCardType",
    "ConvertedNoteToIssueIssueEventType",
    "ConvertedNoteToIssueIssueEventPropProjectCardType",
    "LabelType",
    "TimelineCommentEventType",
    "TimelineCrossReferencedEventType",
    "TimelineCrossReferencedEventPropSourceType",
    "TimelineCommittedEventType",
    "TimelineCommittedEventPropAuthorType",
    "TimelineCommittedEventPropCommitterType",
    "TimelineCommittedEventPropTreeType",
    "TimelineCommittedEventPropParentsItemsType",
    "TimelineCommittedEventPropVerificationType",
    "TimelineReviewedEventType",
    "TimelineReviewedEventPropLinksType",
    "TimelineReviewedEventPropLinksPropHtmlType",
    "TimelineReviewedEventPropLinksPropPullRequestType",
    "PullRequestReviewCommentType",
    "PullRequestReviewCommentPropLinksType",
    "PullRequestReviewCommentPropLinksPropSelfType",
    "PullRequestReviewCommentPropLinksPropHtmlType",
    "PullRequestReviewCommentPropLinksPropPullRequestType",
    "TimelineLineCommentedEventType",
    "TimelineCommitCommentedEventType",
    "TimelineAssignedIssueEventType",
    "TimelineUnassignedIssueEventType",
    "StateChangeIssueEventType",
    "DeployKeyType",
    "LanguageType",
    "LicenseContentType",
    "LicenseContentPropLinksType",
    "MergedUpstreamType",
    "PagesSourceHashType",
    "PagesHttpsCertificateType",
    "PageType",
    "PageBuildType",
    "PageBuildPropErrorType",
    "PageBuildStatusType",
    "PageDeploymentType",
    "PagesHealthCheckType",
    "PagesHealthCheckPropDomainType",
    "PagesHealthCheckPropAltDomainType",
    "PullRequestType",
    "PullRequestPropLabelsItemsType",
    "PullRequestPropHeadType",
    "PullRequestPropHeadPropRepoPropOwnerType",
    "PullRequestPropHeadPropRepoPropPermissionsType",
    "PullRequestPropHeadPropRepoPropLicenseType",
    "PullRequestPropHeadPropRepoType",
    "PullRequestPropHeadPropUserType",
    "PullRequestPropBaseType",
    "PullRequestPropBasePropRepoType",
    "PullRequestPropBasePropRepoPropOwnerType",
    "PullRequestPropBasePropRepoPropPermissionsType",
    "PullRequestPropBasePropUserType",
    "PullRequestPropLinksType",
    "PullRequestMergeResultType",
    "PullRequestReviewRequestType",
    "PullRequestReviewType",
    "PullRequestReviewPropLinksType",
    "PullRequestReviewPropLinksPropHtmlType",
    "PullRequestReviewPropLinksPropPullRequestType",
    "ReviewCommentType",
    "ReviewCommentPropLinksType",
    "ReleaseAssetType",
    "ReleaseType",
    "ReleaseNotesContentType",
    "RepositoryRuleRulesetInfoType",
    "RepositoryRuleDetailedOneof0Type",
    "RepositoryRuleDetailedOneof1Type",
    "RepositoryRuleDetailedOneof2Type",
    "RepositoryRuleDetailedOneof3Type",
    "RepositoryRuleDetailedOneof4Type",
    "RepositoryRuleDetailedOneof5Type",
    "RepositoryRuleDetailedOneof6Type",
    "RepositoryRuleDetailedOneof7Type",
    "RepositoryRuleDetailedOneof8Type",
    "RepositoryRuleDetailedOneof9Type",
    "RepositoryRuleDetailedOneof10Type",
    "RepositoryRuleDetailedOneof11Type",
    "RepositoryRuleDetailedOneof12Type",
    "RepositoryRuleDetailedOneof13Type",
    "RepositoryRuleDetailedOneof14Type",
    "SecretScanningAlertType",
    "SecretScanningLocationCommitType",
    "SecretScanningLocationIssueTitleType",
    "SecretScanningLocationIssueBodyType",
    "SecretScanningLocationIssueCommentType",
    "SecretScanningLocationDiscussionTitleType",
    "SecretScanningLocationDiscussionBodyType",
    "SecretScanningLocationDiscussionCommentType",
    "SecretScanningLocationPullRequestTitleType",
    "SecretScanningLocationPullRequestBodyType",
    "SecretScanningLocationPullRequestCommentType",
    "SecretScanningLocationPullRequestReviewType",
    "SecretScanningLocationPullRequestReviewCommentType",
    "SecretScanningLocationType",
    "RepositoryAdvisoryCreateType",
    "RepositoryAdvisoryCreatePropVulnerabilitiesItemsType",
    "RepositoryAdvisoryCreatePropVulnerabilitiesItemsPropPackageType",
    "RepositoryAdvisoryCreatePropCreditsItemsType",
    "PrivateVulnerabilityReportCreateType",
    "PrivateVulnerabilityReportCreatePropVulnerabilitiesItemsType",
    "PrivateVulnerabilityReportCreatePropVulnerabilitiesItemsPropPackageType",
    "RepositoryAdvisoryUpdateType",
    "RepositoryAdvisoryUpdatePropVulnerabilitiesItemsType",
    "RepositoryAdvisoryUpdatePropVulnerabilitiesItemsPropPackageType",
    "RepositoryAdvisoryUpdatePropCreditsItemsType",
    "StargazerType",
    "CommitActivityType",
    "ContributorActivityType",
    "ContributorActivityPropWeeksItemsType",
    "ParticipationStatsType",
    "RepositorySubscriptionType",
    "TagType",
    "TagPropCommitType",
    "TagProtectionType",
    "TopicType",
    "TrafficType",
    "CloneTrafficType",
    "ContentTrafficType",
    "ReferrerTrafficType",
    "ViewTrafficType",
    "SearchResultTextMatchesItemsType",
    "SearchResultTextMatchesItemsPropMatchesItemsType",
    "CodeSearchResultItemType",
    "CommitSearchResultItemType",
    "CommitSearchResultItemPropCommitType",
    "CommitSearchResultItemPropCommitPropAuthorType",
    "CommitSearchResultItemPropCommitPropTreeType",
    "CommitSearchResultItemPropParentsItemsType",
    "IssueSearchResultItemType",
    "IssueSearchResultItemPropLabelsItemsType",
    "IssueSearchResultItemPropPullRequestType",
    "LabelSearchResultItemType",
    "RepoSearchResultItemType",
    "RepoSearchResultItemPropPermissionsType",
    "TopicSearchResultItemType",
    "TopicSearchResultItemPropRelatedItemsType",
    "TopicSearchResultItemPropRelatedItemsPropTopicRelationType",
    "TopicSearchResultItemPropAliasesItemsType",
    "TopicSearchResultItemPropAliasesItemsPropTopicRelationType",
    "UserSearchResultItemType",
    "PrivateUserType",
    "PrivateUserPropPlanType",
    "CodespacesSecretType",
    "CodespacesUserPublicKeyType",
    "CodespaceExportDetailsType",
    "CodespaceWithFullRepositoryType",
    "CodespaceWithFullRepositoryPropGitStatusType",
    "CodespaceWithFullRepositoryPropRuntimeConstraintsType",
    "EmailType",
    "GpgKeyType",
    "GpgKeyPropEmailsItemsType",
    "GpgKeyPropSubkeysItemsType",
    "GpgKeyPropSubkeysItemsPropEmailsItemsType",
    "KeyType",
    "MarketplaceAccountType",
    "UserMarketplacePurchaseType",
    "SocialAccountType",
    "SshSigningKeyType",
    "StarredRepositoryType",
    "HovercardType",
    "HovercardPropContextsItemsType",
    "KeySimpleType",
    "EnterpriseWebhooksType",
    "SimpleInstallationType",
    "OrganizationSimpleWebhooksType",
    "RepositoryWebhooksType",
    "RepositoryWebhooksPropPermissionsType",
    "RepositoryWebhooksPropCustomPropertiesType",
    "RepositoryWebhooksPropTemplateRepositoryPropOwnerType",
    "RepositoryWebhooksPropTemplateRepositoryPropPermissionsType",
    "RepositoryWebhooksPropTemplateRepositoryType",
    "SimpleUserWebhooksType",
    "SimpleCheckSuiteType",
    "CheckRunWithSimpleCheckSuiteType",
    "CheckRunWithSimpleCheckSuitePropOutputType",
    "DiscussionType",
    "DiscussionPropAnswerChosenByType",
    "DiscussionPropCategoryType",
    "DiscussionPropReactionsType",
    "DiscussionPropUserType",
    "MergeGroupType",
    "PersonalAccessTokenRequestType",
    "PersonalAccessTokenRequestPropPermissionsAddedType",
    "PersonalAccessTokenRequestPropPermissionsAddedPropOrganizationType",
    "PersonalAccessTokenRequestPropPermissionsAddedPropRepositoryType",
    "PersonalAccessTokenRequestPropPermissionsAddedPropOtherType",
    "PersonalAccessTokenRequestPropPermissionsUpgradedType",
    "PersonalAccessTokenRequestPropPermissionsUpgradedPropOrganizationType",
    "PersonalAccessTokenRequestPropPermissionsUpgradedPropRepositoryType",
    "PersonalAccessTokenRequestPropPermissionsUpgradedPropOtherType",
    "PersonalAccessTokenRequestPropPermissionsResultType",
    "PersonalAccessTokenRequestPropPermissionsResultPropOrganizationType",
    "PersonalAccessTokenRequestPropPermissionsResultPropRepositoryType",
    "PersonalAccessTokenRequestPropPermissionsResultPropOtherType",
    "PersonalAccessTokenRequestPropRepositoriesItemsType",
    "ProjectsV2Type",
    "ProjectsV2ItemType",
    "SecretScanningAlertWebhookType",
    "WebhookBranchProtectionConfigurationDisabledType",
    "WebhookBranchProtectionConfigurationEnabledType",
    "WebhookBranchProtectionRuleCreatedType",
    "WebhookBranchProtectionRuleCreatedPropRuleType",
    "WebhookBranchProtectionRuleDeletedType",
    "WebhookBranchProtectionRuleDeletedPropRuleType",
    "WebhookBranchProtectionRuleEditedType",
    "WebhookBranchProtectionRuleEditedPropChangesType",
    "WebhookBranchProtectionRuleEditedPropChangesPropAdminEnforcedType",
    "WebhookBranchProtectionRuleEditedPropChangesPropAuthorizedActorNamesType",
    "WebhookBranchProtectionRuleEditedPropChangesPropAuthorizedActorsOnlyType",
    "WebhookBranchProtectionRuleEditedPropChangesPropAuthorizedDismissalActorsOnlyType",
    "WebhookBranchProtectionRuleEditedPropChangesPropLinearHistoryRequirementEnforcementLevelType",
    "WebhookBranchProtectionRuleEditedPropChangesPropRequiredStatusChecksType",
    "WebhookBranchProtectionRuleEditedPropChangesPropRequiredStatusChecksEnforcementLevelType",
    "WebhookBranchProtectionRuleEditedPropRuleType",
    "WebhookCheckRunCompletedType",
    "WebhookCheckRunCompletedFormEncodedType",
    "WebhookCheckRunCreatedType",
    "WebhookCheckRunCreatedFormEncodedType",
    "WebhookCheckRunRequestedActionType",
    "WebhookCheckRunRequestedActionPropRequestedActionType",
    "WebhookCheckRunRequestedActionFormEncodedType",
    "WebhookCheckRunRerequestedType",
    "WebhookCheckRunRerequestedFormEncodedType",
    "WebhookCheckSuiteCompletedType",
    "WebhookCheckSuiteCompletedPropCheckSuiteType",
    "WebhookCheckSuiteCompletedPropCheckSuitePropAppType",
    "WebhookCheckSuiteCompletedPropCheckSuitePropAppPropOwnerType",
    "WebhookCheckSuiteCompletedPropCheckSuitePropAppPropPermissionsType",
    "WebhookCheckSuiteCompletedPropCheckSuitePropHeadCommitType",
    "WebhookCheckSuiteCompletedPropCheckSuitePropHeadCommitPropAuthorType",
    "WebhookCheckSuiteCompletedPropCheckSuitePropHeadCommitPropCommitterType",
    "WebhookCheckSuiteCompletedPropCheckSuitePropPullRequestsItemsType",
    "WebhookCheckSuiteCompletedPropCheckSuitePropPullRequestsItemsPropBaseType",
    "WebhookCheckSuiteCompletedPropCheckSuitePropPullRequestsItemsPropBasePropRepoType",
    "WebhookCheckSuiteCompletedPropCheckSuitePropPullRequestsItemsPropHeadType",
    "WebhookCheckSuiteCompletedPropCheckSuitePropPullRequestsItemsPropHeadPropRepoType",
    "WebhookCheckSuiteRequestedType",
    "WebhookCheckSuiteRequestedPropCheckSuiteType",
    "WebhookCheckSuiteRequestedPropCheckSuitePropAppType",
    "WebhookCheckSuiteRequestedPropCheckSuitePropAppPropOwnerType",
    "WebhookCheckSuiteRequestedPropCheckSuitePropAppPropPermissionsType",
    "WebhookCheckSuiteRequestedPropCheckSuitePropHeadCommitType",
    "WebhookCheckSuiteRequestedPropCheckSuitePropHeadCommitPropAuthorType",
    "WebhookCheckSuiteRequestedPropCheckSuitePropHeadCommitPropCommitterType",
    "WebhookCheckSuiteRequestedPropCheckSuitePropPullRequestsItemsType",
    "WebhookCheckSuiteRequestedPropCheckSuitePropPullRequestsItemsPropBaseType",
    "WebhookCheckSuiteRequestedPropCheckSuitePropPullRequestsItemsPropBasePropRepoType",
    "WebhookCheckSuiteRequestedPropCheckSuitePropPullRequestsItemsPropHeadType",
    "WebhookCheckSuiteRequestedPropCheckSuitePropPullRequestsItemsPropHeadPropRepoType",
    "WebhookCheckSuiteRerequestedType",
    "WebhookCheckSuiteRerequestedPropCheckSuiteType",
    "WebhookCheckSuiteRerequestedPropCheckSuitePropAppType",
    "WebhookCheckSuiteRerequestedPropCheckSuitePropAppPropOwnerType",
    "WebhookCheckSuiteRerequestedPropCheckSuitePropAppPropPermissionsType",
    "WebhookCheckSuiteRerequestedPropCheckSuitePropHeadCommitType",
    "WebhookCheckSuiteRerequestedPropCheckSuitePropHeadCommitPropAuthorType",
    "WebhookCheckSuiteRerequestedPropCheckSuitePropHeadCommitPropCommitterType",
    "WebhookCheckSuiteRerequestedPropCheckSuitePropPullRequestsItemsType",
    "WebhookCheckSuiteRerequestedPropCheckSuitePropPullRequestsItemsPropBaseType",
    "WebhookCheckSuiteRerequestedPropCheckSuitePropPullRequestsItemsPropBasePropRepoType",
    "WebhookCheckSuiteRerequestedPropCheckSuitePropPullRequestsItemsPropHeadType",
    "WebhookCheckSuiteRerequestedPropCheckSuitePropPullRequestsItemsPropHeadPropRepoType",
    "WebhookCodeScanningAlertAppearedInBranchType",
    "WebhookCodeScanningAlertAppearedInBranchPropAlertType",
    "WebhookCodeScanningAlertAppearedInBranchPropAlertPropDismissedByType",
    "WebhookCodeScanningAlertAppearedInBranchPropAlertPropMostRecentInstancePropLocationType",
    "WebhookCodeScanningAlertAppearedInBranchPropAlertPropMostRecentInstancePropMessageType",
    "WebhookCodeScanningAlertAppearedInBranchPropAlertPropMostRecentInstanceType",
    "WebhookCodeScanningAlertAppearedInBranchPropAlertPropRuleType",
    "WebhookCodeScanningAlertAppearedInBranchPropAlertPropToolType",
    "WebhookCodeScanningAlertClosedByUserType",
    "WebhookCodeScanningAlertClosedByUserPropAlertType",
    "WebhookCodeScanningAlertClosedByUserPropAlertPropDismissedByType",
    "WebhookCodeScanningAlertClosedByUserPropAlertPropMostRecentInstancePropLocationType",
    "WebhookCodeScanningAlertClosedByUserPropAlertPropMostRecentInstancePropMessageType",
    "WebhookCodeScanningAlertClosedByUserPropAlertPropMostRecentInstanceType",
    "WebhookCodeScanningAlertClosedByUserPropAlertPropRuleType",
    "WebhookCodeScanningAlertClosedByUserPropAlertPropToolType",
    "WebhookCodeScanningAlertCreatedType",
    "WebhookCodeScanningAlertCreatedPropAlertType",
    "WebhookCodeScanningAlertCreatedPropAlertPropMostRecentInstancePropLocationType",
    "WebhookCodeScanningAlertCreatedPropAlertPropMostRecentInstancePropMessageType",
    "WebhookCodeScanningAlertCreatedPropAlertPropMostRecentInstanceType",
    "WebhookCodeScanningAlertCreatedPropAlertPropRuleType",
    "WebhookCodeScanningAlertCreatedPropAlertPropToolType",
    "WebhookCodeScanningAlertFixedType",
    "WebhookCodeScanningAlertFixedPropAlertType",
    "WebhookCodeScanningAlertFixedPropAlertPropDismissedByType",
    "WebhookCodeScanningAlertFixedPropAlertPropMostRecentInstancePropLocationType",
    "WebhookCodeScanningAlertFixedPropAlertPropMostRecentInstancePropMessageType",
    "WebhookCodeScanningAlertFixedPropAlertPropMostRecentInstanceType",
    "WebhookCodeScanningAlertFixedPropAlertPropRuleType",
    "WebhookCodeScanningAlertFixedPropAlertPropToolType",
    "WebhookCodeScanningAlertReopenedType",
    "WebhookCodeScanningAlertReopenedPropAlertPropDismissedByType",
    "WebhookCodeScanningAlertReopenedPropAlertPropMostRecentInstancePropLocationType",
    "WebhookCodeScanningAlertReopenedPropAlertPropMostRecentInstancePropMessageType",
    "WebhookCodeScanningAlertReopenedPropAlertPropMostRecentInstanceType",
    "WebhookCodeScanningAlertReopenedPropAlertPropRuleType",
    "WebhookCodeScanningAlertReopenedPropAlertPropToolType",
    "WebhookCodeScanningAlertReopenedPropAlertType",
    "WebhookCodeScanningAlertReopenedByUserType",
    "WebhookCodeScanningAlertReopenedByUserPropAlertType",
    "WebhookCodeScanningAlertReopenedByUserPropAlertPropMostRecentInstancePropLocationType",
    "WebhookCodeScanningAlertReopenedByUserPropAlertPropMostRecentInstancePropMessageType",
    "WebhookCodeScanningAlertReopenedByUserPropAlertPropMostRecentInstanceType",
    "WebhookCodeScanningAlertReopenedByUserPropAlertPropRuleType",
    "WebhookCodeScanningAlertReopenedByUserPropAlertPropToolType",
    "WebhookCommitCommentCreatedType",
    "WebhookCommitCommentCreatedPropCommentType",
    "WebhookCommitCommentCreatedPropCommentPropReactionsType",
    "WebhookCommitCommentCreatedPropCommentPropUserType",
    "WebhookCreateType",
    "WebhookCustomPropertyCreatedType",
    "WebhookCustomPropertyDeletedType",
    "WebhookCustomPropertyDeletedPropDefinitionType",
    "WebhookCustomPropertyUpdatedType",
    "WebhookCustomPropertyValuesUpdatedType",
    "WebhookDeleteType",
    "WebhookDependabotAlertAutoDismissedType",
    "WebhookDependabotAlertAutoReopenedType",
    "WebhookDependabotAlertCreatedType",
    "WebhookDependabotAlertDismissedType",
    "WebhookDependabotAlertFixedType",
    "WebhookDependabotAlertReintroducedType",
    "WebhookDependabotAlertReopenedType",
    "WebhookDeployKeyCreatedType",
    "WebhookDeployKeyCreatedPropKeyType",
    "WebhookDeployKeyDeletedType",
    "WebhookDeployKeyDeletedPropKeyType",
    "WebhookDeploymentCreatedType",
    "WebhookDeploymentCreatedPropDeploymentType",
    "WebhookDeploymentCreatedPropDeploymentPropCreatorType",
    "WebhookDeploymentCreatedPropDeploymentPropPayloadOneof0Type",
    "WebhookDeploymentCreatedPropDeploymentPropPerformedViaGithubAppPropOwnerType",
    "WebhookDeploymentCreatedPropDeploymentPropPerformedViaGithubAppPropPermissionsType",
    "WebhookDeploymentCreatedPropDeploymentPropPerformedViaGithubAppType",
    "WebhookDeploymentCreatedPropWorkflowType",
    "WebhookDeploymentCreatedPropWorkflowRunPropActorType",
    "WebhookDeploymentCreatedPropWorkflowRunPropHeadRepositoryType",
    "WebhookDeploymentCreatedPropWorkflowRunPropHeadRepositoryPropOwnerType",
    "WebhookDeploymentCreatedPropWorkflowRunPropPullRequestsItemsType",
    "WebhookDeploymentCreatedPropWorkflowRunPropPullRequestsItemsPropBaseType",
    "WebhookDeploymentCreatedPropWorkflowRunPropPullRequestsItemsPropBasePropRepoType",
    "WebhookDeploymentCreatedPropWorkflowRunPropPullRequestsItemsPropHeadType",
    "WebhookDeploymentCreatedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepoType",
    "WebhookDeploymentCreatedPropWorkflowRunPropReferencedWorkflowsItemsType",
    "WebhookDeploymentCreatedPropWorkflowRunPropRepositoryType",
    "WebhookDeploymentCreatedPropWorkflowRunPropRepositoryPropOwnerType",
    "WebhookDeploymentCreatedPropWorkflowRunPropTriggeringActorType",
    "WebhookDeploymentCreatedPropWorkflowRunType",
    "WebhookDeploymentProtectionRuleRequestedType",
    "WebhookDeploymentReviewApprovedType",
    "WebhookDeploymentReviewApprovedPropApproverType",
    "WebhookDeploymentReviewApprovedPropReviewersItemsType",
    "WebhookDeploymentReviewApprovedPropReviewersItemsPropReviewerType",
    "WebhookDeploymentReviewApprovedPropWorkflowJobRunType",
    "WebhookDeploymentReviewApprovedPropWorkflowJobRunsItemsType",
    "WebhookDeploymentReviewApprovedPropWorkflowRunPropActorType",
    "WebhookDeploymentReviewApprovedPropWorkflowRunPropHeadCommitType",
    "WebhookDeploymentReviewApprovedPropWorkflowRunPropHeadRepositoryType",
    "WebhookDeploymentReviewApprovedPropWorkflowRunPropHeadRepositoryPropOwnerType",
    "WebhookDeploymentReviewApprovedPropWorkflowRunPropPullRequestsItemsType",
    "WebhookDeploymentReviewApprovedPropWorkflowRunPropPullRequestsItemsPropBaseType",
    "WebhookDeploymentReviewApprovedPropWorkflowRunPropPullRequestsItemsPropBasePropRepoType",
    "WebhookDeploymentReviewApprovedPropWorkflowRunPropPullRequestsItemsPropHeadType",
    "WebhookDeploymentReviewApprovedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepoType",
    "WebhookDeploymentReviewApprovedPropWorkflowRunPropReferencedWorkflowsItemsType",
    "WebhookDeploymentReviewApprovedPropWorkflowRunPropRepositoryType",
    "WebhookDeploymentReviewApprovedPropWorkflowRunPropRepositoryPropOwnerType",
    "WebhookDeploymentReviewApprovedPropWorkflowRunPropTriggeringActorType",
    "WebhookDeploymentReviewApprovedPropWorkflowRunType",
    "WebhookDeploymentReviewRejectedType",
    "WebhookDeploymentReviewRejectedPropApproverType",
    "WebhookDeploymentReviewRejectedPropReviewersItemsType",
    "WebhookDeploymentReviewRejectedPropReviewersItemsPropReviewerType",
    "WebhookDeploymentReviewRejectedPropWorkflowJobRunType",
    "WebhookDeploymentReviewRejectedPropWorkflowJobRunsItemsType",
    "WebhookDeploymentReviewRejectedPropWorkflowRunPropActorType",
    "WebhookDeploymentReviewRejectedPropWorkflowRunPropHeadCommitType",
    "WebhookDeploymentReviewRejectedPropWorkflowRunPropHeadRepositoryType",
    "WebhookDeploymentReviewRejectedPropWorkflowRunPropHeadRepositoryPropOwnerType",
    "WebhookDeploymentReviewRejectedPropWorkflowRunPropPullRequestsItemsType",
    "WebhookDeploymentReviewRejectedPropWorkflowRunPropPullRequestsItemsPropBaseType",
    "WebhookDeploymentReviewRejectedPropWorkflowRunPropPullRequestsItemsPropBasePropRepoType",
    "WebhookDeploymentReviewRejectedPropWorkflowRunPropPullRequestsItemsPropHeadType",
    "WebhookDeploymentReviewRejectedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepoType",
    "WebhookDeploymentReviewRejectedPropWorkflowRunPropReferencedWorkflowsItemsType",
    "WebhookDeploymentReviewRejectedPropWorkflowRunPropRepositoryType",
    "WebhookDeploymentReviewRejectedPropWorkflowRunPropRepositoryPropOwnerType",
    "WebhookDeploymentReviewRejectedPropWorkflowRunPropTriggeringActorType",
    "WebhookDeploymentReviewRejectedPropWorkflowRunType",
    "WebhookDeploymentReviewRequestedType",
    "WebhookDeploymentReviewRequestedPropRequestorType",
    "WebhookDeploymentReviewRequestedPropReviewersItemsType",
    "WebhookDeploymentReviewRequestedPropReviewersItemsPropReviewerType",
    "WebhookDeploymentReviewRequestedPropWorkflowJobRunType",
    "WebhookDeploymentReviewRequestedPropWorkflowRunPropActorType",
    "WebhookDeploymentReviewRequestedPropWorkflowRunPropHeadCommitType",
    "WebhookDeploymentReviewRequestedPropWorkflowRunPropHeadRepositoryType",
    "WebhookDeploymentReviewRequestedPropWorkflowRunPropHeadRepositoryPropOwnerType",
    "WebhookDeploymentReviewRequestedPropWorkflowRunPropPullRequestsItemsType",
    "WebhookDeploymentReviewRequestedPropWorkflowRunPropPullRequestsItemsPropBaseType",
    "WebhookDeploymentReviewRequestedPropWorkflowRunPropPullRequestsItemsPropBasePropRepoType",
    "WebhookDeploymentReviewRequestedPropWorkflowRunPropPullRequestsItemsPropHeadType",
    "WebhookDeploymentReviewRequestedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepoType",
    "WebhookDeploymentReviewRequestedPropWorkflowRunPropReferencedWorkflowsItemsType",
    "WebhookDeploymentReviewRequestedPropWorkflowRunPropRepositoryType",
    "WebhookDeploymentReviewRequestedPropWorkflowRunPropRepositoryPropOwnerType",
    "WebhookDeploymentReviewRequestedPropWorkflowRunPropTriggeringActorType",
    "WebhookDeploymentReviewRequestedPropWorkflowRunType",
    "WebhookDeploymentStatusCreatedType",
    "WebhookDeploymentStatusCreatedPropCheckRunType",
    "WebhookDeploymentStatusCreatedPropDeploymentType",
    "WebhookDeploymentStatusCreatedPropDeploymentPropCreatorType",
    "WebhookDeploymentStatusCreatedPropDeploymentPropPayloadOneof1Type",
    "WebhookDeploymentStatusCreatedPropDeploymentPropPerformedViaGithubAppPropOwnerType",
    "WebhookDeploymentStatusCreatedPropDeploymentPropPerformedViaGithubAppPropPermissionsType",
    "WebhookDeploymentStatusCreatedPropDeploymentPropPerformedViaGithubAppType",
    "WebhookDeploymentStatusCreatedPropDeploymentStatusType",
    "WebhookDeploymentStatusCreatedPropDeploymentStatusPropCreatorType",
    "WebhookDeploymentStatusCreatedPropDeploymentStatusPropPerformedViaGithubAppPropOwnerType",
    "WebhookDeploymentStatusCreatedPropDeploymentStatusPropPerformedViaGithubAppPropPermissionsType",
    "WebhookDeploymentStatusCreatedPropDeploymentStatusPropPerformedViaGithubAppType",
    "WebhookDeploymentStatusCreatedPropWorkflowType",
    "WebhookDeploymentStatusCreatedPropWorkflowRunPropActorType",
    "WebhookDeploymentStatusCreatedPropWorkflowRunPropHeadRepositoryType",
    "WebhookDeploymentStatusCreatedPropWorkflowRunPropHeadRepositoryPropOwnerType",
    "WebhookDeploymentStatusCreatedPropWorkflowRunPropPullRequestsItemsType",
    "WebhookDeploymentStatusCreatedPropWorkflowRunPropPullRequestsItemsPropBaseType",
    "WebhookDeploymentStatusCreatedPropWorkflowRunPropPullRequestsItemsPropBasePropRepoType",
    "WebhookDeploymentStatusCreatedPropWorkflowRunPropPullRequestsItemsPropHeadType",
    "WebhookDeploymentStatusCreatedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepoType",
    "WebhookDeploymentStatusCreatedPropWorkflowRunPropReferencedWorkflowsItemsType",
    "WebhookDeploymentStatusCreatedPropWorkflowRunPropRepositoryType",
    "WebhookDeploymentStatusCreatedPropWorkflowRunPropRepositoryPropOwnerType",
    "WebhookDeploymentStatusCreatedPropWorkflowRunPropTriggeringActorType",
    "WebhookDeploymentStatusCreatedPropWorkflowRunType",
    "WebhookDiscussionAnsweredType",
    "WebhookDiscussionAnsweredPropAnswerType",
    "WebhookDiscussionAnsweredPropAnswerPropReactionsType",
    "WebhookDiscussionAnsweredPropAnswerPropUserType",
    "WebhookDiscussionCategoryChangedType",
    "WebhookDiscussionCategoryChangedPropChangesType",
    "WebhookDiscussionCategoryChangedPropChangesPropCategoryType",
    "WebhookDiscussionCategoryChangedPropChangesPropCategoryPropFromType",
    "WebhookDiscussionClosedType",
    "WebhookDiscussionCommentCreatedType",
    "WebhookDiscussionCommentCreatedPropCommentType",
    "WebhookDiscussionCommentCreatedPropCommentPropReactionsType",
    "WebhookDiscussionCommentCreatedPropCommentPropUserType",
    "WebhookDiscussionCommentDeletedType",
    "WebhookDiscussionCommentDeletedPropCommentType",
    "WebhookDiscussionCommentDeletedPropCommentPropReactionsType",
    "WebhookDiscussionCommentDeletedPropCommentPropUserType",
    "WebhookDiscussionCommentEditedType",
    "WebhookDiscussionCommentEditedPropChangesType",
    "WebhookDiscussionCommentEditedPropChangesPropBodyType",
    "WebhookDiscussionCommentEditedPropCommentType",
    "WebhookDiscussionCommentEditedPropCommentPropReactionsType",
    "WebhookDiscussionCommentEditedPropCommentPropUserType",
    "WebhookDiscussionCreatedType",
    "WebhookDiscussionCreatedPropDiscussionType",
    "WebhookDiscussionCreatedPropDiscussionAllof0Type",
    "WebhookDiscussionCreatedPropDiscussionAllof0PropAnswerChosenByType",
    "WebhookDiscussionCreatedPropDiscussionAllof0PropCategoryType",
    "WebhookDiscussionCreatedPropDiscussionAllof0PropReactionsType",
    "WebhookDiscussionCreatedPropDiscussionAllof0PropUserType",
    "WebhookDiscussionCreatedPropDiscussionAllof1Type",
    "WebhookDiscussionCreatedPropDiscussionAllof1PropCategoryType",
    "WebhookDiscussionCreatedPropDiscussionAllof1PropReactionsType",
    "WebhookDiscussionCreatedPropDiscussionAllof1PropUserType",
    "WebhookDiscussionCreatedPropDiscussionMergedCategoryType",
    "WebhookDiscussionCreatedPropDiscussionMergedReactionsType",
    "WebhookDiscussionCreatedPropDiscussionMergedUserType",
    "WebhookDiscussionDeletedType",
    "WebhookDiscussionEditedType",
    "WebhookDiscussionEditedPropChangesType",
    "WebhookDiscussionEditedPropChangesPropBodyType",
    "WebhookDiscussionEditedPropChangesPropTitleType",
    "WebhookDiscussionLabeledType",
    "WebhookDiscussionLabeledPropLabelType",
    "WebhookDiscussionLockedType",
    "WebhookDiscussionPinnedType",
    "WebhookDiscussionReopenedType",
    "WebhookDiscussionTransferredType",
    "WebhookDiscussionTransferredPropChangesType",
    "WebhookDiscussionUnansweredType",
    "WebhookDiscussionUnansweredPropOldAnswerType",
    "WebhookDiscussionUnansweredPropOldAnswerPropReactionsType",
    "WebhookDiscussionUnansweredPropOldAnswerPropUserType",
    "WebhookDiscussionUnlabeledType",
    "WebhookDiscussionUnlabeledPropLabelType",
    "WebhookDiscussionUnlockedType",
    "WebhookDiscussionUnpinnedType",
    "WebhookForkType",
    "WebhookForkPropForkeeType",
    "WebhookForkPropForkeeAllof0Type",
    "WebhookForkPropForkeeAllof0PropCustomPropertiesType",
    "WebhookForkPropForkeeAllof0PropLicenseType",
    "WebhookForkPropForkeeAllof0PropOwnerType",
    "WebhookForkPropForkeeAllof0PropPermissionsType",
    "WebhookForkPropForkeeAllof1Type",
    "WebhookForkPropForkeeAllof1PropLicenseType",
    "WebhookForkPropForkeeAllof1PropOwnerType",
    "WebhookForkPropForkeeMergedLicenseType",
    "WebhookForkPropForkeeMergedOwnerType",
    "WebhookGithubAppAuthorizationRevokedType",
    "WebhookGollumType",
    "WebhookGollumPropPagesItemsType",
    "WebhookInstallationCreatedType",
    "WebhookInstallationCreatedPropRepositoriesItemsType",
    "WebhookInstallationCreatedPropRequesterType",
    "WebhookInstallationDeletedType",
    "WebhookInstallationDeletedPropRepositoriesItemsType",
    "WebhookInstallationNewPermissionsAcceptedType",
    "WebhookInstallationNewPermissionsAcceptedPropRepositoriesItemsType",
    "WebhookInstallationRepositoriesAddedType",
    "WebhookInstallationRepositoriesAddedPropRepositoriesAddedItemsType",
    "WebhookInstallationRepositoriesAddedPropRepositoriesRemovedItemsType",
    "WebhookInstallationRepositoriesAddedPropRequesterType",
    "WebhookInstallationRepositoriesRemovedType",
    "WebhookInstallationRepositoriesRemovedPropRepositoriesAddedItemsType",
    "WebhookInstallationRepositoriesRemovedPropRepositoriesRemovedItemsType",
    "WebhookInstallationRepositoriesRemovedPropRequesterType",
    "WebhookInstallationSuspendType",
    "WebhookInstallationSuspendPropRepositoriesItemsType",
    "WebhookInstallationTargetRenamedType",
    "WebhookInstallationTargetRenamedPropAccountType",
    "WebhookInstallationTargetRenamedPropChangesType",
    "WebhookInstallationTargetRenamedPropChangesPropLoginType",
    "WebhookInstallationTargetRenamedPropChangesPropSlugType",
    "WebhookInstallationUnsuspendType",
    "WebhookInstallationUnsuspendPropRepositoriesItemsType",
    "WebhookIssueCommentCreatedType",
    "WebhookIssueCommentCreatedPropCommentType",
    "WebhookIssueCommentCreatedPropCommentPropReactionsType",
    "WebhookIssueCommentCreatedPropCommentPropUserType",
    "WebhookIssueCommentCreatedPropIssueType",
    "WebhookIssueCommentCreatedPropIssueAllof0Type",
    "WebhookIssueCommentCreatedPropIssueAllof0PropAssigneeType",
    "WebhookIssueCommentCreatedPropIssueAllof0PropAssigneesItemsType",
    "WebhookIssueCommentCreatedPropIssueAllof0PropLabelsItemsType",
    "WebhookIssueCommentCreatedPropIssueAllof0PropMilestonePropCreatorType",
    "WebhookIssueCommentCreatedPropIssueAllof0PropMilestoneType",
    "WebhookIssueCommentCreatedPropIssueAllof0PropPerformedViaGithubAppPropOwnerType",
    "WebhookIssueCommentCreatedPropIssueAllof0PropPerformedViaGithubAppPropPermissionsType",
    "WebhookIssueCommentCreatedPropIssueAllof0PropPerformedViaGithubAppType",
    "WebhookIssueCommentCreatedPropIssueAllof0PropPullRequestType",
    "WebhookIssueCommentCreatedPropIssueAllof0PropReactionsType",
    "WebhookIssueCommentCreatedPropIssueAllof0PropUserType",
    "WebhookIssueCommentCreatedPropIssueAllof1Type",
    "WebhookIssueCommentCreatedPropIssueAllof1PropAssigneeType",
    "WebhookIssueCommentCreatedPropIssueAllof1PropAssigneesItemsType",
    "WebhookIssueCommentCreatedPropIssueAllof1PropLabelsItemsType",
    "WebhookIssueCommentCreatedPropIssueAllof1PropMilestoneType",
    "WebhookIssueCommentCreatedPropIssueAllof1PropPerformedViaGithubAppType",
    "WebhookIssueCommentCreatedPropIssueAllof1PropReactionsType",
    "WebhookIssueCommentCreatedPropIssueAllof1PropUserType",
    "WebhookIssueCommentCreatedPropIssueMergedAssigneesType",
    "WebhookIssueCommentCreatedPropIssueMergedMilestoneType",
    "WebhookIssueCommentCreatedPropIssueMergedPerformedViaGithubAppType",
    "WebhookIssueCommentCreatedPropIssueMergedReactionsType",
    "WebhookIssueCommentCreatedPropIssueMergedUserType",
    "WebhookIssueCommentDeletedType",
    "WebhookIssueCommentDeletedPropCommentType",
    "WebhookIssueCommentDeletedPropCommentPropReactionsType",
    "WebhookIssueCommentDeletedPropCommentPropUserType",
    "WebhookIssueCommentDeletedPropIssueType",
    "WebhookIssueCommentDeletedPropIssueAllof0Type",
    "WebhookIssueCommentDeletedPropIssueAllof0PropAssigneeType",
    "WebhookIssueCommentDeletedPropIssueAllof0PropAssigneesItemsType",
    "WebhookIssueCommentDeletedPropIssueAllof0PropLabelsItemsType",
    "WebhookIssueCommentDeletedPropIssueAllof0PropMilestonePropCreatorType",
    "WebhookIssueCommentDeletedPropIssueAllof0PropMilestoneType",
    "WebhookIssueCommentDeletedPropIssueAllof0PropPerformedViaGithubAppPropOwnerType",
    "WebhookIssueCommentDeletedPropIssueAllof0PropPerformedViaGithubAppPropPermissionsType",
    "WebhookIssueCommentDeletedPropIssueAllof0PropPerformedViaGithubAppType",
    "WebhookIssueCommentDeletedPropIssueAllof0PropPullRequestType",
    "WebhookIssueCommentDeletedPropIssueAllof0PropReactionsType",
    "WebhookIssueCommentDeletedPropIssueAllof0PropUserType",
    "WebhookIssueCommentDeletedPropIssueAllof1Type",
    "WebhookIssueCommentDeletedPropIssueAllof1PropAssigneeType",
    "WebhookIssueCommentDeletedPropIssueAllof1PropAssigneesItemsType",
    "WebhookIssueCommentDeletedPropIssueAllof1PropLabelsItemsType",
    "WebhookIssueCommentDeletedPropIssueAllof1PropMilestoneType",
    "WebhookIssueCommentDeletedPropIssueAllof1PropPerformedViaGithubAppType",
    "WebhookIssueCommentDeletedPropIssueAllof1PropReactionsType",
    "WebhookIssueCommentDeletedPropIssueAllof1PropUserType",
    "WebhookIssueCommentDeletedPropIssueMergedAssigneesType",
    "WebhookIssueCommentDeletedPropIssueMergedMilestoneType",
    "WebhookIssueCommentDeletedPropIssueMergedPerformedViaGithubAppType",
    "WebhookIssueCommentDeletedPropIssueMergedReactionsType",
    "WebhookIssueCommentDeletedPropIssueMergedUserType",
    "WebhookIssueCommentEditedType",
    "WebhookIssueCommentEditedPropChangesType",
    "WebhookIssueCommentEditedPropChangesPropBodyType",
    "WebhookIssueCommentEditedPropCommentType",
    "WebhookIssueCommentEditedPropCommentPropReactionsType",
    "WebhookIssueCommentEditedPropCommentPropUserType",
    "WebhookIssueCommentEditedPropIssueType",
    "WebhookIssueCommentEditedPropIssueAllof0Type",
    "WebhookIssueCommentEditedPropIssueAllof0PropAssigneeType",
    "WebhookIssueCommentEditedPropIssueAllof0PropAssigneesItemsType",
    "WebhookIssueCommentEditedPropIssueAllof0PropLabelsItemsType",
    "WebhookIssueCommentEditedPropIssueAllof0PropMilestonePropCreatorType",
    "WebhookIssueCommentEditedPropIssueAllof0PropMilestoneType",
    "WebhookIssueCommentEditedPropIssueAllof0PropPerformedViaGithubAppPropOwnerType",
    "WebhookIssueCommentEditedPropIssueAllof0PropPerformedViaGithubAppPropPermissionsType",
    "WebhookIssueCommentEditedPropIssueAllof0PropPerformedViaGithubAppType",
    "WebhookIssueCommentEditedPropIssueAllof0PropPullRequestType",
    "WebhookIssueCommentEditedPropIssueAllof0PropReactionsType",
    "WebhookIssueCommentEditedPropIssueAllof0PropUserType",
    "WebhookIssueCommentEditedPropIssueAllof1Type",
    "WebhookIssueCommentEditedPropIssueAllof1PropAssigneeType",
    "WebhookIssueCommentEditedPropIssueAllof1PropAssigneesItemsType",
    "WebhookIssueCommentEditedPropIssueAllof1PropLabelsItemsType",
    "WebhookIssueCommentEditedPropIssueAllof1PropMilestoneType",
    "WebhookIssueCommentEditedPropIssueAllof1PropPerformedViaGithubAppType",
    "WebhookIssueCommentEditedPropIssueAllof1PropReactionsType",
    "WebhookIssueCommentEditedPropIssueAllof1PropUserType",
    "WebhookIssueCommentEditedPropIssueMergedAssigneesType",
    "WebhookIssueCommentEditedPropIssueMergedMilestoneType",
    "WebhookIssueCommentEditedPropIssueMergedPerformedViaGithubAppType",
    "WebhookIssueCommentEditedPropIssueMergedReactionsType",
    "WebhookIssueCommentEditedPropIssueMergedUserType",
    "WebhookIssuesAssignedType",
    "WebhookIssuesAssignedPropAssigneeType",
    "WebhookIssuesAssignedPropIssueType",
    "WebhookIssuesAssignedPropIssuePropAssigneeType",
    "WebhookIssuesAssignedPropIssuePropAssigneesItemsType",
    "WebhookIssuesAssignedPropIssuePropLabelsItemsType",
    "WebhookIssuesAssignedPropIssuePropMilestonePropCreatorType",
    "WebhookIssuesAssignedPropIssuePropMilestoneType",
    "WebhookIssuesAssignedPropIssuePropPerformedViaGithubAppPropOwnerType",
    "WebhookIssuesAssignedPropIssuePropPerformedViaGithubAppPropPermissionsType",
    "WebhookIssuesAssignedPropIssuePropPerformedViaGithubAppType",
    "WebhookIssuesAssignedPropIssuePropPullRequestType",
    "WebhookIssuesAssignedPropIssuePropReactionsType",
    "WebhookIssuesAssignedPropIssuePropUserType",
    "WebhookIssuesClosedType",
    "WebhookIssuesClosedPropIssueType",
    "WebhookIssuesClosedPropIssueAllof0Type",
    "WebhookIssuesClosedPropIssueAllof0PropAssigneeType",
    "WebhookIssuesClosedPropIssueAllof0PropAssigneesItemsType",
    "WebhookIssuesClosedPropIssueAllof0PropLabelsItemsType",
    "WebhookIssuesClosedPropIssueAllof0PropMilestonePropCreatorType",
    "WebhookIssuesClosedPropIssueAllof0PropMilestoneType",
    "WebhookIssuesClosedPropIssueAllof0PropPerformedViaGithubAppPropOwnerType",
    "WebhookIssuesClosedPropIssueAllof0PropPerformedViaGithubAppPropPermissionsType",
    "WebhookIssuesClosedPropIssueAllof0PropPerformedViaGithubAppType",
    "WebhookIssuesClosedPropIssueAllof0PropPullRequestType",
    "WebhookIssuesClosedPropIssueAllof0PropReactionsType",
    "WebhookIssuesClosedPropIssueAllof0PropUserType",
    "WebhookIssuesClosedPropIssueAllof1Type",
    "WebhookIssuesClosedPropIssueAllof1PropAssigneeType",
    "WebhookIssuesClosedPropIssueAllof1PropAssigneesItemsType",
    "WebhookIssuesClosedPropIssueAllof1PropLabelsItemsType",
    "WebhookIssuesClosedPropIssueAllof1PropMilestoneType",
    "WebhookIssuesClosedPropIssueAllof1PropPerformedViaGithubAppType",
    "WebhookIssuesClosedPropIssueAllof1PropReactionsType",
    "WebhookIssuesClosedPropIssueAllof1PropUserType",
    "WebhookIssuesClosedPropIssueMergedAssigneeType",
    "WebhookIssuesClosedPropIssueMergedAssigneesType",
    "WebhookIssuesClosedPropIssueMergedLabelsType",
    "WebhookIssuesClosedPropIssueMergedMilestoneType",
    "WebhookIssuesClosedPropIssueMergedPerformedViaGithubAppType",
    "WebhookIssuesClosedPropIssueMergedReactionsType",
    "WebhookIssuesClosedPropIssueMergedUserType",
    "WebhookIssuesDeletedType",
    "WebhookIssuesDeletedPropIssueType",
    "WebhookIssuesDeletedPropIssuePropAssigneeType",
    "WebhookIssuesDeletedPropIssuePropAssigneesItemsType",
    "WebhookIssuesDeletedPropIssuePropLabelsItemsType",
    "WebhookIssuesDeletedPropIssuePropMilestonePropCreatorType",
    "WebhookIssuesDeletedPropIssuePropMilestoneType",
    "WebhookIssuesDeletedPropIssuePropPerformedViaGithubAppPropOwnerType",
    "WebhookIssuesDeletedPropIssuePropPerformedViaGithubAppPropPermissionsType",
    "WebhookIssuesDeletedPropIssuePropPerformedViaGithubAppType",
    "WebhookIssuesDeletedPropIssuePropPullRequestType",
    "WebhookIssuesDeletedPropIssuePropReactionsType",
    "WebhookIssuesDeletedPropIssuePropUserType",
    "WebhookIssuesDemilestonedType",
    "WebhookIssuesDemilestonedPropIssueType",
    "WebhookIssuesDemilestonedPropIssueAllof0Type",
    "WebhookIssuesDemilestonedPropIssueAllof0PropAssigneeType",
    "WebhookIssuesDemilestonedPropIssueAllof0PropAssigneesItemsType",
    "WebhookIssuesDemilestonedPropIssueAllof0PropLabelsItemsType",
    "WebhookIssuesDemilestonedPropIssueAllof0PropMilestonePropCreatorType",
    "WebhookIssuesDemilestonedPropIssueAllof0PropMilestoneType",
    "WebhookIssuesDemilestonedPropIssueAllof0PropPerformedViaGithubAppPropOwnerType",
    "WebhookIssuesDemilestonedPropIssueAllof0PropPerformedViaGithubAppPropPermissionsType",
    "WebhookIssuesDemilestonedPropIssueAllof0PropPerformedViaGithubAppType",
    "WebhookIssuesDemilestonedPropIssueAllof0PropPullRequestType",
    "WebhookIssuesDemilestonedPropIssueAllof0PropReactionsType",
    "WebhookIssuesDemilestonedPropIssueAllof0PropUserType",
    "WebhookIssuesDemilestonedPropIssueAllof1Type",
    "WebhookIssuesDemilestonedPropIssueAllof1PropAssigneeType",
    "WebhookIssuesDemilestonedPropIssueAllof1PropAssigneesItemsType",
    "WebhookIssuesDemilestonedPropIssueAllof1PropLabelsItemsType",
    "WebhookIssuesDemilestonedPropIssueAllof1PropMilestonePropCreatorType",
    "WebhookIssuesDemilestonedPropIssueAllof1PropMilestoneType",
    "WebhookIssuesDemilestonedPropIssueAllof1PropPerformedViaGithubAppType",
    "WebhookIssuesDemilestonedPropIssueAllof1PropReactionsType",
    "WebhookIssuesDemilestonedPropIssueAllof1PropUserType",
    "WebhookIssuesDemilestonedPropIssueMergedAssigneeType",
    "WebhookIssuesDemilestonedPropIssueMergedAssigneesType",
    "WebhookIssuesDemilestonedPropIssueMergedLabelsType",
    "WebhookIssuesDemilestonedPropIssueMergedPerformedViaGithubAppType",
    "WebhookIssuesDemilestonedPropIssueMergedReactionsType",
    "WebhookIssuesDemilestonedPropIssueMergedUserType",
    "WebhookIssuesDemilestonedPropMilestoneType",
    "WebhookIssuesDemilestonedPropMilestonePropCreatorType",
    "WebhookIssuesEditedType",
    "WebhookIssuesEditedPropChangesType",
    "WebhookIssuesEditedPropChangesPropBodyType",
    "WebhookIssuesEditedPropChangesPropTitleType",
    "WebhookIssuesEditedPropIssueType",
    "WebhookIssuesEditedPropIssuePropAssigneeType",
    "WebhookIssuesEditedPropIssuePropAssigneesItemsType",
    "WebhookIssuesEditedPropIssuePropLabelsItemsType",
    "WebhookIssuesEditedPropIssuePropMilestonePropCreatorType",
    "WebhookIssuesEditedPropIssuePropMilestoneType",
    "WebhookIssuesEditedPropIssuePropPerformedViaGithubAppPropOwnerType",
    "WebhookIssuesEditedPropIssuePropPerformedViaGithubAppPropPermissionsType",
    "WebhookIssuesEditedPropIssuePropPerformedViaGithubAppType",
    "WebhookIssuesEditedPropIssuePropPullRequestType",
    "WebhookIssuesEditedPropIssuePropReactionsType",
    "WebhookIssuesEditedPropIssuePropUserType",
    "WebhookIssuesEditedPropLabelType",
    "WebhookIssuesLabeledType",
    "WebhookIssuesLabeledPropIssueType",
    "WebhookIssuesLabeledPropIssuePropAssigneeType",
    "WebhookIssuesLabeledPropIssuePropAssigneesItemsType",
    "WebhookIssuesLabeledPropIssuePropLabelsItemsType",
    "WebhookIssuesLabeledPropIssuePropMilestonePropCreatorType",
    "WebhookIssuesLabeledPropIssuePropMilestoneType",
    "WebhookIssuesLabeledPropIssuePropPerformedViaGithubAppPropOwnerType",
    "WebhookIssuesLabeledPropIssuePropPerformedViaGithubAppPropPermissionsType",
    "WebhookIssuesLabeledPropIssuePropPerformedViaGithubAppType",
    "WebhookIssuesLabeledPropIssuePropPullRequestType",
    "WebhookIssuesLabeledPropIssuePropReactionsType",
    "WebhookIssuesLabeledPropIssuePropUserType",
    "WebhookIssuesLabeledPropLabelType",
    "WebhookIssuesLockedType",
    "WebhookIssuesLockedPropIssueType",
    "WebhookIssuesLockedPropIssueAllof0Type",
    "WebhookIssuesLockedPropIssueAllof0PropAssigneeType",
    "WebhookIssuesLockedPropIssueAllof0PropAssigneesItemsType",
    "WebhookIssuesLockedPropIssueAllof0PropLabelsItemsType",
    "WebhookIssuesLockedPropIssueAllof0PropMilestonePropCreatorType",
    "WebhookIssuesLockedPropIssueAllof0PropMilestoneType",
    "WebhookIssuesLockedPropIssueAllof0PropPerformedViaGithubAppPropOwnerType",
    "WebhookIssuesLockedPropIssueAllof0PropPerformedViaGithubAppPropPermissionsType",
    "WebhookIssuesLockedPropIssueAllof0PropPerformedViaGithubAppType",
    "WebhookIssuesLockedPropIssueAllof0PropPullRequestType",
    "WebhookIssuesLockedPropIssueAllof0PropReactionsType",
    "WebhookIssuesLockedPropIssueAllof0PropUserType",
    "WebhookIssuesLockedPropIssueAllof1Type",
    "WebhookIssuesLockedPropIssueAllof1PropAssigneeType",
    "WebhookIssuesLockedPropIssueAllof1PropAssigneesItemsType",
    "WebhookIssuesLockedPropIssueAllof1PropLabelsItemsType",
    "WebhookIssuesLockedPropIssueAllof1PropMilestoneType",
    "WebhookIssuesLockedPropIssueAllof1PropPerformedViaGithubAppType",
    "WebhookIssuesLockedPropIssueAllof1PropReactionsType",
    "WebhookIssuesLockedPropIssueAllof1PropUserType",
    "WebhookIssuesLockedPropIssueMergedAssigneeType",
    "WebhookIssuesLockedPropIssueMergedAssigneesType",
    "WebhookIssuesLockedPropIssueMergedLabelsType",
    "WebhookIssuesLockedPropIssueMergedMilestoneType",
    "WebhookIssuesLockedPropIssueMergedPerformedViaGithubAppType",
    "WebhookIssuesLockedPropIssueMergedReactionsType",
    "WebhookIssuesLockedPropIssueMergedUserType",
    "WebhookIssuesMilestonedType",
    "WebhookIssuesMilestonedPropIssueType",
    "WebhookIssuesMilestonedPropIssueAllof0Type",
    "WebhookIssuesMilestonedPropIssueAllof0PropAssigneeType",
    "WebhookIssuesMilestonedPropIssueAllof0PropAssigneesItemsType",
    "WebhookIssuesMilestonedPropIssueAllof0PropLabelsItemsType",
    "WebhookIssuesMilestonedPropIssueAllof0PropMilestonePropCreatorType",
    "WebhookIssuesMilestonedPropIssueAllof0PropMilestoneType",
    "WebhookIssuesMilestonedPropIssueAllof0PropPerformedViaGithubAppPropOwnerType",
    "WebhookIssuesMilestonedPropIssueAllof0PropPerformedViaGithubAppPropPermissionsType",
    "WebhookIssuesMilestonedPropIssueAllof0PropPerformedViaGithubAppType",
    "WebhookIssuesMilestonedPropIssueAllof0PropPullRequestType",
    "WebhookIssuesMilestonedPropIssueAllof0PropReactionsType",
    "WebhookIssuesMilestonedPropIssueAllof0PropUserType",
    "WebhookIssuesMilestonedPropIssueAllof1Type",
    "WebhookIssuesMilestonedPropIssueAllof1PropAssigneeType",
    "WebhookIssuesMilestonedPropIssueAllof1PropAssigneesItemsType",
    "WebhookIssuesMilestonedPropIssueAllof1PropLabelsItemsType",
    "WebhookIssuesMilestonedPropIssueAllof1PropMilestoneType",
    "WebhookIssuesMilestonedPropIssueAllof1PropMilestonePropCreatorType",
    "WebhookIssuesMilestonedPropIssueAllof1PropPerformedViaGithubAppType",
    "WebhookIssuesMilestonedPropIssueAllof1PropReactionsType",
    "WebhookIssuesMilestonedPropIssueAllof1PropUserType",
    "WebhookIssuesMilestonedPropIssueMergedAssigneeType",
    "WebhookIssuesMilestonedPropIssueMergedAssigneesType",
    "WebhookIssuesMilestonedPropIssueMergedLabelsType",
    "WebhookIssuesMilestonedPropIssueMergedPerformedViaGithubAppType",
    "WebhookIssuesMilestonedPropIssueMergedReactionsType",
    "WebhookIssuesMilestonedPropIssueMergedUserType",
    "WebhookIssuesMilestonedPropMilestoneType",
    "WebhookIssuesMilestonedPropMilestonePropCreatorType",
    "WebhookIssuesOpenedType",
    "WebhookIssuesOpenedPropChangesType",
    "WebhookIssuesOpenedPropChangesPropOldIssuePropAssigneeType",
    "WebhookIssuesOpenedPropChangesPropOldIssuePropAssigneesItemsType",
    "WebhookIssuesOpenedPropChangesPropOldIssuePropLabelsItemsType",
    "WebhookIssuesOpenedPropChangesPropOldIssuePropMilestonePropCreatorType",
    "WebhookIssuesOpenedPropChangesPropOldIssuePropMilestoneType",
    "WebhookIssuesOpenedPropChangesPropOldIssuePropPerformedViaGithubAppPropOwnerType",
    "WebhookIssuesOpenedPropChangesPropOldIssuePropPerformedViaGithubAppPropPermissionsType",
    "WebhookIssuesOpenedPropChangesPropOldIssuePropPerformedViaGithubAppType",
    "WebhookIssuesOpenedPropChangesPropOldIssuePropPullRequestType",
    "WebhookIssuesOpenedPropChangesPropOldIssuePropReactionsType",
    "WebhookIssuesOpenedPropChangesPropOldIssuePropUserType",
    "WebhookIssuesOpenedPropChangesPropOldIssueType",
    "WebhookIssuesOpenedPropChangesPropOldRepositoryType",
    "WebhookIssuesOpenedPropChangesPropOldRepositoryPropCustomPropertiesType",
    "WebhookIssuesOpenedPropChangesPropOldRepositoryPropLicenseType",
    "WebhookIssuesOpenedPropChangesPropOldRepositoryPropOwnerType",
    "WebhookIssuesOpenedPropChangesPropOldRepositoryPropPermissionsType",
    "WebhookIssuesOpenedPropIssueType",
    "WebhookIssuesOpenedPropIssuePropAssigneeType",
    "WebhookIssuesOpenedPropIssuePropAssigneesItemsType",
    "WebhookIssuesOpenedPropIssuePropLabelsItemsType",
    "WebhookIssuesOpenedPropIssuePropMilestonePropCreatorType",
    "WebhookIssuesOpenedPropIssuePropMilestoneType",
    "WebhookIssuesOpenedPropIssuePropPerformedViaGithubAppPropOwnerType",
    "WebhookIssuesOpenedPropIssuePropPerformedViaGithubAppPropPermissionsType",
    "WebhookIssuesOpenedPropIssuePropPerformedViaGithubAppType",
    "WebhookIssuesOpenedPropIssuePropPullRequestType",
    "WebhookIssuesOpenedPropIssuePropReactionsType",
    "WebhookIssuesOpenedPropIssuePropUserType",
    "WebhookIssuesPinnedType",
    "WebhookIssuesPinnedPropIssueType",
    "WebhookIssuesPinnedPropIssuePropAssigneeType",
    "WebhookIssuesPinnedPropIssuePropAssigneesItemsType",
    "WebhookIssuesPinnedPropIssuePropLabelsItemsType",
    "WebhookIssuesPinnedPropIssuePropMilestonePropCreatorType",
    "WebhookIssuesPinnedPropIssuePropMilestoneType",
    "WebhookIssuesPinnedPropIssuePropPerformedViaGithubAppPropOwnerType",
    "WebhookIssuesPinnedPropIssuePropPerformedViaGithubAppPropPermissionsType",
    "WebhookIssuesPinnedPropIssuePropPerformedViaGithubAppType",
    "WebhookIssuesPinnedPropIssuePropPullRequestType",
    "WebhookIssuesPinnedPropIssuePropReactionsType",
    "WebhookIssuesPinnedPropIssuePropUserType",
    "WebhookIssuesReopenedType",
    "WebhookIssuesReopenedPropIssueType",
    "WebhookIssuesReopenedPropIssueAllof0Type",
    "WebhookIssuesReopenedPropIssueAllof0PropAssigneeType",
    "WebhookIssuesReopenedPropIssueAllof0PropAssigneesItemsType",
    "WebhookIssuesReopenedPropIssueAllof0PropLabelsItemsType",
    "WebhookIssuesReopenedPropIssueAllof0PropMilestonePropCreatorType",
    "WebhookIssuesReopenedPropIssueAllof0PropMilestoneType",
    "WebhookIssuesReopenedPropIssueAllof0PropPerformedViaGithubAppPropOwnerType",
    "WebhookIssuesReopenedPropIssueAllof0PropPerformedViaGithubAppPropPermissionsType",
    "WebhookIssuesReopenedPropIssueAllof0PropPerformedViaGithubAppType",
    "WebhookIssuesReopenedPropIssueAllof0PropPullRequestType",
    "WebhookIssuesReopenedPropIssueAllof0PropReactionsType",
    "WebhookIssuesReopenedPropIssueAllof0PropUserType",
    "WebhookIssuesReopenedPropIssueAllof1Type",
    "WebhookIssuesReopenedPropIssueAllof1PropAssigneeType",
    "WebhookIssuesReopenedPropIssueAllof1PropAssigneesItemsType",
    "WebhookIssuesReopenedPropIssueAllof1PropLabelsItemsType",
    "WebhookIssuesReopenedPropIssueAllof1PropMilestoneType",
    "WebhookIssuesReopenedPropIssueAllof1PropPerformedViaGithubAppType",
    "WebhookIssuesReopenedPropIssueAllof1PropReactionsType",
    "WebhookIssuesReopenedPropIssueAllof1PropUserType",
    "WebhookIssuesReopenedPropIssueMergedAssigneeType",
    "WebhookIssuesReopenedPropIssueMergedAssigneesType",
    "WebhookIssuesReopenedPropIssueMergedLabelsType",
    "WebhookIssuesReopenedPropIssueMergedMilestoneType",
    "WebhookIssuesReopenedPropIssueMergedPerformedViaGithubAppType",
    "WebhookIssuesReopenedPropIssueMergedReactionsType",
    "WebhookIssuesReopenedPropIssueMergedUserType",
    "WebhookIssuesTransferredType",
    "WebhookIssuesTransferredPropChangesType",
    "WebhookIssuesTransferredPropChangesPropNewIssueType",
    "WebhookIssuesTransferredPropChangesPropNewIssuePropAssigneeType",
    "WebhookIssuesTransferredPropChangesPropNewIssuePropAssigneesItemsType",
    "WebhookIssuesTransferredPropChangesPropNewIssuePropLabelsItemsType",
    "WebhookIssuesTransferredPropChangesPropNewIssuePropMilestonePropCreatorType",
    "WebhookIssuesTransferredPropChangesPropNewIssuePropMilestoneType",
    "WebhookIssuesTransferredPropChangesPropNewIssuePropPerformedViaGithubAppPropOwnerType",
    "WebhookIssuesTransferredPropChangesPropNewIssuePropPerformedViaGithubAppPropPermissionsType",
    "WebhookIssuesTransferredPropChangesPropNewIssuePropPerformedViaGithubAppType",
    "WebhookIssuesTransferredPropChangesPropNewIssuePropPullRequestType",
    "WebhookIssuesTransferredPropChangesPropNewIssuePropReactionsType",
    "WebhookIssuesTransferredPropChangesPropNewIssuePropUserType",
    "WebhookIssuesTransferredPropChangesPropNewRepositoryType",
    "WebhookIssuesTransferredPropChangesPropNewRepositoryPropCustomPropertiesType",
    "WebhookIssuesTransferredPropChangesPropNewRepositoryPropLicenseType",
    "WebhookIssuesTransferredPropChangesPropNewRepositoryPropOwnerType",
    "WebhookIssuesTransferredPropChangesPropNewRepositoryPropPermissionsType",
    "WebhookIssuesTransferredPropIssueType",
    "WebhookIssuesTransferredPropIssuePropAssigneeType",
    "WebhookIssuesTransferredPropIssuePropAssigneesItemsType",
    "WebhookIssuesTransferredPropIssuePropLabelsItemsType",
    "WebhookIssuesTransferredPropIssuePropMilestonePropCreatorType",
    "WebhookIssuesTransferredPropIssuePropMilestoneType",
    "WebhookIssuesTransferredPropIssuePropPerformedViaGithubAppPropOwnerType",
    "WebhookIssuesTransferredPropIssuePropPerformedViaGithubAppPropPermissionsType",
    "WebhookIssuesTransferredPropIssuePropPerformedViaGithubAppType",
    "WebhookIssuesTransferredPropIssuePropPullRequestType",
    "WebhookIssuesTransferredPropIssuePropReactionsType",
    "WebhookIssuesTransferredPropIssuePropUserType",
    "WebhookIssuesUnassignedType",
    "WebhookIssuesUnassignedPropAssigneeType",
    "WebhookIssuesUnassignedPropIssueType",
    "WebhookIssuesUnassignedPropIssuePropAssigneeType",
    "WebhookIssuesUnassignedPropIssuePropAssigneesItemsType",
    "WebhookIssuesUnassignedPropIssuePropLabelsItemsType",
    "WebhookIssuesUnassignedPropIssuePropMilestonePropCreatorType",
    "WebhookIssuesUnassignedPropIssuePropMilestoneType",
    "WebhookIssuesUnassignedPropIssuePropPerformedViaGithubAppPropOwnerType",
    "WebhookIssuesUnassignedPropIssuePropPerformedViaGithubAppPropPermissionsType",
    "WebhookIssuesUnassignedPropIssuePropPerformedViaGithubAppType",
    "WebhookIssuesUnassignedPropIssuePropPullRequestType",
    "WebhookIssuesUnassignedPropIssuePropReactionsType",
    "WebhookIssuesUnassignedPropIssuePropUserType",
    "WebhookIssuesUnlabeledType",
    "WebhookIssuesUnlabeledPropIssueType",
    "WebhookIssuesUnlabeledPropIssuePropAssigneeType",
    "WebhookIssuesUnlabeledPropIssuePropAssigneesItemsType",
    "WebhookIssuesUnlabeledPropIssuePropLabelsItemsType",
    "WebhookIssuesUnlabeledPropIssuePropMilestonePropCreatorType",
    "WebhookIssuesUnlabeledPropIssuePropMilestoneType",
    "WebhookIssuesUnlabeledPropIssuePropPerformedViaGithubAppPropOwnerType",
    "WebhookIssuesUnlabeledPropIssuePropPerformedViaGithubAppPropPermissionsType",
    "WebhookIssuesUnlabeledPropIssuePropPerformedViaGithubAppType",
    "WebhookIssuesUnlabeledPropIssuePropPullRequestType",
    "WebhookIssuesUnlabeledPropIssuePropReactionsType",
    "WebhookIssuesUnlabeledPropIssuePropUserType",
    "WebhookIssuesUnlabeledPropLabelType",
    "WebhookIssuesUnlockedType",
    "WebhookIssuesUnlockedPropIssueType",
    "WebhookIssuesUnlockedPropIssueAllof0Type",
    "WebhookIssuesUnlockedPropIssueAllof0PropAssigneeType",
    "WebhookIssuesUnlockedPropIssueAllof0PropAssigneesItemsType",
    "WebhookIssuesUnlockedPropIssueAllof0PropLabelsItemsType",
    "WebhookIssuesUnlockedPropIssueAllof0PropMilestonePropCreatorType",
    "WebhookIssuesUnlockedPropIssueAllof0PropMilestoneType",
    "WebhookIssuesUnlockedPropIssueAllof0PropPerformedViaGithubAppPropOwnerType",
    "WebhookIssuesUnlockedPropIssueAllof0PropPerformedViaGithubAppPropPermissionsType",
    "WebhookIssuesUnlockedPropIssueAllof0PropPerformedViaGithubAppType",
    "WebhookIssuesUnlockedPropIssueAllof0PropPullRequestType",
    "WebhookIssuesUnlockedPropIssueAllof0PropReactionsType",
    "WebhookIssuesUnlockedPropIssueAllof0PropUserType",
    "WebhookIssuesUnlockedPropIssueAllof1Type",
    "WebhookIssuesUnlockedPropIssueAllof1PropAssigneeType",
    "WebhookIssuesUnlockedPropIssueAllof1PropAssigneesItemsType",
    "WebhookIssuesUnlockedPropIssueAllof1PropLabelsItemsType",
    "WebhookIssuesUnlockedPropIssueAllof1PropMilestoneType",
    "WebhookIssuesUnlockedPropIssueAllof1PropReactionsType",
    "WebhookIssuesUnlockedPropIssueAllof1PropUserType",
    "WebhookIssuesUnlockedPropIssueMergedAssigneeType",
    "WebhookIssuesUnlockedPropIssueMergedAssigneesType",
    "WebhookIssuesUnlockedPropIssueMergedLabelsType",
    "WebhookIssuesUnlockedPropIssueMergedMilestoneType",
    "WebhookIssuesUnlockedPropIssueMergedReactionsType",
    "WebhookIssuesUnlockedPropIssueMergedUserType",
    "WebhookIssuesUnpinnedType",
    "WebhookIssuesUnpinnedPropIssueType",
    "WebhookIssuesUnpinnedPropIssuePropAssigneeType",
    "WebhookIssuesUnpinnedPropIssuePropAssigneesItemsType",
    "WebhookIssuesUnpinnedPropIssuePropLabelsItemsType",
    "WebhookIssuesUnpinnedPropIssuePropMilestonePropCreatorType",
    "WebhookIssuesUnpinnedPropIssuePropMilestoneType",
    "WebhookIssuesUnpinnedPropIssuePropPerformedViaGithubAppPropOwnerType",
    "WebhookIssuesUnpinnedPropIssuePropPerformedViaGithubAppPropPermissionsType",
    "WebhookIssuesUnpinnedPropIssuePropPerformedViaGithubAppType",
    "WebhookIssuesUnpinnedPropIssuePropPullRequestType",
    "WebhookIssuesUnpinnedPropIssuePropReactionsType",
    "WebhookIssuesUnpinnedPropIssuePropUserType",
    "WebhookLabelCreatedType",
    "WebhookLabelCreatedPropLabelType",
    "WebhookLabelDeletedType",
    "WebhookLabelDeletedPropLabelType",
    "WebhookLabelEditedType",
    "WebhookLabelEditedPropChangesType",
    "WebhookLabelEditedPropChangesPropColorType",
    "WebhookLabelEditedPropChangesPropDescriptionType",
    "WebhookLabelEditedPropChangesPropNameType",
    "WebhookLabelEditedPropLabelType",
    "WebhookMarketplacePurchaseCancelledType",
    "WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseType",
    "WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof0Type",
    "WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof0PropAccountType",
    "WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof0PropPlanType",
    "WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof1Type",
    "WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof1PropAccountType",
    "WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseAllof1PropPlanType",
    "WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseMergedAccountType",
    "WebhookMarketplacePurchaseCancelledPropMarketplacePurchaseMergedPlanType",
    "WebhookMarketplacePurchaseCancelledPropPreviousMarketplacePurchaseType",
    "WebhookMarketplacePurchaseCancelledPropPreviousMarketplacePurchasePropAccountType",
    "WebhookMarketplacePurchaseCancelledPropPreviousMarketplacePurchasePropPlanType",
    "WebhookMarketplacePurchaseChangedType",
    "WebhookMarketplacePurchaseChangedPropMarketplacePurchaseType",
    "WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof0Type",
    "WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof0PropAccountType",
    "WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof0PropPlanType",
    "WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof1Type",
    "WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof1PropAccountType",
    "WebhookMarketplacePurchaseChangedPropMarketplacePurchaseAllof1PropPlanType",
    "WebhookMarketplacePurchaseChangedPropMarketplacePurchaseMergedAccountType",
    "WebhookMarketplacePurchaseChangedPropMarketplacePurchaseMergedPlanType",
    "WebhookMarketplacePurchaseChangedPropPreviousMarketplacePurchaseType",
    "WebhookMarketplacePurchaseChangedPropPreviousMarketplacePurchasePropAccountType",
    "WebhookMarketplacePurchaseChangedPropPreviousMarketplacePurchasePropPlanType",
    "WebhookMarketplacePurchasePendingChangeType",
    "WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseType",
    "WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof0Type",
    "WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof0PropAccountType",
    "WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof0PropPlanType",
    "WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof1Type",
    "WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof1PropAccountType",
    "WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseAllof1PropPlanType",
    "WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseMergedAccountType",
    "WebhookMarketplacePurchasePendingChangePropMarketplacePurchaseMergedPlanType",
    "WebhookMarketplacePurchasePendingChangePropPreviousMarketplacePurchaseType",
    "WebhookMarketplacePurchasePendingChangePropPreviousMarketplacePurchasePropAccountType",
    "WebhookMarketplacePurchasePendingChangePropPreviousMarketplacePurchasePropPlanType",
    "WebhookMarketplacePurchasePendingChangeCancelledType",
    "WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchaseType",
    "WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchaseAllof0Type",
    "WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchaseAllof0PropAccountType",
    "WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchaseAllof0PropPlanType",
    "WebhookMarketplacePurchasePendingChangeCancelledPropMarketplacePurchaseAllof1Type",
    "WebhookMarketplacePurchasePendingChangeCancelledPropPreviousMarketplacePurchaseType",
    "WebhookMarketplacePurchasePendingChangeCancelledPropPreviousMarketplacePurchasePropAccountType",
    "WebhookMarketplacePurchasePendingChangeCancelledPropPreviousMarketplacePurchasePropPlanType",
    "WebhookMarketplacePurchasePurchasedType",
    "WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseType",
    "WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof0Type",
    "WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof0PropAccountType",
    "WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof0PropPlanType",
    "WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof1Type",
    "WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof1PropAccountType",
    "WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseAllof1PropPlanType",
    "WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseMergedAccountType",
    "WebhookMarketplacePurchasePurchasedPropMarketplacePurchaseMergedPlanType",
    "WebhookMarketplacePurchasePurchasedPropPreviousMarketplacePurchaseType",
    "WebhookMarketplacePurchasePurchasedPropPreviousMarketplacePurchasePropAccountType",
    "WebhookMarketplacePurchasePurchasedPropPreviousMarketplacePurchasePropPlanType",
    "WebhookMemberAddedType",
    "WebhookMemberAddedPropChangesType",
    "WebhookMemberAddedPropChangesPropPermissionType",
    "WebhookMemberAddedPropMemberType",
    "WebhookMemberEditedType",
    "WebhookMemberEditedPropChangesType",
    "WebhookMemberEditedPropChangesPropOldPermissionType",
    "WebhookMemberEditedPropChangesPropPermissionType",
    "WebhookMemberEditedPropMemberType",
    "WebhookMemberRemovedType",
    "WebhookMemberRemovedPropMemberType",
    "WebhookMembershipAddedType",
    "WebhookMembershipAddedPropMemberType",
    "WebhookMembershipAddedPropSenderType",
    "WebhookMembershipAddedPropTeamType",
    "WebhookMembershipAddedPropTeamPropParentType",
    "WebhookMembershipRemovedType",
    "WebhookMembershipRemovedPropMemberType",
    "WebhookMembershipRemovedPropSenderType",
    "WebhookMembershipRemovedPropTeamType",
    "WebhookMembershipRemovedPropTeamPropParentType",
    "WebhookMergeGroupChecksRequestedType",
    "WebhookMergeGroupDestroyedType",
    "WebhookMetaDeletedType",
    "WebhookMetaDeletedPropHookType",
    "WebhookMetaDeletedPropHookPropConfigType",
    "WebhookMilestoneClosedType",
    "WebhookMilestoneClosedPropMilestoneType",
    "WebhookMilestoneClosedPropMilestonePropCreatorType",
    "WebhookMilestoneCreatedType",
    "WebhookMilestoneCreatedPropMilestoneType",
    "WebhookMilestoneCreatedPropMilestonePropCreatorType",
    "WebhookMilestoneDeletedType",
    "WebhookMilestoneDeletedPropMilestoneType",
    "WebhookMilestoneDeletedPropMilestonePropCreatorType",
    "WebhookMilestoneEditedType",
    "WebhookMilestoneEditedPropChangesType",
    "WebhookMilestoneEditedPropChangesPropDescriptionType",
    "WebhookMilestoneEditedPropChangesPropDueOnType",
    "WebhookMilestoneEditedPropChangesPropTitleType",
    "WebhookMilestoneEditedPropMilestoneType",
    "WebhookMilestoneEditedPropMilestonePropCreatorType",
    "WebhookMilestoneOpenedType",
    "WebhookMilestoneOpenedPropMilestoneType",
    "WebhookMilestoneOpenedPropMilestonePropCreatorType",
    "WebhookOrgBlockBlockedType",
    "WebhookOrgBlockBlockedPropBlockedUserType",
    "WebhookOrgBlockUnblockedType",
    "WebhookOrgBlockUnblockedPropBlockedUserType",
    "WebhookOrganizationDeletedType",
    "WebhookOrganizationDeletedPropMembershipType",
    "WebhookOrganizationDeletedPropMembershipPropUserType",
    "WebhookOrganizationMemberAddedType",
    "WebhookOrganizationMemberAddedPropMembershipType",
    "WebhookOrganizationMemberAddedPropMembershipPropUserType",
    "WebhookOrganizationMemberInvitedType",
    "WebhookOrganizationMemberInvitedPropInvitationType",
    "WebhookOrganizationMemberInvitedPropInvitationPropInviterType",
    "WebhookOrganizationMemberInvitedPropUserType",
    "WebhookOrganizationMemberRemovedType",
    "WebhookOrganizationMemberRemovedPropMembershipType",
    "WebhookOrganizationMemberRemovedPropMembershipPropUserType",
    "WebhookOrganizationRenamedType",
    "WebhookOrganizationRenamedPropChangesType",
    "WebhookOrganizationRenamedPropChangesPropLoginType",
    "WebhookOrganizationRenamedPropMembershipType",
    "WebhookOrganizationRenamedPropMembershipPropUserType",
    "WebhookRubygemsMetadataType",
    "WebhookRubygemsMetadataPropVersionInfoType",
    "WebhookRubygemsMetadataPropMetadataType",
    "WebhookRubygemsMetadataPropDependenciesItemsType",
    "WebhookPackagePublishedType",
    "WebhookPackagePublishedPropPackageType",
    "WebhookPackagePublishedPropPackagePropOwnerType",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropAuthorType",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropBodyOneof1Type",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropContainerMetadataPropLabelsType",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropContainerMetadataPropManifestType",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropContainerMetadataPropTagType",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropContainerMetadataType",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropDockerMetadataItemsType",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropMetadataItemsType",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropAuthorType",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropBugsType",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropDependenciesType",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropDevDependenciesType",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropPeerDependenciesType",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropOptionalDependenciesType",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropDistType",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropRepositoryType",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropScriptsType",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropMaintainersItemsType",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropContributorsItemsType",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropEnginesType",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropBinType",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropManType",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataPropDirectoriesType",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropNpmMetadataType",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropNugetMetadataItemsType",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropNugetMetadataItemsPropValueOneof3Type",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropPackageFilesItemsType",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropReleaseType",
    "WebhookPackagePublishedPropPackagePropPackageVersionPropReleasePropAuthorType",
    "WebhookPackagePublishedPropPackagePropPackageVersionType",
    "WebhookPackagePublishedPropPackagePropRegistryType",
    "WebhookPackageUpdatedType",
    "WebhookPackageUpdatedPropPackageType",
    "WebhookPackageUpdatedPropPackagePropOwnerType",
    "WebhookPackageUpdatedPropPackagePropPackageVersionType",
    "WebhookPackageUpdatedPropPackagePropPackageVersionPropAuthorType",
    "WebhookPackageUpdatedPropPackagePropPackageVersionPropDockerMetadataItemsType",
    "WebhookPackageUpdatedPropPackagePropPackageVersionPropMetadataItemsType",
    "WebhookPackageUpdatedPropPackagePropPackageVersionPropPackageFilesItemsType",
    "WebhookPackageUpdatedPropPackagePropPackageVersionPropReleaseType",
    "WebhookPackageUpdatedPropPackagePropPackageVersionPropReleasePropAuthorType",
    "WebhookPackageUpdatedPropPackagePropRegistryType",
    "WebhookPageBuildType",
    "WebhookPageBuildPropBuildType",
    "WebhookPageBuildPropBuildPropErrorType",
    "WebhookPageBuildPropBuildPropPusherType",
    "WebhookPersonalAccessTokenRequestApprovedType",
    "WebhookPersonalAccessTokenRequestCancelledType",
    "WebhookPersonalAccessTokenRequestCreatedType",
    "WebhookPersonalAccessTokenRequestDeniedType",
    "WebhookPingType",
    "WebhookPingPropHookType",
    "WebhookPingPropHookPropConfigType",
    "WebhookPingFormEncodedType",
    "WebhookProjectCardConvertedType",
    "WebhookProjectCardConvertedPropChangesType",
    "WebhookProjectCardConvertedPropChangesPropNoteType",
    "WebhookProjectCardConvertedPropProjectCardType",
    "WebhookProjectCardConvertedPropProjectCardPropCreatorType",
    "WebhookProjectCardCreatedType",
    "WebhookProjectCardCreatedPropProjectCardType",
    "WebhookProjectCardCreatedPropProjectCardPropCreatorType",
    "WebhookProjectCardDeletedType",
    "WebhookProjectCardDeletedPropProjectCardType",
    "WebhookProjectCardDeletedPropProjectCardPropCreatorType",
    "WebhookProjectCardEditedType",
    "WebhookProjectCardEditedPropChangesType",
    "WebhookProjectCardEditedPropChangesPropNoteType",
    "WebhookProjectCardEditedPropProjectCardType",
    "WebhookProjectCardEditedPropProjectCardPropCreatorType",
    "WebhookProjectCardMovedType",
    "WebhookProjectCardMovedPropChangesType",
    "WebhookProjectCardMovedPropChangesPropColumnIdType",
    "WebhookProjectCardMovedPropProjectCardType",
    "WebhookProjectCardMovedPropProjectCardAllof0Type",
    "WebhookProjectCardMovedPropProjectCardAllof0PropCreatorType",
    "WebhookProjectCardMovedPropProjectCardAllof1Type",
    "WebhookProjectCardMovedPropProjectCardAllof1PropCreatorType",
    "WebhookProjectCardMovedPropProjectCardMergedCreatorType",
    "WebhookProjectClosedType",
    "WebhookProjectClosedPropProjectType",
    "WebhookProjectClosedPropProjectPropCreatorType",
    "WebhookProjectColumnCreatedType",
    "WebhookProjectColumnCreatedPropProjectColumnType",
    "WebhookProjectColumnDeletedType",
    "WebhookProjectColumnDeletedPropProjectColumnType",
    "WebhookProjectColumnEditedType",
    "WebhookProjectColumnEditedPropChangesType",
    "WebhookProjectColumnEditedPropChangesPropNameType",
    "WebhookProjectColumnEditedPropProjectColumnType",
    "WebhookProjectColumnMovedType",
    "WebhookProjectColumnMovedPropProjectColumnType",
    "WebhookProjectCreatedType",
    "WebhookProjectCreatedPropProjectType",
    "WebhookProjectCreatedPropProjectPropCreatorType",
    "WebhookProjectDeletedType",
    "WebhookProjectDeletedPropProjectType",
    "WebhookProjectDeletedPropProjectPropCreatorType",
    "WebhookProjectEditedType",
    "WebhookProjectEditedPropChangesType",
    "WebhookProjectEditedPropChangesPropBodyType",
    "WebhookProjectEditedPropChangesPropNameType",
    "WebhookProjectEditedPropProjectType",
    "WebhookProjectEditedPropProjectPropCreatorType",
    "WebhookProjectReopenedType",
    "WebhookProjectReopenedPropProjectType",
    "WebhookProjectReopenedPropProjectPropCreatorType",
    "WebhookProjectsV2ProjectClosedType",
    "WebhookProjectsV2ProjectCreatedType",
    "WebhookProjectsV2ProjectDeletedType",
    "WebhookProjectsV2ProjectEditedType",
    "WebhookProjectsV2ProjectEditedPropChangesType",
    "WebhookProjectsV2ProjectEditedPropChangesPropDescriptionType",
    "WebhookProjectsV2ProjectEditedPropChangesPropPublicType",
    "WebhookProjectsV2ProjectEditedPropChangesPropShortDescriptionType",
    "WebhookProjectsV2ProjectEditedPropChangesPropTitleType",
    "WebhookProjectsV2ItemArchivedType",
    "WebhookProjectsV2ItemArchivedPropChangesType",
    "WebhookProjectsV2ItemArchivedPropChangesPropArchivedAtType",
    "WebhookProjectsV2ItemConvertedType",
    "WebhookProjectsV2ItemConvertedPropChangesType",
    "WebhookProjectsV2ItemConvertedPropChangesPropContentTypeType",
    "WebhookProjectsV2ItemCreatedType",
    "WebhookProjectsV2ItemDeletedType",
    "WebhookProjectsV2ItemEditedType",
    "WebhookProjectsV2ItemEditedPropChangesOneof0Type",
    "WebhookProjectsV2ItemEditedPropChangesOneof0PropFieldValueType",
    "WebhookProjectsV2ItemEditedPropChangesOneof1Type",
    "WebhookProjectsV2ItemEditedPropChangesOneof1PropBodyType",
    "WebhookProjectsV2ItemReorderedType",
    "WebhookProjectsV2ItemReorderedPropChangesType",
    "WebhookProjectsV2ItemReorderedPropChangesPropPreviousProjectsV2ItemNodeIdType",
    "WebhookProjectsV2ItemRestoredType",
    "WebhookProjectsV2ItemRestoredPropChangesType",
    "WebhookProjectsV2ItemRestoredPropChangesPropArchivedAtType",
    "WebhookProjectsV2ProjectReopenedType",
    "WebhookPublicType",
    "WebhookPullRequestAssignedType",
    "WebhookPullRequestAssignedPropAssigneeType",
    "WebhookPullRequestAssignedPropPullRequestType",
    "WebhookPullRequestAssignedPropPullRequestPropLinksType",
    "WebhookPullRequestAssignedPropPullRequestPropLinksPropCommentsType",
    "WebhookPullRequestAssignedPropPullRequestPropLinksPropCommitsType",
    "WebhookPullRequestAssignedPropPullRequestPropLinksPropHtmlType",
    "WebhookPullRequestAssignedPropPullRequestPropLinksPropIssueType",
    "WebhookPullRequestAssignedPropPullRequestPropLinksPropReviewCommentType",
    "WebhookPullRequestAssignedPropPullRequestPropLinksPropReviewCommentsType",
    "WebhookPullRequestAssignedPropPullRequestPropLinksPropSelfType",
    "WebhookPullRequestAssignedPropPullRequestPropLinksPropStatusesType",
    "WebhookPullRequestAssignedPropPullRequestPropAssigneeType",
    "WebhookPullRequestAssignedPropPullRequestPropAssigneesItemsType",
    "WebhookPullRequestAssignedPropPullRequestPropAutoMergePropEnabledByType",
    "WebhookPullRequestAssignedPropPullRequestPropAutoMergeType",
    "WebhookPullRequestAssignedPropPullRequestPropBaseType",
    "WebhookPullRequestAssignedPropPullRequestPropBasePropRepoType",
    "WebhookPullRequestAssignedPropPullRequestPropBasePropRepoPropLicenseType",
    "WebhookPullRequestAssignedPropPullRequestPropBasePropRepoPropOwnerType",
    "WebhookPullRequestAssignedPropPullRequestPropBasePropRepoPropPermissionsType",
    "WebhookPullRequestAssignedPropPullRequestPropBasePropUserType",
    "WebhookPullRequestAssignedPropPullRequestPropHeadType",
    "WebhookPullRequestAssignedPropPullRequestPropHeadPropRepoPropLicenseType",
    "WebhookPullRequestAssignedPropPullRequestPropHeadPropRepoPropOwnerType",
    "WebhookPullRequestAssignedPropPullRequestPropHeadPropRepoPropPermissionsType",
    "WebhookPullRequestAssignedPropPullRequestPropHeadPropRepoType",
    "WebhookPullRequestAssignedPropPullRequestPropHeadPropUserType",
    "WebhookPullRequestAssignedPropPullRequestPropLabelsItemsType",
    "WebhookPullRequestAssignedPropPullRequestPropMergedByType",
    "WebhookPullRequestAssignedPropPullRequestPropMilestonePropCreatorType",
    "WebhookPullRequestAssignedPropPullRequestPropMilestoneType",
    "WebhookPullRequestAssignedPropPullRequestPropRequestedReviewersItemsOneof0Type",
    "WebhookPullRequestAssignedPropPullRequestPropRequestedReviewersItemsOneof1Type",
    "WebhookPullRequestAssignedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType",
    "WebhookPullRequestAssignedPropPullRequestPropRequestedTeamsItemsType",
    "WebhookPullRequestAssignedPropPullRequestPropRequestedTeamsItemsPropParentType",
    "WebhookPullRequestAssignedPropPullRequestPropUserType",
    "WebhookPullRequestAutoMergeDisabledType",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestType",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksType",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropCommentsType",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropCommitsType",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropHtmlType",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropIssueType",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropReviewCommentType",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropReviewCommentsType",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropSelfType",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropLinksPropStatusesType",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropAssigneeType",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropAssigneesItemsType",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropAutoMergePropEnabledByType",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropAutoMergeType",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropBaseType",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropBasePropRepoType",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropBasePropRepoPropLicenseType",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropBasePropRepoPropOwnerType",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropBasePropRepoPropPermissionsType",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropBasePropUserType",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropHeadType",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropHeadPropRepoType",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropHeadPropRepoPropLicenseType",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropHeadPropRepoPropOwnerType",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropHeadPropRepoPropPermissionsType",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropHeadPropUserType",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropLabelsItemsType",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropMergedByType",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropMilestonePropCreatorType",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropMilestoneType",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropRequestedReviewersItemsOneof0Type",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropRequestedReviewersItemsOneof1Type",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropRequestedReviewersItemsOneof1PropParentType",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropRequestedTeamsItemsType",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropRequestedTeamsItemsPropParentType",
    "WebhookPullRequestAutoMergeDisabledPropPullRequestPropUserType",
    "WebhookPullRequestAutoMergeEnabledType",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestType",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksType",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropCommentsType",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropCommitsType",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropHtmlType",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropIssueType",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropReviewCommentType",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropReviewCommentsType",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropSelfType",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropLinksPropStatusesType",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropAssigneeType",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropAssigneesItemsType",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropAutoMergePropEnabledByType",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropAutoMergeType",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropBaseType",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropBasePropRepoType",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropBasePropRepoPropLicenseType",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropBasePropRepoPropOwnerType",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropBasePropRepoPropPermissionsType",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropBasePropUserType",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropHeadType",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropHeadPropRepoType",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropHeadPropRepoPropLicenseType",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropHeadPropRepoPropOwnerType",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropHeadPropRepoPropPermissionsType",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropHeadPropUserType",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropLabelsItemsType",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropMergedByType",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropMilestonePropCreatorType",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropMilestoneType",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropRequestedReviewersItemsOneof0Type",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropRequestedReviewersItemsOneof1Type",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropRequestedReviewersItemsOneof1PropParentType",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropRequestedTeamsItemsType",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropRequestedTeamsItemsPropParentType",
    "WebhookPullRequestAutoMergeEnabledPropPullRequestPropUserType",
    "WebhookPullRequestClosedType",
    "WebhookPullRequestClosedPropPullRequestType",
    "WebhookPullRequestClosedPropPullRequestAllof1Type",
    "WebhookPullRequestConvertedToDraftType",
    "WebhookPullRequestConvertedToDraftPropPullRequestType",
    "WebhookPullRequestConvertedToDraftPropPullRequestAllof1Type",
    "WebhookPullRequestDemilestonedType",
    "WebhookPullRequestDemilestonedPropPullRequestType",
    "WebhookPullRequestDemilestonedPropPullRequestPropLinksType",
    "WebhookPullRequestDemilestonedPropPullRequestPropLinksPropCommentsType",
    "WebhookPullRequestDemilestonedPropPullRequestPropLinksPropCommitsType",
    "WebhookPullRequestDemilestonedPropPullRequestPropLinksPropHtmlType",
    "WebhookPullRequestDemilestonedPropPullRequestPropLinksPropIssueType",
    "WebhookPullRequestDemilestonedPropPullRequestPropLinksPropReviewCommentType",
    "WebhookPullRequestDemilestonedPropPullRequestPropLinksPropReviewCommentsType",
    "WebhookPullRequestDemilestonedPropPullRequestPropLinksPropSelfType",
    "WebhookPullRequestDemilestonedPropPullRequestPropLinksPropStatusesType",
    "WebhookPullRequestDemilestonedPropPullRequestPropAssigneeType",
    "WebhookPullRequestDemilestonedPropPullRequestPropAssigneesItemsType",
    "WebhookPullRequestDemilestonedPropPullRequestPropAutoMergePropEnabledByType",
    "WebhookPullRequestDemilestonedPropPullRequestPropAutoMergeType",
    "WebhookPullRequestDemilestonedPropPullRequestPropBaseType",
    "WebhookPullRequestDemilestonedPropPullRequestPropBasePropRepoType",
    "WebhookPullRequestDemilestonedPropPullRequestPropBasePropRepoPropLicenseType",
    "WebhookPullRequestDemilestonedPropPullRequestPropBasePropRepoPropOwnerType",
    "WebhookPullRequestDemilestonedPropPullRequestPropBasePropRepoPropPermissionsType",
    "WebhookPullRequestDemilestonedPropPullRequestPropBasePropUserType",
    "WebhookPullRequestDemilestonedPropPullRequestPropHeadType",
    "WebhookPullRequestDemilestonedPropPullRequestPropHeadPropRepoType",
    "WebhookPullRequestDemilestonedPropPullRequestPropHeadPropRepoPropLicenseType",
    "WebhookPullRequestDemilestonedPropPullRequestPropHeadPropRepoPropOwnerType",
    "WebhookPullRequestDemilestonedPropPullRequestPropHeadPropRepoPropPermissionsType",
    "WebhookPullRequestDemilestonedPropPullRequestPropHeadPropUserType",
    "WebhookPullRequestDemilestonedPropPullRequestPropLabelsItemsType",
    "WebhookPullRequestDemilestonedPropPullRequestPropMergedByType",
    "WebhookPullRequestDemilestonedPropPullRequestPropMilestonePropCreatorType",
    "WebhookPullRequestDemilestonedPropPullRequestPropMilestoneType",
    "WebhookPullRequestDemilestonedPropPullRequestPropRequestedReviewersItemsOneof0Type",
    "WebhookPullRequestDemilestonedPropPullRequestPropRequestedReviewersItemsOneof1Type",
    "WebhookPullRequestDemilestonedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType",
    "WebhookPullRequestDemilestonedPropPullRequestPropRequestedTeamsItemsType",
    "WebhookPullRequestDemilestonedPropPullRequestPropRequestedTeamsItemsPropParentType",
    "WebhookPullRequestDemilestonedPropPullRequestPropUserType",
    "WebhookPullRequestDequeuedType",
    "WebhookPullRequestDequeuedPropPullRequestType",
    "WebhookPullRequestDequeuedPropPullRequestPropLinksType",
    "WebhookPullRequestDequeuedPropPullRequestPropLinksPropCommentsType",
    "WebhookPullRequestDequeuedPropPullRequestPropLinksPropCommitsType",
    "WebhookPullRequestDequeuedPropPullRequestPropLinksPropHtmlType",
    "WebhookPullRequestDequeuedPropPullRequestPropLinksPropIssueType",
    "WebhookPullRequestDequeuedPropPullRequestPropLinksPropReviewCommentType",
    "WebhookPullRequestDequeuedPropPullRequestPropLinksPropReviewCommentsType",
    "WebhookPullRequestDequeuedPropPullRequestPropLinksPropSelfType",
    "WebhookPullRequestDequeuedPropPullRequestPropLinksPropStatusesType",
    "WebhookPullRequestDequeuedPropPullRequestPropAssigneeType",
    "WebhookPullRequestDequeuedPropPullRequestPropAssigneesItemsType",
    "WebhookPullRequestDequeuedPropPullRequestPropAutoMergePropEnabledByType",
    "WebhookPullRequestDequeuedPropPullRequestPropAutoMergeType",
    "WebhookPullRequestDequeuedPropPullRequestPropBaseType",
    "WebhookPullRequestDequeuedPropPullRequestPropBasePropRepoType",
    "WebhookPullRequestDequeuedPropPullRequestPropBasePropRepoPropLicenseType",
    "WebhookPullRequestDequeuedPropPullRequestPropBasePropRepoPropOwnerType",
    "WebhookPullRequestDequeuedPropPullRequestPropBasePropRepoPropPermissionsType",
    "WebhookPullRequestDequeuedPropPullRequestPropBasePropUserType",
    "WebhookPullRequestDequeuedPropPullRequestPropHeadType",
    "WebhookPullRequestDequeuedPropPullRequestPropHeadPropRepoType",
    "WebhookPullRequestDequeuedPropPullRequestPropHeadPropRepoPropLicenseType",
    "WebhookPullRequestDequeuedPropPullRequestPropHeadPropRepoPropOwnerType",
    "WebhookPullRequestDequeuedPropPullRequestPropHeadPropRepoPropPermissionsType",
    "WebhookPullRequestDequeuedPropPullRequestPropHeadPropUserType",
    "WebhookPullRequestDequeuedPropPullRequestPropLabelsItemsType",
    "WebhookPullRequestDequeuedPropPullRequestPropMergedByType",
    "WebhookPullRequestDequeuedPropPullRequestPropMilestonePropCreatorType",
    "WebhookPullRequestDequeuedPropPullRequestPropMilestoneType",
    "WebhookPullRequestDequeuedPropPullRequestPropRequestedReviewersItemsOneof0Type",
    "WebhookPullRequestDequeuedPropPullRequestPropRequestedReviewersItemsOneof1Type",
    "WebhookPullRequestDequeuedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType",
    "WebhookPullRequestDequeuedPropPullRequestPropRequestedTeamsItemsType",
    "WebhookPullRequestDequeuedPropPullRequestPropRequestedTeamsItemsPropParentType",
    "WebhookPullRequestDequeuedPropPullRequestPropUserType",
    "WebhookPullRequestEditedType",
    "WebhookPullRequestEditedPropChangesType",
    "WebhookPullRequestEditedPropChangesPropBaseType",
    "WebhookPullRequestEditedPropChangesPropBasePropRefType",
    "WebhookPullRequestEditedPropChangesPropBasePropShaType",
    "WebhookPullRequestEditedPropChangesPropBodyType",
    "WebhookPullRequestEditedPropChangesPropTitleType",
    "WebhookPullRequestEditedPropPullRequestType",
    "WebhookPullRequestEditedPropPullRequestAllof1Type",
    "WebhookPullRequestEnqueuedType",
    "WebhookPullRequestEnqueuedPropPullRequestType",
    "WebhookPullRequestEnqueuedPropPullRequestPropLinksType",
    "WebhookPullRequestEnqueuedPropPullRequestPropLinksPropCommentsType",
    "WebhookPullRequestEnqueuedPropPullRequestPropLinksPropCommitsType",
    "WebhookPullRequestEnqueuedPropPullRequestPropLinksPropHtmlType",
    "WebhookPullRequestEnqueuedPropPullRequestPropLinksPropIssueType",
    "WebhookPullRequestEnqueuedPropPullRequestPropLinksPropReviewCommentType",
    "WebhookPullRequestEnqueuedPropPullRequestPropLinksPropReviewCommentsType",
    "WebhookPullRequestEnqueuedPropPullRequestPropLinksPropSelfType",
    "WebhookPullRequestEnqueuedPropPullRequestPropLinksPropStatusesType",
    "WebhookPullRequestEnqueuedPropPullRequestPropAssigneeType",
    "WebhookPullRequestEnqueuedPropPullRequestPropAssigneesItemsType",
    "WebhookPullRequestEnqueuedPropPullRequestPropAutoMergePropEnabledByType",
    "WebhookPullRequestEnqueuedPropPullRequestPropAutoMergeType",
    "WebhookPullRequestEnqueuedPropPullRequestPropBaseType",
    "WebhookPullRequestEnqueuedPropPullRequestPropBasePropRepoType",
    "WebhookPullRequestEnqueuedPropPullRequestPropBasePropRepoPropLicenseType",
    "WebhookPullRequestEnqueuedPropPullRequestPropBasePropRepoPropOwnerType",
    "WebhookPullRequestEnqueuedPropPullRequestPropBasePropRepoPropPermissionsType",
    "WebhookPullRequestEnqueuedPropPullRequestPropBasePropUserType",
    "WebhookPullRequestEnqueuedPropPullRequestPropHeadType",
    "WebhookPullRequestEnqueuedPropPullRequestPropHeadPropRepoType",
    "WebhookPullRequestEnqueuedPropPullRequestPropHeadPropRepoPropLicenseType",
    "WebhookPullRequestEnqueuedPropPullRequestPropHeadPropRepoPropOwnerType",
    "WebhookPullRequestEnqueuedPropPullRequestPropHeadPropRepoPropPermissionsType",
    "WebhookPullRequestEnqueuedPropPullRequestPropHeadPropUserType",
    "WebhookPullRequestEnqueuedPropPullRequestPropLabelsItemsType",
    "WebhookPullRequestEnqueuedPropPullRequestPropMergedByType",
    "WebhookPullRequestEnqueuedPropPullRequestPropMilestonePropCreatorType",
    "WebhookPullRequestEnqueuedPropPullRequestPropMilestoneType",
    "WebhookPullRequestEnqueuedPropPullRequestPropRequestedReviewersItemsOneof0Type",
    "WebhookPullRequestEnqueuedPropPullRequestPropRequestedReviewersItemsOneof1Type",
    "WebhookPullRequestEnqueuedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType",
    "WebhookPullRequestEnqueuedPropPullRequestPropRequestedTeamsItemsType",
    "WebhookPullRequestEnqueuedPropPullRequestPropRequestedTeamsItemsPropParentType",
    "WebhookPullRequestEnqueuedPropPullRequestPropUserType",
    "WebhookPullRequestLabeledType",
    "WebhookPullRequestLabeledPropLabelType",
    "WebhookPullRequestLabeledPropPullRequestType",
    "WebhookPullRequestLabeledPropPullRequestPropLinksType",
    "WebhookPullRequestLabeledPropPullRequestPropLinksPropCommentsType",
    "WebhookPullRequestLabeledPropPullRequestPropLinksPropCommitsType",
    "WebhookPullRequestLabeledPropPullRequestPropLinksPropHtmlType",
    "WebhookPullRequestLabeledPropPullRequestPropLinksPropIssueType",
    "WebhookPullRequestLabeledPropPullRequestPropLinksPropReviewCommentType",
    "WebhookPullRequestLabeledPropPullRequestPropLinksPropReviewCommentsType",
    "WebhookPullRequestLabeledPropPullRequestPropLinksPropSelfType",
    "WebhookPullRequestLabeledPropPullRequestPropLinksPropStatusesType",
    "WebhookPullRequestLabeledPropPullRequestPropAssigneeType",
    "WebhookPullRequestLabeledPropPullRequestPropAssigneesItemsType",
    "WebhookPullRequestLabeledPropPullRequestPropAutoMergePropEnabledByType",
    "WebhookPullRequestLabeledPropPullRequestPropAutoMergeType",
    "WebhookPullRequestLabeledPropPullRequestPropBaseType",
    "WebhookPullRequestLabeledPropPullRequestPropBasePropRepoType",
    "WebhookPullRequestLabeledPropPullRequestPropBasePropRepoPropLicenseType",
    "WebhookPullRequestLabeledPropPullRequestPropBasePropRepoPropOwnerType",
    "WebhookPullRequestLabeledPropPullRequestPropBasePropRepoPropPermissionsType",
    "WebhookPullRequestLabeledPropPullRequestPropBasePropUserType",
    "WebhookPullRequestLabeledPropPullRequestPropHeadType",
    "WebhookPullRequestLabeledPropPullRequestPropHeadPropRepoPropLicenseType",
    "WebhookPullRequestLabeledPropPullRequestPropHeadPropRepoPropOwnerType",
    "WebhookPullRequestLabeledPropPullRequestPropHeadPropRepoPropPermissionsType",
    "WebhookPullRequestLabeledPropPullRequestPropHeadPropRepoType",
    "WebhookPullRequestLabeledPropPullRequestPropHeadPropUserType",
    "WebhookPullRequestLabeledPropPullRequestPropLabelsItemsType",
    "WebhookPullRequestLabeledPropPullRequestPropMergedByType",
    "WebhookPullRequestLabeledPropPullRequestPropMilestonePropCreatorType",
    "WebhookPullRequestLabeledPropPullRequestPropMilestoneType",
    "WebhookPullRequestLabeledPropPullRequestPropRequestedReviewersItemsOneof0Type",
    "WebhookPullRequestLabeledPropPullRequestPropRequestedReviewersItemsOneof1Type",
    "WebhookPullRequestLabeledPropPullRequestPropRequestedReviewersItemsOneof1PropParentType",
    "WebhookPullRequestLabeledPropPullRequestPropRequestedTeamsItemsType",
    "WebhookPullRequestLabeledPropPullRequestPropRequestedTeamsItemsPropParentType",
    "WebhookPullRequestLabeledPropPullRequestPropUserType",
    "WebhookPullRequestLockedType",
    "WebhookPullRequestLockedPropPullRequestType",
    "WebhookPullRequestLockedPropPullRequestPropLinksType",
    "WebhookPullRequestLockedPropPullRequestPropLinksPropCommentsType",
    "WebhookPullRequestLockedPropPullRequestPropLinksPropCommitsType",
    "WebhookPullRequestLockedPropPullRequestPropLinksPropHtmlType",
    "WebhookPullRequestLockedPropPullRequestPropLinksPropIssueType",
    "WebhookPullRequestLockedPropPullRequestPropLinksPropReviewCommentType",
    "WebhookPullRequestLockedPropPullRequestPropLinksPropReviewCommentsType",
    "WebhookPullRequestLockedPropPullRequestPropLinksPropSelfType",
    "WebhookPullRequestLockedPropPullRequestPropLinksPropStatusesType",
    "WebhookPullRequestLockedPropPullRequestPropAssigneeType",
    "WebhookPullRequestLockedPropPullRequestPropAssigneesItemsType",
    "WebhookPullRequestLockedPropPullRequestPropAutoMergePropEnabledByType",
    "WebhookPullRequestLockedPropPullRequestPropAutoMergeType",
    "WebhookPullRequestLockedPropPullRequestPropBaseType",
    "WebhookPullRequestLockedPropPullRequestPropBasePropRepoType",
    "WebhookPullRequestLockedPropPullRequestPropBasePropRepoPropLicenseType",
    "WebhookPullRequestLockedPropPullRequestPropBasePropRepoPropOwnerType",
    "WebhookPullRequestLockedPropPullRequestPropBasePropRepoPropPermissionsType",
    "WebhookPullRequestLockedPropPullRequestPropBasePropUserType",
    "WebhookPullRequestLockedPropPullRequestPropHeadType",
    "WebhookPullRequestLockedPropPullRequestPropHeadPropRepoPropLicenseType",
    "WebhookPullRequestLockedPropPullRequestPropHeadPropRepoPropOwnerType",
    "WebhookPullRequestLockedPropPullRequestPropHeadPropRepoPropPermissionsType",
    "WebhookPullRequestLockedPropPullRequestPropHeadPropRepoType",
    "WebhookPullRequestLockedPropPullRequestPropHeadPropUserType",
    "WebhookPullRequestLockedPropPullRequestPropLabelsItemsType",
    "WebhookPullRequestLockedPropPullRequestPropMergedByType",
    "WebhookPullRequestLockedPropPullRequestPropMilestonePropCreatorType",
    "WebhookPullRequestLockedPropPullRequestPropMilestoneType",
    "WebhookPullRequestLockedPropPullRequestPropRequestedReviewersItemsOneof0Type",
    "WebhookPullRequestLockedPropPullRequestPropRequestedReviewersItemsOneof1Type",
    "WebhookPullRequestLockedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType",
    "WebhookPullRequestLockedPropPullRequestPropRequestedTeamsItemsType",
    "WebhookPullRequestLockedPropPullRequestPropRequestedTeamsItemsPropParentType",
    "WebhookPullRequestLockedPropPullRequestPropUserType",
    "WebhookPullRequestMilestonedType",
    "WebhookPullRequestMilestonedPropPullRequestType",
    "WebhookPullRequestMilestonedPropPullRequestPropLinksType",
    "WebhookPullRequestMilestonedPropPullRequestPropLinksPropCommentsType",
    "WebhookPullRequestMilestonedPropPullRequestPropLinksPropCommitsType",
    "WebhookPullRequestMilestonedPropPullRequestPropLinksPropHtmlType",
    "WebhookPullRequestMilestonedPropPullRequestPropLinksPropIssueType",
    "WebhookPullRequestMilestonedPropPullRequestPropLinksPropReviewCommentType",
    "WebhookPullRequestMilestonedPropPullRequestPropLinksPropReviewCommentsType",
    "WebhookPullRequestMilestonedPropPullRequestPropLinksPropSelfType",
    "WebhookPullRequestMilestonedPropPullRequestPropLinksPropStatusesType",
    "WebhookPullRequestMilestonedPropPullRequestPropAssigneeType",
    "WebhookPullRequestMilestonedPropPullRequestPropAssigneesItemsType",
    "WebhookPullRequestMilestonedPropPullRequestPropAutoMergePropEnabledByType",
    "WebhookPullRequestMilestonedPropPullRequestPropAutoMergeType",
    "WebhookPullRequestMilestonedPropPullRequestPropBaseType",
    "WebhookPullRequestMilestonedPropPullRequestPropBasePropRepoType",
    "WebhookPullRequestMilestonedPropPullRequestPropBasePropRepoPropLicenseType",
    "WebhookPullRequestMilestonedPropPullRequestPropBasePropRepoPropOwnerType",
    "WebhookPullRequestMilestonedPropPullRequestPropBasePropRepoPropPermissionsType",
    "WebhookPullRequestMilestonedPropPullRequestPropBasePropUserType",
    "WebhookPullRequestMilestonedPropPullRequestPropHeadType",
    "WebhookPullRequestMilestonedPropPullRequestPropHeadPropRepoType",
    "WebhookPullRequestMilestonedPropPullRequestPropHeadPropRepoPropLicenseType",
    "WebhookPullRequestMilestonedPropPullRequestPropHeadPropRepoPropOwnerType",
    "WebhookPullRequestMilestonedPropPullRequestPropHeadPropRepoPropPermissionsType",
    "WebhookPullRequestMilestonedPropPullRequestPropHeadPropUserType",
    "WebhookPullRequestMilestonedPropPullRequestPropLabelsItemsType",
    "WebhookPullRequestMilestonedPropPullRequestPropMergedByType",
    "WebhookPullRequestMilestonedPropPullRequestPropMilestonePropCreatorType",
    "WebhookPullRequestMilestonedPropPullRequestPropMilestoneType",
    "WebhookPullRequestMilestonedPropPullRequestPropRequestedReviewersItemsOneof0Type",
    "WebhookPullRequestMilestonedPropPullRequestPropRequestedReviewersItemsOneof1Type",
    "WebhookPullRequestMilestonedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType",
    "WebhookPullRequestMilestonedPropPullRequestPropRequestedTeamsItemsType",
    "WebhookPullRequestMilestonedPropPullRequestPropRequestedTeamsItemsPropParentType",
    "WebhookPullRequestMilestonedPropPullRequestPropUserType",
    "WebhookPullRequestOpenedType",
    "WebhookPullRequestOpenedPropPullRequestType",
    "WebhookPullRequestOpenedPropPullRequestAllof1Type",
    "WebhookPullRequestReadyForReviewType",
    "WebhookPullRequestReadyForReviewPropPullRequestType",
    "WebhookPullRequestReadyForReviewPropPullRequestAllof1Type",
    "WebhookPullRequestReopenedType",
    "WebhookPullRequestReopenedPropPullRequestType",
    "WebhookPullRequestReopenedPropPullRequestAllof1Type",
    "WebhookPullRequestReviewCommentCreatedType",
    "WebhookPullRequestReviewCommentCreatedPropCommentType",
    "WebhookPullRequestReviewCommentCreatedPropCommentPropLinksType",
    "WebhookPullRequestReviewCommentCreatedPropCommentPropLinksPropHtmlType",
    "WebhookPullRequestReviewCommentCreatedPropCommentPropLinksPropPullRequestType",
    "WebhookPullRequestReviewCommentCreatedPropCommentPropLinksPropSelfType",
    "WebhookPullRequestReviewCommentCreatedPropCommentPropReactionsType",
    "WebhookPullRequestReviewCommentCreatedPropCommentPropUserType",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestType",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksType",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropCommentsType",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropCommitsType",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropHtmlType",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropIssueType",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropReviewCommentType",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropReviewCommentsType",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropSelfType",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropLinksPropStatusesType",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropAssigneeType",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropAssigneesItemsType",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropAutoMergePropEnabledByType",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropAutoMergeType",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropBaseType",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropBasePropRepoType",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropBasePropRepoPropLicenseType",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropBasePropRepoPropOwnerType",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropBasePropRepoPropPermissionsType",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropBasePropUserType",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropHeadType",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropHeadPropRepoPropLicenseType",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropHeadPropRepoPropOwnerType",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropHeadPropRepoPropPermissionsType",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropHeadPropRepoType",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropHeadPropUserType",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropLabelsItemsType",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropMilestonePropCreatorType",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropMilestoneType",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropRequestedReviewersItemsOneof0Type",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropRequestedReviewersItemsOneof1Type",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropRequestedTeamsItemsType",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropRequestedTeamsItemsPropParentType",
    "WebhookPullRequestReviewCommentCreatedPropPullRequestPropUserType",
    "WebhookPullRequestReviewCommentDeletedType",
    "WebhookPullRequestReviewCommentDeletedPropCommentType",
    "WebhookPullRequestReviewCommentDeletedPropCommentPropLinksType",
    "WebhookPullRequestReviewCommentDeletedPropCommentPropLinksPropHtmlType",
    "WebhookPullRequestReviewCommentDeletedPropCommentPropLinksPropPullRequestType",
    "WebhookPullRequestReviewCommentDeletedPropCommentPropLinksPropSelfType",
    "WebhookPullRequestReviewCommentDeletedPropCommentPropReactionsType",
    "WebhookPullRequestReviewCommentDeletedPropCommentPropUserType",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestType",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksType",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropCommentsType",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropCommitsType",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropHtmlType",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropIssueType",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropReviewCommentType",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropReviewCommentsType",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropSelfType",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropLinksPropStatusesType",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropAssigneeType",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropAssigneesItemsType",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropAutoMergePropEnabledByType",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropAutoMergeType",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropBaseType",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropBasePropRepoType",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropBasePropRepoPropLicenseType",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropBasePropRepoPropOwnerType",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropBasePropRepoPropPermissionsType",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropBasePropUserType",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropHeadType",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropHeadPropRepoPropLicenseType",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropHeadPropRepoPropOwnerType",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropHeadPropRepoPropPermissionsType",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropHeadPropRepoType",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropHeadPropUserType",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropLabelsItemsType",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropMilestonePropCreatorType",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropMilestoneType",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropRequestedReviewersItemsOneof0Type",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropRequestedReviewersItemsOneof1Type",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropRequestedTeamsItemsType",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropRequestedTeamsItemsPropParentType",
    "WebhookPullRequestReviewCommentDeletedPropPullRequestPropUserType",
    "WebhookPullRequestReviewCommentEditedType",
    "WebhookPullRequestReviewCommentEditedPropChangesType",
    "WebhookPullRequestReviewCommentEditedPropChangesPropBodyType",
    "WebhookPullRequestReviewCommentEditedPropCommentType",
    "WebhookPullRequestReviewCommentEditedPropCommentPropLinksType",
    "WebhookPullRequestReviewCommentEditedPropCommentPropLinksPropHtmlType",
    "WebhookPullRequestReviewCommentEditedPropCommentPropLinksPropPullRequestType",
    "WebhookPullRequestReviewCommentEditedPropCommentPropLinksPropSelfType",
    "WebhookPullRequestReviewCommentEditedPropCommentPropReactionsType",
    "WebhookPullRequestReviewCommentEditedPropCommentPropUserType",
    "WebhookPullRequestReviewCommentEditedPropPullRequestType",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksType",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropCommentsType",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropCommitsType",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropHtmlType",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropIssueType",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropReviewCommentType",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropReviewCommentsType",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropSelfType",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropLinksPropStatusesType",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropAssigneeType",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropAssigneesItemsType",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropAutoMergePropEnabledByType",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropAutoMergeType",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropBaseType",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropBasePropRepoType",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropBasePropRepoPropLicenseType",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropBasePropRepoPropOwnerType",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropBasePropRepoPropPermissionsType",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropBasePropUserType",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropHeadType",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropHeadPropRepoPropLicenseType",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropHeadPropRepoPropOwnerType",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropHeadPropRepoPropPermissionsType",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropHeadPropRepoType",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropHeadPropUserType",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropLabelsItemsType",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropMilestonePropCreatorType",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropMilestoneType",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropRequestedReviewersItemsOneof0Type",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropRequestedReviewersItemsOneof1Type",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropRequestedTeamsItemsType",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropRequestedTeamsItemsPropParentType",
    "WebhookPullRequestReviewCommentEditedPropPullRequestPropUserType",
    "WebhookPullRequestReviewDismissedType",
    "WebhookPullRequestReviewDismissedPropPullRequestType",
    "WebhookPullRequestReviewDismissedPropPullRequestPropLinksType",
    "WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropCommentsType",
    "WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropCommitsType",
    "WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropHtmlType",
    "WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropIssueType",
    "WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropReviewCommentType",
    "WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropReviewCommentsType",
    "WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropSelfType",
    "WebhookPullRequestReviewDismissedPropPullRequestPropLinksPropStatusesType",
    "WebhookPullRequestReviewDismissedPropPullRequestPropAssigneeType",
    "WebhookPullRequestReviewDismissedPropPullRequestPropAssigneesItemsType",
    "WebhookPullRequestReviewDismissedPropPullRequestPropAutoMergePropEnabledByType",
    "WebhookPullRequestReviewDismissedPropPullRequestPropAutoMergeType",
    "WebhookPullRequestReviewDismissedPropPullRequestPropBaseType",
    "WebhookPullRequestReviewDismissedPropPullRequestPropBasePropRepoType",
    "WebhookPullRequestReviewDismissedPropPullRequestPropBasePropRepoPropLicenseType",
    "WebhookPullRequestReviewDismissedPropPullRequestPropBasePropRepoPropOwnerType",
    "WebhookPullRequestReviewDismissedPropPullRequestPropBasePropRepoPropPermissionsType",
    "WebhookPullRequestReviewDismissedPropPullRequestPropBasePropUserType",
    "WebhookPullRequestReviewDismissedPropPullRequestPropHeadType",
    "WebhookPullRequestReviewDismissedPropPullRequestPropHeadPropRepoPropLicenseType",
    "WebhookPullRequestReviewDismissedPropPullRequestPropHeadPropRepoPropOwnerType",
    "WebhookPullRequestReviewDismissedPropPullRequestPropHeadPropRepoPropPermissionsType",
    "WebhookPullRequestReviewDismissedPropPullRequestPropHeadPropRepoType",
    "WebhookPullRequestReviewDismissedPropPullRequestPropHeadPropUserType",
    "WebhookPullRequestReviewDismissedPropPullRequestPropLabelsItemsType",
    "WebhookPullRequestReviewDismissedPropPullRequestPropMilestonePropCreatorType",
    "WebhookPullRequestReviewDismissedPropPullRequestPropMilestoneType",
    "WebhookPullRequestReviewDismissedPropPullRequestPropRequestedReviewersItemsOneof0Type",
    "WebhookPullRequestReviewDismissedPropPullRequestPropRequestedReviewersItemsOneof1Type",
    "WebhookPullRequestReviewDismissedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType",
    "WebhookPullRequestReviewDismissedPropPullRequestPropRequestedTeamsItemsType",
    "WebhookPullRequestReviewDismissedPropPullRequestPropRequestedTeamsItemsPropParentType",
    "WebhookPullRequestReviewDismissedPropPullRequestPropUserType",
    "WebhookPullRequestReviewDismissedPropReviewType",
    "WebhookPullRequestReviewDismissedPropReviewPropLinksType",
    "WebhookPullRequestReviewDismissedPropReviewPropLinksPropHtmlType",
    "WebhookPullRequestReviewDismissedPropReviewPropLinksPropPullRequestType",
    "WebhookPullRequestReviewDismissedPropReviewPropUserType",
    "WebhookPullRequestReviewEditedType",
    "WebhookPullRequestReviewEditedPropChangesType",
    "WebhookPullRequestReviewEditedPropChangesPropBodyType",
    "WebhookPullRequestReviewEditedPropPullRequestType",
    "WebhookPullRequestReviewEditedPropPullRequestPropLinksType",
    "WebhookPullRequestReviewEditedPropPullRequestPropLinksPropCommentsType",
    "WebhookPullRequestReviewEditedPropPullRequestPropLinksPropCommitsType",
    "WebhookPullRequestReviewEditedPropPullRequestPropLinksPropHtmlType",
    "WebhookPullRequestReviewEditedPropPullRequestPropLinksPropIssueType",
    "WebhookPullRequestReviewEditedPropPullRequestPropLinksPropReviewCommentType",
    "WebhookPullRequestReviewEditedPropPullRequestPropLinksPropReviewCommentsType",
    "WebhookPullRequestReviewEditedPropPullRequestPropLinksPropSelfType",
    "WebhookPullRequestReviewEditedPropPullRequestPropLinksPropStatusesType",
    "WebhookPullRequestReviewEditedPropPullRequestPropAssigneeType",
    "WebhookPullRequestReviewEditedPropPullRequestPropAssigneesItemsType",
    "WebhookPullRequestReviewEditedPropPullRequestPropAutoMergePropEnabledByType",
    "WebhookPullRequestReviewEditedPropPullRequestPropAutoMergeType",
    "WebhookPullRequestReviewEditedPropPullRequestPropBaseType",
    "WebhookPullRequestReviewEditedPropPullRequestPropBasePropRepoType",
    "WebhookPullRequestReviewEditedPropPullRequestPropBasePropRepoPropLicenseType",
    "WebhookPullRequestReviewEditedPropPullRequestPropBasePropRepoPropOwnerType",
    "WebhookPullRequestReviewEditedPropPullRequestPropBasePropRepoPropPermissionsType",
    "WebhookPullRequestReviewEditedPropPullRequestPropBasePropUserType",
    "WebhookPullRequestReviewEditedPropPullRequestPropHeadType",
    "WebhookPullRequestReviewEditedPropPullRequestPropHeadPropRepoPropLicenseType",
    "WebhookPullRequestReviewEditedPropPullRequestPropHeadPropRepoPropOwnerType",
    "WebhookPullRequestReviewEditedPropPullRequestPropHeadPropRepoPropPermissionsType",
    "WebhookPullRequestReviewEditedPropPullRequestPropHeadPropRepoType",
    "WebhookPullRequestReviewEditedPropPullRequestPropHeadPropUserType",
    "WebhookPullRequestReviewEditedPropPullRequestPropLabelsItemsType",
    "WebhookPullRequestReviewEditedPropPullRequestPropMilestonePropCreatorType",
    "WebhookPullRequestReviewEditedPropPullRequestPropMilestoneType",
    "WebhookPullRequestReviewEditedPropPullRequestPropRequestedReviewersItemsOneof0Type",
    "WebhookPullRequestReviewEditedPropPullRequestPropRequestedReviewersItemsOneof1Type",
    "WebhookPullRequestReviewEditedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType",
    "WebhookPullRequestReviewEditedPropPullRequestPropRequestedTeamsItemsType",
    "WebhookPullRequestReviewEditedPropPullRequestPropRequestedTeamsItemsPropParentType",
    "WebhookPullRequestReviewEditedPropPullRequestPropUserType",
    "WebhookPullRequestReviewEditedPropReviewType",
    "WebhookPullRequestReviewEditedPropReviewPropLinksType",
    "WebhookPullRequestReviewEditedPropReviewPropLinksPropHtmlType",
    "WebhookPullRequestReviewEditedPropReviewPropLinksPropPullRequestType",
    "WebhookPullRequestReviewEditedPropReviewPropUserType",
    "WebhookPullRequestReviewRequestRemovedOneof0Type",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestType",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksType",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropCommentsType",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropCommitsType",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropHtmlType",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropIssueType",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropReviewCommentType",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropReviewCommentsType",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropSelfType",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLinksPropStatusesType",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropAssigneeType",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropAssigneesItemsType",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropAutoMergePropEnabledByType",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropAutoMergeType",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBaseType",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBasePropRepoType",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBasePropRepoPropLicenseType",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBasePropRepoPropOwnerType",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBasePropRepoPropPermissionsType",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropBasePropUserType",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHeadType",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHeadPropRepoType",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHeadPropRepoPropLicenseType",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHeadPropRepoPropOwnerType",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHeadPropRepoPropPermissionsType",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropHeadPropUserType",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropLabelsItemsType",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropMergedByType",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropMilestonePropCreatorType",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropMilestoneType",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropRequestedReviewersItemsOneof0Type",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropRequestedReviewersItemsOneof1Type",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropRequestedReviewersItemsOneof1PropParentType",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropRequestedTeamsItemsType",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropRequestedTeamsItemsPropParentType",
    "WebhookPullRequestReviewRequestRemovedOneof0PropPullRequestPropUserType",
    "WebhookPullRequestReviewRequestRemovedOneof0PropRequestedReviewerType",
    "WebhookPullRequestReviewRequestRemovedOneof1Type",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestType",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksType",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropCommentsType",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropCommitsType",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropHtmlType",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropIssueType",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropReviewCommentType",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropReviewCommentsType",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropSelfType",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLinksPropStatusesType",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropAssigneeType",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropAssigneesItemsType",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropAutoMergePropEnabledByType",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropAutoMergeType",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBaseType",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBasePropRepoType",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBasePropRepoPropLicenseType",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBasePropRepoPropOwnerType",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBasePropRepoPropPermissionsType",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropBasePropUserType",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHeadType",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHeadPropRepoType",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHeadPropRepoPropLicenseType",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHeadPropRepoPropOwnerType",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHeadPropRepoPropPermissionsType",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropHeadPropUserType",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropLabelsItemsType",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropMergedByType",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropMilestonePropCreatorType",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropMilestoneType",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropRequestedReviewersItemsOneof0Type",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropRequestedReviewersItemsOneof1Type",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropRequestedReviewersItemsOneof1PropParentType",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropRequestedTeamsItemsType",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropRequestedTeamsItemsPropParentType",
    "WebhookPullRequestReviewRequestRemovedOneof1PropPullRequestPropUserType",
    "WebhookPullRequestReviewRequestRemovedOneof1PropRequestedTeamType",
    "WebhookPullRequestReviewRequestRemovedOneof1PropRequestedTeamPropParentType",
    "WebhookPullRequestReviewRequestedOneof0Type",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestType",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksType",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropCommentsType",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropCommitsType",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropHtmlType",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropIssueType",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropReviewCommentType",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropReviewCommentsType",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropSelfType",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLinksPropStatusesType",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropAssigneeType",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropAssigneesItemsType",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropAutoMergePropEnabledByType",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropAutoMergeType",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBaseType",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBasePropRepoType",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBasePropRepoPropLicenseType",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBasePropRepoPropOwnerType",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBasePropRepoPropPermissionsType",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropBasePropUserType",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHeadType",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHeadPropRepoType",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHeadPropRepoPropLicenseType",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHeadPropRepoPropOwnerType",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHeadPropRepoPropPermissionsType",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropHeadPropUserType",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropLabelsItemsType",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropMergedByType",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropMilestonePropCreatorType",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropMilestoneType",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropRequestedReviewersItemsOneof0Type",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropRequestedReviewersItemsOneof1Type",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropRequestedReviewersItemsOneof1PropParentType",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropRequestedTeamsItemsType",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropRequestedTeamsItemsPropParentType",
    "WebhookPullRequestReviewRequestedOneof0PropPullRequestPropUserType",
    "WebhookPullRequestReviewRequestedOneof0PropRequestedReviewerType",
    "WebhookPullRequestReviewRequestedOneof1Type",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestType",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksType",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropCommentsType",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropCommitsType",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropHtmlType",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropIssueType",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropReviewCommentType",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropReviewCommentsType",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropSelfType",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLinksPropStatusesType",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropAssigneeType",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropAssigneesItemsType",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropAutoMergePropEnabledByType",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropAutoMergeType",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBaseType",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBasePropRepoType",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBasePropRepoPropLicenseType",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBasePropRepoPropOwnerType",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBasePropRepoPropPermissionsType",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropBasePropUserType",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHeadType",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHeadPropRepoType",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHeadPropRepoPropLicenseType",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHeadPropRepoPropOwnerType",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHeadPropRepoPropPermissionsType",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropHeadPropUserType",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropLabelsItemsType",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropMergedByType",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropMilestonePropCreatorType",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropMilestoneType",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropRequestedReviewersItemsOneof0Type",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropRequestedReviewersItemsOneof1Type",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropRequestedReviewersItemsOneof1PropParentType",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropRequestedTeamsItemsType",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropRequestedTeamsItemsPropParentType",
    "WebhookPullRequestReviewRequestedOneof1PropPullRequestPropUserType",
    "WebhookPullRequestReviewRequestedOneof1PropRequestedTeamType",
    "WebhookPullRequestReviewRequestedOneof1PropRequestedTeamPropParentType",
    "WebhookPullRequestReviewSubmittedType",
    "WebhookPullRequestReviewSubmittedPropPullRequestType",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropLinksType",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropCommentsType",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropCommitsType",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropHtmlType",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropIssueType",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropReviewCommentType",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropReviewCommentsType",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropSelfType",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropLinksPropStatusesType",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropAssigneeType",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropAssigneesItemsType",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropAutoMergePropEnabledByType",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropAutoMergeType",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropBaseType",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropBasePropRepoType",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropBasePropRepoPropLicenseType",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropBasePropRepoPropOwnerType",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropBasePropRepoPropPermissionsType",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropBasePropUserType",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropHeadType",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropHeadPropRepoPropLicenseType",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropHeadPropRepoPropOwnerType",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropHeadPropRepoPropPermissionsType",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropHeadPropRepoType",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropHeadPropUserType",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropLabelsItemsType",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropMilestonePropCreatorType",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropMilestoneType",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropRequestedReviewersItemsOneof0Type",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropRequestedReviewersItemsOneof1Type",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropRequestedTeamsItemsType",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropRequestedTeamsItemsPropParentType",
    "WebhookPullRequestReviewSubmittedPropPullRequestPropUserType",
    "WebhookPullRequestReviewSubmittedPropReviewType",
    "WebhookPullRequestReviewSubmittedPropReviewPropLinksType",
    "WebhookPullRequestReviewSubmittedPropReviewPropLinksPropHtmlType",
    "WebhookPullRequestReviewSubmittedPropReviewPropLinksPropPullRequestType",
    "WebhookPullRequestReviewSubmittedPropReviewPropUserType",
    "WebhookPullRequestReviewThreadResolvedType",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestType",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksType",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropCommentsType",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropCommitsType",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropHtmlType",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropIssueType",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropReviewCommentType",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropReviewCommentsType",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropSelfType",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropLinksPropStatusesType",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropAssigneeType",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropAssigneesItemsType",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropAutoMergePropEnabledByType",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropAutoMergeType",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropBaseType",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropBasePropRepoType",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropBasePropRepoPropLicenseType",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropBasePropRepoPropOwnerType",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropBasePropRepoPropPermissionsType",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropBasePropUserType",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropHeadType",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropHeadPropRepoPropLicenseType",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropHeadPropRepoPropOwnerType",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropHeadPropRepoPropPermissionsType",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropHeadPropRepoType",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropHeadPropUserType",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropLabelsItemsType",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropMilestonePropCreatorType",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropMilestoneType",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropRequestedReviewersItemsOneof0Type",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropRequestedReviewersItemsOneof1Type",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropRequestedTeamsItemsType",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropRequestedTeamsItemsPropParentType",
    "WebhookPullRequestReviewThreadResolvedPropPullRequestPropUserType",
    "WebhookPullRequestReviewThreadResolvedPropThreadType",
    "WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsType",
    "WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropLinksType",
    "WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropLinksPropHtmlType",
    "WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropLinksPropPullRequestType",
    "WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropLinksPropSelfType",
    "WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropReactionsType",
    "WebhookPullRequestReviewThreadResolvedPropThreadPropCommentsItemsPropUserType",
    "WebhookPullRequestReviewThreadUnresolvedType",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestType",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksType",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropCommentsType",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropCommitsType",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropHtmlType",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropIssueType",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropReviewCommentType",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropReviewCommentsType",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropSelfType",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLinksPropStatusesType",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropAssigneeType",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropAssigneesItemsType",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropAutoMergePropEnabledByType",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropAutoMergeType",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBaseType",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBasePropRepoType",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBasePropRepoPropLicenseType",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBasePropRepoPropOwnerType",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBasePropRepoPropPermissionsType",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropBasePropUserType",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHeadType",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHeadPropRepoType",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHeadPropRepoPropLicenseType",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHeadPropRepoPropOwnerType",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHeadPropRepoPropPermissionsType",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropHeadPropUserType",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropLabelsItemsType",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropMilestonePropCreatorType",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropMilestoneType",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropRequestedReviewersItemsOneof0Type",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropRequestedReviewersItemsOneof1Type",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropRequestedTeamsItemsType",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropRequestedTeamsItemsPropParentType",
    "WebhookPullRequestReviewThreadUnresolvedPropPullRequestPropUserType",
    "WebhookPullRequestReviewThreadUnresolvedPropThreadType",
    "WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsType",
    "WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropLinksType",
    "WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropLinksPropHtmlType",
    "WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropLinksPropPullRequestType",
    "WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropLinksPropSelfType",
    "WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropReactionsType",
    "WebhookPullRequestReviewThreadUnresolvedPropThreadPropCommentsItemsPropUserType",
    "WebhookPullRequestSynchronizeType",
    "WebhookPullRequestSynchronizePropPullRequestType",
    "WebhookPullRequestSynchronizePropPullRequestPropLinksType",
    "WebhookPullRequestSynchronizePropPullRequestPropLinksPropCommentsType",
    "WebhookPullRequestSynchronizePropPullRequestPropLinksPropCommitsType",
    "WebhookPullRequestSynchronizePropPullRequestPropLinksPropHtmlType",
    "WebhookPullRequestSynchronizePropPullRequestPropLinksPropIssueType",
    "WebhookPullRequestSynchronizePropPullRequestPropLinksPropReviewCommentType",
    "WebhookPullRequestSynchronizePropPullRequestPropLinksPropReviewCommentsType",
    "WebhookPullRequestSynchronizePropPullRequestPropLinksPropSelfType",
    "WebhookPullRequestSynchronizePropPullRequestPropLinksPropStatusesType",
    "WebhookPullRequestSynchronizePropPullRequestPropAssigneeType",
    "WebhookPullRequestSynchronizePropPullRequestPropAssigneesItemsType",
    "WebhookPullRequestSynchronizePropPullRequestPropAutoMergePropEnabledByType",
    "WebhookPullRequestSynchronizePropPullRequestPropAutoMergeType",
    "WebhookPullRequestSynchronizePropPullRequestPropBaseType",
    "WebhookPullRequestSynchronizePropPullRequestPropBasePropRepoType",
    "WebhookPullRequestSynchronizePropPullRequestPropBasePropRepoPropLicenseType",
    "WebhookPullRequestSynchronizePropPullRequestPropBasePropRepoPropOwnerType",
    "WebhookPullRequestSynchronizePropPullRequestPropBasePropRepoPropPermissionsType",
    "WebhookPullRequestSynchronizePropPullRequestPropBasePropUserType",
    "WebhookPullRequestSynchronizePropPullRequestPropHeadType",
    "WebhookPullRequestSynchronizePropPullRequestPropHeadPropRepoType",
    "WebhookPullRequestSynchronizePropPullRequestPropHeadPropRepoPropLicenseType",
    "WebhookPullRequestSynchronizePropPullRequestPropHeadPropRepoPropOwnerType",
    "WebhookPullRequestSynchronizePropPullRequestPropHeadPropRepoPropPermissionsType",
    "WebhookPullRequestSynchronizePropPullRequestPropHeadPropUserType",
    "WebhookPullRequestSynchronizePropPullRequestPropLabelsItemsType",
    "WebhookPullRequestSynchronizePropPullRequestPropMergedByType",
    "WebhookPullRequestSynchronizePropPullRequestPropMilestonePropCreatorType",
    "WebhookPullRequestSynchronizePropPullRequestPropMilestoneType",
    "WebhookPullRequestSynchronizePropPullRequestPropRequestedReviewersItemsOneof0Type",
    "WebhookPullRequestSynchronizePropPullRequestPropRequestedReviewersItemsOneof1Type",
    "WebhookPullRequestSynchronizePropPullRequestPropRequestedReviewersItemsOneof1PropParentType",
    "WebhookPullRequestSynchronizePropPullRequestPropRequestedTeamsItemsType",
    "WebhookPullRequestSynchronizePropPullRequestPropRequestedTeamsItemsPropParentType",
    "WebhookPullRequestSynchronizePropPullRequestPropUserType",
    "WebhookPullRequestUnassignedType",
    "WebhookPullRequestUnassignedPropAssigneeType",
    "WebhookPullRequestUnassignedPropPullRequestType",
    "WebhookPullRequestUnassignedPropPullRequestPropLinksType",
    "WebhookPullRequestUnassignedPropPullRequestPropLinksPropCommentsType",
    "WebhookPullRequestUnassignedPropPullRequestPropLinksPropCommitsType",
    "WebhookPullRequestUnassignedPropPullRequestPropLinksPropHtmlType",
    "WebhookPullRequestUnassignedPropPullRequestPropLinksPropIssueType",
    "WebhookPullRequestUnassignedPropPullRequestPropLinksPropReviewCommentType",
    "WebhookPullRequestUnassignedPropPullRequestPropLinksPropReviewCommentsType",
    "WebhookPullRequestUnassignedPropPullRequestPropLinksPropSelfType",
    "WebhookPullRequestUnassignedPropPullRequestPropLinksPropStatusesType",
    "WebhookPullRequestUnassignedPropPullRequestPropAssigneeType",
    "WebhookPullRequestUnassignedPropPullRequestPropAssigneesItemsType",
    "WebhookPullRequestUnassignedPropPullRequestPropAutoMergePropEnabledByType",
    "WebhookPullRequestUnassignedPropPullRequestPropAutoMergeType",
    "WebhookPullRequestUnassignedPropPullRequestPropBaseType",
    "WebhookPullRequestUnassignedPropPullRequestPropBasePropRepoType",
    "WebhookPullRequestUnassignedPropPullRequestPropBasePropRepoPropLicenseType",
    "WebhookPullRequestUnassignedPropPullRequestPropBasePropRepoPropOwnerType",
    "WebhookPullRequestUnassignedPropPullRequestPropBasePropRepoPropPermissionsType",
    "WebhookPullRequestUnassignedPropPullRequestPropBasePropUserType",
    "WebhookPullRequestUnassignedPropPullRequestPropHeadType",
    "WebhookPullRequestUnassignedPropPullRequestPropHeadPropRepoPropLicenseType",
    "WebhookPullRequestUnassignedPropPullRequestPropHeadPropRepoPropOwnerType",
    "WebhookPullRequestUnassignedPropPullRequestPropHeadPropRepoPropPermissionsType",
    "WebhookPullRequestUnassignedPropPullRequestPropHeadPropRepoType",
    "WebhookPullRequestUnassignedPropPullRequestPropHeadPropUserType",
    "WebhookPullRequestUnassignedPropPullRequestPropLabelsItemsType",
    "WebhookPullRequestUnassignedPropPullRequestPropMergedByType",
    "WebhookPullRequestUnassignedPropPullRequestPropMilestonePropCreatorType",
    "WebhookPullRequestUnassignedPropPullRequestPropMilestoneType",
    "WebhookPullRequestUnassignedPropPullRequestPropRequestedReviewersItemsOneof0Type",
    "WebhookPullRequestUnassignedPropPullRequestPropRequestedReviewersItemsOneof1Type",
    "WebhookPullRequestUnassignedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType",
    "WebhookPullRequestUnassignedPropPullRequestPropRequestedTeamsItemsType",
    "WebhookPullRequestUnassignedPropPullRequestPropRequestedTeamsItemsPropParentType",
    "WebhookPullRequestUnassignedPropPullRequestPropUserType",
    "WebhookPullRequestUnlabeledType",
    "WebhookPullRequestUnlabeledPropLabelType",
    "WebhookPullRequestUnlabeledPropPullRequestType",
    "WebhookPullRequestUnlabeledPropPullRequestPropLinksType",
    "WebhookPullRequestUnlabeledPropPullRequestPropLinksPropCommentsType",
    "WebhookPullRequestUnlabeledPropPullRequestPropLinksPropCommitsType",
    "WebhookPullRequestUnlabeledPropPullRequestPropLinksPropHtmlType",
    "WebhookPullRequestUnlabeledPropPullRequestPropLinksPropIssueType",
    "WebhookPullRequestUnlabeledPropPullRequestPropLinksPropReviewCommentType",
    "WebhookPullRequestUnlabeledPropPullRequestPropLinksPropReviewCommentsType",
    "WebhookPullRequestUnlabeledPropPullRequestPropLinksPropSelfType",
    "WebhookPullRequestUnlabeledPropPullRequestPropLinksPropStatusesType",
    "WebhookPullRequestUnlabeledPropPullRequestPropAssigneeType",
    "WebhookPullRequestUnlabeledPropPullRequestPropAssigneesItemsType",
    "WebhookPullRequestUnlabeledPropPullRequestPropAutoMergePropEnabledByType",
    "WebhookPullRequestUnlabeledPropPullRequestPropAutoMergeType",
    "WebhookPullRequestUnlabeledPropPullRequestPropBaseType",
    "WebhookPullRequestUnlabeledPropPullRequestPropBasePropRepoType",
    "WebhookPullRequestUnlabeledPropPullRequestPropBasePropRepoPropLicenseType",
    "WebhookPullRequestUnlabeledPropPullRequestPropBasePropRepoPropOwnerType",
    "WebhookPullRequestUnlabeledPropPullRequestPropBasePropRepoPropPermissionsType",
    "WebhookPullRequestUnlabeledPropPullRequestPropBasePropUserType",
    "WebhookPullRequestUnlabeledPropPullRequestPropHeadType",
    "WebhookPullRequestUnlabeledPropPullRequestPropHeadPropRepoPropLicenseType",
    "WebhookPullRequestUnlabeledPropPullRequestPropHeadPropRepoPropOwnerType",
    "WebhookPullRequestUnlabeledPropPullRequestPropHeadPropRepoPropPermissionsType",
    "WebhookPullRequestUnlabeledPropPullRequestPropHeadPropRepoType",
    "WebhookPullRequestUnlabeledPropPullRequestPropHeadPropUserType",
    "WebhookPullRequestUnlabeledPropPullRequestPropLabelsItemsType",
    "WebhookPullRequestUnlabeledPropPullRequestPropMergedByType",
    "WebhookPullRequestUnlabeledPropPullRequestPropMilestonePropCreatorType",
    "WebhookPullRequestUnlabeledPropPullRequestPropMilestoneType",
    "WebhookPullRequestUnlabeledPropPullRequestPropRequestedReviewersItemsOneof0Type",
    "WebhookPullRequestUnlabeledPropPullRequestPropRequestedReviewersItemsOneof1Type",
    "WebhookPullRequestUnlabeledPropPullRequestPropRequestedReviewersItemsOneof1PropParentType",
    "WebhookPullRequestUnlabeledPropPullRequestPropRequestedTeamsItemsType",
    "WebhookPullRequestUnlabeledPropPullRequestPropRequestedTeamsItemsPropParentType",
    "WebhookPullRequestUnlabeledPropPullRequestPropUserType",
    "WebhookPullRequestUnlockedType",
    "WebhookPullRequestUnlockedPropPullRequestType",
    "WebhookPullRequestUnlockedPropPullRequestPropLinksType",
    "WebhookPullRequestUnlockedPropPullRequestPropLinksPropCommentsType",
    "WebhookPullRequestUnlockedPropPullRequestPropLinksPropCommitsType",
    "WebhookPullRequestUnlockedPropPullRequestPropLinksPropHtmlType",
    "WebhookPullRequestUnlockedPropPullRequestPropLinksPropIssueType",
    "WebhookPullRequestUnlockedPropPullRequestPropLinksPropReviewCommentType",
    "WebhookPullRequestUnlockedPropPullRequestPropLinksPropReviewCommentsType",
    "WebhookPullRequestUnlockedPropPullRequestPropLinksPropSelfType",
    "WebhookPullRequestUnlockedPropPullRequestPropLinksPropStatusesType",
    "WebhookPullRequestUnlockedPropPullRequestPropAssigneeType",
    "WebhookPullRequestUnlockedPropPullRequestPropAssigneesItemsType",
    "WebhookPullRequestUnlockedPropPullRequestPropAutoMergePropEnabledByType",
    "WebhookPullRequestUnlockedPropPullRequestPropAutoMergeType",
    "WebhookPullRequestUnlockedPropPullRequestPropBaseType",
    "WebhookPullRequestUnlockedPropPullRequestPropBasePropRepoType",
    "WebhookPullRequestUnlockedPropPullRequestPropBasePropRepoPropLicenseType",
    "WebhookPullRequestUnlockedPropPullRequestPropBasePropRepoPropOwnerType",
    "WebhookPullRequestUnlockedPropPullRequestPropBasePropRepoPropPermissionsType",
    "WebhookPullRequestUnlockedPropPullRequestPropBasePropUserType",
    "WebhookPullRequestUnlockedPropPullRequestPropHeadType",
    "WebhookPullRequestUnlockedPropPullRequestPropHeadPropRepoPropLicenseType",
    "WebhookPullRequestUnlockedPropPullRequestPropHeadPropRepoPropOwnerType",
    "WebhookPullRequestUnlockedPropPullRequestPropHeadPropRepoPropPermissionsType",
    "WebhookPullRequestUnlockedPropPullRequestPropHeadPropRepoType",
    "WebhookPullRequestUnlockedPropPullRequestPropHeadPropUserType",
    "WebhookPullRequestUnlockedPropPullRequestPropLabelsItemsType",
    "WebhookPullRequestUnlockedPropPullRequestPropMergedByType",
    "WebhookPullRequestUnlockedPropPullRequestPropMilestonePropCreatorType",
    "WebhookPullRequestUnlockedPropPullRequestPropMilestoneType",
    "WebhookPullRequestUnlockedPropPullRequestPropRequestedReviewersItemsOneof0Type",
    "WebhookPullRequestUnlockedPropPullRequestPropRequestedReviewersItemsOneof1Type",
    "WebhookPullRequestUnlockedPropPullRequestPropRequestedReviewersItemsOneof1PropParentType",
    "WebhookPullRequestUnlockedPropPullRequestPropRequestedTeamsItemsType",
    "WebhookPullRequestUnlockedPropPullRequestPropRequestedTeamsItemsPropParentType",
    "WebhookPullRequestUnlockedPropPullRequestPropUserType",
    "WebhookPushType",
    "WebhookPushPropCommitsItemsType",
    "WebhookPushPropCommitsItemsPropAuthorType",
    "WebhookPushPropCommitsItemsPropCommitterType",
    "WebhookPushPropHeadCommitPropAuthorType",
    "WebhookPushPropHeadCommitPropCommitterType",
    "WebhookPushPropHeadCommitType",
    "WebhookPushPropPusherType",
    "WebhookPushPropRepositoryType",
    "WebhookPushPropRepositoryPropCustomPropertiesType",
    "WebhookPushPropRepositoryPropLicenseType",
    "WebhookPushPropRepositoryPropOwnerType",
    "WebhookPushPropRepositoryPropPermissionsType",
    "WebhookRegistryPackagePublishedType",
    "WebhookRegistryPackagePublishedPropRegistryPackageType",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropOwnerType",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropAuthorType",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropBodyOneof1Type",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropContainerMetadataType",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropContainerMetadataPropLabelsType",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropContainerMetadataPropManifestType",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropContainerMetadataPropTagType",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropDockerMetadataItemsType",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropMetadataItemsType",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropAuthorOneof1Type",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropBugsOneof1Type",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropDependenciesType",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropDevDependenciesType",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropPeerDependenciesType",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropOptionalDependenciesType",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropDistOneof1Type",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropRepositoryOneof1Type",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropScriptsType",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropEnginesType",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropBinType",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropManType",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataPropDirectoriesOneof1Type",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNpmMetadataType",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNugetMetadataItemsType",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNugetMetadataItemsPropIdOneof1Type",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropNugetMetadataItemsPropValueOneof3Type",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropPackageFilesItemsType",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropReleaseType",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionPropReleasePropAuthorType",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropPackageVersionType",
    "WebhookRegistryPackagePublishedPropRegistryPackagePropRegistryType",
    "WebhookRegistryPackageUpdatedType",
    "WebhookRegistryPackageUpdatedPropRegistryPackageType",
    "WebhookRegistryPackageUpdatedPropRegistryPackagePropOwnerType",
    "WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionType",
    "WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropAuthorType",
    "WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropDockerMetadataItemsType",
    "WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropMetadataItemsType",
    "WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropPackageFilesItemsType",
    "WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropReleaseType",
    "WebhookRegistryPackageUpdatedPropRegistryPackagePropPackageVersionPropReleasePropAuthorType",
    "WebhookRegistryPackageUpdatedPropRegistryPackagePropRegistryType",
    "WebhookReleaseCreatedType",
    "WebhookReleaseCreatedPropReleaseType",
    "WebhookReleaseCreatedPropReleasePropAssetsItemsType",
    "WebhookReleaseCreatedPropReleasePropAssetsItemsPropUploaderType",
    "WebhookReleaseCreatedPropReleasePropAuthorType",
    "WebhookReleaseCreatedPropReleasePropReactionsType",
    "WebhookReleaseDeletedType",
    "WebhookReleaseDeletedPropReleaseType",
    "WebhookReleaseDeletedPropReleasePropAssetsItemsType",
    "WebhookReleaseDeletedPropReleasePropAssetsItemsPropUploaderType",
    "WebhookReleaseDeletedPropReleasePropAuthorType",
    "WebhookReleaseDeletedPropReleasePropReactionsType",
    "WebhookReleaseEditedType",
    "WebhookReleaseEditedPropChangesType",
    "WebhookReleaseEditedPropChangesPropBodyType",
    "WebhookReleaseEditedPropChangesPropNameType",
    "WebhookReleaseEditedPropChangesPropMakeLatestType",
    "WebhookReleaseEditedPropReleaseType",
    "WebhookReleaseEditedPropReleasePropAssetsItemsType",
    "WebhookReleaseEditedPropReleasePropAssetsItemsPropUploaderType",
    "WebhookReleaseEditedPropReleasePropAuthorType",
    "WebhookReleaseEditedPropReleasePropReactionsType",
    "WebhookReleasePrereleasedType",
    "WebhookReleasePrereleasedPropReleaseType",
    "WebhookReleasePrereleasedPropReleaseAllof0Type",
    "WebhookReleasePrereleasedPropReleaseAllof0PropAssetsItemsType",
    "WebhookReleasePrereleasedPropReleaseAllof0PropAssetsItemsPropUploaderType",
    "WebhookReleasePrereleasedPropReleaseAllof0PropAuthorType",
    "WebhookReleasePrereleasedPropReleaseAllof0PropReactionsType",
    "WebhookReleasePrereleasedPropReleaseAllof1Type",
    "WebhookReleasePrereleasedPropReleaseAllof1PropAssetsItemsType",
    "WebhookReleasePrereleasedPropReleaseAllof1PropAuthorType",
    "WebhookReleasePrereleasedPropReleaseMergedAssetsType",
    "WebhookReleasePrereleasedPropReleaseMergedAuthorType",
    "WebhookReleasePublishedType",
    "WebhookReleasePublishedPropReleaseType",
    "WebhookReleasePublishedPropReleaseAllof0Type",
    "WebhookReleasePublishedPropReleaseAllof0PropAssetsItemsType",
    "WebhookReleasePublishedPropReleaseAllof0PropAssetsItemsPropUploaderType",
    "WebhookReleasePublishedPropReleaseAllof0PropAuthorType",
    "WebhookReleasePublishedPropReleaseAllof0PropReactionsType",
    "WebhookReleasePublishedPropReleaseAllof1Type",
    "WebhookReleasePublishedPropReleaseAllof1PropAssetsItemsType",
    "WebhookReleasePublishedPropReleaseAllof1PropAuthorType",
    "WebhookReleasePublishedPropReleaseMergedAssetsType",
    "WebhookReleasePublishedPropReleaseMergedAuthorType",
    "WebhookReleaseReleasedType",
    "WebhookReleaseReleasedPropReleaseType",
    "WebhookReleaseReleasedPropReleasePropAssetsItemsType",
    "WebhookReleaseReleasedPropReleasePropAssetsItemsPropUploaderType",
    "WebhookReleaseReleasedPropReleasePropAuthorType",
    "WebhookReleaseReleasedPropReleasePropReactionsType",
    "WebhookReleaseUnpublishedType",
    "WebhookReleaseUnpublishedPropReleaseType",
    "WebhookReleaseUnpublishedPropReleaseAllof0Type",
    "WebhookReleaseUnpublishedPropReleaseAllof0PropAssetsItemsType",
    "WebhookReleaseUnpublishedPropReleaseAllof0PropAssetsItemsPropUploaderType",
    "WebhookReleaseUnpublishedPropReleaseAllof0PropAuthorType",
    "WebhookReleaseUnpublishedPropReleaseAllof0PropReactionsType",
    "WebhookReleaseUnpublishedPropReleaseAllof1Type",
    "WebhookReleaseUnpublishedPropReleaseAllof1PropAssetsItemsType",
    "WebhookReleaseUnpublishedPropReleaseAllof1PropAuthorType",
    "WebhookReleaseUnpublishedPropReleaseMergedAssetsType",
    "WebhookReleaseUnpublishedPropReleaseMergedAuthorType",
    "WebhookRepositoryAdvisoryPublishedType",
    "WebhookRepositoryAdvisoryReportedType",
    "WebhookRepositoryArchivedType",
    "WebhookRepositoryCreatedType",
    "WebhookRepositoryDeletedType",
    "WebhookRepositoryDispatchSampleType",
    "WebhookRepositoryDispatchSamplePropClientPayloadType",
    "WebhookRepositoryEditedType",
    "WebhookRepositoryEditedPropChangesType",
    "WebhookRepositoryEditedPropChangesPropDefaultBranchType",
    "WebhookRepositoryEditedPropChangesPropDescriptionType",
    "WebhookRepositoryEditedPropChangesPropHomepageType",
    "WebhookRepositoryEditedPropChangesPropTopicsType",
    "WebhookRepositoryImportType",
    "WebhookRepositoryPrivatizedType",
    "WebhookRepositoryPublicizedType",
    "WebhookRepositoryRenamedType",
    "WebhookRepositoryRenamedPropChangesType",
    "WebhookRepositoryRenamedPropChangesPropRepositoryType",
    "WebhookRepositoryRenamedPropChangesPropRepositoryPropNameType",
    "WebhookRepositoryRulesetCreatedType",
    "WebhookRepositoryRulesetDeletedType",
    "WebhookRepositoryRulesetEditedType",
    "WebhookRepositoryRulesetEditedPropChangesType",
    "WebhookRepositoryRulesetEditedPropChangesPropNameType",
    "WebhookRepositoryRulesetEditedPropChangesPropEnforcementType",
    "WebhookRepositoryRulesetEditedPropChangesPropConditionsType",
    "WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsType",
    "WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChangesType",
    "WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChangesPropConditionTypeType",
    "WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChangesPropTargetType",
    "WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChangesPropIncludeType",
    "WebhookRepositoryRulesetEditedPropChangesPropConditionsPropUpdatedItemsPropChangesPropExcludeType",
    "WebhookRepositoryRulesetEditedPropChangesPropRulesType",
    "WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItemsType",
    "WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItemsPropChangesType",
    "WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItemsPropChangesPropConfigurationType",
    "WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItemsPropChangesPropRuleTypeType",
    "WebhookRepositoryRulesetEditedPropChangesPropRulesPropUpdatedItemsPropChangesPropPatternType",
    "WebhookRepositoryTransferredType",
    "WebhookRepositoryTransferredPropChangesType",
    "WebhookRepositoryTransferredPropChangesPropOwnerType",
    "WebhookRepositoryTransferredPropChangesPropOwnerPropFromType",
    "WebhookRepositoryTransferredPropChangesPropOwnerPropFromPropOrganizationType",
    "WebhookRepositoryTransferredPropChangesPropOwnerPropFromPropUserType",
    "WebhookRepositoryUnarchivedType",
    "WebhookRepositoryVulnerabilityAlertCreateType",
    "WebhookRepositoryVulnerabilityAlertCreatePropAlertType",
    "WebhookRepositoryVulnerabilityAlertCreatePropAlertAllof0Type",
    "WebhookRepositoryVulnerabilityAlertCreatePropAlertAllof0PropDismisserType",
    "WebhookRepositoryVulnerabilityAlertCreatePropAlertAllof1Type",
    "WebhookRepositoryVulnerabilityAlertDismissType",
    "WebhookRepositoryVulnerabilityAlertDismissPropAlertType",
    "WebhookRepositoryVulnerabilityAlertDismissPropAlertAllof0Type",
    "WebhookRepositoryVulnerabilityAlertDismissPropAlertAllof0PropDismisserType",
    "WebhookRepositoryVulnerabilityAlertDismissPropAlertAllof1Type",
    "WebhookRepositoryVulnerabilityAlertDismissPropAlertAllof1PropDismisserType",
    "WebhookRepositoryVulnerabilityAlertReopenType",
    "WebhookRepositoryVulnerabilityAlertReopenPropAlertType",
    "WebhookRepositoryVulnerabilityAlertReopenPropAlertAllof0Type",
    "WebhookRepositoryVulnerabilityAlertReopenPropAlertAllof0PropDismisserType",
    "WebhookRepositoryVulnerabilityAlertReopenPropAlertAllof1Type",
    "WebhookRepositoryVulnerabilityAlertResolveType",
    "WebhookRepositoryVulnerabilityAlertResolvePropAlertType",
    "WebhookRepositoryVulnerabilityAlertResolvePropAlertAllof0Type",
    "WebhookRepositoryVulnerabilityAlertResolvePropAlertAllof0PropDismisserType",
    "WebhookRepositoryVulnerabilityAlertResolvePropAlertAllof1Type",
    "WebhookSecretScanningAlertCreatedType",
    "WebhookSecretScanningAlertLocationCreatedType",
    "WebhookSecretScanningAlertLocationCreatedFormEncodedType",
    "WebhookSecretScanningAlertReopenedType",
    "WebhookSecretScanningAlertResolvedType",
    "WebhookSecretScanningAlertRevokedType",
    "WebhookSecurityAdvisoryPublishedType",
    "WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryType",
    "WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropCvssType",
    "WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropCwesItemsType",
    "WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropIdentifiersItemsType",
    "WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropReferencesItemsType",
    "WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropVulnerabilitiesItemsType",
    "WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropVulnerabilitiesItemsPropFirstPatchedVersionType",
    "WebhookSecurityAdvisoryPublishedPropSecurityAdvisoryPropVulnerabilitiesItemsPropPackageType",
    "WebhookSecurityAdvisoryUpdatedType",
    "WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryType",
    "WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropCvssType",
    "WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropCwesItemsType",
    "WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropIdentifiersItemsType",
    "WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropReferencesItemsType",
    "WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropVulnerabilitiesItemsType",
    "WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropVulnerabilitiesItemsPropFirstPatchedVersionType",
    "WebhookSecurityAdvisoryUpdatedPropSecurityAdvisoryPropVulnerabilitiesItemsPropPackageType",
    "WebhookSecurityAdvisoryWithdrawnType",
    "WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryType",
    "WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropCvssType",
    "WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropCwesItemsType",
    "WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropIdentifiersItemsType",
    "WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropReferencesItemsType",
    "WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropVulnerabilitiesItemsType",
    "WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropVulnerabilitiesItemsPropFirstPatchedVersionType",
    "WebhookSecurityAdvisoryWithdrawnPropSecurityAdvisoryPropVulnerabilitiesItemsPropPackageType",
    "WebhookSecurityAndAnalysisType",
    "WebhookSecurityAndAnalysisPropChangesType",
    "WebhookSecurityAndAnalysisPropChangesPropFromType",
    "WebhookSponsorshipCancelledType",
    "WebhookSponsorshipCancelledPropSponsorshipType",
    "WebhookSponsorshipCancelledPropSponsorshipPropMaintainerType",
    "WebhookSponsorshipCancelledPropSponsorshipPropSponsorType",
    "WebhookSponsorshipCancelledPropSponsorshipPropSponsorableType",
    "WebhookSponsorshipCancelledPropSponsorshipPropTierType",
    "WebhookSponsorshipCreatedType",
    "WebhookSponsorshipCreatedPropSponsorshipType",
    "WebhookSponsorshipCreatedPropSponsorshipPropMaintainerType",
    "WebhookSponsorshipCreatedPropSponsorshipPropSponsorType",
    "WebhookSponsorshipCreatedPropSponsorshipPropSponsorableType",
    "WebhookSponsorshipCreatedPropSponsorshipPropTierType",
    "WebhookSponsorshipEditedType",
    "WebhookSponsorshipEditedPropChangesType",
    "WebhookSponsorshipEditedPropChangesPropPrivacyLevelType",
    "WebhookSponsorshipEditedPropSponsorshipType",
    "WebhookSponsorshipEditedPropSponsorshipPropMaintainerType",
    "WebhookSponsorshipEditedPropSponsorshipPropSponsorType",
    "WebhookSponsorshipEditedPropSponsorshipPropSponsorableType",
    "WebhookSponsorshipEditedPropSponsorshipPropTierType",
    "WebhookSponsorshipPendingCancellationType",
    "WebhookSponsorshipPendingCancellationPropSponsorshipType",
    "WebhookSponsorshipPendingCancellationPropSponsorshipPropMaintainerType",
    "WebhookSponsorshipPendingCancellationPropSponsorshipPropSponsorType",
    "WebhookSponsorshipPendingCancellationPropSponsorshipPropSponsorableType",
    "WebhookSponsorshipPendingCancellationPropSponsorshipPropTierType",
    "WebhookSponsorshipPendingTierChangeType",
    "WebhookSponsorshipPendingTierChangePropChangesType",
    "WebhookSponsorshipPendingTierChangePropChangesPropTierType",
    "WebhookSponsorshipPendingTierChangePropChangesPropTierPropFromType",
    "WebhookSponsorshipPendingTierChangePropSponsorshipType",
    "WebhookSponsorshipPendingTierChangePropSponsorshipPropMaintainerType",
    "WebhookSponsorshipPendingTierChangePropSponsorshipPropSponsorType",
    "WebhookSponsorshipPendingTierChangePropSponsorshipPropSponsorableType",
    "WebhookSponsorshipPendingTierChangePropSponsorshipPropTierType",
    "WebhookSponsorshipTierChangedType",
    "WebhookSponsorshipTierChangedPropChangesType",
    "WebhookSponsorshipTierChangedPropChangesPropTierType",
    "WebhookSponsorshipTierChangedPropChangesPropTierPropFromType",
    "WebhookSponsorshipTierChangedPropSponsorshipType",
    "WebhookSponsorshipTierChangedPropSponsorshipPropMaintainerType",
    "WebhookSponsorshipTierChangedPropSponsorshipPropSponsorType",
    "WebhookSponsorshipTierChangedPropSponsorshipPropSponsorableType",
    "WebhookSponsorshipTierChangedPropSponsorshipPropTierType",
    "WebhookStarCreatedType",
    "WebhookStarDeletedType",
    "WebhookStatusType",
    "WebhookStatusPropBranchesItemsType",
    "WebhookStatusPropBranchesItemsPropCommitType",
    "WebhookStatusPropCommitType",
    "WebhookStatusPropCommitPropAuthorType",
    "WebhookStatusPropCommitPropCommitType",
    "WebhookStatusPropCommitPropCommitPropAuthorType",
    "WebhookStatusPropCommitPropCommitPropAuthorAllof0Type",
    "WebhookStatusPropCommitPropCommitPropAuthorAllof1Type",
    "WebhookStatusPropCommitPropCommitPropCommitterType",
    "WebhookStatusPropCommitPropCommitPropCommitterAllof0Type",
    "WebhookStatusPropCommitPropCommitPropCommitterAllof1Type",
    "WebhookStatusPropCommitPropCommitPropTreeType",
    "WebhookStatusPropCommitPropCommitPropVerificationType",
    "WebhookStatusPropCommitPropCommitterType",
    "WebhookStatusPropCommitPropParentsItemsType",
    "WebhookTeamAddType",
    "WebhookTeamAddPropTeamType",
    "WebhookTeamAddPropTeamPropParentType",
    "WebhookTeamAddedToRepositoryType",
    "WebhookTeamAddedToRepositoryPropRepositoryType",
    "WebhookTeamAddedToRepositoryPropRepositoryPropCustomPropertiesType",
    "WebhookTeamAddedToRepositoryPropRepositoryPropLicenseType",
    "WebhookTeamAddedToRepositoryPropRepositoryPropOwnerType",
    "WebhookTeamAddedToRepositoryPropRepositoryPropPermissionsType",
    "WebhookTeamAddedToRepositoryPropTeamType",
    "WebhookTeamAddedToRepositoryPropTeamPropParentType",
    "WebhookTeamCreatedType",
    "WebhookTeamCreatedPropRepositoryType",
    "WebhookTeamCreatedPropRepositoryPropCustomPropertiesType",
    "WebhookTeamCreatedPropRepositoryPropLicenseType",
    "WebhookTeamCreatedPropRepositoryPropOwnerType",
    "WebhookTeamCreatedPropRepositoryPropPermissionsType",
    "WebhookTeamCreatedPropTeamType",
    "WebhookTeamCreatedPropTeamPropParentType",
    "WebhookTeamDeletedType",
    "WebhookTeamDeletedPropRepositoryType",
    "WebhookTeamDeletedPropRepositoryPropCustomPropertiesType",
    "WebhookTeamDeletedPropRepositoryPropLicenseType",
    "WebhookTeamDeletedPropRepositoryPropOwnerType",
    "WebhookTeamDeletedPropRepositoryPropPermissionsType",
    "WebhookTeamDeletedPropTeamType",
    "WebhookTeamDeletedPropTeamPropParentType",
    "WebhookTeamEditedType",
    "WebhookTeamEditedPropChangesType",
    "WebhookTeamEditedPropChangesPropDescriptionType",
    "WebhookTeamEditedPropChangesPropNameType",
    "WebhookTeamEditedPropChangesPropPrivacyType",
    "WebhookTeamEditedPropChangesPropNotificationSettingType",
    "WebhookTeamEditedPropChangesPropRepositoryType",
    "WebhookTeamEditedPropChangesPropRepositoryPropPermissionsType",
    "WebhookTeamEditedPropChangesPropRepositoryPropPermissionsPropFromType",
    "WebhookTeamEditedPropRepositoryType",
    "WebhookTeamEditedPropRepositoryPropCustomPropertiesType",
    "WebhookTeamEditedPropRepositoryPropLicenseType",
    "WebhookTeamEditedPropRepositoryPropOwnerType",
    "WebhookTeamEditedPropRepositoryPropPermissionsType",
    "WebhookTeamEditedPropTeamType",
    "WebhookTeamEditedPropTeamPropParentType",
    "WebhookTeamRemovedFromRepositoryType",
    "WebhookTeamRemovedFromRepositoryPropRepositoryType",
    "WebhookTeamRemovedFromRepositoryPropRepositoryPropCustomPropertiesType",
    "WebhookTeamRemovedFromRepositoryPropRepositoryPropLicenseType",
    "WebhookTeamRemovedFromRepositoryPropRepositoryPropOwnerType",
    "WebhookTeamRemovedFromRepositoryPropRepositoryPropPermissionsType",
    "WebhookTeamRemovedFromRepositoryPropTeamType",
    "WebhookTeamRemovedFromRepositoryPropTeamPropParentType",
    "WebhookWatchStartedType",
    "WebhookWorkflowDispatchType",
    "WebhookWorkflowDispatchPropInputsType",
    "WebhookWorkflowJobCompletedType",
    "WebhookWorkflowJobCompletedPropWorkflowJobType",
    "WebhookWorkflowJobCompletedPropWorkflowJobAllof0Type",
    "WebhookWorkflowJobCompletedPropWorkflowJobAllof0PropStepsItemsType",
    "WebhookWorkflowJobCompletedPropWorkflowJobAllof1Type",
    "WebhookWorkflowJobCompletedPropWorkflowJobAllof1PropStepsItemsType",
    "WebhookWorkflowJobCompletedPropWorkflowJobMergedStepsType",
    "WebhookWorkflowJobInProgressType",
    "WebhookWorkflowJobInProgressPropWorkflowJobType",
    "WebhookWorkflowJobInProgressPropWorkflowJobAllof0Type",
    "WebhookWorkflowJobInProgressPropWorkflowJobAllof0PropStepsItemsType",
    "WebhookWorkflowJobInProgressPropWorkflowJobAllof1Type",
    "WebhookWorkflowJobInProgressPropWorkflowJobAllof1PropStepsItemsType",
    "WebhookWorkflowJobInProgressPropWorkflowJobMergedStepsType",
    "WebhookWorkflowJobQueuedType",
    "WebhookWorkflowJobQueuedPropWorkflowJobType",
    "WebhookWorkflowJobQueuedPropWorkflowJobPropStepsItemsType",
    "WebhookWorkflowJobWaitingType",
    "WebhookWorkflowJobWaitingPropWorkflowJobType",
    "WebhookWorkflowJobWaitingPropWorkflowJobPropStepsItemsType",
    "WebhookWorkflowRunCompletedType",
    "WebhookWorkflowRunCompletedPropWorkflowType",
    "WebhookWorkflowRunCompletedPropWorkflowRunType",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof0Type",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropActorType",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropHeadCommitType",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropHeadCommitPropAuthorType",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropHeadCommitPropCommitterType",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropHeadRepositoryType",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropHeadRepositoryPropOwnerType",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItemsType",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItemsPropBaseType",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItemsPropBasePropRepoType",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItemsPropHeadType",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropPullRequestsItemsPropHeadPropRepoType",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropReferencedWorkflowsItemsType",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropRepositoryType",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropRepositoryPropOwnerType",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof0PropTriggeringActorType",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof1Type",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropActorType",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadCommitType",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadCommitPropAuthorType",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadCommitPropCommitterType",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadRepositoryType",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropHeadRepositoryPropOwnerType",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropPullRequestsItemsType",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropReferencedWorkflowsItemsType",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropRepositoryType",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropRepositoryPropOwnerType",
    "WebhookWorkflowRunCompletedPropWorkflowRunAllof1PropTriggeringActorType",
    "WebhookWorkflowRunCompletedPropWorkflowRunMergedActorType",
    "WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadCommitPropAuthorType",
    "WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadCommitPropCommitterType",
    "WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadCommitType",
    "WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadRepositoryPropOwnerType",
    "WebhookWorkflowRunCompletedPropWorkflowRunMergedHeadRepositoryType",
    "WebhookWorkflowRunCompletedPropWorkflowRunMergedPullRequestsType",
    "WebhookWorkflowRunCompletedPropWorkflowRunMergedRepositoryPropOwnerType",
    "WebhookWorkflowRunCompletedPropWorkflowRunMergedRepositoryType",
    "WebhookWorkflowRunCompletedPropWorkflowRunMergedTriggeringActorType",
    "WebhookWorkflowRunInProgressType",
    "WebhookWorkflowRunInProgressPropWorkflowType",
    "WebhookWorkflowRunInProgressPropWorkflowRunType",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof0Type",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropActorType",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropHeadCommitType",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropHeadCommitPropAuthorType",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropHeadCommitPropCommitterType",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropHeadRepositoryType",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropHeadRepositoryPropOwnerType",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItemsType",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItemsPropBaseType",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItemsPropBasePropRepoType",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItemsPropHeadType",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropPullRequestsItemsPropHeadPropRepoType",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropReferencedWorkflowsItemsType",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropRepositoryType",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropRepositoryPropOwnerType",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof0PropTriggeringActorType",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof1Type",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropActorType",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadCommitType",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadCommitPropAuthorType",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadCommitPropCommitterType",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadRepositoryType",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropHeadRepositoryPropOwnerType",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropPullRequestsItemsType",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropReferencedWorkflowsItemsType",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropRepositoryType",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropRepositoryPropOwnerType",
    "WebhookWorkflowRunInProgressPropWorkflowRunAllof1PropTriggeringActorType",
    "WebhookWorkflowRunInProgressPropWorkflowRunMergedActorType",
    "WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadCommitPropAuthorType",
    "WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadCommitPropCommitterType",
    "WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadCommitType",
    "WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadRepositoryPropOwnerType",
    "WebhookWorkflowRunInProgressPropWorkflowRunMergedHeadRepositoryType",
    "WebhookWorkflowRunInProgressPropWorkflowRunMergedPullRequestsType",
    "WebhookWorkflowRunInProgressPropWorkflowRunMergedRepositoryPropOwnerType",
    "WebhookWorkflowRunInProgressPropWorkflowRunMergedRepositoryType",
    "WebhookWorkflowRunInProgressPropWorkflowRunMergedTriggeringActorType",
    "WebhookWorkflowRunRequestedType",
    "WebhookWorkflowRunRequestedPropWorkflowType",
    "WebhookWorkflowRunRequestedPropWorkflowRunType",
    "WebhookWorkflowRunRequestedPropWorkflowRunPropActorType",
    "WebhookWorkflowRunRequestedPropWorkflowRunPropHeadCommitType",
    "WebhookWorkflowRunRequestedPropWorkflowRunPropHeadCommitPropAuthorType",
    "WebhookWorkflowRunRequestedPropWorkflowRunPropHeadCommitPropCommitterType",
    "WebhookWorkflowRunRequestedPropWorkflowRunPropHeadRepositoryType",
    "WebhookWorkflowRunRequestedPropWorkflowRunPropHeadRepositoryPropOwnerType",
    "WebhookWorkflowRunRequestedPropWorkflowRunPropPullRequestsItemsType",
    "WebhookWorkflowRunRequestedPropWorkflowRunPropPullRequestsItemsPropBaseType",
    "WebhookWorkflowRunRequestedPropWorkflowRunPropPullRequestsItemsPropBasePropRepoType",
    "WebhookWorkflowRunRequestedPropWorkflowRunPropPullRequestsItemsPropHeadType",
    "WebhookWorkflowRunRequestedPropWorkflowRunPropPullRequestsItemsPropHeadPropRepoType",
    "WebhookWorkflowRunRequestedPropWorkflowRunPropReferencedWorkflowsItemsType",
    "WebhookWorkflowRunRequestedPropWorkflowRunPropRepositoryType",
    "WebhookWorkflowRunRequestedPropWorkflowRunPropRepositoryPropOwnerType",
    "WebhookWorkflowRunRequestedPropWorkflowRunPropTriggeringActorType",
    "AppManifestsCodeConversionsPostResponse201Type",
    "AppManifestsCodeConversionsPostResponse201Allof1Type",
    "AppHookConfigPatchBodyType",
    "AppHookDeliveriesDeliveryIdAttemptsPostResponse202Type",
    "AppInstallationsInstallationIdAccessTokensPostBodyType",
    "ApplicationsClientIdGrantDeleteBodyType",
    "ApplicationsClientIdTokenPostBodyType",
    "ApplicationsClientIdTokenDeleteBodyType",
    "ApplicationsClientIdTokenPatchBodyType",
    "ApplicationsClientIdTokenScopedPostBodyType",
    "EmojisGetResponse200Type",
    "EnterprisesEnterpriseSecretScanningAlertsGetResponse503Type",
    "GistsPostBodyType",
    "GistsPostBodyPropFilesType",
    "GistsGistIdGetResponse403Type",
    "GistsGistIdGetResponse403PropBlockType",
    "GistsGistIdPatchBodyPropFilesType",
    "GistsGistIdPatchBodyType",
    "GistsGistIdCommentsPostBodyType",
    "GistsGistIdCommentsCommentIdPatchBodyType",
    "GistsGistIdStarGetResponse404Type",
    "InstallationRepositoriesGetResponse200Type",
    "MarkdownPostBodyType",
    "NotificationsPutBodyType",
    "NotificationsPutResponse202Type",
    "NotificationsThreadsThreadIdSubscriptionPutBodyType",
    "OrgsOrgPatchBodyType",
    "OrgsOrgActionsCacheUsageByRepositoryGetResponse200Type",
    "OrgsOrgActionsPermissionsPutBodyType",
    "OrgsOrgActionsPermissionsRepositoriesGetResponse200Type",
    "OrgsOrgActionsPermissionsRepositoriesPutBodyType",
    "OrgsOrgActionsRunnersGetResponse200Type",
    "OrgsOrgActionsRunnersGenerateJitconfigPostBodyType",
    "OrgsOrgActionsRunnersGenerateJitconfigPostResponse201Type",
    "OrgsOrgActionsRunnersRunnerIdLabelsGetResponse200Type",
    "OrgsOrgActionsRunnersRunnerIdLabelsPutBodyType",
    "OrgsOrgActionsRunnersRunnerIdLabelsPostBodyType",
    "OrgsOrgActionsRunnersRunnerIdLabelsDeleteResponse200Type",
    "OrgsOrgActionsSecretsGetResponse200Type",
    "OrgsOrgActionsSecretsSecretNamePutBodyType",
    "OrgsOrgActionsSecretsSecretNameRepositoriesGetResponse200Type",
    "OrgsOrgActionsSecretsSecretNameRepositoriesPutBodyType",
    "OrgsOrgActionsVariablesGetResponse200Type",
    "OrgsOrgActionsVariablesPostBodyType",
    "OrgsOrgActionsVariablesNamePatchBodyType",
    "OrgsOrgActionsVariablesNameRepositoriesGetResponse200Type",
    "OrgsOrgActionsVariablesNameRepositoriesPutBodyType",
    "OrgsOrgCodespacesGetResponse200Type",
    "OrgsOrgCodespacesAccessPutBodyType",
    "OrgsOrgCodespacesAccessSelectedUsersPostBodyType",
    "OrgsOrgCodespacesAccessSelectedUsersDeleteBodyType",
    "OrgsOrgCodespacesSecretsGetResponse200Type",
    "OrgsOrgCodespacesSecretsSecretNamePutBodyType",
    "OrgsOrgCodespacesSecretsSecretNameRepositoriesGetResponse200Type",
    "OrgsOrgCodespacesSecretsSecretNameRepositoriesPutBodyType",
    "OrgsOrgCopilotBillingSeatsGetResponse200Type",
    "OrgsOrgCopilotBillingSelectedTeamsPostBodyType",
    "OrgsOrgCopilotBillingSelectedTeamsPostResponse201Type",
    "OrgsOrgCopilotBillingSelectedTeamsDeleteBodyType",
    "OrgsOrgCopilotBillingSelectedTeamsDeleteResponse200Type",
    "OrgsOrgCopilotBillingSelectedUsersPostBodyType",
    "OrgsOrgCopilotBillingSelectedUsersPostResponse201Type",
    "OrgsOrgCopilotBillingSelectedUsersDeleteBodyType",
    "OrgsOrgCopilotBillingSelectedUsersDeleteResponse200Type",
    "OrgsOrgDependabotSecretsGetResponse200Type",
    "OrgsOrgDependabotSecretsSecretNamePutBodyType",
    "OrgsOrgDependabotSecretsSecretNameRepositoriesGetResponse200Type",
    "OrgsOrgDependabotSecretsSecretNameRepositoriesPutBodyType",
    "OrgsOrgHooksPostBodyType",
    "OrgsOrgHooksPostBodyPropConfigType",
    "OrgsOrgHooksHookIdPatchBodyType",
    "OrgsOrgHooksHookIdPatchBodyPropConfigType",
    "OrgsOrgHooksHookIdConfigPatchBodyType",
    "OrgsOrgInstallationsGetResponse200Type",
    "OrgsOrgInteractionLimitsGetResponse200Anyof1Type",
    "OrgsOrgInvitationsPostBodyType",
    "OrgsOrgMembersUsernameCodespacesGetResponse200Type",
    "OrgsOrgMembershipsUsernamePutBodyType",
    "OrgsOrgMigrationsPostBodyType",
    "OrgsOrgOrganizationRolesGetResponse200Type",
    "OrgsOrgOrganizationRolesPostBodyType",
    "OrgsOrgOrganizationRolesRoleIdPatchBodyType",
    "OrgsOrgOutsideCollaboratorsUsernamePutBodyType",
    "OrgsOrgOutsideCollaboratorsUsernamePutResponse202Type",
    "OrgsOrgOutsideCollaboratorsUsernameDeleteResponse422Type",
    "OrgsOrgPersonalAccessTokenRequestsPostBodyType",
    "OrgsOrgPersonalAccessTokenRequestsPatRequestIdPostBodyType",
    "OrgsOrgPersonalAccessTokensPostBodyType",
    "OrgsOrgPersonalAccessTokensPatIdPostBodyType",
    "OrgsOrgProjectsPostBodyType",
    "OrgsOrgPropertiesSchemaPatchBodyType",
    "OrgsOrgPropertiesSchemaCustomPropertyNamePutBodyType",
    "OrgsOrgPropertiesValuesPatchBodyType",
    "OrgsOrgReposPostBodyType",
    "OrgsOrgReposPostBodyPropCustomPropertiesType",
    "OrgsOrgRulesetsPostBodyType",
    "OrgsOrgRulesetsRulesetIdPutBodyType",
    "OrgsOrgTeamsPostBodyType",
    "OrgsOrgTeamsTeamSlugPatchBodyType",
    "OrgsOrgTeamsTeamSlugDiscussionsPostBodyType",
    "OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberPatchBodyType",
    "OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsPostBodyType",
    "OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsCommentNumberPatchBodyType",
    "OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsCommentNumberReactionsPostBodyType",
    "OrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberReactionsPostBodyType",
    "OrgsOrgTeamsTeamSlugMembershipsUsernamePutBodyType",
    "OrgsOrgTeamsTeamSlugProjectsProjectIdPutBodyType",
    "OrgsOrgTeamsTeamSlugProjectsProjectIdPutResponse403Type",
    "OrgsOrgTeamsTeamSlugReposOwnerRepoPutBodyType",
    "OrgsOrgSecurityProductEnablementPostBodyType",
    "ProjectsColumnsCardsCardIdDeleteResponse403Type",
    "ProjectsColumnsCardsCardIdPatchBodyType",
    "ProjectsColumnsCardsCardIdMovesPostBodyType",
    "ProjectsColumnsCardsCardIdMovesPostResponse201Type",
    "ProjectsColumnsCardsCardIdMovesPostResponse403Type",
    "ProjectsColumnsCardsCardIdMovesPostResponse403PropErrorsItemsType",
    "ProjectsColumnsCardsCardIdMovesPostResponse503Type",
    "ProjectsColumnsCardsCardIdMovesPostResponse503PropErrorsItemsType",
    "ProjectsColumnsColumnIdPatchBodyType",
    "ProjectsColumnsColumnIdCardsPostBodyOneof0Type",
    "ProjectsColumnsColumnIdCardsPostBodyOneof1Type",
    "ProjectsColumnsColumnIdCardsPostResponse503Type",
    "ProjectsColumnsColumnIdCardsPostResponse503PropErrorsItemsType",
    "ProjectsColumnsColumnIdMovesPostBodyType",
    "ProjectsColumnsColumnIdMovesPostResponse201Type",
    "ProjectsProjectIdDeleteResponse403Type",
    "ProjectsProjectIdPatchBodyType",
    "ProjectsProjectIdPatchResponse403Type",
    "ProjectsProjectIdCollaboratorsUsernamePutBodyType",
    "ProjectsProjectIdColumnsPostBodyType",
    "ReposOwnerRepoDeleteResponse403Type",
    "ReposOwnerRepoPatchBodyType",
    "ReposOwnerRepoPatchBodyPropSecurityAndAnalysisPropAdvancedSecurityType",
    "ReposOwnerRepoPatchBodyPropSecurityAndAnalysisPropSecretScanningType",
    "ReposOwnerRepoPatchBodyPropSecurityAndAnalysisPropSecretScanningPushProtectionType",
    "ReposOwnerRepoPatchBodyPropSecurityAndAnalysisType",
    "ReposOwnerRepoActionsArtifactsGetResponse200Type",
    "ReposOwnerRepoActionsJobsJobIdRerunPostBodyType",
    "ReposOwnerRepoActionsOidcCustomizationSubPutBodyType",
    "ReposOwnerRepoActionsOrganizationSecretsGetResponse200Type",
    "ReposOwnerRepoActionsOrganizationVariablesGetResponse200Type",
    "ReposOwnerRepoActionsPermissionsPutBodyType",
    "ReposOwnerRepoActionsRunnersGetResponse200Type",
    "ReposOwnerRepoActionsRunnersGenerateJitconfigPostBodyType",
    "ReposOwnerRepoActionsRunnersRunnerIdLabelsPutBodyType",
    "ReposOwnerRepoActionsRunnersRunnerIdLabelsPostBodyType",
    "ReposOwnerRepoActionsRunsGetResponse200Type",
    "ReposOwnerRepoActionsRunsRunIdArtifactsGetResponse200Type",
    "ReposOwnerRepoActionsRunsRunIdAttemptsAttemptNumberJobsGetResponse200Type",
    "ReposOwnerRepoActionsRunsRunIdJobsGetResponse200Type",
    "ReposOwnerRepoActionsRunsRunIdPendingDeploymentsPostBodyType",
    "ReposOwnerRepoActionsRunsRunIdRerunPostBodyType",
    "ReposOwnerRepoActionsRunsRunIdRerunFailedJobsPostBodyType",
    "ReposOwnerRepoActionsSecretsGetResponse200Type",
    "ReposOwnerRepoActionsSecretsSecretNamePutBodyType",
    "ReposOwnerRepoActionsVariablesGetResponse200Type",
    "ReposOwnerRepoActionsVariablesPostBodyType",
    "ReposOwnerRepoActionsVariablesNamePatchBodyType",
    "ReposOwnerRepoActionsWorkflowsGetResponse200Type",
    "ReposOwnerRepoActionsWorkflowsWorkflowIdDispatchesPostBodyType",
    "ReposOwnerRepoActionsWorkflowsWorkflowIdDispatchesPostBodyPropInputsType",
    "ReposOwnerRepoActionsWorkflowsWorkflowIdRunsGetResponse200Type",
    "ReposOwnerRepoAutolinksPostBodyType",
    "ReposOwnerRepoBranchesBranchProtectionPutBodyType",
    "ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredStatusChecksPropChecksItemsType",
    "ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredStatusChecksType",
    "ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredPullRequestReviewsPropDismissalRestrictionsType",
    "ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredPullRequestReviewsPropBypassPullRequestAllowancesType",
    "ReposOwnerRepoBranchesBranchProtectionPutBodyPropRequiredPullRequestReviewsType",
    "ReposOwnerRepoBranchesBranchProtectionPutBodyPropRestrictionsType",
    "ReposOwnerRepoBranchesBranchProtectionRequiredPullRequestReviewsPatchBodyType",
    "ReposOwnerRepoBranchesBranchProtectionRequiredPullRequestReviewsPatchBodyPropDismissalRestrictionsType",
    "ReposOwnerRepoBranchesBranchProtectionRequiredPullRequestReviewsPatchBodyPropBypassPullRequestAllowancesType",
    "ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksPatchBodyType",
    "ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksPatchBodyPropChecksItemsType",
    "ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsPutBodyOneof0Type",
    "ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsPostBodyOneof0Type",
    "ReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsDeleteBodyOneof0Type",
    "ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsPutBodyOneof0Type",
    "ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsPostBodyOneof0Type",
    "ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsDeleteBodyOneof0Type",
    "ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsPutBodyOneof0Type",
    "ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsPostBodyOneof0Type",
    "ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsDeleteBodyOneof0Type",
    "ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersPutBodyOneof0Type",
    "ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersPostBodyOneof0Type",
    "ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersDeleteBodyOneof0Type",
    "ReposOwnerRepoBranchesBranchRenamePostBodyType",
    "ReposOwnerRepoCheckRunsPostBodyPropOutputType",
    "ReposOwnerRepoCheckRunsPostBodyPropOutputPropAnnotationsItemsType",
    "ReposOwnerRepoCheckRunsPostBodyPropOutputPropImagesItemsType",
    "ReposOwnerRepoCheckRunsPostBodyPropActionsItemsType",
    "ReposOwnerRepoCheckRunsPostBodyOneof0Type",
    "ReposOwnerRepoCheckRunsPostBodyOneof1Type",
    "ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutputType",
    "ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutputPropAnnotationsItemsType",
    "ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropOutputPropImagesItemsType",
    "ReposOwnerRepoCheckRunsCheckRunIdPatchBodyPropActionsItemsType",
    "ReposOwnerRepoCheckRunsCheckRunIdPatchBodyAnyof0Type",
    "ReposOwnerRepoCheckRunsCheckRunIdPatchBodyAnyof1Type",
    "ReposOwnerRepoCheckSuitesPostBodyType",
    "ReposOwnerRepoCheckSuitesPreferencesPatchBodyType",
    "ReposOwnerRepoCheckSuitesPreferencesPatchBodyPropAutoTriggerChecksItemsType",
    "ReposOwnerRepoCheckSuitesCheckSuiteIdCheckRunsGetResponse200Type",
    "ReposOwnerRepoCodeScanningAlertsAlertNumberPatchBodyType",
    "ReposOwnerRepoCodeScanningSarifsPostBodyType",
    "ReposOwnerRepoCodespacesGetResponse200Type",
    "ReposOwnerRepoCodespacesPostBodyType",
    "ReposOwnerRepoCodespacesDevcontainersGetResponse200Type",
    "ReposOwnerRepoCodespacesDevcontainersGetResponse200PropDevcontainersItemsType",
    "ReposOwnerRepoCodespacesMachinesGetResponse200Type",
    "ReposOwnerRepoCodespacesNewGetResponse200Type",
    "ReposOwnerRepoCodespacesNewGetResponse200PropDefaultsType",
    "ReposOwnerRepoCodespacesSecretsGetResponse200Type",
    "ReposOwnerRepoCodespacesSecretsSecretNamePutBodyType",
    "ReposOwnerRepoCollaboratorsUsernamePutBodyType",
    "ReposOwnerRepoCommentsCommentIdPatchBodyType",
    "ReposOwnerRepoCommentsCommentIdReactionsPostBodyType",
    "ReposOwnerRepoCommitsCommitShaCommentsPostBodyType",
    "ReposOwnerRepoCommitsRefCheckRunsGetResponse200Type",
    "ReposOwnerRepoCommitsRefCheckSuitesGetResponse200Type",
    "ReposOwnerRepoContentsPathPutBodyType",
    "ReposOwnerRepoContentsPathPutBodyPropCommitterType",
    "ReposOwnerRepoContentsPathPutBodyPropAuthorType",
    "ReposOwnerRepoContentsPathDeleteBodyType",
    "ReposOwnerRepoContentsPathDeleteBodyPropCommitterType",
    "ReposOwnerRepoContentsPathDeleteBodyPropAuthorType",
    "ReposOwnerRepoDependabotAlertsAlertNumberPatchBodyType",
    "ReposOwnerRepoDependabotSecretsGetResponse200Type",
    "ReposOwnerRepoDependabotSecretsSecretNamePutBodyType",
    "ReposOwnerRepoDependencyGraphSnapshotsPostResponse201Type",
    "ReposOwnerRepoDeploymentsPostBodyType",
    "ReposOwnerRepoDeploymentsPostBodyPropPayloadOneof0Type",
    "ReposOwnerRepoDeploymentsPostResponse202Type",
    "ReposOwnerRepoDeploymentsDeploymentIdStatusesPostBodyType",
    "ReposOwnerRepoDispatchesPostBodyType",
    "ReposOwnerRepoDispatchesPostBodyPropClientPayloadType",
    "ReposOwnerRepoEnvironmentsGetResponse200Type",
    "ReposOwnerRepoEnvironmentsEnvironmentNamePutBodyPropReviewersItemsType",
    "ReposOwnerRepoEnvironmentsEnvironmentNamePutBodyType",
    "ReposOwnerRepoEnvironmentsEnvironmentNameDeploymentBranchPoliciesGetResponse200Type",
    "ReposOwnerRepoEnvironmentsEnvironmentNameDeploymentProtectionRulesGetResponse200Type",
    "ReposOwnerRepoEnvironmentsEnvironmentNameDeploymentProtectionRulesPostBodyType",
    "ReposOwnerRepoEnvironmentsEnvironmentNameDeploymentProtectionRulesAppsGetResponse200Type",
    "ReposOwnerRepoForksPostBodyType",
    "ReposOwnerRepoGitBlobsPostBodyType",
    "ReposOwnerRepoGitCommitsPostBodyType",
    "ReposOwnerRepoGitCommitsPostBodyPropAuthorType",
    "ReposOwnerRepoGitCommitsPostBodyPropCommitterType",
    "ReposOwnerRepoGitRefsPostBodyType",
    "ReposOwnerRepoGitRefsRefPatchBodyType",
    "ReposOwnerRepoGitTagsPostBodyType",
    "ReposOwnerRepoGitTagsPostBodyPropTaggerType",
    "ReposOwnerRepoGitTreesPostBodyType",
    "ReposOwnerRepoGitTreesPostBodyPropTreeItemsType",
    "ReposOwnerRepoHooksPostBodyPropConfigType",
    "ReposOwnerRepoHooksPostBodyType",
    "ReposOwnerRepoHooksHookIdPatchBodyType",
    "ReposOwnerRepoHooksHookIdPatchBodyPropConfigType",
    "ReposOwnerRepoHooksHookIdConfigPatchBodyType",
    "ReposOwnerRepoImportPutBodyType",
    "ReposOwnerRepoImportPatchBodyType",
    "ReposOwnerRepoImportAuthorsAuthorIdPatchBodyType",
    "ReposOwnerRepoImportLfsPatchBodyType",
    "ReposOwnerRepoInteractionLimitsGetResponse200Anyof1Type",
    "ReposOwnerRepoInvitationsInvitationIdPatchBodyType",
    "ReposOwnerRepoIssuesPostBodyType",
    "ReposOwnerRepoIssuesPostBodyPropLabelsItemsOneof1Type",
    "ReposOwnerRepoIssuesCommentsCommentIdPatchBodyType",
    "ReposOwnerRepoIssuesCommentsCommentIdReactionsPostBodyType",
    "ReposOwnerRepoIssuesIssueNumberPatchBodyType",
    "ReposOwnerRepoIssuesIssueNumberPatchBodyPropLabelsItemsOneof1Type",
    "ReposOwnerRepoIssuesIssueNumberAssigneesPostBodyType",
    "ReposOwnerRepoIssuesIssueNumberAssigneesDeleteBodyType",
    "ReposOwnerRepoIssuesIssueNumberCommentsPostBodyType",
    "ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof0Type",
    "ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof2Type",
    "ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof2PropLabelsItemsType",
    "ReposOwnerRepoIssuesIssueNumberLabelsPutBodyOneof3ItemsType",
    "ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof0Type",
    "ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof2Type",
    "ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof2PropLabelsItemsType",
    "ReposOwnerRepoIssuesIssueNumberLabelsPostBodyOneof3ItemsType",
    "ReposOwnerRepoIssuesIssueNumberLockPutBodyType",
    "ReposOwnerRepoIssuesIssueNumberReactionsPostBodyType",
    "ReposOwnerRepoKeysPostBodyType",
    "ReposOwnerRepoLabelsPostBodyType",
    "ReposOwnerRepoLabelsNamePatchBodyType",
    "ReposOwnerRepoMergeUpstreamPostBodyType",
    "ReposOwnerRepoMergesPostBodyType",
    "ReposOwnerRepoMilestonesPostBodyType",
    "ReposOwnerRepoMilestonesMilestoneNumberPatchBodyType",
    "ReposOwnerRepoNotificationsPutBodyType",
    "ReposOwnerRepoNotificationsPutResponse202Type",
    "ReposOwnerRepoPagesPutBodyPropSourceAnyof1Type",
    "ReposOwnerRepoPagesPutBodyAnyof0Type",
    "ReposOwnerRepoPagesPutBodyAnyof1Type",
    "ReposOwnerRepoPagesPutBodyAnyof2Type",
    "ReposOwnerRepoPagesPutBodyAnyof3Type",
    "ReposOwnerRepoPagesPutBodyAnyof4Type",
    "ReposOwnerRepoPagesPostBodyPropSourceType",
    "ReposOwnerRepoPagesPostBodyAnyof0Type",
    "ReposOwnerRepoPagesPostBodyAnyof1Type",
    "ReposOwnerRepoPagesDeploymentPostBodyType",
    "ReposOwnerRepoProjectsPostBodyType",
    "ReposOwnerRepoPullsPostBodyType",
    "ReposOwnerRepoPullsCommentsCommentIdPatchBodyType",
    "ReposOwnerRepoPullsCommentsCommentIdReactionsPostBodyType",
    "ReposOwnerRepoPullsPullNumberPatchBodyType",
    "ReposOwnerRepoPullsPullNumberCodespacesPostBodyType",
    "ReposOwnerRepoPullsPullNumberCommentsPostBodyType",
    "ReposOwnerRepoPullsPullNumberCommentsCommentIdRepliesPostBodyType",
    "ReposOwnerRepoPullsPullNumberMergePutBodyType",
    "ReposOwnerRepoPullsPullNumberMergePutResponse405Type",
    "ReposOwnerRepoPullsPullNumberMergePutResponse409Type",
    "ReposOwnerRepoPullsPullNumberRequestedReviewersPostBodyAnyof0Type",
    "ReposOwnerRepoPullsPullNumberRequestedReviewersPostBodyAnyof1Type",
    "ReposOwnerRepoPullsPullNumberRequestedReviewersDeleteBodyType",
    "ReposOwnerRepoPullsPullNumberReviewsPostBodyType",
    "ReposOwnerRepoPullsPullNumberReviewsPostBodyPropCommentsItemsType",
    "ReposOwnerRepoPullsPullNumberReviewsReviewIdPutBodyType",
    "ReposOwnerRepoPullsPullNumberReviewsReviewIdDismissalsPutBodyType",
    "ReposOwnerRepoPullsPullNumberReviewsReviewIdEventsPostBodyType",
    "ReposOwnerRepoPullsPullNumberUpdateBranchPutBodyType",
    "ReposOwnerRepoPullsPullNumberUpdateBranchPutResponse202Type",
    "ReposOwnerRepoReleasesPostBodyType",
    "ReposOwnerRepoReleasesAssetsAssetIdPatchBodyType",
    "ReposOwnerRepoReleasesGenerateNotesPostBodyType",
    "ReposOwnerRepoReleasesReleaseIdPatchBodyType",
    "ReposOwnerRepoReleasesReleaseIdReactionsPostBodyType",
    "ReposOwnerRepoRulesetsPostBodyType",
    "ReposOwnerRepoRulesetsRulesetIdPutBodyType",
    "ReposOwnerRepoSecretScanningAlertsAlertNumberPatchBodyType",
    "ReposOwnerRepoStatusesShaPostBodyType",
    "ReposOwnerRepoSubscriptionPutBodyType",
    "ReposOwnerRepoTagsProtectionPostBodyType",
    "ReposOwnerRepoTopicsPutBodyType",
    "ReposOwnerRepoTransferPostBodyType",
    "ReposTemplateOwnerTemplateRepoGeneratePostBodyType",
    "RepositoriesRepositoryIdEnvironmentsEnvironmentNameSecretsGetResponse200Type",
    "RepositoriesRepositoryIdEnvironmentsEnvironmentNameSecretsSecretNamePutBodyType",
    "RepositoriesRepositoryIdEnvironmentsEnvironmentNameVariablesGetResponse200Type",
    "RepositoriesRepositoryIdEnvironmentsEnvironmentNameVariablesPostBodyType",
    "RepositoriesRepositoryIdEnvironmentsEnvironmentNameVariablesNamePatchBodyType",
    "SearchCodeGetResponse200Type",
    "SearchCommitsGetResponse200Type",
    "SearchIssuesGetResponse200Type",
    "SearchLabelsGetResponse200Type",
    "SearchRepositoriesGetResponse200Type",
    "SearchTopicsGetResponse200Type",
    "SearchUsersGetResponse200Type",
    "TeamsTeamIdPatchBodyType",
    "TeamsTeamIdDiscussionsPostBodyType",
    "TeamsTeamIdDiscussionsDiscussionNumberPatchBodyType",
    "TeamsTeamIdDiscussionsDiscussionNumberCommentsPostBodyType",
    "TeamsTeamIdDiscussionsDiscussionNumberCommentsCommentNumberPatchBodyType",
    "TeamsTeamIdDiscussionsDiscussionNumberCommentsCommentNumberReactionsPostBodyType",
    "TeamsTeamIdDiscussionsDiscussionNumberReactionsPostBodyType",
    "TeamsTeamIdMembershipsUsernamePutBodyType",
    "TeamsTeamIdProjectsProjectIdPutBodyType",
    "TeamsTeamIdProjectsProjectIdPutResponse403Type",
    "TeamsTeamIdReposOwnerRepoPutBodyType",
    "UserPatchBodyType",
    "UserCodespacesGetResponse200Type",
    "UserCodespacesPostBodyOneof0Type",
    "UserCodespacesPostBodyOneof1Type",
    "UserCodespacesPostBodyOneof1PropPullRequestType",
    "UserCodespacesSecretsGetResponse200Type",
    "UserCodespacesSecretsSecretNamePutBodyType",
    "UserCodespacesSecretsSecretNameRepositoriesGetResponse200Type",
    "UserCodespacesSecretsSecretNameRepositoriesPutBodyType",
    "UserCodespacesCodespaceNamePatchBodyType",
    "UserCodespacesCodespaceNameMachinesGetResponse200Type",
    "UserCodespacesCodespaceNamePublishPostBodyType",
    "UserEmailVisibilityPatchBodyType",
    "UserEmailsPostBodyOneof0Type",
    "UserEmailsDeleteBodyOneof0Type",
    "UserGpgKeysPostBodyType",
    "UserInstallationsGetResponse200Type",
    "UserInstallationsInstallationIdRepositoriesGetResponse200Type",
    "UserInteractionLimitsGetResponse200Anyof1Type",
    "UserKeysPostBodyType",
    "UserMembershipsOrgsOrgPatchBodyType",
    "UserMigrationsPostBodyType",
    "UserProjectsPostBodyType",
    "UserReposPostBodyType",
    "UserSocialAccountsPostBodyType",
    "UserSocialAccountsDeleteBodyType",
    "UserSshSigningKeysPostBodyType",
)
