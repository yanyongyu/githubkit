"""DO NOT EDIT THIS FILE!

This file is automatically @generated by githubkit using the follow command:

bash ./scripts/run-codegen.sh

See https://github.com/github/rest-api-description for more information.
"""

from __future__ import annotations

from collections.abc import Mapping
from typing import TYPE_CHECKING, Optional, overload
from weakref import ref

from pydantic import BaseModel

from githubkit.compat import model_dump, type_validate_python
from githubkit.typing import Missing, UnsetType
from githubkit.utils import UNSET, exclude_unset

if TYPE_CHECKING:
    from githubkit import GitHubCore
    from githubkit.response import Response
    from githubkit.typing import Missing
    from githubkit.utils import UNSET

    from ..models import (
        CopilotOrganizationDetails,
        CopilotSeatDetails,
        CopilotUsageMetricsDay,
        EnterprisesEnterpriseCopilotBillingSeatsGetResponse200,
        OrgsOrgCopilotBillingSeatsGetResponse200,
        OrgsOrgCopilotBillingSelectedTeamsDeleteResponse200,
        OrgsOrgCopilotBillingSelectedTeamsPostResponse201,
        OrgsOrgCopilotBillingSelectedUsersDeleteResponse200,
        OrgsOrgCopilotBillingSelectedUsersPostResponse201,
    )
    from ..types import (
        CopilotOrganizationDetailsType,
        CopilotSeatDetailsType,
        CopilotUsageMetricsDayType,
        EnterprisesEnterpriseCopilotBillingSeatsGetResponse200Type,
        OrgsOrgCopilotBillingSeatsGetResponse200Type,
        OrgsOrgCopilotBillingSelectedTeamsDeleteBodyType,
        OrgsOrgCopilotBillingSelectedTeamsDeleteResponse200Type,
        OrgsOrgCopilotBillingSelectedTeamsPostBodyType,
        OrgsOrgCopilotBillingSelectedTeamsPostResponse201Type,
        OrgsOrgCopilotBillingSelectedUsersDeleteBodyType,
        OrgsOrgCopilotBillingSelectedUsersDeleteResponse200Type,
        OrgsOrgCopilotBillingSelectedUsersPostBodyType,
        OrgsOrgCopilotBillingSelectedUsersPostResponse201Type,
    )


class CopilotClient:
    _REST_API_VERSION = "2022-11-28"

    def __init__(self, github: GitHubCore):
        self._github_ref = ref(github)

    @property
    def _github(self) -> GitHubCore:
        if g := self._github_ref():
            return g
        raise RuntimeError(
            "GitHub client has already been collected. "
            "Do not use this client after the client has been collected."
        )

    def list_copilot_seats_for_enterprise(
        self,
        enterprise: str,
        *,
        page: Missing[int] = UNSET,
        per_page: Missing[int] = UNSET,
        headers: Optional[Mapping[str, str]] = None,
    ) -> Response[
        EnterprisesEnterpriseCopilotBillingSeatsGetResponse200,
        EnterprisesEnterpriseCopilotBillingSeatsGetResponse200Type,
    ]:
        """copilot/list-copilot-seats-for-enterprise

        GET /enterprises/{enterprise}/copilot/billing/seats

        > [!NOTE]
        > This endpoint is in public preview and is subject to change.

        Lists all Copilot seats currently being billed for across organizations or enterprise teams for an enterprise with a Copilot Business or Copilot Enterprise subscription.

        Users with access through multiple organizations or enterprise teams will only be counted toward `total_seats` once.

        For each organization or enterprise team which grants Copilot access to a user, a seat detail object will appear in the `seats` array.
        Each seat object contains information about the assigned user's most recent Copilot activity. Users must have
        telemetry enabled in their IDE for Copilot in the IDE activity to be reflected in `last_activity_at`. For more information about activity data,
        see "[Reviewing user activity data for Copilot in your organization](https://docs.github.com/enterprise-cloud@latest//copilot/managing-copilot/managing-github-copilot-in-your-organization/reviewing-activity-related-to-github-copilot-in-your-organization/reviewing-user-activity-data-for-copilot-in-your-organization)."

        Only enterprise owners and billing managers can view assigned Copilot seats across their child organizations or enterprise teams.

        Personal access tokens (classic) need either the `manage_billing:copilot` or `read:enterprise` scopes to use this endpoint.

        See also: https://docs.github.com/enterprise-cloud@latest//rest/copilot/copilot-user-management#list-all-copilot-seat-assignments-for-an-enterprise
        """

        from ..models import (
            BasicError,
            EnterprisesEnterpriseCopilotBillingSeatsGetResponse200,
        )

        url = f"/enterprises/{enterprise}/copilot/billing/seats"

        params = {
            "page": page,
            "per_page": per_page,
        }

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return self._github.request(
            "GET",
            url,
            params=exclude_unset(params),
            headers=exclude_unset(headers),
            response_model=EnterprisesEnterpriseCopilotBillingSeatsGetResponse200,
            error_models={
                "500": BasicError,
                "401": BasicError,
                "403": BasicError,
                "404": BasicError,
            },
        )

    async def async_list_copilot_seats_for_enterprise(
        self,
        enterprise: str,
        *,
        page: Missing[int] = UNSET,
        per_page: Missing[int] = UNSET,
        headers: Optional[Mapping[str, str]] = None,
    ) -> Response[
        EnterprisesEnterpriseCopilotBillingSeatsGetResponse200,
        EnterprisesEnterpriseCopilotBillingSeatsGetResponse200Type,
    ]:
        """copilot/list-copilot-seats-for-enterprise

        GET /enterprises/{enterprise}/copilot/billing/seats

        > [!NOTE]
        > This endpoint is in public preview and is subject to change.

        Lists all Copilot seats currently being billed for across organizations or enterprise teams for an enterprise with a Copilot Business or Copilot Enterprise subscription.

        Users with access through multiple organizations or enterprise teams will only be counted toward `total_seats` once.

        For each organization or enterprise team which grants Copilot access to a user, a seat detail object will appear in the `seats` array.
        Each seat object contains information about the assigned user's most recent Copilot activity. Users must have
        telemetry enabled in their IDE for Copilot in the IDE activity to be reflected in `last_activity_at`. For more information about activity data,
        see "[Reviewing user activity data for Copilot in your organization](https://docs.github.com/enterprise-cloud@latest//copilot/managing-copilot/managing-github-copilot-in-your-organization/reviewing-activity-related-to-github-copilot-in-your-organization/reviewing-user-activity-data-for-copilot-in-your-organization)."

        Only enterprise owners and billing managers can view assigned Copilot seats across their child organizations or enterprise teams.

        Personal access tokens (classic) need either the `manage_billing:copilot` or `read:enterprise` scopes to use this endpoint.

        See also: https://docs.github.com/enterprise-cloud@latest//rest/copilot/copilot-user-management#list-all-copilot-seat-assignments-for-an-enterprise
        """

        from ..models import (
            BasicError,
            EnterprisesEnterpriseCopilotBillingSeatsGetResponse200,
        )

        url = f"/enterprises/{enterprise}/copilot/billing/seats"

        params = {
            "page": page,
            "per_page": per_page,
        }

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return await self._github.arequest(
            "GET",
            url,
            params=exclude_unset(params),
            headers=exclude_unset(headers),
            response_model=EnterprisesEnterpriseCopilotBillingSeatsGetResponse200,
            error_models={
                "500": BasicError,
                "401": BasicError,
                "403": BasicError,
                "404": BasicError,
            },
        )

    def copilot_metrics_for_enterprise(
        self,
        enterprise: str,
        *,
        since: Missing[str] = UNSET,
        until: Missing[str] = UNSET,
        page: Missing[int] = UNSET,
        per_page: Missing[int] = UNSET,
        headers: Optional[Mapping[str, str]] = None,
    ) -> Response[list[CopilotUsageMetricsDay], list[CopilotUsageMetricsDayType]]:
        """copilot/copilot-metrics-for-enterprise

        GET /enterprises/{enterprise}/copilot/metrics

        Use this endpoint to see a breakdown of aggregated metrics for various GitHub Copilot features. See the response schema tab for detailed metrics definitions.

        The response contains metrics for up to 28 days prior. Metrics are processed once per day for the previous day,
        and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics,
        they must have telemetry enabled in their IDE.

        To access this endpoint, the Copilot Metrics API access policy must be enabled or set to "no policy" for the enterprise within GitHub settings.
        Only enterprise owners and billing managers can view Copilot metrics for the enterprise.

        OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:enterprise` scopes to use this endpoint.

        See also: https://docs.github.com/enterprise-cloud@latest//rest/copilot/copilot-metrics#get-copilot-metrics-for-an-enterprise
        """

        from ..models import BasicError, CopilotUsageMetricsDay

        url = f"/enterprises/{enterprise}/copilot/metrics"

        params = {
            "since": since,
            "until": until,
            "page": page,
            "per_page": per_page,
        }

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return self._github.request(
            "GET",
            url,
            params=exclude_unset(params),
            headers=exclude_unset(headers),
            response_model=list[CopilotUsageMetricsDay],
            error_models={
                "500": BasicError,
                "403": BasicError,
                "404": BasicError,
                "422": BasicError,
            },
        )

    async def async_copilot_metrics_for_enterprise(
        self,
        enterprise: str,
        *,
        since: Missing[str] = UNSET,
        until: Missing[str] = UNSET,
        page: Missing[int] = UNSET,
        per_page: Missing[int] = UNSET,
        headers: Optional[Mapping[str, str]] = None,
    ) -> Response[list[CopilotUsageMetricsDay], list[CopilotUsageMetricsDayType]]:
        """copilot/copilot-metrics-for-enterprise

        GET /enterprises/{enterprise}/copilot/metrics

        Use this endpoint to see a breakdown of aggregated metrics for various GitHub Copilot features. See the response schema tab for detailed metrics definitions.

        The response contains metrics for up to 28 days prior. Metrics are processed once per day for the previous day,
        and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics,
        they must have telemetry enabled in their IDE.

        To access this endpoint, the Copilot Metrics API access policy must be enabled or set to "no policy" for the enterprise within GitHub settings.
        Only enterprise owners and billing managers can view Copilot metrics for the enterprise.

        OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:enterprise` scopes to use this endpoint.

        See also: https://docs.github.com/enterprise-cloud@latest//rest/copilot/copilot-metrics#get-copilot-metrics-for-an-enterprise
        """

        from ..models import BasicError, CopilotUsageMetricsDay

        url = f"/enterprises/{enterprise}/copilot/metrics"

        params = {
            "since": since,
            "until": until,
            "page": page,
            "per_page": per_page,
        }

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return await self._github.arequest(
            "GET",
            url,
            params=exclude_unset(params),
            headers=exclude_unset(headers),
            response_model=list[CopilotUsageMetricsDay],
            error_models={
                "500": BasicError,
                "403": BasicError,
                "404": BasicError,
                "422": BasicError,
            },
        )

    def copilot_metrics_for_enterprise_team(
        self,
        enterprise: str,
        team_slug: str,
        *,
        since: Missing[str] = UNSET,
        until: Missing[str] = UNSET,
        page: Missing[int] = UNSET,
        per_page: Missing[int] = UNSET,
        headers: Optional[Mapping[str, str]] = None,
    ) -> Response[list[CopilotUsageMetricsDay], list[CopilotUsageMetricsDayType]]:
        """copilot/copilot-metrics-for-enterprise-team

        GET /enterprises/{enterprise}/team/{team_slug}/copilot/metrics

        > [!NOTE]
        > This endpoint is only applicable to dedicated enterprise accounts for Copilot Business. See "[About enterprise accounts for Copilot Business](https://docs.github.com/enterprise-cloud@latest//admin/copilot-business-only/about-enterprise-accounts-for-copilot-business)."

        Use this endpoint to see a breakdown of aggregated metrics for various GitHub Copilot features. See the response schema tab for detailed metrics definitions.

        The response contains metrics for up to 28 days prior. Metrics are processed once per day for the previous day,
        and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics,
        they must have telemetry enabled in their IDE.

        > [!NOTE]
        > This endpoint will only return results for a given day if the enterprise team had **five or more members with active Copilot licenses** on that day, as evaluated at the end of that day.

        To access this endpoint, the Copilot Metrics API access policy must be enabled or set to "no policy" for the enterprise within GitHub settings.
        Only owners and billing managers for the enterprise that contains the enterprise team can view Copilot metrics for the enterprise team.

        OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:enterprise` scopes to use this endpoint.

        See also: https://docs.github.com/enterprise-cloud@latest//rest/copilot/copilot-metrics#get-copilot-metrics-for-an-enterprise-team
        """

        from ..models import BasicError, CopilotUsageMetricsDay

        url = f"/enterprises/{enterprise}/team/{team_slug}/copilot/metrics"

        params = {
            "since": since,
            "until": until,
            "page": page,
            "per_page": per_page,
        }

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return self._github.request(
            "GET",
            url,
            params=exclude_unset(params),
            headers=exclude_unset(headers),
            response_model=list[CopilotUsageMetricsDay],
            error_models={
                "500": BasicError,
                "403": BasicError,
                "404": BasicError,
                "422": BasicError,
            },
        )

    async def async_copilot_metrics_for_enterprise_team(
        self,
        enterprise: str,
        team_slug: str,
        *,
        since: Missing[str] = UNSET,
        until: Missing[str] = UNSET,
        page: Missing[int] = UNSET,
        per_page: Missing[int] = UNSET,
        headers: Optional[Mapping[str, str]] = None,
    ) -> Response[list[CopilotUsageMetricsDay], list[CopilotUsageMetricsDayType]]:
        """copilot/copilot-metrics-for-enterprise-team

        GET /enterprises/{enterprise}/team/{team_slug}/copilot/metrics

        > [!NOTE]
        > This endpoint is only applicable to dedicated enterprise accounts for Copilot Business. See "[About enterprise accounts for Copilot Business](https://docs.github.com/enterprise-cloud@latest//admin/copilot-business-only/about-enterprise-accounts-for-copilot-business)."

        Use this endpoint to see a breakdown of aggregated metrics for various GitHub Copilot features. See the response schema tab for detailed metrics definitions.

        The response contains metrics for up to 28 days prior. Metrics are processed once per day for the previous day,
        and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics,
        they must have telemetry enabled in their IDE.

        > [!NOTE]
        > This endpoint will only return results for a given day if the enterprise team had **five or more members with active Copilot licenses** on that day, as evaluated at the end of that day.

        To access this endpoint, the Copilot Metrics API access policy must be enabled or set to "no policy" for the enterprise within GitHub settings.
        Only owners and billing managers for the enterprise that contains the enterprise team can view Copilot metrics for the enterprise team.

        OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:enterprise` scopes to use this endpoint.

        See also: https://docs.github.com/enterprise-cloud@latest//rest/copilot/copilot-metrics#get-copilot-metrics-for-an-enterprise-team
        """

        from ..models import BasicError, CopilotUsageMetricsDay

        url = f"/enterprises/{enterprise}/team/{team_slug}/copilot/metrics"

        params = {
            "since": since,
            "until": until,
            "page": page,
            "per_page": per_page,
        }

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return await self._github.arequest(
            "GET",
            url,
            params=exclude_unset(params),
            headers=exclude_unset(headers),
            response_model=list[CopilotUsageMetricsDay],
            error_models={
                "500": BasicError,
                "403": BasicError,
                "404": BasicError,
                "422": BasicError,
            },
        )

    def get_copilot_organization_details(
        self,
        org: str,
        *,
        headers: Optional[Mapping[str, str]] = None,
    ) -> Response[CopilotOrganizationDetails, CopilotOrganizationDetailsType]:
        """copilot/get-copilot-organization-details

        GET /orgs/{org}/copilot/billing

        > [!NOTE]
        > This endpoint is in public preview and is subject to change.

        Gets information about an organization's Copilot subscription, including seat breakdown
        and feature policies. To configure these settings, go to your organization's settings on GitHub.com.
        For more information, see "[Managing policies for Copilot in your organization](https://docs.github.com/enterprise-cloud@latest//copilot/managing-copilot/managing-policies-for-copilot-business-in-your-organization)."

        Only organization owners can view details about the organization's Copilot Business or Copilot Enterprise subscription.

        OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:org` scopes to use this endpoint.

        See also: https://docs.github.com/enterprise-cloud@latest//rest/copilot/copilot-user-management#get-copilot-seat-information-and-settings-for-an-organization
        """

        from ..models import BasicError, CopilotOrganizationDetails

        url = f"/orgs/{org}/copilot/billing"

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return self._github.request(
            "GET",
            url,
            headers=exclude_unset(headers),
            response_model=CopilotOrganizationDetails,
            error_models={
                "500": BasicError,
                "401": BasicError,
                "403": BasicError,
                "404": BasicError,
            },
        )

    async def async_get_copilot_organization_details(
        self,
        org: str,
        *,
        headers: Optional[Mapping[str, str]] = None,
    ) -> Response[CopilotOrganizationDetails, CopilotOrganizationDetailsType]:
        """copilot/get-copilot-organization-details

        GET /orgs/{org}/copilot/billing

        > [!NOTE]
        > This endpoint is in public preview and is subject to change.

        Gets information about an organization's Copilot subscription, including seat breakdown
        and feature policies. To configure these settings, go to your organization's settings on GitHub.com.
        For more information, see "[Managing policies for Copilot in your organization](https://docs.github.com/enterprise-cloud@latest//copilot/managing-copilot/managing-policies-for-copilot-business-in-your-organization)."

        Only organization owners can view details about the organization's Copilot Business or Copilot Enterprise subscription.

        OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:org` scopes to use this endpoint.

        See also: https://docs.github.com/enterprise-cloud@latest//rest/copilot/copilot-user-management#get-copilot-seat-information-and-settings-for-an-organization
        """

        from ..models import BasicError, CopilotOrganizationDetails

        url = f"/orgs/{org}/copilot/billing"

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return await self._github.arequest(
            "GET",
            url,
            headers=exclude_unset(headers),
            response_model=CopilotOrganizationDetails,
            error_models={
                "500": BasicError,
                "401": BasicError,
                "403": BasicError,
                "404": BasicError,
            },
        )

    def list_copilot_seats(
        self,
        org: str,
        *,
        page: Missing[int] = UNSET,
        per_page: Missing[int] = UNSET,
        headers: Optional[Mapping[str, str]] = None,
    ) -> Response[
        OrgsOrgCopilotBillingSeatsGetResponse200,
        OrgsOrgCopilotBillingSeatsGetResponse200Type,
    ]:
        """copilot/list-copilot-seats

        GET /orgs/{org}/copilot/billing/seats

        > [!NOTE]
        > This endpoint is in public preview and is subject to change.

        Lists all Copilot seats for which an organization with a Copilot Business or Copilot Enterprise subscription is currently being billed.
        Only organization owners can view assigned seats.

        Each seat object contains information about the assigned user's most recent Copilot activity. Users must have telemetry enabled in their IDE for Copilot in the IDE activity to be reflected in `last_activity_at`.
        For more information about activity data, see "[Reviewing user activity data for Copilot in your organization](https://docs.github.com/enterprise-cloud@latest//copilot/managing-copilot/managing-github-copilot-in-your-organization/reviewing-activity-related-to-github-copilot-in-your-organization/reviewing-user-activity-data-for-copilot-in-your-organization)."

        OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:org` scopes to use this endpoint.

        See also: https://docs.github.com/enterprise-cloud@latest//rest/copilot/copilot-user-management#list-all-copilot-seat-assignments-for-an-organization
        """

        from ..models import BasicError, OrgsOrgCopilotBillingSeatsGetResponse200

        url = f"/orgs/{org}/copilot/billing/seats"

        params = {
            "page": page,
            "per_page": per_page,
        }

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return self._github.request(
            "GET",
            url,
            params=exclude_unset(params),
            headers=exclude_unset(headers),
            response_model=OrgsOrgCopilotBillingSeatsGetResponse200,
            error_models={
                "500": BasicError,
                "401": BasicError,
                "403": BasicError,
                "404": BasicError,
            },
        )

    async def async_list_copilot_seats(
        self,
        org: str,
        *,
        page: Missing[int] = UNSET,
        per_page: Missing[int] = UNSET,
        headers: Optional[Mapping[str, str]] = None,
    ) -> Response[
        OrgsOrgCopilotBillingSeatsGetResponse200,
        OrgsOrgCopilotBillingSeatsGetResponse200Type,
    ]:
        """copilot/list-copilot-seats

        GET /orgs/{org}/copilot/billing/seats

        > [!NOTE]
        > This endpoint is in public preview and is subject to change.

        Lists all Copilot seats for which an organization with a Copilot Business or Copilot Enterprise subscription is currently being billed.
        Only organization owners can view assigned seats.

        Each seat object contains information about the assigned user's most recent Copilot activity. Users must have telemetry enabled in their IDE for Copilot in the IDE activity to be reflected in `last_activity_at`.
        For more information about activity data, see "[Reviewing user activity data for Copilot in your organization](https://docs.github.com/enterprise-cloud@latest//copilot/managing-copilot/managing-github-copilot-in-your-organization/reviewing-activity-related-to-github-copilot-in-your-organization/reviewing-user-activity-data-for-copilot-in-your-organization)."

        OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:org` scopes to use this endpoint.

        See also: https://docs.github.com/enterprise-cloud@latest//rest/copilot/copilot-user-management#list-all-copilot-seat-assignments-for-an-organization
        """

        from ..models import BasicError, OrgsOrgCopilotBillingSeatsGetResponse200

        url = f"/orgs/{org}/copilot/billing/seats"

        params = {
            "page": page,
            "per_page": per_page,
        }

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return await self._github.arequest(
            "GET",
            url,
            params=exclude_unset(params),
            headers=exclude_unset(headers),
            response_model=OrgsOrgCopilotBillingSeatsGetResponse200,
            error_models={
                "500": BasicError,
                "401": BasicError,
                "403": BasicError,
                "404": BasicError,
            },
        )

    @overload
    def add_copilot_seats_for_teams(
        self,
        org: str,
        *,
        headers: Optional[Mapping[str, str]] = None,
        data: OrgsOrgCopilotBillingSelectedTeamsPostBodyType,
    ) -> Response[
        OrgsOrgCopilotBillingSelectedTeamsPostResponse201,
        OrgsOrgCopilotBillingSelectedTeamsPostResponse201Type,
    ]: ...

    @overload
    def add_copilot_seats_for_teams(
        self,
        org: str,
        *,
        data: UnsetType = UNSET,
        headers: Optional[Mapping[str, str]] = None,
        selected_teams: list[str],
    ) -> Response[
        OrgsOrgCopilotBillingSelectedTeamsPostResponse201,
        OrgsOrgCopilotBillingSelectedTeamsPostResponse201Type,
    ]: ...

    def add_copilot_seats_for_teams(
        self,
        org: str,
        *,
        headers: Optional[Mapping[str, str]] = None,
        data: Missing[OrgsOrgCopilotBillingSelectedTeamsPostBodyType] = UNSET,
        **kwargs,
    ) -> Response[
        OrgsOrgCopilotBillingSelectedTeamsPostResponse201,
        OrgsOrgCopilotBillingSelectedTeamsPostResponse201Type,
    ]:
        """copilot/add-copilot-seats-for-teams

        POST /orgs/{org}/copilot/billing/selected_teams

        > [!NOTE]
        > This endpoint is in public preview and is subject to change.

        Purchases a GitHub Copilot seat for all users within each specified team.
        The organization will be billed for each seat based on the organization's Copilot plan. For more information about Copilot pricing, see "[About billing for GitHub Copilot in your organization](https://docs.github.com/enterprise-cloud@latest//copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/about-billing-for-github-copilot-in-your-organization)."

        Only organization owners can purchase Copilot seats for their organization members. The organization must have a Copilot Business or Copilot Enterprise subscription and a configured suggestion matching policy.
        For more information about setting up a Copilot subscription, see "[Subscribing to Copilot for your organization](https://docs.github.com/enterprise-cloud@latest//copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/subscribing-to-copilot-for-your-organization)."
        For more information about setting a suggestion matching policy, see "[Managing policies for Copilot in your organization](https://docs.github.com/enterprise-cloud@latest//copilot/managing-copilot/managing-github-copilot-in-your-organization/setting-policies-for-copilot-in-your-organization/managing-policies-for-copilot-in-your-organization#policies-for-suggestion-matching)."

        The response contains the total number of new seats that were created and existing seats that were refreshed.

        OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.

        See also: https://docs.github.com/enterprise-cloud@latest//rest/copilot/copilot-user-management#add-teams-to-the-copilot-subscription-for-an-organization
        """

        from ..models import (
            BasicError,
            OrgsOrgCopilotBillingSelectedTeamsPostBody,
            OrgsOrgCopilotBillingSelectedTeamsPostResponse201,
        )

        url = f"/orgs/{org}/copilot/billing/selected_teams"

        headers = {
            "Content-Type": "application/json",
            "X-GitHub-Api-Version": self._REST_API_VERSION,
            **(headers or {}),
        }

        json = kwargs if data is UNSET else data
        if self._github.config.rest_api_validate_body:
            json = type_validate_python(
                OrgsOrgCopilotBillingSelectedTeamsPostBody, json
            )
        json = model_dump(json) if isinstance(json, BaseModel) else json

        return self._github.request(
            "POST",
            url,
            json=exclude_unset(json),
            headers=exclude_unset(headers),
            response_model=OrgsOrgCopilotBillingSelectedTeamsPostResponse201,
            error_models={
                "500": BasicError,
                "401": BasicError,
                "403": BasicError,
                "404": BasicError,
            },
        )

    @overload
    async def async_add_copilot_seats_for_teams(
        self,
        org: str,
        *,
        headers: Optional[Mapping[str, str]] = None,
        data: OrgsOrgCopilotBillingSelectedTeamsPostBodyType,
    ) -> Response[
        OrgsOrgCopilotBillingSelectedTeamsPostResponse201,
        OrgsOrgCopilotBillingSelectedTeamsPostResponse201Type,
    ]: ...

    @overload
    async def async_add_copilot_seats_for_teams(
        self,
        org: str,
        *,
        data: UnsetType = UNSET,
        headers: Optional[Mapping[str, str]] = None,
        selected_teams: list[str],
    ) -> Response[
        OrgsOrgCopilotBillingSelectedTeamsPostResponse201,
        OrgsOrgCopilotBillingSelectedTeamsPostResponse201Type,
    ]: ...

    async def async_add_copilot_seats_for_teams(
        self,
        org: str,
        *,
        headers: Optional[Mapping[str, str]] = None,
        data: Missing[OrgsOrgCopilotBillingSelectedTeamsPostBodyType] = UNSET,
        **kwargs,
    ) -> Response[
        OrgsOrgCopilotBillingSelectedTeamsPostResponse201,
        OrgsOrgCopilotBillingSelectedTeamsPostResponse201Type,
    ]:
        """copilot/add-copilot-seats-for-teams

        POST /orgs/{org}/copilot/billing/selected_teams

        > [!NOTE]
        > This endpoint is in public preview and is subject to change.

        Purchases a GitHub Copilot seat for all users within each specified team.
        The organization will be billed for each seat based on the organization's Copilot plan. For more information about Copilot pricing, see "[About billing for GitHub Copilot in your organization](https://docs.github.com/enterprise-cloud@latest//copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/about-billing-for-github-copilot-in-your-organization)."

        Only organization owners can purchase Copilot seats for their organization members. The organization must have a Copilot Business or Copilot Enterprise subscription and a configured suggestion matching policy.
        For more information about setting up a Copilot subscription, see "[Subscribing to Copilot for your organization](https://docs.github.com/enterprise-cloud@latest//copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/subscribing-to-copilot-for-your-organization)."
        For more information about setting a suggestion matching policy, see "[Managing policies for Copilot in your organization](https://docs.github.com/enterprise-cloud@latest//copilot/managing-copilot/managing-github-copilot-in-your-organization/setting-policies-for-copilot-in-your-organization/managing-policies-for-copilot-in-your-organization#policies-for-suggestion-matching)."

        The response contains the total number of new seats that were created and existing seats that were refreshed.

        OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.

        See also: https://docs.github.com/enterprise-cloud@latest//rest/copilot/copilot-user-management#add-teams-to-the-copilot-subscription-for-an-organization
        """

        from ..models import (
            BasicError,
            OrgsOrgCopilotBillingSelectedTeamsPostBody,
            OrgsOrgCopilotBillingSelectedTeamsPostResponse201,
        )

        url = f"/orgs/{org}/copilot/billing/selected_teams"

        headers = {
            "Content-Type": "application/json",
            "X-GitHub-Api-Version": self._REST_API_VERSION,
            **(headers or {}),
        }

        json = kwargs if data is UNSET else data
        if self._github.config.rest_api_validate_body:
            json = type_validate_python(
                OrgsOrgCopilotBillingSelectedTeamsPostBody, json
            )
        json = model_dump(json) if isinstance(json, BaseModel) else json

        return await self._github.arequest(
            "POST",
            url,
            json=exclude_unset(json),
            headers=exclude_unset(headers),
            response_model=OrgsOrgCopilotBillingSelectedTeamsPostResponse201,
            error_models={
                "500": BasicError,
                "401": BasicError,
                "403": BasicError,
                "404": BasicError,
            },
        )

    @overload
    def cancel_copilot_seat_assignment_for_teams(
        self,
        org: str,
        *,
        headers: Optional[Mapping[str, str]] = None,
        data: OrgsOrgCopilotBillingSelectedTeamsDeleteBodyType,
    ) -> Response[
        OrgsOrgCopilotBillingSelectedTeamsDeleteResponse200,
        OrgsOrgCopilotBillingSelectedTeamsDeleteResponse200Type,
    ]: ...

    @overload
    def cancel_copilot_seat_assignment_for_teams(
        self,
        org: str,
        *,
        data: UnsetType = UNSET,
        headers: Optional[Mapping[str, str]] = None,
        selected_teams: list[str],
    ) -> Response[
        OrgsOrgCopilotBillingSelectedTeamsDeleteResponse200,
        OrgsOrgCopilotBillingSelectedTeamsDeleteResponse200Type,
    ]: ...

    def cancel_copilot_seat_assignment_for_teams(
        self,
        org: str,
        *,
        headers: Optional[Mapping[str, str]] = None,
        data: Missing[OrgsOrgCopilotBillingSelectedTeamsDeleteBodyType] = UNSET,
        **kwargs,
    ) -> Response[
        OrgsOrgCopilotBillingSelectedTeamsDeleteResponse200,
        OrgsOrgCopilotBillingSelectedTeamsDeleteResponse200Type,
    ]:
        """copilot/cancel-copilot-seat-assignment-for-teams

        DELETE /orgs/{org}/copilot/billing/selected_teams

        > [!NOTE]
        > This endpoint is in public preview and is subject to change.

        Sets seats for all members of each team specified to "pending cancellation".
        This will cause the members of the specified team(s) to lose access to GitHub Copilot at the end of the current billing cycle unless they retain access through another team.
        For more information about disabling access to Copilot, see "[Revoking access to Copilot for members of your organization](https://docs.github.com/enterprise-cloud@latest//copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-access-to-github-copilot-in-your-organization/revoking-access-to-copilot-for-members-of-your-organization)."

        Only organization owners can cancel Copilot seats for their organization members.

        The response contains the total number of seats set to "pending cancellation".

        OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.

        See also: https://docs.github.com/enterprise-cloud@latest//rest/copilot/copilot-user-management#remove-teams-from-the-copilot-subscription-for-an-organization
        """

        from ..models import (
            BasicError,
            OrgsOrgCopilotBillingSelectedTeamsDeleteBody,
            OrgsOrgCopilotBillingSelectedTeamsDeleteResponse200,
        )

        url = f"/orgs/{org}/copilot/billing/selected_teams"

        headers = {
            "Content-Type": "application/json",
            "X-GitHub-Api-Version": self._REST_API_VERSION,
            **(headers or {}),
        }

        json = kwargs if data is UNSET else data
        if self._github.config.rest_api_validate_body:
            json = type_validate_python(
                OrgsOrgCopilotBillingSelectedTeamsDeleteBody, json
            )
        json = model_dump(json) if isinstance(json, BaseModel) else json

        return self._github.request(
            "DELETE",
            url,
            json=exclude_unset(json),
            headers=exclude_unset(headers),
            response_model=OrgsOrgCopilotBillingSelectedTeamsDeleteResponse200,
            error_models={
                "500": BasicError,
                "401": BasicError,
                "403": BasicError,
                "404": BasicError,
            },
        )

    @overload
    async def async_cancel_copilot_seat_assignment_for_teams(
        self,
        org: str,
        *,
        headers: Optional[Mapping[str, str]] = None,
        data: OrgsOrgCopilotBillingSelectedTeamsDeleteBodyType,
    ) -> Response[
        OrgsOrgCopilotBillingSelectedTeamsDeleteResponse200,
        OrgsOrgCopilotBillingSelectedTeamsDeleteResponse200Type,
    ]: ...

    @overload
    async def async_cancel_copilot_seat_assignment_for_teams(
        self,
        org: str,
        *,
        data: UnsetType = UNSET,
        headers: Optional[Mapping[str, str]] = None,
        selected_teams: list[str],
    ) -> Response[
        OrgsOrgCopilotBillingSelectedTeamsDeleteResponse200,
        OrgsOrgCopilotBillingSelectedTeamsDeleteResponse200Type,
    ]: ...

    async def async_cancel_copilot_seat_assignment_for_teams(
        self,
        org: str,
        *,
        headers: Optional[Mapping[str, str]] = None,
        data: Missing[OrgsOrgCopilotBillingSelectedTeamsDeleteBodyType] = UNSET,
        **kwargs,
    ) -> Response[
        OrgsOrgCopilotBillingSelectedTeamsDeleteResponse200,
        OrgsOrgCopilotBillingSelectedTeamsDeleteResponse200Type,
    ]:
        """copilot/cancel-copilot-seat-assignment-for-teams

        DELETE /orgs/{org}/copilot/billing/selected_teams

        > [!NOTE]
        > This endpoint is in public preview and is subject to change.

        Sets seats for all members of each team specified to "pending cancellation".
        This will cause the members of the specified team(s) to lose access to GitHub Copilot at the end of the current billing cycle unless they retain access through another team.
        For more information about disabling access to Copilot, see "[Revoking access to Copilot for members of your organization](https://docs.github.com/enterprise-cloud@latest//copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-access-to-github-copilot-in-your-organization/revoking-access-to-copilot-for-members-of-your-organization)."

        Only organization owners can cancel Copilot seats for their organization members.

        The response contains the total number of seats set to "pending cancellation".

        OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.

        See also: https://docs.github.com/enterprise-cloud@latest//rest/copilot/copilot-user-management#remove-teams-from-the-copilot-subscription-for-an-organization
        """

        from ..models import (
            BasicError,
            OrgsOrgCopilotBillingSelectedTeamsDeleteBody,
            OrgsOrgCopilotBillingSelectedTeamsDeleteResponse200,
        )

        url = f"/orgs/{org}/copilot/billing/selected_teams"

        headers = {
            "Content-Type": "application/json",
            "X-GitHub-Api-Version": self._REST_API_VERSION,
            **(headers or {}),
        }

        json = kwargs if data is UNSET else data
        if self._github.config.rest_api_validate_body:
            json = type_validate_python(
                OrgsOrgCopilotBillingSelectedTeamsDeleteBody, json
            )
        json = model_dump(json) if isinstance(json, BaseModel) else json

        return await self._github.arequest(
            "DELETE",
            url,
            json=exclude_unset(json),
            headers=exclude_unset(headers),
            response_model=OrgsOrgCopilotBillingSelectedTeamsDeleteResponse200,
            error_models={
                "500": BasicError,
                "401": BasicError,
                "403": BasicError,
                "404": BasicError,
            },
        )

    @overload
    def add_copilot_seats_for_users(
        self,
        org: str,
        *,
        headers: Optional[Mapping[str, str]] = None,
        data: OrgsOrgCopilotBillingSelectedUsersPostBodyType,
    ) -> Response[
        OrgsOrgCopilotBillingSelectedUsersPostResponse201,
        OrgsOrgCopilotBillingSelectedUsersPostResponse201Type,
    ]: ...

    @overload
    def add_copilot_seats_for_users(
        self,
        org: str,
        *,
        data: UnsetType = UNSET,
        headers: Optional[Mapping[str, str]] = None,
        selected_usernames: list[str],
    ) -> Response[
        OrgsOrgCopilotBillingSelectedUsersPostResponse201,
        OrgsOrgCopilotBillingSelectedUsersPostResponse201Type,
    ]: ...

    def add_copilot_seats_for_users(
        self,
        org: str,
        *,
        headers: Optional[Mapping[str, str]] = None,
        data: Missing[OrgsOrgCopilotBillingSelectedUsersPostBodyType] = UNSET,
        **kwargs,
    ) -> Response[
        OrgsOrgCopilotBillingSelectedUsersPostResponse201,
        OrgsOrgCopilotBillingSelectedUsersPostResponse201Type,
    ]:
        """copilot/add-copilot-seats-for-users

        POST /orgs/{org}/copilot/billing/selected_users

        > [!NOTE]
        > This endpoint is in public preview and is subject to change.

        Purchases a GitHub Copilot seat for each user specified.
        The organization will be billed for each seat based on the organization's Copilot plan. For more information about Copilot pricing, see "[About billing for GitHub Copilot in your organization](https://docs.github.com/enterprise-cloud@latest//copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/about-billing-for-github-copilot-in-your-organization)."

        Only organization owners can purchase Copilot seats for their organization members. The organization must have a Copilot Business or Copilot Enterprise subscription and a configured suggestion matching policy.
        For more information about setting up a Copilot subscription, see "[Subscribing to Copilot for your organization](https://docs.github.com/enterprise-cloud@latest//copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/subscribing-to-copilot-for-your-organization)."
        For more information about setting a suggestion matching policy, see "[Managing policies for Copilot in your organization](https://docs.github.com/enterprise-cloud@latest//copilot/managing-copilot/managing-github-copilot-in-your-organization/setting-policies-for-copilot-in-your-organization/managing-policies-for-copilot-in-your-organization#policies-for-suggestion-matching)."

        The response contains the total number of new seats that were created and existing seats that were refreshed.

        OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.

        See also: https://docs.github.com/enterprise-cloud@latest//rest/copilot/copilot-user-management#add-users-to-the-copilot-subscription-for-an-organization
        """

        from ..models import (
            BasicError,
            OrgsOrgCopilotBillingSelectedUsersPostBody,
            OrgsOrgCopilotBillingSelectedUsersPostResponse201,
        )

        url = f"/orgs/{org}/copilot/billing/selected_users"

        headers = {
            "Content-Type": "application/json",
            "X-GitHub-Api-Version": self._REST_API_VERSION,
            **(headers or {}),
        }

        json = kwargs if data is UNSET else data
        if self._github.config.rest_api_validate_body:
            json = type_validate_python(
                OrgsOrgCopilotBillingSelectedUsersPostBody, json
            )
        json = model_dump(json) if isinstance(json, BaseModel) else json

        return self._github.request(
            "POST",
            url,
            json=exclude_unset(json),
            headers=exclude_unset(headers),
            response_model=OrgsOrgCopilotBillingSelectedUsersPostResponse201,
            error_models={
                "500": BasicError,
                "401": BasicError,
                "403": BasicError,
                "404": BasicError,
            },
        )

    @overload
    async def async_add_copilot_seats_for_users(
        self,
        org: str,
        *,
        headers: Optional[Mapping[str, str]] = None,
        data: OrgsOrgCopilotBillingSelectedUsersPostBodyType,
    ) -> Response[
        OrgsOrgCopilotBillingSelectedUsersPostResponse201,
        OrgsOrgCopilotBillingSelectedUsersPostResponse201Type,
    ]: ...

    @overload
    async def async_add_copilot_seats_for_users(
        self,
        org: str,
        *,
        data: UnsetType = UNSET,
        headers: Optional[Mapping[str, str]] = None,
        selected_usernames: list[str],
    ) -> Response[
        OrgsOrgCopilotBillingSelectedUsersPostResponse201,
        OrgsOrgCopilotBillingSelectedUsersPostResponse201Type,
    ]: ...

    async def async_add_copilot_seats_for_users(
        self,
        org: str,
        *,
        headers: Optional[Mapping[str, str]] = None,
        data: Missing[OrgsOrgCopilotBillingSelectedUsersPostBodyType] = UNSET,
        **kwargs,
    ) -> Response[
        OrgsOrgCopilotBillingSelectedUsersPostResponse201,
        OrgsOrgCopilotBillingSelectedUsersPostResponse201Type,
    ]:
        """copilot/add-copilot-seats-for-users

        POST /orgs/{org}/copilot/billing/selected_users

        > [!NOTE]
        > This endpoint is in public preview and is subject to change.

        Purchases a GitHub Copilot seat for each user specified.
        The organization will be billed for each seat based on the organization's Copilot plan. For more information about Copilot pricing, see "[About billing for GitHub Copilot in your organization](https://docs.github.com/enterprise-cloud@latest//copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/about-billing-for-github-copilot-in-your-organization)."

        Only organization owners can purchase Copilot seats for their organization members. The organization must have a Copilot Business or Copilot Enterprise subscription and a configured suggestion matching policy.
        For more information about setting up a Copilot subscription, see "[Subscribing to Copilot for your organization](https://docs.github.com/enterprise-cloud@latest//copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/subscribing-to-copilot-for-your-organization)."
        For more information about setting a suggestion matching policy, see "[Managing policies for Copilot in your organization](https://docs.github.com/enterprise-cloud@latest//copilot/managing-copilot/managing-github-copilot-in-your-organization/setting-policies-for-copilot-in-your-organization/managing-policies-for-copilot-in-your-organization#policies-for-suggestion-matching)."

        The response contains the total number of new seats that were created and existing seats that were refreshed.

        OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.

        See also: https://docs.github.com/enterprise-cloud@latest//rest/copilot/copilot-user-management#add-users-to-the-copilot-subscription-for-an-organization
        """

        from ..models import (
            BasicError,
            OrgsOrgCopilotBillingSelectedUsersPostBody,
            OrgsOrgCopilotBillingSelectedUsersPostResponse201,
        )

        url = f"/orgs/{org}/copilot/billing/selected_users"

        headers = {
            "Content-Type": "application/json",
            "X-GitHub-Api-Version": self._REST_API_VERSION,
            **(headers or {}),
        }

        json = kwargs if data is UNSET else data
        if self._github.config.rest_api_validate_body:
            json = type_validate_python(
                OrgsOrgCopilotBillingSelectedUsersPostBody, json
            )
        json = model_dump(json) if isinstance(json, BaseModel) else json

        return await self._github.arequest(
            "POST",
            url,
            json=exclude_unset(json),
            headers=exclude_unset(headers),
            response_model=OrgsOrgCopilotBillingSelectedUsersPostResponse201,
            error_models={
                "500": BasicError,
                "401": BasicError,
                "403": BasicError,
                "404": BasicError,
            },
        )

    @overload
    def cancel_copilot_seat_assignment_for_users(
        self,
        org: str,
        *,
        headers: Optional[Mapping[str, str]] = None,
        data: OrgsOrgCopilotBillingSelectedUsersDeleteBodyType,
    ) -> Response[
        OrgsOrgCopilotBillingSelectedUsersDeleteResponse200,
        OrgsOrgCopilotBillingSelectedUsersDeleteResponse200Type,
    ]: ...

    @overload
    def cancel_copilot_seat_assignment_for_users(
        self,
        org: str,
        *,
        data: UnsetType = UNSET,
        headers: Optional[Mapping[str, str]] = None,
        selected_usernames: list[str],
    ) -> Response[
        OrgsOrgCopilotBillingSelectedUsersDeleteResponse200,
        OrgsOrgCopilotBillingSelectedUsersDeleteResponse200Type,
    ]: ...

    def cancel_copilot_seat_assignment_for_users(
        self,
        org: str,
        *,
        headers: Optional[Mapping[str, str]] = None,
        data: Missing[OrgsOrgCopilotBillingSelectedUsersDeleteBodyType] = UNSET,
        **kwargs,
    ) -> Response[
        OrgsOrgCopilotBillingSelectedUsersDeleteResponse200,
        OrgsOrgCopilotBillingSelectedUsersDeleteResponse200Type,
    ]:
        """copilot/cancel-copilot-seat-assignment-for-users

        DELETE /orgs/{org}/copilot/billing/selected_users

        > [!NOTE]
        > This endpoint is in public preview and is subject to change.

        Sets seats for all users specified to "pending cancellation".
        This will cause the specified users to lose access to GitHub Copilot at the end of the current billing cycle unless they retain access through team membership.
        For more information about disabling access to Copilot, see "[Revoking access to Copilot for members of your organization](https://docs.github.com/enterprise-cloud@latest//copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-access-to-github-copilot-in-your-organization/revoking-access-to-copilot-for-members-of-your-organization)."

        Only organization owners can cancel Copilot seats for their organization members.

        The response contains the total number of seats set to "pending cancellation".

        OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.

        See also: https://docs.github.com/enterprise-cloud@latest//rest/copilot/copilot-user-management#remove-users-from-the-copilot-subscription-for-an-organization
        """

        from ..models import (
            BasicError,
            OrgsOrgCopilotBillingSelectedUsersDeleteBody,
            OrgsOrgCopilotBillingSelectedUsersDeleteResponse200,
        )

        url = f"/orgs/{org}/copilot/billing/selected_users"

        headers = {
            "Content-Type": "application/json",
            "X-GitHub-Api-Version": self._REST_API_VERSION,
            **(headers or {}),
        }

        json = kwargs if data is UNSET else data
        if self._github.config.rest_api_validate_body:
            json = type_validate_python(
                OrgsOrgCopilotBillingSelectedUsersDeleteBody, json
            )
        json = model_dump(json) if isinstance(json, BaseModel) else json

        return self._github.request(
            "DELETE",
            url,
            json=exclude_unset(json),
            headers=exclude_unset(headers),
            response_model=OrgsOrgCopilotBillingSelectedUsersDeleteResponse200,
            error_models={
                "500": BasicError,
                "401": BasicError,
                "403": BasicError,
                "404": BasicError,
            },
        )

    @overload
    async def async_cancel_copilot_seat_assignment_for_users(
        self,
        org: str,
        *,
        headers: Optional[Mapping[str, str]] = None,
        data: OrgsOrgCopilotBillingSelectedUsersDeleteBodyType,
    ) -> Response[
        OrgsOrgCopilotBillingSelectedUsersDeleteResponse200,
        OrgsOrgCopilotBillingSelectedUsersDeleteResponse200Type,
    ]: ...

    @overload
    async def async_cancel_copilot_seat_assignment_for_users(
        self,
        org: str,
        *,
        data: UnsetType = UNSET,
        headers: Optional[Mapping[str, str]] = None,
        selected_usernames: list[str],
    ) -> Response[
        OrgsOrgCopilotBillingSelectedUsersDeleteResponse200,
        OrgsOrgCopilotBillingSelectedUsersDeleteResponse200Type,
    ]: ...

    async def async_cancel_copilot_seat_assignment_for_users(
        self,
        org: str,
        *,
        headers: Optional[Mapping[str, str]] = None,
        data: Missing[OrgsOrgCopilotBillingSelectedUsersDeleteBodyType] = UNSET,
        **kwargs,
    ) -> Response[
        OrgsOrgCopilotBillingSelectedUsersDeleteResponse200,
        OrgsOrgCopilotBillingSelectedUsersDeleteResponse200Type,
    ]:
        """copilot/cancel-copilot-seat-assignment-for-users

        DELETE /orgs/{org}/copilot/billing/selected_users

        > [!NOTE]
        > This endpoint is in public preview and is subject to change.

        Sets seats for all users specified to "pending cancellation".
        This will cause the specified users to lose access to GitHub Copilot at the end of the current billing cycle unless they retain access through team membership.
        For more information about disabling access to Copilot, see "[Revoking access to Copilot for members of your organization](https://docs.github.com/enterprise-cloud@latest//copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-access-to-github-copilot-in-your-organization/revoking-access-to-copilot-for-members-of-your-organization)."

        Only organization owners can cancel Copilot seats for their organization members.

        The response contains the total number of seats set to "pending cancellation".

        OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.

        See also: https://docs.github.com/enterprise-cloud@latest//rest/copilot/copilot-user-management#remove-users-from-the-copilot-subscription-for-an-organization
        """

        from ..models import (
            BasicError,
            OrgsOrgCopilotBillingSelectedUsersDeleteBody,
            OrgsOrgCopilotBillingSelectedUsersDeleteResponse200,
        )

        url = f"/orgs/{org}/copilot/billing/selected_users"

        headers = {
            "Content-Type": "application/json",
            "X-GitHub-Api-Version": self._REST_API_VERSION,
            **(headers or {}),
        }

        json = kwargs if data is UNSET else data
        if self._github.config.rest_api_validate_body:
            json = type_validate_python(
                OrgsOrgCopilotBillingSelectedUsersDeleteBody, json
            )
        json = model_dump(json) if isinstance(json, BaseModel) else json

        return await self._github.arequest(
            "DELETE",
            url,
            json=exclude_unset(json),
            headers=exclude_unset(headers),
            response_model=OrgsOrgCopilotBillingSelectedUsersDeleteResponse200,
            error_models={
                "500": BasicError,
                "401": BasicError,
                "403": BasicError,
                "404": BasicError,
            },
        )

    def copilot_metrics_for_organization(
        self,
        org: str,
        *,
        since: Missing[str] = UNSET,
        until: Missing[str] = UNSET,
        page: Missing[int] = UNSET,
        per_page: Missing[int] = UNSET,
        headers: Optional[Mapping[str, str]] = None,
    ) -> Response[list[CopilotUsageMetricsDay], list[CopilotUsageMetricsDayType]]:
        """copilot/copilot-metrics-for-organization

        GET /orgs/{org}/copilot/metrics

        Use this endpoint to see a breakdown of aggregated metrics for various GitHub Copilot features. See the response schema tab for detailed metrics definitions.

        > [!NOTE]
        > This endpoint will only return results for a given day if the organization contained **five or more members with active Copilot licenses** on that day, as evaluated at the end of that day.

        The response contains metrics for up to 28 days prior. Metrics are processed once per day for the previous day,
        and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics,
        they must have telemetry enabled in their IDE.

        To access this endpoint, the Copilot Metrics API access policy must be enabled for the organization.
        Only organization owners and owners and billing managers of the parent enterprise can view Copilot metrics.

        OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot`, `read:org`, or `read:enterprise` scopes to use this endpoint.

        See also: https://docs.github.com/enterprise-cloud@latest//rest/copilot/copilot-metrics#get-copilot-metrics-for-an-organization
        """

        from ..models import BasicError, CopilotUsageMetricsDay

        url = f"/orgs/{org}/copilot/metrics"

        params = {
            "since": since,
            "until": until,
            "page": page,
            "per_page": per_page,
        }

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return self._github.request(
            "GET",
            url,
            params=exclude_unset(params),
            headers=exclude_unset(headers),
            response_model=list[CopilotUsageMetricsDay],
            error_models={
                "500": BasicError,
                "403": BasicError,
                "404": BasicError,
                "422": BasicError,
            },
        )

    async def async_copilot_metrics_for_organization(
        self,
        org: str,
        *,
        since: Missing[str] = UNSET,
        until: Missing[str] = UNSET,
        page: Missing[int] = UNSET,
        per_page: Missing[int] = UNSET,
        headers: Optional[Mapping[str, str]] = None,
    ) -> Response[list[CopilotUsageMetricsDay], list[CopilotUsageMetricsDayType]]:
        """copilot/copilot-metrics-for-organization

        GET /orgs/{org}/copilot/metrics

        Use this endpoint to see a breakdown of aggregated metrics for various GitHub Copilot features. See the response schema tab for detailed metrics definitions.

        > [!NOTE]
        > This endpoint will only return results for a given day if the organization contained **five or more members with active Copilot licenses** on that day, as evaluated at the end of that day.

        The response contains metrics for up to 28 days prior. Metrics are processed once per day for the previous day,
        and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics,
        they must have telemetry enabled in their IDE.

        To access this endpoint, the Copilot Metrics API access policy must be enabled for the organization.
        Only organization owners and owners and billing managers of the parent enterprise can view Copilot metrics.

        OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot`, `read:org`, or `read:enterprise` scopes to use this endpoint.

        See also: https://docs.github.com/enterprise-cloud@latest//rest/copilot/copilot-metrics#get-copilot-metrics-for-an-organization
        """

        from ..models import BasicError, CopilotUsageMetricsDay

        url = f"/orgs/{org}/copilot/metrics"

        params = {
            "since": since,
            "until": until,
            "page": page,
            "per_page": per_page,
        }

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return await self._github.arequest(
            "GET",
            url,
            params=exclude_unset(params),
            headers=exclude_unset(headers),
            response_model=list[CopilotUsageMetricsDay],
            error_models={
                "500": BasicError,
                "403": BasicError,
                "404": BasicError,
                "422": BasicError,
            },
        )

    def get_copilot_seat_details_for_user(
        self,
        org: str,
        username: str,
        *,
        headers: Optional[Mapping[str, str]] = None,
    ) -> Response[CopilotSeatDetails, CopilotSeatDetailsType]:
        """copilot/get-copilot-seat-details-for-user

        GET /orgs/{org}/members/{username}/copilot

        > [!NOTE]
        > This endpoint is in public preview and is subject to change.

        Gets the GitHub Copilot seat details for a member of an organization who currently has access to GitHub Copilot.

        The seat object contains information about the user's most recent Copilot activity. Users must have telemetry enabled in their IDE for Copilot in the IDE activity to be reflected in `last_activity_at`.
        For more information about activity data, see "[Reviewing user activity data for Copilot in your organization](https://docs.github.com/enterprise-cloud@latest//copilot/managing-copilot/managing-github-copilot-in-your-organization/reviewing-activity-related-to-github-copilot-in-your-organization/reviewing-user-activity-data-for-copilot-in-your-organization)."

        Only organization owners can view Copilot seat assignment details for members of their organization.

        OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:org` scopes to use this endpoint.

        See also: https://docs.github.com/enterprise-cloud@latest//rest/copilot/copilot-user-management#get-copilot-seat-assignment-details-for-a-user
        """

        from ..models import BasicError, CopilotSeatDetails

        url = f"/orgs/{org}/members/{username}/copilot"

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return self._github.request(
            "GET",
            url,
            headers=exclude_unset(headers),
            response_model=CopilotSeatDetails,
            error_models={
                "500": BasicError,
                "401": BasicError,
                "403": BasicError,
                "404": BasicError,
            },
        )

    async def async_get_copilot_seat_details_for_user(
        self,
        org: str,
        username: str,
        *,
        headers: Optional[Mapping[str, str]] = None,
    ) -> Response[CopilotSeatDetails, CopilotSeatDetailsType]:
        """copilot/get-copilot-seat-details-for-user

        GET /orgs/{org}/members/{username}/copilot

        > [!NOTE]
        > This endpoint is in public preview and is subject to change.

        Gets the GitHub Copilot seat details for a member of an organization who currently has access to GitHub Copilot.

        The seat object contains information about the user's most recent Copilot activity. Users must have telemetry enabled in their IDE for Copilot in the IDE activity to be reflected in `last_activity_at`.
        For more information about activity data, see "[Reviewing user activity data for Copilot in your organization](https://docs.github.com/enterprise-cloud@latest//copilot/managing-copilot/managing-github-copilot-in-your-organization/reviewing-activity-related-to-github-copilot-in-your-organization/reviewing-user-activity-data-for-copilot-in-your-organization)."

        Only organization owners can view Copilot seat assignment details for members of their organization.

        OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:org` scopes to use this endpoint.

        See also: https://docs.github.com/enterprise-cloud@latest//rest/copilot/copilot-user-management#get-copilot-seat-assignment-details-for-a-user
        """

        from ..models import BasicError, CopilotSeatDetails

        url = f"/orgs/{org}/members/{username}/copilot"

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return await self._github.arequest(
            "GET",
            url,
            headers=exclude_unset(headers),
            response_model=CopilotSeatDetails,
            error_models={
                "500": BasicError,
                "401": BasicError,
                "403": BasicError,
                "404": BasicError,
            },
        )

    def copilot_metrics_for_team(
        self,
        org: str,
        team_slug: str,
        *,
        since: Missing[str] = UNSET,
        until: Missing[str] = UNSET,
        page: Missing[int] = UNSET,
        per_page: Missing[int] = UNSET,
        headers: Optional[Mapping[str, str]] = None,
    ) -> Response[list[CopilotUsageMetricsDay], list[CopilotUsageMetricsDayType]]:
        """copilot/copilot-metrics-for-team

        GET /orgs/{org}/team/{team_slug}/copilot/metrics

        Use this endpoint to see a breakdown of aggregated metrics for various GitHub Copilot features. See the response schema tab for detailed metrics definitions.

        > [!NOTE]
        > This endpoint will only return results for a given day if the team had **five or more members with active Copilot licenses** on that day, as evaluated at the end of that day.

        The response contains metrics for up to 28 days prior. Metrics are processed once per day for the previous day,
        and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics,
        they must have telemetry enabled in their IDE.

        To access this endpoint, the Copilot Metrics API access policy must be enabled for the organization containing the team within GitHub settings.
        Only organization owners for the organization that contains this team and owners and billing managers of the parent enterprise can view Copilot metrics for a team.

        OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot`, `read:org`, or `read:enterprise` scopes to use this endpoint.

        See also: https://docs.github.com/enterprise-cloud@latest//rest/copilot/copilot-metrics#get-copilot-metrics-for-a-team
        """

        from ..models import BasicError, CopilotUsageMetricsDay

        url = f"/orgs/{org}/team/{team_slug}/copilot/metrics"

        params = {
            "since": since,
            "until": until,
            "page": page,
            "per_page": per_page,
        }

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return self._github.request(
            "GET",
            url,
            params=exclude_unset(params),
            headers=exclude_unset(headers),
            response_model=list[CopilotUsageMetricsDay],
            error_models={
                "500": BasicError,
                "403": BasicError,
                "404": BasicError,
                "422": BasicError,
            },
        )

    async def async_copilot_metrics_for_team(
        self,
        org: str,
        team_slug: str,
        *,
        since: Missing[str] = UNSET,
        until: Missing[str] = UNSET,
        page: Missing[int] = UNSET,
        per_page: Missing[int] = UNSET,
        headers: Optional[Mapping[str, str]] = None,
    ) -> Response[list[CopilotUsageMetricsDay], list[CopilotUsageMetricsDayType]]:
        """copilot/copilot-metrics-for-team

        GET /orgs/{org}/team/{team_slug}/copilot/metrics

        Use this endpoint to see a breakdown of aggregated metrics for various GitHub Copilot features. See the response schema tab for detailed metrics definitions.

        > [!NOTE]
        > This endpoint will only return results for a given day if the team had **five or more members with active Copilot licenses** on that day, as evaluated at the end of that day.

        The response contains metrics for up to 28 days prior. Metrics are processed once per day for the previous day,
        and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics,
        they must have telemetry enabled in their IDE.

        To access this endpoint, the Copilot Metrics API access policy must be enabled for the organization containing the team within GitHub settings.
        Only organization owners for the organization that contains this team and owners and billing managers of the parent enterprise can view Copilot metrics for a team.

        OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot`, `read:org`, or `read:enterprise` scopes to use this endpoint.

        See also: https://docs.github.com/enterprise-cloud@latest//rest/copilot/copilot-metrics#get-copilot-metrics-for-a-team
        """

        from ..models import BasicError, CopilotUsageMetricsDay

        url = f"/orgs/{org}/team/{team_slug}/copilot/metrics"

        params = {
            "since": since,
            "until": until,
            "page": page,
            "per_page": per_page,
        }

        headers = {"X-GitHub-Api-Version": self._REST_API_VERSION, **(headers or {})}

        return await self._github.arequest(
            "GET",
            url,
            params=exclude_unset(params),
            headers=exclude_unset(headers),
            response_model=list[CopilotUsageMetricsDay],
            error_models={
                "500": BasicError,
                "403": BasicError,
                "404": BasicError,
                "422": BasicError,
            },
        )
