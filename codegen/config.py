from pathlib import Path
from typing import Any

from pydantic import BaseModel, Field
from tomlkit import aot, comment, document, inline_table, item, table
from tomlkit.items import Table
from tomlkit.toml_document import TOMLDocument


class Override(BaseModel):
    class_overrides: dict[str, str] = Field(default_factory=dict)
    field_overrides: dict[str, str] = Field(default_factory=dict)
    schema_overrides: dict[str, dict[str, Any]] = Field(default_factory=dict)


class VersionedOverride(Override):
    target_descriptions: list[str] = Field(default_factory=list)

    def to_lock(self) -> Table:
        tab = table()
        if self.target_descriptions:
            tab.append("target_descriptions", item(self.target_descriptions))
        if self.class_overrides:
            class_tab = table()
            for key, value in self.class_overrides.items():
                class_tab.append(key, value)
            tab.append("class_overrides", class_tab)
        if self.field_overrides:
            field_tab = table()
            for key, value in self.field_overrides.items():
                field_tab.append(key, value)
            tab.append("field_overrides", field_tab)
        if self.schema_overrides:
            schema_tab = table()
            for key, value in self.schema_overrides.items():
                value_table = inline_table()
                value_table.update(value)
                schema_tab.append(key, value_table)
            tab.append("schema_overrides", schema_tab)
        return tab


class DescriptionConfig(BaseModel):
    version: str
    """The version name used in the rest api header."""
    identifier: str
    """The identifier used in githubkit api versioning."""
    module: str
    """The module name used in githubkit versions."""
    is_latest: bool = False
    """If true, the description will be used as the default description."""
    source: str
    """Source link to the description file."""

    _actual_source: str | None = None
    """The actual source link after downloading, if applicable."""

    @property
    def actual_source(self) -> str:
        """Returns the actual source link after downloading, if applicable."""
        return self._actual_source or self.source

    def to_lock(self) -> Table:
        tab = table()
        tab.update(
            {
                "version": self.version,
                "identifier": self.identifier,
                "module": self.module,
                "is_latest": self.is_latest,
                "source": self.actual_source,
            }
        )
        return tab


class GenerationInfo(BaseModel):
    descriptions: list[DescriptionConfig]
    overrides: list[VersionedOverride] = Field(default_factory=list)

    def get_override_config_for_version(self, version_id: str) -> Override:
        selected_overrides = [
            override
            for override in self.overrides
            if version_id in override.target_descriptions
            or not override.target_descriptions
        ]
        return Override(
            class_overrides={
                key: value
                for override in selected_overrides
                for key, value in override.class_overrides.items()
            },
            field_overrides={
                key: value
                for override in selected_overrides
                for key, value in override.field_overrides.items()
            },
            schema_overrides={
                key: value
                for override in selected_overrides
                for key, value in override.schema_overrides.items()
            },
        )

    def to_lock(self) -> TOMLDocument:
        doc = document()
        doc.append(None, comment("DO NOT EDIT THIS FILE!"))
        doc.append(None, comment("This file is automatically @generated by githubkit."))

        descriptions_aot = aot()
        for description in self.descriptions:
            descriptions_aot.append(description.to_lock())
        doc.append("descriptions", descriptions_aot)

        overrides_aot = aot()
        for override in self.overrides:
            overrides_aot.append(override.to_lock())
        doc.append("overrides", overrides_aot)
        return doc


class Config(GenerationInfo):
    output_dir: Path
    legacy_rest_models: Path
