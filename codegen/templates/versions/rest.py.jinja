{% from "header.jinja" import header %}

"""{{ header() }}"""

import importlib
from typing import TYPE_CHECKING, Any, Dict, Literal, overload

from . import VERSIONS, LATEST_VERSION, VERSION_TYPE

if TYPE_CHECKING:
    from githubkit import GitHubCore
    {% for version, module in versions.items() %}
    from .{{ module }}.rest import RestNamespace as {{ pascal_case(module) }}RestNamespace
    {% endfor %}

if TYPE_CHECKING:

    class _VersionProxy({{ pascal_case(versions[latest_version]) }}RestNamespace):
        ...

else:
    _VersionProxy = object

class RestVersionSwitcher(_VersionProxy):
    _cached_namespaces: Dict[VERSION_TYPE, Any] = {}

    if not TYPE_CHECKING:
        def __getattr__(self, name: str) -> Any:
            namespace = self()
            return getattr(namespace, name)

    def __init__(self, github: "GitHubCore"):
        self._github = github

    {% for version, module in versions.items() %}
    @overload
    def __call__(self, version: Literal["{{ version }}"]) -> "{{ pascal_case(module) }}RestNamespace":
        ...
    {% endfor %}

    @overload
    def __call__(self) -> "{{ pascal_case(versions[latest_version]) }}RestNamespace":
        ...

    def __call__(self, version: VERSION_TYPE = LATEST_VERSION) -> Any:
        if version in self._cached_namespaces:
            return self._cached_namespaces[version]
        module = importlib.import_module(f"{{ output_module }}.{VERSIONS[version]}.rest", __name__)
        namespace = module.RestNamespace(self._github)
        self._cached_namespaces[version] = namespace
        return namespace
